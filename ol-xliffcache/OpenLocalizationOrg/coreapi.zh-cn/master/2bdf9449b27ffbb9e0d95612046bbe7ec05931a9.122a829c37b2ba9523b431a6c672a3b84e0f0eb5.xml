{"nodes":[{"pos":[3278,3302],"content":"RSACryptoServiceProvider","needQuote":true,"nodes":[{"content":"RSACryptoServiceProvider","pos":[0,24]}]},{"pos":[7058,7084],"content":"RSACryptoServiceProvider()","needQuote":true,"nodes":[{"content":"RSACryptoServiceProvider()","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The cryptographic service provider (CSP) cannot be acquired.","pos":[8043,8108],"source":"\\n<p>The cryptographic service provider (CSP) cannot be acquired."},{"content":"&lt;/p&gt;\\n","pos":[8109,8115],"source":" </p>\\n"},{"pos":[8540,8571],"content":"RSACryptoServiceProvider(Int32)","needQuote":true,"nodes":[{"content":"RSACryptoServiceProvider(Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The size of the key to use in bits.","pos":[9501,9541],"source":"\\n<p>The size of the key to use in bits."},{"content":"&lt;/p&gt;\\n","pos":[9542,9548],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The cryptographic service provider (CSP) cannot be acquired.","pos":[9713,9778],"source":"\\n<p>The cryptographic service provider (CSP) cannot be acquired."},{"content":"&lt;/p&gt;\\n","pos":[9779,9785],"source":" </p>\\n"},{"pos":[10344,10390],"content":"RSACryptoServiceProvider(Int32, CspParameters)","needQuote":true,"nodes":[{"content":"RSACryptoServiceProvider(Int32, CspParameters)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The size of the key to use in bits.","pos":[11434,11474],"source":"\\n<p>The size of the key to use in bits."},{"content":"&lt;/p&gt;\\n","pos":[11475,11481],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The parameters to be passed to the cryptographic service provider (CSP).","pos":[11579,11656],"source":"\\n<p>The parameters to be passed to the cryptographic service provider (CSP)."},{"content":"&lt;/p&gt;\\n","pos":[11657,11663],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The CSP cannot be acquired.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The key cannot be created.","pos":[11828,11909],"source":"\\n<p>The CSP cannot be acquired.</p>\\n<p>-or- </p>\\n<p>The key cannot be created."},{"content":"&lt;/p&gt;\\n","pos":[11910,11916],"source":" </p>\\n"},{"pos":[12451,12490],"content":"RSACryptoServiceProvider(CspParameters)","needQuote":true,"nodes":[{"content":"RSACryptoServiceProvider(CspParameters)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The parameters to be passed to the cryptographic service provider (CSP).","pos":[13501,13578],"source":"\\n<p>The parameters to be passed to the cryptographic service provider (CSP)."},{"content":"&lt;/p&gt;\\n","pos":[13579,13585],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The CSP cannot be acquired.","pos":[13750,13782],"source":"\\n<p>The CSP cannot be acquired."},{"content":"&lt;/p&gt;\\n","pos":[13783,13789],"source":" </p>\\n"},{"pos":[14225,14244],"content":"CspKeyContainerInfo","needQuote":true,"nodes":[{"content":"CspKeyContainerInfo","pos":[0,19]}]},{"pos":[15938,15945],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The size of the key in bits.&lt;/p&gt;\\n","pos":[16696,16735],"source":"\\n<p>The size of the key in bits.</p>\\n"},{"pos":[17246,17261],"content":"PersistKeyInCsp","needQuote":true,"nodes":[{"content":"PersistKeyInCsp","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key should be persisted in the CSP; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18103,18215],"source":"\\n<p>\\n<strong>true</strong> if the key should be persisted in the CSP; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[18794,18804],"content":"PublicOnly","needQuote":true,"nodes":[{"content":"PublicOnly","pos":[0,10]}]},{"pos":[20356,20374],"content":"UseMachineKeyStore","needQuote":true,"nodes":[{"content":"UseMachineKeyStore","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key should be persisted in the computer key store; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21260,21387],"source":"\\n<p>\\n<strong>true</strong> if the key should be persisted in the computer key store; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[21894,21918],"content":"Decrypt(Byte[], Boolean)","needQuote":true,"nodes":[{"content":"Decrypt(Byte[], Boolean)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The data to be decrypted.","pos":[22813,22843],"source":"\\n<p>The data to be decrypted."},{"content":"&lt;/p&gt;\\n","pos":[22844,22850],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The decrypted data, which is the original plain text before encryption.&lt;/p&gt;\\n","pos":[23283,23365],"source":"\\n<p>The decrypted data, which is the original plain text before encryption.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgb &lt;/em&gt;is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24281,24332],"source":"\\n<p>\\n<em>rgb </em>is <strong>null</strong>.</p>\\n"},{"pos":[25303,25340],"content":"Decrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Decrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The data to decrypt.","pos":[26387,26412],"source":"\\n<p>The data to decrypt."},{"content":"&lt;/p&gt;\\n","pos":[26413,26419],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding.","pos":[26521,26538],"source":"\\n<p>The padding."},{"content":"&lt;/p&gt;\\n","pos":[26539,26545],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The decrypted data.","pos":[26605,26629],"source":"\\n<p>The decrypted data."},{"content":"&lt;/p&gt;\\n","pos":[26630,26636],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[26875,26921],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[26922,26988],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[26989,26995],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding mode is not supported.&lt;/p&gt;\\n","pos":[27146,27191],"source":"\\n<p>The padding mode is not supported.</p>\\n"},{"pos":[27938,27954],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[29244,29268],"content":"Encrypt(Byte[], Boolean)","needQuote":true,"nodes":[{"content":"Encrypt(Byte[], Boolean)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The data to be encrypted.","pos":[30163,30193],"source":"\\n<p>The data to be encrypted."},{"content":"&lt;/p&gt;\\n","pos":[30194,30200],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The encrypted data.&lt;/p&gt;\\n","pos":[30623,30653],"source":"\\n<p>The encrypted data.</p>\\n"},{"content":"\\n&lt;p&gt;The cryptographic service provider (CSP) cannot be acquired.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The length of the &lt;em&gt;rgb&lt;/em&gt; parameter is greater than the maximum allowed length.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;fOAEP&lt;/em&gt; parameter is &lt;strong&gt;true&lt;/strong&gt; and OAEP padding is not supported.","pos":[30818,31101],"source":"\\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\\n<p>-or- </p>\\n<p>The length of the <em>rgb</em> parameter is greater than the maximum allowed length.</p>\\n<p>-or- </p>\\n<p>The <em>fOAEP</em> parameter is <strong>true</strong> and OAEP padding is not supported."},{"content":"&lt;/p&gt;\\n","pos":[31102,31108],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgb &lt;/em&gt;is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[31213,31264],"source":"\\n<p>\\n<em>rgb </em>is <strong>null</strong>.</p>\\n"},{"pos":[32057,32094],"content":"Encrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Encrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The data to encrypt.","pos":[33108,33133],"source":"\\n<p>The data to encrypt."},{"content":"&lt;/p&gt;\\n","pos":[33134,33140],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding.","pos":[33242,33259],"source":"\\n<p>The padding."},{"content":"&lt;/p&gt;\\n","pos":[33260,33266],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The encrypted data.","pos":[33326,33350],"source":"\\n<p>The encrypted data."},{"content":"&lt;/p&gt;\\n","pos":[33351,33357],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[33596,33642],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[33643,33709],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[33710,33716],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding mode is not supported.&lt;/p&gt;\\n","pos":[33867,33912],"source":"\\n<p>The padding mode is not supported.</p>\\n"},{"pos":[34677,34699],"content":"ExportCspBlob(Boolean)","needQuote":true,"nodes":[{"content":"ExportCspBlob(Boolean)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to include the private key; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35698,35795],"source":"\\n<p>\\n<strong>true</strong> to include the private key; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[36787,36812],"content":"ExportParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to include private parameters; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[37783,37877],"source":"\\n<p>\\n<strong>true</strong> to include private parameters; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[37878,37884],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The key cannot be exported.","pos":[38341,38373],"source":"\\n<p>The key cannot be exported."},{"content":"&lt;/p&gt;\\n","pos":[38374,38380],"source":" </p>\\n"},{"pos":[39238,39287],"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","pos":[0,49]}]},{"pos":[41513,41548],"content":"HashData(Stream, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Stream, HashAlgorithmName)","pos":[0,35]}]},{"pos":[43113,43134],"content":"ImportCspBlob(Byte[])","needQuote":true,"nodes":[{"content":"ImportCspBlob(Byte[])","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A byte array that represents an RSA key blob.&lt;/p&gt;\\n","pos":[43929,43985],"source":"\\n<p>A byte array that represents an RSA key blob.</p>\\n"},{"pos":[45001,45032],"content":"ImportParameters(RSAParameters)","needQuote":true,"nodes":[{"content":"ImportParameters(RSAParameters)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The cryptographic service provider (CSP) cannot be acquired.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parameters&lt;/em&gt; parameter has missing fields.","pos":[46408,46549],"source":"\\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\\n<p>-or- </p>\\n<p>The <em>parameters</em> parameter has missing fields."},{"content":"&lt;/p&gt;\\n","pos":[46550,46556],"source":" </p>\\n"},{"pos":[47171,47184],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[48583,48621],"content":"SignData(Byte[], Int32, Int32, Object)","needQuote":true,"nodes":[{"content":"SignData(Byte[], Int32, Int32, Object)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The input data for which to compute the hash.","pos":[49624,49674],"source":"\\n<p>The input data for which to compute the hash."},{"content":"&lt;/p&gt;\\n","pos":[49675,49681],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The offset into the array from which to begin using data.","pos":[49745,49807],"source":"\\n<p>The offset into the array from which to begin using data."},{"content":"&lt;/p&gt;\\n","pos":[49808,49814],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes in the array to use as data.","pos":[49877,49930],"source":"\\n<p>The number of bytes in the array to use as data."},{"content":"&lt;/p&gt;\\n","pos":[49931,49937],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm to use to create the hash value.","pos":[50000,50056],"source":"\\n<p>The hash algorithm to use to create the hash value."},{"content":"&lt;/p&gt;\\n","pos":[50057,50063],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;halg&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[50383,50441],"source":"\\n<p>The <em>halg</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[50442,50448],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;halg&lt;/em&gt; parameter is not a valid type.","pos":[50545,50598],"source":"\\n<p>The <em>halg</em> parameter is not a valid type."},{"content":"&lt;/p&gt;\\n","pos":[50599,50605],"source":" </p>\\n"},{"pos":[51363,51387],"content":"SignData(Byte[], Object)","needQuote":true,"nodes":[{"content":"SignData(Byte[], Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The input data for which to compute the hash.","pos":[52290,52340],"source":"\\n<p>The input data for which to compute the hash."},{"content":"&lt;/p&gt;\\n","pos":[52341,52347],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm to use to create the hash value.","pos":[52410,52466],"source":"\\n<p>The hash algorithm to use to create the hash value."},{"content":"&lt;/p&gt;\\n","pos":[52467,52473],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;halg&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[52793,52851],"source":"\\n<p>The <em>halg</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[52852,52858],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;halg&lt;/em&gt; parameter is not a valid type.","pos":[52955,53008],"source":"\\n<p>The <em>halg</em> parameter is not a valid type."},{"content":"&lt;/p&gt;\\n","pos":[53009,53015],"source":" </p>\\n"},{"pos":[53712,53736],"content":"SignData(Stream, Object)","needQuote":true,"nodes":[{"content":"SignData(Stream, Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The input data for which to compute the hash.","pos":[54662,54712],"source":"\\n<p>The input data for which to compute the hash."},{"content":"&lt;/p&gt;\\n","pos":[54713,54719],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm to use to create the hash value.","pos":[54782,54838],"source":"\\n<p>The hash algorithm to use to create the hash value."},{"content":"&lt;/p&gt;\\n","pos":[54839,54845],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;halg&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[55165,55223],"source":"\\n<p>The <em>halg</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[55224,55230],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;halg&lt;/em&gt; parameter is not a valid type.","pos":[55327,55380],"source":"\\n<p>The <em>halg</em> parameter is not a valid type."},{"content":"&lt;/p&gt;\\n","pos":[55381,55387],"source":" </p>\\n"},{"pos":[56108,56164],"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The hash value of the data to be signed.","pos":[57260,57305],"source":"\\n<p>The hash value of the data to be signed."},{"content":"&lt;/p&gt;\\n","pos":[57306,57312],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm name used to create the hash value of the data.","pos":[57417,57488],"source":"\\n<p>The hash algorithm name used to create the hash value of the data."},{"content":"&lt;/p&gt;\\n","pos":[57489,57495],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding.","pos":[57596,57613],"source":"\\n<p>The padding."},{"content":"&lt;/p&gt;\\n","pos":[57614,57620],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;hash&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[58356,58402],"source":"\\n<p>\\n<em>hash</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[58403,58469],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[58470,58476],"source":" </p>\\n"},{"pos":[59682,59706],"content":"SignHash(Byte[], String)","needQuote":true,"nodes":[{"content":"SignHash(Byte[], String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The hash value of the data to be signed.","pos":[60577,60622],"source":"\\n<p>The hash value of the data to be signed."},{"content":"&lt;/p&gt;\\n","pos":[60623,60629],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm identifier (OID) used to create the hash value of the data.","pos":[60691,60774],"source":"\\n<p>The hash algorithm identifier (OID) used to create the hash value of the data."},{"content":"&lt;/p&gt;\\n","pos":[60775,60781],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;rgbHash&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[61107,61168],"source":"\\n<p>The <em>rgbHash</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[61169,61175],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The cryptographic service provider (CSP) cannot be acquired.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;There is no private key.","pos":[61326,61438],"source":"\\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\\n<p>-or- </p>\\n<p>There is no private key."},{"content":"&lt;/p&gt;\\n","pos":[61439,61445],"source":" </p>\\n"},{"pos":[62359,62393],"content":"VerifyData(Byte[], Object, Byte[])","needQuote":true,"nodes":[{"content":"VerifyData(Byte[], Object, Byte[])","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The data that was signed.","pos":[63410,63440],"source":"\\n<p>The data that was signed."},{"content":"&lt;/p&gt;\\n","pos":[63441,63447],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The name of the hash algorithm used to create the hash value of the data.","pos":[63510,63588],"source":"\\n<p>The name of the hash algorithm used to create the hash value of the data."},{"content":"&lt;/p&gt;\\n","pos":[63589,63595],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The signature data to be verified.","pos":[63663,63702],"source":"\\n<p>The signature data to be verified."},{"content":"&lt;/p&gt;\\n","pos":[63703,63709],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signature is valid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[63770,63866],"source":"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;halg&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[63985,64043],"source":"\\n<p>The <em>halg</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[64044,64050],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;halg&lt;/em&gt; parameter is not a valid type.","pos":[64147,64200],"source":"\\n<p>The <em>halg</em> parameter is not a valid type."},{"content":"&lt;/p&gt;\\n","pos":[64201,64207],"source":" </p>\\n"},{"pos":[65236,65302],"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;The hash value of the signed data.","pos":[66526,66565],"source":"\\n<p>The hash value of the signed data."},{"content":"&lt;/p&gt;\\n","pos":[66566,66572],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The signature data to be verified.","pos":[66640,66679],"source":"\\n<p>The signature data to be verified."},{"content":"&lt;/p&gt;\\n","pos":[66680,66686],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm name used to create the hash value.","pos":[66791,66850],"source":"\\n<p>The hash algorithm name used to create the hash value."},{"content":"&lt;/p&gt;\\n","pos":[66851,66857],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding.","pos":[66958,66975],"source":"\\n<p>The padding."},{"content":"&lt;/p&gt;\\n","pos":[66976,66982],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signature is valid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[67043,67133],"source":"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[67134,67140],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;hash&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[67684,67730],"source":"\\n<p>\\n<em>hash</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[67731,67797],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[67798,67804],"source":" </p>\\n"},{"pos":[69105,69139],"content":"VerifyHash(Byte[], String, Byte[])","needQuote":true,"nodes":[{"content":"VerifyHash(Byte[], String, Byte[])","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The hash value of the signed data.","pos":[70151,70190],"source":"\\n<p>The hash value of the signed data."},{"content":"&lt;/p&gt;\\n","pos":[70191,70197],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm identifier (OID) used to create the hash value of the data.","pos":[70259,70342],"source":"\\n<p>The hash algorithm identifier (OID) used to create the hash value of the data."},{"content":"&lt;/p&gt;\\n","pos":[70343,70349],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The signature data to be verified.","pos":[70420,70459],"source":"\\n<p>The signature data to be verified."},{"content":"&lt;/p&gt;\\n","pos":[70460,70466],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signature is valid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[70527,70623],"source":"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;rgbHash&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;rgbSignature&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[70742,70887],"source":"\\n<p>The <em>rgbHash</em> parameter is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>The <em>rgbSignature</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[70888,70894],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The cryptographic service provider (CSP) cannot be acquired.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The signature cannot be verified.","pos":[71045,71166],"source":"\\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\\n<p>-or- </p>\\n<p>The signature cannot be verified."},{"content":"&lt;/p&gt;\\n","pos":[71167,71173],"source":" </p>\\n"},{"pos":[71635,71663],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[71860,71866],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72068,72087],"content":"AsymmetricAlgorithm","needQuote":true,"nodes":[{"content":"AsymmetricAlgorithm","pos":[0,19]}]},{"pos":[72356,72359],"content":"RSA","needQuote":true,"nodes":[{"content":"RSA","pos":[0,3]}]},{"pos":[72544,72555],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[72776,72799],"content":"ICspAsymmetricAlgorithm","needQuote":true,"nodes":[{"content":"ICspAsymmetricAlgorithm","pos":[0,23]}]},{"pos":[73090,73098],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[73227,73233],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[73319,73320],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73347,73348],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73435,73441],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[73527,73528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73555,73556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73789,73803],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[73960,73966],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[74052,74053],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74103,74109],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[74169,74170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74272,74278],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[74364,74365],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74415,74421],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[74481,74482],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74834,74890],"content":"SignData(Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignData(Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"pos":[75483,75491],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[75579,75580],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75628,75632],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[75691,75693]},{"content":",","pos":[75725,75726]},{"pos":[75814,75831],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[75925,75926]},{"pos":[76016,76035],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[76130,76131],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76331,76339],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[76427,76428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76476,76480],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[76538,76540],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[76569,76570]},{"pos":[76658,76675],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[76769,76770]},{"pos":[76860,76879],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[76974,76975],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77573,77643],"content":"SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)","pos":[0,70]}]},{"pos":[78332,78340],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[78428,78429],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78477,78481],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[78540,78542]},{"content":",","pos":[78574,78575]},{"pos":[78629,78634],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[78694,78695]},{"pos":[78749,78754],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[78814,78815]},{"pos":[78903,78920],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[79014,79015]},{"pos":[79105,79124],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[79219,79220],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79446,79454],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[79542,79543],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79591,79595],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[79653,79655],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[79684,79685]},{"pos":[79739,79744],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[79804,79805]},{"pos":[79859,79864],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[79924,79925]},{"pos":[80013,80030],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[80124,80125]},{"pos":[80215,80234],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[80329,80330],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80959,81015],"content":"SignData(Stream, HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignData(Stream, HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"pos":[81376,81384],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[81472,81473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81526,81532],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[81596,81597]},{"pos":[81685,81702],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[81796,81797]},{"pos":[81887,81906],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[82001,82002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82205,82213],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[82301,82302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82355,82361],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[82425,82426]},{"pos":[82514,82531],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[82625,82626]},{"pos":[82716,82735],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[82830,82831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83342,83408],"content":"VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"pos":[84061,84071],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[84161,84162],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84210,84214],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[84273,84275]},{"content":",","pos":[84307,84308]},{"pos":[84361,84365],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[84424,84426]},{"content":",","pos":[84458,84459]},{"pos":[84547,84564],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[84658,84659]},{"pos":[84749,84768],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[84863,84864],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85080,85090],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[85180,85181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85229,85233],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[85291,85293],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[85322,85323]},{"pos":[85376,85380],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[85438,85440],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[85469,85470]},{"pos":[85558,85575],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[85669,85670]},{"pos":[85760,85779],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[85874,85875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86525,86605],"content":"VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,80]}]},{"pos":[87354,87364],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[87454,87455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87503,87507],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[87566,87568]},{"content":",","pos":[87600,87601]},{"pos":[87655,87660],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[87720,87721]},{"pos":[87775,87780],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[87840,87841]},{"pos":[87894,87898],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[87957,87959]},{"content":",","pos":[87991,87992]},{"pos":[88080,88097],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[88191,88192]},{"pos":[88282,88301],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[88396,88397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88639,88649],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[88739,88740],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88788,88792],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[88850,88852],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[88881,88882]},{"pos":[88936,88941],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[89001,89002]},{"pos":[89056,89061],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[89121,89122]},{"pos":[89175,89179],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[89237,89239],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[89268,89269]},{"pos":[89357,89374],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[89468,89469]},{"pos":[89559,89578],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[89673,89674],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90355,90421],"content":"VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"pos":[91083,91093],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[91183,91184],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91237,91243],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[91307,91308]},{"pos":[91361,91365],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[91424,91426]},{"content":",","pos":[91458,91459]},{"pos":[91547,91564],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[91658,91659]},{"pos":[91749,91768],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[91863,91864],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92083,92093],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[92183,92184],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92237,92243],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[92307,92308]},{"pos":[92361,92365],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[92423,92425],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[92454,92455]},{"pos":[92543,92560],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[92654,92655]},{"pos":[92745,92764],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[92859,92860],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93379,93399],"content":"DecryptValue(Byte[])","needQuote":true,"nodes":[{"content":"DecryptValue(Byte[])","pos":[0,20]}]},{"pos":[93676,93688],"content":"DecryptValue","needQuote":true,"nodes":[{"content":"DecryptValue","pos":[0,12]}]},{"pos":[93780,93781],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93829,93833],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[93892,93894]},{"pos":[93925,93926],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94034,94046],"content":"DecryptValue","needQuote":true,"nodes":[{"content":"DecryptValue","pos":[0,12]}]},{"pos":[94138,94139],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94187,94191],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[94249,94251],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[94279,94280],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94596,94616],"content":"EncryptValue(Byte[])","needQuote":true,"nodes":[{"content":"EncryptValue(Byte[])","pos":[0,20]}]},{"pos":[94893,94905],"content":"EncryptValue","needQuote":true,"nodes":[{"content":"EncryptValue","pos":[0,12]}]},{"pos":[94997,94998],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95046,95050],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[95109,95111]},{"pos":[95142,95143],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95251,95263],"content":"EncryptValue","needQuote":true,"nodes":[{"content":"EncryptValue","pos":[0,12]}]},{"pos":[95355,95356],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95404,95408],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[95466,95468],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[95496,95497],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95814,95835],"content":"FromXmlString(String)","needQuote":true,"nodes":[{"content":"FromXmlString(String)","pos":[0,21]}]},{"pos":[96006,96019],"content":"FromXmlString","needQuote":true,"nodes":[{"content":"FromXmlString","pos":[0,13]}]},{"pos":[96112,96113],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96163,96169],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[96229,96230],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96339,96352],"content":"FromXmlString","needQuote":true,"nodes":[{"content":"FromXmlString","pos":[0,13]}]},{"pos":[96445,96446],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96496,96502],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[96562,96563],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96837,96857],"content":"ToXmlString(Boolean)","needQuote":true,"nodes":[{"content":"ToXmlString(Boolean)","pos":[0,20]}]},{"pos":[97026,97037],"content":"ToXmlString","needQuote":true,"nodes":[{"content":"ToXmlString","pos":[0,11]}]},{"pos":[97128,97129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97180,97187],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[97248,97249],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97357,97368],"content":"ToXmlString","needQuote":true,"nodes":[{"content":"ToXmlString","pos":[0,11]}]},{"pos":[97459,97460],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97511,97518],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[97579,97580],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97845,97865],"content":"KeyExchangeAlgorithm","needQuote":true,"nodes":[{"content":"KeyExchangeAlgorithm","pos":[0,20]}]},{"pos":[98171,98189],"content":"SignatureAlgorithm","needQuote":true,"nodes":[{"content":"SignatureAlgorithm","pos":[0,18]}]},{"pos":[98515,98527],"content":"KeySizeValue","needQuote":true,"nodes":[{"content":"KeySizeValue","pos":[0,12]}]},{"pos":[98889,98907],"content":"LegalKeySizesValue","needQuote":true,"nodes":[{"content":"LegalKeySizesValue","pos":[0,18]}]},{"pos":[99276,99285],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[99448,99455],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[99558,99559],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99586,99587],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99691,99698],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[99801,99802],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99829,99830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100113,100120],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[100279,100284],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[100385,100386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100413,100414],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100516,100521],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[100622,100623],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100650,100651],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100863,100873],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[100968,100976],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[101045,101046],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101073,101074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101144,101152],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[101221,101222],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101249,101250],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101433,101447],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[101566,101572],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[101639,101640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101690,101696],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[101756,101757],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101840,101846],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[101913,101914],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101964,101970],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[102030,102031],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102245,102267],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[102415,102421],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[102488,102489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102539,102545],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[102606,102607]},{"pos":[102662,102668],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[102728,102729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102826,102832],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[102899,102900],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102950,102956],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[103017,103018]},{"pos":[103073,103079],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[103139,103140],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103385,103416],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[103582,103597],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[103673,103674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103724,103730],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[103791,103792]},{"pos":[103847,103853],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[103913,103914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104020,104035],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[104111,104112],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104162,104168],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[104229,104230]},{"pos":[104285,104291],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[104351,104352],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104582,104595],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[104696,104707],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[104779,104780],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104807,104808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104881,104892],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[104964,104965],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104992,104993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105168,105177],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[105270,105277],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[105345,105346],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105373,105374],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105443,105450],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[105518,105519],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105546,105547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105722,105739],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[105848,105863],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[105939,105940],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105967,105968],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106045,106060],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[106136,106137],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106164,106165],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106310,106316],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[106446,106451],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[106644,106657],"content":"CspParameters","needQuote":true,"nodes":[{"content":"CspParameters","pos":[0,13]}]},{"pos":[106972,106991],"content":"CspKeyContainerInfo","needQuote":true,"nodes":[{"content":"CspKeyContainerInfo","pos":[0,19]}]},{"pos":[107348,107367],"content":"CspKeyContainerInfo","needQuote":true,"nodes":[{"content":"CspKeyContainerInfo","pos":[0,19]}]},{"pos":[107679,107686],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[107939,107946],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[108057,108063],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[108183,108187],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[108246,108248]},{"pos":[108311,108315],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[108373,108375],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[108625,108662],"content":"Decrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Decrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"pos":[109093,109100],"content":"Decrypt","needQuote":true,"nodes":[{"content":"Decrypt","pos":[0,7]}]},{"pos":[109187,109188],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109236,109240],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[109299,109301]},{"content":",","pos":[109333,109334]},{"pos":[109425,109445],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[109541,109542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109695,109702],"content":"Decrypt","needQuote":true,"nodes":[{"content":"Decrypt","pos":[0,7]}]},{"pos":[109789,109790],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109838,109842],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[109900,109902],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[109931,109932]},{"pos":[110023,110043],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[110139,110140],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110521,110541],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[110872,110888],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[111081,111088],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[111191,111192],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111243,111250],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[111311,111312],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111432,111439],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[111542,111543],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111594,111601],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[111662,111663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112004,112041],"content":"Encrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Encrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"pos":[112472,112479],"content":"Encrypt","needQuote":true,"nodes":[{"content":"Encrypt","pos":[0,7]}]},{"pos":[112566,112567],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112615,112619],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[112678,112680]},{"content":",","pos":[112712,112713]},{"pos":[112804,112824],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[112920,112921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113074,113081],"content":"Encrypt","needQuote":true,"nodes":[{"content":"Encrypt","pos":[0,7]}]},{"pos":[113168,113169],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113217,113221],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[113279,113281],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[113310,113311]},{"pos":[113402,113422],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[113518,113519],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113956,113978],"content":"ExportCspBlob(Boolean)","needQuote":true,"nodes":[{"content":"ExportCspBlob(Boolean)","pos":[0,22]}]},{"pos":[114191,114204],"content":"ExportCspBlob","needQuote":true,"nodes":[{"content":"ExportCspBlob","pos":[0,13]}]},{"pos":[114296,114297],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114348,114355],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[114416,114417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114547,114560],"content":"ExportCspBlob","needQuote":true,"nodes":[{"content":"ExportCspBlob","pos":[0,13]}]},{"pos":[114652,114653],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114704,114711],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[114772,114773],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115094,115119],"content":"ExportParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[115298,115314],"content":"ExportParameters","needQuote":true,"nodes":[{"content":"ExportParameters","pos":[0,16]}]},{"pos":[115410,115411],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115462,115469],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[115530,115531],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115644,115660],"content":"ExportParameters","needQuote":true,"nodes":[{"content":"ExportParameters","pos":[0,16]}]},{"pos":[115756,115757],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115808,115815],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[115876,115877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116138,116151],"content":"RSAParameters","needQuote":true,"nodes":[{"content":"RSAParameters","pos":[0,13]}]},{"pos":[116502,116551],"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","pos":[0,49]}]},{"pos":[117070,117078],"content":"HashData","needQuote":true,"nodes":[{"content":"HashData","pos":[0,8]}]},{"pos":[117166,117167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117215,117219],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[117278,117280]},{"content":",","pos":[117312,117313]},{"pos":[117367,117372],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117432,117433]},{"pos":[117487,117492],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117552,117553]},{"pos":[117641,117658],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[117751,117752],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117929,117937],"content":"HashData","needQuote":true,"nodes":[{"content":"HashData","pos":[0,8]}]},{"pos":[118025,118026],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118074,118078],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[118136,118138],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[118167,118168]},{"pos":[118222,118227],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[118287,118288]},{"pos":[118342,118347],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[118407,118408]},{"pos":[118496,118513],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[118606,118607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119033,119050],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[119390,119425],"content":"HashData(Stream, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Stream, HashAlgorithmName)","pos":[0,35]}]},{"pos":[119687,119695],"content":"HashData","needQuote":true,"nodes":[{"content":"HashData","pos":[0,8]}]},{"pos":[119783,119784],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119837,119843],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[119907,119908]},{"pos":[119996,120013],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[120106,120107],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120261,120269],"content":"HashData","needQuote":true,"nodes":[{"content":"HashData","pos":[0,8]}]},{"pos":[120357,120358],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120411,120417],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[120481,120482]},{"pos":[120570,120587],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[120680,120681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120948,120954],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[121084,121093],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[121346,121367],"content":"ImportCspBlob(Byte[])","needQuote":true,"nodes":[{"content":"ImportCspBlob(Byte[])","pos":[0,21]}]},{"pos":[121708,121721],"content":"ImportCspBlob","needQuote":true,"nodes":[{"content":"ImportCspBlob","pos":[0,13]}]},{"pos":[121813,121814],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121862,121866],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[121925,121927]},{"pos":[121958,121959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122088,122101],"content":"ImportCspBlob","needQuote":true,"nodes":[{"content":"ImportCspBlob","pos":[0,13]}]},{"pos":[122193,122194],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122242,122246],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[122304,122306],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[122334,122335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122747,122778],"content":"ImportParameters(RSAParameters)","needQuote":true,"nodes":[{"content":"ImportParameters(RSAParameters)","pos":[0,31]}]},{"pos":[123013,123029],"content":"ImportParameters","needQuote":true,"nodes":[{"content":"ImportParameters","pos":[0,16]}]},{"pos":[123125,123126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123205,123218],"content":"RSAParameters","needQuote":true,"nodes":[{"content":"RSAParameters","pos":[0,13]}]},{"pos":[123307,123308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123449,123465],"content":"ImportParameters","needQuote":true,"nodes":[{"content":"ImportParameters","pos":[0,16]}]},{"pos":[123561,123562],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123641,123654],"content":"RSAParameters","needQuote":true,"nodes":[{"content":"RSAParameters","pos":[0,13]}]},{"pos":[123743,123744],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124078,124091],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[124350,124360],"content":"KeySizes[]","needQuote":true,"nodes":[{"content":"KeySizes[]","pos":[0,10]}]},{"pos":[124562,124570],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"content":"[]","pos":[124634,124636]},{"pos":[124725,124733],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[124796,124798],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[125103,125159],"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"pos":[125752,125760],"content":"SignHash","needQuote":true,"nodes":[{"content":"SignHash","pos":[0,8]}]},{"pos":[125848,125849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125897,125901],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[125960,125962]},{"content":",","pos":[125994,125995]},{"pos":[126083,126100],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[126194,126195]},{"pos":[126285,126304],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[126399,126400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126600,126608],"content":"SignHash","needQuote":true,"nodes":[{"content":"SignHash","pos":[0,8]}]},{"pos":[126696,126697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126745,126749],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[126807,126809],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[126838,126839]},{"pos":[126927,126944],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[127038,127039]},{"pos":[127129,127148],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[127243,127244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127709,127728],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[127956,127962],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[128287,128353],"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"pos":[129006,129016],"content":"VerifyHash","needQuote":true,"nodes":[{"content":"VerifyHash","pos":[0,10]}]},{"pos":[129106,129107],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129155,129159],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[129218,129220]},{"content":",","pos":[129252,129253]},{"pos":[129306,129310],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[129369,129371]},{"content":",","pos":[129403,129404]},{"pos":[129492,129509],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[129603,129604]},{"pos":[129694,129713],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[129808,129809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130025,130035],"content":"VerifyHash","needQuote":true,"nodes":[{"content":"VerifyHash","pos":[0,10]}]},{"pos":[130125,130126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130174,130178],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[130236,130238],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[130267,130268]},{"pos":[130321,130325],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[130383,130385],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[130414,130415]},{"pos":[130503,130520],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[130614,130615]},{"pos":[130705,130724],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[130819,130820],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131285,131307],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]},{"pos":[131542,131563],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[131764,131781],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Cryptography.RSACryptoServiceProvider\n  commentId: T:System.Security.Cryptography.RSACryptoServiceProvider\n  id: RSACryptoServiceProvider\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor\n  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)\n  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  - System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo\n  - System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)\n  - System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)\n  - System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)\n  - System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  - System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  - System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)\n  - System.Security.Cryptography.RSACryptoServiceProvider.KeySize\n  - System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes\n  - System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp\n  - System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly\n  - System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)\n  - System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)\n  - System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)\n  - System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  - System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore\n  - System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])\n  - System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  langs:\n  - csharp\n  - vb\n  name: RSACryptoServiceProvider\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RSACryptoServiceProvider\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 63\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Performs asymmetric encryption and decryption using the implementation of the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm provided by the cryptographic service provider (CSP). This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: 'public sealed class RSACryptoServiceProvider : RSA, IDisposable, ICspAsymmetricAlgorithm'\n    content.vb: >-\n      Public NotInheritable Class RSACryptoServiceProvider\n          Inherits RSA\n          Implements IDisposable, ICspAsymmetricAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  - System.Security.Cryptography.RSA\n  implements:\n  - System.IDisposable\n  - System.Security.Cryptography.ICspAsymmetricAlgorithm\n  inheritedMembers:\n  - System.Security.Cryptography.RSA.Create\n  - System.Security.Cryptography.RSA.Create(System.String)\n  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  - System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  - System.Security.Cryptography.RSA.FromXmlString(System.String)\n  - System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  - System.Security.Cryptography.RSA.SignatureAlgorithm\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: RSACryptoServiceProvider\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: RSACryptoServiceProvider()\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 65\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.RSACryptoServiceProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the default key.</p>\\n\"\n  syntax:\n    content: public RSACryptoServiceProvider()\n    content.vb: Public Sub New\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cryptographic service provider (CSP) cannot be acquired. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider()\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: RSACryptoServiceProvider(Int32)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 66\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.RSACryptoServiceProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified key size.</p>\\n\"\n  syntax:\n    content: public RSACryptoServiceProvider(int dwKeySize)\n    content.vb: Public Sub New(dwKeySize As Integer)\n    parameters:\n    - id: dwKeySize\n      type: System.Int32\n      description: \"\\n<p>The size of the key to use in bits. </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cryptographic service provider (CSP) cannot be acquired. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Int32,System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: RSACryptoServiceProvider(Int32, CspParameters)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider(System.Int32, System.Security.Cryptography.CspParameters)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 67\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.RSACryptoServiceProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified key size and parameters.</p>\\n\"\n  syntax:\n    content: public RSACryptoServiceProvider(int dwKeySize, CspParameters parameters)\n    content.vb: Public Sub New(dwKeySize As Integer, parameters As CspParameters)\n    parameters:\n    - id: dwKeySize\n      type: System.Int32\n      description: \"\\n<p>The size of the key to use in bits. </p>\\n\"\n    - id: parameters\n      type: System.Security.Cryptography.CspParameters\n      description: \"\\n<p>The parameters to be passed to the cryptographic service provider (CSP). </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The CSP cannot be acquired.</p>\\n<p>-or- </p>\\n<p>The key cannot be created. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(Int32, CspParameters)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)\n  id: '#ctor(System.Security.Cryptography.CspParameters)'\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: RSACryptoServiceProvider(CspParameters)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.RSACryptoServiceProvider(System.Security.Cryptography.CspParameters)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 68\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.RSACryptoServiceProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified parameters.</p>\\n\"\n  syntax:\n    content: public RSACryptoServiceProvider(CspParameters parameters)\n    content.vb: Public Sub New(parameters As CspParameters)\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.CspParameters\n      description: \"\\n<p>The parameters to be passed to the cryptographic service provider (CSP). </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The CSP cannot be acquired. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSACryptoServiceProvider.RSACryptoServiceProvider(CspParameters)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo\n  id: CspKeyContainerInfo\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: CspKeyContainerInfo\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CspKeyContainerInfo\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 69\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CspKeyContainerInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that describes additional information about a cryptographic key pair. </p>\\n\"\n  syntax:\n    content: public CspKeyContainerInfo CspKeyContainerInfo { get; }\n    content.vb: Public ReadOnly Property CspKeyContainerInfo As CspKeyContainerInfo\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CspKeyContainerInfo\n      description: \"\\n<p>A <xref href=\\\"System.Security.Cryptography.CspKeyContainerInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that describes additional information about a cryptographic key pair.</p>\\n\"\n  implements:\n  - System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: RSACryptoServiceProvider.CspKeyContainerInfo\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.KeySize\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: KeySize\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.KeySize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeySize\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 70\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the size of the current key.</p>\\n\"\n  syntax:\n    content: public override int KeySize { get; }\n    content.vb: Public Overrides ReadOnly Property KeySize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size of the key in bits.</p>\\n\"\n  overridden: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: RSACryptoServiceProvider.KeySize\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp\n  id: PersistKeyInCsp\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: PersistKeyInCsp\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PersistKeyInCsp\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 71\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets a value indicating whether the key should be persisted in the cryptographic service provider (CSP).</p>\\n\"\n  syntax:\n    content: public bool PersistKeyInCsp { get; set; }\n    content.vb: Public Property PersistKeyInCsp As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key should be persisted in the CSP; otherwise, <strong>false</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: RSACryptoServiceProvider.PersistKeyInCsp\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly\n  id: PublicOnly\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: PublicOnly\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PublicOnly\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 72\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a value that indicates whether the <xref href=\\\"System.Security.Cryptography.RSACryptoServiceProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains only a public key.</p>\\n\"\n  syntax:\n    content: public bool PublicOnly { get; }\n    content.vb: Public ReadOnly Property PublicOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Security.Cryptography.RSACryptoServiceProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains only a public key; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: RSACryptoServiceProvider.PublicOnly\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore\n  id: UseMachineKeyStore\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: UseMachineKeyStore\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UseMachineKeyStore\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 73\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.</p>\\n\"\n  syntax:\n    content: public static bool UseMachineKeyStore { get; set; }\n    content.vb: Public Shared Property UseMachineKeyStore As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key should be persisted in the computer key store; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RSACryptoServiceProvider.UseMachineKeyStore\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)\n  id: Decrypt(System.Byte[],System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: Decrypt(Byte[], Boolean)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[], System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Decrypt\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 74\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Decrypts data with the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public byte[] Decrypt(byte[] rgb, bool fOAEP)\n    content.vb: Public Function Decrypt(rgb As Byte(), fOAEP As Boolean) As Byte()\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: \"\\n<p>The data to be decrypted. </p>\\n\"\n    - id: fOAEP\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to perform direct <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> decryption using OAEP padding (only available on a computer running Microsoft Windows XP or later); otherwise, <strong>false</strong> to use PKCS#1 v1.5 padding. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The decrypted data, which is the original plain text before encryption.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\\n<p>-or- </p>\\n<p>The <em>fOAEP</em> parameter is <strong>true</strong> and the length of the <em>rgb</em> parameter is greater than <xref href=\\\"System.Security.Cryptography.RSACryptoServiceProvider.KeySize\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The <em>fOAEP</em> parameter is <strong>true</strong> and OAEP is not supported. </p>\\n<p>-or- </p>\\n<p>The key does not match the encrypted data. However, the exception wording may not be accurate. For example, it may say <code>Not enough storage is available to process this command</code>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>rgb </em>is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte(), System.Boolean)\n  name.vb: Decrypt(Byte(), Boolean)\n  nameWithType: RSACryptoServiceProvider.Decrypt(Byte[], Boolean)\n  nameWithType.vb: RSACryptoServiceProvider.Decrypt(Byte(), Boolean)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  id: Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: Decrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Decrypt\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 75\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Decrypts data that was previously encrypted with the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm by using the specified padding. </p>\\n\"\n  syntax:\n    content: public override byte[] Decrypt(byte[] data, RSAEncryptionPadding padding)\n    content.vb: Public Overrides Function Decrypt(data As Byte(), padding As RSAEncryptionPadding) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The data to decrypt. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>The padding. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The decrypted data. </p>\\n\"\n  overridden: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The padding mode is not supported.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Decrypt(Byte(), RSAEncryptionPadding)\n  nameWithType: RSACryptoServiceProvider.Decrypt(Byte[], RSAEncryptionPadding)\n  nameWithType.vb: RSACryptoServiceProvider.Decrypt(Byte(), RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 76\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  overridden: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: RSACryptoServiceProvider.Dispose(Boolean)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)\n  id: Encrypt(System.Byte[],System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: Encrypt(Byte[], Boolean)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[], System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Encrypt\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 77\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Encrypts data with the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public byte[] Encrypt(byte[] rgb, bool fOAEP)\n    content.vb: Public Function Encrypt(rgb As Byte(), fOAEP As Boolean) As Byte()\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: \"\\n<p>The data to be encrypted. </p>\\n\"\n    - id: fOAEP\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to perform direct <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> encryption using OAEP padding (only available on a computer running Windows XP or later); otherwise, <strong>false</strong> to use PKCS#1 v1.5 padding. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The encrypted data.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\\n<p>-or- </p>\\n<p>The length of the <em>rgb</em> parameter is greater than the maximum allowed length.</p>\\n<p>-or- </p>\\n<p>The <em>fOAEP</em> parameter is <strong>true</strong> and OAEP padding is not supported. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>rgb </em>is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte(), System.Boolean)\n  name.vb: Encrypt(Byte(), Boolean)\n  nameWithType: RSACryptoServiceProvider.Encrypt(Byte[], Boolean)\n  nameWithType.vb: RSACryptoServiceProvider.Encrypt(Byte(), Boolean)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  id: Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: Encrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Encrypt\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 78\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Encrypts data with the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm using the specified padding. </p>\\n\"\n  syntax:\n    content: public override byte[] Encrypt(byte[] data, RSAEncryptionPadding padding)\n    content.vb: Public Overrides Function Encrypt(data As Byte(), padding As RSAEncryptionPadding) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The data to encrypt. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>The padding. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The encrypted data. </p>\\n\"\n  overridden: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The padding mode is not supported.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Encrypt(Byte(), RSAEncryptionPadding)\n  nameWithType: RSACryptoServiceProvider.Encrypt(Byte[], RSAEncryptionPadding)\n  nameWithType.vb: RSACryptoServiceProvider.Encrypt(Byte(), RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  id: ExportCspBlob(System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: ExportCspBlob(Boolean)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportCspBlob\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 79\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Exports a blob containing the key information associated with an <xref href=\\\"System.Security.Cryptography.RSACryptoServiceProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.  </p>\\n\"\n  syntax:\n    content: public byte[] ExportCspBlob(bool includePrivateParameters)\n    content.vb: Public Function ExportCspBlob(includePrivateParameters As Boolean) As Byte()\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to include the private key; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing the key information associated with an <xref href=\\\"System.Security.Cryptography.RSACryptoServiceProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  implements:\n  - System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSACryptoServiceProvider.ExportCspBlob(Boolean)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportParameters\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 80\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Exports the <xref href=\\\"System.Security.Cryptography.RSAParameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override RSAParameters ExportParameters(bool includePrivateParameters)\n    content.vb: Public Overrides Function ExportParameters(includePrivateParameters As Boolean) As RSAParameters\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to include private parameters; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Security.Cryptography.RSAParameters\n      description: \"\\n<p>The parameters for <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The key cannot be exported. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RSACryptoServiceProvider.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 81\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected Overrides Function HashData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n    - id: offset\n      type: System.Int32\n    - id: count\n      type: System.Int32\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)\n  nameWithType: RSACryptoServiceProvider.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType.vb: RSACryptoServiceProvider.HashData(Byte(), Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: HashData(Stream, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 82\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected Overrides Function HashData(data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.IO.Stream\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: RSACryptoServiceProvider.HashData(Stream, HashAlgorithmName)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  id: ImportCspBlob(System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: ImportCspBlob(Byte[])\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ImportCspBlob\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 83\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Imports a blob that represents RSA key information.  </p>\\n\"\n  syntax:\n    content: public void ImportCspBlob(byte[] keyBlob)\n    content.vb: Public Sub ImportCspBlob(keyBlob As Byte())\n    parameters:\n    - id: keyBlob\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that represents an RSA key blob.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  implements:\n  - System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte())\n  name.vb: ImportCspBlob(Byte())\n  nameWithType: RSACryptoServiceProvider.ImportCspBlob(Byte[])\n  nameWithType.vb: RSACryptoServiceProvider.ImportCspBlob(Byte())\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)\n  id: ImportParameters(System.Security.Cryptography.RSAParameters)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: ImportParameters(RSAParameters)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ImportParameters\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 84\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Imports the specified <xref href=\\\"System.Security.Cryptography.RSAParameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override void ImportParameters(RSAParameters parameters)\n    content.vb: Public Overrides Sub ImportParameters(parameters As RSAParameters)\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.RSAParameters\n      description: \"\\n<p>The parameters for <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  overridden: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\\n<p>-or- </p>\\n<p>The <em>parameters</em> parameter has missing fields. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RSACryptoServiceProvider.ImportParameters(RSAParameters)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes\n  commentId: P:System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.LegalKeySizes\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalKeySizes\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 85\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override KeySizes[] LegalKeySizes { get; }\n    content.vb: Public Overrides ReadOnly Property LegalKeySizes As KeySizes()\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n  overridden: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: RSACryptoServiceProvider.LegalKeySizes\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)\n  id: SignData(System.Byte[],System.Int32,System.Int32,System.Object)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: SignData(Byte[], Int32, Int32, Object)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[], System.Int32, System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignData\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 86\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the hash value of a subset of the specified byte array using the specified hash algorithm, and signs the resulting hash value.</p>\\n\"\n  syntax:\n    content: public byte[] SignData(byte[] buffer, int offset, int count, object halg)\n    content.vb: Public Function SignData(buffer As Byte(), offset As Integer, count As Integer, halg As Object) As Byte()\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The input data for which to compute the hash. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset into the array from which to begin using data. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes in the array to use as data. </p>\\n\"\n    - id: halg\n      type: System.Object\n      description: \"\\n<p>The hash algorithm to use to create the hash value. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> signature for the specified data.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>halg</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>halg</em> parameter is not a valid type. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte(), System.Int32, System.Int32, System.Object)\n  name.vb: SignData(Byte(), Int32, Int32, Object)\n  nameWithType: RSACryptoServiceProvider.SignData(Byte[], Int32, Int32, Object)\n  nameWithType.vb: RSACryptoServiceProvider.SignData(Byte(), Int32, Int32, Object)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)\n  id: SignData(System.Byte[],System.Object)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: SignData(Byte[], Object)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[], System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignData\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 87\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value.</p>\\n\"\n  syntax:\n    content: public byte[] SignData(byte[] buffer, object halg)\n    content.vb: Public Function SignData(buffer As Byte(), halg As Object) As Byte()\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The input data for which to compute the hash. </p>\\n\"\n    - id: halg\n      type: System.Object\n      description: \"\\n<p>The hash algorithm to use to create the hash value. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> signature for the specified data.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>halg</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>halg</em> parameter is not a valid type. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte(), System.Object)\n  name.vb: SignData(Byte(), Object)\n  nameWithType: RSACryptoServiceProvider.SignData(Byte[], Object)\n  nameWithType.vb: RSACryptoServiceProvider.SignData(Byte(), Object)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)\n  id: SignData(System.IO.Stream,System.Object)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: SignData(Stream, Object)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignData\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 88\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the hash value of the specified input stream using the specified hash algorithm, and signs the resulting hash value.</p>\\n\"\n  syntax:\n    content: public byte[] SignData(Stream inputStream, object halg)\n    content.vb: Public Function SignData(inputStream As Stream, halg As Object) As Byte()\n    parameters:\n    - id: inputStream\n      type: System.IO.Stream\n      description: \"\\n<p>The input data for which to compute the hash. </p>\\n\"\n    - id: halg\n      type: System.Object\n      description: \"\\n<p>The hash algorithm to use to create the hash value. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> signature for the specified data.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>halg</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>halg</em> parameter is not a valid type. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSACryptoServiceProvider.SignData(Stream, Object)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignHash\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 89\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the signature for the specified hash value by encrypting it with the private key using the specified padding. </p>\\n\"\n  syntax:\n    content: public override byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public Overrides Function SignHash(hash As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Byte()\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: \"\\n<p>The hash value of the data to be signed. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm name used to create the hash value of the data. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: \"\\n<p>The padding. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> signature for the specified hash value. </p>\\n\"\n  overridden: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>hash</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>padding</em> does not equal <xref href=\\\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSACryptoServiceProvider.SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSACryptoServiceProvider.SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)\n  id: SignHash(System.Byte[],System.String)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: SignHash(Byte[], String)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[], System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignHash\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 90\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the signature for the specified hash value by encrypting it with the private key.</p>\\n\"\n  syntax:\n    content: public byte[] SignHash(byte[] rgbHash, string str)\n    content.vb: Public Function SignHash(rgbHash As Byte(), str As String) As Byte()\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: \"\\n<p>The hash value of the data to be signed. </p>\\n\"\n    - id: str\n      type: System.String\n      description: \"\\n<p>The hash algorithm identifier (OID) used to create the hash value of the data. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> signature for the specified hash value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>rgbHash</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\\n<p>-or- </p>\\n<p>There is no private key. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte(), System.String)\n  name.vb: SignHash(Byte(), String)\n  nameWithType: RSACryptoServiceProvider.SignHash(Byte[], String)\n  nameWithType.vb: RSACryptoServiceProvider.SignHash(Byte(), String)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])\n  id: VerifyData(System.Byte[],System.Object,System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: VerifyData(Byte[], Object, Byte[])\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[], System.Object, System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyData\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 91\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the hash value of the provided data.</p>\\n\"\n  syntax:\n    content: public bool VerifyData(byte[] buffer, object halg, byte[] signature)\n    content.vb: Public Function VerifyData(buffer As Byte(), halg As Object, signature As Byte()) As Boolean\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The data that was signed. </p>\\n\"\n    - id: halg\n      type: System.Object\n      description: \"\\n<p>The name of the hash algorithm used to create the hash value of the data. </p>\\n\"\n    - id: signature\n      type: System.Byte[]\n      description: \"\\n<p>The signature data to be verified. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>halg</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>halg</em> parameter is not a valid type. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte(), System.Object, System.Byte())\n  name.vb: VerifyData(Byte(), Object, Byte())\n  nameWithType: RSACryptoServiceProvider.VerifyData(Byte[], Object, Byte[])\n  nameWithType.vb: RSACryptoServiceProvider.VerifyData(Byte(), Object, Byte())\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyHash\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 92\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies that a digital signature is valid by determining the hash value in the signature using the specified hashing algorithm and padding, and comparing it to the provided hash value. </p>\\n\"\n  syntax:\n    content: public override bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public Overrides Function VerifyHash(hash As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Boolean\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: \"\\n<p>The hash value of the signed data. </p>\\n\"\n    - id: signature\n      type: System.Byte[]\n      description: \"\\n<p>The signature data to be verified. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm name used to create the hash value. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: \"\\n<p>The padding. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>. </p>\\n\"\n  overridden: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>hash</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>padding</em> does not equal <xref href=\\\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSACryptoServiceProvider.VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSACryptoServiceProvider.VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  commentId: M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])\n  id: VerifyHash(System.Byte[],System.String,System.Byte[])\n  parent: System.Security.Cryptography.RSACryptoServiceProvider\n  langs:\n  - csharp\n  - vb\n  name: VerifyHash(Byte[], String, Byte[])\n  fullName: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[], System.String, System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyHash\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 93\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies that a digital signature is valid by determining the hash value in the signature using the provided public key and comparing it to the provided hash value.</p>\\n\"\n  syntax:\n    content: public bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature)\n    content.vb: Public Function VerifyHash(rgbHash As Byte(), str As String, rgbSignature As Byte()) As Boolean\n    parameters:\n    - id: rgbHash\n      type: System.Byte[]\n      description: \"\\n<p>The hash value of the signed data. </p>\\n\"\n    - id: str\n      type: System.String\n      description: \"\\n<p>The hash algorithm identifier (OID) used to create the hash value of the data. </p>\\n\"\n    - id: rgbSignature\n      type: System.Byte[]\n      description: \"\\n<p>The signature data to be verified. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>rgbHash</em> parameter is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>The <em>rgbSignature</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The cryptographic service provider (CSP) cannot be acquired.</p>\\n<p>-or- </p>\\n<p>The signature cannot be verified. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte(), System.String, System.Byte())\n  name.vb: VerifyHash(Byte(), String, Byte())\n  nameWithType: RSACryptoServiceProvider.VerifyHash(Byte[], String, Byte[])\n  nameWithType.vb: RSACryptoServiceProvider.VerifyHash(Byte(), String, Byte())\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n  commentId: T:System.Security.Cryptography.AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n- uid: System.Security.Cryptography.RSA\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSA\n  fullName: System.Security.Cryptography.RSA\n  commentId: T:System.Security.Cryptography.RSA\n  nameWithType: RSA\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICspAsymmetricAlgorithm\n  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm\n  commentId: T:System.Security.Cryptography.ICspAsymmetricAlgorithm\n  nameWithType: ICspAsymmetricAlgorithm\n- uid: System.Security.Cryptography.RSA.Create\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: Create()\n  fullName: System.Security.Cryptography.RSA.Create()\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.Create\n    name: Create\n    fullName: System.Security.Cryptography.RSA.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.Create\n    name: Create\n    fullName: System.Security.Cryptography.RSA.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.Create\n  nameWithType: RSA.Create()\n- uid: System.Security.Cryptography.RSA.Create(System.String)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: Create(String)\n  fullName: System.Security.Cryptography.RSA.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.RSA.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.RSA.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.Create(System.String)\n  nameWithType: RSA.Create(String)\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignData(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.SignData(System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignData(Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.SignData(Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.SignData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignData(Byte(), Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.SignData(Byte(), Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignData(Stream, HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.SignData(Stream, HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.VerifyData(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyData(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyData(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.VerifyData(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream, System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream, System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyData(Stream, Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyData(Stream, Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: DecryptValue(Byte[])\n  fullName: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  fullname.vb: System.Security.Cryptography.RSA.DecryptValue(System.Byte())\n  name.vb: DecryptValue(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n    name: DecryptValue\n    fullName: System.Security.Cryptography.RSA.DecryptValue\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n    name: DecryptValue\n    fullName: System.Security.Cryptography.RSA.DecryptValue\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  nameWithType: RSA.DecryptValue(Byte[])\n  nameWithType.vb: RSA.DecryptValue(Byte())\n- uid: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: EncryptValue(Byte[])\n  fullName: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  fullname.vb: System.Security.Cryptography.RSA.EncryptValue(System.Byte())\n  name.vb: EncryptValue(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n    name: EncryptValue\n    fullName: System.Security.Cryptography.RSA.EncryptValue\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n    name: EncryptValue\n    fullName: System.Security.Cryptography.RSA.EncryptValue\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  nameWithType: RSA.EncryptValue(Byte[])\n  nameWithType.vb: RSA.EncryptValue(Byte())\n- uid: System.Security.Cryptography.RSA.FromXmlString(System.String)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: FromXmlString(String)\n  fullName: System.Security.Cryptography.RSA.FromXmlString(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.FromXmlString(System.String)\n    name: FromXmlString\n    fullName: System.Security.Cryptography.RSA.FromXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.FromXmlString(System.String)\n    name: FromXmlString\n    fullName: System.Security.Cryptography.RSA.FromXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.FromXmlString(System.String)\n  nameWithType: RSA.FromXmlString(String)\n- uid: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n    name: ToXmlString\n    fullName: System.Security.Cryptography.RSA.ToXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n    name: ToXmlString\n    fullName: System.Security.Cryptography.RSA.ToXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  nameWithType: RSA.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  commentId: P:System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  nameWithType: RSA.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.RSA.SignatureAlgorithm\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignatureAlgorithm\n  fullName: System.Security.Cryptography.RSA.SignatureAlgorithm\n  commentId: P:System.Security.Cryptography.RSA.SignatureAlgorithm\n  nameWithType: RSA.SignatureAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: KeySizeValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizesValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Dispose()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  nameWithType: AsymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Clear()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  nameWithType: AsymmetricAlgorithm.Clear()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.CspParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspParameters\n  fullName: System.Security.Cryptography.CspParameters\n  commentId: T:System.Security.Cryptography.CspParameters\n  nameWithType: CspParameters\n- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo\n  parent: System.Security.Cryptography.ICspAsymmetricAlgorithm\n  isExternal: false\n  name: CspKeyContainerInfo\n  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo\n  commentId: P:System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo\n  nameWithType: ICspAsymmetricAlgorithm.CspKeyContainerInfo\n- uid: System.Security.Cryptography.CspKeyContainerInfo\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspKeyContainerInfo\n  fullName: System.Security.Cryptography.CspKeyContainerInfo\n  commentId: T:System.Security.Cryptography.CspKeyContainerInfo\n  nameWithType: CspKeyContainerInfo\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: KeySize\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  nameWithType: AsymmetricAlgorithm.KeySize\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: Decrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSA.Decrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  fullname.vb: System.Security.Cryptography.RSA.Decrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Decrypt(Byte(), RSAEncryptionPadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n    name: Decrypt\n    fullName: System.Security.Cryptography.RSA.Decrypt\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n    name: Decrypt\n    fullName: System.Security.Cryptography.RSA.Decrypt\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  nameWithType: RSA.Decrypt(Byte[], RSAEncryptionPadding)\n  nameWithType.vb: RSA.Decrypt(Byte(), RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSAEncryptionPadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAEncryptionPadding\n  fullName: System.Security.Cryptography.RSAEncryptionPadding\n  commentId: T:System.Security.Cryptography.RSAEncryptionPadding\n  nameWithType: RSAEncryptionPadding\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: Encrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSA.Encrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  fullname.vb: System.Security.Cryptography.RSA.Encrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Encrypt(Byte(), RSAEncryptionPadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n    name: Encrypt\n    fullName: System.Security.Cryptography.RSA.Encrypt\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n    name: Encrypt\n    fullName: System.Security.Cryptography.RSA.Encrypt\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  nameWithType: RSA.Encrypt(Byte[], RSAEncryptionPadding)\n  nameWithType.vb: RSA.Encrypt(Byte(), RSAEncryptionPadding)\n- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)\n  parent: System.Security.Cryptography.ICspAsymmetricAlgorithm\n  isExternal: true\n  name: ExportCspBlob(Boolean)\n  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)\n    name: ExportCspBlob\n    fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)\n    name: ExportCspBlob\n    fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)\n  nameWithType: ICspAsymmetricAlgorithm.ExportCspBlob(Boolean)\n- uid: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n    name: ExportParameters\n    fullName: System.Security.Cryptography.RSA.ExportParameters\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n    name: ExportParameters\n    fullName: System.Security.Cryptography.RSA.ExportParameters\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  nameWithType: RSA.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.RSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAParameters\n  fullName: System.Security.Cryptography.RSAParameters\n  commentId: T:System.Security.Cryptography.RSAParameters\n  nameWithType: RSAParameters\n- uid: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSA.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  fullname.vb: System.Security.Cryptography.RSA.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n    name: HashData\n    fullName: System.Security.Cryptography.RSA.HashData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n    name: HashData\n    fullName: System.Security.Cryptography.RSA.HashData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  nameWithType: RSA.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType.vb: RSA.HashData(Byte(), Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n  commentId: T:System.Security.Cryptography.HashAlgorithmName\n  nameWithType: HashAlgorithmName\n- uid: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: HashData(Stream, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSA.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n    name: HashData\n    fullName: System.Security.Cryptography.RSA.HashData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n    name: HashData\n    fullName: System.Security.Cryptography.RSA.HashData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  nameWithType: RSA.HashData(Stream, HashAlgorithmName)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])\n  parent: System.Security.Cryptography.ICspAsymmetricAlgorithm\n  isExternal: true\n  name: ImportCspBlob(Byte[])\n  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])\n  fullname.vb: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte())\n  name.vb: ImportCspBlob(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])\n    name: ImportCspBlob\n    fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])\n    name: ImportCspBlob\n    fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])\n  nameWithType: ICspAsymmetricAlgorithm.ImportCspBlob(Byte[])\n  nameWithType.vb: ICspAsymmetricAlgorithm.ImportCspBlob(Byte())\n- uid: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: ImportParameters(RSAParameters)\n  fullName: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n    name: ImportParameters\n    fullName: System.Security.Cryptography.RSA.ImportParameters\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.RSAParameters\n    name: RSAParameters\n    fullName: System.Security.Cryptography.RSAParameters\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n    name: ImportParameters\n    fullName: System.Security.Cryptography.RSA.ImportParameters\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.RSAParameters\n    name: RSAParameters\n    fullName: System.Security.Cryptography.RSAParameters\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  nameWithType: RSA.ImportParameters(RSAParameters)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  nameWithType: AsymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.KeySizes[]\n  name: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  fullname.vb: System.Security.Cryptography.KeySizes()\n  name.vb: KeySizes()\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: ()\n    fullName: ()\n  nameWithType: KeySizes[]\n  nameWithType.vb: KeySizes()\n- uid: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignHash(System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.SignHash(System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignHash\n    fullName: System.Security.Cryptography.RSA.SignHash\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignHash\n    fullName: System.Security.Cryptography.RSA.SignHash\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSASignaturePadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSASignaturePadding\n  fullName: System.Security.Cryptography.RSASignaturePadding\n  commentId: T:System.Security.Cryptography.RSASignaturePadding\n  nameWithType: RSASignaturePadding\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyHash(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.VerifyHash(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyHash\n    fullName: System.Security.Cryptography.RSA.VerifyHash\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyHash\n    fullName: System.Security.Cryptography.RSA.VerifyHash\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}