{"nodes":[{"pos":[1591,1603],"content":"UTF8Encoding","needQuote":true,"nodes":[{"content":"UTF8Encoding","pos":[0,12]}]},{"pos":[5140,5154],"content":"UTF8Encoding()","needQuote":true,"nodes":[{"content":"UTF8Encoding()","pos":[0,14]}]},{"pos":[6195,6216],"content":"UTF8Encoding(Boolean)","needQuote":true,"nodes":[{"content":"UTF8Encoding(Boolean)","pos":[0,21]}]},{"pos":[7854,7884],"content":"UTF8Encoding(Boolean, Boolean)","needQuote":true,"nodes":[{"content":"UTF8Encoding(Boolean, Boolean)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to throw an exception when an invalid encoding is detected; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[9265,9388],"source":"\\n<p>\\n<strong>true</strong> to throw an exception when an invalid encoding is detected; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9389,9395],"source":" </p>\\n"},{"pos":[9841,9855],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current instance.","pos":[10646,10699],"source":"\\n<p>The object to compare with the current instance."},{"content":"&lt;/p&gt;\\n","pos":[10700,10706],"source":" </p>\\n"},{"pos":[11648,11674],"content":"GetByteCount(Char*, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char*, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A pointer to the first character to encode.","pos":[12669,12717],"source":"\\n<p>A pointer to the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[12718,12724],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[12787,12827],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[12828,12834],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.","pos":[12893,12964],"source":"\\n<p>The number of bytes produced by encoding the specified characters."},{"content":"&lt;/p&gt;\\n","pos":[12965,12971],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[13165,13212],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[13213,13219],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[13336,13499],"source":"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[13500,13506],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;chars&lt;/em&gt; contains an invalid sequence of characters.","pos":[13603,13698],"source":"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters."},{"content":"&lt;/p&gt;\\n","pos":[13699,13705],"source":" </p>\\n"},{"pos":[15511,15545],"content":"GetByteCount(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[16473,16541],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[16542,16548],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[16611,16659],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[16660,16666],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[16729,16769],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[16770,16776],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.","pos":[16835,16906],"source":"\\n<p>The number of bytes produced by encoding the specified characters."},{"content":"&lt;/p&gt;\\n","pos":[16907,16913],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[17121,17168],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[17169,17175],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[17292,17578],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[17579,17585],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;chars&lt;/em&gt; contains an invalid sequence of characters.","pos":[17682,17777],"source":"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters."},{"content":"&lt;/p&gt;\\n","pos":[17778,17784],"source":" </p>\\n"},{"pos":[19318,19338],"content":"GetByteCount(String)","needQuote":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[20423,20500],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[20682,20729],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[20730,20736],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[20853,20958],"source":"\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[20959,20965],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;chars&lt;/em&gt; contains an invalid sequence of characters.","pos":[21062,21157],"source":"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters."},{"content":"&lt;/p&gt;\\n","pos":[21158,21164],"source":" </p>\\n"},{"pos":[22565,22601],"content":"GetBytes(Char*, Int32, Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char*, Int32, Byte*, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A pointer to the first character to encode.","pos":[23719,23767],"source":"\\n<p>A pointer to the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[23768,23774],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[23841,23881],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[23882,23888],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A pointer to the location at which to start writing the resulting sequence of bytes.","pos":[23951,24040],"source":"\\n<p>A pointer to the location at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[24041,24047],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to write.","pos":[24114,24156],"source":"\\n<p>The maximum number of bytes to write."},{"content":"&lt;/p&gt;\\n","pos":[24157,24163],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written at the location indicated by &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[24222,24312],"source":"\\n<p>The actual number of bytes written at the location indicated by <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[24528,24640],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24641,24647],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; is less than zero.","pos":[24764,24830],"source":"\\n<p>\\n<em>charCount</em> or <em>byteCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[24831,24837],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;chars&lt;/em&gt; contains an invalid sequence of characters.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; is less than the resulting number of bytes.","pos":[24934,25116],"source":"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteCount</em> is less than the resulting number of bytes."},{"content":"&lt;/p&gt;\\n","pos":[25117,25123],"source":" </p>\\n"},{"pos":[26960,27005],"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[28016,28084],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[28085,28091],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[28158,28206],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[28207,28213],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[28280,28320],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[28321,28327],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.","pos":[28391,28454],"source":"\\n<p>The byte array to contain the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[28455,28461],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.","pos":[28528,28601],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[28602,28608],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[28667,28733],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28964,29076],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[29077,29083],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[29200,29484],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[29485,29491],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;chars&lt;/em&gt; contains an invalid sequence of characters.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[29588,29836],"source":"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[29837,29843],"source":" </p>\\n"},{"pos":[31524,31569],"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[32826,32874],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[32875,32881],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[32948,32988],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[32989,32995],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.","pos":[33059,33122],"source":"\\n<p>The byte array to contain the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[33123,33129],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.","pos":[33196,33269],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[33270,33276],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[33335,33401],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[33632,33740],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[33741,33747],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[33864,34148],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[34149,34155],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;s&lt;/em&gt; contains an invalid sequence of characters.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[34252,34496],"source":"\\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[34497,34503],"source":" </p>\\n"},{"pos":[36073,36099],"content":"GetCharCount(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte*, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A pointer to the first byte to decode.","pos":[37094,37137],"source":"\\n<p>A pointer to the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[37138,37144],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[37207,37242],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[37243,37249],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[37308,37397],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[37591,37638],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[37639,37645],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[37762,37925],"source":"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[37926,37932],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.","pos":[38029,38119],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[38120,38126],"source":" </p>\\n"},{"pos":[39900,39934],"content":"GetCharCount(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[40862,40925],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[40926,40932],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[40995,41038],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[41039,41045],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[41108,41143],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[41144,41150],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[41209,41298],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[41506,41553],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[41554,41560],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[41677,41963],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[41964,41970],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.","pos":[42067,42157],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[42158,42164],"source":" </p>\\n"},{"pos":[43758,43794],"content":"GetChars(Byte*, Int32, Char*, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte*, Int32, Char*, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A pointer to the first byte to decode.","pos":[44912,44955],"source":"\\n<p>A pointer to the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[44956,44962],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[45029,45064],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[45065,45071],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A pointer to the location at which to start writing the resulting set of characters.","pos":[45134,45223],"source":"\\n<p>A pointer to the location at which to start writing the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[45224,45230],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to write.","pos":[45297,45344],"source":"\\n<p>The maximum number of characters to write."},{"content":"&lt;/p&gt;\\n","pos":[45345,45351],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written at the location indicated by &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n","pos":[45410,45505],"source":"\\n<p>The actual number of characters written at the location indicated by <em>chars</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[45721,45833],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[45834,45840],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; is less than zero.","pos":[45957,46023],"source":"\\n<p>\\n<em>byteCount</em> or <em>charCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[46024,46030],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; is less than the resulting number of characters.","pos":[46127,46309],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\\n<p>-or- </p>\\n<p>\\n<em>charCount</em> is less than the resulting number of characters."},{"content":"&lt;/p&gt;\\n","pos":[46310,46316],"source":" </p>\\n"},{"pos":[48332,48377],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[49388,49451],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[49452,49458],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[49525,49568],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[49569,49575],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[49642,49677],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[49678,49684],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character array to contain the resulting set of characters.","pos":[49748,49816],"source":"\\n<p>The character array to contain the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[49817,49823],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting set of characters.","pos":[49890,49963],"source":"\\n<p>The index at which to start writing the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[49964,49970],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written into &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n","pos":[50029,50100],"source":"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[50331,50443],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[50444,50450],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteindex&lt;/em&gt; and &lt;em&gt;byteCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; is not a valid index in &lt;em&gt;chars&lt;/em&gt;.","pos":[50567,50851],"source":"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>."},{"content":"&lt;/p&gt;\\n","pos":[50852,50858],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; does not have enough capacity from &lt;em&gt;charIndex&lt;/em&gt; to the end of the array to accommodate the resulting characters.","pos":[50955,51203],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters."},{"content":"&lt;/p&gt;\\n","pos":[51204,51210],"source":" </p>\\n"},{"pos":[52872,52884],"content":"GetDecoder()","needQuote":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.&lt;/p&gt;\\n","pos":[53587,53694],"source":"\\n<p>A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</p>\\n"},{"pos":[54822,54834],"content":"GetEncoder()","needQuote":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[56668,56681],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code for the current instance.&lt;/p&gt;\\n","pos":[57319,57369],"source":"\\n<p>The hash code for the current instance.</p>\\n"},{"pos":[57874,57896],"content":"GetMaxByteCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[58669,58709],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[58710,58716],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes produced by encoding the specified number of characters.&lt;/p&gt;\\n","pos":[58775,58870],"source":"\\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[59066,59233],"source":"\\n<p>\\n<em>charCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[59234,59240],"source":" </p>\\n"},{"pos":[60595,60617],"content":"GetMaxCharCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[61390,61425],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[61426,61432],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters produced by decoding the specified number of bytes.&lt;/p&gt;\\n","pos":[61491,61586],"source":"\\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[61782,61949],"source":"\\n<p>\\n<em>byteCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[61950,61956],"source":" </p>\\n"},{"pos":[63436,63449],"content":"GetPreamble()","needQuote":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"pos":[64975,65006],"content":"GetString(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[65928,65991],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[65992,65998],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[66061,66104],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[66105,66111],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[66174,66209],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[66210,66216],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[66635,66682],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[66683,66689],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.","pos":[66806,66969],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[66970,66976],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.","pos":[67073,67163],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[67164,67170],"source":" </p>\\n"},{"pos":[68692,68703],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[68849,68855],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69012,69020],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[69184,69194],"content":"ICloneable","needQuote":true,"nodes":[{"content":"ICloneable","pos":[0,10]}]},{"pos":[69436,69471],"content":"Convert(Encoding, Encoding, Byte[])","needQuote":true,"nodes":[{"content":"Convert(Encoding, Encoding, Byte[])","pos":[0,35]}]},{"pos":[69842,69849],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[69924,69925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69982,69990],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[70058,70059]},{"pos":[70121,70129],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[70197,70198]},{"pos":[70251,70255],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[70314,70316]},{"pos":[70347,70348],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70481,70488],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[70563,70564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70621,70629],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[70697,70698]},{"pos":[70760,70768],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[70836,70837]},{"pos":[70890,70894],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[70952,70954],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[70982,70983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71403,71452],"content":"Convert(Encoding, Encoding, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Convert(Encoding, Encoding, Byte[], Int32, Int32)","pos":[0,49]}]},{"pos":[71919,71926],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[72001,72002],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72059,72067],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[72135,72136]},{"pos":[72198,72206],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[72274,72275]},{"pos":[72328,72332],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[72391,72393]},{"content":",","pos":[72425,72426]},{"pos":[72480,72485],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[72545,72546]},{"pos":[72600,72605],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72664,72665],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72824,72831],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[72906,72907],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72964,72972],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[73040,73041]},{"pos":[73103,73111],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[73179,73180]},{"pos":[73233,73237],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[73295,73297],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[73326,73327]},{"pos":[73381,73386],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[73446,73447]},{"pos":[73501,73506],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73565,73566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73996,74030],"content":"RegisterProvider(EncodingProvider)","needQuote":true,"nodes":[{"content":"RegisterProvider(EncodingProvider)","pos":[0,34]}]},{"pos":[74213,74229],"content":"RegisterProvider","needQuote":true,"nodes":[{"content":"RegisterProvider","pos":[0,16]}]},{"pos":[74313,74314],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74379,74395],"content":"EncodingProvider","needQuote":true,"nodes":[{"content":"EncodingProvider","pos":[0,16]}]},{"pos":[74470,74471],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74586,74602],"content":"RegisterProvider","needQuote":true,"nodes":[{"content":"RegisterProvider","pos":[0,16]}]},{"pos":[74686,74687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74752,74768],"content":"EncodingProvider","needQuote":true,"nodes":[{"content":"EncodingProvider","pos":[0,16]}]},{"pos":[74843,74844],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75116,75134],"content":"GetEncoding(Int32)","needQuote":true,"nodes":[{"content":"GetEncoding(Int32)","pos":[0,18]}]},{"pos":[75275,75286],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[75365,75366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75415,75420],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[75479,75480],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75574,75585],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[75664,75665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75714,75719],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[75778,75779],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76070,76122],"content":"GetEncoding(Int32, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"GetEncoding(Int32, EncoderFallback, DecoderFallback)","pos":[0,52]}]},{"pos":[76377,76388],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[76467,76468],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76517,76522],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[76582,76583]},{"pos":[76652,76667],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[76742,76743]},{"pos":[76812,76827],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[76901,76902],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77052,77063],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[77142,77143],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77192,77197],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[77257,77258]},{"pos":[77327,77342],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[77417,77418]},{"pos":[77487,77502],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[77576,77577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77903,77922],"content":"GetEncoding(String)","needQuote":true,"nodes":[{"content":"GetEncoding(String)","pos":[0,19]}]},{"pos":[78065,78076],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[78155,78156],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78206,78212],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[78272,78273],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78368,78379],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[78458,78459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78509,78515],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[78575,78576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78870,78923],"content":"GetEncoding(String, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"GetEncoding(String, EncoderFallback, DecoderFallback)","pos":[0,53]}]},{"pos":[79180,79191],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[79270,79271],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79321,79327],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[79388,79389]},{"pos":[79458,79473],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[79548,79549]},{"pos":[79618,79633],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[79707,79708],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79859,79870],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[79949,79950],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80000,80006],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[80067,80068]},{"pos":[80137,80152],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[80227,80228]},{"pos":[80297,80312],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[80386,80387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80701,80715],"content":"GetEncodings()","needQuote":true,"nodes":[{"content":"GetEncodings()","pos":[0,14]}]},{"pos":[80832,80844],"content":"GetEncodings","needQuote":true,"nodes":[{"content":"GetEncodings","pos":[0,12]}]},{"pos":[80924,80925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80952,80953],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81034,81046],"content":"GetEncodings","needQuote":true,"nodes":[{"content":"GetEncodings","pos":[0,12]}]},{"pos":[81126,81127],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81154,81155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81353,81360],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[81463,81468],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[81541,81542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81569,81570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81644,81649],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[81722,81723],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81750,81751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81957,81977],"content":"GetByteCount(Char[])","needQuote":true,"nodes":[{"content":"GetByteCount(Char[])","pos":[0,20]}]},{"pos":[82218,82230],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[82310,82311],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82359,82363],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[82422,82424]},{"pos":[82455,82456],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82552,82564],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[82644,82645],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82693,82697],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[82755,82757],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[82785,82786],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83072,83088],"content":"GetBytes(Char[])","needQuote":true,"nodes":[{"content":"GetBytes(Char[])","pos":[0,16]}]},{"pos":[83313,83321],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[83397,83398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83446,83450],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[83509,83511]},{"pos":[83542,83543],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83635,83643],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[83719,83720],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83768,83772],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[83830,83832],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[83860,83861],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84161,84191],"content":"GetBytes(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32)","pos":[0,30]}]},{"pos":[84512,84520],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[84596,84597],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84645,84649],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[84708,84710]},{"content":",","pos":[84742,84743]},{"pos":[84797,84802],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[84862,84863]},{"pos":[84917,84922],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[84981,84982],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85100,85108],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[85184,85185],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85233,85237],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[85295,85297],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[85326,85327]},{"pos":[85381,85386],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[85446,85447]},{"pos":[85501,85506],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[85565,85566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85894,85910],"content":"GetBytes(String)","needQuote":true,"nodes":[{"content":"GetBytes(String)","pos":[0,16]}]},{"pos":[86047,86055],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[86131,86132],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86182,86188],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[86248,86249],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86341,86349],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[86425,86426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86476,86482],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[86542,86543],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86776,86796],"content":"GetCharCount(Byte[])","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[])","pos":[0,20]}]},{"pos":[87037,87049],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[87129,87130],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87178,87182],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[87241,87243]},{"pos":[87274,87275],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87371,87383],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[87463,87464],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87512,87516],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[87574,87576],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[87604,87605],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87891,87907],"content":"GetChars(Byte[])","needQuote":true,"nodes":[{"content":"GetChars(Byte[])","pos":[0,16]}]},{"pos":[88132,88140],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[88216,88217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88265,88269],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[88328,88330]},{"pos":[88361,88362],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88454,88462],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[88538,88539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88587,88591],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[88649,88651],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[88679,88680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88980,89010],"content":"GetChars(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32)","pos":[0,30]}]},{"pos":[89331,89339],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[89415,89416],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89464,89468],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[89527,89529]},{"content":",","pos":[89561,89562]},{"pos":[89616,89621],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[89681,89682]},{"pos":[89736,89741],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[89800,89801],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89919,89927],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[90003,90004],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90052,90056],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[90114,90116],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[90145,90146]},{"pos":[90200,90205],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[90265,90266]},{"pos":[90320,90325],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[90384,90385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90726,90749],"content":"GetString(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte*, Int32)","pos":[0,23]}]},{"pos":[90913,90922],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[90999,91000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91048,91052],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[91143,91144]},{"pos":[91198,91203],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[91262,91263],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91368,91377],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[91454,91455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91503,91507],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[91598,91599]},{"pos":[91653,91658],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[91717,91718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91962,91982],"content":"IsAlwaysNormalized()","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized()","pos":[0,20]}]},{"pos":[92111,92129],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[92215,92216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92243,92244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92331,92349],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[92435,92436],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92463,92464],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92718,92755],"content":"IsAlwaysNormalized(NormalizationForm)","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized(NormalizationForm)","pos":[0,37]}]},{"pos":[92944,92962],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[93048,93049],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93115,93132],"content":"NormalizationForm","needQuote":true,"nodes":[{"content":"NormalizationForm","pos":[0,17]}]},{"pos":[93208,93209],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93327,93345],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[93431,93432],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93498,93515],"content":"NormalizationForm","needQuote":true,"nodes":[{"content":"NormalizationForm","pos":[0,17]}]},{"pos":[93591,93592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93869,93886],"content":"GetString(Byte[])","needQuote":true,"nodes":[{"content":"GetString(Byte[])","pos":[0,17]}]},{"pos":[94115,94124],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[94201,94202],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94250,94254],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[94313,94315]},{"pos":[94346,94347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94440,94449],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[94526,94527],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94575,94579],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[94637,94639],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[94667,94668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94930,94938],"content":"BodyName","needQuote":true,"nodes":[{"content":"BodyName","pos":[0,8]}]},{"pos":[95159,95171],"content":"EncodingName","needQuote":true,"nodes":[{"content":"EncodingName","pos":[0,12]}]},{"pos":[95402,95412],"content":"HeaderName","needQuote":true,"nodes":[{"content":"HeaderName","pos":[0,10]}]},{"pos":[95634,95641],"content":"WebName","needQuote":true,"nodes":[{"content":"WebName","pos":[0,7]}]},{"pos":[95862,95877],"content":"WindowsCodePage","needQuote":true,"nodes":[{"content":"WindowsCodePage","pos":[0,15]}]},{"pos":[96123,96139],"content":"IsBrowserDisplay","needQuote":true,"nodes":[{"content":"IsBrowserDisplay","pos":[0,16]}]},{"pos":[96385,96398],"content":"IsBrowserSave","needQuote":true,"nodes":[{"content":"IsBrowserSave","pos":[0,13]}]},{"pos":[96639,96656],"content":"IsMailNewsDisplay","needQuote":true,"nodes":[{"content":"IsMailNewsDisplay","pos":[0,17]}]},{"pos":[96906,96920],"content":"IsMailNewsSave","needQuote":true,"nodes":[{"content":"IsMailNewsSave","pos":[0,14]}]},{"pos":[97159,97171],"content":"IsSingleByte","needQuote":true,"nodes":[{"content":"IsSingleByte","pos":[0,12]}]},{"pos":[97407,97422],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"pos":[97667,97682],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[97922,97932],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[98152,98157],"content":"ASCII","needQuote":true,"nodes":[{"content":"ASCII","pos":[0,5]}]},{"pos":[98365,98373],"content":"CodePage","needQuote":true,"nodes":[{"content":"CodePage","pos":[0,8]}]},{"pos":[98589,98596],"content":"Default","needQuote":true,"nodes":[{"content":"Default","pos":[0,7]}]},{"pos":[98809,98816],"content":"Unicode","needQuote":true,"nodes":[{"content":"Unicode","pos":[0,7]}]},{"pos":[99038,99054],"content":"BigEndianUnicode","needQuote":true,"nodes":[{"content":"BigEndianUnicode","pos":[0,16]}]},{"pos":[99291,99295],"content":"UTF7","needQuote":true,"nodes":[{"content":"UTF7","pos":[0,4]}]},{"pos":[99496,99500],"content":"UTF8","needQuote":true,"nodes":[{"content":"UTF8","pos":[0,4]}]},{"pos":[99702,99707],"content":"UTF32","needQuote":true,"nodes":[{"content":"UTF32","pos":[0,5]}]},{"pos":[99901,99911],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[100006,100014],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[100083,100084],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100111,100112],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100182,100190],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[100259,100260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100287,100288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100485,100507],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[100655,100661],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[100728,100729],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100779,100785],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[100846,100847]},{"pos":[100902,100908],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[100968,100969],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101066,101072],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[101139,101140],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101190,101196],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[101257,101258]},{"pos":[101313,101319],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[101379,101380],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101625,101656],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[101822,101837],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[101913,101914],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101964,101970],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[102031,102032]},{"pos":[102087,102093],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[102153,102154],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102260,102275],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[102351,102352],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102402,102408],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[102469,102470]},{"pos":[102525,102531],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[102591,102592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102818,102827],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[102920,102927],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[102995,102996],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103023,103024],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103093,103100],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[103168,103169],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103196,103197],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103372,103389],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[103498,103513],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[103589,103590],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103617,103618],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103695,103710],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[103786,103787],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103814,103815],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103960,103966],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[104098,104105],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[104295,104309],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[104442,104448],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[104522,104523],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104573,104579],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[104639,104640],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104730,104736],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[104810,104811],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104861,104867],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[104927,104928],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105169,105195],"content":"GetByteCount(Char*, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char*, Int32)","pos":[0,26]}]},{"pos":[105365,105377],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[105457,105458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105506,105510],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[105601,105602]},{"pos":[105656,105661],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[105720,105721],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105829,105841],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[105921,105922],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105970,105974],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[106065,106066]},{"pos":[106120,106125],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[106184,106185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106358,106363],"content":"Char*","needQuote":true,"nodes":[{"content":"Char*","pos":[0,5]}]},{"pos":[106435,106439],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[106561,106565],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[106732,106737],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[106953,106987],"content":"GetByteCount(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char[], Int32, Int32)","pos":[0,34]}]},{"pos":[107324,107336],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[107416,107417],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107465,107469],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[107528,107530]},{"content":",","pos":[107562,107563]},{"pos":[107617,107622],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[107682,107683]},{"pos":[107737,107742],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[107801,107802],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107924,107936],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[108016,108017],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108065,108069],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[108127,108129],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[108158,108159]},{"pos":[108213,108218],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[108278,108279]},{"pos":[108333,108338],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[108397,108398],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108657,108663],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[108783,108787],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[108846,108848]},{"pos":[108911,108915],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[108973,108975],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[109156,109176],"content":"GetByteCount(String)","needQuote":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"pos":[109321,109333],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[109413,109414],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109464,109470],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[109530,109531],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109627,109639],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[109719,109720],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109770,109776],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[109836,109837],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110030,110036],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[110263,110299],"content":"GetBytes(Char*, Int32, Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char*, Int32, Byte*, Int32)","pos":[0,36]}]},{"pos":[110515,110523],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[110599,110600],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110648,110652],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[110743,110744]},{"pos":[110798,110803],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[110863,110864]},{"pos":[110917,110921],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[111012,111013]},{"pos":[111067,111072],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[111131,111132],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111262,111270],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[111346,111347],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111395,111399],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[111490,111491]},{"pos":[111545,111550],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[111610,111611]},{"pos":[111664,111668],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[111759,111760]},{"pos":[111814,111819],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[111878,111879],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112084,112089],"content":"Byte*","needQuote":true,"nodes":[{"content":"Byte*","pos":[0,5]}]},{"pos":[112161,112165],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[112287,112291],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[112556,112601],"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"pos":[113022,113030],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[113106,113107],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113155,113159],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[113218,113220]},{"content":",","pos":[113252,113253]},{"pos":[113307,113312],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[113372,113373]},{"pos":[113427,113432],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[113492,113493]},{"pos":[113546,113550],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[113609,113611]},{"content":",","pos":[113643,113644]},{"pos":[113698,113703],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[113762,113763],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113908,113916],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[113992,113993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114041,114045],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[114103,114105],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[114134,114135]},{"pos":[114189,114194],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114254,114255]},{"pos":[114309,114314],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114374,114375]},{"pos":[114428,114432],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[114490,114492],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[114521,114522]},{"pos":[114576,114581],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114640,114641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114945,114951],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[115071,115075],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[115134,115136]},{"pos":[115199,115203],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[115261,115263],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[115493,115538],"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"pos":[115959,115967],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[116043,116044],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116094,116100],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[116161,116162]},{"pos":[116216,116221],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116281,116282]},{"pos":[116336,116341],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116401,116402]},{"pos":[116455,116459],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[116518,116520]},{"content":",","pos":[116552,116553]},{"pos":[116607,116612],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[116671,116672],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116817,116825],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[116901,116902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116952,116958],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[117019,117020]},{"pos":[117074,117079],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117139,117140]},{"pos":[117194,117199],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117259,117260]},{"pos":[117313,117317],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[117375,117377],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[117406,117407]},{"pos":[117461,117466],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[117525,117526],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117927,117953],"content":"GetCharCount(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte*, Int32)","pos":[0,26]}]},{"pos":[118123,118135],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[118215,118216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118264,118268],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[118359,118360]},{"pos":[118414,118419],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[118478,118479],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118587,118599],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[118679,118680],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118728,118732],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[118823,118824]},{"pos":[118878,118883],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[118942,118943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119228,119262],"content":"GetCharCount(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32)","pos":[0,34]}]},{"pos":[119599,119611],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[119691,119692],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119740,119744],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[119803,119805]},{"content":",","pos":[119837,119838]},{"pos":[119892,119897],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[119957,119958]},{"pos":[120012,120017],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[120076,120077],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120199,120211],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[120291,120292],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120340,120344],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[120402,120404],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[120433,120434]},{"pos":[120488,120493],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[120553,120554]},{"pos":[120608,120613],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[120672,120673],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121051,121087],"content":"GetChars(Byte*, Int32, Char*, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte*, Int32, Char*, Int32)","pos":[0,36]}]},{"pos":[121303,121311],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[121387,121388],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121436,121440],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[121531,121532]},{"pos":[121586,121591],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[121651,121652]},{"pos":[121705,121709],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[121800,121801]},{"pos":[121855,121860],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[121919,121920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122050,122058],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[122134,122135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122183,122187],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[122278,122279]},{"pos":[122333,122338],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[122398,122399]},{"pos":[122452,122456],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[122547,122548]},{"pos":[122602,122607],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[122666,122667],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123007,123052],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","pos":[0,45]}]},{"pos":[123473,123481],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[123557,123558],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123606,123610],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[123669,123671]},{"content":",","pos":[123703,123704]},{"pos":[123758,123763],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[123823,123824]},{"pos":[123878,123883],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[123943,123944]},{"pos":[123997,124001],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[124060,124062]},{"content":",","pos":[124094,124095]},{"pos":[124149,124154],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[124213,124214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124359,124367],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[124443,124444],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124492,124496],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[124554,124556],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[124585,124586]},{"pos":[124640,124645],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[124705,124706]},{"pos":[124760,124765],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[124825,124826]},{"pos":[124879,124883],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[124941,124943],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[124972,124973]},{"pos":[125027,125032],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[125091,125092],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125464,125476],"content":"GetDecoder()","needQuote":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[125589,125599],"content":"GetDecoder","needQuote":true,"nodes":[{"content":"GetDecoder","pos":[0,10]}]},{"pos":[125677,125678],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125705,125706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125785,125795],"content":"GetDecoder","needQuote":true,"nodes":[{"content":"GetDecoder","pos":[0,10]}]},{"pos":[125873,125874],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125901,125902],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126081,126088],"content":"Decoder","needQuote":true,"nodes":[{"content":"Decoder","pos":[0,7]}]},{"pos":[126277,126289],"content":"GetEncoder()","needQuote":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[126402,126412],"content":"GetEncoder","needQuote":true,"nodes":[{"content":"GetEncoder","pos":[0,10]}]},{"pos":[126490,126491],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126518,126519],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126598,126608],"content":"GetEncoder","needQuote":true,"nodes":[{"content":"GetEncoder","pos":[0,10]}]},{"pos":[126686,126687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126714,126715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126894,126901],"content":"Encoder","needQuote":true,"nodes":[{"content":"Encoder","pos":[0,7]}]},{"pos":[127091,127104],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[127219,127230],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[127309,127310],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127337,127338],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127418,127429],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[127508,127509],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127536,127537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127757,127779],"content":"GetMaxByteCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"pos":[127928,127943],"content":"GetMaxByteCount","needQuote":true,"nodes":[{"content":"GetMaxByteCount","pos":[0,15]}]},{"pos":[128026,128027],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128076,128081],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[128140,128141],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128239,128254],"content":"GetMaxByteCount","needQuote":true,"nodes":[{"content":"GetMaxByteCount","pos":[0,15]}]},{"pos":[128337,128338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128387,128392],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[128451,128452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128699,128721],"content":"GetMaxCharCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"pos":[128870,128885],"content":"GetMaxCharCount","needQuote":true,"nodes":[{"content":"GetMaxCharCount","pos":[0,15]}]},{"pos":[128968,128969],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129018,129023],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[129082,129083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129181,129196],"content":"GetMaxCharCount","needQuote":true,"nodes":[{"content":"GetMaxCharCount","pos":[0,15]}]},{"pos":[129279,129280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129329,129334],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[129393,129394],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129623,129636],"content":"GetPreamble()","needQuote":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"pos":[129751,129762],"content":"GetPreamble","needQuote":true,"nodes":[{"content":"GetPreamble","pos":[0,11]}]},{"pos":[129841,129842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129869,129870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129950,129961],"content":"GetPreamble","needQuote":true,"nodes":[{"content":"GetPreamble","pos":[0,11]}]},{"pos":[130040,130041],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130068,130069],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130310,130341],"content":"GetString(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte[], Int32, Int32)","pos":[0,31]}]},{"pos":[130666,130675],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[130752,130753],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130801,130805],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[130864,130866]},{"content":",","pos":[130898,130899]},{"pos":[130953,130958],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[131018,131019]},{"pos":[131073,131078],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[131137,131138],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131257,131266],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[131343,131344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131392,131396],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[131454,131456],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[131485,131486]},{"pos":[131540,131545],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[131605,131606]},{"pos":[131660,131665],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[131724,131725],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132010,132031],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[132225,132252],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[132471,132488],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[132672,132696],"content":"EncoderFallbackException","needQuote":true,"nodes":[{"content":"EncoderFallbackException","pos":[0,24]}]},{"pos":[132911,132935],"content":"DecoderFallbackException","needQuote":true,"nodes":[{"content":"DecoderFallbackException","pos":[0,24]}]}],"content":"items:\n- uid: System.Text.UTF8Encoding\n  commentId: T:System.Text.UTF8Encoding\n  id: UTF8Encoding\n  parent: System.Text\n  children:\n  - System.Text.UTF8Encoding.#ctor\n  - System.Text.UTF8Encoding.#ctor(System.Boolean)\n  - System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)\n  - System.Text.UTF8Encoding.Equals(System.Object)\n  - System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)\n  - System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - System.Text.UTF8Encoding.GetByteCount(System.String)\n  - System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  - System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)\n  - System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.UTF8Encoding.GetDecoder\n  - System.Text.UTF8Encoding.GetEncoder\n  - System.Text.UTF8Encoding.GetHashCode\n  - System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  - System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n  - System.Text.UTF8Encoding.GetPreamble\n  - System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: UTF8Encoding\n  fullName: System.Text.UTF8Encoding\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UTF8Encoding\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 37\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Represents a UTF-8 encoding of Unicode characters.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class UTF8Encoding : Encoding, ICloneable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class UTF8Encoding\n          Inherits Encoding\n          Implements ICloneable\n  seealso:\n  - type: System.Text.Decoder\n    commentId: T:System.Text.Decoder\n  - type: System.Text.Encoder\n    commentId: T:System.Text.Encoder\n  inheritance:\n  - System.Object\n  - System.Text.Encoding\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  - System.Text.Encoding.GetEncoding(System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncoding(System.String)\n  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncodings\n  - System.Text.Encoding.Clone\n  - System.Text.Encoding.GetByteCount(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.String)\n  - System.Text.Encoding.GetCharCount(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  - System.Text.Encoding.IsAlwaysNormalized\n  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  - System.Text.Encoding.GetString(System.Byte[])\n  - System.Text.Encoding.BodyName\n  - System.Text.Encoding.EncodingName\n  - System.Text.Encoding.HeaderName\n  - System.Text.Encoding.WebName\n  - System.Text.Encoding.WindowsCodePage\n  - System.Text.Encoding.IsBrowserDisplay\n  - System.Text.Encoding.IsBrowserSave\n  - System.Text.Encoding.IsMailNewsDisplay\n  - System.Text.Encoding.IsMailNewsSave\n  - System.Text.Encoding.IsSingleByte\n  - System.Text.Encoding.EncoderFallback\n  - System.Text.Encoding.DecoderFallback\n  - System.Text.Encoding.IsReadOnly\n  - System.Text.Encoding.ASCII\n  - System.Text.Encoding.CodePage\n  - System.Text.Encoding.Default\n  - System.Text.Encoding.Unicode\n  - System.Text.Encoding.BigEndianUnicode\n  - System.Text.Encoding.UTF7\n  - System.Text.Encoding.UTF8\n  - System.Text.Encoding.UTF32\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: UTF8Encoding\n- uid: System.Text.UTF8Encoding.#ctor\n  commentId: M:System.Text.UTF8Encoding.#ctor\n  id: '#ctor'\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: UTF8Encoding()\n  fullName: System.Text.UTF8Encoding.UTF8Encoding()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 63\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.UTF8Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public UTF8Encoding()\n    content.vb: Public Sub New\n  seealso:\n  - type: System.Text.UTF8Encoding.GetPreamble\n    commentId: M:System.Text.UTF8Encoding.GetPreamble\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UTF8Encoding.UTF8Encoding()\n- uid: System.Text.UTF8Encoding.#ctor(System.Boolean)\n  commentId: M:System.Text.UTF8Encoding.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: UTF8Encoding(Boolean)\n  fullName: System.Text.UTF8Encoding.UTF8Encoding(System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 68\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.UTF8Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. A parameter specifies whether to provide a Unicode byte order mark. </p>\\n\"\n  syntax:\n    content: public UTF8Encoding(bool encoderShouldEmitUTF8Identifier)\n    content.vb: Public Sub New(encoderShouldEmitUTF8Identifier As Boolean)\n    parameters:\n    - id: encoderShouldEmitUTF8Identifier\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to specify that the <xref href=\\\"System.Text.UTF8Encoding.GetPreamble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method returns a Unicode byte order mark; otherwise, <strong>false</strong>. See the Remarks section for more information. </p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetPreamble\n    commentId: M:System.Text.UTF8Encoding.GetPreamble\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UTF8Encoding.UTF8Encoding(Boolean)\n- uid: System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)\n  commentId: M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean)'\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: UTF8Encoding(Boolean, Boolean)\n  fullName: System.Text.UTF8Encoding.UTF8Encoding(System.Boolean, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 74\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.UTF8Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. Parameters specify whether to provide a Unicode byte order mark and whether to throw an exception when an invalid encoding is detected. </p>\\n\"\n  syntax:\n    content: public UTF8Encoding(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes)\n    content.vb: Public Sub New(encoderShouldEmitUTF8Identifier As Boolean, throwOnInvalidBytes As Boolean)\n    parameters:\n    - id: encoderShouldEmitUTF8Identifier\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to specify that the <xref href=\\\"System.Text.UTF8Encoding.GetPreamble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method should return a Unicode byte order mark; otherwise, <strong>false</strong>. See the Remarks section for more information. </p>\\n\"\n    - id: throwOnInvalidBytes\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to throw an exception when an invalid encoding is detected; otherwise, <strong>false</strong>. </p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetPreamble\n    commentId: M:System.Text.UTF8Encoding.GetPreamble\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UTF8Encoding.UTF8Encoding(Boolean, Boolean)\n- uid: System.Text.UTF8Encoding.Equals(System.Object)\n  commentId: M:System.Text.UTF8Encoding.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Text.UTF8Encoding.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 2394\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Determines whether the specified object is equal to the current <xref href=\\\"System.Text.UTF8Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is an instance of <xref href=\\\"System.Text.UTF8Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and is equal to the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Text.Encoding.Equals(System.Object)\n  seealso:\n  - type: System.Text.UTF8Encoding.#ctor\n    commentId: M:System.Text.UTF8Encoding.#ctor\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF8Encoding.Equals(Object)\n- uid: System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)\n  commentId: M:System.Text.UTF8Encoding.GetByteCount(System.Char*,System.Int32)\n  id: GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char*, Int32)\n  fullName: System.Text.UTF8Encoding.GetByteCount(System.Char*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 167\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public override int GetByteCount(char *chars, int count)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetByteCount(chars As Char *, count As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the first character to encode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters. </p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for a complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.UTF8Encoding.GetEncoder\n    commentId: M:System.Text.UTF8Encoding.GetEncoder\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF8Encoding.GetByteCount(Char*, Int32)\n- uid: System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char[], Int32, Int32)\n  fullName: System.Text.UTF8Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 120\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetByteCount(char[] chars, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetByteCount(chars As Char(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters. </p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>The <xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.UTF8Encoding.GetEncoder\n    commentId: M:System.Text.UTF8Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF8Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)\n  name.vb: GetByteCount(Char(), Int32, Int32)\n  nameWithType: UTF8Encoding.GetByteCount(Char[], Int32, Int32)\n  nameWithType.vb: UTF8Encoding.GetByteCount(Char(), Int32, Int32)\n- uid: System.Text.UTF8Encoding.GetByteCount(System.String)\n  commentId: M:System.Text.UTF8Encoding.GetByteCount(System.String)\n  id: GetByteCount(System.String)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(String)\n  fullName: System.Text.UTF8Encoding.GetByteCount(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 151\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding the characters in the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetByteCount(string chars)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetByteCount(chars As String) As Integer\n    parameters:\n    - id: chars\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the set of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.String)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.UTF8Encoding.GetEncoder\n    commentId: M:System.Text.UTF8Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF8Encoding.GetByteCount(String)\n- uid: System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  commentId: M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: System.Text.UTF8Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 282\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public override int GetBytes(char *chars, int charCount, byte *bytes, int byteCount)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetBytes(chars As Char *, charCount As Integer, bytes As Byte *, byteCount As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the location at which to start writing the resulting sequence of bytes. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to write. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written at the location indicated by <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charCount</em> or <em>byteCount</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteCount</em> is less than the resulting number of bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetEncoder\n    commentId: M:System.Text.UTF8Encoding.GetEncoder\n  - type: System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF8Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n- uid: System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: System.Text.UTF8Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 238\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters from the specified character array into the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetEncoder\n    commentId: M:System.Text.UTF8Encoding.GetEncoder\n  - type: System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF8Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  nameWithType: UTF8Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: UTF8Encoding.GetBytes(Char(), Int32, Int32, Byte(), Int32)\n- uid: System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: System.Text.UTF8Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 191\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters from the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetBytes(s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the set of characters to encode. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetEncoder\n    commentId: M:System.Text.UTF8Encoding.GetEncoder\n  - type: System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF8Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)\n  nameWithType: UTF8Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType.vb: UTF8Encoding.GetBytes(String, Int32, Int32, Byte(), Int32)\n- uid: System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)\n  commentId: M:System.Text.UTF8Encoding.GetCharCount(System.Byte*,System.Int32)\n  id: GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte*, Int32)\n  fullName: System.Text.UTF8Encoding.GetCharCount(System.Byte*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 338\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public override int GetCharCount(byte *bytes, int count)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetCharCount(bytes As Byte *, count As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - type: System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UTF8Encoding.GetDecoder\n    commentId: M:System.Text.UTF8Encoding.GetDecoder\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF8Encoding.GetCharCount(Byte*, Int32)\n- uid: System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte[], Int32, Int32)\n  fullName: System.Text.UTF8Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 308\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetCharCount(byte[] bytes, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - type: System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UTF8Encoding.GetDecoder\n    commentId: M:System.Text.UTF8Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF8Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetCharCount(Byte(), Int32, Int32)\n  nameWithType: UTF8Encoding.GetCharCount(Byte[], Int32, Int32)\n  nameWithType.vb: UTF8Encoding.GetCharCount(Byte(), Int32, Int32)\n- uid: System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  commentId: M:System.Text.UTF8Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  fullName: System.Text.UTF8Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 405\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public override int GetChars(byte *bytes, int byteCount, char *chars, int charCount)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetChars(bytes As Byte *, byteCount As Integer, chars As Char *, charCount As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the first byte to decode. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the location at which to start writing the resulting set of characters. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to write. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written at the location indicated by <em>chars</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteCount</em> or <em>charCount</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\\n<p>-or- </p>\\n<p>\\n<em>charCount</em> is less than the resulting number of characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UTF8Encoding.GetDecoder\n    commentId: M:System.Text.UTF8Encoding.GetDecoder\n  - type: System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF8Encoding.GetChars(Byte*, Int32, Char*, Int32)\n- uid: System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Text.UTF8Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 361\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array to contain the resulting set of characters. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting set of characters. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UTF8Encoding.GetDecoder\n    commentId: M:System.Text.UTF8Encoding.GetDecoder\n  - type: System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF8Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)\n  nameWithType: UTF8Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: UTF8Encoding.GetChars(Byte(), Int32, Int32, Char(), Int32)\n- uid: System.Text.UTF8Encoding.GetDecoder\n  commentId: M:System.Text.UTF8Encoding.GetDecoder\n  id: GetDecoder\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetDecoder()\n  fullName: System.Text.UTF8Encoding.GetDecoder()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDecoder\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 2326\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters. </p>\\n\"\n  syntax:\n    content: public override Decoder GetDecoder()\n    content.vb: Public Overrides Function GetDecoder As Decoder\n    return:\n      type: System.Text.Decoder\n      description: \"\\n<p>A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetDecoder\n  seealso:\n  - type: System.Text.Decoder\n    commentId: T:System.Text.Decoder\n  - type: System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF8Encoding.GetEncoder\n    commentId: M:System.Text.UTF8Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF8Encoding.GetDecoder()\n- uid: System.Text.UTF8Encoding.GetEncoder\n  commentId: M:System.Text.UTF8Encoding.GetEncoder\n  id: GetEncoder\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetEncoder()\n  fullName: System.Text.UTF8Encoding.GetEncoder()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEncoder\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 2331\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Obtains an encoder that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</p>\\n\"\n  syntax:\n    content: public override Encoder GetEncoder()\n    content.vb: Public Overrides Function GetEncoder As Encoder\n    return:\n      type: System.Text.Encoder\n      description: \"\\n<p>A <xref href=\\\"System.Text.Encoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that converts a sequence of Unicode characters into a UTF-8 encoded sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetEncoder\n  seealso:\n  - type: System.Text.Encoder\n    commentId: T:System.Text.Encoder\n  - type: System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF8Encoding.GetDecoder\n    commentId: M:System.Text.UTF8Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF8Encoding.GetEncoder()\n- uid: System.Text.UTF8Encoding.GetHashCode\n  commentId: M:System.Text.UTF8Encoding.GetHashCode\n  id: GetHashCode\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Text.UTF8Encoding.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 2406\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Returns the hash code for the current instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for the current instance.</p>\\n\"\n  overridden: System.Text.Encoding.GetHashCode\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF8Encoding.GetHashCode()\n- uid: System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  commentId: M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  id: GetMaxByteCount(System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetMaxByteCount(Int32)\n  fullName: System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMaxByteCount\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 2336\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\\n\"\n  syntax:\n    content: public override int GetMaxByteCount(int charCount)\n    content.vb: Public Overrides Function GetMaxByteCount(charCount As Integer) As Integer\n    parameters:\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF8Encoding.GetEncoder\n    commentId: M:System.Text.UTF8Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF8Encoding.GetMaxByteCount(Int32)\n- uid: System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n  commentId: M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n  id: GetMaxCharCount(System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetMaxCharCount(Int32)\n  fullName: System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMaxCharCount\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 2359\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\\n\"\n  syntax:\n    content: public override int GetMaxCharCount(int byteCount)\n    content.vb: Public Overrides Function GetMaxCharCount(byteCount As Integer) As Integer\n    parameters:\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF8Encoding.GetDecoder\n    commentId: M:System.Text.UTF8Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF8Encoding.GetMaxCharCount(Int32)\n- uid: System.Text.UTF8Encoding.GetPreamble\n  commentId: M:System.Text.UTF8Encoding.GetPreamble\n  id: GetPreamble\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetPreamble()\n  fullName: System.Text.UTF8Encoding.GetPreamble()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetPreamble\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 2383\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Returns a Unicode byte order mark encoded in UTF-8 format, if the <xref href=\\\"System.Text.UTF8Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> encoding object is configured to supply one. </p>\\n\"\n  syntax:\n    content: public override byte[] GetPreamble()\n    content.vb: Public Overrides Function GetPreamble As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing the Unicode byte order mark, if the <xref href=\\\"System.Text.UTF8Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> encoding object is configured to supply one. Otherwise, this method returns a zero-length byte array. </p>\\n\"\n  overridden: System.Text.Encoding.GetPreamble\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF8Encoding.GetPreamble()\n- uid: System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  id: GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF8Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetString(Byte[], Int32, Int32)\n  fullName: System.Text.UTF8Encoding.GetString(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetString\n    path: src/mscorlib/src/System/Text/UTF8Encoding.cs\n    startLine: 431\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a range of bytes from a byte array into a string.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ComVisible(false)]\n\n      public override string GetString(byte[] bytes, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetString(bytes As Byte(), index As Integer, count As Integer) As String\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the results of decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UTF8Encoding.GetDecoder\n    commentId: M:System.Text.UTF8Encoding.GetDecoder\n  - type: System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF8Encoding.GetString(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetString(Byte(), Int32, Int32)\n  nameWithType: UTF8Encoding.GetString(Byte[], Int32, Int32)\n  nameWithType.vb: UTF8Encoding.GetString(Byte(), Int32, Int32)\nreferences:\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  nameWithType: Encoding\n  commentId: T:System.Text.Encoding\n- uid: System.ICloneable\n  parent: System\n  isExternal: true\n  name: ICloneable\n  fullName: System.ICloneable\n  nameWithType: ICloneable\n  commentId: T:System.ICloneable\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Convert(Encoding, Encoding, Byte[])\n  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[])\n  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte())\n  name.vb: Convert(Encoding, Encoding, Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])\n  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte())\n  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte(), System.Int32, System.Int32)\n  name.vb: Convert(Encoding, Encoding, Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: RegisterProvider(EncodingProvider)\n  fullName: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  spec.csharp:\n  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n    name: RegisterProvider\n    fullName: System.Text.Encoding.RegisterProvider\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.EncodingProvider\n    name: EncodingProvider\n    fullName: System.Text.EncodingProvider\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n    name: RegisterProvider\n    fullName: System.Text.Encoding.RegisterProvider\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.EncodingProvider\n    name: EncodingProvider\n    fullName: System.Text.EncodingProvider\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.RegisterProvider(EncodingProvider)\n  commentId: M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n- uid: System.Text.Encoding.GetEncoding(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(Int32)\n  fullName: System.Text.Encoding.GetEncoding(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(Int32)\n  commentId: M:System.Text.Encoding.GetEncoding(System.Int32)\n- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.GetEncoding(System.Int32, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  commentId: M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n- uid: System.Text.Encoding.GetEncoding(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(String)\n  fullName: System.Text.Encoding.GetEncoding(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.String)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.String)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(String)\n  commentId: M:System.Text.Encoding.GetEncoding(System.String)\n- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(String, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.GetEncoding(System.String, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)\n  commentId: M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n- uid: System.Text.Encoding.GetEncodings\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncodings()\n  fullName: System.Text.Encoding.GetEncodings()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncodings\n    name: GetEncodings\n    fullName: System.Text.Encoding.GetEncodings\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncodings\n    name: GetEncodings\n    fullName: System.Text.Encoding.GetEncodings\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncodings()\n  commentId: M:System.Text.Encoding.GetEncodings\n- uid: System.Text.Encoding.Clone\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Clone()\n  fullName: System.Text.Encoding.Clone()\n  spec.csharp:\n  - uid: System.Text.Encoding.Clone\n    name: Clone\n    fullName: System.Text.Encoding.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Clone\n    name: Clone\n    fullName: System.Text.Encoding.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Clone()\n  commentId: M:System.Text.Encoding.Clone\n- uid: System.Text.Encoding.GetByteCount(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char[])\n  fullName: System.Text.Encoding.GetByteCount(System.Char[])\n  fullname.vb: System.Text.Encoding.GetByteCount(System.Char())\n  name.vb: GetByteCount(Char())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[])\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[])\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char[])\n  nameWithType.vb: Encoding.GetByteCount(Char())\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n- uid: System.Text.Encoding.GetBytes(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[])\n  fullName: System.Text.Encoding.GetBytes(System.Char[])\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char())\n  name.vb: GetBytes(Char())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[])\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[])\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[])\n  nameWithType.vb: Encoding.GetBytes(Char())\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[])\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[], Int32, Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)\n  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetBytes(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(String)\n  fullName: System.Text.Encoding.GetBytes(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.String)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.String)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(String)\n  commentId: M:System.Text.Encoding.GetBytes(System.String)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte[])\n  fullName: System.Text.Encoding.GetCharCount(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte())\n  name.vb: GetCharCount(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[])\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[])\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte[])\n  nameWithType.vb: Encoding.GetCharCount(Byte())\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n- uid: System.Text.Encoding.GetChars(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[])\n  fullName: System.Text.Encoding.GetChars(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte())\n  name.vb: GetChars(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[])\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[])\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[])\n  nameWithType.vb: Encoding.GetChars(Byte())\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[])\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte*, Int32)\n  fullName: System.Text.Encoding.GetString(System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetString(System.Byte*,System.Int32)\n- uid: System.Text.Encoding.IsAlwaysNormalized\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsAlwaysNormalized()\n  fullName: System.Text.Encoding.IsAlwaysNormalized()\n  spec.csharp:\n  - uid: System.Text.Encoding.IsAlwaysNormalized\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.IsAlwaysNormalized\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.IsAlwaysNormalized()\n  commentId: M:System.Text.Encoding.IsAlwaysNormalized\n- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsAlwaysNormalized(NormalizationForm)\n  fullName: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  spec.csharp:\n  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.NormalizationForm\n    name: NormalizationForm\n    fullName: System.Text.NormalizationForm\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.NormalizationForm\n    name: NormalizationForm\n    fullName: System.Text.NormalizationForm\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.IsAlwaysNormalized(NormalizationForm)\n  commentId: M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n- uid: System.Text.Encoding.GetString(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte[])\n  fullName: System.Text.Encoding.GetString(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetString(System.Byte())\n  name.vb: GetString(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte[])\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte[])\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte[])\n  nameWithType.vb: Encoding.GetString(Byte())\n  commentId: M:System.Text.Encoding.GetString(System.Byte[])\n- uid: System.Text.Encoding.BodyName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: BodyName\n  fullName: System.Text.Encoding.BodyName\n  nameWithType: Encoding.BodyName\n  commentId: P:System.Text.Encoding.BodyName\n- uid: System.Text.Encoding.EncodingName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: EncodingName\n  fullName: System.Text.Encoding.EncodingName\n  nameWithType: Encoding.EncodingName\n  commentId: P:System.Text.Encoding.EncodingName\n- uid: System.Text.Encoding.HeaderName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: HeaderName\n  fullName: System.Text.Encoding.HeaderName\n  nameWithType: Encoding.HeaderName\n  commentId: P:System.Text.Encoding.HeaderName\n- uid: System.Text.Encoding.WebName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: WebName\n  fullName: System.Text.Encoding.WebName\n  nameWithType: Encoding.WebName\n  commentId: P:System.Text.Encoding.WebName\n- uid: System.Text.Encoding.WindowsCodePage\n  parent: System.Text.Encoding\n  isExternal: true\n  name: WindowsCodePage\n  fullName: System.Text.Encoding.WindowsCodePage\n  nameWithType: Encoding.WindowsCodePage\n  commentId: P:System.Text.Encoding.WindowsCodePage\n- uid: System.Text.Encoding.IsBrowserDisplay\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsBrowserDisplay\n  fullName: System.Text.Encoding.IsBrowserDisplay\n  nameWithType: Encoding.IsBrowserDisplay\n  commentId: P:System.Text.Encoding.IsBrowserDisplay\n- uid: System.Text.Encoding.IsBrowserSave\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsBrowserSave\n  fullName: System.Text.Encoding.IsBrowserSave\n  nameWithType: Encoding.IsBrowserSave\n  commentId: P:System.Text.Encoding.IsBrowserSave\n- uid: System.Text.Encoding.IsMailNewsDisplay\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsMailNewsDisplay\n  fullName: System.Text.Encoding.IsMailNewsDisplay\n  nameWithType: Encoding.IsMailNewsDisplay\n  commentId: P:System.Text.Encoding.IsMailNewsDisplay\n- uid: System.Text.Encoding.IsMailNewsSave\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsMailNewsSave\n  fullName: System.Text.Encoding.IsMailNewsSave\n  nameWithType: Encoding.IsMailNewsSave\n  commentId: P:System.Text.Encoding.IsMailNewsSave\n- uid: System.Text.Encoding.IsSingleByte\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsSingleByte\n  fullName: System.Text.Encoding.IsSingleByte\n  nameWithType: Encoding.IsSingleByte\n  commentId: P:System.Text.Encoding.IsSingleByte\n- uid: System.Text.Encoding.EncoderFallback\n  parent: System.Text.Encoding\n  isExternal: true\n  name: EncoderFallback\n  fullName: System.Text.Encoding.EncoderFallback\n  nameWithType: Encoding.EncoderFallback\n  commentId: P:System.Text.Encoding.EncoderFallback\n- uid: System.Text.Encoding.DecoderFallback\n  parent: System.Text.Encoding\n  isExternal: true\n  name: DecoderFallback\n  fullName: System.Text.Encoding.DecoderFallback\n  nameWithType: Encoding.DecoderFallback\n  commentId: P:System.Text.Encoding.DecoderFallback\n- uid: System.Text.Encoding.IsReadOnly\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Text.Encoding.IsReadOnly\n  nameWithType: Encoding.IsReadOnly\n  commentId: P:System.Text.Encoding.IsReadOnly\n- uid: System.Text.Encoding.ASCII\n  parent: System.Text.Encoding\n  isExternal: true\n  name: ASCII\n  fullName: System.Text.Encoding.ASCII\n  nameWithType: Encoding.ASCII\n  commentId: P:System.Text.Encoding.ASCII\n- uid: System.Text.Encoding.CodePage\n  parent: System.Text.Encoding\n  isExternal: true\n  name: CodePage\n  fullName: System.Text.Encoding.CodePage\n  nameWithType: Encoding.CodePage\n  commentId: P:System.Text.Encoding.CodePage\n- uid: System.Text.Encoding.Default\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Default\n  fullName: System.Text.Encoding.Default\n  nameWithType: Encoding.Default\n  commentId: P:System.Text.Encoding.Default\n- uid: System.Text.Encoding.Unicode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Unicode\n  fullName: System.Text.Encoding.Unicode\n  nameWithType: Encoding.Unicode\n  commentId: P:System.Text.Encoding.Unicode\n- uid: System.Text.Encoding.BigEndianUnicode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: BigEndianUnicode\n  fullName: System.Text.Encoding.BigEndianUnicode\n  nameWithType: Encoding.BigEndianUnicode\n  commentId: P:System.Text.Encoding.BigEndianUnicode\n- uid: System.Text.Encoding.UTF7\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF7\n  fullName: System.Text.Encoding.UTF7\n  nameWithType: Encoding.UTF7\n  commentId: P:System.Text.Encoding.UTF7\n- uid: System.Text.Encoding.UTF8\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF8\n  fullName: System.Text.Encoding.UTF8\n  nameWithType: Encoding.UTF8\n  commentId: P:System.Text.Encoding.UTF8\n- uid: System.Text.Encoding.UTF32\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF32\n  fullName: System.Text.Encoding.UTF32\n  nameWithType: Encoding.UTF32\n  commentId: P:System.Text.Encoding.UTF32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Text.Encoding.Equals(System.Object)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Text.Encoding.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Text.Encoding.Equals(System.Object)\n    name: Equals\n    fullName: System.Text.Encoding.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Equals(System.Object)\n    name: Equals\n    fullName: System.Text.Encoding.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Equals(Object)\n  commentId: M:System.Text.Encoding.Equals(System.Object)\n- uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char*, Int32)\n  fullName: System.Text.Encoding.GetByteCount(System.Char*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char*, Int32)\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n- uid: System.Char*\n  name: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Char*\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char[], Int32, Int32)\n  fullName: System.Text.Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)\n  name.vb: GetByteCount(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char[], Int32, Int32)\n  nameWithType.vb: Encoding.GetByteCount(Char(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Text.Encoding.GetByteCount(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(String)\n  fullName: System.Text.Encoding.GetByteCount(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.String)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.String)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(String)\n  commentId: M:System.Text.Encoding.GetByteCount(System.String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n- uid: System.Byte*\n  name: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Byte*\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType.vb: Encoding.GetBytes(String, Int32, Int32, Byte(), Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte*, Int32)\n  fullName: System.Text.Encoding.GetCharCount(System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetCharCount(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetCharCount(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte*, Int32, Char*, Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32, Char(), Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n- uid: System.Text.Encoding.GetDecoder\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetDecoder()\n  fullName: System.Text.Encoding.GetDecoder()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetDecoder\n    name: GetDecoder\n    fullName: System.Text.Encoding.GetDecoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetDecoder\n    name: GetDecoder\n    fullName: System.Text.Encoding.GetDecoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetDecoder()\n  commentId: M:System.Text.Encoding.GetDecoder\n- uid: System.Text.Decoder\n  parent: System.Text\n  isExternal: false\n  name: Decoder\n  fullName: System.Text.Decoder\n  nameWithType: Decoder\n  commentId: T:System.Text.Decoder\n- uid: System.Text.Encoding.GetEncoder\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoder()\n  fullName: System.Text.Encoding.GetEncoder()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoder\n    name: GetEncoder\n    fullName: System.Text.Encoding.GetEncoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoder\n    name: GetEncoder\n    fullName: System.Text.Encoding.GetEncoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoder()\n  commentId: M:System.Text.Encoding.GetEncoder\n- uid: System.Text.Encoder\n  parent: System.Text\n  isExternal: false\n  name: Encoder\n  fullName: System.Text.Encoder\n  nameWithType: Encoder\n  commentId: T:System.Text.Encoder\n- uid: System.Text.Encoding.GetHashCode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Text.Encoding.GetHashCode()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetHashCode\n    name: GetHashCode\n    fullName: System.Text.Encoding.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetHashCode\n    name: GetHashCode\n    fullName: System.Text.Encoding.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetHashCode()\n  commentId: M:System.Text.Encoding.GetHashCode\n- uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetMaxByteCount(Int32)\n  fullName: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    name: GetMaxByteCount\n    fullName: System.Text.Encoding.GetMaxByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    name: GetMaxByteCount\n    fullName: System.Text.Encoding.GetMaxByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetMaxByteCount(Int32)\n  commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n- uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetMaxCharCount(Int32)\n  fullName: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    name: GetMaxCharCount\n    fullName: System.Text.Encoding.GetMaxCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    name: GetMaxCharCount\n    fullName: System.Text.Encoding.GetMaxCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetMaxCharCount(Int32)\n  commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n- uid: System.Text.Encoding.GetPreamble\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetPreamble()\n  fullName: System.Text.Encoding.GetPreamble()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetPreamble\n    name: GetPreamble\n    fullName: System.Text.Encoding.GetPreamble\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetPreamble\n    name: GetPreamble\n    fullName: System.Text.Encoding.GetPreamble\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetPreamble()\n  commentId: M:System.Text.Encoding.GetPreamble\n- uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetString(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetString(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetString(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetString(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Text.EncoderFallbackException\n  isExternal: false\n  name: EncoderFallbackException\n  fullName: System.Text.EncoderFallbackException\n  nameWithType: EncoderFallbackException\n  commentId: T:System.Text.EncoderFallbackException\n- uid: System.Text.DecoderFallbackException\n  isExternal: false\n  name: DecoderFallbackException\n  fullName: System.Text.DecoderFallbackException\n  nameWithType: DecoderFallbackException\n  commentId: T:System.Text.DecoderFallbackException\n"}