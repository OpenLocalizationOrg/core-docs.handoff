{"nodes":[{"pos":[4245,4262],"content":"ExpressionVisitor","needQuote":true,"nodes":[{"content":"ExpressionVisitor","pos":[0,17]}]},{"pos":[5575,5594],"content":"ExpressionVisitor()","needQuote":true,"nodes":[{"content":"ExpressionVisitor()","pos":[0,19]}]},{"pos":[6873,6910],"content":"Visit(ReadOnlyCollection<Expression>)","needQuote":true,"nodes":[{"content":"Visit(ReadOnlyCollection&lt;Expression&gt;)","pos":[0,37],"source":"Visit(ReadOnlyCollection<Expression>)"}]},{"content":"\\n&lt;p&gt;The expressions to visit.&lt;/p&gt;\\n","pos":[7910,7946],"source":"\\n<p>The expressions to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.&lt;/p&gt;\\n","pos":[8078,8209],"source":"\\n<p>The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.</p>\\n"},{"pos":[8949,8966],"content":"Visit(Expression)","needQuote":true,"nodes":[{"content":"Visit(Expression)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[9786,9821],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[9902,10022],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[10619,10662],"content":"Visit<T>(ReadOnlyCollection<T>, Func<T, T>)","needQuote":true,"nodes":[{"content":"Visit&lt;T&gt;(ReadOnlyCollection&lt;T&gt;, Func&lt;T, T&gt;)","pos":[0,43],"source":"Visit<T>(ReadOnlyCollection<T>, Func<T, T>)"}]},{"content":"\\n&lt;p&gt;The nodes to visit.&lt;/p&gt;\\n","pos":[11642,11672],"source":"\\n<p>The nodes to visit.</p>\\n"},{"content":"\\n&lt;p&gt;A delegate that visits a single element, optionally replacing it with a new element.&lt;/p&gt;\\n","pos":[11752,11847],"source":"\\n<p>A delegate that visits a single element, optionally replacing it with a new element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the nodes.&lt;/p&gt;\\n","pos":[11901,11934],"source":"\\n<p>The type of the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The modified node list, if any of the elements were modified; otherwise, returns the original node list.&lt;/p&gt;\\n","pos":[12035,12150],"source":"\\n<p>The modified node list, if any of the elements were modified; otherwise, returns the original node list.</p>\\n"},{"pos":[12925,12954],"content":"VisitAndConvert<T>(T, String)","needQuote":true,"nodes":[{"content":"VisitAndConvert&lt;T&gt;(T, String)","pos":[0,29],"source":"VisitAndConvert<T>(T, String)"}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[13793,13828],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the calling method; used to report to report a better error message.&lt;/p&gt;\\n","pos":[13897,13988],"source":"\\n<p>The name of the calling method; used to report to report a better error message.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the expression.&lt;/p&gt;\\n","pos":[14042,14080],"source":"\\n<p>The type of the expression.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[14132,14252],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"content":"\\n&lt;p&gt;The visit method for this node returned a different type.&lt;/p&gt;\\n","pos":[14379,14447],"source":"\\n<p>The visit method for this node returned a different type.</p>\\n"},{"pos":[15248,15297],"content":"VisitAndConvert<T>(ReadOnlyCollection<T>, String)","needQuote":true,"nodes":[{"content":"VisitAndConvert&lt;T&gt;(ReadOnlyCollection&lt;T&gt;, String)","pos":[0,49],"source":"VisitAndConvert<T>(ReadOnlyCollection<T>, String)"}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[16325,16360],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the calling method; used to report to report a better error message.&lt;/p&gt;\\n","pos":[16429,16520],"source":"\\n<p>The name of the calling method; used to report to report a better error message.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the expression.&lt;/p&gt;\\n","pos":[16574,16612],"source":"\\n<p>The type of the expression.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[16713,16833],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"content":"\\n&lt;p&gt;The visit method for this node returned a different type.&lt;/p&gt;\\n","pos":[16960,17028],"source":"\\n<p>The visit method for this node returned a different type.</p>\\n"},{"pos":[17844,17873],"content":"VisitBinary(BinaryExpression)","needQuote":true,"nodes":[{"content":"VisitBinary(BinaryExpression)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[18790,18825],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[18906,19026],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[19539,19566],"content":"VisitBlock(BlockExpression)","needQuote":true,"nodes":[{"content":"VisitBlock(BlockExpression)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[20474,20509],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[20590,20710],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[21221,21248],"content":"VisitCatchBlock(CatchBlock)","needQuote":true,"nodes":[{"content":"VisitCatchBlock(CatchBlock)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[22151,22186],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[22267,22387],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[22934,22973],"content":"VisitConditional(ConditionalExpression)","needQuote":true,"nodes":[{"content":"VisitConditional(ConditionalExpression)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[23935,23970],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[24051,24171],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[24712,24745],"content":"VisitConstant(ConstantExpression)","needQuote":true,"nodes":[{"content":"VisitConstant(ConstantExpression)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[25664,25699],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[25780,25900],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[26441,26476],"content":"VisitDebugInfo(DebugInfoExpression)","needQuote":true,"nodes":[{"content":"VisitDebugInfo(DebugInfoExpression)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[27404,27439],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[27520,27640],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[28171,28202],"content":"VisitDefault(DefaultExpression)","needQuote":true,"nodes":[{"content":"VisitDefault(DefaultExpression)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[29112,29147],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[29228,29348],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[29869,29898],"content":"VisitElementInit(ElementInit)","needQuote":true,"nodes":[{"content":"VisitElementInit(ElementInit)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[30812,30847],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[30929,31049],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[31559,31585],"content":"VisitExtension(Expression)","needQuote":true,"nodes":[{"content":"VisitExtension(Expression)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[32410,32445],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[32526,32646],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[33150,33175],"content":"VisitGoto(GotoExpression)","needQuote":true,"nodes":[{"content":"VisitGoto(GotoExpression)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[34074,34109],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[34190,34310],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[34819,34846],"content":"VisitIndex(IndexExpression)","needQuote":true,"nodes":[{"content":"VisitIndex(IndexExpression)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[35754,35789],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[35870,35990],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[36531,36568],"content":"VisitInvocation(InvocationExpression)","needQuote":true,"nodes":[{"content":"VisitInvocation(InvocationExpression)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[37521,37556],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[37637,37757],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[38278,38305],"content":"VisitLabel(LabelExpression)","needQuote":true,"nodes":[{"content":"VisitLabel(LabelExpression)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[39213,39248],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[39329,39449],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[39966,39995],"content":"VisitLabelTarget(LabelTarget)","needQuote":true,"nodes":[{"content":"VisitLabelTarget(LabelTarget)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[40893,40928],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[41010,41130],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[41655,41684],"content":"VisitLambda<T>(Expression<T>)","needQuote":true,"nodes":[{"content":"VisitLambda&lt;T&gt;(Expression&lt;T&gt;)","pos":[0,29],"source":"VisitLambda<T>(Expression<T>)"}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[42602,42637],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the delegate.&lt;/p&gt;\\n","pos":[42691,42727],"source":"\\n<p>The type of the delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[42808,42928],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[43696,43729],"content":"VisitListInit(ListInitExpression)","needQuote":true,"nodes":[{"content":"VisitListInit(ListInitExpression)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[44664,44699],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[44780,44900],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[45411,45436],"content":"VisitLoop(LoopExpression)","needQuote":true,"nodes":[{"content":"VisitLoop(LoopExpression)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[46335,46370],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[46451,46571],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[47086,47115],"content":"VisitMember(MemberExpression)","needQuote":true,"nodes":[{"content":"VisitMember(MemberExpression)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[48032,48067],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[48148,48268],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[48817,48856],"content":"VisitMemberAssignment(MemberAssignment)","needQuote":true,"nodes":[{"content":"VisitMemberAssignment(MemberAssignment)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[49825,49860],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[49947,50067],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[50608,50641],"content":"VisitMemberBinding(MemberBinding)","needQuote":true,"nodes":[{"content":"VisitMemberBinding(MemberBinding)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[51577,51612],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[51696,51816],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[52363,52400],"content":"VisitMemberInit(MemberInitExpression)","needQuote":true,"nodes":[{"content":"VisitMemberInit(MemberInitExpression)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[53353,53388],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[53469,53589],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[54152,54193],"content":"VisitMemberListBinding(MemberListBinding)","needQuote":true,"nodes":[{"content":"VisitMemberListBinding(MemberListBinding)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[55173,55208],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[55296,55416],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[55995,56040],"content":"VisitMemberMemberBinding(MemberMemberBinding)","needQuote":true,"nodes":[{"content":"VisitMemberMemberBinding(MemberMemberBinding)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[57042,57077],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[57167,57287],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[57846,57883],"content":"VisitMethodCall(MethodCallExpression)","needQuote":true,"nodes":[{"content":"VisitMethodCall(MethodCallExpression)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[58836,58871],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[58952,59072],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[59581,59604],"content":"VisitNew(NewExpression)","needQuote":true,"nodes":[{"content":"VisitNew(NewExpression)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[60494,60529],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[60610,60730],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[61255,61288],"content":"VisitNewArray(NewArrayExpression)","needQuote":true,"nodes":[{"content":"VisitNewArray(NewArrayExpression)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[62223,62258],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[62339,62459],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[63000,63035],"content":"VisitParameter(ParameterExpression)","needQuote":true,"nodes":[{"content":"VisitParameter(ParameterExpression)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[63963,63998],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[64079,64199],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[64784,64833],"content":"VisitRuntimeVariables(RuntimeVariablesExpression)","needQuote":true,"nodes":[{"content":"VisitRuntimeVariables(RuntimeVariablesExpression)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[65840,65875],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[65956,66076],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[66615,66644],"content":"VisitSwitch(SwitchExpression)","needQuote":true,"nodes":[{"content":"VisitSwitch(SwitchExpression)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[67561,67596],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[67677,67797],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[68310,68337],"content":"VisitSwitchCase(SwitchCase)","needQuote":true,"nodes":[{"content":"VisitSwitchCase(SwitchCase)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[69240,69275],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[69356,69476],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[69975,69998],"content":"VisitTry(TryExpression)","needQuote":true,"nodes":[{"content":"VisitTry(TryExpression)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[70888,70923],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[71004,71124],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[71661,71698],"content":"VisitTypeBinary(TypeBinaryExpression)","needQuote":true,"nodes":[{"content":"VisitTypeBinary(TypeBinaryExpression)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[72651,72686],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[72767,72887],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[73408,73435],"content":"VisitUnary(UnaryExpression)","needQuote":true,"nodes":[{"content":"VisitUnary(UnaryExpression)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The expression to visit.&lt;/p&gt;\\n","pos":[74343,74378],"source":"\\n<p>The expression to visit.</p>\\n"},{"content":"\\n&lt;p&gt;The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.&lt;/p&gt;\\n","pos":[74459,74579],"source":"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n"},{"pos":[74806,74829],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[75011,75017],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75177,75187],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[75282,75290],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[75359,75360],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75387,75388],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75458,75466],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[75535,75536],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75563,75564],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75747,75761],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[75880,75886],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[75953,75954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76004,76010],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76070,76071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76154,76160],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[76227,76228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76278,76284],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76344,76345],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76559,76581],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[76729,76735],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[76802,76803],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76853,76859],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[76920,76921]},{"pos":[76976,76982],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77042,77043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77140,77146],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[77213,77214],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77264,77270],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[77331,77332]},{"pos":[77387,77393],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77453,77454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77699,77730],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[77896,77911],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[77987,77988],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78038,78044],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[78105,78106]},{"pos":[78161,78167],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78227,78228],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78334,78349],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[78425,78426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78476,78482],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[78543,78544]},{"pos":[78599,78605],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78665,78666],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78896,78909],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[79010,79021],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[79093,79094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79121,79122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79195,79206],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[79278,79279],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79306,79307],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79482,79491],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[79584,79591],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[79659,79660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79687,79688],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79757,79764],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[79832,79833],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79860,79861],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80036,80053],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[80162,80177],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[80253,80254],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80281,80282],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80359,80374],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[80450,80451],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80478,80479],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80624,80630],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[80903,80933],"content":"ReadOnlyCollection<Expression>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;Expression&gt;","pos":[0,30],"source":"ReadOnlyCollection<Expression>"}]},{"pos":[81267,81285],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[81381,81382],"content":"<","needQuote":true,"nodes":[]},{"pos":[81453,81463],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[81627,81645],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[81742,81745]},{"pos":[81823,81833],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[81893,81894],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82199,82220],"content":"ReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;T&gt;","pos":[0,21],"source":"ReadOnlyCollection<T>"}]},{"pos":[82479,82497],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[82572,82573],"content":"<","needQuote":true,"nodes":[]},{"pos":[82600,82601],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[82732,82750],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[82826,82829]},{"pos":[82863,82864],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[82891,82892],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83124,83154],"content":"System.Collections.ObjectModel","needQuote":true,"nodes":[{"content":"System.Collections.ObjectModel","pos":[0,30]}]},{"pos":[83395,83405],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[83707,83728],"content":"ReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;T&gt;","pos":[0,21],"source":"ReadOnlyCollection<T>"}]},{"pos":[83987,84005],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[84101,84102],"content":"<","needQuote":true,"nodes":[]},{"pos":[84129,84130],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[84261,84279],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[84376,84379]},{"pos":[84413,84414],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[84441,84442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84692,84702],"content":"Func<T, T>","needQuote":true,"nodes":[{"content":"Func&lt;T, T&gt;","pos":[0,10],"source":"Func<T, T>"}]},{"pos":[84842,84846],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[84904,84905],"content":"<","needQuote":true,"nodes":[]},{"pos":[84932,84933],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[84961,84962]},{"pos":[84994,84995],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[85088,85092],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[85151,85154]},{"pos":[85188,85189],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[85217,85218]},{"pos":[85250,85251],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[85278,85279],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85441,85457],"content":"Func<T, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T, TResult&gt;","pos":[0,16],"source":"Func<T, TResult>"}]},{"pos":[85615,85619],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[85656,85657],"content":"<","needQuote":true,"nodes":[]},{"pos":[85684,85685],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[85713,85714]},{"pos":[85746,85753],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[85852,85856],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[85894,85897]},{"pos":[85931,85932],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[85960,85961]},{"pos":[85993,86000],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[86033,86034],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86189,86190],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[86308,86314],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[86430,86431],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[86574,86590],"content":"BinaryExpression","needQuote":true,"nodes":[{"content":"BinaryExpression","pos":[0,16]}]},{"pos":[86842,86857],"content":"BlockExpression","needQuote":true,"nodes":[{"content":"BlockExpression","pos":[0,15]}]},{"pos":[87101,87111],"content":"CatchBlock","needQuote":true,"nodes":[{"content":"CatchBlock","pos":[0,10]}]},{"pos":[87351,87372],"content":"ConditionalExpression","needQuote":true,"nodes":[{"content":"ConditionalExpression","pos":[0,21]}]},{"pos":[87642,87660],"content":"ConstantExpression","needQuote":true,"nodes":[{"content":"ConstantExpression","pos":[0,18]}]},{"pos":[87922,87941],"content":"DebugInfoExpression","needQuote":true,"nodes":[{"content":"DebugInfoExpression","pos":[0,19]}]},{"pos":[88204,88221],"content":"DefaultExpression","needQuote":true,"nodes":[{"content":"DefaultExpression","pos":[0,17]}]},{"pos":[88472,88483],"content":"ElementInit","needQuote":true,"nodes":[{"content":"ElementInit","pos":[0,11]}]},{"pos":[88719,88733],"content":"GotoExpression","needQuote":true,"nodes":[{"content":"GotoExpression","pos":[0,14]}]},{"pos":[88979,88994],"content":"IndexExpression","needQuote":true,"nodes":[{"content":"IndexExpression","pos":[0,15]}]},{"pos":[89248,89268],"content":"InvocationExpression","needQuote":true,"nodes":[{"content":"InvocationExpression","pos":[0,20]}]},{"pos":[89532,89547],"content":"LabelExpression","needQuote":true,"nodes":[{"content":"LabelExpression","pos":[0,15]}]},{"pos":[89792,89803],"content":"LabelTarget","needQuote":true,"nodes":[{"content":"LabelTarget","pos":[0,11]}]},{"pos":[90071,90084],"content":"Expression<T>","needQuote":true,"nodes":[{"content":"Expression&lt;T&gt;","pos":[0,13],"source":"Expression<T>"}]},{"pos":[90290,90300],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[90360,90361],"content":"<","needQuote":true,"nodes":[]},{"pos":[90388,90389],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[90505,90515],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"content":"(Of","pos":[90576,90579]},{"pos":[90613,90614],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[90641,90642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90886,90907],"content":"Expression<TDelegate>","needQuote":true,"nodes":[{"content":"Expression&lt;TDelegate&gt;","pos":[0,21],"source":"Expression<TDelegate>"}]},{"pos":[91137,91147],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[91207,91208],"content":"<","needQuote":true,"nodes":[]},{"pos":[91235,91244],"content":"TDelegate","needQuote":true,"nodes":[{"content":"TDelegate","pos":[0,9]}]},{"pos":[91368,91378],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"content":"(Of","pos":[91439,91442]},{"pos":[91476,91485],"content":"TDelegate","needQuote":true,"nodes":[{"content":"TDelegate","pos":[0,9]}]},{"pos":[91520,91521],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91784,91802],"content":"ListInitExpression","needQuote":true,"nodes":[{"content":"ListInitExpression","pos":[0,18]}]},{"pos":[92059,92073],"content":"LoopExpression","needQuote":true,"nodes":[{"content":"LoopExpression","pos":[0,14]}]},{"pos":[92320,92336],"content":"MemberExpression","needQuote":true,"nodes":[{"content":"MemberExpression","pos":[0,16]}]},{"pos":[92589,92605],"content":"MemberAssignment","needQuote":true,"nodes":[{"content":"MemberAssignment","pos":[0,16]}]},{"pos":[92855,92868],"content":"MemberBinding","needQuote":true,"nodes":[{"content":"MemberBinding","pos":[0,13]}]},{"pos":[93116,93136],"content":"MemberInitExpression","needQuote":true,"nodes":[{"content":"MemberInitExpression","pos":[0,20]}]},{"pos":[93402,93419],"content":"MemberListBinding","needQuote":true,"nodes":[{"content":"MemberListBinding","pos":[0,17]}]},{"pos":[93678,93697],"content":"MemberMemberBinding","needQuote":true,"nodes":[{"content":"MemberMemberBinding","pos":[0,19]}]},{"pos":[93963,93983],"content":"MethodCallExpression","needQuote":true,"nodes":[{"content":"MethodCallExpression","pos":[0,20]}]},{"pos":[94245,94258],"content":"NewExpression","needQuote":true,"nodes":[{"content":"NewExpression","pos":[0,13]}]},{"pos":[94504,94522],"content":"NewArrayExpression","needQuote":true,"nodes":[{"content":"NewArrayExpression","pos":[0,18]}]},{"pos":[94784,94803],"content":"ParameterExpression","needQuote":true,"nodes":[{"content":"ParameterExpression","pos":[0,19]}]},{"pos":[95075,95101],"content":"RuntimeVariablesExpression","needQuote":true,"nodes":[{"content":"RuntimeVariablesExpression","pos":[0,26]}]},{"pos":[95384,95400],"content":"SwitchExpression","needQuote":true,"nodes":[{"content":"SwitchExpression","pos":[0,16]}]},{"pos":[95647,95657],"content":"SwitchCase","needQuote":true,"nodes":[{"content":"SwitchCase","pos":[0,10]}]},{"pos":[95889,95902],"content":"TryExpression","needQuote":true,"nodes":[{"content":"TryExpression","pos":[0,13]}]},{"pos":[96150,96170],"content":"TypeBinaryExpression","needQuote":true,"nodes":[{"content":"TypeBinaryExpression","pos":[0,20]}]},{"pos":[96434,96449],"content":"UnaryExpression","needQuote":true,"nodes":[{"content":"UnaryExpression","pos":[0,15]}]},{"pos":[96674,96699],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Linq.Expressions.ExpressionVisitor\n  commentId: T:System.Linq.Expressions.ExpressionVisitor\n  id: ExpressionVisitor\n  parent: System.Linq.Expressions\n  children:\n  - System.Linq.Expressions.ExpressionVisitor.#ctor\n  - System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})\n  - System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})\n  - System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)\n  - System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)\n  - System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)\n  - System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)\n  - System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)\n  - System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})\n  - System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)\n  - System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)\n  - System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)\n  - System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)\n  - System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)\n  - System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)\n  - System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)\n  langs:\n  - csharp\n  - vb\n  name: ExpressionVisitor\n  fullName: System.Linq.Expressions.ExpressionVisitor\n  type: Class\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExpressionVisitor\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 525\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Represents a visitor or rewriter for expression trees.</p>\\n\"\n  syntax:\n    content: public abstract class ExpressionVisitor\n    content.vb: Public MustInherit Class ExpressionVisitor\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: ExpressionVisitor\n- uid: System.Linq.Expressions.ExpressionVisitor.#ctor\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.#ctor\n  id: '#ctor'\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: ExpressionVisitor()\n  fullName: System.Linq.Expressions.ExpressionVisitor.ExpressionVisitor()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 527\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Linq.Expressions.ExpressionVisitor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected ExpressionVisitor()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ExpressionVisitor.ExpressionVisitor()\n- uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})\n  id: Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: Visit(ReadOnlyCollection<Expression>)\n  fullName: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Visit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 528\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Dispatches the list of expressions to one of the more specialized visit methods in this class.</p>\\n\"\n  syntax:\n    content: public ReadOnlyCollection<Expression> Visit(ReadOnlyCollection<Expression> nodes)\n    content.vb: Public Function Visit(nodes As ReadOnlyCollection(Of Expression)) As ReadOnlyCollection(Of Expression)\n    parameters:\n    - id: nodes\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}\n      description: \"\\n<p>The expressions to visit.</p>\\n\"\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}\n      description: \"\\n<p>The modified expression list, if any one of the elements were modified; otherwise, returns the original expression list.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression))\n  name.vb: Visit(ReadOnlyCollection(Of Expression))\n  nameWithType: ExpressionVisitor.Visit(ReadOnlyCollection<Expression>)\n  nameWithType.vb: ExpressionVisitor.Visit(ReadOnlyCollection(Of Expression))\n- uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)\n  id: Visit(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: Visit(Expression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Visit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 529\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Dispatches the expression to one of the more specialized visit methods in this class.</p>\\n\"\n  syntax:\n    content: public virtual Expression Visit(Expression node)\n    content.vb: Public Overridable Function Visit(node As Expression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ExpressionVisitor.Visit(Expression)\n- uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})\n  id: Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: Visit<T>(ReadOnlyCollection<T>, Func<T, T>)\n  fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T, T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Visit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 530\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits all nodes in the collection using a specified element visitor.</p>\\n\"\n  syntax:\n    content: public static ReadOnlyCollection<T> Visit<T>(ReadOnlyCollection<T> nodes, Func<T, T> elementVisitor)\n    content.vb: Public Shared Function Visit(Of T)(nodes As ReadOnlyCollection(Of T), elementVisitor As Func(Of T, T)) As ReadOnlyCollection(Of T)\n    parameters:\n    - id: nodes\n      type: System.Collections.ObjectModel.ReadOnlyCollection{{T}}\n      description: \"\\n<p>The nodes to visit.</p>\\n\"\n    - id: elementVisitor\n      type: System.Func{{T},{T}}\n      description: \"\\n<p>A delegate that visits a single element, optionally replacing it with a new element.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the nodes.</p>\\n\"\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{{T}}\n      description: \"\\n<p>The modified node list, if any of the elements were modified; otherwise, returns the original node list.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.Func(Of T, T))\n  name.vb: Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))\n  nameWithType: ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>)\n  nameWithType.vb: ExpressionVisitor.Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)\n  id: VisitAndConvert``1(``0,System.String)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitAndConvert<T>(T, String)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(T, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitAndConvert\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 531\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits an expression, casting the result back to the original expression type.</p>\\n\"\n  syntax:\n    content: 'public T VisitAndConvert<T>(T node, string callerName)where T : Expression'\n    content.vb: Public Function VisitAndConvert(Of T As Expression)(node As T, callerName As String) As T\n    parameters:\n    - id: node\n      type: '{T}'\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    - id: callerName\n      type: System.String\n      description: \"\\n<p>The name of the calling method; used to report to report a better error message.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the expression.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The visit method for this node returned a different type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(T, System.String)\n  name.vb: VisitAndConvert(Of T)(T, String)\n  nameWithType: ExpressionVisitor.VisitAndConvert<T>(T, String)\n  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(T, String)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)\n  id: VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitAndConvert<T>(ReadOnlyCollection<T>, String)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitAndConvert\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 532\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits an expression, casting the result back to the original expression type.</p>\\n\"\n  syntax:\n    content: 'public ReadOnlyCollection<T> VisitAndConvert<T>(ReadOnlyCollection<T> nodes, string callerName)where T : Expression'\n    content.vb: Public Function VisitAndConvert(Of T As Expression)(nodes As ReadOnlyCollection(Of T), callerName As String) As ReadOnlyCollection(Of T)\n    parameters:\n    - id: nodes\n      type: System.Collections.ObjectModel.ReadOnlyCollection{{T}}\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    - id: callerName\n      type: System.String\n      description: \"\\n<p>The name of the calling method; used to report to report a better error message.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the expression.</p>\\n\"\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{{T}}\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The visit method for this node returned a different type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.String)\n  name.vb: VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)\n  nameWithType: ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, String)\n  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)\n  id: VisitBinary(System.Linq.Expressions.BinaryExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitBinary(BinaryExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitBinary\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 533\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.BinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitBinary(BinaryExpression node)\n    content.vb: Protected Overridable Function VisitBinary(node As BinaryExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.BinaryExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitBinary(BinaryExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)\n  id: VisitBlock(System.Linq.Expressions.BlockExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitBlock(BlockExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitBlock\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 534\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.BlockExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitBlock(BlockExpression node)\n    content.vb: Protected Overridable Function VisitBlock(node As BlockExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.BlockExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitBlock(BlockExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)\n  id: VisitCatchBlock(System.Linq.Expressions.CatchBlock)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitCatchBlock(CatchBlock)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitCatchBlock\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 535\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.CatchBlock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual CatchBlock VisitCatchBlock(CatchBlock node)\n    content.vb: Protected Overridable Function VisitCatchBlock(node As CatchBlock) As CatchBlock\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.CatchBlock\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.CatchBlock\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitCatchBlock(CatchBlock)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)\n  id: VisitConditional(System.Linq.Expressions.ConditionalExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitConditional(ConditionalExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitConditional\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 536\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.ConditionalExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitConditional(ConditionalExpression node)\n    content.vb: Protected Overridable Function VisitConditional(node As ConditionalExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.ConditionalExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitConditional(ConditionalExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)\n  id: VisitConstant(System.Linq.Expressions.ConstantExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitConstant(ConstantExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitConstant\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 537\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the <xref href=\\\"System.Linq.Expressions.ConstantExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitConstant(ConstantExpression node)\n    content.vb: Protected Overridable Function VisitConstant(node As ConstantExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.ConstantExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitConstant(ConstantExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)\n  id: VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitDebugInfo(DebugInfoExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitDebugInfo\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 538\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the <xref href=\\\"System.Linq.Expressions.DebugInfoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitDebugInfo(DebugInfoExpression node)\n    content.vb: Protected Overridable Function VisitDebugInfo(node As DebugInfoExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.DebugInfoExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitDebugInfo(DebugInfoExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)\n  id: VisitDefault(System.Linq.Expressions.DefaultExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitDefault(DefaultExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitDefault\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 539\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the <xref href=\\\"System.Linq.Expressions.DefaultExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitDefault(DefaultExpression node)\n    content.vb: Protected Overridable Function VisitDefault(node As DefaultExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.DefaultExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitDefault(DefaultExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)\n  id: VisitElementInit(System.Linq.Expressions.ElementInit)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitElementInit(ElementInit)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitElementInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 540\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.ElementInit\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual ElementInit VisitElementInit(ElementInit node)\n    content.vb: Protected Overridable Function VisitElementInit(node As ElementInit) As ElementInit\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.ElementInit\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.ElementInit\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitElementInit(ElementInit)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)\n  id: VisitExtension(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitExtension(Expression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitExtension\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 541\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the extension expression.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitExtension(Expression node)\n    content.vb: Protected Overridable Function VisitExtension(node As Expression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitExtension(Expression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)\n  id: VisitGoto(System.Linq.Expressions.GotoExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitGoto(GotoExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitGoto\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 542\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.GotoExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitGoto(GotoExpression node)\n    content.vb: Protected Overridable Function VisitGoto(node As GotoExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.GotoExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitGoto(GotoExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)\n  id: VisitIndex(System.Linq.Expressions.IndexExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitIndex(IndexExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitIndex\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 543\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.IndexExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitIndex(IndexExpression node)\n    content.vb: Protected Overridable Function VisitIndex(node As IndexExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.IndexExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitIndex(IndexExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)\n  id: VisitInvocation(System.Linq.Expressions.InvocationExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitInvocation(InvocationExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitInvocation\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 544\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.InvocationExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitInvocation(InvocationExpression node)\n    content.vb: Protected Overridable Function VisitInvocation(node As InvocationExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.InvocationExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitInvocation(InvocationExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)\n  id: VisitLabel(System.Linq.Expressions.LabelExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitLabel(LabelExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitLabel\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 545\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.LabelExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitLabel(LabelExpression node)\n    content.vb: Protected Overridable Function VisitLabel(node As LabelExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.LabelExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitLabel(LabelExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)\n  id: VisitLabelTarget(System.Linq.Expressions.LabelTarget)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitLabelTarget(LabelTarget)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitLabelTarget\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 546\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the <xref href=\\\"System.Linq.Expressions.LabelTarget\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual LabelTarget VisitLabelTarget(LabelTarget node)\n    content.vb: Protected Overridable Function VisitLabelTarget(node As LabelTarget) As LabelTarget\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.LabelTarget\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitLabelTarget(LabelTarget)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})\n  id: VisitLambda``1(System.Linq.Expressions.Expression{``0})\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitLambda<T>(Expression<T>)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitLambda\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 547\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.Expression`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitLambda<T>(Expression<T> node)\n    content.vb: Protected Overridable Function VisitLambda(Of T)(node As Expression(Of T)) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.Expression{{T}}\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the delegate.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))\n  name.vb: VisitLambda(Of T)(Expression(Of T))\n  nameWithType: ExpressionVisitor.VisitLambda<T>(Expression<T>)\n  nameWithType.vb: ExpressionVisitor.VisitLambda(Of T)(Expression(Of T))\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)\n  id: VisitListInit(System.Linq.Expressions.ListInitExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitListInit(ListInitExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitListInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 548\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.ListInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitListInit(ListInitExpression node)\n    content.vb: Protected Overridable Function VisitListInit(node As ListInitExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.ListInitExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitListInit(ListInitExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)\n  id: VisitLoop(System.Linq.Expressions.LoopExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitLoop(LoopExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitLoop\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 549\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.LoopExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitLoop(LoopExpression node)\n    content.vb: Protected Overridable Function VisitLoop(node As LoopExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.LoopExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitLoop(LoopExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)\n  id: VisitMember(System.Linq.Expressions.MemberExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitMember(MemberExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitMember\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 550\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.MemberExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitMember(MemberExpression node)\n    content.vb: Protected Overridable Function VisitMember(node As MemberExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.MemberExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitMember(MemberExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)\n  id: VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitMemberAssignment(MemberAssignment)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitMemberAssignment\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 551\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.MemberAssignment\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment node)\n    content.vb: Protected Overridable Function VisitMemberAssignment(node As MemberAssignment) As MemberAssignment\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.MemberAssignment\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberAssignment\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitMemberAssignment(MemberAssignment)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)\n  id: VisitMemberBinding(System.Linq.Expressions.MemberBinding)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitMemberBinding(MemberBinding)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitMemberBinding\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 552\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.MemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual MemberBinding VisitMemberBinding(MemberBinding node)\n    content.vb: Protected Overridable Function VisitMemberBinding(node As MemberBinding) As MemberBinding\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.MemberBinding\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberBinding\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitMemberBinding(MemberBinding)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)\n  id: VisitMemberInit(System.Linq.Expressions.MemberInitExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitMemberInit(MemberInitExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitMemberInit\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 553\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.MemberInitExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitMemberInit(MemberInitExpression node)\n    content.vb: Protected Overridable Function VisitMemberInit(node As MemberInitExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.MemberInitExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitMemberInit(MemberInitExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)\n  id: VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitMemberListBinding(MemberListBinding)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitMemberListBinding\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 554\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.MemberListBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding node)\n    content.vb: Protected Overridable Function VisitMemberListBinding(node As MemberListBinding) As MemberListBinding\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.MemberListBinding\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberListBinding\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitMemberListBinding(MemberListBinding)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)\n  id: VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitMemberMemberBinding(MemberMemberBinding)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitMemberMemberBinding\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 555\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.MemberMemberBinding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node)\n    content.vb: Protected Overridable Function VisitMemberMemberBinding(node As MemberMemberBinding) As MemberMemberBinding\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberMemberBinding\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\n  id: VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitMethodCall(MethodCallExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitMethodCall\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 556\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.MethodCallExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitMethodCall(MethodCallExpression node)\n    content.vb: Protected Overridable Function VisitMethodCall(node As MethodCallExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.MethodCallExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitMethodCall(MethodCallExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)\n  id: VisitNew(System.Linq.Expressions.NewExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitNew(NewExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitNew\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 557\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.NewExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitNew(NewExpression node)\n    content.vb: Protected Overridable Function VisitNew(node As NewExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.NewExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitNew(NewExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)\n  id: VisitNewArray(System.Linq.Expressions.NewArrayExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitNewArray(NewArrayExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitNewArray\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 558\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.NewArrayExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitNewArray(NewArrayExpression node)\n    content.vb: Protected Overridable Function VisitNewArray(node As NewArrayExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.NewArrayExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitNewArray(NewArrayExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)\n  id: VisitParameter(System.Linq.Expressions.ParameterExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitParameter(ParameterExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitParameter\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 559\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the <xref href=\\\"System.Linq.Expressions.ParameterExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitParameter(ParameterExpression node)\n    content.vb: Protected Overridable Function VisitParameter(node As ParameterExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.ParameterExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitParameter(ParameterExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)\n  id: VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitRuntimeVariables(RuntimeVariablesExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitRuntimeVariables\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 560\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.RuntimeVariablesExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitRuntimeVariables(RuntimeVariablesExpression node)\n    content.vb: Protected Overridable Function VisitRuntimeVariables(node As RuntimeVariablesExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.RuntimeVariablesExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)\n  id: VisitSwitch(System.Linq.Expressions.SwitchExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitSwitch(SwitchExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitSwitch\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 561\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.SwitchExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitSwitch(SwitchExpression node)\n    content.vb: Protected Overridable Function VisitSwitch(node As SwitchExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.SwitchExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitSwitch(SwitchExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)\n  id: VisitSwitchCase(System.Linq.Expressions.SwitchCase)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitSwitchCase(SwitchCase)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitSwitchCase\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 562\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.SwitchCase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual SwitchCase VisitSwitchCase(SwitchCase node)\n    content.vb: Protected Overridable Function VisitSwitchCase(node As SwitchCase) As SwitchCase\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.SwitchCase\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.SwitchCase\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitSwitchCase(SwitchCase)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)\n  id: VisitTry(System.Linq.Expressions.TryExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitTry(TryExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitTry\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 563\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.TryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitTry(TryExpression node)\n    content.vb: Protected Overridable Function VisitTry(node As TryExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.TryExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitTry(TryExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)\n  id: VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitTypeBinary(TypeBinaryExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitTypeBinary\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 564\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.TypeBinaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitTypeBinary(TypeBinaryExpression node)\n    content.vb: Protected Overridable Function VisitTypeBinary(node As TypeBinaryExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.TypeBinaryExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression)\n- uid: System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)\n  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)\n  id: VisitUnary(System.Linq.Expressions.UnaryExpression)\n  parent: System.Linq.Expressions.ExpressionVisitor\n  langs:\n  - csharp\n  - vb\n  name: VisitUnary(UnaryExpression)\n  fullName: System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisitUnary\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 565\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Visits the children of the <xref href=\\\"System.Linq.Expressions.UnaryExpression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual Expression VisitUnary(UnaryExpression node)\n    content.vb: Protected Overridable Function VisitUnary(node As UnaryExpression) As Expression\n    parameters:\n    - id: node\n      type: System.Linq.Expressions.UnaryExpression\n      description: \"\\n<p>The expression to visit.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ExpressionVisitor.VisitUnary(UnaryExpression)\nreferences:\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}\n  parent: System.Collections.ObjectModel\n  definition: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<Expression>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression)\n  name.vb: ReadOnlyCollection(Of Expression)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}\n  nameWithType: ReadOnlyCollection<Expression>\n  nameWithType.vb: ReadOnlyCollection(Of Expression)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  isExternal: false\n  name: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)\n  name.vb: ReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1\n  nameWithType: ReadOnlyCollection<T>\n  nameWithType.vb: ReadOnlyCollection(Of T)\n- uid: System.Collections.ObjectModel\n  isExternal: false\n  name: System.Collections.ObjectModel\n  fullName: System.Collections.ObjectModel\n  commentId: N:System.Collections.ObjectModel\n  nameWithType: System.Collections.ObjectModel\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  fullName: System.Linq.Expressions.Expression\n  commentId: T:System.Linq.Expressions.Expression\n  nameWithType: Expression\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{{T}}\n  parent: System.Collections.ObjectModel\n  definition: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)\n  name.vb: ReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{``0}\n  nameWithType: ReadOnlyCollection<T>\n  nameWithType.vb: ReadOnlyCollection(Of T)\n- uid: System.Func{{T},{T}}\n  parent: System\n  definition: System.Func`2\n  name: Func<T, T>\n  fullName: System.Func<T, T>\n  fullname.vb: System.Func(Of T, T)\n  name.vb: Func(Of T, T)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``0}\n  nameWithType: Func<T, T>\n  nameWithType.vb: Func(Of T, T)\n- uid: System.Func`2\n  isExternal: false\n  name: Func<T, TResult>\n  fullName: System.Func<T, TResult>\n  fullname.vb: System.Func(Of T, TResult)\n  name.vb: Func(Of T, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func`2\n  nameWithType: Func<T, TResult>\n  nameWithType.vb: Func(Of T, TResult)\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  commentId: '!:T'\n  nameWithType: T\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Linq.Expressions.BinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BinaryExpression\n  fullName: System.Linq.Expressions.BinaryExpression\n  commentId: T:System.Linq.Expressions.BinaryExpression\n  nameWithType: BinaryExpression\n- uid: System.Linq.Expressions.BlockExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: BlockExpression\n  fullName: System.Linq.Expressions.BlockExpression\n  commentId: T:System.Linq.Expressions.BlockExpression\n  nameWithType: BlockExpression\n- uid: System.Linq.Expressions.CatchBlock\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: CatchBlock\n  fullName: System.Linq.Expressions.CatchBlock\n  commentId: T:System.Linq.Expressions.CatchBlock\n  nameWithType: CatchBlock\n- uid: System.Linq.Expressions.ConditionalExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ConditionalExpression\n  fullName: System.Linq.Expressions.ConditionalExpression\n  commentId: T:System.Linq.Expressions.ConditionalExpression\n  nameWithType: ConditionalExpression\n- uid: System.Linq.Expressions.ConstantExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ConstantExpression\n  fullName: System.Linq.Expressions.ConstantExpression\n  commentId: T:System.Linq.Expressions.ConstantExpression\n  nameWithType: ConstantExpression\n- uid: System.Linq.Expressions.DebugInfoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DebugInfoExpression\n  fullName: System.Linq.Expressions.DebugInfoExpression\n  commentId: T:System.Linq.Expressions.DebugInfoExpression\n  nameWithType: DebugInfoExpression\n- uid: System.Linq.Expressions.DefaultExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: DefaultExpression\n  fullName: System.Linq.Expressions.DefaultExpression\n  commentId: T:System.Linq.Expressions.DefaultExpression\n  nameWithType: DefaultExpression\n- uid: System.Linq.Expressions.ElementInit\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ElementInit\n  fullName: System.Linq.Expressions.ElementInit\n  commentId: T:System.Linq.Expressions.ElementInit\n  nameWithType: ElementInit\n- uid: System.Linq.Expressions.GotoExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: GotoExpression\n  fullName: System.Linq.Expressions.GotoExpression\n  commentId: T:System.Linq.Expressions.GotoExpression\n  nameWithType: GotoExpression\n- uid: System.Linq.Expressions.IndexExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: IndexExpression\n  fullName: System.Linq.Expressions.IndexExpression\n  commentId: T:System.Linq.Expressions.IndexExpression\n  nameWithType: IndexExpression\n- uid: System.Linq.Expressions.InvocationExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: InvocationExpression\n  fullName: System.Linq.Expressions.InvocationExpression\n  commentId: T:System.Linq.Expressions.InvocationExpression\n  nameWithType: InvocationExpression\n- uid: System.Linq.Expressions.LabelExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelExpression\n  fullName: System.Linq.Expressions.LabelExpression\n  commentId: T:System.Linq.Expressions.LabelExpression\n  nameWithType: LabelExpression\n- uid: System.Linq.Expressions.LabelTarget\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LabelTarget\n  fullName: System.Linq.Expressions.LabelTarget\n  commentId: T:System.Linq.Expressions.LabelTarget\n  nameWithType: LabelTarget\n- uid: System.Linq.Expressions.Expression{{T}}\n  parent: System.Linq.Expressions\n  definition: System.Linq.Expressions.Expression`1\n  name: Expression<T>\n  fullName: System.Linq.Expressions.Expression<T>\n  fullname.vb: System.Linq.Expressions.Expression(Of T)\n  name.vb: Expression(Of T)\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.Expressions.Expression{``0}\n  nameWithType: Expression<T>\n  nameWithType.vb: Expression(Of T)\n- uid: System.Linq.Expressions.Expression`1\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression<TDelegate>\n  fullName: System.Linq.Expressions.Expression<TDelegate>\n  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)\n  name.vb: Expression(Of TDelegate)\n  spec.csharp:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: <\n    fullName: <\n  - name: TDelegate\n    fullName: TDelegate\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.Expressions.Expression`1\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TDelegate\n    fullName: TDelegate\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.Expressions.Expression`1\n  nameWithType: Expression<TDelegate>\n  nameWithType.vb: Expression(Of TDelegate)\n- uid: System.Linq.Expressions.ListInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ListInitExpression\n  fullName: System.Linq.Expressions.ListInitExpression\n  commentId: T:System.Linq.Expressions.ListInitExpression\n  nameWithType: ListInitExpression\n- uid: System.Linq.Expressions.LoopExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: LoopExpression\n  fullName: System.Linq.Expressions.LoopExpression\n  commentId: T:System.Linq.Expressions.LoopExpression\n  nameWithType: LoopExpression\n- uid: System.Linq.Expressions.MemberExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberExpression\n  fullName: System.Linq.Expressions.MemberExpression\n  commentId: T:System.Linq.Expressions.MemberExpression\n  nameWithType: MemberExpression\n- uid: System.Linq.Expressions.MemberAssignment\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberAssignment\n  fullName: System.Linq.Expressions.MemberAssignment\n  commentId: T:System.Linq.Expressions.MemberAssignment\n  nameWithType: MemberAssignment\n- uid: System.Linq.Expressions.MemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberBinding\n  fullName: System.Linq.Expressions.MemberBinding\n  commentId: T:System.Linq.Expressions.MemberBinding\n  nameWithType: MemberBinding\n- uid: System.Linq.Expressions.MemberInitExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberInitExpression\n  fullName: System.Linq.Expressions.MemberInitExpression\n  commentId: T:System.Linq.Expressions.MemberInitExpression\n  nameWithType: MemberInitExpression\n- uid: System.Linq.Expressions.MemberListBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberListBinding\n  fullName: System.Linq.Expressions.MemberListBinding\n  commentId: T:System.Linq.Expressions.MemberListBinding\n  nameWithType: MemberListBinding\n- uid: System.Linq.Expressions.MemberMemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberMemberBinding\n  fullName: System.Linq.Expressions.MemberMemberBinding\n  commentId: T:System.Linq.Expressions.MemberMemberBinding\n  nameWithType: MemberMemberBinding\n- uid: System.Linq.Expressions.MethodCallExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MethodCallExpression\n  fullName: System.Linq.Expressions.MethodCallExpression\n  commentId: T:System.Linq.Expressions.MethodCallExpression\n  nameWithType: MethodCallExpression\n- uid: System.Linq.Expressions.NewExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewExpression\n  fullName: System.Linq.Expressions.NewExpression\n  commentId: T:System.Linq.Expressions.NewExpression\n  nameWithType: NewExpression\n- uid: System.Linq.Expressions.NewArrayExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: NewArrayExpression\n  fullName: System.Linq.Expressions.NewArrayExpression\n  commentId: T:System.Linq.Expressions.NewArrayExpression\n  nameWithType: NewArrayExpression\n- uid: System.Linq.Expressions.ParameterExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: ParameterExpression\n  fullName: System.Linq.Expressions.ParameterExpression\n  commentId: T:System.Linq.Expressions.ParameterExpression\n  nameWithType: ParameterExpression\n- uid: System.Linq.Expressions.RuntimeVariablesExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: RuntimeVariablesExpression\n  fullName: System.Linq.Expressions.RuntimeVariablesExpression\n  commentId: T:System.Linq.Expressions.RuntimeVariablesExpression\n  nameWithType: RuntimeVariablesExpression\n- uid: System.Linq.Expressions.SwitchExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchExpression\n  fullName: System.Linq.Expressions.SwitchExpression\n  commentId: T:System.Linq.Expressions.SwitchExpression\n  nameWithType: SwitchExpression\n- uid: System.Linq.Expressions.SwitchCase\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: SwitchCase\n  fullName: System.Linq.Expressions.SwitchCase\n  commentId: T:System.Linq.Expressions.SwitchCase\n  nameWithType: SwitchCase\n- uid: System.Linq.Expressions.TryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TryExpression\n  fullName: System.Linq.Expressions.TryExpression\n  commentId: T:System.Linq.Expressions.TryExpression\n  nameWithType: TryExpression\n- uid: System.Linq.Expressions.TypeBinaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: TypeBinaryExpression\n  fullName: System.Linq.Expressions.TypeBinaryExpression\n  commentId: T:System.Linq.Expressions.TypeBinaryExpression\n  nameWithType: TypeBinaryExpression\n- uid: System.Linq.Expressions.UnaryExpression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: UnaryExpression\n  fullName: System.Linq.Expressions.UnaryExpression\n  commentId: T:System.Linq.Expressions.UnaryExpression\n  nameWithType: UnaryExpression\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}