{"nodes":[{"pos":[868,896],"content":"CustomAttributeTypedArgument","needQuote":true,"nodes":[{"content":"CustomAttributeTypedArgument","pos":[0,28]}]},{"pos":[2874,2886],"content":"ArgumentType","needQuote":true,"nodes":[{"content":"ArgumentType","pos":[0,12]}]},{"pos":[4383,4388],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[6185,6253],"content":"Equality(CustomAttributeTypedArgument, CustomAttributeTypedArgument)","needQuote":true,"nodes":[{"content":"Equality(CustomAttributeTypedArgument, CustomAttributeTypedArgument)","pos":[0,68]}]},{"pos":[8747,8817],"content":"Inequality(CustomAttributeTypedArgument, CustomAttributeTypedArgument)","needQuote":true,"nodes":[{"content":"Inequality(CustomAttributeTypedArgument, CustomAttributeTypedArgument)","pos":[0,70]}]},{"pos":[11064,11078],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;Another object to compare to.","pos":[11803,11837],"source":"\\n<p>Another object to compare to."},{"content":"&lt;/p&gt;\\n","pos":[11838,11844],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; and this instance are the same type and represent the same value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11905,12056],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> and this instance are the same type and represent the same value; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12622,12635],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is the hash code for this instance.&lt;/p&gt;\\n","pos":[13297,13372],"source":"\\n<p>A 32-bit signed integer that is the hash code for this instance.</p>\\n"},{"pos":[13898,13908],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A string consisting of the argument name, the equal sign, and a string representation of the argument value.&lt;/p&gt;\\n","pos":[14637,14756],"source":"\\n<p>A string consisting of the argument name, the equal sign, and a string representation of the argument value.</p>\\n"},{"pos":[15004,15021],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[15227,15249],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[15397,15403],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15470,15471],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15521,15527],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15588,15589]},{"pos":[15644,15650],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15710,15711],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15808,15814],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15881,15882],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15932,15938],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15999,16000]},{"pos":[16055,16061],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16121,16122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16367,16398],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[16564,16579],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16655,16656],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16706,16712],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16773,16774]},{"pos":[16829,16835],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16895,16896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17002,17017],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17093,17094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17144,17150],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17211,17212]},{"pos":[17267,17273],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17333,17334],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17560,17569],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17662,17669],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17737,17738],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17765,17766],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17835,17842],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17910,17911],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17938,17939],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18092,18098],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18219,18225],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[18354,18358],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[18541,18569],"content":"CustomAttributeTypedArgument","needQuote":true,"nodes":[{"content":"CustomAttributeTypedArgument","pos":[0,28]}]},{"pos":[18803,18810],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18992,19006],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19131,19137],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19186,19187],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19237,19243],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19303,19304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19390,19396],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19445,19446],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19496,19502],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19562,19563],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19744,19753],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[19932,19945],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[20052,20063],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20117,20118],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20145,20146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20222,20233],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20287,20288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20315,20316],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20482,20487],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20651,20661],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[20762,20770],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20821,20822],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20849,20850],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20923,20931],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[20982,20983],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21010,21011],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21172,21178],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Reflection.CustomAttributeTypedArgument\n  commentId: T:System.Reflection.CustomAttributeTypedArgument\n  id: CustomAttributeTypedArgument\n  parent: System.Reflection\n  children:\n  - System.Reflection.CustomAttributeTypedArgument.ArgumentType\n  - System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)\n  - System.Reflection.CustomAttributeTypedArgument.GetHashCode\n  - System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)\n  - System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)\n  - System.Reflection.CustomAttributeTypedArgument.ToString\n  - System.Reflection.CustomAttributeTypedArgument.Value\n  langs:\n  - csharp\n  - vb\n  name: CustomAttributeTypedArgument\n  fullName: System.Reflection.CustomAttributeTypedArgument\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CustomAttributeTypedArgument\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 674\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Represents an argument of a custom attribute in the reflection-only context, or an element of an array argument.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public struct CustomAttributeTypedArgument\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Structure CustomAttributeTypedArgument\n  seealso:\n  - type: System.Reflection.CustomAttributeData\n    commentId: T:System.Reflection.CustomAttributeData\n  - type: System.Reflection.CustomAttributeNamedArgument\n    commentId: T:System.Reflection.CustomAttributeNamedArgument\n  - type: System.Reflection.Assembly.ReflectionOnlyLoad\n    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: CustomAttributeTypedArgument\n- uid: System.Reflection.CustomAttributeTypedArgument.ArgumentType\n  commentId: P:System.Reflection.CustomAttributeTypedArgument.ArgumentType\n  id: ArgumentType\n  parent: System.Reflection.CustomAttributeTypedArgument\n  langs:\n  - csharp\n  - vb\n  name: ArgumentType\n  fullName: System.Reflection.CustomAttributeTypedArgument.ArgumentType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ArgumentType\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 958\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the type of the argument or of the array argument element.</p>\\n\"\n  syntax:\n    content: public Type ArgumentType { get; }\n    content.vb: Public ReadOnly Property ArgumentType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the type of the argument or of the array element.</p>\\n\"\n  seealso:\n  - type: System.Reflection.CustomAttributeTypedArgument.Value\n    commentId: P:System.Reflection.CustomAttributeTypedArgument.Value\n  - type: System.Reflection.Assembly.ReflectionOnlyLoad\n    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CustomAttributeTypedArgument.ArgumentType\n- uid: System.Reflection.CustomAttributeTypedArgument.Value\n  commentId: P:System.Reflection.CustomAttributeTypedArgument.Value\n  id: Value\n  parent: System.Reflection.CustomAttributeTypedArgument\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Reflection.CustomAttributeTypedArgument.Value\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Value\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 965\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the value of the argument for a simple argument or for an element of an array argument; gets a collection of values for an array argument.</p>\\n\"\n  syntax:\n    content: public object Value { get; }\n    content.vb: Public ReadOnly Property Value As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that represents the value of the argument or element, or a generic <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Reflection.CustomAttributeTypedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that represent the values of an array-type argument.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CustomAttributeTypedArgument.Value\n- uid: System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)\n  commentId: M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)\n  id: op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)\n  parent: System.Reflection.CustomAttributeTypedArgument\n  langs:\n  - csharp\n  - vb\n  name: Equality(CustomAttributeTypedArgument, CustomAttributeTypedArgument)\n  fullName: System.Reflection.CustomAttributeTypedArgument.Equality(System.Reflection.CustomAttributeTypedArgument, System.Reflection.CustomAttributeTypedArgument)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 679\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Tests whether two <xref href=\\\"System.Reflection.CustomAttributeTypedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are equivalent.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right)\n    content.vb: Public Shared Operator =(left As CustomAttributeTypedArgument, right As CustomAttributeTypedArgument) As Boolean\n    parameters:\n    - id: left\n      type: System.Reflection.CustomAttributeTypedArgument\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.CustomAttributeTypedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the left of the equality operator.</p>\\n\"\n    - id: right\n      type: System.Reflection.CustomAttributeTypedArgument\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.CustomAttributeTypedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the right of the equality operator.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two <xref href=\\\"System.Reflection.CustomAttributeTypedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeTypedArgument.Equality(CustomAttributeTypedArgument, CustomAttributeTypedArgument)\n- uid: System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)\n  commentId: M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)\n  id: op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)\n  parent: System.Reflection.CustomAttributeTypedArgument\n  langs:\n  - csharp\n  - vb\n  name: Inequality(CustomAttributeTypedArgument, CustomAttributeTypedArgument)\n  fullName: System.Reflection.CustomAttributeTypedArgument.Inequality(System.Reflection.CustomAttributeTypedArgument, System.Reflection.CustomAttributeTypedArgument)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 683\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Tests whether two <xref href=\\\"System.Reflection.CustomAttributeTypedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are different.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right)\n    content.vb: Public Shared Operator <>(left As CustomAttributeTypedArgument, right As CustomAttributeTypedArgument) As Boolean\n    parameters:\n    - id: left\n      type: System.Reflection.CustomAttributeTypedArgument\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.CustomAttributeTypedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the left of the inequality operator.</p>\\n\"\n    - id: right\n      type: System.Reflection.CustomAttributeTypedArgument\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.CustomAttributeTypedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the right of the inequality operator.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two <xref href=\\\"System.Reflection.CustomAttributeTypedArgument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are different; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CustomAttributeTypedArgument.Inequality(CustomAttributeTypedArgument, CustomAttributeTypedArgument)\n- uid: System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)\n  commentId: M:System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.CustomAttributeTypedArgument\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 951\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Indicates whether this instance and a specified object are equal.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>Another object to compare to. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> and this instance are the same type and represent the same value; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  seealso:\n  - type: System.ValueType.Equals(System.Object)\n    commentId: M:System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CustomAttributeTypedArgument.Equals(Object)\n- uid: System.Reflection.CustomAttributeTypedArgument.GetHashCode\n  commentId: M:System.Reflection.CustomAttributeTypedArgument.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.CustomAttributeTypedArgument\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Reflection.CustomAttributeTypedArgument.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 947\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is the hash code for this instance.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  seealso:\n  - type: System.ValueType.GetHashCode\n    commentId: M:System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CustomAttributeTypedArgument.GetHashCode()\n- uid: System.Reflection.CustomAttributeTypedArgument.ToString\n  commentId: M:System.Reflection.CustomAttributeTypedArgument.ToString\n  id: ToString\n  parent: System.Reflection.CustomAttributeTypedArgument\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Reflection.CustomAttributeTypedArgument.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs\n    startLine: 908\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a string consisting of the argument name, the equal sign, and a string representation of the argument value.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string consisting of the argument name, the equal sign, and a string representation of the argument value.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CustomAttributeTypedArgument.ToString()\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Reflection.CustomAttributeTypedArgument\n  parent: System.Reflection\n  isExternal: false\n  name: CustomAttributeTypedArgument\n  fullName: System.Reflection.CustomAttributeTypedArgument\n  nameWithType: CustomAttributeTypedArgument\n  commentId: T:System.Reflection.CustomAttributeTypedArgument\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}