{"nodes":[{"pos":[547,574],"content":"ReflectionTypeLoadException","needQuote":true,"nodes":[{"content":"ReflectionTypeLoadException","pos":[0,27]}]},{"pos":[3041,3089],"content":"ReflectionTypeLoadException(Type[], Exception[])","needQuote":true,"nodes":[{"content":"ReflectionTypeLoadException(Type[], Exception[])","pos":[0,48]}]},{"content":"\\n&lt;p&gt;An array of type &lt;strong&gt;Type&lt;/strong&gt; containing the classes that were defined in the module and loaded.","pos":[4058,4168],"source":"\\n<p>An array of type <strong>Type</strong> containing the classes that were defined in the module and loaded."},{"content":"This array can contain null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic) values.","pos":[4169,4257],"source":" This array can contain null reference (<strong>Nothing</strong> in Visual Basic) values."},{"content":"&lt;/p&gt;\\n","pos":[4258,4264],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of type &lt;strong&gt;Exception&lt;/strong&gt; containing the exceptions that were thrown by the class loader.","pos":[4338,4450],"source":"\\n<p>An array of type <strong>Exception</strong> containing the exceptions that were thrown by the class loader."},{"content":"The null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic) values in the &lt;em&gt;classes&lt;/em&gt; array line up with the exceptions in this &lt;em&gt;exceptions&lt;/em&gt; array.","pos":[4451,4612],"source":" The null reference (<strong>Nothing</strong> in Visual Basic) values in the <em>classes</em> array line up with the exceptions in this <em>exceptions</em> array."},{"content":"&lt;/p&gt;\\n","pos":[4613,4619],"source":" </p>\\n"},{"pos":[5427,5483],"content":"ReflectionTypeLoadException(Type[], Exception[], String)","needQuote":true,"nodes":[{"content":"ReflectionTypeLoadException(Type[], Exception[], String)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;An array of type &lt;strong&gt;Type&lt;/strong&gt; containing the classes that were defined in the module and loaded.","pos":[6527,6637],"source":"\\n<p>An array of type <strong>Type</strong> containing the classes that were defined in the module and loaded."},{"content":"This array can contain null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic) values.","pos":[6638,6726],"source":" This array can contain null reference (<strong>Nothing</strong> in Visual Basic) values."},{"content":"&lt;/p&gt;\\n","pos":[6727,6733],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of type &lt;strong&gt;Exception&lt;/strong&gt; containing the exceptions that were thrown by the class loader.","pos":[6807,6919],"source":"\\n<p>An array of type <strong>Exception</strong> containing the exceptions that were thrown by the class loader."},{"content":"The null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic) values in the &lt;em&gt;classes&lt;/em&gt; array line up with the exceptions in this &lt;em&gt;exceptions&lt;/em&gt; array.","pos":[6920,7081],"source":" The null reference (<strong>Nothing</strong> in Visual Basic) values in the <em>classes</em> array line up with the exceptions in this <em>exceptions</em> array."},{"content":"&lt;/p&gt;\\n","pos":[7082,7088],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;String&lt;/strong&gt; describing the reason the exception was thrown.","pos":[7154,7232],"source":"\\n<p>A <strong>String</strong> describing the reason the exception was thrown."},{"content":"&lt;/p&gt;\\n","pos":[7233,7239],"source":" </p>\\n"},{"pos":[7973,7989],"content":"LoaderExceptions","needQuote":true,"nodes":[{"content":"LoaderExceptions","pos":[0,16]}]},{"pos":[9423,9428],"content":"Types","needQuote":true,"nodes":[{"content":"Types","pos":[0,5]}]},{"content":"\\n&lt;p&gt;An array of type &lt;strong&gt;Type&lt;/strong&gt; containing the classes that were defined in the module and loaded.","pos":[10136,10246],"source":"\\n<p>An array of type <strong>Type</strong> containing the classes that were defined in the module and loaded."},{"content":"This array can contain some &lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[10247,10310],"source":" This array can contain some <strong>null</strong> values.</p>\\n"},{"pos":[10506,10523],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[10687,10693],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10841,10850],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[11055,11068],"content":"ISerializable","needQuote":true,"nodes":[{"content":"ISerializable","pos":[0,13]}]},{"pos":[11329,11339],"content":"_Exception","needQuote":true,"nodes":[{"content":"_Exception","pos":[0,10]}]},{"pos":[11574,11592],"content":"GetBaseException()","needQuote":true,"nodes":[{"content":"GetBaseException()","pos":[0,18]}]},{"pos":[11709,11725],"content":"GetBaseException","needQuote":true,"nodes":[{"content":"GetBaseException","pos":[0,16]}]},{"pos":[11784,11785],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11812,11813],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11894,11910],"content":"GetBaseException","needQuote":true,"nodes":[{"content":"GetBaseException","pos":[0,16]}]},{"pos":[11969,11970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11997,11998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12197,12207],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12308,12316],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12367,12368],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12395,12396],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12469,12477],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12528,12529],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12556,12557],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12838,12888],"content":"GetObjectData(SerializationInfo, StreamingContext)","needQuote":true,"nodes":[{"content":"GetObjectData(SerializationInfo, StreamingContext)","pos":[0,50]}]},{"pos":[13186,13199],"content":"GetObjectData","needQuote":true,"nodes":[{"content":"GetObjectData","pos":[0,13]}]},{"pos":[13276,13277],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13360,13377],"content":"SerializationInfo","needQuote":true,"nodes":[{"content":"SerializationInfo","pos":[0,17]}]},{"content":",","pos":[13471,13472]},{"pos":[13559,13575],"content":"StreamingContext","needQuote":true,"nodes":[{"content":"StreamingContext","pos":[0,16]}]},{"pos":[13667,13668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13840,13853],"content":"GetObjectData","needQuote":true,"nodes":[{"content":"GetObjectData","pos":[0,13]}]},{"pos":[13930,13931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14014,14031],"content":"SerializationInfo","needQuote":true,"nodes":[{"content":"SerializationInfo","pos":[0,17]}]},{"content":",","pos":[14125,14126]},{"pos":[14213,14229],"content":"StreamingContext","needQuote":true,"nodes":[{"content":"StreamingContext","pos":[0,16]}]},{"pos":[14321,14322],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14642,14651],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[14750,14757],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14828,14829],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14856,14857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14929,14936],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15007,15008],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15035,15036],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15216,15223],"content":"Message","needQuote":true,"nodes":[{"content":"Message","pos":[0,7]}]},{"pos":[15419,15423],"content":"Data","needQuote":true,"nodes":[{"content":"Data","pos":[0,4]}]},{"pos":[15620,15634],"content":"InnerException","needQuote":true,"nodes":[{"content":"InnerException","pos":[0,14]}]},{"pos":[15856,15866],"content":"TargetSite","needQuote":true,"nodes":[{"content":"TargetSite","pos":[0,10]}]},{"pos":[16077,16087],"content":"StackTrace","needQuote":true,"nodes":[{"content":"StackTrace","pos":[0,10]}]},{"pos":[16296,16304],"content":"HelpLink","needQuote":true,"nodes":[{"content":"HelpLink","pos":[0,8]}]},{"pos":[16505,16511],"content":"Source","needQuote":true,"nodes":[{"content":"Source","pos":[0,6]}]},{"pos":[16707,16714],"content":"HResult","needQuote":true,"nodes":[{"content":"HResult","pos":[0,7]}]},{"pos":[16925,16945],"content":"SerializeObjectState","needQuote":true,"nodes":[{"content":"SerializeObjectState","pos":[0,20]}]},{"pos":[17190,17204],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[17323,17329],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17396,17397],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17447,17453],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17513,17514],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17597,17603],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17670,17671],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17721,17727],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17787,17788],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18002,18024],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[18172,18178],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18245,18246],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18296,18302],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18363,18364]},{"pos":[18419,18425],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18485,18486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18583,18589],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18656,18657],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18707,18713],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18774,18775]},{"pos":[18830,18836],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18896,18897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19142,19173],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[19339,19354],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19430,19431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19481,19487],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19548,19549]},{"pos":[19604,19610],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19670,19671],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19777,19792],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19868,19869],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19919,19925],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19986,19987]},{"pos":[20042,20048],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20108,20109],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20339,20352],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[20453,20464],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20536,20537],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20564,20565],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20638,20649],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20721,20722],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20749,20750],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20933,20950],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[21059,21074],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21150,21151],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21178,21179],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21256,21271],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21347,21348],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21375,21376],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21521,21527],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21656,21684],"content":"System.Runtime.Serialization","needQuote":true,"nodes":[{"content":"System.Runtime.Serialization","pos":[0,28]}]},{"pos":[21881,21911],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[22077,22083],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[22203,22207],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[22245,22247]},{"pos":[22310,22314],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[22351,22353],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[22454,22465],"content":"Exception[]","needQuote":true,"nodes":[{"content":"Exception[]","pos":[0,11]}]},{"pos":[22605,22614],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"content":"[]","pos":[22678,22680]},{"pos":[22748,22757],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[22820,22822],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[22965,22971],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Reflection.ReflectionTypeLoadException\n  commentId: T:System.Reflection.ReflectionTypeLoadException\n  id: ReflectionTypeLoadException\n  parent: System.Reflection\n  children:\n  - System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])\n  - System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)\n  - System.Reflection.ReflectionTypeLoadException.LoaderExceptions\n  - System.Reflection.ReflectionTypeLoadException.Types\n  langs:\n  - csharp\n  - vb\n  name: ReflectionTypeLoadException\n  fullName: System.Reflection.ReflectionTypeLoadException\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReflectionTypeLoadException\n    path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs\n    startLine: 23\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>The exception that is thrown by the <xref href=\\\"System.Reflection.Module.GetTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method if any of the classes in a module cannot be loaded. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public sealed class ReflectionTypeLoadException : SystemException, _Exception, ISerializable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class ReflectionTypeLoadException\n          Inherits SystemException\n          Implements _Exception, ISerializable\n  inheritance:\n  - System.Object\n  - System.Exception\n  implements:\n  - System.Runtime.Serialization.ISerializable\n  - System.Runtime.InteropServices._Exception\n  inheritedMembers:\n  - System.Exception.GetBaseException\n  - System.Exception.ToString\n  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Exception.GetType\n  - System.Exception.Message\n  - System.Exception.Data\n  - System.Exception.InnerException\n  - System.Exception.TargetSite\n  - System.Exception.StackTrace\n  - System.Exception.HelpLink\n  - System.Exception.Source\n  - System.Exception.HResult\n  - System.Exception.SerializeObjectState\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: ReflectionTypeLoadException\n- uid: System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])\n  commentId: M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])\n  id: '#ctor(System.Type[],System.Exception[])'\n  parent: System.Reflection.ReflectionTypeLoadException\n  langs:\n  - csharp\n  - vb\n  name: ReflectionTypeLoadException(Type[], Exception[])\n  fullName: System.Reflection.ReflectionTypeLoadException.ReflectionTypeLoadException(System.Type[], System.Exception[])\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs\n    startLine: 40\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Reflection.ReflectionTypeLoadException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the given classes and their associated exceptions.</p>\\n\"\n  syntax:\n    content: public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions)\n    content.vb: Public Sub New(classes As Type(), exceptions As Exception())\n    parameters:\n    - id: classes\n      type: System.Type[]\n      description: \"\\n<p>An array of type <strong>Type</strong> containing the classes that were defined in the module and loaded. This array can contain null reference (<strong>Nothing</strong> in Visual Basic) values. </p>\\n\"\n    - id: exceptions\n      type: System.Exception[]\n      description: \"\\n<p>An array of type <strong>Exception</strong> containing the exceptions that were thrown by the class loader. The null reference (<strong>Nothing</strong> in Visual Basic) values in the <em>classes</em> array line up with the exceptions in this <em>exceptions</em> array. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.ReflectionTypeLoadException.ReflectionTypeLoadException(System.Type(), System.Exception())\n  name.vb: ReflectionTypeLoadException(Type(), Exception())\n  nameWithType: ReflectionTypeLoadException.ReflectionTypeLoadException(Type[], Exception[])\n  nameWithType.vb: ReflectionTypeLoadException.ReflectionTypeLoadException(Type(), Exception())\n- uid: System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)\n  commentId: M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)\n  id: '#ctor(System.Type[],System.Exception[],System.String)'\n  parent: System.Reflection.ReflectionTypeLoadException\n  langs:\n  - csharp\n  - vb\n  name: ReflectionTypeLoadException(Type[], Exception[], String)\n  fullName: System.Reflection.ReflectionTypeLoadException.ReflectionTypeLoadException(System.Type[], System.Exception[], System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs\n    startLine: 47\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Reflection.ReflectionTypeLoadException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the given classes, their associated exceptions, and exception descriptions.</p>\\n\"\n  syntax:\n    content: public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions, string message)\n    content.vb: Public Sub New(classes As Type(), exceptions As Exception(), message As String)\n    parameters:\n    - id: classes\n      type: System.Type[]\n      description: \"\\n<p>An array of type <strong>Type</strong> containing the classes that were defined in the module and loaded. This array can contain null reference (<strong>Nothing</strong> in Visual Basic) values. </p>\\n\"\n    - id: exceptions\n      type: System.Exception[]\n      description: \"\\n<p>An array of type <strong>Exception</strong> containing the exceptions that were thrown by the class loader. The null reference (<strong>Nothing</strong> in Visual Basic) values in the <em>classes</em> array line up with the exceptions in this <em>exceptions</em> array. </p>\\n\"\n    - id: message\n      type: System.String\n      description: \"\\n<p>A <strong>String</strong> describing the reason the exception was thrown. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.ReflectionTypeLoadException.ReflectionTypeLoadException(System.Type(), System.Exception(), System.String)\n  name.vb: ReflectionTypeLoadException(Type(), Exception(), String)\n  nameWithType: ReflectionTypeLoadException.ReflectionTypeLoadException(Type[], Exception[], String)\n  nameWithType.vb: ReflectionTypeLoadException.ReflectionTypeLoadException(Type(), Exception(), String)\n- uid: System.Reflection.ReflectionTypeLoadException.LoaderExceptions\n  commentId: P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions\n  id: LoaderExceptions\n  parent: System.Reflection.ReflectionTypeLoadException\n  langs:\n  - csharp\n  - vb\n  name: LoaderExceptions\n  fullName: System.Reflection.ReflectionTypeLoadException.LoaderExceptions\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LoaderExceptions\n    path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs\n    startLine: 63\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the array of exceptions thrown by the class loader.</p>\\n\"\n  syntax:\n    content: public Exception[] LoaderExceptions { get; }\n    content.vb: Public ReadOnly Property LoaderExceptions As Exception()\n    parameters: []\n    return:\n      type: System.Exception[]\n      description: \"\\n<p>An array of type <strong>Exception</strong> containing the exceptions thrown by the class loader. The null values in the <xref href=\\\"System.Reflection.ReflectionTypeLoadException.Types\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array of this instance line up with the exceptions in this array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ReflectionTypeLoadException.LoaderExceptions\n- uid: System.Reflection.ReflectionTypeLoadException.Types\n  commentId: P:System.Reflection.ReflectionTypeLoadException.Types\n  id: Types\n  parent: System.Reflection.ReflectionTypeLoadException\n  langs:\n  - csharp\n  - vb\n  name: Types\n  fullName: System.Reflection.ReflectionTypeLoadException.Types\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Types\n    path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs\n    startLine: 59\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the array of classes that were defined in the module and loaded.</p>\\n\"\n  syntax:\n    content: public Type[] Types { get; }\n    content.vb: Public ReadOnly Property Types As Type()\n    parameters: []\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array of type <strong>Type</strong> containing the classes that were defined in the module and loaded. This array can contain some <strong>null</strong> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ReflectionTypeLoadException.Types\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  fullName: System.Exception\n  nameWithType: Exception\n  commentId: T:System.Exception\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n  nameWithType: ISerializable\n  commentId: T:System.Runtime.Serialization.ISerializable\n- uid: System.Runtime.InteropServices._Exception\n  parent: System.Runtime.InteropServices\n  isExternal: true\n  name: _Exception\n  fullName: System.Runtime.InteropServices._Exception\n  nameWithType: _Exception\n  commentId: T:System.Runtime.InteropServices._Exception\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  fullName: System.Exception.GetBaseException()\n  spec.csharp:\n  - uid: System.Exception.GetBaseException\n    name: GetBaseException\n    fullName: System.Exception.GetBaseException\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Exception.GetBaseException\n    name: GetBaseException\n    fullName: System.Exception.GetBaseException\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Exception.GetBaseException()\n  commentId: M:System.Exception.GetBaseException\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  fullName: System.Exception.ToString()\n  spec.csharp:\n  - uid: System.Exception.ToString\n    name: ToString\n    fullName: System.Exception.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Exception.ToString\n    name: ToString\n    fullName: System.Exception.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Exception.ToString()\n  commentId: M:System.Exception.ToString\n- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Exception\n  isExternal: true\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  fullName: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)\n  spec.csharp:\n  - uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n    name: GetObjectData\n    fullName: System.Exception.GetObjectData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Runtime.Serialization.SerializationInfo\n    name: SerializationInfo\n    fullName: System.Runtime.Serialization.SerializationInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Runtime.Serialization.StreamingContext\n    name: StreamingContext\n    fullName: System.Runtime.Serialization.StreamingContext\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n    name: GetObjectData\n    fullName: System.Exception.GetObjectData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Runtime.Serialization.SerializationInfo\n    name: SerializationInfo\n    fullName: System.Runtime.Serialization.SerializationInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Runtime.Serialization.StreamingContext\n    name: StreamingContext\n    fullName: System.Runtime.Serialization.StreamingContext\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)\n  commentId: M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: true\n  name: GetType()\n  fullName: System.Exception.GetType()\n  spec.csharp:\n  - uid: System.Exception.GetType\n    name: GetType\n    fullName: System.Exception.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Exception.GetType\n    name: GetType\n    fullName: System.Exception.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Exception.GetType()\n  commentId: M:System.Exception.GetType\n- uid: System.Exception.Message\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  fullName: System.Exception.Message\n  nameWithType: Exception.Message\n  commentId: P:System.Exception.Message\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  fullName: System.Exception.Data\n  nameWithType: Exception.Data\n  commentId: P:System.Exception.Data\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  fullName: System.Exception.InnerException\n  nameWithType: Exception.InnerException\n  commentId: P:System.Exception.InnerException\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: true\n  name: TargetSite\n  fullName: System.Exception.TargetSite\n  nameWithType: Exception.TargetSite\n  commentId: P:System.Exception.TargetSite\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  fullName: System.Exception.StackTrace\n  nameWithType: Exception.StackTrace\n  commentId: P:System.Exception.StackTrace\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  fullName: System.Exception.HelpLink\n  nameWithType: Exception.HelpLink\n  commentId: P:System.Exception.HelpLink\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  fullName: System.Exception.Source\n  nameWithType: Exception.Source\n  commentId: P:System.Exception.Source\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  fullName: System.Exception.HResult\n  nameWithType: Exception.HResult\n  commentId: P:System.Exception.HResult\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: true\n  name: SerializeObjectState\n  fullName: System.Exception.SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  commentId: E:System.Exception.SerializeObjectState\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Runtime.Serialization\n  isExternal: false\n  name: System.Runtime.Serialization\n  fullName: System.Runtime.Serialization\n  nameWithType: System.Runtime.Serialization\n  commentId: N:System.Runtime.Serialization\n- uid: System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Exception[]\n  name: Exception[]\n  fullName: System.Exception[]\n  fullname.vb: System.Exception()\n  name.vb: Exception()\n  spec.csharp:\n  - uid: System.Exception\n    name: Exception\n    fullName: System.Exception\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Exception\n    name: Exception\n    fullName: System.Exception\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Exception[]\n  nameWithType.vb: Exception()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}