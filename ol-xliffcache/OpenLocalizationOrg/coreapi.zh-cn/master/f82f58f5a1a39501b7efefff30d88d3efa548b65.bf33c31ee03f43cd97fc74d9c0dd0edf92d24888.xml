{"nodes":[{"pos":[931,940],"content":"NTAccount","needQuote":true,"nodes":[{"content":"NTAccount","pos":[0,9]}]},{"pos":[2295,2312],"content":"NTAccount(String)","needQuote":true,"nodes":[{"content":"NTAccount(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3495,3547],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is an empty string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is too long.&lt;/p&gt;\\n","pos":[3644,3740],"source":"\\n<p>\\n<em>name</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is too long.</p>\\n"},{"pos":[4132,4157],"content":"NTAccount(String, String)","needQuote":true,"nodes":[{"content":"NTAccount(String, String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The name of the domain.","pos":[5113,5141],"source":"\\n<p>The name of the domain."},{"content":"This parameter can be &lt;strong&gt;null&lt;/strong&gt; or an empty string.","pos":[5142,5205],"source":" This parameter can be <strong>null</strong> or an empty string."},{"content":"Domain names that are null values are treated like an empty string.&lt;/p&gt;\\n","pos":[5206,5279],"source":" Domain names that are null values are treated like an empty string.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the account.","pos":[5349,5378],"source":"\\n<p>The name of the account."},{"content":"This parameter cannot be &lt;strong&gt;null&lt;/strong&gt; or an empty string.&lt;/p&gt;\\n","pos":[5379,5451],"source":" This parameter cannot be <strong>null</strong> or an empty string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;accountName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5570,5629],"source":"\\n<p>\\n<em>accountName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;accountName&lt;/em&gt; is an empty string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;accountName&lt;/em&gt; is too long.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;domainName&lt;/em&gt; is too long.&lt;/p&gt;\\n","pos":[5726,5892],"source":"\\n<p>\\n<em>accountName</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>accountName</em> is too long.</p>\\n<p>-or-</p>\\n<p>\\n<em>domainName</em> is too long.</p>\\n"},{"pos":[6203,6208],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[7668,7682],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9480,9493],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11128,11151],"content":"IsValidTargetType(Type)","needQuote":true,"nodes":[{"content":"IsValidTargetType(Type)","pos":[0,23]}]},{"pos":[13510,13540],"content":"Equality(NTAccount, NTAccount)","needQuote":true,"nodes":[{"content":"Equality(NTAccount, NTAccount)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The left operand to use for the equality comparison.","pos":[14805,14862],"source":"\\n<p>The left operand to use for the equality comparison."},{"content":"This parameter can be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14863,14913],"source":" This parameter can be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The right operand to use for the equality comparison.","pos":[14999,15057],"source":"\\n<p>The right operand to use for the equality comparison."},{"content":"This parameter can be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15058,15108],"source":" This parameter can be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are equal; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15169,15284],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise <strong>false</strong>.</p>\\n"},{"pos":[15865,15897],"content":"Inequality(NTAccount, NTAccount)","needQuote":true,"nodes":[{"content":"Inequality(NTAccount, NTAccount)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The left operand to use for the inequality comparison.","pos":[17207,17266],"source":"\\n<p>The left operand to use for the inequality comparison."},{"content":"This parameter can be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17267,17317],"source":" This parameter can be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The right operand to use for the inequality comparison.","pos":[17403,17463],"source":"\\n<p>The right operand to use for the inequality comparison."},{"content":"This parameter can be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17464,17514],"source":" This parameter can be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17575,17694],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise <strong>false</strong>.</p>\\n"},{"pos":[18043,18053],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[19414,19429],"content":"Translate(Type)","needQuote":true,"nodes":[{"content":"Translate(Type)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The converted identity.&lt;/p&gt;\\n","pos":[20914,20948],"source":"\\n<p>The converted identity.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;targetType &lt;/em&gt;is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21148,21206],"source":"\\n<p>\\n<em>targetType </em>is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Some or all identity references could not be translated.&lt;/p&gt;\\n","pos":[21609,21676],"source":"\\n<p>Some or all identity references could not be translated.</p>\\n"},{"content":"\\n&lt;p&gt;The source account name is too long.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;A Win32 error code was returned.&lt;/p&gt;\\n","pos":[21769,21870],"source":"\\n<p>The source account name is too long.</p>\\n<p>-or-</p>\\n<p>A Win32 error code was returned.</p>\\n"},{"pos":[22200,22225],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[22413,22419],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22613,22630],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[22888,22910],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[23058,23064],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23131,23132],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23182,23188],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23249,23250]},{"pos":[23305,23311],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23371,23372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23469,23475],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23542,23543],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23593,23599],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23660,23661]},{"pos":[23716,23722],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23782,23783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24028,24059],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[24225,24240],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24316,24317],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24367,24373],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24434,24435]},{"pos":[24490,24496],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24556,24557],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24663,24678],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24754,24755],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24805,24811],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24872,24873]},{"pos":[24928,24934],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24994,24995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25221,25230],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[25323,25330],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25398,25399],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25426,25427],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25496,25503],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25571,25572],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25599,25600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25775,25792],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[25901,25916],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[25992,25993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26020,26021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26098,26113],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26189,26190],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26217,26218],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26363,26369],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[26500,26506],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[26724,26729],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[27051,27065],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[27244,27250],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27326,27327],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27377,27383],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27443,27444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27557,27563],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27639,27640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27690,27696],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27756,27757],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27971,27978],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28205,28218],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[28379,28390],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28471,28472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28499,28500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28603,28614],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28695,28696],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28723,28724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28925,28930],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29169,29192],"content":"IsValidTargetType(Type)","needQuote":true,"nodes":[{"content":"IsValidTargetType(Type)","pos":[0,23]}]},{"pos":[29389,29406],"content":"IsValidTargetType","needQuote":true,"nodes":[{"content":"IsValidTargetType","pos":[0,17]}]},{"pos":[29493,29494],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29542,29546],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[29604,29605],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29727,29744],"content":"IsValidTargetType","needQuote":true,"nodes":[{"content":"IsValidTargetType","pos":[0,17]}]},{"pos":[29831,29832],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29880,29884],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[29942,29943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30172,30176],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[30356,30365],"content":"NTAccount","needQuote":true,"nodes":[{"content":"NTAccount","pos":[0,9]}]},{"pos":[30633,30643],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[30798,30806],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30884,30885],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30912,30913],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31013,31021],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[31099,31100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31127,31128],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31413,31428],"content":"Translate(Type)","needQuote":true,"nodes":[{"content":"Translate(Type)","pos":[0,15]}]},{"pos":[31609,31618],"content":"Translate","needQuote":true,"nodes":[{"content":"Translate","pos":[0,9]}]},{"pos":[31697,31698],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31746,31750],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[31808,31809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31923,31932],"content":"Translate","needQuote":true,"nodes":[{"content":"Translate","pos":[0,9]}]},{"pos":[32011,32012],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32060,32064],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[32122,32123],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32336,32357],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[32558,32575],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[32775,32801],"content":"IdentityNotMappedException","needQuote":true,"nodes":[{"content":"IdentityNotMappedException","pos":[0,26]}]},{"pos":[33052,33067],"content":"SystemException","needQuote":true,"nodes":[{"content":"SystemException","pos":[0,15]}]}],"content":"items:\n- uid: System.Security.Principal.NTAccount\n  commentId: T:System.Security.Principal.NTAccount\n  id: NTAccount\n  parent: System.Security.Principal\n  children:\n  - System.Security.Principal.NTAccount.#ctor(System.String)\n  - System.Security.Principal.NTAccount.#ctor(System.String,System.String)\n  - System.Security.Principal.NTAccount.Equals(System.Object)\n  - System.Security.Principal.NTAccount.GetHashCode\n  - System.Security.Principal.NTAccount.IsValidTargetType(System.Type)\n  - System.Security.Principal.NTAccount.op_Equality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)\n  - System.Security.Principal.NTAccount.op_Inequality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)\n  - System.Security.Principal.NTAccount.ToString\n  - System.Security.Principal.NTAccount.Translate(System.Type)\n  - System.Security.Principal.NTAccount.Value\n  langs:\n  - csharp\n  - vb\n  name: NTAccount\n  fullName: System.Security.Principal.NTAccount\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NTAccount\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 58\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Represents a user or group account.</p>\\n\"\n  syntax:\n    content: 'public sealed class NTAccount : IdentityReference'\n    content.vb: >-\n      Public NotInheritable Class NTAccount\n          Inherits IdentityReference\n  inheritance:\n  - System.Object\n  - System.Security.Principal.IdentityReference\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: NTAccount\n- uid: System.Security.Principal.NTAccount.#ctor(System.String)\n  commentId: M:System.Security.Principal.NTAccount.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Principal.NTAccount\n  langs:\n  - csharp\n  - vb\n  name: NTAccount(String)\n  fullName: System.Security.Principal.NTAccount.NTAccount(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 60\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified name.</p>\\n\"\n  syntax:\n    content: public NTAccount(string name)\n    content.vb: Public Sub New(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name used to create the <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This parameter cannot be <strong>null</strong> or an empty string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is too long.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NTAccount.NTAccount(String)\n- uid: System.Security.Principal.NTAccount.#ctor(System.String,System.String)\n  commentId: M:System.Security.Principal.NTAccount.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Security.Principal.NTAccount\n  langs:\n  - csharp\n  - vb\n  name: NTAccount(String, String)\n  fullName: System.Security.Principal.NTAccount.NTAccount(System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 61\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified domain name and account name. </p>\\n\"\n  syntax:\n    content: public NTAccount(string domainName, string accountName)\n    content.vb: Public Sub New(domainName As String, accountName As String)\n    parameters:\n    - id: domainName\n      type: System.String\n      description: \"\\n<p>The name of the domain. This parameter can be <strong>null</strong> or an empty string. Domain names that are null values are treated like an empty string.</p>\\n\"\n    - id: accountName\n      type: System.String\n      description: \"\\n<p>The name of the account. This parameter cannot be <strong>null</strong> or an empty string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>accountName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>accountName</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>accountName</em> is too long.</p>\\n<p>-or-</p>\\n<p>\\n<em>domainName</em> is too long.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NTAccount.NTAccount(String, String)\n- uid: System.Security.Principal.NTAccount.Value\n  commentId: P:System.Security.Principal.NTAccount.Value\n  id: Value\n  parent: System.Security.Principal.NTAccount\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Security.Principal.NTAccount.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 62\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns an uppercase string representation of this <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string Value { get; }\n    content.vb: Public Overrides ReadOnly Property Value As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The uppercase string representation of this <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.Principal.IdentityReference.Value\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: NTAccount.Value\n- uid: System.Security.Principal.NTAccount.Equals(System.Object)\n  commentId: M:System.Security.Principal.NTAccount.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Principal.NTAccount\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Security.Principal.NTAccount.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 63\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a value that indicates whether this <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object o)\n    content.vb: Public Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>An object to compare with this <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, or <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>o</em> is an object with the same underlying type and value as this <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Security.Principal.IdentityReference.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NTAccount.Equals(Object)\n- uid: System.Security.Principal.NTAccount.GetHashCode\n  commentId: M:System.Security.Principal.NTAccount.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Principal.NTAccount\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.Principal.NTAccount.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 64\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Serves as a hash function for the current <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The <xref href=\\\"System.Security.Principal.NTAccount.GetHashCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method is suitable for hashing algorithms and data structures like a hash table.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash value for the current <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.Principal.IdentityReference.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NTAccount.GetHashCode()\n- uid: System.Security.Principal.NTAccount.IsValidTargetType(System.Type)\n  commentId: M:System.Security.Principal.NTAccount.IsValidTargetType(System.Type)\n  id: IsValidTargetType(System.Type)\n  parent: System.Security.Principal.NTAccount\n  langs:\n  - csharp\n  - vb\n  name: IsValidTargetType(Type)\n  fullName: System.Security.Principal.NTAccount.IsValidTargetType(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsValidTargetType\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 65\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a value that indicates whether the specified type is a valid translation type for the <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public override bool IsValidTargetType(Type targetType)\n    content.vb: Public Overrides Function IsValidTargetType(targetType As Type) As Boolean\n    parameters:\n    - id: targetType\n      type: System.Type\n      description: \"\\n<p>The type being queried for validity to serve as a conversion from <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The following target types are valid:</p>\\n<p>- <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>targetType</em> is a valid translation type for the <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NTAccount.IsValidTargetType(Type)\n- uid: System.Security.Principal.NTAccount.op_Equality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)\n  commentId: M:System.Security.Principal.NTAccount.op_Equality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)\n  id: op_Equality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)\n  parent: System.Security.Principal.NTAccount\n  langs:\n  - csharp\n  - vb\n  name: Equality(NTAccount, NTAccount)\n  fullName: System.Security.Principal.NTAccount.Equality(System.Security.Principal.NTAccount, System.Security.Principal.NTAccount)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 66\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to determine whether they are equal. They are considered equal if they have the same canonical name representation as the one returned by the <xref href=\\\"System.Security.Principal.NTAccount.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property or if they are both <strong>null</strong>. </p>\\n\"\n  syntax:\n    content: public static bool operator ==(NTAccount left, NTAccount right)\n    content.vb: Public Shared Operator =(left As NTAccount, right As NTAccount) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Principal.NTAccount\n      description: \"\\n<p>The left operand to use for the equality comparison. This parameter can be <strong>null</strong>.</p>\\n\"\n    - id: right\n      type: System.Security.Principal.NTAccount\n      description: \"\\n<p>The right operand to use for the equality comparison. This parameter can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: NTAccount.Equality(NTAccount, NTAccount)\n- uid: System.Security.Principal.NTAccount.op_Inequality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)\n  commentId: M:System.Security.Principal.NTAccount.op_Inequality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)\n  id: op_Inequality(System.Security.Principal.NTAccount,System.Security.Principal.NTAccount)\n  parent: System.Security.Principal.NTAccount\n  langs:\n  - csharp\n  - vb\n  name: Inequality(NTAccount, NTAccount)\n  fullName: System.Security.Principal.NTAccount.Inequality(System.Security.Principal.NTAccount, System.Security.Principal.NTAccount)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 67\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the <xref href=\\\"System.Security.Principal.NTAccount.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property or if one of the objects is <strong>null</strong> and the other is not.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(NTAccount left, NTAccount right)\n    content.vb: Public Shared Operator <>(left As NTAccount, right As NTAccount) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Principal.NTAccount\n      description: \"\\n<p>The left operand to use for the inequality comparison. This parameter can be <strong>null</strong>.</p>\\n\"\n    - id: right\n      type: System.Security.Principal.NTAccount\n      description: \"\\n<p>The right operand to use for the inequality comparison. This parameter can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: NTAccount.Inequality(NTAccount, NTAccount)\n- uid: System.Security.Principal.NTAccount.ToString\n  commentId: M:System.Security.Principal.NTAccount.ToString\n  id: ToString\n  parent: System.Security.Principal.NTAccount\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Security.Principal.NTAccount.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 68\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns the account name, in Domain\\\\Account format, for the account represented by the <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The account name, in Domain\\\\Account format.</p>\\n\"\n  overridden: System.Security.Principal.IdentityReference.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NTAccount.ToString()\n- uid: System.Security.Principal.NTAccount.Translate(System.Type)\n  commentId: M:System.Security.Principal.NTAccount.Translate(System.Type)\n  id: Translate(System.Type)\n  parent: System.Security.Principal.NTAccount\n  langs:\n  - csharp\n  - vb\n  name: Translate(Type)\n  fullName: System.Security.Principal.NTAccount.Translate(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Translate\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 69\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Translates the account name represented by the <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object into another <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>-derived type.</p>\\n\"\n  syntax:\n    content: public override IdentityReference Translate(Type targetType)\n    content.vb: Public Overrides Function Translate(targetType As Type) As IdentityReference\n    parameters:\n    - id: targetType\n      type: System.Type\n      description: \"\\n<p>The target type for the conversion from <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The target type must be a type that is considered valid by the <xref href=\\\"System.Security.Principal.NTAccount.IsValidTargetType(System.Type)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n    return:\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The converted identity.</p>\\n\"\n  overridden: System.Security.Principal.IdentityReference.Translate(System.Type)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>targetType </em>is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>targetType </em>is not an <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  type.</p>\\n\"\n  - type: System.Security.Principal.IdentityNotMappedException\n    commentId: T:System.Security.Principal.IdentityNotMappedException\n    description: \"\\n<p>Some or all identity references could not be translated.</p>\\n\"\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: \"\\n<p>The source account name is too long.</p>\\n<p>-or-</p>\\n<p>A Win32 error code was returned.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NTAccount.Translate(Type)\nreferences:\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n  commentId: T:System.Security.Principal.IdentityReference\n  nameWithType: IdentityReference\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Principal.IdentityReference.Value\n  parent: System.Security.Principal.IdentityReference\n  isExternal: false\n  name: Value\n  fullName: System.Security.Principal.IdentityReference.Value\n  commentId: P:System.Security.Principal.IdentityReference.Value\n  nameWithType: IdentityReference.Value\n- uid: System.Security.Principal.IdentityReference.Equals(System.Object)\n  parent: System.Security.Principal.IdentityReference\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Security.Principal.IdentityReference.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Security.Principal.IdentityReference.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.Principal.IdentityReference.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Principal.IdentityReference.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.Principal.IdentityReference.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Principal.IdentityReference.Equals(System.Object)\n  nameWithType: IdentityReference.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Principal.IdentityReference.GetHashCode\n  parent: System.Security.Principal.IdentityReference\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Security.Principal.IdentityReference.GetHashCode()\n  spec.csharp:\n  - uid: System.Security.Principal.IdentityReference.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.Principal.IdentityReference.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Principal.IdentityReference.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.Principal.IdentityReference.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Principal.IdentityReference.GetHashCode\n  nameWithType: IdentityReference.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n  parent: System.Security.Principal.IdentityReference\n  isExternal: true\n  name: IsValidTargetType(Type)\n  fullName: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n  spec.csharp:\n  - uid: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n    name: IsValidTargetType\n    fullName: System.Security.Principal.IdentityReference.IsValidTargetType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n    name: IsValidTargetType\n    fullName: System.Security.Principal.IdentityReference.IsValidTargetType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n  nameWithType: IdentityReference.IsValidTargetType(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  commentId: T:System.Type\n  nameWithType: Type\n- uid: System.Security.Principal.NTAccount\n  parent: System.Security.Principal\n  isExternal: false\n  name: NTAccount\n  fullName: System.Security.Principal.NTAccount\n  commentId: T:System.Security.Principal.NTAccount\n  nameWithType: NTAccount\n- uid: System.Security.Principal.IdentityReference.ToString\n  parent: System.Security.Principal.IdentityReference\n  isExternal: false\n  name: ToString()\n  fullName: System.Security.Principal.IdentityReference.ToString()\n  spec.csharp:\n  - uid: System.Security.Principal.IdentityReference.ToString\n    name: ToString\n    fullName: System.Security.Principal.IdentityReference.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Principal.IdentityReference.ToString\n    name: ToString\n    fullName: System.Security.Principal.IdentityReference.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Principal.IdentityReference.ToString\n  nameWithType: IdentityReference.ToString()\n- uid: System.Security.Principal.IdentityReference.Translate(System.Type)\n  parent: System.Security.Principal.IdentityReference\n  isExternal: true\n  name: Translate(Type)\n  fullName: System.Security.Principal.IdentityReference.Translate(System.Type)\n  spec.csharp:\n  - uid: System.Security.Principal.IdentityReference.Translate(System.Type)\n    name: Translate\n    fullName: System.Security.Principal.IdentityReference.Translate\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Principal.IdentityReference.Translate(System.Type)\n    name: Translate\n    fullName: System.Security.Principal.IdentityReference.Translate\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Principal.IdentityReference.Translate(System.Type)\n  nameWithType: IdentityReference.Translate(Type)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Security.Principal.IdentityNotMappedException\n  isExternal: false\n  name: IdentityNotMappedException\n  fullName: System.Security.Principal.IdentityNotMappedException\n  nameWithType: IdentityNotMappedException\n  commentId: T:System.Security.Principal.IdentityNotMappedException\n- uid: System.SystemException\n  parent: System\n  isExternal: true\n  name: SystemException\n  fullName: System.SystemException\n  commentId: T:System.SystemException\n  nameWithType: SystemException\n"}