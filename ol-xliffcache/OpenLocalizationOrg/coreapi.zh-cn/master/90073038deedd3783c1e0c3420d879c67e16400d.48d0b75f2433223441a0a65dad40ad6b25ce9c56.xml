{"nodes":[{"pos":[2176,2197],"content":"DbParameterCollection","needQuote":true,"nodes":[{"content":"DbParameterCollection","pos":[0,21]}]},{"pos":[4235,4258],"content":"DbParameterCollection()","needQuote":true,"nodes":[{"content":"DbParameterCollection()","pos":[0,23]}]},{"pos":[5310,5315],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The number of items in the collection.&lt;/p&gt;\\n","pos":[6027,6076],"source":"\\n<p>The number of items in the collection.</p>\\n"},{"pos":[6539,6550],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index of the parameter.&lt;/p&gt;\\n","pos":[7374,7423],"source":"\\n<p>The zero-based index of the parameter.</p>\\n"},{"content":"\\n&lt;p&gt;The specified index does not exist.","pos":[7754,7794],"source":"\\n<p>The specified index does not exist."},{"content":"&lt;/p&gt;\\n","pos":[7795,7801],"source":" </p>\\n"},{"pos":[8334,8346],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The name of the parameter.&lt;/p&gt;\\n","pos":[9199,9236],"source":"\\n<p>The name of the parameter.</p>\\n"},{"content":"\\n&lt;p&gt;The specified index does not exist.","pos":[9568,9608],"source":"\\n<p>The specified index does not exist."},{"content":"&lt;/p&gt;\\n","pos":[9609,9615],"source":" </p>\\n"},{"pos":[10119,10127],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[11731,11748],"content":"IList.Item[Int32]","needQuote":true,"nodes":[{"content":"IList.Item[Int32]","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to get or set.&lt;/p&gt;\\n","pos":[12586,12647],"source":"\\n<p>The zero-based index of the element to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[12707,12753],"source":"\\n<p>The element at the specified index.</p>\\n"},{"pos":[13516,13553],"content":"IDataParameterCollection.Item[String]","needQuote":true,"nodes":[{"content":"IDataParameterCollection.Item[String]","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The name of the parameter to retrieve.&lt;/p&gt;\\n","pos":[14495,14544],"source":"\\n<p>The name of the parameter to retrieve.</p>\\n"},{"pos":[15422,15433],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"pos":[17247,17262],"content":"AddRange(Array)","needQuote":true,"nodes":[{"content":"AddRange(Array)","pos":[0,15]}]},{"pos":[18619,18626],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[19855,19871],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[21803,21819],"content":"Contains(String)","needQuote":true,"nodes":[{"content":"Contains(String)","pos":[0,16]}]},{"pos":[23604,23624],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The array of items to copy to the collection.&lt;/p&gt;\\n","pos":[24420,24476],"source":"\\n<p>The array of items to copy to the collection.</p>\\n"},{"content":"\\n&lt;p&gt;The index in the collection to copy the items.&lt;/p&gt;\\n","pos":[24539,24596],"source":"\\n<p>The index in the collection to copy the items.</p>\\n"},{"pos":[25066,25081],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[26624,26643],"content":"GetParameter(Int32)","needQuote":true,"nodes":[{"content":"GetParameter(Int32)","pos":[0,19]}]},{"pos":[28331,28351],"content":"GetParameter(String)","needQuote":true,"nodes":[{"content":"GetParameter(String)","pos":[0,20]}]},{"pos":[30022,30037],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"pos":[31672,31687],"content":"IndexOf(String)","needQuote":true,"nodes":[{"content":"IndexOf(String)","pos":[0,15]}]},{"pos":[33434,33455],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"pos":[35218,35232],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[36650,36665],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[38116,38132],"content":"RemoveAt(String)","needQuote":true,"nodes":[{"content":"RemoveAt(String)","pos":[0,16]}]},{"pos":[39729,39761],"content":"SetParameter(Int32, DbParameter)","needQuote":true,"nodes":[{"content":"SetParameter(Int32, DbParameter)","pos":[0,32]}]},{"pos":[41565,41598],"content":"SetParameter(String, DbParameter)","needQuote":true,"nodes":[{"content":"SetParameter(String, DbParameter)","pos":[0,33]}]},{"pos":[43382,43399],"content":"IList.IsFixedSize","needQuote":true,"nodes":[{"content":"IList.IsFixedSize","pos":[0,17]}]},{"pos":[44741,44757],"content":"IList.IsReadOnly","needQuote":true,"nodes":[{"content":"IList.IsReadOnly","pos":[0,16]}]},{"pos":[46090,46116],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[47257,47275],"content":"System.Data.Common","needQuote":true,"nodes":[{"content":"System.Data.Common","pos":[0,18]}]},{"pos":[47442,47448],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47621,47645],"content":"IDataParameterCollection","needQuote":true,"nodes":[{"content":"IDataParameterCollection","pos":[0,24]}]},{"pos":[47877,47882],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[48077,48088],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[48301,48312],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[48511,48521],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[48616,48624],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[48693,48694],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48721,48722],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48792,48800],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[48869,48870],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48897,48898],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49081,49095],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[49214,49220],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49287,49288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49338,49344],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49404,49405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49488,49494],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49561,49562],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49612,49618],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49678,49679],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49893,49915],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[50063,50069],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50136,50137],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50187,50193],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50254,50255]},{"pos":[50310,50316],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50376,50377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50474,50480],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50547,50548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50598,50604],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50665,50666]},{"pos":[50721,50727],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50787,50788],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51033,51064],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[51230,51245],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[51321,51322],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51372,51378],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51439,51440]},{"pos":[51495,51501],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51561,51562],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51668,51683],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[51759,51760],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51810,51816],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51877,51878]},{"pos":[51933,51939],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51999,52000],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52230,52243],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[52344,52355],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[52427,52428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52455,52456],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52529,52540],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[52612,52613],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52640,52641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52816,52825],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[52918,52925],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52993,52994],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53021,53022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53091,53098],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[53166,53167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53194,53195],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53370,53387],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[53496,53511],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[53587,53588],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53615,53616],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53693,53708],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[53784,53785],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53812,53813],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54108,54121],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[54238,54249],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[54308,54309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54336,54337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54418,54429],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[54488,54489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54516,54517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54872,54884],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[55017,55027],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[55094,55095],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55122,55123],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55212,55222],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[55289,55290],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55317,55318],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55659,55674],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[55878,55891],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[55953,55954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55981,55982],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56060,56076],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[56141,56142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56169,56170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56548,56565],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[56777,56792],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[56856,56857],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56884,56885],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56965,56983],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[57050,57051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57078,57079],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57314,57320],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[57432,57443],"content":"System.Data","needQuote":true,"nodes":[{"content":"System.Data","pos":[0,11]}]},{"pos":[57577,57595],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[57796,57820],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[57999,58010],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[58069,58070],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58137,58148],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[58225,58226],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58339,58350],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[58409,58410],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58477,58488],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[58565,58566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58794,58803],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[59009,59032],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[59227,59237],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[59304,59305],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59372,59383],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[59460,59461],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59582,59592],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[59659,59660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59727,59738],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[59815,59816],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60069,60087],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[60309,60335],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[60642,60655],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[60717,60718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60785,60796],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[60873,60874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60984,61000],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[61065,61066],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61133,61144],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[61221,61222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61511,61521],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[61721,61749],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[62064,62079],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[62143,62144],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62211,62222],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[62299,62300],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62412,62430],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[62497,62498],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62565,62576],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[62653,62654],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62916,62927],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[63120,63125],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[63326,63331],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63502,63513],"content":"DbParameter","needQuote":true,"nodes":[{"content":"DbParameter","pos":[0,11]}]},{"pos":[63697,63703],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[63898,63906],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[64164,64175],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[64392,64396],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[64452,64453]},{"pos":[64505,64510],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[64570,64571]},{"pos":[64665,64669],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[64724,64725],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64774,64779],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64838,64839],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65124,65136],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"pos":[65393,65397],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[65465,65466]},{"pos":[65519,65525],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"]","pos":[65586,65587]},{"pos":[65694,65698],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[65765,65766],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65816,65822],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[65882,65883],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66196,66207],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"pos":[66342,66345],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[66399,66400],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66450,66456],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66516,66517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66608,66611],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[66665,66666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66716,66722],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66782,66783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66958,66963],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[67140,67147],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[67258,67263],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[67319,67320],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67347,67348],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67426,67431],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[67487,67488],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67515,67516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67727,67743],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[67888,67896],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[67955,67956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68006,68012],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68072,68073],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68169,68177],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[68236,68237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68287,68293],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68353,68354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68541,68548],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[68772,68788],"content":"Contains(String)","needQuote":true,"nodes":[{"content":"Contains(String)","pos":[0,16]}]},{"pos":[68957,68965],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[69036,69037],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69087,69093],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[69153,69154],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69262,69270],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[69341,69342],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69392,69398],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[69458,69459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69750,69770],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[69948,69954],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[70017,70018],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70067,70072],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[70111,70112]},{"pos":[70166,70171],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70230,70231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70343,70349],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[70412,70413],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70462,70467],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[70506,70507]},{"pos":[70561,70566],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70625,70626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70893,70908],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[71047,71060],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[71130,71131],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71158,71159],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71251,71264],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[71334,71335],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71362,71363],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71579,71590],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[71825,71840],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"pos":[71983,71990],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[72048,72049],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72099,72105],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72165,72166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72261,72268],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[72326,72327],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72377,72383],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72443,72444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72703,72718],"content":"IndexOf(String)","needQuote":true,"nodes":[{"content":"IndexOf(String)","pos":[0,15]}]},{"pos":[72885,72892],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[72962,72963],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73013,73019],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[73079,73080],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73187,73194],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[73264,73265],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73315,73321],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[73381,73382],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73660,73681],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"pos":[73849,73855],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[73912,73913],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73962,73967],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[74027,74028]},{"pos":[74083,74089],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74149,74150],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74257,74263],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[74320,74321],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74370,74375],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[74435,74436]},{"pos":[74491,74497],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74557,74558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74810,74824],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[74965,74971],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[75028,75029],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75079,75085],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75145,75146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75240,75246],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[75303,75304],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75354,75360],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75420,75421],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75654,75669],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[75812,75820],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[75879,75880],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75929,75934],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[75993,75994],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76089,76097],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[76156,76157],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76206,76211],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76270,76271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76531,76547],"content":"RemoveAt(String)","needQuote":true,"nodes":[{"content":"RemoveAt(String)","pos":[0,16]}]},{"pos":[76716,76724],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[76795,76796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76846,76852],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[76912,76913],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77021,77029],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[77100,77101],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77151,77157],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[77217,77218],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77476,77487],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[77729,77739],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[77994,78008],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[78238,78262],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]}],"content":"items:\n- uid: System.Data.Common.DbParameterCollection\n  commentId: T:System.Data.Common.DbParameterCollection\n  id: DbParameterCollection\n  parent: System.Data.Common\n  children:\n  - System.Data.Common.DbParameterCollection.#ctor\n  - System.Data.Common.DbParameterCollection.Add(System.Object)\n  - System.Data.Common.DbParameterCollection.AddRange(System.Array)\n  - System.Data.Common.DbParameterCollection.Clear\n  - System.Data.Common.DbParameterCollection.Contains(System.Object)\n  - System.Data.Common.DbParameterCollection.Contains(System.String)\n  - System.Data.Common.DbParameterCollection.CopyTo(System.Array,System.Int32)\n  - System.Data.Common.DbParameterCollection.Count\n  - System.Data.Common.DbParameterCollection.GetEnumerator\n  - System.Data.Common.DbParameterCollection.GetParameter(System.Int32)\n  - System.Data.Common.DbParameterCollection.GetParameter(System.String)\n  - System.Data.Common.DbParameterCollection.IndexOf(System.Object)\n  - System.Data.Common.DbParameterCollection.IndexOf(System.String)\n  - System.Data.Common.DbParameterCollection.Insert(System.Int32,System.Object)\n  - System.Data.Common.DbParameterCollection.Item(System.Int32)\n  - System.Data.Common.DbParameterCollection.Item(System.String)\n  - System.Data.Common.DbParameterCollection.Remove(System.Object)\n  - System.Data.Common.DbParameterCollection.RemoveAt(System.Int32)\n  - System.Data.Common.DbParameterCollection.RemoveAt(System.String)\n  - System.Data.Common.DbParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)\n  - System.Data.Common.DbParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)\n  - System.Data.Common.DbParameterCollection.SyncRoot\n  - System.Data.Common.DbParameterCollection.System#Collections#ICollection#IsSynchronized\n  - System.Data.Common.DbParameterCollection.System#Collections#IList#IsFixedSize\n  - System.Data.Common.DbParameterCollection.System#Collections#IList#IsReadOnly\n  - System.Data.Common.DbParameterCollection.System#Collections#IList#Item(System.Int32)\n  - System.Data.Common.DbParameterCollection.System#Data#IDataParameterCollection#Item(System.String)\n  langs:\n  - csharp\n  - vb\n  name: DbParameterCollection\n  fullName: System.Data.Common.DbParameterCollection\n  type: Class\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DbParameterCollection\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 14\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>The base class for a collection of parameters relevant to a <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: 'public abstract class DbParameterCollection : IDataParameterCollection, IList, ICollection, IEnumerable'\n    content.vb: >-\n      Public MustInherit Class DbParameterCollection\n          Implements IDataParameterCollection, IList, ICollection, IEnumerable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Data.IDataParameterCollection\n  - System.Collections.IList\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: DbParameterCollection\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Data.Common.DbParameterCollection.#ctor\n  commentId: M:System.Data.Common.DbParameterCollection.#ctor\n  id: '#ctor'\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: DbParameterCollection()\n  fullName: System.Data.Common.DbParameterCollection.DbParameterCollection()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 17\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.Common.DbParameterCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected DbParameterCollection()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: DbParameterCollection.DbParameterCollection()\n- uid: System.Data.Common.DbParameterCollection.Count\n  commentId: P:System.Data.Common.DbParameterCollection.Count\n  id: Count\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Data.Common.DbParameterCollection.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 21\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Specifies the number of items in the collection.</p>\\n\"\n  syntax:\n    content: public abstract int Count { get; }\n    content.vb: Public MustOverride ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of items in the collection.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbParameterCollection.Count\n- uid: System.Data.Common.DbParameterCollection.Item(System.Int32)\n  commentId: P:System.Data.Common.DbParameterCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Data.Common.DbParameterCollection.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 71\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets and sets the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: public DbParameter this[int index] { get; set; }\n    content.vb: Public Property Item(index As Integer) As DbParameter\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the parameter.</p>\\n\"\n    return:\n      type: System.Data.Common.DbParameter\n      description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The specified index does not exist. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Data.Common.DbParameterCollection.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: DbParameterCollection.Item[Int32]\n  nameWithType.vb: DbParameterCollection.Item(Int32)\n- uid: System.Data.Common.DbParameterCollection.Item(System.String)\n  commentId: P:System.Data.Common.DbParameterCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.Data.Common.DbParameterCollection.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 83\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets and sets the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name.</p>\\n\"\n  syntax:\n    content: public DbParameter this[string parameterName] { get; set; }\n    content.vb: Public Property Item(parameterName As String) As DbParameter\n    parameters:\n    - id: parameterName\n      type: System.String\n      description: \"\\n<p>The name of the parameter.</p>\\n\"\n    return:\n      type: System.Data.Common.DbParameter\n      description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The specified index does not exist. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Data.Common.DbParameterCollection.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: DbParameterCollection.Item[String]\n  nameWithType.vb: DbParameterCollection.Item(String)\n- uid: System.Data.Common.DbParameterCollection.SyncRoot\n  commentId: P:System.Data.Common.DbParameterCollection.SyncRoot\n  id: SyncRoot\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: SyncRoot\n  fullName: System.Data.Common.DbParameterCollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SyncRoot\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 41\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Specifies the <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be used to synchronize access to the collection.</p>\\n\"\n  syntax:\n    content: public abstract object SyncRoot { get; }\n    content.vb: Public MustOverride ReadOnly Property SyncRoot As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>A <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be used to synchronize access to the <xref href=\\\"System.Data.Common.DbParameterCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbParameterCollection.SyncRoot\n- uid: System.Data.Common.DbParameterCollection.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.Data.Common.DbParameterCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Item[Int32]\n  fullName: System.Data.Common.DbParameterCollection.System.Collections.IList.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.this[]\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 58\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the element at the specified index.</p>\\n\"\n  syntax:\n    content: object IList.this[int index] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to get or set.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  implements:\n  - System.Collections.IList.Item(System.Int32)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Data.Common.DbParameterCollection.System.Collections.IList.Item(System.Int32)\n  name.vb: System.Collections.IList.Item(Int32)\n  nameWithType: DbParameterCollection.IList.Item[Int32]\n  nameWithType.vb: DbParameterCollection.System.Collections.IList.Item(Int32)\n- uid: System.Data.Common.DbParameterCollection.System#Data#IDataParameterCollection#Item(System.String)\n  commentId: P:System.Data.Common.DbParameterCollection.System#Data#IDataParameterCollection#Item(System.String)\n  id: System#Data#IDataParameterCollection#Item(System.String)\n  isEii: true\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: IDataParameterCollection.Item[String]\n  fullName: System.Data.Common.DbParameterCollection.System.Data.IDataParameterCollection.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDataParameterCollection.this[]\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 46\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the parameter at the specified index.</p>\\n\"\n  syntax:\n    content: object IDataParameterCollection.this[string parameterName] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Data.IDataParameterCollection.Item(parameterName As String) As Object Implements IDataParameterCollection.this\n    parameters:\n    - id: parameterName\n      type: System.String\n      description: \"\\n<p>The name of the parameter to retrieve.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  implements:\n  - System.Data.IDataParameterCollection.Item(System.String)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Data.Common.DbParameterCollection.System.Data.IDataParameterCollection.Item(System.String)\n  name.vb: System.Data.IDataParameterCollection.Item(String)\n  nameWithType: DbParameterCollection.IDataParameterCollection.Item[String]\n  nameWithType.vb: DbParameterCollection.System.Data.IDataParameterCollection.Item(String)\n- uid: System.Data.Common.DbParameterCollection.Add(System.Object)\n  commentId: M:System.Data.Common.DbParameterCollection.Add(System.Object)\n  id: Add(System.Object)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: Add(Object)\n  fullName: System.Data.Common.DbParameterCollection.Add(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 95\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Adds the specified <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to the <xref href=\\\"System.Data.Common.DbParameterCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract int Add(object value)\n    content.vb: Public MustOverride Function Add(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbParameter.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add to the collection.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object in the collection.</p>\\n\"\n  implements:\n  - System.Collections.IList.Add(System.Object)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.Add(Object)\n- uid: System.Data.Common.DbParameterCollection.AddRange(System.Array)\n  commentId: M:System.Data.Common.DbParameterCollection.AddRange(System.Array)\n  id: AddRange(System.Array)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: AddRange(Array)\n  fullName: System.Data.Common.DbParameterCollection.AddRange(System.Array)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddRange\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 97\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Adds an array of items with the specified values to the <xref href=\\\"System.Data.Common.DbParameterCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract void AddRange(Array values)\n    content.vb: Public MustOverride Sub AddRange(values As Array)\n    parameters:\n    - id: values\n      type: System.Array\n      description: \"\\n<p>An array of values of type <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add to the collection.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.AddRange(Array)\n- uid: System.Data.Common.DbParameterCollection.Clear\n  commentId: M:System.Data.Common.DbParameterCollection.Clear\n  id: Clear\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Data.Common.DbParameterCollection.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 105\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Removes all <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values from the <xref href=\\\"System.Data.Common.DbParameterCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract void Clear()\n    content.vb: Public MustOverride Sub Clear\n  implements:\n  - System.Collections.IList.Clear\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.Clear()\n- uid: System.Data.Common.DbParameterCollection.Contains(System.Object)\n  commentId: M:System.Data.Common.DbParameterCollection.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: Contains(Object)\n  fullName: System.Data.Common.DbParameterCollection.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 99\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Indicates whether a <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified <xref href=\\\"System.Data.Common.DbParameter.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is contained in the collection.</p>\\n\"\n  syntax:\n    content: public abstract bool Contains(object value)\n    content.vb: Public MustOverride Function Contains(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbParameter.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to look for in the collection.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is in the collection; otherwise <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Contains(System.Object)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.Contains(Object)\n- uid: System.Data.Common.DbParameterCollection.Contains(System.String)\n  commentId: M:System.Data.Common.DbParameterCollection.Contains(System.String)\n  id: Contains(System.String)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: Contains(String)\n  fullName: System.Data.Common.DbParameterCollection.Contains(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 101\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Indicates whether a <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name exists in the collection.</p>\\n\"\n  syntax:\n    content: public abstract bool Contains(string value)\n    content.vb: Public MustOverride Function Contains(value As String) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to look for in the collection.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is in the collection; otherwise <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Data.IDataParameterCollection.Contains(System.String)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.Contains(String)\n- uid: System.Data.Common.DbParameterCollection.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Data.Common.DbParameterCollection.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.Data.Common.DbParameterCollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 103\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Copies an array of items to the collection starting at the specified index.</p>\\n\"\n  syntax:\n    content: public abstract void CopyTo(Array array, int index)\n    content.vb: Public MustOverride Sub CopyTo(array As Array, index As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The array of items to copy to the collection.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index in the collection to copy the items.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.CopyTo(Array, Int32)\n- uid: System.Data.Common.DbParameterCollection.GetEnumerator\n  commentId: M:System.Data.Common.DbParameterCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Data.Common.DbParameterCollection.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 107\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Exposes the <xref href=\\\"System.Collections.IEnumerable.GetEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method, which supports a simple iteration over a collection by a .NET Framework data provider.</p>\\n\"\n  syntax:\n    content: public abstract IEnumerator GetEnumerator()\n    content.vb: Public MustOverride Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to iterate through the collection.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.GetEnumerator()\n- uid: System.Data.Common.DbParameterCollection.GetParameter(System.Int32)\n  commentId: M:System.Data.Common.DbParameterCollection.GetParameter(System.Int32)\n  id: GetParameter(System.Int32)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: GetParameter(Int32)\n  fullName: System.Data.Common.DbParameterCollection.GetParameter(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetParameter\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 109\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object at the specified index in the collection.</p>\\n\"\n  syntax:\n    content: protected abstract DbParameter GetParameter(int index)\n    content.vb: Protected MustOverride Function GetParameter(index As Integer) As DbParameter\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the collection.</p>\\n\"\n    return:\n      type: System.Data.Common.DbParameter\n      description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object at the specified index in the collection.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: DbParameterCollection.GetParameter(Int32)\n- uid: System.Data.Common.DbParameterCollection.GetParameter(System.String)\n  commentId: M:System.Data.Common.DbParameterCollection.GetParameter(System.String)\n  id: GetParameter(System.String)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: GetParameter(String)\n  fullName: System.Data.Common.DbParameterCollection.GetParameter(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetParameter\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 111\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> the object with the specified name.</p>\\n\"\n  syntax:\n    content: protected abstract DbParameter GetParameter(string parameterName)\n    content.vb: Protected MustOverride Function GetParameter(parameterName As String) As DbParameter\n    parameters:\n    - id: parameterName\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the collection.</p>\\n\"\n    return:\n      type: System.Data.Common.DbParameter\n      description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> the object with the specified name.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: DbParameterCollection.GetParameter(String)\n- uid: System.Data.Common.DbParameterCollection.IndexOf(System.Object)\n  commentId: M:System.Data.Common.DbParameterCollection.IndexOf(System.Object)\n  id: IndexOf(System.Object)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(Object)\n  fullName: System.Data.Common.DbParameterCollection.IndexOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndexOf\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 113\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the index of the specified <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract int IndexOf(object value)\n    content.vb: Public MustOverride Function IndexOf(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object in the collection.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the specified <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.Collections.IList.IndexOf(System.Object)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.IndexOf(Object)\n- uid: System.Data.Common.DbParameterCollection.IndexOf(System.String)\n  commentId: M:System.Data.Common.DbParameterCollection.IndexOf(System.String)\n  id: IndexOf(System.String)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(String)\n  fullName: System.Data.Common.DbParameterCollection.IndexOf(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndexOf\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 115\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the index of the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the specified name.</p>\\n\"\n  syntax:\n    content: public abstract int IndexOf(string parameterName)\n    content.vb: Public MustOverride Function IndexOf(parameterName As String) As Integer\n    parameters:\n    - id: parameterName\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object in the collection.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the specified name.</p>\\n\"\n  implements:\n  - System.Data.IDataParameterCollection.IndexOf(System.String)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.IndexOf(String)\n- uid: System.Data.Common.DbParameterCollection.Insert(System.Int32,System.Object)\n  commentId: M:System.Data.Common.DbParameterCollection.Insert(System.Int32,System.Object)\n  id: Insert(System.Int32,System.Object)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Object)\n  fullName: System.Data.Common.DbParameterCollection.Insert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Insert\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 117\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Inserts the specified index of the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the specified name into the collection at the specified index.</p>\\n\"\n  syntax:\n    content: public abstract void Insert(int index, object value)\n    content.vb: Public MustOverride Sub Insert(index As Integer, value As Object)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index at which to insert the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to insert into the collection.</p>\\n\"\n  implements:\n  - System.Collections.IList.Insert(System.Int32,System.Object)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.Insert(Int32, Object)\n- uid: System.Data.Common.DbParameterCollection.Remove(System.Object)\n  commentId: M:System.Data.Common.DbParameterCollection.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: Remove(Object)\n  fullName: System.Data.Common.DbParameterCollection.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 119\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Removes the specified <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from the collection.</p>\\n\"\n  syntax:\n    content: public abstract void Remove(object value)\n    content.vb: Public MustOverride Sub Remove(value As Object)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to remove.</p>\\n\"\n  implements:\n  - System.Collections.IList.Remove(System.Object)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.Remove(Object)\n- uid: System.Data.Common.DbParameterCollection.RemoveAt(System.Int32)\n  commentId: M:System.Data.Common.DbParameterCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(Int32)\n  fullName: System.Data.Common.DbParameterCollection.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAt\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 121\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Removes the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object at the specified from the collection.</p>\\n\"\n  syntax:\n    content: public abstract void RemoveAt(int index)\n    content.vb: Public MustOverride Sub RemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index where the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is located.</p>\\n\"\n  implements:\n  - System.Collections.IList.RemoveAt(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.RemoveAt(Int32)\n- uid: System.Data.Common.DbParameterCollection.RemoveAt(System.String)\n  commentId: M:System.Data.Common.DbParameterCollection.RemoveAt(System.String)\n  id: RemoveAt(System.String)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(String)\n  fullName: System.Data.Common.DbParameterCollection.RemoveAt(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAt\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 123\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Removes the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the specified name from the collection.</p>\\n\"\n  syntax:\n    content: public abstract void RemoveAt(string parameterName)\n    content.vb: Public MustOverride Sub RemoveAt(parameterName As String)\n    parameters:\n    - id: parameterName\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to remove.</p>\\n\"\n  implements:\n  - System.Data.IDataParameterCollection.RemoveAt(System.String)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbParameterCollection.RemoveAt(String)\n- uid: System.Data.Common.DbParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)\n  commentId: M:System.Data.Common.DbParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)\n  id: SetParameter(System.Int32,System.Data.Common.DbParameter)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: SetParameter(Int32, DbParameter)\n  fullName: System.Data.Common.DbParameterCollection.SetParameter(System.Int32, System.Data.Common.DbParameter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetParameter\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 125\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Sets the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object at the specified index to a new value. </p>\\n\"\n  syntax:\n    content: protected abstract void SetParameter(int index, DbParameter value)\n    content.vb: Protected MustOverride Sub SetParameter(index As Integer, value As DbParameter)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index where the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is located.</p>\\n\"\n    - id: value\n      type: System.Data.Common.DbParameter\n      description: \"\\n<p>The new <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: DbParameterCollection.SetParameter(Int32, DbParameter)\n- uid: System.Data.Common.DbParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)\n  commentId: M:System.Data.Common.DbParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)\n  id: SetParameter(System.String,System.Data.Common.DbParameter)\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: SetParameter(String, DbParameter)\n  fullName: System.Data.Common.DbParameterCollection.SetParameter(System.String, System.Data.Common.DbParameter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetParameter\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 127\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Sets the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the specified name to a new value.</p>\\n\"\n  syntax:\n    content: protected abstract void SetParameter(string parameterName, DbParameter value)\n    content.vb: Protected MustOverride Sub SetParameter(parameterName As String, value As DbParameter)\n    parameters:\n    - id: parameterName\n      type: System.String\n      description: \"\\n<p>The name of the <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object in the collection.</p>\\n\"\n    - id: value\n      type: System.Data.Common.DbParameter\n      description: \"\\n<p>The new <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: DbParameterCollection.SetParameter(String, DbParameter)\n- uid: System.Data.Common.DbParameterCollection.System#Collections#IList#IsFixedSize\n  commentId: P:System.Data.Common.DbParameterCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IsFixedSize\n  fullName: System.Data.Common.DbParameterCollection.System.Collections.IList.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IsFixedSize\n    path: src/System.Data.Common/src/System/Data/Common/DbParameterCollection.cs\n    startLine: 26\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  syntax:\n    content: bool IList.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.IList.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsFixedSize\n  nameWithType: DbParameterCollection.IList.IsFixedSize\n  nameWithType.vb: DbParameterCollection.System.Collections.IList.IsFixedSize\n- uid: System.Data.Common.DbParameterCollection.System#Collections#IList#IsReadOnly\n  commentId: P:System.Data.Common.DbParameterCollection.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IsReadOnly\n  fullName: System.Data.Common.DbParameterCollection.System.Collections.IList.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/ref/System.Data.Common.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IsReadOnly\n    path: src/System.Data.Common/ref/System.Data.Common.Manual.cs\n    startLine: 30\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  syntax:\n    content: bool IList.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.IList.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsReadOnly\n  nameWithType: DbParameterCollection.IList.IsReadOnly\n  nameWithType.vb: DbParameterCollection.System.Collections.IList.IsReadOnly\n- uid: System.Data.Common.DbParameterCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Data.Common.DbParameterCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Data.Common.DbParameterCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Data.Common.DbParameterCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/ref/System.Data.Common.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.Data.Common/ref/System.Data.Common.Manual.cs\n    startLine: 31\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: DbParameterCollection.ICollection.IsSynchronized\n  nameWithType.vb: DbParameterCollection.System.Collections.ICollection.IsSynchronized\nreferences:\n- uid: System.Data.Common\n  isExternal: false\n  name: System.Data.Common\n  fullName: System.Data.Common\n  nameWithType: System.Data.Common\n  commentId: N:System.Data.Common\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Data.IDataParameterCollection\n  parent: System.Data\n  isExternal: false\n  name: IDataParameterCollection\n  fullName: System.Data.IDataParameterCollection\n  nameWithType: IDataParameterCollection\n  commentId: T:System.Data.IDataParameterCollection\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  nameWithType: IList\n  commentId: T:System.Collections.IList\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Data\n  isExternal: false\n  name: System.Data\n  fullName: System.Data\n  nameWithType: System.Data\n  commentId: N:System.Data\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Data.Common.DbParameter\n  parent: System.Data.Common\n  isExternal: false\n  name: DbParameter\n  fullName: System.Data.Common.DbParameter\n  nameWithType: DbParameter\n  commentId: T:System.Data.Common.DbParameter\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IList.Item(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.IList.Item[System.Int32]\n  fullname.vb: System.Collections.IList.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Item[Int32]\n  nameWithType.vb: IList.Item(Int32)\n  commentId: P:System.Collections.IList.Item(System.Int32)\n- uid: System.Data.IDataParameterCollection.Item(System.String)\n  parent: System.Data.IDataParameterCollection\n  isExternal: true\n  name: Item[String]\n  fullName: System.Data.IDataParameterCollection.Item[System.String]\n  fullname.vb: System.Data.IDataParameterCollection.Item(System.String)\n  name.vb: Item(String)\n  spec.csharp:\n  - uid: System.Data.IDataParameterCollection.Item(System.String)\n    name: Item\n    fullName: System.Data.IDataParameterCollection.Item\n  - name: '['\n    fullName: '['\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Data.IDataParameterCollection.Item(System.String)\n    name: Item\n    fullName: System.Data.IDataParameterCollection.Item\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataParameterCollection.Item[String]\n  nameWithType.vb: IDataParameterCollection.Item(String)\n  commentId: P:System.Data.IDataParameterCollection.Item(System.String)\n- uid: System.Collections.IList.Add(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Add(Object)\n  fullName: System.Collections.IList.Add(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Add(Object)\n  commentId: M:System.Collections.IList.Add(System.Object)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IList.Clear\n  parent: System.Collections.IList\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.IList.Clear()\n  spec.csharp:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IList.Clear()\n  commentId: M:System.Collections.IList.Clear\n- uid: System.Collections.IList.Contains(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IList.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Contains(Object)\n  commentId: M:System.Collections.IList.Contains(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Data.IDataParameterCollection.Contains(System.String)\n  parent: System.Data.IDataParameterCollection\n  isExternal: true\n  name: Contains(String)\n  fullName: System.Data.IDataParameterCollection.Contains(System.String)\n  spec.csharp:\n  - uid: System.Data.IDataParameterCollection.Contains(System.String)\n    name: Contains\n    fullName: System.Data.IDataParameterCollection.Contains\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataParameterCollection.Contains(System.String)\n    name: Contains\n    fullName: System.Data.IDataParameterCollection.Contains\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataParameterCollection.Contains(String)\n  commentId: M:System.Data.IDataParameterCollection.Contains(System.String)\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.IList.IndexOf(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: IndexOf(Object)\n  fullName: System.Collections.IList.IndexOf(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.IndexOf(Object)\n  commentId: M:System.Collections.IList.IndexOf(System.Object)\n- uid: System.Data.IDataParameterCollection.IndexOf(System.String)\n  parent: System.Data.IDataParameterCollection\n  isExternal: true\n  name: IndexOf(String)\n  fullName: System.Data.IDataParameterCollection.IndexOf(System.String)\n  spec.csharp:\n  - uid: System.Data.IDataParameterCollection.IndexOf(System.String)\n    name: IndexOf\n    fullName: System.Data.IDataParameterCollection.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataParameterCollection.IndexOf(System.String)\n    name: IndexOf\n    fullName: System.Data.IDataParameterCollection.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataParameterCollection.IndexOf(String)\n  commentId: M:System.Data.IDataParameterCollection.IndexOf(System.String)\n- uid: System.Collections.IList.Insert(System.Int32,System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Insert(Int32, Object)\n  fullName: System.Collections.IList.Insert(System.Int32, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Insert(Int32, Object)\n  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n- uid: System.Collections.IList.Remove(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IList.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Remove(Object)\n  commentId: M:System.Collections.IList.Remove(System.Object)\n- uid: System.Collections.IList.RemoveAt(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.IList.RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.RemoveAt(Int32)\n  commentId: M:System.Collections.IList.RemoveAt(System.Int32)\n- uid: System.Data.IDataParameterCollection.RemoveAt(System.String)\n  parent: System.Data.IDataParameterCollection\n  isExternal: true\n  name: RemoveAt(String)\n  fullName: System.Data.IDataParameterCollection.RemoveAt(System.String)\n  spec.csharp:\n  - uid: System.Data.IDataParameterCollection.RemoveAt(System.String)\n    name: RemoveAt\n    fullName: System.Data.IDataParameterCollection.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataParameterCollection.RemoveAt(System.String)\n    name: RemoveAt\n    fullName: System.Data.IDataParameterCollection.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataParameterCollection.RemoveAt(String)\n  commentId: M:System.Data.IDataParameterCollection.RemoveAt(System.String)\n- uid: System.Collections.IList.IsFixedSize\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsFixedSize\n  fullName: System.Collections.IList.IsFixedSize\n  nameWithType: IList.IsFixedSize\n  commentId: P:System.Collections.IList.IsFixedSize\n- uid: System.Collections.IList.IsReadOnly\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.IList.IsReadOnly\n  nameWithType: IList.IsReadOnly\n  commentId: P:System.Collections.IList.IsReadOnly\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n"}