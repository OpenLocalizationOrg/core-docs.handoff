{"nodes":[{"pos":[454,483],"content":"AssemblySignatureKeyAttribute","needQuote":true,"nodes":[{"content":"AssemblySignatureKeyAttribute","pos":[0,29]}]},{"pos":[2054,2063],"content":"Inherited","needQuote":true,"nodes":[{"content":"Inherited","pos":[0,9]}]},{"pos":[2122,2135],"content":"AllowMultiple","needQuote":true,"nodes":[{"content":"AllowMultiple","pos":[0,13]}]},{"pos":[2660,2705],"content":"AssemblySignatureKeyAttribute(String, String)","needQuote":true,"nodes":[{"content":"AssemblySignatureKeyAttribute(String, String)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The public or identity key.&lt;/p&gt;\\n","pos":[3661,3699],"source":"\\n<p>The public or identity key.</p>\\n"},{"content":"\\n&lt;p&gt;The countersignature, which is the signature key portion of the strong-name key.&lt;/p&gt;\\n","pos":[3774,3865],"source":"\\n<p>The countersignature, which is the signature key portion of the strong-name key.</p>\\n"},{"pos":[4285,4301],"content":"Countersignature","needQuote":true,"nodes":[{"content":"Countersignature","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The countersignature for this signature key.&lt;/p&gt;\\n","pos":[5030,5085],"source":"\\n<p>The countersignature for this signature key.</p>\\n"},{"pos":[5476,5485],"content":"PublicKey","needQuote":true,"nodes":[{"content":"PublicKey","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The public key for this assembly.&lt;/p&gt;\\n","pos":[6188,6232],"source":"\\n<p>The public key for this assembly.</p>\\n"},{"pos":[6434,6451],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[6615,6621],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6769,6778],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[6966,6980],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7105,7111],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7160,7161],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7211,7217],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7277,7278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7364,7370],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7419,7420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7470,7476],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7536,7537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7740,7753],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[7860,7871],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[7925,7926],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7953,7954],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8030,8041],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[8095,8096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8123,8124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8306,8316],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[8411,8419],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8488,8489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8516,8517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8587,8595],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8664,8665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8692,8693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8890,8912],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[9060,9066],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9133,9134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9184,9190],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9251,9252]},{"pos":[9307,9313],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9373,9374],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9471,9477],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9544,9545],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9595,9601],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9662,9663]},{"pos":[9718,9724],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9784,9785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10030,10061],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10227,10242],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10318,10319],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10369,10375],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10436,10437]},{"pos":[10492,10498],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10558,10559],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10665,10680],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10756,10757],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10807,10813],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10874,10875]},{"pos":[10930,10936],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10996,10997],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11223,11232],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11325,11332],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11400,11401],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11428,11429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11498,11505],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11573,11574],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11601,11602],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11777,11794],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11903,11918],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11994,11995],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12022,12023],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12100,12115],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12191,12192],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12219,12220],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12365,12371],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12502,12508],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Reflection.AssemblySignatureKeyAttribute\n  commentId: T:System.Reflection.AssemblySignatureKeyAttribute\n  id: AssemblySignatureKeyAttribute\n  parent: System.Reflection\n  children:\n  - System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)\n  - System.Reflection.AssemblySignatureKeyAttribute.Countersignature\n  - System.Reflection.AssemblySignatureKeyAttribute.PublicKey\n  langs:\n  - csharp\n  - vb\n  name: AssemblySignatureKeyAttribute\n  fullName: System.Reflection.AssemblySignatureKeyAttribute\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AssemblySignatureKeyAttribute\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 363\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Provides migration from an older, simpler strong name key to a larger key with a stronger hashing algorithm.</p>\\n\"\n  syntax:\n    content: >-\n      [AttributeUsage(AttributeTargets.Assembly, Inherited = false, AllowMultiple = false)]\n\n      public sealed class AssemblySignatureKeyAttribute : Attribute, _Attribute\n    content.vb: >-\n      <AttributeUsage(AttributeTargets.Assembly, Inherited:=False, AllowMultiple:=False)>\n\n      Public NotInheritable Class AssemblySignatureKeyAttribute\n          Inherits Attribute\n          Implements _Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.AttributeUsageAttribute\n    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)\n    arguments:\n    - type: System.AttributeTargets\n      value: 1\n    namedArguments:\n    - name: Inherited\n      type: System.Boolean\n      value: false\n    - name: AllowMultiple\n      type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: AssemblySignatureKeyAttribute\n- uid: System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)\n  commentId: M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Reflection.AssemblySignatureKeyAttribute\n  langs:\n  - csharp\n  - vb\n  name: AssemblySignatureKeyAttribute(String, String)\n  fullName: System.Reflection.AssemblySignatureKeyAttribute.AssemblySignatureKeyAttribute(System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 369\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Reflection.AssemblySignatureKeyAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified public key and countersignature.</p>\\n\"\n  syntax:\n    content: public AssemblySignatureKeyAttribute(string publicKey, string countersignature)\n    content.vb: Public Sub New(publicKey As String, countersignature As String)\n    parameters:\n    - id: publicKey\n      type: System.String\n      description: \"\\n<p>The public or identity key.</p>\\n\"\n    - id: countersignature\n      type: System.String\n      description: \"\\n<p>The countersignature, which is the signature key portion of the strong-name key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblySignatureKeyAttribute.AssemblySignatureKeyAttribute(String, String)\n- uid: System.Reflection.AssemblySignatureKeyAttribute.Countersignature\n  commentId: P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature\n  id: Countersignature\n  parent: System.Reflection.AssemblySignatureKeyAttribute\n  langs:\n  - csharp\n  - vb\n  name: Countersignature\n  fullName: System.Reflection.AssemblySignatureKeyAttribute.Countersignature\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Countersignature\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 380\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the countersignature for the strong name for this assembly.</p>\\n\"\n  syntax:\n    content: public string Countersignature { get; }\n    content.vb: Public ReadOnly Property Countersignature As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The countersignature for this signature key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: AssemblySignatureKeyAttribute.Countersignature\n- uid: System.Reflection.AssemblySignatureKeyAttribute.PublicKey\n  commentId: P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey\n  id: PublicKey\n  parent: System.Reflection.AssemblySignatureKeyAttribute\n  langs:\n  - csharp\n  - vb\n  name: PublicKey\n  fullName: System.Reflection.AssemblySignatureKeyAttribute.PublicKey\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PublicKey\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 375\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the public key for the strong name used to sign the assembly.</p>\\n\"\n  syntax:\n    content: public string PublicKey { get; }\n    content.vb: Public ReadOnly Property PublicKey As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The public key for this assembly.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: AssemblySignatureKeyAttribute.PublicKey\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  fullName: System.Attribute\n  nameWithType: Attribute\n  commentId: T:System.Attribute\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Attribute.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Attribute.Equals(Object)\n  commentId: M:System.Attribute.Equals(System.Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Attribute.GetHashCode()\n  spec.csharp:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Attribute.GetHashCode()\n  commentId: M:System.Attribute.GetHashCode\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}