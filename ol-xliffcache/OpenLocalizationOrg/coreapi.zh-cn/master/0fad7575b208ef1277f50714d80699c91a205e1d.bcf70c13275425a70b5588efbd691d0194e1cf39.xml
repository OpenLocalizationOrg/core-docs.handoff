{"nodes":[{"pos":[810,820],"content":"TextReader","needQuote":true,"nodes":[{"content":"TextReader","pos":[0,10]}]},{"pos":[3326,3338],"content":"TextReader()","needQuote":true,"nodes":[{"content":"TextReader()","pos":[0,12]}]},{"pos":[4332,4341],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[5258,5274],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[6051,6188],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[6189,6195],"source":" </p>\\n"},{"pos":[6484,6490],"content":"Peek()","needQuote":true,"nodes":[{"content":"Peek()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.&lt;/p&gt;\\n","pos":[7188,7335],"source":"\\n<p>An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[7656,7681],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[7682,7688],"source":" </p>\\n"},{"pos":[8138,8144],"content":"Read()","needQuote":true,"nodes":[{"content":"Read()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The next character from the text reader, or -1 if no more characters are available.","pos":[8769,8857],"source":"\\n<p>The next character from the text reader, or -1 if no more characters are available."},{"content":"The default implementation returns -1.&lt;/p&gt;\\n","pos":[8858,8902],"source":" The default implementation returns -1.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[9223,9248],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[9249,9255],"source":" </p>\\n"},{"pos":[9828,9854],"content":"Read(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Read(Char[], Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the characters read from the current source.","pos":[10680,10887],"source":"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source."},{"content":"&lt;/p&gt;\\n","pos":[10888,10894],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.","pos":[11261,11324],"source":"\\n<p>The position in <em>buffer</em> at which to begin writing."},{"content":"&lt;/p&gt;\\n","pos":[11325,11331],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to read.","pos":[11394,11440],"source":"\\n<p>The maximum number of characters to read."},{"content":"If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns.","pos":[11441,11563]},{"content":"&lt;/p&gt;\\n","pos":[11564,11570],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters that have been read.","pos":[11629,11679],"source":"\\n<p>The number of characters that have been read."},{"content":"The number will be less than or equal to &lt;em&gt;count&lt;/em&gt;, depending on whether the data is available within the reader.","pos":[11680,11798],"source":" The number will be less than or equal to <em>count</em>, depending on whether the data is available within the reader."},{"content":"This method returns 0 (zero) if it is called when no more characters are left to read.&lt;/p&gt;\\n","pos":[11799,11891],"source":" This method returns 0 (zero) if it is called when no more characters are left to read.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12010,12058],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12059,12065],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.","pos":[12162,12234],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[12235,12241],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[12358,12410],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[12411,12417],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[12724,12749],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[12750,12756],"source":" </p>\\n"},{"pos":[13707,13738],"content":"ReadAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadAsync(Char[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the characters read from the current source.&lt;/p&gt;\\n","pos":[14781,14994],"source":"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\\n"},{"content":"\\n&lt;p&gt;The position in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.&lt;/p&gt;\\n","pos":[15057,15126],"source":"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to read.","pos":[15189,15235],"source":"\\n<p>The maximum number of characters to read."},{"content":"If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.&lt;/p&gt;\\n","pos":[15236,15370],"source":" If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[15458,15518],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the total number of bytes read into the buffer.","pos":[15519,15619],"source":" The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.&lt;/p&gt;\\n","pos":[15620,15830],"source":" The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15949,16003],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[16120,16178],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\\n","pos":[16275,16364],"source":"\\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;The text reader has been disposed.&lt;/p&gt;\\n","pos":[16473,16518],"source":"\\n<p>The text reader has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is currently in use by a previous read operation.","pos":[16631,16696],"source":"\\n<p>The reader is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[16697,16703],"source":" </p>\\n"},{"pos":[17694,17725],"content":"ReadBlock(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadBlock(Char[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;When this method returns, this parameter contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; -1) replaced by the characters read from the current source.","pos":[18576,18797],"source":"\\n<p>When this method returns, this parameter contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> -1) replaced by the characters read from the current source."},{"content":"&lt;/p&gt;\\n","pos":[18798,18804],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.&lt;/p&gt;\\n","pos":[19171,19240],"source":"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to read.","pos":[19303,19349],"source":"\\n<p>The maximum number of characters to read."},{"content":"&lt;/p&gt;\\n","pos":[19350,19356],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters that have been read.","pos":[19415,19465],"source":"\\n<p>The number of characters that have been read."},{"content":"The number will be less than or equal to &lt;em&gt;count&lt;/em&gt;, depending on whether all input characters have been read.&lt;/p&gt;\\n","pos":[19466,19586],"source":" The number will be less than or equal to <em>count</em>, depending on whether all input characters have been read.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[19705,19753],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19754,19760],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.","pos":[19857,19929],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[19930,19936],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[20053,20105],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[20106,20112],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[20419,20444],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[20445,20451],"source":" </p>\\n"},{"pos":[21282,21318],"content":"ReadBlockAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadBlockAsync(Char[], Int32, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the characters read from the current source.&lt;/p&gt;\\n","pos":[22380,22593],"source":"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\\n"},{"content":"\\n&lt;p&gt;The position in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.&lt;/p&gt;\\n","pos":[22656,22725],"source":"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to read.","pos":[22788,22834],"source":"\\n<p>The maximum number of characters to read."},{"content":"If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.&lt;/p&gt;\\n","pos":[22835,22969],"source":" If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[23057,23117],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the total number of bytes read into the buffer.","pos":[23118,23218],"source":" The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.&lt;/p&gt;\\n","pos":[23219,23429],"source":" The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23548,23602],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[23719,23777],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\\n","pos":[23874,23963],"source":"\\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;The text reader has been disposed.&lt;/p&gt;\\n","pos":[24072,24117],"source":"\\n<p>The text reader has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is currently in use by a previous read operation.","pos":[24230,24295],"source":"\\n<p>The reader is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[24296,24302],"source":" </p>\\n"},{"pos":[25207,25217],"content":"ReadLine()","needQuote":true,"nodes":[{"content":"ReadLine()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The next line from the reader, or &lt;strong&gt;null&lt;/strong&gt; if all characters have been read.&lt;/p&gt;\\n","pos":[25844,25944],"source":"\\n<p>The next line from the reader, or <strong>null</strong> if all characters have been read.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[26049,26074],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[26075,26081],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory to allocate a buffer for the returned string.","pos":[26184,26263],"source":"\\n<p>There is insufficient memory to allocate a buffer for the returned string."},{"content":"&lt;/p&gt;\\n","pos":[26264,26270],"source":" </p>\\n"},{"pos":[27249,27264],"content":"ReadLineAsync()","needQuote":true,"nodes":[{"content":"ReadLineAsync()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[28121,28181],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the next line from the text reader, or is &lt;strong&gt;null&lt;/strong&gt; if all of the characters have been read.","pos":[28182,28339],"source":" The value of the <em>TResult</em> parameter contains the next line from the text reader, or is <strong>null</strong> if all of the characters have been read."},{"content":"&lt;/p&gt;\\n","pos":[28340,28346],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The text reader has been disposed.&lt;/p&gt;\\n","pos":[28736,28781],"source":"\\n<p>The text reader has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is currently in use by a previous read operation.","pos":[28894,28959],"source":"\\n<p>The reader is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[28960,28966],"source":" </p>\\n"},{"pos":[29476,29487],"content":"ReadToEnd()","needQuote":true,"nodes":[{"content":"ReadToEnd()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A string that contains all characters from the current position to the end of the text reader.&lt;/p&gt;\\n","pos":[30145,30250],"source":"\\n<p>A string that contains all characters from the current position to the end of the text reader.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[30355,30380],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[30381,30387],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory to allocate a buffer for the returned string.","pos":[30706,30785],"source":"\\n<p>There is insufficient memory to allocate a buffer for the returned string."},{"content":"&lt;/p&gt;\\n","pos":[30786,30792],"source":" </p>\\n"},{"pos":[31563,31579],"content":"ReadToEndAsync()","needQuote":true,"nodes":[{"content":"ReadToEndAsync()","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[32487,32547],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains a string with the characters from the current position to the end of the text reader.","pos":[32548,32686],"source":" The value of the <em>TResult</em> parameter contains a string with the characters from the current position to the end of the text reader."},{"content":"&lt;/p&gt;\\n","pos":[32687,32693],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The text reader has been disposed.&lt;/p&gt;\\n","pos":[33066,33111],"source":"\\n<p>The text reader has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is currently in use by a previous read operation.","pos":[33224,33289],"source":"\\n<p>The reader is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[33290,33296],"source":" </p>\\n"},{"pos":[33702,33711],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[33851,33857],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34007,34018],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[34193,34203],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[34298,34306],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[34375,34376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34403,34404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34474,34482],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[34551,34552],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34579,34580],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34763,34777],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[34896,34902],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34969,34970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35020,35026],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35086,35087],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35170,35176],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35243,35244],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35294,35300],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35360,35361],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35575,35597],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[35745,35751],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35818,35819],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35869,35875],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35936,35937]},{"pos":[35992,35998],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36058,36059],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36156,36162],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36229,36230],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36280,36286],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[36347,36348]},{"pos":[36403,36409],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36469,36470],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36715,36746],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[36912,36927],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[37003,37004],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37054,37060],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[37121,37122]},{"pos":[37177,37183],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37243,37244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37350,37365],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[37441,37442],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37492,37498],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[37559,37560]},{"pos":[37615,37621],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37681,37682],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37912,37925],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[38026,38037],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[38109,38110],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38137,38138],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38211,38222],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[38294,38295],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38322,38323],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38498,38507],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[38600,38607],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[38675,38676],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38703,38704],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38773,38780],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[38848,38849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38876,38877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39052,39069],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[39178,39193],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[39269,39270],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39297,39298],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39375,39390],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[39466,39467],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39494,39495],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39640,39646],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[39787,39797],"content":"TextReader","needQuote":true,"nodes":[{"content":"TextReader","pos":[0,10]}]},{"pos":[39985,39994],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[40097,40104],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[40156,40157],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40184,40185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40259,40266],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[40318,40319],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40346,40347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40511,40518],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[40665,40670],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[40775,40781],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[40901,40905],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[40964,40966]},{"pos":[41029,41033],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[41091,41093],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[41294,41305],"content":"Task<Int32>","needQuote":true,"nodes":[{"content":"Task&lt;Int32&gt;","pos":[0,11],"source":"Task<Int32>"}]},{"pos":[41510,41514],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[41588,41589],"content":"<","needQuote":true,"nodes":[]},{"pos":[41638,41643],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[41784,41788],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[41863,41866]},{"pos":[41922,41927],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[41986,41987],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42188,42201],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[42398,42402],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[42455,42456],"content":"<","needQuote":true,"nodes":[]},{"pos":[42483,42490],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[42605,42609],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[42663,42666]},{"pos":[42700,42707],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[42740,42741],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42927,42949],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[43128,43134],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[43348,43360],"content":"Task<String>","needQuote":true,"nodes":[{"content":"Task&lt;String&gt;","pos":[0,12],"source":"Task<String>"}]},{"pos":[43568,43572],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[43646,43647],"content":"<","needQuote":true,"nodes":[]},{"pos":[43697,43703],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[43845,43849],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[43924,43927]},{"pos":[43984,43990],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[44050,44051],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44256,44279],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[44486,44497],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]},{"pos":[44661,44682],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[44883,44900],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[45082,45109],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[45336,45361],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[45560,45580],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]}],"content":"items:\n- uid: System.IO.TextReader\n  commentId: T:System.IO.TextReader\n  id: TextReader\n  parent: System.IO\n  children:\n  - System.IO.TextReader.#ctor\n  - System.IO.TextReader.Dispose\n  - System.IO.TextReader.Dispose(System.Boolean)\n  - System.IO.TextReader.Null\n  - System.IO.TextReader.Peek\n  - System.IO.TextReader.Read\n  - System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.TextReader.ReadLine\n  - System.IO.TextReader.ReadLineAsync\n  - System.IO.TextReader.ReadToEnd\n  - System.IO.TextReader.ReadToEndAsync\n  langs:\n  - csharp\n  - vb\n  name: TextReader\n  fullName: System.IO.TextReader\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TextReader\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 35\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Represents a reader that can read a sequential series of characters.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public abstract class TextReader : IDisposable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class TextReader\n          Implements IDisposable\n  seealso:\n  - type: System.IO.StringReader\n    commentId: T:System.IO.StringReader\n  - type: System.IO.StreamReader\n    commentId: T:System.IO.StreamReader\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: TextReader\n- uid: System.IO.TextReader.Null\n  commentId: F:System.IO.TextReader.Null\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  fullName: System.IO.TextReader.Null\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 43\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Provides a <strong>TextReader</strong> with no data to read from.</p>\\n\"\n  syntax:\n    content: public static readonly TextReader Null\n    content.vb: Public Shared ReadOnly Null As TextReader\n    return:\n      type: System.IO.TextReader\n  seealso:\n  - type: System.IO.StringReader\n    commentId: T:System.IO.StringReader\n  - type: System.IO.StreamReader\n    commentId: T:System.IO.StreamReader\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: TextReader.Null\n- uid: System.IO.TextReader.#ctor\n  commentId: M:System.IO.TextReader.#ctor\n  id: '#ctor'\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: TextReader()\n  fullName: System.IO.TextReader.TextReader()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 45\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected TextReader()\n    content.vb: Protected Sub New\n  seealso:\n  - type: System.IO.StringReader\n    commentId: T:System.IO.StringReader\n  - type: System.IO.StreamReader\n    commentId: T:System.IO.StreamReader\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TextReader.TextReader()\n- uid: System.IO.TextReader.Dispose\n  commentId: M:System.IO.TextReader.Dispose\n  id: Dispose\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.IO.TextReader.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 59\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TextReader.Dispose()\n- uid: System.IO.TextReader.Dispose(System.Boolean)\n  commentId: M:System.IO.TextReader.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.IO.TextReader.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 65\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: TextReader.Dispose(Boolean)\n- uid: System.IO.TextReader.Peek\n  commentId: M:System.IO.TextReader.Peek\n  id: Peek\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: Peek()\n  fullName: System.IO.TextReader.Peek()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Peek\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 76\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the reader.</p>\\n\"\n  syntax:\n    content: public virtual int Peek()\n    content.vb: Public Overridable Function Peek As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamReader.Peek\n    commentId: M:System.IO.StreamReader.Peek\n  - type: System.IO.StringReader.Peek\n    commentId: M:System.IO.StringReader.Peek\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextReader.Peek()\n- uid: System.IO.TextReader.Read\n  commentId: M:System.IO.TextReader.Read\n  id: Read\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: Read()\n  fullName: System.IO.TextReader.Read()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 89\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads the next character from the text reader and advances the character position by one character.</p>\\n\"\n  syntax:\n    content: public virtual int Read()\n    content.vb: Public Overridable Function Read As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The next character from the text reader, or -1 if no more characters are available. The default implementation returns -1.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamReader.Read\n    commentId: M:System.IO.StreamReader.Read\n  - type: System.IO.StringReader.Read\n    commentId: M:System.IO.StringReader.Read\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextReader.Read()\n- uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n  id: Read(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: Read(Char[], Int32, Int32)\n  fullName: System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 100\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a specified maximum number of characters from the current reader and writes the data to a buffer, beginning at the specified index.</p>\\n\"\n  syntax:\n    content: public virtual int Read([In, Out] char[] buffer, int index, int count)\n    content.vb: Public Overridable Function Read(buffer As Char(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source. </p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in <em>buffer</em> at which to begin writing. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to read. If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters that have been read. The number will be less than or equal to <em>count</em>, depending on whether the data is available within the reader. This method returns 0 (zero) if it is called when no more characters are left to read.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)\n  - type: System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.TextReader.Read(System.Char(), System.Int32, System.Int32)\n  name.vb: Read(Char(), Int32, Int32)\n  nameWithType: TextReader.Read(Char[], Int32, Int32)\n  nameWithType.vb: TextReader.Read(Char(), Int32, Int32)\n- uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  id: ReadAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: ReadAsync(Char[], Int32, Int32)\n  fullName: System.IO.TextReader.ReadAsync(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadAsync\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 203\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index. </p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task<int> ReadAsync(char[] buffer, int index, int count)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function ReadAsync(buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text reader has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The reader is currently in use by a previous read operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  - type: System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.TextReader.ReadAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadAsync(Char(), Int32, Int32)\n  nameWithType: TextReader.ReadAsync(Char[], Int32, Int32)\n  nameWithType.vb: TextReader.ReadAsync(Char(), Int32, Int32)\n- uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  id: ReadBlock(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: ReadBlock(Char[], Int32, Int32)\n  fullName: System.IO.TextReader.ReadBlock(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadBlock\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 142\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a specified maximum number of characters from the current text reader and writes the data to a buffer, beginning at the specified index.</p>\\n\"\n  syntax:\n    content: public virtual int ReadBlock([In, Out] char[] buffer, int index, int count)\n    content.vb: Public Overridable Function ReadBlock(buffer As Char(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>When this method returns, this parameter contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> -1) replaced by the characters read from the current source. </p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters that have been read. The number will be less than or equal to <em>count</em>, depending on whether all input characters have been read.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.TextReader.ReadBlock(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadBlock(Char(), Int32, Int32)\n  nameWithType: TextReader.ReadBlock(Char[], Int32, Int32)\n  nameWithType.vb: TextReader.ReadBlock(Char(), Int32, Int32)\n- uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  id: ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: ReadBlockAsync(Char[], Int32, Int32)\n  fullName: System.IO.TextReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadBlockAsync\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 234\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task<int> ReadBlockAsync(char[] buffer, int index, int count)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function ReadBlockAsync(buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text reader has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The reader is currently in use by a previous read operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  - type: System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.TextReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadBlockAsync(Char(), Int32, Int32)\n  nameWithType: TextReader.ReadBlockAsync(Char[], Int32, Int32)\n  nameWithType.vb: TextReader.ReadBlockAsync(Char(), Int32, Int32)\n- uid: System.IO.TextReader.ReadLine\n  commentId: M:System.IO.TextReader.ReadLine\n  id: ReadLine\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: ReadLine()\n  fullName: System.IO.TextReader.ReadLine()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadLine\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 160\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a line of characters from the text reader and returns the data as a string.</p>\\n\"\n  syntax:\n    content: public virtual string ReadLine()\n    content.vb: Public Overridable Function ReadLine As String\n    return:\n      type: System.String\n      description: \"\\n<p>The next line from the reader, or <strong>null</strong> if all characters have been read.</p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory to allocate a buffer for the returned string. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The number of characters in the next line is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  seealso:\n  - type: System.IO.StreamReader.ReadLine\n    commentId: M:System.IO.StreamReader.ReadLine\n  - type: System.IO.StringReader.ReadLine\n    commentId: M:System.IO.StringReader.ReadLine\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextReader.ReadLine()\n- uid: System.IO.TextReader.ReadLineAsync\n  commentId: M:System.IO.TextReader.ReadLineAsync\n  id: ReadLineAsync\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: ReadLineAsync()\n  fullName: System.IO.TextReader.ReadLineAsync()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadLineAsync\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 178\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a line of characters asynchronously and returns the data as a string. </p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task<string> ReadLineAsync()\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function ReadLineAsync As Task(Of String)\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the next line from the text reader, or is <strong>null</strong> if all of the characters have been read. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The number of characters in the next line is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text reader has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The reader is currently in use by a previous read operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamReader.ReadLineAsync\n    commentId: M:System.IO.StreamReader.ReadLineAsync\n  - type: System.IO.StringReader.ReadLineAsync\n    commentId: M:System.IO.StringReader.ReadLineAsync\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextReader.ReadLineAsync()\n- uid: System.IO.TextReader.ReadToEnd\n  commentId: M:System.IO.TextReader.ReadToEnd\n  id: ReadToEnd\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: ReadToEnd()\n  fullName: System.IO.TextReader.ReadToEnd()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadToEnd\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 125\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads all characters from the current position to the end of the text reader and returns them as one string.</p>\\n\"\n  syntax:\n    content: public virtual string ReadToEnd()\n    content.vb: Public Overridable Function ReadToEnd As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains all characters from the current position to the end of the text reader.</p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory to allocate a buffer for the returned string. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The number of characters in the next line is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  seealso:\n  - type: System.IO.StreamReader.ReadToEnd\n    commentId: M:System.IO.StreamReader.ReadToEnd\n  - type: System.IO.StringReader.ReadToEnd\n    commentId: M:System.IO.StringReader.ReadToEnd\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextReader.ReadToEnd()\n- uid: System.IO.TextReader.ReadToEndAsync\n  commentId: M:System.IO.TextReader.ReadToEndAsync\n  id: ReadToEndAsync\n  parent: System.IO.TextReader\n  langs:\n  - csharp\n  - vb\n  name: ReadToEndAsync()\n  fullName: System.IO.TextReader.ReadToEndAsync()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/TextReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadToEndAsync\n    path: src/mscorlib/src/System/IO/TextReader.cs\n    startLine: 189\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads all characters from the current position to the end of the text reader asynchronously and returns them as one string.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public virtual Task<string> ReadToEndAsync()\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function ReadToEndAsync As Task(Of String)\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains a string with the characters from the current position to the end of the text reader. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The number of characters is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The text reader has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The reader is currently in use by a previous read operation. </p>\\n\"\n  seealso:\n  - type: System.IO.StreamReader.ReadToEndAsync\n    commentId: M:System.IO.StreamReader.ReadToEndAsync\n  - type: System.IO.StringReader.ReadToEndAsync\n    commentId: M:System.IO.StringReader.ReadToEndAsync\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TextReader.ReadToEndAsync()\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: false\n  name: TextReader\n  fullName: System.IO.TextReader\n  nameWithType: TextReader\n  commentId: T:System.IO.TextReader\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)\n  name.vb: Task(Of Int32)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<Int32>\n  nameWithType.vb: Task(Of Int32)\n  commentId: T:System.Threading.Tasks.Task{System.Int32}\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Threading.Tasks.Task{System.String}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<String>\n  fullName: System.Threading.Tasks.Task<System.String>\n  fullname.vb: System.Threading.Tasks.Task(Of System.String)\n  name.vb: Task(Of String)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<String>\n  nameWithType.vb: Task(Of String)\n  commentId: T:System.Threading.Tasks.Task{System.String}\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n"}