{"nodes":[{"pos":[877,895],"content":"DiagnosticListener","needQuote":true,"nodes":[{"content":"DiagnosticListener","pos":[0,18]}]},{"pos":[2544,2570],"content":"DiagnosticListener(String)","needQuote":true,"nodes":[{"content":"DiagnosticListener(String)","pos":[0,26]}]},{"pos":[3565,3569],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[4553,4565],"content":"AllListeners","needQuote":true,"nodes":[{"content":"AllListeners","pos":[0,12]}]},{"pos":[5706,5715],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[6734,6751],"content":"IsEnabled(String)","needQuote":true,"nodes":[{"content":"IsEnabled(String)","pos":[0,17]}]},{"pos":[8185,8235],"content":"Subscribe(IObserver<KeyValuePair<String, Object>>)","needQuote":true,"nodes":[{"content":"Subscribe(IObserver&lt;KeyValuePair&lt;String, Object&gt;&gt;)","pos":[0,50],"source":"Subscribe(IObserver<KeyValuePair<String, Object>>)"}]},{"pos":[10448,10517],"content":"Subscribe(IObserver<KeyValuePair<String, Object>>, Predicate<String>)","needQuote":true,"nodes":[{"content":"Subscribe(IObserver&lt;KeyValuePair&lt;String, Object&gt;&gt;, Predicate&lt;String&gt;)","pos":[0,69],"source":"Subscribe(IObserver<KeyValuePair<String, Object>>, Predicate<String>)"}]},{"pos":[12548,12569],"content":"Write(String, Object)","needQuote":true,"nodes":[{"content":"Write(String, Object)","pos":[0,21]}]},{"pos":[13619,13637],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[13804,13810],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13989,14005],"content":"DiagnosticSource","needQuote":true,"nodes":[{"content":"DiagnosticSource","pos":[0,16]}]},{"pos":[14209,14220],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[14470,14511],"content":"IObservable<KeyValuePair<String, Object>>","needQuote":true,"nodes":[{"content":"IObservable&lt;KeyValuePair&lt;String, Object&gt;&gt;","pos":[0,41],"source":"IObservable<KeyValuePair<String, Object>>"}]},{"pos":[14964,14975],"content":"IObservable","needQuote":true,"nodes":[{"content":"IObservable","pos":[0,11]}]},{"pos":[15070,15071],"content":"<","needQuote":true,"nodes":[]},{"pos":[15169,15181],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[15298,15299],"content":"<","needQuote":true,"nodes":[]},{"pos":[15369,15375],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[15461,15462]},{"pos":[15540,15546],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15780,15791],"content":"IObservable","needQuote":true,"nodes":[{"content":"IObservable","pos":[0,11]}]},{"content":"(Of","pos":[15887,15890]},{"pos":[16000,16012],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[16130,16133]},{"pos":[16215,16221],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[16307,16308]},{"pos":[16386,16392],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16477,16478],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16525,16526],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16748,16758],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[16887,16895],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16998,16999],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17046,17047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17137,17145],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[17248,17249],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17296,17297],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17466,17480],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[17637,17643],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17742,17743],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17813,17819],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17904,17905],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18008,18014],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18113,18114],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18184,18190],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18275,18276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18472,18494],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[18688,18694],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18793,18794],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18864,18870],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18956,18957]},{"pos":[19035,19041],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19126,19127],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19244,19250],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19349,19350],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19420,19426],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19512,19513]},{"pos":[19591,19597],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19682,19683],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19902,19933],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[20154,20169],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[20286,20287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20357,20363],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20449,20450]},{"pos":[20528,20534],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20619,20620],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20746,20761],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[20878,20879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20949,20955],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21041,21042]},{"pos":[21120,21126],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21211,21212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21407,21420],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[21558,21569],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[21678,21679],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21726,21727],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21820,21831],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[21940,21941],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21988,21989],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22147,22156],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[22282,22289],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22390,22391],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22438,22439],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22528,22535],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22636,22637],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22684,22685],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22847,22864],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[23014,23029],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23146,23147],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23194,23195],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23292,23307],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23424,23425],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23472,23473],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23597,23603],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[23724,23738],"content":"IObservable<T>","needQuote":true,"nodes":[{"content":"IObservable&lt;T&gt;","pos":[0,14],"source":"IObservable<T>"}]},{"pos":[23965,23976],"content":"IObservable","needQuote":true,"nodes":[{"content":"IObservable","pos":[0,11]}]},{"pos":[24050,24051],"content":"<","needQuote":true,"nodes":[]},{"pos":[24098,24099],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24241,24252],"content":"IObservable","needQuote":true,"nodes":[{"content":"IObservable","pos":[0,11]}]},{"content":"(Of","pos":[24327,24330]},{"pos":[24389,24390],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24437,24438],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24577,24583],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[24787,24818],"content":"IObservable<DiagnosticListener>","needQuote":true,"nodes":[{"content":"IObservable&lt;DiagnosticListener&gt;","pos":[0,31],"source":"IObservable<DiagnosticListener>"}]},{"pos":[25168,25179],"content":"IObservable","needQuote":true,"nodes":[{"content":"IObservable","pos":[0,11]}]},{"pos":[25274,25275],"content":"<","needQuote":true,"nodes":[]},{"pos":[25369,25387],"content":"DiagnosticListener","needQuote":true,"nodes":[{"content":"DiagnosticListener","pos":[0,18]}]},{"pos":[25582,25593],"content":"IObservable","needQuote":true,"nodes":[{"content":"IObservable","pos":[0,11]}]},{"content":"(Of","pos":[25689,25692]},{"pos":[25798,25816],"content":"DiagnosticListener","needQuote":true,"nodes":[{"content":"DiagnosticListener","pos":[0,18]}]},{"pos":[25916,25917],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26118,26127],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[26268,26275],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[26365,26366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26413,26414],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26508,26515],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[26605,26606],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26653,26654],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26874,26891],"content":"IsEnabled(String)","needQuote":true,"nodes":[{"content":"IsEnabled(String)","pos":[0,17]}]},{"pos":[27111,27120],"content":"IsEnabled","needQuote":true,"nodes":[{"content":"IsEnabled","pos":[0,9]}]},{"pos":[27236,27237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27307,27313],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[27398,27399],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27527,27536],"content":"IsEnabled","needQuote":true,"nodes":[{"content":"IsEnabled","pos":[0,9]}]},{"pos":[27652,27653],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27723,27729],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[27814,27815],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27995,28002],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28452,28502],"content":"Subscribe(IObserver<KeyValuePair<String, Object>>)","needQuote":true,"nodes":[{"content":"Subscribe(IObserver&lt;KeyValuePair&lt;String, Object&gt;&gt;)","pos":[0,50],"source":"Subscribe(IObserver<KeyValuePair<String, Object>>)"}]},{"pos":[29308,29317],"content":"Subscribe","needQuote":true,"nodes":[{"content":"Subscribe","pos":[0,9]}]},{"pos":[29533,29534],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29609,29618],"content":"IObserver","needQuote":true,"nodes":[{"content":"IObserver","pos":[0,9]}]},{"pos":[29709,29710],"content":"<","needQuote":true,"nodes":[]},{"pos":[29808,29820],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[29937,29938],"content":"<","needQuote":true,"nodes":[]},{"pos":[30008,30014],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[30100,30101]},{"pos":[30179,30185],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30378,30379],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30499,30508],"content":"Subscribe","needQuote":true,"nodes":[{"content":"Subscribe","pos":[0,9]}]},{"pos":[30736,30737],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30812,30821],"content":"IObserver","needQuote":true,"nodes":[{"content":"IObserver","pos":[0,9]}]},{"content":"(Of","pos":[30913,30916]},{"pos":[31026,31038],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[31156,31159]},{"pos":[31241,31247],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[31333,31334]},{"pos":[31412,31418],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31503,31504],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31551,31552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31599,31600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31991,32030],"content":"IObserver<KeyValuePair<String, Object>>","needQuote":true,"nodes":[{"content":"IObserver&lt;KeyValuePair&lt;String, Object&gt;&gt;","pos":[0,39],"source":"IObserver<KeyValuePair<String, Object>>"}]},{"pos":[32471,32480],"content":"IObserver","needQuote":true,"nodes":[{"content":"IObserver","pos":[0,9]}]},{"pos":[32571,32572],"content":"<","needQuote":true,"nodes":[]},{"pos":[32670,32682],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"pos":[32799,32800],"content":"<","needQuote":true,"nodes":[]},{"pos":[32870,32876],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[32962,32963]},{"pos":[33041,33047],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33279,33288],"content":"IObserver","needQuote":true,"nodes":[{"content":"IObserver","pos":[0,9]}]},{"content":"(Of","pos":[33380,33383]},{"pos":[33493,33505],"content":"KeyValuePair","needQuote":true,"nodes":[{"content":"KeyValuePair","pos":[0,12]}]},{"content":"(Of","pos":[33623,33626]},{"pos":[33708,33714],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[33800,33801]},{"pos":[33879,33885],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33970,33971],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34018,34019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34245,34268],"content":"Subscribe(IObserver<T>)","needQuote":true,"nodes":[{"content":"Subscribe(IObserver&lt;T&gt;)","pos":[0,23],"source":"Subscribe(IObserver<T>)"}]},{"pos":[34652,34661],"content":"Subscribe","needQuote":true,"nodes":[{"content":"Subscribe","pos":[0,9]}]},{"pos":[34782,34783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34858,34867],"content":"IObserver","needQuote":true,"nodes":[{"content":"IObserver","pos":[0,9]}]},{"pos":[34958,34959],"content":"<","needQuote":true,"nodes":[]},{"pos":[35006,35007],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35108,35109],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35229,35238],"content":"Subscribe","needQuote":true,"nodes":[{"content":"Subscribe","pos":[0,9]}]},{"pos":[35365,35366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35441,35450],"content":"IObserver","needQuote":true,"nodes":[{"content":"IObserver","pos":[0,9]}]},{"content":"(Of","pos":[35542,35545]},{"pos":[35604,35605],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35652,35653],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35700,35701],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35860,35872],"content":"IObserver<T>","needQuote":true,"nodes":[{"content":"IObserver&lt;T&gt;","pos":[0,12],"source":"IObserver<T>"}]},{"pos":[36087,36096],"content":"IObserver","needQuote":true,"nodes":[{"content":"IObserver","pos":[0,9]}]},{"pos":[36166,36167],"content":"<","needQuote":true,"nodes":[]},{"pos":[36214,36215],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[36355,36364],"content":"IObserver","needQuote":true,"nodes":[{"content":"IObserver","pos":[0,9]}]},{"content":"(Of","pos":[36435,36438]},{"pos":[36497,36498],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[36545,36546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36714,36731],"content":"Predicate<String>","needQuote":true,"nodes":[{"content":"Predicate&lt;String&gt;","pos":[0,17],"source":"Predicate<String>"}]},{"pos":[36985,36994],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[37085,37086],"content":"<","needQuote":true,"nodes":[]},{"pos":[37156,37162],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[37340,37349],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[37441,37444]},{"pos":[37526,37532],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[37617,37618],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37756,37768],"content":"Predicate<T>","needQuote":true,"nodes":[{"content":"Predicate&lt;T&gt;","pos":[0,12],"source":"Predicate<T>"}]},{"pos":[37983,37992],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[38062,38063],"content":"<","needQuote":true,"nodes":[]},{"pos":[38110,38111],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[38251,38260],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[38331,38334]},{"pos":[38393,38394],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[38441,38442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38664,38685],"content":"Write(String, Object)","needQuote":true,"nodes":[{"content":"Write(String, Object)","pos":[0,21]}]},{"pos":[38930,38935],"content":"Write","needQuote":true,"nodes":[{"content":"Write","pos":[0,5]}]},{"pos":[39043,39044],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39114,39120],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[39206,39207]},{"pos":[39285,39291],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39376,39377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39515,39520],"content":"Write","needQuote":true,"nodes":[{"content":"Write","pos":[0,5]}]},{"pos":[39628,39629],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39699,39705],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[39791,39792]},{"pos":[39870,39876],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39961,39962],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Diagnostics.DiagnosticListener\n  commentId: T:System.Diagnostics.DiagnosticListener\n  id: DiagnosticListener\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.DiagnosticListener.#ctor(System.String)\n  - System.Diagnostics.DiagnosticListener.AllListeners\n  - System.Diagnostics.DiagnosticListener.Dispose\n  - System.Diagnostics.DiagnosticListener.IsEnabled(System.String)\n  - System.Diagnostics.DiagnosticListener.Name\n  - System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  - System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Predicate{System.String})\n  - System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)\n  langs:\n  - csharp\n  - vb\n  name: DiagnosticListener\n  nameWithType: DiagnosticListener\n  fullName: System.Diagnostics.DiagnosticListener\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DiagnosticListener\n    path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n    startLine: 38\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: 'public class DiagnosticListener : DiagnosticSource, IObservable<KeyValuePair<string, object>>, IDisposable'\n    content.vb: >-\n      Public Class DiagnosticListener\n          Inherits DiagnosticSource\n          Implements IObservable(Of KeyValuePair(Of String, Object)), IDisposable\n  inheritance:\n  - System.Object\n  - System.Diagnostics.DiagnosticSource\n  implements:\n  - System.IDisposable\n  - System.IObservable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n- uid: System.Diagnostics.DiagnosticListener.#ctor(System.String)\n  commentId: M:System.Diagnostics.DiagnosticListener.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.DiagnosticListener\n  langs:\n  - csharp\n  - vb\n  name: DiagnosticListener(String)\n  nameWithType: DiagnosticListener.DiagnosticListener(String)\n  fullName: System.Diagnostics.DiagnosticListener.DiagnosticListener(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n    startLine: 88\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: public DiagnosticListener(string name)\n    content.vb: Public Sub New(name As String)\n    parameters:\n    - id: name\n      type: System.String\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Diagnostics.DiagnosticListener.Name\n  commentId: P:System.Diagnostics.DiagnosticListener.Name\n  id: Name\n  parent: System.Diagnostics.DiagnosticListener\n  langs:\n  - csharp\n  - vb\n  name: Name\n  nameWithType: DiagnosticListener.Name\n  fullName: System.Diagnostics.DiagnosticListener.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n    startLine: 158\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: public string Name { get; }\n    content.vb: Public ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n- uid: System.Diagnostics.DiagnosticListener.AllListeners\n  commentId: P:System.Diagnostics.DiagnosticListener.AllListeners\n  id: AllListeners\n  parent: System.Diagnostics.DiagnosticListener\n  langs:\n  - csharp\n  - vb\n  name: AllListeners\n  nameWithType: DiagnosticListener.AllListeners\n  fullName: System.Diagnostics.DiagnosticListener.AllListeners\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AllListeners\n    path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n    startLine: 44\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: public static IObservable<DiagnosticListener> AllListeners { get; }\n    content.vb: Public Shared ReadOnly Property AllListeners As IObservable(Of DiagnosticListener)\n    parameters: []\n    return:\n      type: System.IObservable{System.Diagnostics.DiagnosticListener}\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n- uid: System.Diagnostics.DiagnosticListener.Dispose\n  commentId: M:System.Diagnostics.DiagnosticListener.Dispose\n  id: Dispose\n  parent: System.Diagnostics.DiagnosticListener\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  nameWithType: DiagnosticListener.Dispose()\n  fullName: System.Diagnostics.DiagnosticListener.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n    startLine: 116\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: public virtual void Dispose()\n    content.vb: Public Overridable Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n- uid: System.Diagnostics.DiagnosticListener.IsEnabled(System.String)\n  commentId: M:System.Diagnostics.DiagnosticListener.IsEnabled(System.String)\n  id: IsEnabled(System.String)\n  parent: System.Diagnostics.DiagnosticListener\n  langs:\n  - csharp\n  - vb\n  name: IsEnabled(String)\n  nameWithType: DiagnosticListener.IsEnabled(String)\n  fullName: System.Diagnostics.DiagnosticListener.IsEnabled(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEnabled\n    path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n    startLine: 175\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: public override bool IsEnabled(string name)\n    content.vb: Public Overrides Function IsEnabled(name As String) As Boolean\n    parameters:\n    - id: name\n      type: System.String\n    return:\n      type: System.Boolean\n  overridden: System.Diagnostics.DiagnosticSource.IsEnabled(System.String)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n- uid: System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  commentId: M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  id: Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  parent: System.Diagnostics.DiagnosticListener\n  langs:\n  - csharp\n  - vb\n  name: Subscribe(IObserver<KeyValuePair<String, Object>>)\n  nameWithType: DiagnosticListener.Subscribe(IObserver<KeyValuePair<String, Object>>)\n  fullName: System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<System.String, System.Object>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subscribe\n    path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n    startLine: 76\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: public IDisposable Subscribe(IObserver<KeyValuePair<string, object>> observer)\n    content.vb: Public Function Subscribe(observer As IObserver(Of KeyValuePair(Of String, Object))) As IDisposable\n    parameters:\n    - id: observer\n      type: System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n    return:\n      type: System.IDisposable\n  implements:\n  - System.IObservable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  nameWithType.vb: DiagnosticListener.Subscribe(IObserver(Of KeyValuePair(Of String, Object)))\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)))\n  name.vb: Subscribe(IObserver(Of KeyValuePair(Of String, Object)))\n- uid: System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Predicate{System.String})\n  commentId: M:System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Predicate{System.String})\n  id: Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Predicate{System.String})\n  parent: System.Diagnostics.DiagnosticListener\n  langs:\n  - csharp\n  - vb\n  name: Subscribe(IObserver<KeyValuePair<String, Object>>, Predicate<String>)\n  nameWithType: DiagnosticListener.Subscribe(IObserver<KeyValuePair<String, Object>>, Predicate<String>)\n  fullName: System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<System.String, System.Object>>, System.Predicate<System.String>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subscribe\n    path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n    startLine: 61\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: public virtual IDisposable Subscribe(IObserver<KeyValuePair<string, object>> observer, Predicate<string> isEnabled)\n    content.vb: Public Overridable Function Subscribe(observer As IObserver(Of KeyValuePair(Of String, Object)), isEnabled As Predicate(Of String)) As IDisposable\n    parameters:\n    - id: observer\n      type: System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n    - id: isEnabled\n      type: System.Predicate{System.String}\n    return:\n      type: System.IDisposable\n  nameWithType.vb: DiagnosticListener.Subscribe(IObserver(Of KeyValuePair(Of String, Object)), Predicate(Of String))\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Diagnostics.DiagnosticListener.Subscribe(System.IObserver(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)), System.Predicate(Of System.String))\n  name.vb: Subscribe(IObserver(Of KeyValuePair(Of String, Object)), Predicate(Of String))\n- uid: System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)\n  commentId: M:System.Diagnostics.DiagnosticListener.Write(System.String,System.Object)\n  id: Write(System.String,System.Object)\n  parent: System.Diagnostics.DiagnosticListener\n  langs:\n  - csharp\n  - vb\n  name: Write(String, Object)\n  nameWithType: DiagnosticListener.Write(String, Object)\n  fullName: System.Diagnostics.DiagnosticListener.Write(System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticListener.cs\n    startLine: 188\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: public override void Write(string name, object value)\n    content.vb: Public Overrides Sub Write(name As String, value As Object)\n    parameters:\n    - id: name\n      type: System.String\n    - id: value\n      type: System.Object\n  overridden: System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  nameWithType: System.Diagnostics\n  fullName: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n  commentId: T:System.Object\n- uid: System.Diagnostics.DiagnosticSource\n  parent: System.Diagnostics\n  isExternal: false\n  name: DiagnosticSource\n  nameWithType: DiagnosticSource\n  fullName: System.Diagnostics.DiagnosticSource\n  commentId: T:System.Diagnostics.DiagnosticSource\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n- uid: System.IObservable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n  parent: System\n  definition: System.IObservable`1\n  name: IObservable<KeyValuePair<String, Object>>\n  nameWithType: IObservable<KeyValuePair<String, Object>>\n  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>\n  nameWithType.vb: IObservable(Of KeyValuePair(Of String, Object))\n  fullname.vb: System.IObservable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))\n  name.vb: IObservable(Of KeyValuePair(Of String, Object))\n  spec.csharp:\n  - uid: System.IObservable`1\n    name: IObservable\n    nameWithType: IObservable\n    fullName: System.IObservable\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IObservable`1\n    name: IObservable\n    nameWithType: IObservable\n    fullName: System.IObservable\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: T:System.IObservable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n  commentId: N:System\n- uid: System.IObservable`1\n  isExternal: false\n  name: IObservable<T>\n  nameWithType: IObservable<T>\n  fullName: System.IObservable<T>\n  nameWithType.vb: IObservable(Of T)\n  fullname.vb: System.IObservable(Of T)\n  name.vb: IObservable(Of T)\n  spec.csharp:\n  - uid: System.IObservable`1\n    name: IObservable\n    nameWithType: IObservable\n    fullName: System.IObservable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IObservable`1\n    name: IObservable\n    nameWithType: IObservable\n    fullName: System.IObservable\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: T:System.IObservable`1\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n  commentId: T:System.String\n- uid: System.IObservable{System.Diagnostics.DiagnosticListener}\n  parent: System\n  definition: System.IObservable`1\n  name: IObservable<DiagnosticListener>\n  nameWithType: IObservable<DiagnosticListener>\n  fullName: System.IObservable<System.Diagnostics.DiagnosticListener>\n  nameWithType.vb: IObservable(Of DiagnosticListener)\n  fullname.vb: System.IObservable(Of System.Diagnostics.DiagnosticListener)\n  name.vb: IObservable(Of DiagnosticListener)\n  spec.csharp:\n  - uid: System.IObservable`1\n    name: IObservable\n    nameWithType: IObservable\n    fullName: System.IObservable\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.DiagnosticListener\n    name: DiagnosticListener\n    nameWithType: DiagnosticListener\n    fullName: System.Diagnostics.DiagnosticListener\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IObservable`1\n    name: IObservable\n    nameWithType: IObservable\n    fullName: System.IObservable\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Diagnostics.DiagnosticListener\n    name: DiagnosticListener\n    nameWithType: DiagnosticListener\n    fullName: System.Diagnostics.DiagnosticListener\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: T:System.IObservable{System.Diagnostics.DiagnosticListener}\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  nameWithType: IDisposable.Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    nameWithType: IDisposable.Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    nameWithType: IDisposable.Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Diagnostics.DiagnosticSource.IsEnabled(System.String)\n  parent: System.Diagnostics.DiagnosticSource\n  isExternal: true\n  name: IsEnabled(String)\n  nameWithType: DiagnosticSource.IsEnabled(String)\n  fullName: System.Diagnostics.DiagnosticSource.IsEnabled(System.String)\n  spec.csharp:\n  - uid: System.Diagnostics.DiagnosticSource.IsEnabled(System.String)\n    name: IsEnabled\n    nameWithType: DiagnosticSource.IsEnabled\n    fullName: System.Diagnostics.DiagnosticSource.IsEnabled\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Diagnostics.DiagnosticSource.IsEnabled(System.String)\n    name: IsEnabled\n    nameWithType: DiagnosticSource.IsEnabled\n    fullName: System.Diagnostics.DiagnosticSource.IsEnabled\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n- uid: System.IObservable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  parent: System.IObservable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n  definition: System.IObservable`1.Subscribe(System.IObserver{`0})\n  name: Subscribe(IObserver<KeyValuePair<String, Object>>)\n  nameWithType: IObservable<KeyValuePair<String, Object>>.Subscribe(IObserver<KeyValuePair<String, Object>>)\n  fullName: System.IObservable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Subscribe(System.IObserver<System.Collections.Generic.KeyValuePair<System.String, System.Object>>)\n  nameWithType.vb: IObservable(Of KeyValuePair(Of String, Object)).Subscribe(IObserver(Of KeyValuePair(Of String, Object)))\n  fullname.vb: System.IObservable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Subscribe(System.IObserver(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)))\n  name.vb: Subscribe(IObserver(Of KeyValuePair(Of String, Object)))\n  spec.csharp:\n  - uid: System.IObservable`1.Subscribe(System.IObserver{`0})\n    name: Subscribe\n    nameWithType: IObservable<KeyValuePair<String, Object>>.Subscribe\n    fullName: System.IObservable<System.Collections.Generic.KeyValuePair<System.String, System.Object>>.Subscribe\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.IObserver`1\n    name: IObserver\n    nameWithType: IObserver\n    fullName: System.IObserver\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.IObservable`1.Subscribe(System.IObserver{`0})\n    name: Subscribe\n    nameWithType: IObservable(Of KeyValuePair(Of String, Object)).Subscribe\n    fullName: System.IObservable(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object)).Subscribe\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.IObserver`1\n    name: IObserver\n    nameWithType: IObserver\n    fullName: System.IObserver\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  - name: )\n    nameWithType: )\n    fullName: )\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.IObservable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}.Subscribe(System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n- uid: System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n  parent: System\n  definition: System.IObserver`1\n  name: IObserver<KeyValuePair<String, Object>>\n  nameWithType: IObserver<KeyValuePair<String, Object>>\n  fullName: System.IObserver<System.Collections.Generic.KeyValuePair<System.String, System.Object>>\n  nameWithType.vb: IObserver(Of KeyValuePair(Of String, Object))\n  fullname.vb: System.IObserver(Of System.Collections.Generic.KeyValuePair(Of System.String, System.Object))\n  name.vb: IObserver(Of KeyValuePair(Of String, Object))\n  spec.csharp:\n  - uid: System.IObserver`1\n    name: IObserver\n    nameWithType: IObserver\n    fullName: System.IObserver\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IObserver`1\n    name: IObserver\n    nameWithType: IObserver\n    fullName: System.IObserver\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: T:System.IObserver{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n- uid: System.IObservable`1.Subscribe(System.IObserver{`0})\n  isExternal: true\n  name: Subscribe(IObserver<T>)\n  nameWithType: IObservable<T>.Subscribe(IObserver<T>)\n  fullName: System.IObservable<T>.Subscribe(System.IObserver<T>)\n  nameWithType.vb: IObservable(Of T).Subscribe(IObserver(Of T))\n  fullname.vb: System.IObservable(Of T).Subscribe(System.IObserver(Of T))\n  name.vb: Subscribe(IObserver(Of T))\n  spec.csharp:\n  - uid: System.IObservable`1.Subscribe(System.IObserver{`0})\n    name: Subscribe\n    nameWithType: IObservable<T>.Subscribe\n    fullName: System.IObservable<T>.Subscribe\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.IObserver`1\n    name: IObserver\n    nameWithType: IObserver\n    fullName: System.IObserver\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.IObservable`1.Subscribe(System.IObserver{`0})\n    name: Subscribe\n    nameWithType: IObservable(Of T).Subscribe\n    fullName: System.IObservable(Of T).Subscribe\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.IObserver`1\n    name: IObserver\n    nameWithType: IObserver\n    fullName: System.IObserver\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.IObservable`1.Subscribe(System.IObserver{`0})\n- uid: System.IObserver`1\n  isExternal: false\n  name: IObserver<T>\n  nameWithType: IObserver<T>\n  fullName: System.IObserver<T>\n  nameWithType.vb: IObserver(Of T)\n  fullname.vb: System.IObserver(Of T)\n  name.vb: IObserver(Of T)\n  spec.csharp:\n  - uid: System.IObserver`1\n    name: IObserver\n    nameWithType: IObserver\n    fullName: System.IObserver\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IObserver`1\n    name: IObserver\n    nameWithType: IObserver\n    fullName: System.IObserver\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: T:System.IObserver`1\n- uid: System.Predicate{System.String}\n  parent: System\n  definition: System.Predicate`1\n  name: Predicate<String>\n  nameWithType: Predicate<String>\n  fullName: System.Predicate<System.String>\n  nameWithType.vb: Predicate(Of String)\n  fullname.vb: System.Predicate(Of System.String)\n  name.vb: Predicate(Of String)\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    nameWithType: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Predicate`1\n    name: Predicate\n    nameWithType: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: T:System.Predicate{System.String}\n- uid: System.Predicate`1\n  isExternal: false\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n  nameWithType.vb: Predicate(Of T)\n  fullname.vb: System.Predicate(Of T)\n  name.vb: Predicate(Of T)\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    nameWithType: Predicate\n    fullName: System.Predicate\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Predicate`1\n    name: Predicate\n    nameWithType: Predicate\n    fullName: System.Predicate\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: T\n    nameWithType: T\n    fullName: T\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: T:System.Predicate`1\n- uid: System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)\n  parent: System.Diagnostics.DiagnosticSource\n  isExternal: true\n  name: Write(String, Object)\n  nameWithType: DiagnosticSource.Write(String, Object)\n  fullName: System.Diagnostics.DiagnosticSource.Write(System.String, System.Object)\n  spec.csharp:\n  - uid: System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)\n    name: Write\n    nameWithType: DiagnosticSource.Write\n    fullName: System.Diagnostics.DiagnosticSource.Write\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)\n    name: Write\n    nameWithType: DiagnosticSource.Write\n    fullName: System.Diagnostics.DiagnosticSource.Write\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)\n"}