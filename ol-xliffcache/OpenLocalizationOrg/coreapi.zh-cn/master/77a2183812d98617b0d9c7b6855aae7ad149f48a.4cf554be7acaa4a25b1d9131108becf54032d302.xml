{"nodes":[{"pos":[4011,4024],"content":"TypeConverter","needQuote":true,"nodes":[{"content":"TypeConverter","pos":[0,13]}]},{"pos":[5933,5948],"content":"TypeConverter()","needQuote":true,"nodes":[{"content":"TypeConverter()","pos":[0,15]}]},{"pos":[7178,7222],"content":"CanConvertFrom(ITypeDescriptorContext, Type)","needQuote":true,"nodes":[{"content":"CanConvertFrom(ITypeDescriptorContext, Type)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this converter can perform the conversion; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8683,8798],"source":"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9354,9374],"content":"CanConvertFrom(Type)","needQuote":true,"nodes":[{"content":"CanConvertFrom(Type)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this converter can perform the conversion; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10425,10540],"source":"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[11045,11087],"content":"CanConvertTo(ITypeDescriptorContext, Type)","needQuote":true,"nodes":[{"content":"CanConvertTo(ITypeDescriptorContext, Type)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this converter can perform the conversion; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12528,12643],"source":"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[13191,13209],"content":"CanConvertTo(Type)","needQuote":true,"nodes":[{"content":"CanConvertTo(Type)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this converter can perform the conversion; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14240,14355],"source":"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[14960,15016],"content":"ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)","needQuote":true,"nodes":[{"content":"ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[16948,16988],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[16989,16995],"source":" </p>\\n"},{"pos":[17560,17579],"content":"ConvertFrom(Object)","needQuote":true,"nodes":[{"content":"ConvertFrom(Object)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[18773,18813],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[18814,18820],"source":" </p>\\n"},{"pos":[19372,19430],"content":"ConvertFromInvariantString(ITypeDescriptorContext, String)","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString(ITypeDescriptorContext, String)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[21097,21137],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[21138,21144],"source":" </p>\\n"},{"pos":[21728,21762],"content":"ConvertFromInvariantString(String)","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString(String)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[23042,23082],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[23083,23089],"source":" </p>\\n"},{"pos":[23856,23918],"content":"ConvertFromString(ITypeDescriptorContext, CultureInfo, String)","needQuote":true,"nodes":[{"content":"ConvertFromString(ITypeDescriptorContext, CultureInfo, String)","pos":[0,62]}]},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[25868,25908],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[25909,25915],"source":" </p>\\n"},{"pos":[26611,26660],"content":"ConvertFromString(ITypeDescriptorContext, String)","needQuote":true,"nodes":[{"content":"ConvertFromString(ITypeDescriptorContext, String)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[28246,28286],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[28287,28293],"source":" </p>\\n"},{"pos":[28841,28866],"content":"ConvertFromString(String)","needQuote":true,"nodes":[{"content":"ConvertFromString(String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The text representation of the object to convert.","pos":[29663,29717],"source":"\\n<p>The text representation of the object to convert."},{"content":"&lt;/p&gt;\\n","pos":[29718,29724],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string cannot be converted into the appropriate object.","pos":[30026,30090],"source":"\\n<p>The string cannot be converted into the appropriate object."},{"content":"&lt;/p&gt;\\n","pos":[30091,30097],"source":" </p>\\n"},{"pos":[30739,30799],"content":"ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)","needQuote":true,"nodes":[{"content":"ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;destinationType&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[33021,33090],"source":"\\n<p>The <em>destinationType</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[33091,33097],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[33202,33242],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[33243,33249],"source":" </p>\\n"},{"pos":[33848,33871],"content":"ConvertTo(Object, Type)","needQuote":true,"nodes":[{"content":"ConvertTo(Object, Type)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;destinationType&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[35341,35410],"source":"\\n<p>The <em>destinationType</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[35411,35417],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[35522,35562],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[35563,35569],"source":" </p>\\n"},{"pos":[36119,36175],"content":"ConvertToInvariantString(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"ConvertToInvariantString(ITypeDescriptorContext, Object)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[38050,38090],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[38091,38097],"source":" </p>\\n"},{"pos":[38673,38705],"content":"ConvertToInvariantString(Object)","needQuote":true,"nodes":[{"content":"ConvertToInvariantString(Object)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[39970,40010],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[40011,40017],"source":" </p>\\n"},{"pos":[40776,40836],"content":"ConvertToString(ITypeDescriptorContext, CultureInfo, Object)","needQuote":true,"nodes":[{"content":"ConvertToString(ITypeDescriptorContext, CultureInfo, Object)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[42797,42837],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[42838,42844],"source":" </p>\\n"},{"pos":[43532,43579],"content":"ConvertToString(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"ConvertToString(ITypeDescriptorContext, Object)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[45173,45213],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[45214,45220],"source":" </p>\\n"},{"pos":[45760,45783],"content":"ConvertToString(Object)","needQuote":true,"nodes":[{"content":"ConvertToString(Object)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[46995,47035],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[47036,47042],"source":" </p>\\n"},{"pos":[47478,47505],"content":"CreateInstance(IDictionary)","needQuote":true,"nodes":[{"content":"CreateInstance(IDictionary)","pos":[0,27]}]},{"pos":[49661,49712],"content":"CreateInstance(ITypeDescriptorContext, IDictionary)","needQuote":true,"nodes":[{"content":"CreateInstance(ITypeDescriptorContext, IDictionary)","pos":[0,51]}]},{"pos":[52329,52360],"content":"GetConvertFromException(Object)","needQuote":true,"nodes":[{"content":"GetConvertFromException(Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;Automatically thrown by this method.","pos":[53732,53773],"source":"\\n<p>Automatically thrown by this method."},{"content":"&lt;/p&gt;\\n","pos":[53774,53780],"source":" </p>\\n"},{"pos":[54236,54271],"content":"GetConvertToException(Object, Type)","needQuote":true,"nodes":[{"content":"GetConvertToException(Object, Type)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;Automatically thrown by this method.","pos":[55918,55959],"source":"\\n<p>Automatically thrown by this method."},{"content":"&lt;/p&gt;\\n","pos":[55960,55966],"source":" </p>\\n"},{"pos":[56360,56388],"content":"GetCreateInstanceSupported()","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported()","pos":[0,28]}]},{"pos":[58176,58226],"content":"GetCreateInstanceSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[60606,60651],"content":"GetProperties(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"GetProperties(ITypeDescriptorContext, Object)","pos":[0,45]}]},{"pos":[63123,63181],"content":"GetProperties(ITypeDescriptorContext, Object, Attribute[])","needQuote":true,"nodes":[{"content":"GetProperties(ITypeDescriptorContext, Object, Attribute[])","pos":[0,58]}]},{"pos":[66182,66203],"content":"GetProperties(Object)","needQuote":true,"nodes":[{"content":"GetProperties(Object)","pos":[0,21]}]},{"pos":[67923,67947],"content":"GetPropertiesSupported()","needQuote":true,"nodes":[{"content":"GetPropertiesSupported()","pos":[0,24]}]},{"pos":[69469,69515],"content":"GetPropertiesSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetPropertiesSupported(ITypeDescriptorContext)","pos":[0,46]}]},{"pos":[71484,71503],"content":"GetStandardValues()","needQuote":true,"nodes":[{"content":"GetStandardValues()","pos":[0,19]}]},{"pos":[73091,73132],"content":"GetStandardValues(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValues(ITypeDescriptorContext)","pos":[0,41]}]},{"pos":[75462,75490],"content":"GetStandardValuesExclusive()","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive()","pos":[0,28]}]},{"pos":[77327,77377],"content":"GetStandardValuesExclusive(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[79695,79723],"content":"GetStandardValuesSupported()","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported()","pos":[0,28]}]},{"pos":[81324,81374],"content":"GetStandardValuesSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[83560,83599],"content":"IsValid(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"IsValid(ITypeDescriptorContext, Object)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified value is valid for this object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[84963,85081],"source":"\\n<p>\\n<strong>true</strong> if the specified value is valid for this object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[85716,85731],"content":"IsValid(Object)","needQuote":true,"nodes":[{"content":"IsValid(Object)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The object to test for validity.","pos":[86512,86549],"source":"\\n<p>The object to test for validity."},{"content":"&lt;/p&gt;\\n","pos":[86550,86556],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified value is valid for this object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[86617,86735],"source":"\\n<p>\\n<strong>true</strong> if the specified value is valid for this object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[87381,87435],"content":"SortProperties(PropertyDescriptorCollection, String[])","needQuote":true,"nodes":[{"content":"SortProperties(PropertyDescriptorCollection, String[])","pos":[0,54]}]},{"content":"\\n&lt;p&gt;An array of names in the order you want the properties to appear in the collection.","pos":[88659,88747],"source":"\\n<p>An array of names in the order you want the properties to appear in the collection."},{"content":"&lt;/p&gt;\\n","pos":[88748,88754],"source":" </p>\\n"},{"pos":[89759,89780],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[89956,89962],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90122,90132],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[90227,90235],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[90304,90305],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90332,90333],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90403,90411],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[90480,90481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90508,90509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90692,90706],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[90825,90831],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[90898,90899],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90949,90955],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91015,91016],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91099,91105],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[91172,91173],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91223,91229],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91289,91290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91504,91526],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[91674,91680],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[91747,91748],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91798,91804],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[91865,91866]},{"pos":[91921,91927],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91987,91988],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92085,92091],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[92158,92159],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92209,92215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[92276,92277]},{"pos":[92332,92338],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[92398,92399],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92644,92675],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[92841,92856],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[92932,92933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92983,92989],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[93050,93051]},{"pos":[93106,93112],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[93172,93173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93279,93294],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[93370,93371],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93421,93427],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[93488,93489]},{"pos":[93544,93550],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[93610,93611],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93841,93854],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[93955,93966],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[94038,94039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94066,94067],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94140,94151],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[94223,94224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94251,94252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94427,94436],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[94529,94536],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[94604,94605],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94632,94633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94702,94709],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[94777,94778],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94805,94806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94981,94998],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[95107,95122],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[95198,95199],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95226,95227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95304,95319],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[95395,95396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95423,95424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95569,95575],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[95752,95774],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[95995,95999],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[96139,96146],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[96327,96338],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"pos":[96516,96536],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[96709,96715],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[96889,96900],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[97072,97090],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[97260,97269],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[97475,97503],"content":"PropertyDescriptorCollection","needQuote":true,"nodes":[{"content":"PropertyDescriptorCollection","pos":[0,28]}]},{"pos":[97712,97723],"content":"Attribute[]","needQuote":true,"nodes":[{"content":"Attribute[]","pos":[0,11]}]},{"pos":[97863,97872],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"content":"[]","pos":[97936,97938]},{"pos":[98006,98015],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[98078,98080],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[98252,98263],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[98509,98547],"content":"TypeConverter.StandardValuesCollection","needQuote":true,"nodes":[{"content":"TypeConverter.StandardValuesCollection","pos":[0,38]}]},{"pos":[98783,98791],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[98919,98925],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[98986,98988]},{"pos":[99053,99059],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[99119,99121],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[99273,99294],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[99482,99503],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.ComponentModel.TypeConverter\n  commentId: T:System.ComponentModel.TypeConverter\n  id: TypeConverter\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.TypeConverter.#ctor\n  - System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  - System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n  - System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  - System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n  - System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n  - System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  - System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n  - System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n  - System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  - System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n  - System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  - System.ComponentModel.TypeConverter.GetProperties(System.Object)\n  - System.ComponentModel.TypeConverter.GetPropertiesSupported\n  - System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeConverter.GetStandardValues\n  - System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  - System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.IsValid(System.Object)\n  - System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n  langs:\n  - csharp\n  - vb\n  name: TypeConverter\n  fullName: System.ComponentModel.TypeConverter\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TypeConverter\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 13\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.</p>\\n\"\n  syntax:\n    content: public class TypeConverter\n    content.vb: Public Class TypeConverter\n  seealso:\n  - type: System.ComponentModel.TypeConverterAttribute\n    commentId: T:System.ComponentModel.TypeConverterAttribute\n  - type: System.ComponentModel.PropertyDescriptorCollection\n    commentId: T:System.ComponentModel.PropertyDescriptorCollection\n  - type: System.ComponentModel.TypeConverter.SimplePropertyDescriptor\n    commentId: T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor\n  - type: System.ComponentModel.TypeConverter.StandardValuesCollection\n    commentId: T:System.ComponentModel.TypeConverter.StandardValuesCollection\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: TypeConverter\n- uid: System.ComponentModel.TypeConverter.#ctor\n  commentId: M:System.ComponentModel.TypeConverter.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: TypeConverter()\n  fullName: System.ComponentModel.TypeConverter.TypeConverter()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs\n    startLine: 461\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.TypeConverter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: public TypeConverter()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.TypeConverter()\n- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  commentId: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  id: CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: CanConvertFrom(ITypeDescriptorContext, Type)\n  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanConvertFrom\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 29\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</p>\\n\"\n  syntax:\n    content: public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)\n    content.vb: Public Overridable Function CanConvertFrom(context As ITypeDescriptorContext, sourceType As Type) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: sourceType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type you want to convert from. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type)\n- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n  commentId: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n  id: CanConvertFrom(System.Type)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: CanConvertFrom(Type)\n  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanConvertFrom\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 19\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether this converter can convert an object of the given type to the type of this converter.</p>\\n\"\n  syntax:\n    content: public bool CanConvertFrom(Type sourceType)\n    content.vb: Public Function CanConvertFrom(sourceType As Type) As Boolean\n    parameters:\n    - id: sourceType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type you want to convert from. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.CanConvertFrom(Type)\n- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  commentId: M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  id: CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: CanConvertTo(ITypeDescriptorContext, Type)\n  fullName: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanConvertTo\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 47\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether this converter can convert the object to the specified type, using the specified context.</p>\\n\"\n  syntax:\n    content: public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)\n    content.vb: Public Overridable Function CanConvertTo(context As ITypeDescriptorContext, destinationType As Type) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: destinationType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type you want to convert to. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeConverter.CanConvertTo(ITypeDescriptorContext, Type)\n- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n  commentId: M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n  id: CanConvertTo(System.Type)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: CanConvertTo(Type)\n  fullName: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanConvertTo\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 38\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether this converter can convert the object to the specified type.</p>\\n\"\n  syntax:\n    content: public bool CanConvertTo(Type destinationType)\n    content.vb: Public Function CanConvertTo(destinationType As Type) As Boolean\n    parameters:\n    - id: destinationType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type you want to convert to. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.CanConvertTo(Type)\n- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  id: ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertFrom\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 64\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given object to the type of this converter, using the specified context and culture information.</p>\\n\"\n  syntax:\n    content: public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)\n    content.vb: Public Overridable Function ConvertFrom(context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"\\n<p>The <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the current culture. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted value.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)\n- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n  id: ConvertFrom(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertFrom(Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertFrom\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 56\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given value to the type of this converter.</p>\\n\"\n  syntax:\n    content: public object ConvertFrom(object value)\n    content.vb: Public Function ConvertFrom(value As Object) As Object\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted value.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.ConvertFrom(Object)\n- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  id: ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertFromInvariantString(ITypeDescriptorContext, String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertFromInvariantString\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 80\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given string to the type of this converter, using the invariant culture and the specified context.</p>\\n\"\n  syntax:\n    content: public object ConvertFromInvariantString(ITypeDescriptorContext context, string text)\n    content.vb: Public Function ConvertFromInvariantString(context As ITypeDescriptorContext, text As String) As Object\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: text\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted text.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String)\n- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n  id: ConvertFromInvariantString(System.String)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertFromInvariantString(String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertFromInvariantString\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 72\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given string to the type of this converter, using the invariant culture.</p>\\n\"\n  syntax:\n    content: public object ConvertFromInvariantString(string text)\n    content.vb: Public Function ConvertFromInvariantString(text As String) As Object\n    parameters:\n    - id: text\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted text.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.ConvertFromInvariantString(String)\n- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n  id: ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertFromString(ITypeDescriptorContext, CultureInfo, String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertFromString\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 104\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given text to an object, using the specified context and culture information.</p>\\n\"\n  syntax:\n    content: public object ConvertFromString(ITypeDescriptorContext context, CultureInfo culture, string text)\n    content.vb: Public Function ConvertFromString(context As ITypeDescriptorContext, culture As CultureInfo, text As String) As Object\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"\\n<p>A <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If <strong>null</strong> is passed, the current culture is assumed. </p>\\n\"\n    - id: text\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted text.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String)\n- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  id: ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertFromString(ITypeDescriptorContext, String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertFromString\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 96\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given text to an object, using the specified context.</p>\\n\"\n  syntax:\n    content: public object ConvertFromString(ITypeDescriptorContext context, string text)\n    content.vb: Public Function ConvertFromString(context As ITypeDescriptorContext, text As String) As Object\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: text\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted text.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext, String)\n- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n  id: ConvertFromString(System.String)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertFromString(String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertFromString\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 88\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the specified text to an object.</p>\\n\"\n  syntax:\n    content: public object ConvertFromString(string text)\n    content.vb: Public Function ConvertFromString(text As String) As Object\n    parameters:\n    - id: text\n      type: System.String\n      description: \"\\n<p>The text representation of the object to convert. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted text.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The string cannot be converted into the appropriate object. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.ConvertFromString(String)\n- uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  id: ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)\n  fullName: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertTo\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 122\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given value object to the specified type, using the specified context and culture information.</p>\\n\"\n  syntax:\n    content: public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)\n    content.vb: Public Overridable Function ConvertTo(context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"\\n<p>A <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If <strong>null</strong> is passed, the current culture is assumed. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    - id: destinationType\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert the <em>value</em> parameter to. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>destinationType</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)\n- uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n  id: ConvertTo(System.Object,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertTo(Object, Type)\n  fullName: System.ComponentModel.TypeConverter.ConvertTo(System.Object, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertTo\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 113\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given value object to the specified type, using the arguments.</p>\\n\"\n  syntax:\n    content: public object ConvertTo(object value, Type destinationType)\n    content.vb: Public Function ConvertTo(value As Object, destinationType As Type) As Object\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    - id: destinationType\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert the <em>value</em> parameter to. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>destinationType</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.ConvertTo(Object, Type)\n- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  id: ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertToInvariantString(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertToInvariantString\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 160\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the specified value to a culture-invariant string representation, using the specified context.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Security\", \"CA2122:DoNotIndirectlyExposeMethodsWithLinkDemands\")]\n\n      public string ConvertToInvariantString(ITypeDescriptorContext context, object value)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Security\", \"CA2122:DoNotIndirectlyExposeMethodsWithLinkDemands\")>\n\n      Public Function ConvertToInvariantString(context As ITypeDescriptorContext, value As Object) As String\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted value.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object)\n- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n  id: ConvertToInvariantString(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertToInvariantString(Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertToInvariantString\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 152\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the specified value to a culture-invariant string representation.</p>\\n\"\n  syntax:\n    content: public string ConvertToInvariantString(object value)\n    content.vb: Public Function ConvertToInvariantString(value As Object) As String\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted value.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.ConvertToInvariantString(Object)\n- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  id: ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertToString(ITypeDescriptorContext, CultureInfo, Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertToString\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 185\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given value to a string representation, using the specified context and culture information.</p>\\n\"\n  syntax:\n    content: public string ConvertToString(ITypeDescriptorContext context, CultureInfo culture, object value)\n    content.vb: Public Function ConvertToString(context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As String\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"\\n<p>A <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If <strong>null</strong> is passed, the current culture is assumed. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted value.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object)\n- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  id: ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertToString(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertToString\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 177\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given value to a string representation, using the given context.</p>\\n\"\n  syntax:\n    content: public string ConvertToString(ITypeDescriptorContext context, object value)\n    content.vb: Public Function ConvertToString(context As ITypeDescriptorContext, value As Object) As String\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted value.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext, Object)\n- uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n  id: ConvertToString(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertToString(Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertToString\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 169\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the specified value to a string representation.</p>\\n\"\n  syntax:\n    content: public string ConvertToString(object value)\n    content.vb: Public Function ConvertToString(value As Object) As String\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted value.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.ConvertToString(Object)\n- uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n  commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n  id: CreateInstance(System.Collections.IDictionary)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: CreateInstance(IDictionary)\n  fullName: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateInstance\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 193\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Re-creates an <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> given a set of property values for the object.</p>\\n\"\n  syntax:\n    content: public object CreateInstance(IDictionary propertyValues)\n    content.vb: Public Function CreateInstance(propertyValues As IDictionary) As Object\n    parameters:\n    - id: propertyValues\n      type: System.Collections.IDictionary\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a dictionary of new property values. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the given <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <strong>null</strong> if the object cannot be created. This method always returns <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.CreateInstance(IDictionary)\n- uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  id: CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: CreateInstance(ITypeDescriptorContext, IDictionary)\n  fullName: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateInstance\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 201\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Creates an instance of the type that this <xref href=\\\"System.ComponentModel.TypeConverter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is associated with, using the specified context, given a set of property values for the object.</p>\\n\"\n  syntax:\n    content: public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)\n    content.vb: Public Overridable Function CreateInstance(context As ITypeDescriptorContext, propertyValues As IDictionary) As Object\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: propertyValues\n      type: System.Collections.IDictionary\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of new property values. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the given <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <strong>null</strong> if the object cannot be created. This method always returns <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary)\n- uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n  commentId: M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n  id: GetConvertFromException(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetConvertFromException(Object)\n  fullName: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetConvertFromException\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 209\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns an exception to throw when a conversion cannot be performed.</p>\\n\"\n  syntax:\n    content: protected Exception GetConvertFromException(object value)\n    content.vb: Protected Function GetConvertFromException(value As Object) As Exception\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert, or <strong>null</strong> if the object is not available. </p>\\n\"\n    return:\n      type: System.Exception\n      description: \"\\n<p>An <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the exception to throw when a conversion cannot be performed.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Automatically thrown by this method. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TypeConverter.GetConvertFromException(Object)\n- uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n  commentId: M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n  id: GetConvertToException(System.Object,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetConvertToException(Object, Type)\n  fullName: System.ComponentModel.TypeConverter.GetConvertToException(System.Object, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetConvertToException\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 229\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns an exception to throw when a conversion cannot be performed.</p>\\n\"\n  syntax:\n    content: protected Exception GetConvertToException(object value, Type destinationType)\n    content.vb: Protected Function GetConvertToException(value As Object, destinationType As Type) As Exception\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert, or <strong>null</strong> if the object is not available. </p>\\n\"\n    - id: destinationType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type the conversion was trying to convert to. </p>\\n\"\n    return:\n      type: System.Exception\n      description: \"\\n<p>An <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the exception to throw when a conversion cannot be performed.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Automatically thrown by this method. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TypeConverter.GetConvertToException(Object, Type)\n- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  id: GetCreateInstanceSupported\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetCreateInstanceSupported()\n  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCreateInstanceSupported\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 251\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether changing a value on this object requires a call to the <xref href=\\\"System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to create a new value.</p>\\n\"\n  syntax:\n    content: public bool GetCreateInstanceSupported()\n    content.vb: Public Function GetCreateInstanceSupported As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if changing a property on this object requires a call to <xref href=\\\"System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a new value; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.GetCreateInstanceSupported()\n- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  id: GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetCreateInstanceSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCreateInstanceSupported\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 263\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether changing a value on this object requires a call to <xref href=\\\"System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a new value, using the specified context.</p>\\n\"\n  syntax:\n    content: public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context)\n    content.vb: Public Overridable Function GetCreateInstanceSupported(context As ITypeDescriptorContext) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if changing a property on this object requires a call to <xref href=\\\"System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a new value; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetProperties(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperties\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 283\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns a collection of properties for the type of array specified by the value parameter, using the specified context.</p>\\n\"\n  syntax:\n    content: public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value)\n    content.vb: Public Function GetProperties(context As ITypeDescriptorContext, value As Object) As PropertyDescriptorCollection\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the type of array for which to get properties. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the properties that are exposed for this data type, or <strong>null</strong> if there are no properties.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext, Object)\n- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetProperties(ITypeDescriptorContext, Object, Attribute[])\n  fullName: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperties\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 294\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</p>\\n\"\n  syntax:\n    content: public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)\n    content.vb: Public Overridable Function GetProperties(context As ITypeDescriptorContext, value As Object, attributes As Attribute()) As PropertyDescriptorCollection\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the type of array for which to get properties. </p>\\n\"\n    - id: attributes\n      type: System.Attribute[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used as a filter. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the properties that are exposed for this data type, or <strong>null</strong> if there are no properties.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute())\n  name.vb: GetProperties(ITypeDescriptorContext, Object, Attribute())\n  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[])\n  nameWithType.vb: TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute())\n- uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)\n  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.Object)\n  id: GetProperties(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetProperties(Object)\n  fullName: System.ComponentModel.TypeConverter.GetProperties(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperties\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 272\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns a collection of properties for the type of array specified by the value parameter.</p>\\n\"\n  syntax:\n    content: public PropertyDescriptorCollection GetProperties(object value)\n    content.vb: Public Function GetProperties(value As Object) As PropertyDescriptorCollection\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the type of array for which to get properties. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the properties that are exposed for this data type, or <strong>null</strong> if there are no properties.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.GetProperties(Object)\n- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported\n  commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported\n  id: GetPropertiesSupported\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetPropertiesSupported()\n  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetPropertiesSupported\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 303\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether this object supports properties.</p>\\n\"\n  syntax:\n    content: public bool GetPropertiesSupported()\n    content.vb: Public Function GetPropertiesSupported As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <xref href=\\\"System.ComponentModel.TypeConverter.GetProperties(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be called to find the properties of this object; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.GetPropertiesSupported()\n- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  id: GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetPropertiesSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetPropertiesSupported\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 311\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether this object supports properties, using the specified context.</p>\\n\"\n  syntax:\n    content: public virtual bool GetPropertiesSupported(ITypeDescriptorContext context)\n    content.vb: Public Overridable Function GetPropertiesSupported(context As ITypeDescriptorContext) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <xref href=\\\"System.ComponentModel.TypeConverter.GetProperties(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be called to find the properties of this object; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.GetStandardValues\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValues\n  id: GetStandardValues\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetStandardValues()\n  fullName: System.ComponentModel.TypeConverter.GetStandardValues()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStandardValues\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 319\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns a collection of standard values from the default context for the data type this type converter is designed for.</p>\\n\"\n  syntax:\n    content: public ICollection GetStandardValues()\n    content.vb: Public Function GetStandardValues As ICollection\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.TypeConverter.StandardValuesCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing a standard set of valid values, or <strong>null</strong> if the data type does not support a standard set of values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.GetStandardValues()\n- uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  id: GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetStandardValues(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStandardValues\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 327\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</p>\\n\"\n  syntax:\n    content: public virtual TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)\n    content.vb: Public Overridable Function GetStandardValues(context As ITypeDescriptorContext) As TypeConverter.StandardValuesCollection\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.ComponentModel.TypeConverter.StandardValuesCollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.TypeConverter.StandardValuesCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that holds a standard set of valid values, or <strong>null</strong> if the data type does not support a standard set of values.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeConverter.GetStandardValues(ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  id: GetStandardValuesExclusive\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetStandardValuesExclusive()\n  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStandardValuesExclusive\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 338\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether the collection of standard values returned from <xref href=\\\"System.ComponentModel.TypeConverter.GetStandardValues\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is an exclusive list.</p>\\n\"\n  syntax:\n    content: public bool GetStandardValuesExclusive()\n    content.vb: Public Function GetStandardValuesExclusive As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.ComponentModel.TypeConverter.StandardValuesCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returned from <xref href=\\\"System.ComponentModel.TypeConverter.GetStandardValues\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is an exhaustive list of possible values; <strong>false</strong> if other values are possible.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.GetStandardValuesExclusive()\n- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  id: GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetStandardValuesExclusive(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStandardValuesExclusive\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 350\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether the collection of standard values returned from <xref href=\\\"System.ComponentModel.TypeConverter.GetStandardValues\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is an exclusive list of possible values, using the specified context.</p>\\n\"\n  syntax:\n    content: public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context)\n    content.vb: Public Overridable Function GetStandardValuesExclusive(context As ITypeDescriptorContext) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.ComponentModel.TypeConverter.StandardValuesCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returned from <xref href=\\\"System.ComponentModel.TypeConverter.GetStandardValues\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is an exhaustive list of possible values; <strong>false</strong> if other values are possible.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  id: GetStandardValuesSupported\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetStandardValuesSupported()\n  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStandardValuesSupported\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 361\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether this object supports a standard set of values that can be picked from a list.</p>\\n\"\n  syntax:\n    content: public bool GetStandardValuesSupported()\n    content.vb: Public Function GetStandardValuesSupported As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <xref href=\\\"System.ComponentModel.TypeConverter.GetStandardValues\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be called to find a common set of values the object supports; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.GetStandardValuesSupported()\n- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  id: GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: GetStandardValuesSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStandardValuesSupported\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 372\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</p>\\n\"\n  syntax:\n    content: public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context)\n    content.vb: Public Overridable Function GetStandardValuesSupported(context As ITypeDescriptorContext) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <xref href=\\\"System.ComponentModel.TypeConverter.GetStandardValues\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be called to find a common set of values the object supports; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  commentId: M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  id: IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: IsValid(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsValid\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 388\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether the given value object is valid for this type and for the specified context.</p>\\n\"\n  syntax:\n    content: public virtual bool IsValid(ITypeDescriptorContext context, object value)\n    content.vb: Public Overridable Function IsValid(context As ITypeDescriptorContext, value As Object) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to test for validity. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified value is valid for this object; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ITypeDescriptorContext\n    commentId: T:System.ComponentModel.ITypeDescriptorContext\n  - type: System.ComponentModel.EnumConverter\n    commentId: T:System.ComponentModel.EnumConverter\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeConverter.IsValid(ITypeDescriptorContext, Object)\n- uid: System.ComponentModel.TypeConverter.IsValid(System.Object)\n  commentId: M:System.ComponentModel.TypeConverter.IsValid(System.Object)\n  id: IsValid(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: IsValid(Object)\n  fullName: System.ComponentModel.TypeConverter.IsValid(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsValid\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 380\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether the given value object is valid for this type.</p>\\n\"\n  syntax:\n    content: public bool IsValid(object value)\n    content.vb: Public Function IsValid(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to test for validity. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified value is valid for this object; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EnumConverter\n    commentId: T:System.ComponentModel.EnumConverter\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeConverter.IsValid(Object)\n- uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n  commentId: M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n  id: SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n  parent: System.ComponentModel.TypeConverter\n  langs:\n  - csharp\n  - vb\n  name: SortProperties(PropertyDescriptorCollection, String[])\n  fullName: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SortProperties\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs\n    startLine: 417\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Sorts a collection of properties.</p>\\n\"\n  syntax:\n    content: protected PropertyDescriptorCollection SortProperties(PropertyDescriptorCollection props, string[] names)\n    content.vb: Protected Function SortProperties(props As PropertyDescriptorCollection, names As String()) As PropertyDescriptorCollection\n    parameters:\n    - id: props\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the properties to sort. </p>\\n\"\n    - id: names\n      type: System.String[]\n      description: \"\\n<p>An array of names in the order you want the properties to appear in the collection. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the sorted properties.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptorCollection\n    commentId: T:System.ComponentModel.PropertyDescriptorCollection\n  - type: System.ComponentModel.TypeConverter\n    commentId: T:System.ComponentModel.TypeConverter\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String())\n  name.vb: SortProperties(PropertyDescriptorCollection, String())\n  nameWithType: TypeConverter.SortProperties(PropertyDescriptorCollection, String[])\n  nameWithType.vb: TypeConverter.SortProperties(PropertyDescriptorCollection, String())\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ComponentModel.ITypeDescriptorContext\n  parent: System.ComponentModel\n  isExternal: false\n  name: ITypeDescriptorContext\n  fullName: System.ComponentModel.ITypeDescriptorContext\n  nameWithType: ITypeDescriptorContext\n  commentId: T:System.ComponentModel.ITypeDescriptorContext\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  fullName: System.Globalization.CultureInfo\n  nameWithType: CultureInfo\n  commentId: T:System.Globalization.CultureInfo\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  nameWithType: IDictionary\n  commentId: T:System.Collections.IDictionary\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  fullName: System.Exception\n  nameWithType: Exception\n  commentId: T:System.Exception\n- uid: System.ComponentModel.PropertyDescriptorCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptorCollection\n  fullName: System.ComponentModel.PropertyDescriptorCollection\n  nameWithType: PropertyDescriptorCollection\n  commentId: T:System.ComponentModel.PropertyDescriptorCollection\n- uid: System.Attribute[]\n  name: Attribute[]\n  fullName: System.Attribute[]\n  fullname.vb: System.Attribute()\n  name.vb: Attribute()\n  spec.csharp:\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Attribute[]\n  nameWithType.vb: Attribute()\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.ComponentModel.TypeConverter.StandardValuesCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: TypeConverter.StandardValuesCollection\n  fullName: System.ComponentModel.TypeConverter.StandardValuesCollection\n  nameWithType: TypeConverter.StandardValuesCollection\n  commentId: T:System.ComponentModel.TypeConverter.StandardValuesCollection\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}