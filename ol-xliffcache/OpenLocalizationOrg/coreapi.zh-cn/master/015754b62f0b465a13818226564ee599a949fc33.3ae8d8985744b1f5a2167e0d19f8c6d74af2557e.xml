{"nodes":[{"pos":[1956,1973],"content":"NullableConverter","needQuote":true,"nodes":[{"content":"NullableConverter","pos":[0,17]}]},{"pos":[5782,5805],"content":"NullableConverter(Type)","needQuote":true,"nodes":[{"content":"NullableConverter(Type)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The specified nullable type.&lt;/p&gt;\\n","pos":[6662,6701],"source":"\\n<p>The specified nullable type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is not a nullable type.&lt;/p&gt;\\n","pos":[6812,6862],"source":"\\n<p>\\n<em>type</em> is not a nullable type.</p>\\n"},{"pos":[7212,7224],"content":"NullableType","needQuote":true,"nodes":[{"content":"NullableType","pos":[0,12]}]},{"pos":[8451,8465],"content":"UnderlyingType","needQuote":true,"nodes":[{"content":"UnderlyingType","pos":[0,14]}]},{"pos":[9733,9756],"content":"UnderlyingTypeConverter","needQuote":true,"nodes":[{"content":"UnderlyingTypeConverter","pos":[0,23]}]},{"pos":[11302,11346],"content":"CanConvertFrom(ITypeDescriptorContext, Type)","needQuote":true,"nodes":[{"content":"CanConvertFrom(ITypeDescriptorContext, Type)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this converter can perform the conversion; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12817,12932],"source":"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[13627,13669],"content":"CanConvertTo(ITypeDescriptorContext, Type)","needQuote":true,"nodes":[{"content":"CanConvertTo(ITypeDescriptorContext, Type)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this converter can perform the conversion; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15119,15234],"source":"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[16027,16083],"content":"ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)","needQuote":true,"nodes":[{"content":"ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[18178,18218],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[18219,18225],"source":" </p>\\n"},{"pos":[18941,19001],"content":"ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)","needQuote":true,"nodes":[{"content":"ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destinationType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21350,21413],"source":"\\n<p>\\n<em>destinationType</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The conversion cannot be performed.","pos":[21518,21558],"source":"\\n<p>The conversion cannot be performed."},{"content":"&lt;/p&gt;\\n","pos":[21559,21565],"source":" </p>\\n"},{"pos":[22216,22267],"content":"CreateInstance(ITypeDescriptorContext, IDictionary)","needQuote":true,"nodes":[{"content":"CreateInstance(ITypeDescriptorContext, IDictionary)","pos":[0,51]}]},{"pos":[25231,25281],"content":"GetCreateInstanceSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[27994,28052],"content":"GetProperties(ITypeDescriptorContext, Object, Attribute[])","needQuote":true,"nodes":[{"content":"GetProperties(ITypeDescriptorContext, Object, Attribute[])","pos":[0,58]}]},{"pos":[31457,31503],"content":"GetPropertiesSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetPropertiesSupported(ITypeDescriptorContext)","pos":[0,46]}]},{"pos":[33874,33915],"content":"GetStandardValues(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValues(ITypeDescriptorContext)","pos":[0,41]}]},{"pos":[36632,36682],"content":"GetStandardValuesExclusive(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[39414,39464],"content":"GetStandardValuesSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[41926,41965],"content":"IsValid(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"IsValid(ITypeDescriptorContext, Object)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified value is valid for this object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[43340,43458],"source":"\\n<p>\\n<strong>true</strong> if the specified value is valid for this object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[44052,44073],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[44249,44255],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44437,44450],"content":"TypeConverter","needQuote":true,"nodes":[{"content":"TypeConverter","pos":[0,13]}]},{"pos":[44724,44744],"content":"CanConvertFrom(Type)","needQuote":true,"nodes":[{"content":"CanConvertFrom(Type)","pos":[0,20]}]},{"pos":[44919,44933],"content":"CanConvertFrom","needQuote":true,"nodes":[{"content":"CanConvertFrom","pos":[0,14]}]},{"pos":[45009,45010],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45058,45062],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[45120,45121],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45232,45246],"content":"CanConvertFrom","needQuote":true,"nodes":[{"content":"CanConvertFrom","pos":[0,14]}]},{"pos":[45322,45323],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45371,45375],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[45433,45434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45723,45741],"content":"CanConvertTo(Type)","needQuote":true,"nodes":[{"content":"CanConvertTo(Type)","pos":[0,18]}]},{"pos":[45912,45924],"content":"CanConvertTo","needQuote":true,"nodes":[{"content":"CanConvertTo","pos":[0,12]}]},{"pos":[45998,45999],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46047,46051],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[46109,46110],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46219,46231],"content":"CanConvertTo","needQuote":true,"nodes":[{"content":"CanConvertTo","pos":[0,12]}]},{"pos":[46305,46306],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46354,46358],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[46416,46417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46703,46722],"content":"ConvertFrom(Object)","needQuote":true,"nodes":[{"content":"ConvertFrom(Object)","pos":[0,19]}]},{"pos":[46895,46906],"content":"ConvertFrom","needQuote":true,"nodes":[{"content":"ConvertFrom","pos":[0,11]}]},{"pos":[46979,46980],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47030,47036],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47096,47097],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47207,47218],"content":"ConvertFrom","needQuote":true,"nodes":[{"content":"ConvertFrom","pos":[0,11]}]},{"pos":[47291,47292],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47342,47348],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47408,47409],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47757,47815],"content":"ConvertFromInvariantString(ITypeDescriptorContext, String)","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString(ITypeDescriptorContext, String)","pos":[0,58]}]},{"pos":[48109,48135],"content":"ConvertFromInvariantString","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString","pos":[0,26]}]},{"pos":[48223,48224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48305,48327],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[48398,48399]},{"pos":[48454,48460],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[48520,48521],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48691,48717],"content":"ConvertFromInvariantString","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString","pos":[0,26]}]},{"pos":[48805,48806],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48887,48909],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[48980,48981]},{"pos":[49036,49042],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[49102,49103],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49505,49539],"content":"ConvertFromInvariantString(String)","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString(String)","pos":[0,34]}]},{"pos":[49742,49768],"content":"ConvertFromInvariantString","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString","pos":[0,26]}]},{"pos":[49856,49857],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49907,49913],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[49973,49974],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50099,50125],"content":"ConvertFromInvariantString","needQuote":true,"nodes":[{"content":"ConvertFromInvariantString","pos":[0,26]}]},{"pos":[50213,50214],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50264,50270],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[50330,50331],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50733,50795],"content":"ConvertFromString(ITypeDescriptorContext, CultureInfo, String)","needQuote":true,"nodes":[{"content":"ConvertFromString(ITypeDescriptorContext, CultureInfo, String)","pos":[0,62]}]},{"pos":[51138,51155],"content":"ConvertFromString","needQuote":true,"nodes":[{"content":"ConvertFromString","pos":[0,17]}]},{"pos":[51234,51235],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51316,51338],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[51409,51410]},{"pos":[51484,51495],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[51575,51576]},{"pos":[51631,51637],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[51697,51698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51892,51909],"content":"ConvertFromString","needQuote":true,"nodes":[{"content":"ConvertFromString","pos":[0,17]}]},{"pos":[51988,51989],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52070,52092],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[52163,52164]},{"pos":[52238,52249],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[52329,52330]},{"pos":[52385,52391],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[52451,52452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52918,52967],"content":"ConvertFromString(ITypeDescriptorContext, String)","needQuote":true,"nodes":[{"content":"ConvertFromString(ITypeDescriptorContext, String)","pos":[0,49]}]},{"pos":[53243,53260],"content":"ConvertFromString","needQuote":true,"nodes":[{"content":"ConvertFromString","pos":[0,17]}]},{"pos":[53339,53340],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53421,53443],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[53514,53515]},{"pos":[53570,53576],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[53636,53637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53798,53815],"content":"ConvertFromString","needQuote":true,"nodes":[{"content":"ConvertFromString","pos":[0,17]}]},{"pos":[53894,53895],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53976,53998],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[54069,54070]},{"pos":[54125,54131],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[54191,54192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54567,54592],"content":"ConvertFromString(String)","needQuote":true,"nodes":[{"content":"ConvertFromString(String)","pos":[0,25]}]},{"pos":[54777,54794],"content":"ConvertFromString","needQuote":true,"nodes":[{"content":"ConvertFromString","pos":[0,17]}]},{"pos":[54873,54874],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54924,54930],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[54990,54991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55107,55124],"content":"ConvertFromString","needQuote":true,"nodes":[{"content":"ConvertFromString","pos":[0,17]}]},{"pos":[55203,55204],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55254,55260],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[55320,55321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55631,55654],"content":"ConvertTo(Object, Type)","needQuote":true,"nodes":[{"content":"ConvertTo(Object, Type)","pos":[0,23]}]},{"pos":[55848,55857],"content":"ConvertTo","needQuote":true,"nodes":[{"content":"ConvertTo","pos":[0,9]}]},{"pos":[55928,55929],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55979,55985],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[56046,56047]},{"pos":[56100,56104],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[56162,56163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56283,56292],"content":"ConvertTo","needQuote":true,"nodes":[{"content":"ConvertTo","pos":[0,9]}]},{"pos":[56363,56364],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56414,56420],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[56481,56482]},{"pos":[56535,56539],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[56597,56598],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56958,57014],"content":"ConvertToInvariantString(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"ConvertToInvariantString(ITypeDescriptorContext, Object)","pos":[0,56]}]},{"pos":[57304,57328],"content":"ConvertToInvariantString","needQuote":true,"nodes":[{"content":"ConvertToInvariantString","pos":[0,24]}]},{"pos":[57414,57415],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57496,57518],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[57589,57590]},{"pos":[57645,57651],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[57711,57712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57880,57904],"content":"ConvertToInvariantString","needQuote":true,"nodes":[{"content":"ConvertToInvariantString","pos":[0,24]}]},{"pos":[57990,57991],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58072,58094],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[58165,58166]},{"pos":[58221,58227],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58287,58288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58684,58716],"content":"ConvertToInvariantString(Object)","needQuote":true,"nodes":[{"content":"ConvertToInvariantString(Object)","pos":[0,32]}]},{"pos":[58915,58939],"content":"ConvertToInvariantString","needQuote":true,"nodes":[{"content":"ConvertToInvariantString","pos":[0,24]}]},{"pos":[59025,59026],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59076,59082],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59142,59143],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59266,59290],"content":"ConvertToInvariantString","needQuote":true,"nodes":[{"content":"ConvertToInvariantString","pos":[0,24]}]},{"pos":[59376,59377],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59427,59433],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59493,59494],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59890,59950],"content":"ConvertToString(ITypeDescriptorContext, CultureInfo, Object)","needQuote":true,"nodes":[{"content":"ConvertToString(ITypeDescriptorContext, CultureInfo, Object)","pos":[0,60]}]},{"pos":[60289,60304],"content":"ConvertToString","needQuote":true,"nodes":[{"content":"ConvertToString","pos":[0,15]}]},{"pos":[60381,60382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60463,60485],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[60556,60557]},{"pos":[60631,60642],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[60722,60723]},{"pos":[60778,60784],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60844,60845],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61037,61052],"content":"ConvertToString","needQuote":true,"nodes":[{"content":"ConvertToString","pos":[0,15]}]},{"pos":[61129,61130],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61211,61233],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[61304,61305]},{"pos":[61379,61390],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[61470,61471]},{"pos":[61526,61532],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61592,61593],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62053,62100],"content":"ConvertToString(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"ConvertToString(ITypeDescriptorContext, Object)","pos":[0,47]}]},{"pos":[62372,62387],"content":"ConvertToString","needQuote":true,"nodes":[{"content":"ConvertToString","pos":[0,15]}]},{"pos":[62464,62465],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62546,62568],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[62639,62640]},{"pos":[62695,62701],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62761,62762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62921,62936],"content":"ConvertToString","needQuote":true,"nodes":[{"content":"ConvertToString","pos":[0,15]}]},{"pos":[63013,63014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63095,63117],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[63188,63189]},{"pos":[63244,63250],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63310,63311],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63680,63703],"content":"ConvertToString(Object)","needQuote":true,"nodes":[{"content":"ConvertToString(Object)","pos":[0,23]}]},{"pos":[63884,63899],"content":"ConvertToString","needQuote":true,"nodes":[{"content":"ConvertToString","pos":[0,15]}]},{"pos":[63976,63977],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64027,64033],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64093,64094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64208,64223],"content":"ConvertToString","needQuote":true,"nodes":[{"content":"ConvertToString","pos":[0,15]}]},{"pos":[64300,64301],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64351,64357],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64417,64418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64734,64761],"content":"CreateInstance(IDictionary)","needQuote":true,"nodes":[{"content":"CreateInstance(IDictionary)","pos":[0,27]}]},{"pos":[64974,64988],"content":"CreateInstance","needQuote":true,"nodes":[{"content":"CreateInstance","pos":[0,14]}]},{"pos":[65064,65065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65132,65143],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[65220,65221],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65351,65365],"content":"CreateInstance","needQuote":true,"nodes":[{"content":"CreateInstance","pos":[0,14]}]},{"pos":[65441,65442],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65509,65520],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[65597,65598],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65926,65957],"content":"GetConvertFromException(Object)","needQuote":true,"nodes":[{"content":"GetConvertFromException(Object)","pos":[0,31]}]},{"pos":[66154,66177],"content":"GetConvertFromException","needQuote":true,"nodes":[{"content":"GetConvertFromException","pos":[0,23]}]},{"pos":[66262,66263],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66313,66319],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66379,66380],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66502,66525],"content":"GetConvertFromException","needQuote":true,"nodes":[{"content":"GetConvertFromException","pos":[0,23]}]},{"pos":[66610,66611],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66661,66667],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66727,66728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67062,67097],"content":"GetConvertToException(Object, Type)","needQuote":true,"nodes":[{"content":"GetConvertToException(Object, Type)","pos":[0,35]}]},{"pos":[67315,67336],"content":"GetConvertToException","needQuote":true,"nodes":[{"content":"GetConvertToException","pos":[0,21]}]},{"pos":[67419,67420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67470,67476],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67537,67538]},{"pos":[67591,67595],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[67653,67654],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67786,67807],"content":"GetConvertToException","needQuote":true,"nodes":[{"content":"GetConvertToException","pos":[0,21]}]},{"pos":[67890,67891],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67941,67947],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[68008,68009]},{"pos":[68062,68066],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[68124,68125],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68452,68480],"content":"GetCreateInstanceSupported()","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported()","pos":[0,28]}]},{"pos":[68655,68681],"content":"GetCreateInstanceSupported","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported","pos":[0,26]}]},{"pos":[68769,68770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68797,68798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68908,68934],"content":"GetCreateInstanceSupported","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported","pos":[0,26]}]},{"pos":[69022,69023],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69050,69051],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69395,69440],"content":"GetProperties(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"GetProperties(ITypeDescriptorContext, Object)","pos":[0,45]}]},{"pos":[69708,69721],"content":"GetProperties","needQuote":true,"nodes":[{"content":"GetProperties","pos":[0,13]}]},{"pos":[69796,69797],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69878,69900],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[69971,69972]},{"pos":[70027,70033],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70093,70094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70251,70264],"content":"GetProperties","needQuote":true,"nodes":[{"content":"GetProperties","pos":[0,13]}]},{"pos":[70339,70340],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70421,70443],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[70514,70515]},{"pos":[70570,70576],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70636,70637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71000,71021],"content":"GetProperties(Object)","needQuote":true,"nodes":[{"content":"GetProperties(Object)","pos":[0,21]}]},{"pos":[71198,71211],"content":"GetProperties","needQuote":true,"nodes":[{"content":"GetProperties","pos":[0,13]}]},{"pos":[71286,71287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71337,71343],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71403,71404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71516,71529],"content":"GetProperties","needQuote":true,"nodes":[{"content":"GetProperties","pos":[0,13]}]},{"pos":[71604,71605],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71655,71661],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71721,71722],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72011,72035],"content":"GetPropertiesSupported()","needQuote":true,"nodes":[{"content":"GetPropertiesSupported()","pos":[0,24]}]},{"pos":[72202,72224],"content":"GetPropertiesSupported","needQuote":true,"nodes":[{"content":"GetPropertiesSupported","pos":[0,22]}]},{"pos":[72308,72309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72336,72337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72443,72465],"content":"GetPropertiesSupported","needQuote":true,"nodes":[{"content":"GetPropertiesSupported","pos":[0,22]}]},{"pos":[72549,72550],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72577,72578],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72859,72878],"content":"GetStandardValues()","needQuote":true,"nodes":[{"content":"GetStandardValues()","pos":[0,19]}]},{"pos":[73035,73052],"content":"GetStandardValues","needQuote":true,"nodes":[{"content":"GetStandardValues","pos":[0,17]}]},{"pos":[73131,73132],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73159,73160],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73261,73278],"content":"GetStandardValues","needQuote":true,"nodes":[{"content":"GetStandardValues","pos":[0,17]}]},{"pos":[73357,73358],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73385,73386],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73666,73694],"content":"GetStandardValuesExclusive()","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive()","pos":[0,28]}]},{"pos":[73869,73895],"content":"GetStandardValuesExclusive","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive","pos":[0,26]}]},{"pos":[73983,73984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74011,74012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74122,74148],"content":"GetStandardValuesExclusive","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive","pos":[0,26]}]},{"pos":[74236,74237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74264,74265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74563,74591],"content":"GetStandardValuesSupported()","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported()","pos":[0,28]}]},{"pos":[74766,74792],"content":"GetStandardValuesSupported","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported","pos":[0,26]}]},{"pos":[74880,74881],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74908,74909],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75019,75045],"content":"GetStandardValuesSupported","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported","pos":[0,26]}]},{"pos":[75133,75134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75161,75162],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75455,75470],"content":"IsValid(Object)","needQuote":true,"nodes":[{"content":"IsValid(Object)","pos":[0,15]}]},{"pos":[75635,75642],"content":"IsValid","needQuote":true,"nodes":[{"content":"IsValid","pos":[0,7]}]},{"pos":[75711,75712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75762,75768],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75828,75829],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75935,75942],"content":"IsValid","needQuote":true,"nodes":[{"content":"IsValid","pos":[0,7]}]},{"pos":[76011,76012],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76062,76068],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76128,76129],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76465,76519],"content":"SortProperties(PropertyDescriptorCollection, String[])","needQuote":true,"nodes":[{"content":"SortProperties(PropertyDescriptorCollection, String[])","pos":[0,54]}]},{"pos":[77006,77020],"content":"SortProperties","needQuote":true,"nodes":[{"content":"SortProperties","pos":[0,14]}]},{"pos":[77096,77097],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77184,77212],"content":"PropertyDescriptorCollection","needQuote":true,"nodes":[{"content":"PropertyDescriptorCollection","pos":[0,28]}]},{"content":",","pos":[77289,77290]},{"pos":[77345,77351],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[77412,77414]},{"pos":[77445,77446],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77612,77626],"content":"SortProperties","needQuote":true,"nodes":[{"content":"SortProperties","pos":[0,14]}]},{"pos":[77702,77703],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77790,77818],"content":"PropertyDescriptorCollection","needQuote":true,"nodes":[{"content":"PropertyDescriptorCollection","pos":[0,28]}]},{"content":",","pos":[77895,77896]},{"pos":[77951,77957],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[78017,78019],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[78047,78048],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78453,78463],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[78558,78566],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[78635,78636],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78663,78664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78734,78742],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[78811,78812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78839,78840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79023,79037],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[79156,79162],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[79229,79230],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79280,79286],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[79346,79347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79430,79436],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[79503,79504],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79554,79560],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[79620,79621],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79835,79857],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[80005,80011],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[80078,80079],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80129,80135],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[80196,80197]},{"pos":[80252,80258],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[80318,80319],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80416,80422],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[80489,80490],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80540,80546],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[80607,80608]},{"pos":[80663,80669],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[80729,80730],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80975,81006],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[81172,81187],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[81263,81264],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81314,81320],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[81381,81382]},{"pos":[81437,81443],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[81503,81504],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81610,81625],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[81701,81702],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81752,81758],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[81819,81820]},{"pos":[81875,81881],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[81941,81942],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82172,82185],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[82286,82297],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[82369,82370],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82397,82398],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82471,82482],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[82554,82555],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82582,82583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82758,82767],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[82860,82867],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[82935,82936],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82963,82964],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83033,83040],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[83108,83109],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83136,83137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83312,83329],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[83438,83453],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[83529,83530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83557,83558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83635,83650],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[83726,83727],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83754,83755],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83900,83906],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[84035,84039],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[84301,84345],"content":"CanConvertFrom(ITypeDescriptorContext, Type)","needQuote":true,"nodes":[{"content":"CanConvertFrom(ITypeDescriptorContext, Type)","pos":[0,44]}]},{"pos":[84611,84625],"content":"CanConvertFrom","needQuote":true,"nodes":[{"content":"CanConvertFrom","pos":[0,14]}]},{"pos":[84701,84702],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84783,84805],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[84876,84877]},{"pos":[84930,84934],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[84992,84993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85149,85163],"content":"CanConvertFrom","needQuote":true,"nodes":[{"content":"CanConvertFrom","pos":[0,14]}]},{"pos":[85239,85240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85321,85343],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[85414,85415]},{"pos":[85468,85472],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[85530,85531],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85859,85881],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[86105,86112],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[86381,86423],"content":"CanConvertTo(ITypeDescriptorContext, Type)","needQuote":true,"nodes":[{"content":"CanConvertTo(ITypeDescriptorContext, Type)","pos":[0,42]}]},{"pos":[86685,86697],"content":"CanConvertTo","needQuote":true,"nodes":[{"content":"CanConvertTo","pos":[0,12]}]},{"pos":[86771,86772],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86853,86875],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[86946,86947]},{"pos":[87000,87004],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[87062,87063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87217,87229],"content":"CanConvertTo","needQuote":true,"nodes":[{"content":"CanConvertTo","pos":[0,12]}]},{"pos":[87303,87304],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87385,87407],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[87478,87479]},{"pos":[87532,87536],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[87594,87595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88028,88084],"content":"ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)","needQuote":true,"nodes":[{"content":"ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)","pos":[0,56]}]},{"pos":[88415,88426],"content":"ConvertFrom","needQuote":true,"nodes":[{"content":"ConvertFrom","pos":[0,11]}]},{"pos":[88499,88500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88581,88603],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[88674,88675]},{"pos":[88749,88760],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[88840,88841]},{"pos":[88896,88902],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[88962,88963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89151,89162],"content":"ConvertFrom","needQuote":true,"nodes":[{"content":"ConvertFrom","pos":[0,11]}]},{"pos":[89235,89236],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89317,89339],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[89410,89411]},{"pos":[89485,89496],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[89576,89577]},{"pos":[89632,89638],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89698,89699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90058,90069],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"pos":[90247,90267],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[90605,90665],"content":"ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)","needQuote":true,"nodes":[{"content":"ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)","pos":[0,60]}]},{"pos":[91017,91026],"content":"ConvertTo","needQuote":true,"nodes":[{"content":"ConvertTo","pos":[0,9]}]},{"pos":[91097,91098],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91179,91201],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[91272,91273]},{"pos":[91347,91358],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[91438,91439]},{"pos":[91494,91500],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[91561,91562]},{"pos":[91615,91619],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[91677,91678],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91876,91885],"content":"ConvertTo","needQuote":true,"nodes":[{"content":"ConvertTo","pos":[0,9]}]},{"pos":[91956,91957],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92038,92060],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[92131,92132]},{"pos":[92206,92217],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"content":",","pos":[92297,92298]},{"pos":[92353,92359],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[92420,92421]},{"pos":[92474,92478],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[92536,92537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93019,93070],"content":"CreateInstance(ITypeDescriptorContext, IDictionary)","needQuote":true,"nodes":[{"content":"CreateInstance(ITypeDescriptorContext, IDictionary)","pos":[0,51]}]},{"pos":[93374,93388],"content":"CreateInstance","needQuote":true,"nodes":[{"content":"CreateInstance","pos":[0,14]}]},{"pos":[93464,93465],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93546,93568],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[93639,93640]},{"pos":[93712,93723],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[93800,93801],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93976,93990],"content":"CreateInstance","needQuote":true,"nodes":[{"content":"CreateInstance","pos":[0,14]}]},{"pos":[94066,94067],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94148,94170],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[94241,94242]},{"pos":[94314,94325],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[94402,94403],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94740,94751],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[94923,94941],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[95232,95282],"content":"GetCreateInstanceSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[95547,95573],"content":"GetCreateInstanceSupported","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported","pos":[0,26]}]},{"pos":[95661,95662],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95743,95765],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[95835,95836],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95992,96018],"content":"GetCreateInstanceSupported","needQuote":true,"nodes":[{"content":"GetCreateInstanceSupported","pos":[0,26]}]},{"pos":[96106,96107],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96188,96210],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[96280,96281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96712,96770],"content":"GetProperties(ITypeDescriptorContext, Object, Attribute[])","needQuote":true,"nodes":[{"content":"GetProperties(ITypeDescriptorContext, Object, Attribute[])","pos":[0,58]}]},{"pos":[97293,97306],"content":"GetProperties","needQuote":true,"nodes":[{"content":"GetProperties","pos":[0,13]}]},{"pos":[97381,97382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97463,97485],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[97556,97557]},{"pos":[97612,97618],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[97679,97680]},{"pos":[97738,97747],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"content":"[]","pos":[97811,97813]},{"pos":[97844,97845],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98021,98034],"content":"GetProperties","needQuote":true,"nodes":[{"content":"GetProperties","pos":[0,13]}]},{"pos":[98109,98110],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98191,98213],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[98284,98285]},{"pos":[98340,98346],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[98407,98408]},{"pos":[98466,98475],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[98538,98540],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[98568,98569],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98945,98956],"content":"Attribute[]","needQuote":true,"nodes":[{"content":"Attribute[]","pos":[0,11]}]},{"pos":[99096,99105],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"content":"[]","pos":[99169,99171]},{"pos":[99239,99248],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[99311,99313],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[99508,99536],"content":"PropertyDescriptorCollection","needQuote":true,"nodes":[{"content":"PropertyDescriptorCollection","pos":[0,28]}]},{"pos":[99897,99943],"content":"GetPropertiesSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetPropertiesSupported(ITypeDescriptorContext)","pos":[0,46]}]},{"pos":[100200,100222],"content":"GetPropertiesSupported","needQuote":true,"nodes":[{"content":"GetPropertiesSupported","pos":[0,22]}]},{"pos":[100306,100307],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100388,100410],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[100480,100481],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100633,100655],"content":"GetPropertiesSupported","needQuote":true,"nodes":[{"content":"GetPropertiesSupported","pos":[0,22]}]},{"pos":[100739,100740],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100821,100843],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[100913,100914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101309,101350],"content":"GetStandardValues(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValues(ITypeDescriptorContext)","pos":[0,41]}]},{"pos":[101597,101614],"content":"GetStandardValues","needQuote":true,"nodes":[{"content":"GetStandardValues","pos":[0,17]}]},{"pos":[101693,101694],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101775,101797],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[101867,101868],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102015,102032],"content":"GetStandardValues","needQuote":true,"nodes":[{"content":"GetStandardValues","pos":[0,17]}]},{"pos":[102111,102112],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102193,102215],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[102285,102286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102618,102656],"content":"TypeConverter.StandardValuesCollection","needQuote":true,"nodes":[{"content":"TypeConverter.StandardValuesCollection","pos":[0,38]}]},{"pos":[103051,103101],"content":"GetStandardValuesExclusive(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[103366,103392],"content":"GetStandardValuesExclusive","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive","pos":[0,26]}]},{"pos":[103480,103481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103562,103584],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[103654,103655],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103811,103837],"content":"GetStandardValuesExclusive","needQuote":true,"nodes":[{"content":"GetStandardValuesExclusive","pos":[0,26]}]},{"pos":[103925,103926],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104007,104029],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[104099,104100],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104512,104562],"content":"GetStandardValuesSupported(ITypeDescriptorContext)","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported(ITypeDescriptorContext)","pos":[0,50]}]},{"pos":[104827,104853],"content":"GetStandardValuesSupported","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported","pos":[0,26]}]},{"pos":[104941,104942],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105023,105045],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[105115,105116],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105272,105298],"content":"GetStandardValuesSupported","needQuote":true,"nodes":[{"content":"GetStandardValuesSupported","pos":[0,26]}]},{"pos":[105386,105387],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105468,105490],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"pos":[105560,105561],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105967,106006],"content":"IsValid(ITypeDescriptorContext, Object)","needQuote":true,"nodes":[{"content":"IsValid(ITypeDescriptorContext, Object)","pos":[0,39]}]},{"pos":[106262,106269],"content":"IsValid","needQuote":true,"nodes":[{"content":"IsValid","pos":[0,7]}]},{"pos":[106338,106339],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106420,106442],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[106513,106514]},{"pos":[106569,106575],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[106635,106636],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106787,106794],"content":"IsValid","needQuote":true,"nodes":[{"content":"IsValid","pos":[0,7]}]},{"pos":[106863,106864],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106945,106967],"content":"ITypeDescriptorContext","needQuote":true,"nodes":[{"content":"ITypeDescriptorContext","pos":[0,22]}]},{"content":",","pos":[107038,107039]},{"pos":[107094,107100],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[107160,107161],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107444,107461],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[107654,107675],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[107863,107884],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.ComponentModel.NullableConverter\n  commentId: T:System.ComponentModel.NullableConverter\n  id: NullableConverter\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.NullableConverter.#ctor(System.Type)\n  - System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  - System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  - System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  - System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  - System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  - System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  - System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  - System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.NullableConverter.NullableType\n  - System.ComponentModel.NullableConverter.UnderlyingType\n  - System.ComponentModel.NullableConverter.UnderlyingTypeConverter\n  langs:\n  - csharp\n  - vb\n  name: NullableConverter\n  fullName: System.ComponentModel.NullableConverter\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NullableConverter\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 13\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Provides automatic conversion between a nullable type and its underlying primitive type.</p>\\n\"\n  syntax:\n    content: 'public class NullableConverter : TypeConverter'\n    content.vb: >-\n      Public Class NullableConverter\n          Inherits TypeConverter\n  inheritance:\n  - System.Object\n  - System.ComponentModel.TypeConverter\n  inheritedMembers:\n  - System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n  - System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n  - System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  - System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n  - System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n  - System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n  - System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n  - System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  - System.ComponentModel.TypeConverter.GetProperties(System.Object)\n  - System.ComponentModel.TypeConverter.GetPropertiesSupported\n  - System.ComponentModel.TypeConverter.GetStandardValues\n  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  - System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  - System.ComponentModel.TypeConverter.IsValid(System.Object)\n  - System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: NullableConverter\n- uid: System.ComponentModel.NullableConverter.#ctor(System.Type)\n  commentId: M:System.ComponentModel.NullableConverter.#ctor(System.Type)\n  id: '#ctor(System.Type)'\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: NullableConverter(Type)\n  fullName: System.ComponentModel.NullableConverter.NullableConverter(System.Type)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 22\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.NullableConverter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public NullableConverter(Type type)\n    content.vb: Public Sub New(type As Type)\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The specified nullable type.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>type</em> is not a nullable type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NullableConverter.NullableConverter(Type)\n- uid: System.ComponentModel.NullableConverter.NullableType\n  commentId: P:System.ComponentModel.NullableConverter.NullableType\n  id: NullableType\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: NullableType\n  fullName: System.ComponentModel.NullableConverter.NullableType\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NullableType\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 274\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the nullable type.</p>\\n\"\n  syntax:\n    content: public Type NullableType { get; }\n    content.vb: Public ReadOnly Property NullableType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the nullable type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: NullableConverter.NullableType\n- uid: System.ComponentModel.NullableConverter.UnderlyingType\n  commentId: P:System.ComponentModel.NullableConverter.UnderlyingType\n  id: UnderlyingType\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: UnderlyingType\n  fullName: System.ComponentModel.NullableConverter.UnderlyingType\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnderlyingType\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 285\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the underlying type.</p>\\n\"\n  syntax:\n    content: public Type UnderlyingType { get; }\n    content.vb: Public ReadOnly Property UnderlyingType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the underlying type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: NullableConverter.UnderlyingType\n- uid: System.ComponentModel.NullableConverter.UnderlyingTypeConverter\n  commentId: P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter\n  id: UnderlyingTypeConverter\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: UnderlyingTypeConverter\n  fullName: System.ComponentModel.NullableConverter.UnderlyingTypeConverter\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnderlyingTypeConverter\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 296\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the underlying type converter.</p>\\n\"\n  syntax:\n    content: public TypeConverter UnderlyingTypeConverter { get; }\n    content.vb: Public ReadOnly Property UnderlyingTypeConverter As TypeConverter\n    parameters: []\n    return:\n      type: System.ComponentModel.TypeConverter\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.TypeConverter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the underlying type converter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: NullableConverter.UnderlyingTypeConverter\n- uid: System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  commentId: M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  id: CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: CanConvertFrom(ITypeDescriptorContext, Type)\n  fullName: System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanConvertFrom\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 39\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</p>\\n\"\n  syntax:\n    content: public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)\n    content.vb: Public Overrides Function CanConvertFrom(context As ITypeDescriptorContext, sourceType As Type) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  that provides a format context.</p>\\n\"\n    - id: sourceType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type you want to convert from.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NullableConverter.CanConvertFrom(ITypeDescriptorContext, Type)\n- uid: System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  commentId: M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  id: CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: CanConvertTo(ITypeDescriptorContext, Type)\n  fullName: System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanConvertTo\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 81\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether this converter can convert the object to the specified type, using the specified context.</p>\\n\"\n  syntax:\n    content: public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)\n    content.vb: Public Overrides Function CanConvertTo(context As ITypeDescriptorContext, destinationType As Type) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context.</p>\\n\"\n    - id: destinationType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type you want to convert to.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NullableConverter.CanConvertTo(ITypeDescriptorContext, Type)\n- uid: System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  commentId: M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  id: ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)\n  fullName: System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertFrom\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 58\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given object to the type of this converter, using the specified context and culture information.</p>\\n\"\n  syntax:\n    content: public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)\n    content.vb: Public Overrides Function ConvertFrom(context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context.</p>\\n\"\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"\\n<p>The <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the current culture.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted value.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NullableConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)\n- uid: System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  commentId: M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  id: ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)\n  fullName: System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConvertTo\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 100\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts the given value object to the specified type, using the specified context and culture information.</p>\\n\"\n  syntax:\n    content: public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)\n    content.vb: Public Overrides Function ConvertTo(context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context.</p>\\n\"\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"\\n<p>The <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the current culture.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert.</p>\\n\"\n    - id: destinationType\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert the value parameter to.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the converted value.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destinationType</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The conversion cannot be performed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NullableConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)\n- uid: System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  commentId: M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  id: CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: CreateInstance(ITypeDescriptorContext, IDictionary)\n  fullName: System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateInstance\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 130\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Creates an instance of the type that this <xref href=\\\"System.ComponentModel.TypeConverter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is associated with, using the specified context, given a set of property values for the object.</p>\\n\"\n  syntax:\n    content: public override object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)\n    content.vb: Public Overrides Function CreateInstance(context As ITypeDescriptorContext, propertyValues As IDictionary) As Object\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: propertyValues\n      type: System.Collections.IDictionary\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of new property values. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the given <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <strong>null</strong> if the object cannot be created. This method always returns <strong>null</strong>.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  seealso:\n  - type: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n    commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NullableConverter.CreateInstance(ITypeDescriptorContext, IDictionary)\n- uid: System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  id: GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: GetCreateInstanceSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCreateInstanceSupported\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 148\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether changing a value on this object requires a call to <xref href=\\\"System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a new value, using the specified context.</p>\\n\"\n  syntax:\n    content: public override bool GetCreateInstanceSupported(ITypeDescriptorContext context)\n    content.vb: Public Overrides Function GetCreateInstanceSupported(context As ITypeDescriptorContext) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if changing a property on this object requires a call to <xref href=\\\"System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a new value; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  seealso:\n  - type: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n    commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NullableConverter.GetCreateInstanceSupported(ITypeDescriptorContext)\n- uid: System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  commentId: M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: GetProperties(ITypeDescriptorContext, Object, Attribute[])\n  fullName: System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperties\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 165\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</p>\\n\"\n  syntax:\n    content: public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)\n    content.vb: Public Overrides Function GetProperties(context As ITypeDescriptorContext, value As Object, attributes As Attribute()) As PropertyDescriptorCollection\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the type of array for which to get properties. </p>\\n\"\n    - id: attributes\n      type: System.Attribute[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used as a filter. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the properties that are exposed for this data type, or <strong>null</strong> if there are no properties.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  seealso:\n  - type: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n    commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute())\n  name.vb: GetProperties(ITypeDescriptorContext, Object, Attribute())\n  nameWithType: NullableConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[])\n  nameWithType.vb: NullableConverter.GetProperties(ITypeDescriptorContext, Object, Attribute())\n- uid: System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  id: GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: GetPropertiesSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetPropertiesSupported\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 180\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether this object supports properties, using the specified context.</p>\\n\"\n  syntax:\n    content: public override bool GetPropertiesSupported(ITypeDescriptorContext context)\n    content.vb: Public Overrides Function GetPropertiesSupported(context As ITypeDescriptorContext) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <xref href=\\\"System.ComponentModel.TypeConverter.GetProperties(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be called to find the properties of this object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  seealso:\n  - type: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n    commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NullableConverter.GetPropertiesSupported(ITypeDescriptorContext)\n- uid: System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  id: GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: GetStandardValues(ITypeDescriptorContext)\n  fullName: System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStandardValues\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 193\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</p>\\n\"\n  syntax:\n    content: public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)\n    content.vb: Public Overrides Function GetStandardValues(context As ITypeDescriptorContext) As TypeConverter.StandardValuesCollection\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.ComponentModel.TypeConverter.StandardValuesCollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.TypeConverter.StandardValuesCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that holds a standard set of valid values, or <strong>null</strong> if the data type does not support a standard set of values.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  seealso:\n  - type: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n    commentId: M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NullableConverter.GetStandardValues(ITypeDescriptorContext)\n- uid: System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  id: GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: GetStandardValuesExclusive(ITypeDescriptorContext)\n  fullName: System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStandardValuesExclusive\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 224\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether the collection of standard values returned from <xref href=\\\"System.ComponentModel.TypeConverter.GetStandardValues\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is an exclusive list of possible values, using the specified context.</p>\\n\"\n  syntax:\n    content: public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)\n    content.vb: Public Overrides Function GetStandardValuesExclusive(context As ITypeDescriptorContext) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.ComponentModel.TypeConverter.StandardValuesCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returned from <xref href=\\\"System.ComponentModel.TypeConverter.GetStandardValues\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is an exhaustive list of possible values; <strong>false</strong> if other values are possible.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  seealso:\n  - type: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n    commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NullableConverter.GetStandardValuesExclusive(ITypeDescriptorContext)\n- uid: System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  id: GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: GetStandardValuesSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStandardValuesSupported\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 240\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</p>\\n\"\n  syntax:\n    content: public override bool GetStandardValuesSupported(ITypeDescriptorContext context)\n    content.vb: Public Overrides Function GetStandardValuesSupported(context As ITypeDescriptorContext) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <xref href=\\\"System.ComponentModel.TypeConverter.GetStandardValues\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be called to find a common set of values the object supports; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  seealso:\n  - type: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n    commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NullableConverter.GetStandardValuesSupported(ITypeDescriptorContext)\n- uid: System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  commentId: M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  id: IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.NullableConverter\n  langs:\n  - csharp\n  - vb\n  name: IsValid(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsValid\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/NullableConverter.cs\n    startLine: 253\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns whether the given value object is valid for this type and for the specified context.</p>\\n\"\n  syntax:\n    content: public override bool IsValid(ITypeDescriptorContext context, object value)\n    content.vb: Public Overrides Function IsValid(context As ITypeDescriptorContext, value As Object) As Boolean\n    parameters:\n    - id: context\n      type: System.ComponentModel.ITypeDescriptorContext\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ITypeDescriptorContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides a format context. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to test for validity. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified value is valid for this object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  seealso:\n  - type: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    commentId: M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: NullableConverter.IsValid(ITypeDescriptorContext, Object)\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.ComponentModel.TypeConverter\n  parent: System.ComponentModel\n  isExternal: false\n  name: TypeConverter\n  fullName: System.ComponentModel.TypeConverter\n  nameWithType: TypeConverter\n  commentId: T:System.ComponentModel.TypeConverter\n- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: CanConvertFrom(Type)\n  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n    name: CanConvertFrom\n    fullName: System.ComponentModel.TypeConverter.CanConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n    name: CanConvertFrom\n    fullName: System.ComponentModel.TypeConverter.CanConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.CanConvertFrom(Type)\n  commentId: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)\n- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: CanConvertTo(Type)\n  fullName: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n    name: CanConvertTo\n    fullName: System.ComponentModel.TypeConverter.CanConvertTo\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n    name: CanConvertTo\n    fullName: System.ComponentModel.TypeConverter.CanConvertTo\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.CanConvertTo(Type)\n  commentId: M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)\n- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFrom(Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n    name: ConvertFrom\n    fullName: System.ComponentModel.TypeConverter.ConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n    name: ConvertFrom\n    fullName: System.ComponentModel.TypeConverter.ConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFrom(Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)\n- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFromInvariantString(ITypeDescriptorContext, String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n    name: ConvertFromInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n    name: ConvertFromInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)\n- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFromInvariantString(String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n    name: ConvertFromInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n    name: ConvertFromInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFromInvariantString(String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)\n- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFromString(ITypeDescriptorContext, CultureInfo, String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n    name: ConvertFromString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n    name: ConvertFromString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)\n- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFromString(ITypeDescriptorContext, String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n    name: ConvertFromString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n    name: ConvertFromString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext, String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)\n- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFromString(String)\n  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n    name: ConvertFromString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n    name: ConvertFromString\n    fullName: System.ComponentModel.TypeConverter.ConvertFromString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFromString(String)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)\n- uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertTo(Object, Type)\n  fullName: System.ComponentModel.TypeConverter.ConvertTo(System.Object, System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n    name: ConvertTo\n    fullName: System.ComponentModel.TypeConverter.ConvertTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n    name: ConvertTo\n    fullName: System.ComponentModel.TypeConverter.ConvertTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertTo(Object, Type)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)\n- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertToInvariantString(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: ConvertToInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: ConvertToInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertToInvariantString(Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n    name: ConvertToInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n    name: ConvertToInvariantString\n    fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertToInvariantString(Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)\n- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertToString(ITypeDescriptorContext, CultureInfo, Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n    name: ConvertToString\n    fullName: System.ComponentModel.TypeConverter.ConvertToString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n    name: ConvertToString\n    fullName: System.ComponentModel.TypeConverter.ConvertToString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertToString(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: ConvertToString\n    fullName: System.ComponentModel.TypeConverter.ConvertToString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: ConvertToString\n    fullName: System.ComponentModel.TypeConverter.ConvertToString\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext, Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)\n- uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertToString(Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n    name: ConvertToString\n    fullName: System.ComponentModel.TypeConverter.ConvertToString\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n    name: ConvertToString\n    fullName: System.ComponentModel.TypeConverter.ConvertToString\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertToString(Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)\n- uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: CreateInstance(IDictionary)\n  fullName: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n    name: CreateInstance\n    fullName: System.ComponentModel.TypeConverter.CreateInstance\n  - name: (\n    fullName: (\n  - uid: System.Collections.IDictionary\n    name: IDictionary\n    fullName: System.Collections.IDictionary\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n    name: CreateInstance\n    fullName: System.ComponentModel.TypeConverter.CreateInstance\n  - name: (\n    fullName: (\n  - uid: System.Collections.IDictionary\n    name: IDictionary\n    fullName: System.Collections.IDictionary\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.CreateInstance(IDictionary)\n  commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\n- uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: GetConvertFromException(Object)\n  fullName: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n    name: GetConvertFromException\n    fullName: System.ComponentModel.TypeConverter.GetConvertFromException\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n    name: GetConvertFromException\n    fullName: System.ComponentModel.TypeConverter.GetConvertFromException\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetConvertFromException(Object)\n  commentId: M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)\n- uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: GetConvertToException(Object, Type)\n  fullName: System.ComponentModel.TypeConverter.GetConvertToException(System.Object, System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n    name: GetConvertToException\n    fullName: System.ComponentModel.TypeConverter.GetConvertToException\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n    name: GetConvertToException\n    fullName: System.ComponentModel.TypeConverter.GetConvertToException\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetConvertToException(Object, Type)\n  commentId: M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)\n- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetCreateInstanceSupported()\n  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported()\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n    name: GetCreateInstanceSupported\n    fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n    name: GetCreateInstanceSupported\n    fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetCreateInstanceSupported()\n  commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: GetProperties(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: GetProperties\n    fullName: System.ComponentModel.TypeConverter.GetProperties\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: GetProperties\n    fullName: System.ComponentModel.TypeConverter.GetProperties\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext, Object)\n  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)\n- uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: GetProperties(Object)\n  fullName: System.ComponentModel.TypeConverter.GetProperties(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)\n    name: GetProperties\n    fullName: System.ComponentModel.TypeConverter.GetProperties\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)\n    name: GetProperties\n    fullName: System.ComponentModel.TypeConverter.GetProperties\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetProperties(Object)\n  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.Object)\n- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetPropertiesSupported()\n  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported()\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetPropertiesSupported\n    name: GetPropertiesSupported\n    fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetPropertiesSupported\n    name: GetPropertiesSupported\n    fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetPropertiesSupported()\n  commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported\n- uid: System.ComponentModel.TypeConverter.GetStandardValues\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetStandardValues()\n  fullName: System.ComponentModel.TypeConverter.GetStandardValues()\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValues\n    name: GetStandardValues\n    fullName: System.ComponentModel.TypeConverter.GetStandardValues\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValues\n    name: GetStandardValues\n    fullName: System.ComponentModel.TypeConverter.GetStandardValues\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetStandardValues()\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValues\n- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetStandardValuesExclusive()\n  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive()\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n    name: GetStandardValuesExclusive\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n    name: GetStandardValuesExclusive\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetStandardValuesExclusive()\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetStandardValuesSupported()\n  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported()\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n    name: GetStandardValuesSupported\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n    name: GetStandardValuesSupported\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetStandardValuesSupported()\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported\n- uid: System.ComponentModel.TypeConverter.IsValid(System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: IsValid(Object)\n  fullName: System.ComponentModel.TypeConverter.IsValid(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.IsValid(System.Object)\n    name: IsValid\n    fullName: System.ComponentModel.TypeConverter.IsValid\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.IsValid(System.Object)\n    name: IsValid\n    fullName: System.ComponentModel.TypeConverter.IsValid\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.IsValid(Object)\n  commentId: M:System.ComponentModel.TypeConverter.IsValid(System.Object)\n- uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: SortProperties(PropertyDescriptorCollection, String[])\n  fullName: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String[])\n  fullname.vb: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String())\n  name.vb: SortProperties(PropertyDescriptorCollection, String())\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n    name: SortProperties\n    fullName: System.ComponentModel.TypeConverter.SortProperties\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.PropertyDescriptorCollection\n    name: PropertyDescriptorCollection\n    fullName: System.ComponentModel.PropertyDescriptorCollection\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n    name: SortProperties\n    fullName: System.ComponentModel.TypeConverter.SortProperties\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.PropertyDescriptorCollection\n    name: PropertyDescriptorCollection\n    fullName: System.ComponentModel.PropertyDescriptorCollection\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.SortProperties(PropertyDescriptorCollection, String[])\n  nameWithType.vb: TypeConverter.SortProperties(PropertyDescriptorCollection, String())\n  commentId: M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: CanConvertFrom(ITypeDescriptorContext, Type)\n  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n    name: CanConvertFrom\n    fullName: System.ComponentModel.TypeConverter.CanConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n    name: CanConvertFrom\n    fullName: System.ComponentModel.TypeConverter.CanConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type)\n  commentId: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)\n- uid: System.ComponentModel.ITypeDescriptorContext\n  parent: System.ComponentModel\n  isExternal: false\n  name: ITypeDescriptorContext\n  fullName: System.ComponentModel.ITypeDescriptorContext\n  nameWithType: ITypeDescriptorContext\n  commentId: T:System.ComponentModel.ITypeDescriptorContext\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: CanConvertTo(ITypeDescriptorContext, Type)\n  fullName: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n    name: CanConvertTo\n    fullName: System.ComponentModel.TypeConverter.CanConvertTo\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n    name: CanConvertTo\n    fullName: System.ComponentModel.TypeConverter.CanConvertTo\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.CanConvertTo(ITypeDescriptorContext, Type)\n  commentId: M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)\n- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)\n  fullName: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n    name: ConvertFrom\n    fullName: System.ComponentModel.TypeConverter.ConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n    name: ConvertFrom\n    fullName: System.ComponentModel.TypeConverter.ConvertFrom\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  fullName: System.Globalization.CultureInfo\n  nameWithType: CultureInfo\n  commentId: T:System.Globalization.CultureInfo\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)\n  fullName: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n    name: ConvertTo\n    fullName: System.ComponentModel.TypeConverter.ConvertTo\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n    name: ConvertTo\n    fullName: System.ComponentModel.TypeConverter.ConvertTo\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CultureInfo\n    name: CultureInfo\n    fullName: System.Globalization.CultureInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)\n  commentId: M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\n- uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: CreateInstance(ITypeDescriptorContext, IDictionary)\n  fullName: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n    name: CreateInstance\n    fullName: System.ComponentModel.TypeConverter.CreateInstance\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IDictionary\n    name: IDictionary\n    fullName: System.Collections.IDictionary\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n    name: CreateInstance\n    fullName: System.ComponentModel.TypeConverter.CreateInstance\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IDictionary\n    name: IDictionary\n    fullName: System.Collections.IDictionary\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary)\n  commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  nameWithType: IDictionary\n  commentId: T:System.Collections.IDictionary\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetCreateInstanceSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n    name: GetCreateInstanceSupported\n    fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n    name: GetCreateInstanceSupported\n    fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: GetProperties(ITypeDescriptorContext, Object, Attribute[])\n  fullName: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])\n  fullname.vb: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute())\n  name.vb: GetProperties(ITypeDescriptorContext, Object, Attribute())\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n    name: GetProperties\n    fullName: System.ComponentModel.TypeConverter.GetProperties\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n    name: GetProperties\n    fullName: System.ComponentModel.TypeConverter.GetProperties\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[])\n  nameWithType.vb: TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute())\n  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])\n- uid: System.Attribute[]\n  name: Attribute[]\n  fullName: System.Attribute[]\n  fullname.vb: System.Attribute()\n  name.vb: Attribute()\n  spec.csharp:\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Attribute[]\n  nameWithType.vb: Attribute()\n- uid: System.ComponentModel.PropertyDescriptorCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptorCollection\n  fullName: System.ComponentModel.PropertyDescriptorCollection\n  nameWithType: PropertyDescriptorCollection\n  commentId: T:System.ComponentModel.PropertyDescriptorCollection\n- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetPropertiesSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n    name: GetPropertiesSupported\n    fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n    name: GetPropertiesSupported\n    fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetStandardValues(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n    name: GetStandardValues\n    fullName: System.ComponentModel.TypeConverter.GetStandardValues\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n    name: GetStandardValues\n    fullName: System.ComponentModel.TypeConverter.GetStandardValues\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetStandardValues(ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.StandardValuesCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: TypeConverter.StandardValuesCollection\n  fullName: System.ComponentModel.TypeConverter.StandardValuesCollection\n  nameWithType: TypeConverter.StandardValuesCollection\n  commentId: T:System.ComponentModel.TypeConverter.StandardValuesCollection\n- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetStandardValuesExclusive(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n    name: GetStandardValuesExclusive\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n    name: GetStandardValuesExclusive\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: false\n  name: GetStandardValuesSupported(ITypeDescriptorContext)\n  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n    name: GetStandardValuesSupported\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n    name: GetStandardValuesSupported\n    fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)\n  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)\n- uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n  parent: System.ComponentModel.TypeConverter\n  isExternal: true\n  name: IsValid(ITypeDescriptorContext, Object)\n  fullName: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: IsValid\n    fullName: System.ComponentModel.TypeConverter.IsValid\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n    name: IsValid\n    fullName: System.ComponentModel.TypeConverter.IsValid\n  - name: (\n    fullName: (\n  - uid: System.ComponentModel.ITypeDescriptorContext\n    name: ITypeDescriptorContext\n    fullName: System.ComponentModel.ITypeDescriptorContext\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TypeConverter.IsValid(ITypeDescriptorContext, Object)\n  commentId: M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}