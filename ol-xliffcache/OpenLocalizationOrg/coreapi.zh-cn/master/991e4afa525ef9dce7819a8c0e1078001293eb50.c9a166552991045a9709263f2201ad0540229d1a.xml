{"nodes":[{"pos":[344,368],"content":"AssemblyCompanyAttribute","needQuote":true,"nodes":[{"content":"AssemblyCompanyAttribute","pos":[0,24]}]},{"pos":[1882,1891],"content":"Inherited","needQuote":true,"nodes":[{"content":"Inherited","pos":[0,9]}]},{"pos":[2354,2386],"content":"AssemblyCompanyAttribute(String)","needQuote":true,"nodes":[{"content":"AssemblyCompanyAttribute(String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The company name information.","pos":[3196,3230],"source":"\\n<p>The company name information."},{"content":"&lt;/p&gt;\\n","pos":[3231,3237],"source":" </p>\\n"},{"pos":[3597,3604],"content":"Company","needQuote":true,"nodes":[{"content":"Company","pos":[0,7]}]},{"content":"\\n&lt;p&gt;A string containing the company name.&lt;/p&gt;\\n","pos":[4257,4305],"source":"\\n<p>A string containing the company name.</p>\\n"},{"pos":[4500,4517],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[4681,4687],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[4835,4844],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[5032,5046],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[5171,5177],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5226,5227],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5277,5283],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5343,5344],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5430,5436],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5485,5486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5536,5542],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5602,5603],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5806,5819],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[5926,5937],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[5991,5992],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6019,6020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6096,6107],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[6161,6162],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6189,6190],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6372,6382],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6477,6485],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6554,6555],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6582,6583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6653,6661],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6730,6731],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6758,6759],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6956,6978],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7126,7132],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7199,7200],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7250,7256],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7317,7318]},{"pos":[7373,7379],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7439,7440],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7537,7543],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7610,7611],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7661,7667],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7728,7729]},{"pos":[7784,7790],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7850,7851],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8096,8127],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8293,8308],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8384,8385],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8435,8441],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8502,8503]},{"pos":[8558,8564],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8624,8625],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8731,8746],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8822,8823],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8873,8879],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8940,8941]},{"pos":[8996,9002],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9062,9063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9289,9298],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[9391,9398],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9466,9467],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9494,9495],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9564,9571],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9639,9640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9667,9668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9843,9860],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[9969,9984],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10060,10061],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10088,10089],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10166,10181],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10257,10258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10285,10286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10431,10437],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[10568,10574],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Reflection.AssemblyCompanyAttribute\n  commentId: T:System.Reflection.AssemblyCompanyAttribute\n  id: AssemblyCompanyAttribute\n  parent: System.Reflection\n  children:\n  - System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)\n  - System.Reflection.AssemblyCompanyAttribute.Company\n  langs:\n  - csharp\n  - vb\n  name: AssemblyCompanyAttribute\n  fullName: System.Reflection.AssemblyCompanyAttribute\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AssemblyCompanyAttribute\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 75\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Defines a company name custom attribute for an assembly manifest.</p>\\n\"\n  syntax:\n    content: >-\n      [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]\n\n      [ComVisible(true)]\n\n      public sealed class AssemblyCompanyAttribute : Attribute, _Attribute\n    content.vb: >-\n      <AttributeUsage(AttributeTargets.Assembly, Inherited:=False)>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class AssemblyCompanyAttribute\n          Inherits Attribute\n          Implements _Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.AttributeUsageAttribute\n    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)\n    arguments:\n    - type: System.AttributeTargets\n      value: 1\n    namedArguments:\n    - name: Inherited\n      type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: AssemblyCompanyAttribute\n- uid: System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)\n  commentId: M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Reflection.AssemblyCompanyAttribute\n  langs:\n  - csharp\n  - vb\n  name: AssemblyCompanyAttribute(String)\n  fullName: System.Reflection.AssemblyCompanyAttribute.AssemblyCompanyAttribute(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 81\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Reflection.AssemblyCompanyAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public AssemblyCompanyAttribute(string company)\n    content.vb: Public Sub New(company As String)\n    parameters:\n    - id: company\n      type: System.String\n      description: \"\\n<p>The company name information. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyCompanyAttribute.AssemblyCompanyAttribute(String)\n- uid: System.Reflection.AssemblyCompanyAttribute.Company\n  commentId: P:System.Reflection.AssemblyCompanyAttribute.Company\n  id: Company\n  parent: System.Reflection.AssemblyCompanyAttribute\n  langs:\n  - csharp\n  - vb\n  name: Company\n  fullName: System.Reflection.AssemblyCompanyAttribute.Company\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Company\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 86\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets company name information.</p>\\n\"\n  syntax:\n    content: public string Company { get; }\n    content.vb: Public ReadOnly Property Company As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing the company name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: AssemblyCompanyAttribute.Company\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  fullName: System.Attribute\n  nameWithType: Attribute\n  commentId: T:System.Attribute\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Attribute.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Attribute.Equals(Object)\n  commentId: M:System.Attribute.Equals(System.Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Attribute.GetHashCode()\n  spec.csharp:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Attribute.GetHashCode()\n  commentId: M:System.Attribute.GetHashCode\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}