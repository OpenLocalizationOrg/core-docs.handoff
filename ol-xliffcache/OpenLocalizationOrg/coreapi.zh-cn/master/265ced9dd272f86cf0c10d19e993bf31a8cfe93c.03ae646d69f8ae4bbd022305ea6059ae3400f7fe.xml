{"nodes":[{"pos":[745,747],"content":"GC","needQuote":true,"nodes":[{"content":"GC","pos":[0,2]}]},{"pos":[1887,1900],"content":"MaxGeneration","needQuote":true,"nodes":[{"content":"MaxGeneration","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A value that ranges from zero to the maximum number of supported generations.&lt;/p&gt;\\n","pos":[2600,2688],"source":"\\n<p>A value that ranges from zero to the maximum number of supported generations.</p>\\n"},{"pos":[3139,3163],"content":"AddMemoryPressure(Int64)","needQuote":true,"nodes":[{"content":"AddMemoryPressure(Int64)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The incremental amount of unmanaged memory that has been allocated.","pos":[3975,4047],"source":"\\n<p>The incremental amount of unmanaged memory that has been allocated."},{"content":"&lt;/p&gt;\\n","pos":[4048,4054],"source":" </p>\\n"},{"pos":[5049,5058],"content":"Collect()","needQuote":true,"nodes":[{"content":"Collect()","pos":[0,9]}]},{"pos":[5903,5917],"content":"Collect(Int32)","needQuote":true,"nodes":[{"content":"Collect(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The number of the oldest generation to be garbage collected.","pos":[6566,6631],"source":"\\n<p>The number of the oldest generation to be garbage collected."},{"content":"&lt;/p&gt;\\n","pos":[6632,6638],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;generation&lt;/em&gt; is not valid.","pos":[6769,6809],"source":"\\n<p>\\n<em>generation</em> is not valid."},{"content":"&lt;/p&gt;\\n","pos":[6810,6816],"source":" </p>\\n"},{"pos":[7173,7205],"content":"Collect(Int32, GCCollectionMode)","needQuote":true,"nodes":[{"content":"Collect(Int32, GCCollectionMode)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The number of the oldest generation to be garbage collected.","pos":[8111,8176],"source":"\\n<p>The number of the oldest generation to be garbage collected."},{"content":"&lt;/p&gt;\\n","pos":[8177,8183],"source":" </p>\\n"},{"pos":[9386,9427],"content":"Collect(Int32, GCCollectionMode, Boolean)","needQuote":true,"nodes":[{"content":"Collect(Int32, GCCollectionMode, Boolean)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The number of the oldest generation to be garbage collected.","pos":[10452,10517],"source":"\\n<p>The number of the oldest generation to be garbage collected."},{"content":"&lt;/p&gt;\\n","pos":[10518,10524],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to perform a blocking garbage collection; &lt;strong&gt;false&lt;/strong&gt; to perform a background garbage collection where possible.&lt;/p&gt;\\n","pos":[11050,11208],"source":"\\n<p>\\n<strong>true</strong> to perform a blocking garbage collection; <strong>false</strong> to perform a background garbage collection where possible.</p>\\n"},{"pos":[11868,11890],"content":"CollectionCount(Int32)","needQuote":true,"nodes":[{"content":"CollectionCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The generation of objects for which the garbage collection count is to be determined.","pos":[12826,12916],"source":"\\n<p>The generation of objects for which the garbage collection count is to be determined."},{"content":"&lt;/p&gt;\\n","pos":[12917,12923],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of times garbage collection has occurred for the specified generation since the process was started.&lt;/p&gt;\\n","pos":[12982,13104],"source":"\\n<p>The number of times garbage collection has occurred for the specified generation since the process was started.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;generation&lt;/em&gt; is less than 0.","pos":[13235,13277],"source":"\\n<p>\\n<em>generation</em> is less than 0."},{"content":"&lt;/p&gt;\\n","pos":[13278,13284],"source":" </p>\\n"},{"pos":[13598,13619],"content":"GetGeneration(Object)","needQuote":true,"nodes":[{"content":"GetGeneration(Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The object that generation information is retrieved for.","pos":[14294,14355],"source":"\\n<p>The object that generation information is retrieved for."},{"content":"&lt;/p&gt;\\n","pos":[14356,14362],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current generation number of &lt;em&gt;obj&lt;/em&gt;.&lt;/p&gt;\\n","pos":[14421,14478],"source":"\\n<p>The current generation number of <em>obj</em>.</p>\\n"},{"pos":[14883,14906],"content":"GetTotalMemory(Boolean)","needQuote":true,"nodes":[{"content":"GetTotalMemory(Boolean)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to indicate that this method can wait for garbage collection to occur before returning; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15829,15986],"source":"\\n<p>\\n<strong>true</strong> to indicate that this method can wait for garbage collection to occur before returning; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A number that is the best available approximation of the number of bytes currently allocated in managed memory.&lt;/p&gt;\\n","pos":[16045,16167],"source":"\\n<p>A number that is the best available approximation of the number of bytes currently allocated in managed memory.</p>\\n"},{"pos":[16470,16487],"content":"KeepAlive(Object)","needQuote":true,"nodes":[{"content":"KeepAlive(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The object to reference.","pos":[17468,17497],"source":"\\n<p>The object to reference."},{"content":"&lt;/p&gt;\\n","pos":[17498,17504],"source":" </p>\\n"},{"pos":[17831,17858],"content":"RemoveMemoryPressure(Int64)","needQuote":true,"nodes":[{"content":"RemoveMemoryPressure(Int64)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The amount of unmanaged memory that has been released.","pos":[18691,18750],"source":"\\n<p>The amount of unmanaged memory that has been released."},{"content":"&lt;/p&gt;\\n","pos":[18751,18757],"source":" </p>\\n"},{"pos":[19844,19873],"content":"ReRegisterForFinalize(Object)","needQuote":true,"nodes":[{"content":"ReRegisterForFinalize(Object)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The object that a finalizer must be called for.","pos":[20759,20811],"source":"\\n<p>The object that a finalizer must be called for."},{"content":"&lt;/p&gt;\\n","pos":[20812,20818],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;obj&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[20937,20982],"source":"\\n<p>\\n<em>obj</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[20983,20989],"source":" </p>\\n"},{"pos":[21441,21465],"content":"SuppressFinalize(Object)","needQuote":true,"nodes":[{"content":"SuppressFinalize(Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The object whose finalizer must not be executed.","pos":[22364,22417],"source":"\\n<p>The object whose finalizer must not be executed."},{"content":"&lt;/p&gt;\\n","pos":[22418,22424],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;obj&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22543,22588],"source":"\\n<p>\\n<em>obj</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22589,22595],"source":" </p>\\n"},{"pos":[23104,23130],"content":"WaitForPendingFinalizers()","needQuote":true,"nodes":[{"content":"WaitForPendingFinalizers()","pos":[0,26]}]},{"pos":[23997,24003],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24134,24140],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24300,24310],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[24405,24413],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24482,24483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24510,24511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24581,24589],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24658,24659],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24686,24687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24870,24884],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[25003,25009],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25076,25077],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25127,25133],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25193,25194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25277,25283],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25350,25351],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25401,25407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25467,25468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25682,25704],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[25852,25858],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25925,25926],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25976,25982],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26043,26044]},{"pos":[26099,26105],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26165,26166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26263,26269],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26336,26337],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26387,26393],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26454,26455]},{"pos":[26510,26516],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26576,26577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26822,26853],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[27019,27034],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27110,27111],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27161,27167],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27228,27229]},{"pos":[27284,27290],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27350,27351],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27457,27472],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27548,27549],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27599,27605],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27666,27667]},{"pos":[27722,27728],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27788,27789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28019,28032],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[28133,28144],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28216,28217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28244,28245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28318,28329],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28401,28402],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28429,28430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28605,28614],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[28707,28714],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28782,28783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28810,28811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28880,28887],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28955,28956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28983,28984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29159,29176],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[29285,29300],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29376,29377],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29404,29405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29482,29497],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29573,29574],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29601,29602],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29770,29775],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29916,29921],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[30073,30089],"content":"GCCollectionMode","needQuote":true,"nodes":[{"content":"GCCollectionMode","pos":[0,16]}]},{"pos":[30265,30272],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[30424,30451],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[30657,30678],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.GC\n  commentId: T:System.GC\n  id: GC\n  parent: System\n  children:\n  - System.GC.AddMemoryPressure(System.Int64)\n  - System.GC.Collect\n  - System.GC.Collect(System.Int32)\n  - System.GC.Collect(System.Int32,System.GCCollectionMode)\n  - System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)\n  - System.GC.CollectionCount(System.Int32)\n  - System.GC.GetGeneration(System.Object)\n  - System.GC.GetTotalMemory(System.Boolean)\n  - System.GC.KeepAlive(System.Object)\n  - System.GC.MaxGeneration\n  - System.GC.RemoveMemoryPressure(System.Int64)\n  - System.GC.ReRegisterForFinalize(System.Object)\n  - System.GC.SuppressFinalize(System.Object)\n  - System.GC.WaitForPendingFinalizers\n  langs:\n  - csharp\n  - vb\n  name: GC\n  fullName: System.GC\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GC\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 63\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Controls the system garbage collector, a service that automatically reclaims unused memory.</p>\\n\"\n  syntax:\n    content: public class GC\n    content.vb: Public Class GC\n  seealso:\n  - type: System.Runtime.GCSettings\n    commentId: T:System.Runtime.GCSettings\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: GC\n- uid: System.GC.MaxGeneration\n  commentId: P:System.GC.MaxGeneration\n  id: MaxGeneration\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: MaxGeneration\n  fullName: System.GC.MaxGeneration\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaxGeneration\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 306\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the maximum number of generations that the system currently supports.</p>\\n\"\n  syntax:\n    content: >-\n      public static int MaxGeneration\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property MaxGeneration As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value that ranges from zero to the maximum number of supported generations.</p>\\n\"\n  seealso:\n  - type: System.GC.GetGeneration(System.Object)\n    commentId: M:System.GC.GetGeneration(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: GC.MaxGeneration\n- uid: System.GC.AddMemoryPressure(System.Int64)\n  commentId: M:System.GC.AddMemoryPressure(System.Int64)\n  id: AddMemoryPressure(System.Int64)\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: AddMemoryPressure(Int64)\n  fullName: System.GC.AddMemoryPressure(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMemoryPressure\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 126\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Informs the runtime of a large allocation of unmanaged memory that should be taken into account when scheduling garbage collection.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void AddMemoryPressure(long bytesAllocated)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub AddMemoryPressure(bytesAllocated As Long)\n    parameters:\n    - id: bytesAllocated\n      type: System.Int64\n      description: \"\\n<p>The incremental amount of unmanaged memory that has been allocated. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>bytesAllocated</em> is less than or equal to 0.</p>\\n<p>-or-</p>\\n<p>On a 32-bit computer, <em>bytesAllocated</em> is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.AddMemoryPressure(Int64)\n- uid: System.GC.Collect\n  commentId: M:System.GC.Collect\n  id: Collect\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: Collect()\n  fullName: System.GC.Collect()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Collect\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 174\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Forces an immediate garbage collection of all generations. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void Collect()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub Collect\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.Collect()\n- uid: System.GC.Collect(System.Int32)\n  commentId: M:System.GC.Collect(System.Int32)\n  id: Collect(System.Int32)\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: Collect(Int32)\n  fullName: System.GC.Collect(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Collect\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 168\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Forces an immediate garbage collection from generation 0 through a specified generation.</p>\\n\"\n  syntax:\n    content: public static void Collect(int generation)\n    content.vb: Public Shared Sub Collect(generation As Integer)\n    parameters:\n    - id: generation\n      type: System.Int32\n      description: \"\\n<p>The number of the oldest generation to be garbage collected. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>generation</em> is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.Collect(Int32)\n- uid: System.GC.Collect(System.Int32,System.GCCollectionMode)\n  commentId: M:System.GC.Collect(System.Int32,System.GCCollectionMode)\n  id: Collect(System.Int32,System.GCCollectionMode)\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: Collect(Int32, GCCollectionMode)\n  fullName: System.GC.Collect(System.Int32, System.GCCollectionMode)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Collect\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 180\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <xref href=\\\"System.GCCollectionMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void Collect(int generation, GCCollectionMode mode)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub Collect(generation As Integer, mode As GCCollectionMode)\n    parameters:\n    - id: generation\n      type: System.Int32\n      description: \"\\n<p>The number of the oldest generation to be garbage collected. </p>\\n\"\n    - id: mode\n      type: System.GCCollectionMode\n      description: \"\\n<p>An enumeration value that specifies whether the garbage collection is forced (<xref href=\\\"System.GCCollectionMode.Default\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.GCCollectionMode.Forced\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) or optimized (<xref href=\\\"System.GCCollectionMode.Optimized\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>generation</em> is not valid.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is not one of the <xref href=\\\"System.GCCollectionMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.Collect(Int32, GCCollectionMode)\n- uid: System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)\n  commentId: M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)\n  id: Collect(System.Int32,System.GCCollectionMode,System.Boolean)\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: Collect(Int32, GCCollectionMode, Boolean)\n  fullName: System.GC.Collect(System.Int32, System.GCCollectionMode, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Collect\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 186\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <xref href=\\\"System.GCCollectionMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value, with a value specifying whether the collection should be blocking.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void Collect(int generation, GCCollectionMode mode, bool blocking)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub Collect(generation As Integer, mode As GCCollectionMode, blocking As Boolean)\n    parameters:\n    - id: generation\n      type: System.Int32\n      description: \"\\n<p>The number of the oldest generation to be garbage collected. </p>\\n\"\n    - id: mode\n      type: System.GCCollectionMode\n      description: \"\\n<p>An enumeration value that specifies whether the garbage collection is forced (<xref href=\\\"System.GCCollectionMode.Default\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.GCCollectionMode.Forced\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) or optimized (<xref href=\\\"System.GCCollectionMode.Optimized\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n    - id: blocking\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to perform a blocking garbage collection; <strong>false</strong> to perform a background garbage collection where possible.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>generation</em> is not valid.</p>\\n<p>-or-</p>\\n<p>\\n<em>mode</em> is not one of the <xref href=\\\"System.GCCollectionMode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.Collect(Int32, GCCollectionMode, Boolean)\n- uid: System.GC.CollectionCount(System.Int32)\n  commentId: M:System.GC.CollectionCount(System.Int32)\n  id: CollectionCount(System.Int32)\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: CollectionCount(Int32)\n  fullName: System.GC.CollectionCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CollectionCount\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 229\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the number of times garbage collection has occurred for the specified generation of objects.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static int CollectionCount(int generation)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function CollectionCount(generation As Integer) As Integer\n    parameters:\n    - id: generation\n      type: System.Int32\n      description: \"\\n<p>The generation of objects for which the garbage collection count is to be determined. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of times garbage collection has occurred for the specified generation since the process was started.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>generation</em> is less than 0. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.CollectionCount(Int32)\n- uid: System.GC.GetGeneration(System.Object)\n  commentId: M:System.GC.GetGeneration(System.Object)\n  id: GetGeneration(System.Object)\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: GetGeneration(Object)\n  fullName: System.GC.GetGeneration(System.Object)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the current generation number of the specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static int GetGeneration(object obj)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function GetGeneration(obj As Object) As Integer\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object that generation information is retrieved for. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The current generation number of <em>obj</em>.</p>\\n\"\n  seealso:\n  - type: System.GC.MaxGeneration\n    commentId: P:System.GC.MaxGeneration\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.GetGeneration(Object)\n- uid: System.GC.GetTotalMemory(System.Boolean)\n  commentId: M:System.GC.GetTotalMemory(System.Boolean)\n  id: GetTotalMemory(System.Boolean)\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: GetTotalMemory(Boolean)\n  fullName: System.GC.GetTotalMemory(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTotalMemory\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 358\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Retrieves the number of bytes currently thought to be allocated. A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static long GetTotalMemory(bool forceFullCollection)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetTotalMemory(forceFullCollection As Boolean) As Long\n    parameters:\n    - id: forceFullCollection\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to indicate that this method can wait for garbage collection to occur before returning; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A number that is the best available approximation of the number of bytes currently allocated in managed memory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.GetTotalMemory(Boolean)\n- uid: System.GC.KeepAlive(System.Object)\n  commentId: M:System.GC.KeepAlive(System.Object)\n  id: KeepAlive(System.Object)\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: KeepAlive(Object)\n  fullName: System.GC.KeepAlive(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: KeepAlive\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 289\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static void KeepAlive(object obj)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Sub KeepAlive(obj As Object)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to reference. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.KeepAlive(Object)\n- uid: System.GC.RemoveMemoryPressure(System.Int64)\n  commentId: M:System.GC.RemoveMemoryPressure(System.Int64)\n  id: RemoveMemoryPressure(System.Int64)\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: RemoveMemoryPressure(Int64)\n  fullName: System.GC.RemoveMemoryPressure(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveMemoryPressure\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 142\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Informs the runtime that unmanaged memory has been released and no longer needs to be taken into account when scheduling garbage collection.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void RemoveMemoryPressure(long bytesAllocated)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub RemoveMemoryPressure(bytesAllocated As Long)\n    parameters:\n    - id: bytesAllocated\n      type: System.Int64\n      description: \"\\n<p>The amount of unmanaged memory that has been released. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>bytesAllocated</em> is less than or equal to 0. </p>\\n<p>-or- </p>\\n<p>On a 32-bit computer, <em>bytesAllocated</em> is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.RemoveMemoryPressure(Int64)\n- uid: System.GC.ReRegisterForFinalize(System.Object)\n  commentId: M:System.GC.ReRegisterForFinalize(System.Object)\n  id: ReRegisterForFinalize(System.Object)\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: ReRegisterForFinalize(Object)\n  fullName: System.GC.ReRegisterForFinalize(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReRegisterForFinalize\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 346\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Requests that the system call the finalizer for the specified object for which <xref href=\\\"System.GC.SuppressFinalize(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has previously been called.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void ReRegisterForFinalize(object obj)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub ReRegisterForFinalize(obj As Object)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object that a finalizer must be called for. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>obj</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.GC.SuppressFinalize(System.Object)\n    commentId: M:System.GC.SuppressFinalize(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.ReRegisterForFinalize(Object)\n- uid: System.GC.SuppressFinalize(System.Object)\n  commentId: M:System.GC.SuppressFinalize(System.Object)\n  id: SuppressFinalize(System.Object)\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: SuppressFinalize(Object)\n  fullName: System.GC.SuppressFinalize(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SuppressFinalize\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 329\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Requests that the common language runtime not call the finalizer for the specified object. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static void SuppressFinalize(object obj)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Sub SuppressFinalize(obj As Object)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object whose finalizer must not be executed. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>obj</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.GC.ReRegisterForFinalize(System.Object)\n    commentId: M:System.GC.ReRegisterForFinalize(System.Object)\n  - type: System.Object.Finalize\n    commentId: M:System.Object.Finalize\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.SuppressFinalize(Object)\n- uid: System.GC.WaitForPendingFinalizers\n  commentId: M:System.GC.WaitForPendingFinalizers\n  id: WaitForPendingFinalizers\n  parent: System.GC\n  langs:\n  - csharp\n  - vb\n  name: WaitForPendingFinalizers()\n  fullName: System.GC.WaitForPendingFinalizers()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/GC.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitForPendingFinalizers\n    path: src/mscorlib/src/System/GC.cs\n    startLine: 316\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void WaitForPendingFinalizers()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub WaitForPendingFinalizers\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GC.WaitForPendingFinalizers()\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.GCCollectionMode\n  parent: System\n  isExternal: false\n  name: GCCollectionMode\n  fullName: System.GCCollectionMode\n  nameWithType: GCCollectionMode\n  commentId: T:System.GCCollectionMode\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}