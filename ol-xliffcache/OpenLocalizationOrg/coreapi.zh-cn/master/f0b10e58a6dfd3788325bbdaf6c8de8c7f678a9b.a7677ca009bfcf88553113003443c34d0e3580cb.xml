{"nodes":[{"pos":[2289,2292],"content":"RSA","needQuote":true,"nodes":[{"content":"RSA","pos":[0,3]}]},{"pos":[4774,4779],"content":"RSA()","needQuote":true,"nodes":[{"content":"RSA()","pos":[0,5]}]},{"pos":[5794,5802],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[7321,7358],"content":"Decrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Decrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The data to decrypt.","pos":[8329,8354],"source":"\\n<p>The data to decrypt."},{"content":"&lt;/p&gt;\\n","pos":[8355,8361],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.","pos":[8463,8485],"source":"\\n<p>The padding mode."},{"content":"&lt;/p&gt;\\n","pos":[8486,8492],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The decrypted data.","pos":[8552,8576],"source":"\\n<p>The decrypted data."},{"content":"&lt;/p&gt;\\n","pos":[8577,8583],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A derived class must override this method.","pos":[8706,8753],"source":"\\n<p>A derived class must override this method."},{"content":"&lt;/p&gt;\\n","pos":[8754,8760],"source":" </p>\\n"},{"pos":[9531,9568],"content":"Encrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Encrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The data to encrypt.","pos":[10539,10564],"source":"\\n<p>The data to encrypt."},{"content":"&lt;/p&gt;\\n","pos":[10565,10571],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.","pos":[10673,10695],"source":"\\n<p>The padding mode."},{"content":"&lt;/p&gt;\\n","pos":[10696,10702],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The encrypted data.","pos":[10762,10786],"source":"\\n<p>The encrypted data."},{"content":"&lt;/p&gt;\\n","pos":[10787,10793],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A derived class must override this method.","pos":[10916,10963],"source":"\\n<p>A derived class must override this method."},{"content":"&lt;/p&gt;\\n","pos":[10964,10970],"source":" </p>\\n"},{"pos":[11621,11646],"content":"ExportParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to include private parameters; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[12672,12766],"source":"\\n<p>\\n<strong>true</strong> to include private parameters; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12767,12773],"source":" </p>\\n"},{"pos":[13584,13633],"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The data to be hashed.","pos":[14750,14777],"source":"\\n<p>The data to be hashed."},{"content":"&lt;/p&gt;\\n","pos":[14778,14784],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte in &lt;em&gt;data&lt;/em&gt; that is to be hashed.","pos":[14848,14919],"source":"\\n<p>The index of the first byte in <em>data</em> that is to be hashed."},{"content":"&lt;/p&gt;\\n","pos":[14921,14927],"source":"  </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to hash.","pos":[14990,15023],"source":"\\n<p>The number of bytes to hash."},{"content":"&lt;/p&gt;\\n","pos":[15024,15030],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The algorithm to use in hash the data.","pos":[15135,15178],"source":"\\n<p>The algorithm to use in hash the data."},{"content":"&lt;/p&gt;\\n","pos":[15179,15185],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hashed data.","pos":[15245,15266],"source":"\\n<p>The hashed data."},{"content":"&lt;/p&gt;\\n","pos":[15267,15273],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A derived class must override this method.","pos":[15396,15443],"source":"\\n<p>A derived class must override this method."},{"content":"&lt;/p&gt;\\n","pos":[15444,15450],"source":" </p>\\n"},{"pos":[16292,16327],"content":"HashData(Stream, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Stream, HashAlgorithmName)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The binary stream to hash.","pos":[17351,17382],"source":"\\n<p>The binary stream to hash."},{"content":"&lt;/p&gt;\\n","pos":[17383,17389],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm.","pos":[17494,17518],"source":"\\n<p>The hash algorithm."},{"content":"&lt;/p&gt;\\n","pos":[17519,17525],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hashed data.","pos":[17585,17606],"source":"\\n<p>The hashed data."},{"content":"&lt;/p&gt;\\n","pos":[17607,17613],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A derived class must override this method.","pos":[17736,17783],"source":"\\n<p>A derived class must override this method."},{"content":"&lt;/p&gt;\\n","pos":[17784,17790],"source":" </p>\\n"},{"pos":[18297,18328],"content":"ImportParameters(RSAParameters)","needQuote":true,"nodes":[{"content":"ImportParameters(RSAParameters)","pos":[0,31]}]},{"pos":[20237,20307],"content":"SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)","pos":[0,70]}]},{"content":"\\n&lt;p&gt;The input data for which to compute the hash.","pos":[21542,21592],"source":"\\n<p>The input data for which to compute the hash."},{"content":"&lt;/p&gt;\\n","pos":[21593,21599],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The offset into the array at which to begin using data.","pos":[21663,21723],"source":"\\n<p>The offset into the array at which to begin using data."},{"content":"&lt;/p&gt;\\n","pos":[21724,21730],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes in the array to use as data.","pos":[21793,21846],"source":"\\n<p>The number of bytes in the array to use as data."},{"content":"&lt;/p&gt;\\n","pos":[21847,21853],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm to use to create the hash value.","pos":[21958,22014],"source":"\\n<p>The hash algorithm to use to create the hash value."},{"content":"&lt;/p&gt;\\n","pos":[22015,22021],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.","pos":[22122,22144],"source":"\\n<p>The padding mode."},{"content":"&lt;/p&gt;\\n","pos":[22145,22151],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The RSA signature for the specified data.","pos":[22211,22257],"source":"\\n<p>The RSA signature for the specified data."},{"content":"&lt;/p&gt;\\n","pos":[22258,22264],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22383,22429],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22430,22496],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22497,22503],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is less than zero.","pos":[22974,23015],"source":"\\n<p>\\n<em>offset</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[23016,23073],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; – 1 results in an index that is beyond the upper bound of &lt;em&gt;data&lt;/em&gt;.","pos":[23074,23203],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> + <em>count</em> – 1 results in an index that is beyond the upper bound of <em>data</em>."},{"content":"&lt;/p&gt;\\n","pos":[23205,23211],"source":"  </p>\\n"},{"pos":[24296,24352],"content":"SignData(Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignData(Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The input data for which to compute the hash.","pos":[25466,25516],"source":"\\n<p>The input data for which to compute the hash."},{"content":"&lt;/p&gt;\\n","pos":[25517,25523],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm to use to create the hash value.","pos":[25628,25684],"source":"\\n<p>The hash algorithm to use to create the hash value."},{"content":"&lt;/p&gt;\\n","pos":[25685,25691],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.","pos":[25792,25814],"source":"\\n<p>The padding mode."},{"content":"&lt;/p&gt;\\n","pos":[25815,25821],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The RSA signature for the specified data.","pos":[25881,25927],"source":"\\n<p>The RSA signature for the specified data."},{"content":"&lt;/p&gt;\\n","pos":[25928,25934],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[26053,26099],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[26100,26166],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[26167,26173],"source":" </p>\\n"},{"pos":[27523,27579],"content":"SignData(Stream, HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignData(Stream, HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The input stream for which to compute the hash.","pos":[28714,28766],"source":"\\n<p>The input stream for which to compute the hash."},{"content":"&lt;/p&gt;\\n","pos":[28767,28773],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm to use to create the hash value.","pos":[28878,28934],"source":"\\n<p>The hash algorithm to use to create the hash value."},{"content":"&lt;/p&gt;\\n","pos":[28935,28941],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.","pos":[29042,29064],"source":"\\n<p>The padding mode."},{"content":"&lt;/p&gt;\\n","pos":[29065,29071],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The RSA signature for the specified data.","pos":[29131,29177],"source":"\\n<p>The RSA signature for the specified data."},{"content":"&lt;/p&gt;\\n","pos":[29178,29184],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[29303,29349],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[29350,29416],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[29417,29423],"source":" </p>\\n"},{"pos":[30474,30530],"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The hash value of the data to be signed.","pos":[31680,31725],"source":"\\n<p>The hash value of the data to be signed."},{"content":"&lt;/p&gt;\\n","pos":[31726,31732],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm used to create the hash value of the data.","pos":[31837,31903],"source":"\\n<p>The hash algorithm used to create the hash value of the data."},{"content":"&lt;/p&gt;\\n","pos":[31904,31910],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding.","pos":[32011,32028],"source":"\\n<p>The padding."},{"content":"&lt;/p&gt;\\n","pos":[32029,32035],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The RSA signature for the specified hash value.","pos":[32095,32147],"source":"\\n<p>The RSA signature for the specified hash value."},{"content":"&lt;/p&gt;\\n","pos":[32148,32154],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A derived class must override this method.","pos":[32277,32324],"source":"\\n<p>A derived class must override this method."},{"content":"&lt;/p&gt;\\n","pos":[32325,32331],"source":" </p>\\n"},{"pos":[33396,33462],"content":"VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;The signed data.","pos":[34683,34704],"source":"\\n<p>The signed data."},{"content":"&lt;/p&gt;\\n","pos":[34705,34711],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The signature data to be verified.","pos":[34779,34818],"source":"\\n<p>The signature data to be verified."},{"content":"&lt;/p&gt;\\n","pos":[34819,34825],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm used to create the hash value of the data.","pos":[34930,34996],"source":"\\n<p>The hash algorithm used to create the hash value of the data."},{"content":"&lt;/p&gt;\\n","pos":[34997,35003],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.","pos":[35104,35126],"source":"\\n<p>The padding mode."},{"content":"&lt;/p&gt;\\n","pos":[35127,35133],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signature is valid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[35194,35284],"source":"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[35285,35291],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[35410,35456],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;signature&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[35457,35591],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[35592,35598],"source":" </p>\\n"},{"pos":[37112,37192],"content":"VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,80]}]},{"content":"\\n&lt;p&gt;The signed data.","pos":[38540,38561],"source":"\\n<p>The signed data."},{"content":"&lt;/p&gt;\\n","pos":[38562,38568],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting index at which to compute the hash.","pos":[38632,38685],"source":"\\n<p>The starting index at which to compute the hash."},{"content":"&lt;/p&gt;\\n","pos":[38686,38692],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to hash.","pos":[38755,38788],"source":"\\n<p>The number of bytes to hash."},{"content":"&lt;/p&gt;\\n","pos":[38789,38795],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The signature data to be verified.","pos":[38863,38902],"source":"\\n<p>The signature data to be verified."},{"content":"&lt;/p&gt;\\n","pos":[38903,38909],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm used to create the hash value of the data.","pos":[39014,39080],"source":"\\n<p>The hash algorithm used to create the hash value of the data."},{"content":"&lt;/p&gt;\\n","pos":[39081,39087],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.","pos":[39188,39210],"source":"\\n<p>The padding mode."},{"content":"&lt;/p&gt;\\n","pos":[39211,39217],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signature is valid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[39278,39368],"source":"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[39369,39375],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[39494,39540],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;signature&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[39541,39675],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[39676,39682],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is less than zero.","pos":[40153,40194],"source":"\\n<p>\\n<em>offset</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; – 1 results in an index that is beyond the upper bound of &lt;em&gt;data&lt;/em&gt;.","pos":[40195,40381],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> + <em>count</em> – 1 results in an index that is beyond the upper bound of <em>data</em>."},{"content":"&lt;/p&gt;\\n","pos":[40383,40389],"source":"  </p>\\n"},{"pos":[41578,41644],"content":"VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;The signed data.","pos":[42873,42894],"source":"\\n<p>The signed data."},{"content":"&lt;/p&gt;\\n","pos":[42895,42901],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The signature data to be verified.","pos":[42969,43008],"source":"\\n<p>The signature data to be verified."},{"content":"&lt;/p&gt;\\n","pos":[43009,43015],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm used to create the hash value of the data.","pos":[43120,43186],"source":"\\n<p>The hash algorithm used to create the hash value of the data."},{"content":"&lt;/p&gt;\\n","pos":[43187,43193],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.","pos":[43294,43316],"source":"\\n<p>The padding mode."},{"content":"&lt;/p&gt;\\n","pos":[43317,43323],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signature is valid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[43384,43474],"source":"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[43475,43481],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[43600,43646],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;signature&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[43647,43781],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[43782,43788],"source":" </p>\\n"},{"pos":[45227,45293],"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;The hash value of the signed data.","pos":[46532,46571],"source":"\\n<p>The hash value of the signed data."},{"content":"&lt;/p&gt;\\n","pos":[46572,46578],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The signature data to be verified.","pos":[46646,46685],"source":"\\n<p>The signature data to be verified."},{"content":"&lt;/p&gt;\\n","pos":[46686,46692],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm used to create the hash value.","pos":[46797,46851],"source":"\\n<p>The hash algorithm used to create the hash value."},{"content":"&lt;/p&gt;\\n","pos":[46852,46858],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.","pos":[46959,46981],"source":"\\n<p>The padding mode."},{"content":"&lt;/p&gt;\\n","pos":[46982,46988],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signature is valid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[47049,47139],"source":"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[47140,47146],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A derived class must override this method.","pos":[47269,47316],"source":"\\n<p>A derived class must override this method."},{"content":"&lt;/p&gt;\\n","pos":[47317,47323],"source":" </p>\\n"},{"pos":[47931,47959],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[48156,48162],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48364,48383],"content":"AsymmetricAlgorithm","needQuote":true,"nodes":[{"content":"AsymmetricAlgorithm","pos":[0,19]}]},{"pos":[48616,48627],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[48876,48888],"content":"KeySizeValue","needQuote":true,"nodes":[{"content":"KeySizeValue","pos":[0,12]}]},{"pos":[49250,49268],"content":"LegalKeySizesValue","needQuote":true,"nodes":[{"content":"LegalKeySizesValue","pos":[0,18]}]},{"pos":[49637,49646],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[49809,49816],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[49919,49920],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49947,49948],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50052,50059],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[50162,50163],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50190,50191],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50474,50481],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[50640,50645],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[50746,50747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50774,50775],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50877,50882],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[50983,50984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51011,51012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51309,51325],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[51518,51525],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[51628,51629],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51680,51687],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[51748,51749],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51869,51876],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[51979,51980],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52031,52038],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[52099,52100],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52422,52436],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[52625,52631],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[52733,52734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52784,52790],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[52850,52851],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52969,52975],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[53077,53078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53128,53134],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[53194,53195],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53520,53541],"content":"FromXmlString(String)","needQuote":true,"nodes":[{"content":"FromXmlString(String)","pos":[0,21]}]},{"pos":[53744,53757],"content":"FromXmlString","needQuote":true,"nodes":[{"content":"FromXmlString","pos":[0,13]}]},{"pos":[53866,53867],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53917,53923],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[53983,53984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54109,54122],"content":"FromXmlString","needQuote":true,"nodes":[{"content":"FromXmlString","pos":[0,13]}]},{"pos":[54231,54232],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54282,54288],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[54348,54349],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54687,54707],"content":"ToXmlString(Boolean)","needQuote":true,"nodes":[{"content":"ToXmlString(Boolean)","pos":[0,20]}]},{"pos":[54908,54919],"content":"ToXmlString","needQuote":true,"nodes":[{"content":"ToXmlString","pos":[0,11]}]},{"pos":[55026,55027],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55078,55085],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55146,55147],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55271,55282],"content":"ToXmlString","needQuote":true,"nodes":[{"content":"ToXmlString","pos":[0,11]}]},{"pos":[55389,55390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55441,55448],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55509,55510],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55826,55833],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[56175,56188],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[56553,56571],"content":"SignatureAlgorithm","needQuote":true,"nodes":[{"content":"SignatureAlgorithm","pos":[0,18]}]},{"pos":[56953,56973],"content":"KeyExchangeAlgorithm","needQuote":true,"nodes":[{"content":"KeyExchangeAlgorithm","pos":[0,20]}]},{"pos":[57279,57289],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[57384,57392],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[57461,57462],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57489,57490],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57560,57568],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[57637,57638],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57665,57666],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57849,57863],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[57982,57988],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[58055,58056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58106,58112],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58172,58173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58256,58262],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[58329,58330],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58380,58386],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58446,58447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58661,58683],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[58831,58837],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[58904,58905],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58955,58961],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[59022,59023]},{"pos":[59078,59084],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59144,59145],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59242,59248],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[59315,59316],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59366,59372],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[59433,59434]},{"pos":[59489,59495],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59555,59556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59801,59832],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[59998,60013],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[60089,60090],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60140,60146],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[60207,60208]},{"pos":[60263,60269],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60329,60330],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60436,60451],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[60527,60528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60578,60584],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[60645,60646]},{"pos":[60701,60707],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60767,60768],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60998,61011],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[61112,61123],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[61195,61196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61223,61224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61297,61308],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[61380,61381],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61408,61409],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61584,61593],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[61686,61693],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[61761,61762],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61789,61790],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61859,61866],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[61934,61935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61962,61963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62138,62155],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[62264,62279],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[62355,62356],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62383,62384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62461,62476],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[62552,62553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62580,62581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62726,62732],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[62904,62907],"content":"RSA","needQuote":true,"nodes":[{"content":"RSA","pos":[0,3]}]},{"pos":[63050,63056],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[63176,63180],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[63239,63241]},{"pos":[63304,63308],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[63366,63368],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[63559,63579],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[63811,63818],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[64017,64030],"content":"RSAParameters","needQuote":true,"nodes":[{"content":"RSAParameters","pos":[0,13]}]},{"pos":[64239,64244],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64441,64458],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[64686,64692],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[64822,64831],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[65028,65047],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[65275,65298],"content":"NotImplementedException","needQuote":true,"nodes":[{"content":"NotImplementedException","pos":[0,23]}]},{"pos":[65492,65513],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[65714,65731],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[65913,65940],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.Cryptography.RSA\n  commentId: T:System.Security.Cryptography.RSA\n  id: RSA\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.RSA.#ctor\n  - System.Security.Cryptography.RSA.Create\n  - System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  langs:\n  - csharp\n  - vb\n  name: RSA\n  fullName: System.Security.Cryptography.RSA\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RSA\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 204\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Represents the base class from which all implementations of the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm inherit.</p>\\n\"\n  syntax:\n    content: 'public abstract class RSA : AsymmetricAlgorithm, IDisposable'\n    content.vb: >-\n      Public MustInherit Class RSA\n          Inherits AsymmetricAlgorithm\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: RSA\n- uid: System.Security.Cryptography.RSA.#ctor\n  commentId: M:System.Security.Cryptography.RSA.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: RSA()\n  fullName: System.Security.Cryptography.RSA.RSA()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 206\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected RSA()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: RSA.RSA()\n- uid: System.Security.Cryptography.RSA.Create\n  commentId: M:System.Security.Cryptography.RSA.Create\n  id: Create\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: Create()\n  fullName: System.Security.Cryptography.RSA.Create()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 207\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates an instance of the default implementation of the <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public static RSA Create()\n    content.vb: Public Shared Function Create As RSA\n    return:\n      type: System.Security.Cryptography.RSA\n      description: \"\\n<p>A new instance of the default implementation of <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RSA.Create()\n- uid: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  id: Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: Decrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSA.Decrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Decrypt\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 208\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, decrypts the input data using the specified padding mode. </p>\\n\"\n  syntax:\n    content: public abstract byte[] Decrypt(byte[] data, RSAEncryptionPadding padding)\n    content.vb: Public MustOverride Function Decrypt(data As Byte(), padding As RSAEncryptionPadding) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The data to decrypt. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>The padding mode. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The decrypted data. </p>\\n\"\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: \"\\n<p>A derived class must override this method. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Security.Cryptography.RSA.Decrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Decrypt(Byte(), RSAEncryptionPadding)\n  nameWithType: RSA.Decrypt(Byte[], RSAEncryptionPadding)\n  nameWithType.vb: RSA.Decrypt(Byte(), RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  id: Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: Encrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSA.Encrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Encrypt\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 209\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, encrypts the input data using the specified padding mode. </p>\\n\"\n  syntax:\n    content: public abstract byte[] Encrypt(byte[] data, RSAEncryptionPadding padding)\n    content.vb: Public MustOverride Function Encrypt(data As Byte(), padding As RSAEncryptionPadding) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The data to encrypt. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>The padding mode. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The encrypted data. </p>\\n\"\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: \"\\n<p>A derived class must override this method. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Security.Cryptography.RSA.Encrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Encrypt(Byte(), RSAEncryptionPadding)\n  nameWithType: RSA.Encrypt(Byte[], RSAEncryptionPadding)\n  nameWithType.vb: RSA.Encrypt(Byte(), RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportParameters\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 210\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, exports the <xref href=\\\"System.Security.Cryptography.RSAParameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: public abstract RSAParameters ExportParameters(bool includePrivateParameters)\n    content.vb: Public MustOverride Function ExportParameters(includePrivateParameters As Boolean) As RSAParameters\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to include private parameters; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Security.Cryptography.RSAParameters\n      description: \"\\n<p>The parameters for <xref href=\\\"System.Security.Cryptography.DSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: RSA.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSA.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 211\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, computes the hash value of a specified portion of a byte array by using a specified hashing algorithm. </p>\\n\"\n  syntax:\n    content: protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected MustOverride Function HashData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The data to be hashed. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte in <em>data</em> that is to be hashed.  </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to hash. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The algorithm to use in hash the data. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The hashed data. </p>\\n\"\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: \"\\n<p>A derived class must override this method. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  fullName.vb: System.Security.Cryptography.RSA.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)\n  nameWithType: RSA.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType.vb: RSA.HashData(Byte(), Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: HashData(Stream, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSA.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 212\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, computes the hash value of a specified binary stream by using a specified hashing algorithm.</p>\\n\"\n  syntax:\n    content: protected abstract byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected MustOverride Function HashData(data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: \"\\n<p>The binary stream to hash. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The hashed data. </p>\\n\"\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: \"\\n<p>A derived class must override this method. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: RSA.HashData(Stream, HashAlgorithmName)\n- uid: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  commentId: M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  id: ImportParameters(System.Security.Cryptography.RSAParameters)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: ImportParameters(RSAParameters)\n  fullName: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ImportParameters\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 213\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, imports the specified <xref href=\\\"System.Security.Cryptography.RSAParameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract void ImportParameters(RSAParameters parameters)\n    content.vb: Public MustOverride Sub ImportParameters(parameters As RSAParameters)\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.RSAParameters\n      description: \"\\n<p>The parameters for <xref href=\\\"System.Security.Cryptography.RSA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: RSA.ImportParameters(RSAParameters)\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 214\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the hash value of a portion of the specified byte array using the specified hash algorithm and padding mode, and signs the resulting hash value. </p>\\n\"\n  syntax:\n    content: public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public Overridable Function SignData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The input data for which to compute the hash. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset into the array at which to begin using data. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes in the array to use as data. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm to use to create the hash value. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: \"\\n<p>The padding mode. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The RSA signature for the specified data. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em>.<xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is less than zero. </p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero. </p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> + <em>count</em> – 1 results in an index that is beyond the upper bound of <em>data</em>.  </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Cryptography.RSA.SignData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignData(Byte(), Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.SignData(Byte(), Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: SignData(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 215\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the hash value of the specified byte array using the specified hash algorithm and padding mode, and signs the resulting hash value. </p>\\n\"\n  syntax:\n    content: public byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public Function SignData(data As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The input data for which to compute the hash. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm to use to create the hash value. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: \"\\n<p>The padding mode. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The RSA signature for the specified data. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em>.<xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.RSA.SignData(System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignData(Byte(), HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.SignData(Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: SignData(Stream, HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 216\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the hash value of the specified stream using the specified hash algorithm and padding mode, and signs the resulting hash value.</p>\\n\"\n  syntax:\n    content: public virtual byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public Overridable Function SignData(data As Stream, hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Byte()\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: \"\\n<p>The input stream for which to compute the hash. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm to use to create the hash value. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: \"\\n<p>The padding mode. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The RSA signature for the specified data. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em>.<xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: RSA.SignData(Stream, HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignHash(System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignHash\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 217\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, computes the signature for the specified hash value by encrypting it with the private key using the specified padding. </p>\\n\"\n  syntax:\n    content: public abstract byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public MustOverride Function SignHash(hash As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Byte()\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: \"\\n<p>The hash value of the data to be signed. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm used to create the hash value of the data. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: \"\\n<p>The padding. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The RSA signature for the specified hash value. </p>\\n\"\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: \"\\n<p>A derived class must override this method. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Security.Cryptography.RSA.SignHash(System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 218\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and padding, and comparing it to the provided signature. </p>\\n\"\n  syntax:\n    content: public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public Function VerifyData(data As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Boolean\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The signed data. </p>\\n\"\n    - id: signature\n      type: System.Byte[]\n      description: \"\\n<p>The signature data to be verified. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm used to create the hash value of the data. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: \"\\n<p>The padding mode. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em>.<xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.RSA.VerifyData(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyData(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyData(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 219\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and padding, and comparing it to the provided signature. </p>\\n\"\n  syntax:\n    content: public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public Overridable Function VerifyData(data As Byte(), offset As Integer, count As Integer, signature As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Boolean\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The signed data. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index at which to compute the hash. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to hash. </p>\\n\"\n    - id: signature\n      type: System.Byte[]\n      description: \"\\n<p>The signature data to be verified. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm used to create the hash value of the data. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: \"\\n<p>The padding mode. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em>.<xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is less than zero. </p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> + <em>count</em> – 1 results in an index that is beyond the upper bound of <em>data</em>.  </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Cryptography.RSA.VerifyData(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream, System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 220\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and padding, and comparing it to the provided signature. </p>\\n\"\n  syntax:\n    content: public bool VerifyData(Stream data, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public Function VerifyData(data As Stream, signature As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Boolean\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: \"\\n<p>The signed data. </p>\\n\"\n    - id: signature\n      type: System.Byte[]\n      description: \"\\n<p>The signature data to be verified. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm used to create the hash value of the data. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: \"\\n<p>The padding mode. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em>.<xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream, System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyData(Stream, Byte(), HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyData(Stream, Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  langs:\n  - csharp\n  - vb\n  name: VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyHash(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyHash\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 221\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies that a digital signature is valid by determining the hash value in the signature using the specified hash algorithm and padding, and comparing it to the provided hash value. </p>\\n\"\n  syntax:\n    content: public abstract bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public MustOverride Function VerifyHash(hash As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Boolean\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: \"\\n<p>The hash value of the signed data. </p>\\n\"\n    - id: signature\n      type: System.Byte[]\n      description: \"\\n<p>The signature data to be verified. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm used to create the hash value. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: \"\\n<p>The padding mode. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: \"\\n<p>A derived class must override this method. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Security.Cryptography.RSA.VerifyHash(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSA.VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n  commentId: T:System.Security.Cryptography.AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: KeySizeValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizesValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Dispose()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  nameWithType: AsymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Clear()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  nameWithType: AsymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Create(String)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n  nameWithType: AsymmetricAlgorithm.Create(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: FromXmlString(String)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n    name: FromXmlString\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n    name: FromXmlString\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  nameWithType: AsymmetricAlgorithm.FromXmlString(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n    name: ToXmlString\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n    name: ToXmlString\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: KeySize\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  nameWithType: AsymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  nameWithType: AsymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: SignatureAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.RSA\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSA\n  fullName: System.Security.Cryptography.RSA\n  commentId: T:System.Security.Cryptography.RSA\n  nameWithType: RSA\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.RSAEncryptionPadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAEncryptionPadding\n  fullName: System.Security.Cryptography.RSAEncryptionPadding\n  commentId: T:System.Security.Cryptography.RSAEncryptionPadding\n  nameWithType: RSAEncryptionPadding\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.RSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAParameters\n  fullName: System.Security.Cryptography.RSAParameters\n  commentId: T:System.Security.Cryptography.RSAParameters\n  nameWithType: RSAParameters\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n  commentId: T:System.Security.Cryptography.HashAlgorithmName\n  nameWithType: HashAlgorithmName\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.Security.Cryptography.RSASignaturePadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSASignaturePadding\n  fullName: System.Security.Cryptography.RSASignaturePadding\n  commentId: T:System.Security.Cryptography.RSASignaturePadding\n  nameWithType: RSASignaturePadding\n- uid: System.NotImplementedException\n  isExternal: false\n  name: NotImplementedException\n  fullName: System.NotImplementedException\n  nameWithType: NotImplementedException\n  commentId: T:System.NotImplementedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}