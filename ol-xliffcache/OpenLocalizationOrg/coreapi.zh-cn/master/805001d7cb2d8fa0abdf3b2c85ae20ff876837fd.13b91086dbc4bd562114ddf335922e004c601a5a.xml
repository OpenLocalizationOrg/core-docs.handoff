{"nodes":[{"pos":[639,654],"content":"XmlNamedNodeMap","needQuote":true,"nodes":[{"content":"XmlNamedNodeMap","pos":[0,15]}]},{"pos":[2337,2342],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The number of nodes.&lt;/p&gt;\\n","pos":[3024,3055],"source":"\\n<p>The number of nodes.</p>\\n"},{"pos":[3398,3413],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An enumerator object.&lt;/p&gt;\\n","pos":[4179,4211],"source":"\\n<p>An enumerator object.</p>\\n"},{"pos":[4648,4668],"content":"GetNamedItem(String)","needQuote":true,"nodes":[{"content":"GetNamedItem(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;An &lt;strong&gt;XmlNode&lt;/strong&gt; with the specified name or &lt;strong&gt;null&lt;/strong&gt; if a matching node is not found.&lt;/p&gt;\\n","pos":[5712,5832],"source":"\\n<p>An <strong>XmlNode</strong> with the specified name or <strong>null</strong> if a matching node is not found.</p>\\n"},{"pos":[6253,6281],"content":"GetNamedItem(String, String)","needQuote":true,"nodes":[{"content":"GetNamedItem(String, String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The local name of the node to retrieve.&lt;/p&gt;\\n","pos":[7250,7300],"source":"\\n<p>The local name of the node to retrieve.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace Uniform Resource Identifier (URI) of the node to retrieve.&lt;/p&gt;\\n","pos":[7371,7454],"source":"\\n<p>The namespace Uniform Resource Identifier (URI) of the node to retrieve.</p>\\n"},{"pos":[8077,8088],"content":"Item(Int32)","needQuote":true,"nodes":[{"content":"Item(Int32)","pos":[0,11]}]},{"pos":[9871,9894],"content":"RemoveNamedItem(String)","needQuote":true,"nodes":[{"content":"RemoveNamedItem(String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;XmlNode&lt;/strong&gt; removed from this &lt;strong&gt;XmlNamedNodeMap&lt;/strong&gt; or &lt;strong&gt;null&lt;/strong&gt; if a matching node was not found.&lt;/p&gt;\\n","pos":[10903,11052],"source":"\\n<p>The <strong>XmlNode</strong> removed from this <strong>XmlNamedNodeMap</strong> or <strong>null</strong> if a matching node was not found.</p>\\n"},{"pos":[11485,11516],"content":"RemoveNamedItem(String, String)","needQuote":true,"nodes":[{"content":"RemoveNamedItem(String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The local name of the node to remove.&lt;/p&gt;\\n","pos":[12495,12543],"source":"\\n<p>The local name of the node to remove.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the node to remove.&lt;/p&gt;\\n","pos":[12614,12665],"source":"\\n<p>The namespace URI of the node to remove.</p>\\n"},{"pos":[13295,13316],"content":"SetNamedItem(XmlNode)","needQuote":true,"nodes":[{"content":"SetNamedItem(XmlNode)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;An &lt;strong&gt;XmlNode&lt;/strong&gt; to store in the &lt;strong&gt;XmlNamedNodeMap&lt;/strong&gt;.","pos":[14192,14274],"source":"\\n<p>An <strong>XmlNode</strong> to store in the <strong>XmlNamedNodeMap</strong>."},{"content":"If a node with that name is already present in the map, it is replaced by the new one.&lt;/p&gt;\\n","pos":[14275,14367],"source":" If a node with that name is already present in the map, it is replaced by the new one.</p>\\n"},{"content":"\\n&lt;p&gt;If the &lt;em&gt;node&lt;/em&gt; replaces an existing node with the same name, the old node is returned; otherwise, &lt;strong&gt;null&lt;/strong&gt; is returned.&lt;/p&gt;\\n","pos":[14432,14581],"source":"\\n<p>If the <em>node</em> replaces an existing node with the same name, the old node is returned; otherwise, <strong>null</strong> is returned.</p>\\n"},{"pos":[15150,15160],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[15303,15309],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15483,15494],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[15693,15703],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15798,15806],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15875,15876],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15903,15904],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15974,15982],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16051,16052],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16079,16080],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16263,16277],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[16396,16402],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16469,16470],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16520,16526],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16586,16587],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16670,16676],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16743,16744],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16794,16800],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16860,16861],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17075,17097],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17245,17251],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17318,17319],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17369,17375],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17436,17437]},{"pos":[17492,17498],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17558,17559],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17656,17662],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17729,17730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17780,17786],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17847,17848]},{"pos":[17903,17909],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17969,17970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18215,18246],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18412,18427],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18503,18504],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18554,18560],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18621,18622]},{"pos":[18677,18683],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18743,18744],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18850,18865],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18941,18942],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18992,18998],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19059,19060]},{"pos":[19115,19121],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19181,19182],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19412,19425],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19526,19537],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19609,19610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19637,19638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19711,19722],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19794,19795],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19822,19823],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19998,20007],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[20100,20107],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20175,20176],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20203,20204],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20273,20280],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20348,20349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20376,20377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20552,20569],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[20678,20693],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20769,20770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20797,20798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20875,20890],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20966,20967],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20994,20995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21290,21303],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[21420,21431],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[21490,21491],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21518,21519],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21600,21611],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[21670,21671],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21698,21699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22054,22066],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[22199,22209],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[22276,22277],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22304,22305],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22394,22404],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[22471,22472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22499,22500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22841,22856],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[23060,23073],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[23135,23136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23163,23164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23242,23258],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[23323,23324],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23351,23352],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23730,23747],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[23959,23974],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[24038,24039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24066,24067],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24147,24165],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[24232,24233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24260,24261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24496,24502],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24621,24639],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[24840,24864],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[25043,25054],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[25113,25114],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25181,25192],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[25269,25270],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25383,25394],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[25453,25454],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25521,25532],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[25609,25610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25838,25847],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[26053,26076],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[26271,26281],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[26348,26349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26416,26427],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[26504,26505],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26626,26636],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[26703,26704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26771,26782],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[26859,26860],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27113,27131],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[27353,27379],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[27686,27699],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[27761,27762],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27829,27840],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[27917,27918],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28028,28044],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[28109,28110],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28177,28188],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[28265,28266],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28555,28565],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[28765,28793],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[29108,29123],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[29187,29188],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29255,29266],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[29343,29344],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29456,29474],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[29541,29542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29609,29620],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[29697,29698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29960,29971],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[30116,30121],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30318,30333],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[30472,30485],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[30555,30556],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30583,30584],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30676,30689],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[30759,30760],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30787,30788],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31004,31015],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[31199,31205],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[31359,31366],"content":"XmlNode","needQuote":true,"nodes":[{"content":"XmlNode","pos":[0,7]}]},{"pos":[31533,31550],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Xml.XmlNamedNodeMap\n  commentId: T:System.Xml.XmlNamedNodeMap\n  id: XmlNamedNodeMap\n  parent: System.Xml\n  children:\n  - System.Xml.XmlNamedNodeMap.Count\n  - System.Xml.XmlNamedNodeMap.GetEnumerator\n  - System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)\n  - System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)\n  - System.Xml.XmlNamedNodeMap.Item(System.Int32)\n  - System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)\n  - System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)\n  - System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)\n  langs:\n  - csharp\n  - vb\n  name: XmlNamedNodeMap\n  fullName: System.Xml.XmlNamedNodeMap\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlNamedNodeMap\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 229\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Represents a collection of nodes that can be accessed by name or index.</p>\\n\"\n  syntax:\n    content: 'public class XmlNamedNodeMap : IEnumerable'\n    content.vb: >-\n      Public Class XmlNamedNodeMap\n          Implements IEnumerable\n  seealso:\n  - type: System.Xml.XmlNodeList\n    commentId: T:System.Xml.XmlNodeList\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: XmlNamedNodeMap\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Xml.XmlNamedNodeMap.Count\n  commentId: P:System.Xml.XmlNamedNodeMap.Count\n  id: Count\n  parent: System.Xml.XmlNamedNodeMap\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Xml.XmlNamedNodeMap.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 232\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the number of nodes in the <strong>XmlNamedNodeMap</strong>.</p>\\n\"\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlNamedNodeMap.Count\n- uid: System.Xml.XmlNamedNodeMap.GetEnumerator\n  commentId: M:System.Xml.XmlNamedNodeMap.GetEnumerator\n  id: GetEnumerator\n  parent: System.Xml.XmlNamedNodeMap\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Xml.XmlNamedNodeMap.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 233\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Provides support for the \\\"foreach\\\" style iteration over the collection of nodes in the <strong>XmlNamedNodeMap</strong>.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An enumerator object.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamedNodeMap.GetEnumerator()\n- uid: System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)\n  commentId: M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)\n  id: GetNamedItem(System.String)\n  parent: System.Xml.XmlNamedNodeMap\n  langs:\n  - csharp\n  - vb\n  name: GetNamedItem(String)\n  fullName: System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNamedItem\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 234\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Retrieves an <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> specified by name.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode GetNamedItem(string name)\n    content.vb: Public Overridable Function GetNamedItem(name As String) As XmlNode\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The qualified name of the node to retrieve. It is matched against the <xref href=\\\"System.Xml.XmlNode.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the matching node.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>An <strong>XmlNode</strong> with the specified name or <strong>null</strong> if a matching node is not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamedNodeMap.GetNamedItem(String)\n- uid: System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)\n  commentId: M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)\n  id: GetNamedItem(System.String,System.String)\n  parent: System.Xml.XmlNamedNodeMap\n  langs:\n  - csharp\n  - vb\n  name: GetNamedItem(String, String)\n  fullName: System.Xml.XmlNamedNodeMap.GetNamedItem(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNamedItem\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 235\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Retrieves a node with the matching <xref href=\\\"System.Xml.XmlNode.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlNode.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode GetNamedItem(string localName, string namespaceURI)\n    content.vb: Public Overridable Function GetNamedItem(localName As String, namespaceURI As String) As XmlNode\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the node to retrieve.</p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace Uniform Resource Identifier (URI) of the node to retrieve.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the matching local name and namespace URI or <strong>null</strong> if a matching node was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamedNodeMap.GetNamedItem(String, String)\n- uid: System.Xml.XmlNamedNodeMap.Item(System.Int32)\n  commentId: M:System.Xml.XmlNamedNodeMap.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Xml.XmlNamedNodeMap\n  langs:\n  - csharp\n  - vb\n  name: Item(Int32)\n  fullName: System.Xml.XmlNamedNodeMap.Item(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Item\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 236\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Retrieves the node at the specified index in the <strong>XmlNamedNodeMap</strong>.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode Item(int index)\n    content.vb: Public Overridable Function Item(index As Integer) As XmlNode\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index position of the node to retrieve from the <strong>XmlNamedNodeMap</strong>. The index is zero-based; therefore, the index of the first node is 0 and the index of the last node is <xref href=\\\"System.Xml.XmlNamedNodeMap.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> -1.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index. If <em>index</em> is less than 0 or greater than or equal to the <xref href=\\\"System.Xml.XmlNamedNodeMap.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, <strong>null</strong> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamedNodeMap.Item(Int32)\n- uid: System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)\n  commentId: M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)\n  id: RemoveNamedItem(System.String)\n  parent: System.Xml.XmlNamedNodeMap\n  langs:\n  - csharp\n  - vb\n  name: RemoveNamedItem(String)\n  fullName: System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveNamedItem\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 237\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Removes the node from the <strong>XmlNamedNodeMap</strong>.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode RemoveNamedItem(string name)\n    content.vb: Public Overridable Function RemoveNamedItem(name As String) As XmlNode\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The qualified name of the node to remove. The name is matched against the <xref href=\\\"System.Xml.XmlNode.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the matching node.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <strong>XmlNode</strong> removed from this <strong>XmlNamedNodeMap</strong> or <strong>null</strong> if a matching node was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamedNodeMap.RemoveNamedItem(String)\n- uid: System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)\n  commentId: M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)\n  id: RemoveNamedItem(System.String,System.String)\n  parent: System.Xml.XmlNamedNodeMap\n  langs:\n  - csharp\n  - vb\n  name: RemoveNamedItem(String, String)\n  fullName: System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveNamedItem\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 238\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Removes a node with the matching <xref href=\\\"System.Xml.XmlNode.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlNode.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode RemoveNamedItem(string localName, string namespaceURI)\n    content.vb: Public Overridable Function RemoveNamedItem(localName As String, namespaceURI As String) As XmlNode\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the node to remove.</p>\\n\"\n    - id: namespaceURI\n      type: System.String\n      description: \"\\n<p>The namespace URI of the node to remove.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> removed or <strong>null</strong> if a matching node was not found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamedNodeMap.RemoveNamedItem(String, String)\n- uid: System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)\n  commentId: M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)\n  id: SetNamedItem(System.Xml.XmlNode)\n  parent: System.Xml.XmlNamedNodeMap\n  langs:\n  - csharp\n  - vb\n  name: SetNamedItem(XmlNode)\n  fullName: System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetNamedItem\n    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs\n    startLine: 239\n  assemblies:\n  - System.Xml.XmlDocument\n  namespace: System.Xml\n  summary: \"\\n<p>Adds an <xref href=\\\"System.Xml.XmlNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using its <xref href=\\\"System.Xml.XmlNode.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  syntax:\n    content: public virtual XmlNode SetNamedItem(XmlNode node)\n    content.vb: Public Overridable Function SetNamedItem(node As XmlNode) As XmlNode\n    parameters:\n    - id: node\n      type: System.Xml.XmlNode\n      description: \"\\n<p>An <strong>XmlNode</strong> to store in the <strong>XmlNamedNodeMap</strong>. If a node with that name is already present in the map, it is replaced by the new one.</p>\\n\"\n    return:\n      type: System.Xml.XmlNode\n      description: \"\\n<p>If the <em>node</em> replaces an existing node with the same name, the old node is returned; otherwise, <strong>null</strong> is returned.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>node</em> was created from a different <xref href=\\\"System.Xml.XmlDocument\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> than the one that created the <strong>XmlNamedNodeMap</strong>; or the <strong>XmlNamedNodeMap</strong> is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlNamedNodeMap.SetNamedItem(XmlNode)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n  nameWithType: IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  commentId: T:System.Collections.IEnumerator\n  nameWithType: IEnumerator\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.XmlNode\n  parent: System.Xml\n  isExternal: false\n  name: XmlNode\n  fullName: System.Xml.XmlNode\n  commentId: T:System.Xml.XmlNode\n  nameWithType: XmlNode\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}