{"nodes":[{"pos":[489,502],"content":"ProtectedData","needQuote":true,"nodes":[{"content":"ProtectedData","pos":[0,13]}]},{"pos":[2120,2164],"content":"Protect(Byte[], Byte[], DataProtectionScope)","needQuote":true,"nodes":[{"content":"Protect(Byte[], Byte[], DataProtectionScope)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;A byte array that contains data to encrypt.","pos":[3230,3278],"source":"\\n<p>A byte array that contains data to encrypt."},{"content":"&lt;/p&gt;\\n","pos":[3279,3285],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An optional additional byte array used to increase the complexity of the encryption, or &lt;strong&gt;null&lt;/strong&gt; for no additional complexity.&lt;/p&gt;\\n","pos":[3359,3509],"source":"\\n<p>An optional additional byte array used to increase the complexity of the encryption, or <strong>null</strong> for no additional complexity.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the scope of encryption.","pos":[3608,3682],"source":"\\n<p>One of the enumeration values that specifies the scope of encryption."},{"content":"&lt;/p&gt;\\n","pos":[3683,3689],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A byte array representing the encrypted data.&lt;/p&gt;\\n","pos":[3749,3805],"source":"\\n<p>A byte array representing the encrypted data.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;userData&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3924,3992],"source":"\\n<p>The <em>userData</em> parameter is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The encryption failed.&lt;/p&gt;\\n","pos":[4143,4176],"source":"\\n<p>The encryption failed.</p>\\n"},{"content":"\\n&lt;p&gt;The operating system does not support this method.","pos":[4281,4336],"source":"\\n<p>The operating system does not support this method."},{"content":"&lt;/p&gt;\\n","pos":[4337,4343],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The system ran out of memory while encrypting the data.&lt;/p&gt;\\n","pos":[4446,4512],"source":"\\n<p>The system ran out of memory while encrypting the data.</p>\\n"},{"pos":[5555,5601],"content":"Unprotect(Byte[], Byte[], DataProtectionScope)","needQuote":true,"nodes":[{"content":"Unprotect(Byte[], Byte[], DataProtectionScope)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;An optional additional byte array that was used to encrypt the data, or &lt;strong&gt;null&lt;/strong&gt; if the additional byte array was not used.&lt;/p&gt;\\n","pos":[7021,7168],"source":"\\n<p>An optional additional byte array that was used to encrypt the data, or <strong>null</strong> if the additional byte array was not used.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the scope of data protection that was used to encrypt the data.","pos":[7267,7380],"source":"\\n<p>One of the enumeration values that specifies the scope of data protection that was used to encrypt the data."},{"content":"&lt;/p&gt;\\n","pos":[7381,7387],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A byte array representing the decrypted data.&lt;/p&gt;\\n","pos":[7447,7503],"source":"\\n<p>A byte array representing the decrypted data.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;encryptedData&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7622,7695],"source":"\\n<p>The <em>encryptedData</em> parameter is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The decryption failed.&lt;/p&gt;\\n","pos":[7846,7879],"source":"\\n<p>The decryption failed.</p>\\n"},{"content":"\\n&lt;p&gt;The operating system does not support this method.","pos":[7984,8039],"source":"\\n<p>The operating system does not support this method."},{"content":"&lt;/p&gt;\\n","pos":[8040,8046],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Out of memory.&lt;/p&gt;\\n","pos":[8149,8174],"source":"\\n<p>Out of memory.</p>\\n"},{"pos":[8835,8863],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[9060,9066],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9226,9236],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[9331,9339],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9408,9409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9436,9437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9507,9515],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9584,9585],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9612,9613],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9796,9810],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9929,9935],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10002,10003],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10053,10059],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10119,10120],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10203,10209],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10276,10277],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10327,10333],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10393,10394],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10608,10630],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10778,10784],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10851,10852],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10902,10908],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10969,10970]},{"pos":[11025,11031],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11091,11092],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11189,11195],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11262,11263],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11313,11319],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11380,11381]},{"pos":[11436,11442],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11502,11503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11748,11779],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[11945,11960],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12036,12037],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12087,12093],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12154,12155]},{"pos":[12210,12216],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12276,12277],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12383,12398],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12474,12475],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12525,12531],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12592,12593]},{"pos":[12648,12654],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12714,12715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12945,12958],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13059,13070],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13142,13143],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13170,13171],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13244,13255],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13327,13328],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13355,13356],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13531,13540],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13633,13640],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13708,13709],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13736,13737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13806,13813],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13881,13882],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13909,13910],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14085,14102],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[14211,14226],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14302,14303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14330,14331],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14408,14423],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14499,14500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14527,14528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14673,14679],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14773,14779],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[14899,14903],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[14962,14964]},{"pos":[15027,15031],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[15089,15091],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[15281,15300],"content":"DataProtectionScope","needQuote":true,"nodes":[{"content":"DataProtectionScope","pos":[0,19]}]},{"pos":[15526,15547],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[15758,15780],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]},{"pos":[16032,16053],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[16240,16260],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]}],"content":"items:\n- uid: System.Security.Cryptography.ProtectedData\n  commentId: T:System.Security.Cryptography.ProtectedData\n  id: ProtectedData\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)\n  - System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)\n  langs:\n  - csharp\n  - vb\n  name: ProtectedData\n  fullName: System.Security.Cryptography.ProtectedData\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.ProtectedData/ref/System.Security.Cryptography.ProtectedData.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProtectedData\n    path: src/System.Security.Cryptography.ProtectedData/ref/System.Security.Cryptography.ProtectedData.cs\n    startLine: 15\n  assemblies:\n  - System.Security.Cryptography.ProtectedData\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Provides methods for encrypting and decrypting data. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: public class ProtectedData\n    content.vb: Public Class ProtectedData\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ProtectedData\n- uid: System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)\n  commentId: M:System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)\n  id: Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)\n  parent: System.Security.Cryptography.ProtectedData\n  langs:\n  - csharp\n  - vb\n  name: Protect(Byte[], Byte[], DataProtectionScope)\n  fullName: System.Security.Cryptography.ProtectedData.Protect(System.Byte[], System.Byte[], System.Security.Cryptography.DataProtectionScope)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.ProtectedData/ref/System.Security.Cryptography.ProtectedData.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Protect\n    path: src/System.Security.Cryptography.ProtectedData/ref/System.Security.Cryptography.ProtectedData.cs\n    startLine: 17\n  assemblies:\n  - System.Security.Cryptography.ProtectedData\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Encrypts the data in a specified byte array and returns a byte array that contains the encrypted data.</p>\\n\"\n  syntax:\n    content: public static byte[] Protect(byte[] userData, byte[] optionalEntropy, DataProtectionScope scope)\n    content.vb: Public Shared Function Protect(userData As Byte(), optionalEntropy As Byte(), scope As DataProtectionScope) As Byte()\n    parameters:\n    - id: userData\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that contains data to encrypt. </p>\\n\"\n    - id: optionalEntropy\n      type: System.Byte[]\n      description: \"\\n<p>An optional additional byte array used to increase the complexity of the encryption, or <strong>null</strong> for no additional complexity.</p>\\n\"\n    - id: scope\n      type: System.Security.Cryptography.DataProtectionScope\n      description: \"\\n<p>One of the enumeration values that specifies the scope of encryption. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array representing the encrypted data.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>userData</em> parameter is <strong>null</strong>.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The encryption failed.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The operating system does not support this method. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>The system ran out of memory while encrypting the data.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.DataProtectionPermission\n    commentId: T:System.Security.Permissions.DataProtectionPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Security.Cryptography.ProtectedData.Protect(System.Byte(), System.Byte(), System.Security.Cryptography.DataProtectionScope)\n  name.vb: Protect(Byte(), Byte(), DataProtectionScope)\n  nameWithType: ProtectedData.Protect(Byte[], Byte[], DataProtectionScope)\n  nameWithType.vb: ProtectedData.Protect(Byte(), Byte(), DataProtectionScope)\n- uid: System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)\n  commentId: M:System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)\n  id: Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)\n  parent: System.Security.Cryptography.ProtectedData\n  langs:\n  - csharp\n  - vb\n  name: Unprotect(Byte[], Byte[], DataProtectionScope)\n  fullName: System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[], System.Byte[], System.Security.Cryptography.DataProtectionScope)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.ProtectedData/ref/System.Security.Cryptography.ProtectedData.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Unprotect\n    path: src/System.Security.Cryptography.ProtectedData/ref/System.Security.Cryptography.ProtectedData.cs\n    startLine: 18\n  assemblies:\n  - System.Security.Cryptography.ProtectedData\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Decrypts the data in a specified byte array and returns a byte array that contains the decrypted data.</p>\\n\"\n  syntax:\n    content: public static byte[] Unprotect(byte[] encryptedData, byte[] optionalEntropy, DataProtectionScope scope)\n    content.vb: Public Shared Function Unprotect(encryptedData As Byte(), optionalEntropy As Byte(), scope As DataProtectionScope) As Byte()\n    parameters:\n    - id: encryptedData\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing data encrypted using the <xref href=\\\"System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n    - id: optionalEntropy\n      type: System.Byte[]\n      description: \"\\n<p>An optional additional byte array that was used to encrypt the data, or <strong>null</strong> if the additional byte array was not used.</p>\\n\"\n    - id: scope\n      type: System.Security.Cryptography.DataProtectionScope\n      description: \"\\n<p>One of the enumeration values that specifies the scope of data protection that was used to encrypt the data. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array representing the decrypted data.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>encryptedData</em> parameter is <strong>null</strong>.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The decryption failed.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The operating system does not support this method. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Out of memory.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.DataProtectionPermission\n    commentId: T:System.Security.Permissions.DataProtectionPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Security.Cryptography.ProtectedData.Unprotect(System.Byte(), System.Byte(), System.Security.Cryptography.DataProtectionScope)\n  name.vb: Unprotect(Byte(), Byte(), DataProtectionScope)\n  nameWithType: ProtectedData.Unprotect(Byte[], Byte[], DataProtectionScope)\n  nameWithType.vb: ProtectedData.Unprotect(Byte(), Byte(), DataProtectionScope)\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.DataProtectionScope\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DataProtectionScope\n  fullName: System.Security.Cryptography.DataProtectionScope\n  commentId: T:System.Security.Cryptography.DataProtectionScope\n  nameWithType: DataProtectionScope\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n"}