{"nodes":[{"pos":[493,505],"content":"SourceFilter","needQuote":true,"nodes":[{"content":"SourceFilter","pos":[0,12]}]},{"pos":[1903,1923],"content":"SourceFilter(String)","needQuote":true,"nodes":[{"content":"SourceFilter(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The name of the trace source.&lt;/p&gt;\\n","pos":[2776,2816],"source":"\\n<p>The name of the trace source.</p>\\n"},{"pos":[3116,3122],"content":"Source","needQuote":true,"nodes":[{"content":"Source","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The name of the trace source.&lt;/p&gt;\\n","pos":[3818,3858],"source":"\\n<p>The name of the trace source.</p>\\n"},{"content":"\\n&lt;p&gt;The value is &lt;strong&gt;null&lt;/strong&gt;.","pos":[3977,4017],"source":"\\n<p>The value is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[4018,4024],"source":" </p>\\n"},{"pos":[4812,4907],"content":"ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])","needQuote":true,"nodes":[{"content":"ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])","pos":[0,95]}]},{"content":"\\n&lt;p&gt;An object that represents the information cache for the trace event.&lt;/p&gt;\\n","pos":[6138,6217],"source":"\\n<p>An object that represents the information cache for the trace event.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the source.&lt;/p&gt;\\n","pos":[6282,6316],"source":"\\n<p>The name of the source.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that identifies the event type.","pos":[6404,6470],"source":"\\n<p>One of the enumeration values that identifies the event type."},{"content":"&lt;/p&gt;\\n","pos":[6471,6477],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A trace identifier number.&lt;/p&gt;\\n","pos":[6537,6574],"source":"\\n<p>A trace identifier number.</p>\\n"},{"content":"\\n&lt;p&gt;The format to use for writing an array of arguments or a message to write.&lt;/p&gt;\\n","pos":[6648,6733],"source":"\\n<p>The format to use for writing an array of arguments or a message to write.</p>\\n"},{"content":"\\n&lt;p&gt;An array of argument objects.&lt;/p&gt;\\n","pos":[6798,6838],"source":"\\n<p>An array of argument objects.</p>\\n"},{"content":"\\n&lt;p&gt;A trace data object.&lt;/p&gt;\\n","pos":[6902,6933],"source":"\\n<p>A trace data object.</p>\\n"},{"content":"\\n&lt;p&gt;An array of trace data objects.&lt;/p&gt;\\n","pos":[6998,7040],"source":"\\n<p>An array of trace data objects.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the trace should be produced; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[7101,7197],"source":"\\n<p>\\n<strong>true</strong> if the trace should be produced; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7198,7204],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[7537,7585],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7586,7592],"source":" </p>\\n"},{"pos":[8328,8346],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[8513,8519],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8693,8704],"content":"TraceFilter","needQuote":true,"nodes":[{"content":"TraceFilter","pos":[0,11]}]},{"pos":[8903,8913],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[9008,9016],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9085,9086],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9113,9114],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9184,9192],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9261,9262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9289,9290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9473,9487],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9606,9612],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9679,9680],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9730,9736],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9796,9797],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9880,9886],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9953,9954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10004,10010],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10070,10071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10285,10307],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10455,10461],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10528,10529],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10579,10585],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10646,10647]},{"pos":[10702,10708],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10768,10769],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10866,10872],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10939,10940],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10990,10996],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11057,11058]},{"pos":[11113,11119],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11179,11180],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11425,11456],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[11622,11637],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11713,11714],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11764,11770],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11831,11832]},{"pos":[11887,11893],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11953,11954],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12060,12075],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12151,12152],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12202,12208],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12269,12270]},{"pos":[12325,12331],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12391,12392],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12622,12635],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[12736,12747],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[12819,12820],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12847,12848],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12921,12932],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13004,13005],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13032,13033],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13208,13217],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13310,13317],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13385,13386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13413,13414],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13483,13490],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13558,13559],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13586,13587],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13762,13779],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[13888,13903],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13979,13980],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14007,14008],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14085,14100],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14176,14177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14204,14205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14350,14356],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14487,14493],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[14847,14942],"content":"ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])","needQuote":true,"nodes":[{"content":"ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])","pos":[0,95]}]},{"pos":[15725,15736],"content":"ShouldTrace","needQuote":true,"nodes":[{"content":"ShouldTrace","pos":[0,11]}]},{"pos":[15804,15805],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15876,15891],"content":"TraceEventCache","needQuote":true,"nodes":[{"content":"TraceEventCache","pos":[0,15]}]},{"content":",","pos":[15952,15953]},{"pos":[16008,16014],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[16075,16076]},{"pos":[16151,16165],"content":"TraceEventType","needQuote":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"content":",","pos":[16225,16226]},{"pos":[16280,16285],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[16345,16346]},{"pos":[16401,16407],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[16468,16469]},{"pos":[16524,16530],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[16591,16593]},{"content":",","pos":[16625,16626]},{"pos":[16681,16687],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16748,16749]},{"pos":[16804,16810],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[16871,16873]},{"pos":[16904,16905],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17152,17163],"content":"ShouldTrace","needQuote":true,"nodes":[{"content":"ShouldTrace","pos":[0,11]}]},{"pos":[17231,17232],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17303,17318],"content":"TraceEventCache","needQuote":true,"nodes":[{"content":"TraceEventCache","pos":[0,15]}]},{"content":",","pos":[17379,17380]},{"pos":[17435,17441],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[17502,17503]},{"pos":[17578,17592],"content":"TraceEventType","needQuote":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"content":",","pos":[17652,17653]},{"pos":[17707,17712],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[17772,17773]},{"pos":[17828,17834],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[17895,17896]},{"pos":[17951,17957],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18017,18019],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[18048,18049]},{"pos":[18104,18110],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18171,18172]},{"pos":[18227,18233],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18293,18295],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[18323,18324],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18906,18921],"content":"TraceEventCache","needQuote":true,"nodes":[{"content":"TraceEventCache","pos":[0,15]}]},{"pos":[19149,19163],"content":"TraceEventType","needQuote":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"pos":[19355,19360],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19467,19475],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[19603,19609],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[19670,19672]},{"pos":[19737,19743],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19803,19805],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[19943,19950],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20096,20117],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Diagnostics.SourceFilter\n  commentId: T:System.Diagnostics.SourceFilter\n  id: SourceFilter\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.SourceFilter.#ctor(System.String)\n  - System.Diagnostics.SourceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  - System.Diagnostics.SourceFilter.Source\n  langs:\n  - csharp\n  - vb\n  name: SourceFilter\n  fullName: System.Diagnostics.SourceFilter\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceFilter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SourceFilter\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceFilter.cs\n    startLine: 9\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Indicates whether a listener should trace a message based on the source of a trace.</p>\\n\"\n  syntax:\n    content: 'public class SourceFilter : TraceFilter'\n    content.vb: >-\n      Public Class SourceFilter\n          Inherits TraceFilter\n  inheritance:\n  - System.Object\n  - System.Diagnostics.TraceFilter\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: SourceFilter\n- uid: System.Diagnostics.SourceFilter.#ctor(System.String)\n  commentId: M:System.Diagnostics.SourceFilter.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.SourceFilter\n  langs:\n  - csharp\n  - vb\n  name: SourceFilter(String)\n  fullName: System.Diagnostics.SourceFilter.SourceFilter(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceFilter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceFilter.cs\n    startLine: 13\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.SourceFilter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the name of the trace source. </p>\\n\"\n  syntax:\n    content: public SourceFilter(string source)\n    content.vb: Public Sub New(source As String)\n    parameters:\n    - id: source\n      type: System.String\n      description: \"\\n<p>The name of the trace source.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SourceFilter.SourceFilter(String)\n- uid: System.Diagnostics.SourceFilter.Source\n  commentId: P:System.Diagnostics.SourceFilter.Source\n  id: Source\n  parent: System.Diagnostics.SourceFilter\n  langs:\n  - csharp\n  - vb\n  name: Source\n  fullName: System.Diagnostics.SourceFilter.Source\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceFilter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Source\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceFilter.cs\n    startLine: 27\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the name of the trace source.</p>\\n\"\n  syntax:\n    content: public string Source { get; set; }\n    content.vb: Public Property Source As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the trace source.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SourceFilter.Source\n- uid: System.Diagnostics.SourceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  commentId: M:System.Diagnostics.SourceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  id: ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  parent: System.Diagnostics.SourceFilter\n  langs:\n  - csharp\n  - vb\n  name: ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])\n  fullName: System.Diagnostics.SourceFilter.ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[], System.Object, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceFilter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ShouldTrace\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceFilter.cs\n    startLine: 18\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Determines whether the trace listener should trace the event.</p>\\n\"\n  syntax:\n    content: public override bool ShouldTrace(TraceEventCache cache, string source, TraceEventType eventType, int id, string formatOrMessage, object[] args, object data1, object[] data)\n    content.vb: Public Overrides Function ShouldTrace(cache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, formatOrMessage As String, args As Object(), data1 As Object, data As Object()) As Boolean\n    parameters:\n    - id: cache\n      type: System.Diagnostics.TraceEventCache\n      description: \"\\n<p>An object that represents the information cache for the trace event.</p>\\n\"\n    - id: source\n      type: System.String\n      description: \"\\n<p>The name of the source.</p>\\n\"\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the enumeration values that identifies the event type. </p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A trace identifier number.</p>\\n\"\n    - id: formatOrMessage\n      type: System.String\n      description: \"\\n<p>The format to use for writing an array of arguments or a message to write.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An array of argument objects.</p>\\n\"\n    - id: data1\n      type: System.Object\n      description: \"\\n<p>A trace data object.</p>\\n\"\n    - id: data\n      type: System.Object[]\n      description: \"\\n<p>An array of trace data objects.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the trace should be produced; otherwise, <strong>false</strong>. </p>\\n\"\n  overridden: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Diagnostics.SourceFilter.ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object(), System.Object, System.Object())\n  name.vb: ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object(), Object, Object())\n  nameWithType: SourceFilter.ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])\n  nameWithType.vb: SourceFilter.ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object(), Object, Object())\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Diagnostics.TraceFilter\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceFilter\n  fullName: System.Diagnostics.TraceFilter\n  nameWithType: TraceFilter\n  commentId: T:System.Diagnostics.TraceFilter\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  parent: System.Diagnostics.TraceFilter\n  isExternal: true\n  name: ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])\n  fullName: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[], System.Object, System.Object[])\n  fullname.vb: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object(), System.Object, System.Object())\n  name.vb: ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object(), Object, Object())\n  spec.csharp:\n  - uid: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n    name: ShouldTrace\n    fullName: System.Diagnostics.TraceFilter.ShouldTrace\n  - name: (\n    fullName: (\n  - uid: System.Diagnostics.TraceEventCache\n    name: TraceEventCache\n    fullName: System.Diagnostics.TraceEventCache\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Diagnostics.TraceEventType\n    name: TraceEventType\n    fullName: System.Diagnostics.TraceEventType\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n    name: ShouldTrace\n    fullName: System.Diagnostics.TraceFilter.ShouldTrace\n  - name: (\n    fullName: (\n  - uid: System.Diagnostics.TraceEventCache\n    name: TraceEventCache\n    fullName: System.Diagnostics.TraceEventCache\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Diagnostics.TraceEventType\n    name: TraceEventType\n    fullName: System.Diagnostics.TraceEventType\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: TraceFilter.ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])\n  nameWithType.vb: TraceFilter.ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object(), Object, Object())\n  commentId: M:System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n- uid: System.Diagnostics.TraceEventCache\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventCache\n  fullName: System.Diagnostics.TraceEventCache\n  nameWithType: TraceEventCache\n  commentId: T:System.Diagnostics.TraceEventCache\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n  nameWithType: TraceEventType\n  commentId: T:System.Diagnostics.TraceEventType\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}