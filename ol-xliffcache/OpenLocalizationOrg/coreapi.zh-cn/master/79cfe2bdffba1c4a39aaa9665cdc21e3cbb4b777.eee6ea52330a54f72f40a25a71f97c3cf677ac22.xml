{"nodes":[{"pos":[11373,11380],"content":"Marshal","needQuote":true,"nodes":[{"content":"Marshal","pos":[0,7]}]},{"pos":[12890,12911],"content":"SystemDefaultCharSize","needQuote":true,"nodes":[{"content":"SystemDefaultCharSize","pos":[0,21]}]},{"pos":[14683,14704],"content":"SystemMaxDBCSCharSize","needQuote":true,"nodes":[{"content":"SystemMaxDBCSCharSize","pos":[0,21]}]},{"pos":[16286,16300],"content":"AddRef(IntPtr)","needQuote":true,"nodes":[{"content":"AddRef(IntPtr)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The interface reference count to increment.&lt;/p&gt;\\n","pos":[17014,17068],"source":"\\n<p>The interface reference count to increment.</p>\\n"},{"content":"\\n&lt;p&gt;The new value of the reference count on the &lt;em&gt;pUnk&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[17127,17206],"source":"\\n<p>The new value of the reference count on the <em>pUnk</em> parameter.</p>\\n"},{"pos":[18812,18833],"content":"AllocCoTaskMem(Int32)","needQuote":true,"nodes":[{"content":"AllocCoTaskMem(Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The size of the block of memory to be allocated.&lt;/p&gt;\\n","pos":[19694,19753],"source":"\\n<p>The size of the block of memory to be allocated.</p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory to satisfy the request.&lt;/p&gt;\\n","pos":[20173,20236],"source":"\\n<p>There is insufficient memory to satisfy the request.</p>\\n"},{"pos":[21230,21249],"content":"AllocHGlobal(Int32)","needQuote":true,"nodes":[{"content":"AllocHGlobal(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The required number of bytes in memory.&lt;/p&gt;\\n","pos":[22268,22318],"source":"\\n<p>The required number of bytes in memory.</p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory to satisfy the request.&lt;/p&gt;\\n","pos":[22719,22782],"source":"\\n<p>There is insufficient memory to satisfy the request.</p>\\n"},{"pos":[23775,23795],"content":"AllocHGlobal(IntPtr)","needQuote":true,"nodes":[{"content":"AllocHGlobal(IntPtr)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The required number of bytes in memory.&lt;/p&gt;\\n","pos":[24833,24883],"source":"\\n<p>The required number of bytes in memory.</p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory to satisfy the request.&lt;/p&gt;\\n","pos":[25284,25347],"source":"\\n<p>There is insufficient memory to satisfy the request.</p>\\n"},{"pos":[26356,26390],"content":"AreComObjectsAvailableForCleanup()","needQuote":true,"nodes":[{"content":"AreComObjectsAvailableForCleanup()","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if there are any RCWs available for cleanup; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27161,27275],"source":"\\n<p>\\n<strong>true</strong> if there are any RCWs available for cleanup; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[28046,28080],"content":"Copy(Byte[], Int32, IntPtr, Int32)","needQuote":true,"nodes":[{"content":"Copy(Byte[], Int32, IntPtr, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The one-dimensional array to copy from.&lt;/p&gt;\\n","pos":[29078,29128],"source":"\\n<p>The one-dimensional array to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the source array where copying should start.&lt;/p&gt;\\n","pos":[29196,29275],"source":"\\n<p>The zero-based index in the source array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The memory pointer to copy to.&lt;/p&gt;\\n","pos":[29345,29386],"source":"\\n<p>The memory pointer to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[29450,29498],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; are not valid.&lt;/p&gt;\\n","pos":[29629,29696],"source":"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29801,29918],"source":"\\n<p>\\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[30914,30948],"content":"Copy(Char[], Int32, IntPtr, Int32)","needQuote":true,"nodes":[{"content":"Copy(Char[], Int32, IntPtr, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The one-dimensional array to copy from.&lt;/p&gt;\\n","pos":[31933,31983],"source":"\\n<p>The one-dimensional array to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the source array where copying should start.&lt;/p&gt;\\n","pos":[32051,32130],"source":"\\n<p>The zero-based index in the source array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The memory pointer to copy to.&lt;/p&gt;\\n","pos":[32200,32241],"source":"\\n<p>The memory pointer to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[32305,32353],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; are not valid.&lt;/p&gt;\\n","pos":[32484,32551],"source":"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32656,32756],"source":"\\n<p>\\n<em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[33758,33794],"content":"Copy(Double[], Int32, IntPtr, Int32)","needQuote":true,"nodes":[{"content":"Copy(Double[], Int32, IntPtr, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The one-dimensional array to copy from.&lt;/p&gt;\\n","pos":[34816,34866],"source":"\\n<p>The one-dimensional array to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the source array where copying should start.&lt;/p&gt;\\n","pos":[34934,35013],"source":"\\n<p>The zero-based index in the source array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The memory pointer to copy to.&lt;/p&gt;\\n","pos":[35083,35124],"source":"\\n<p>The memory pointer to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[35188,35236],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; are not valid.&lt;/p&gt;\\n","pos":[35367,35434],"source":"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35539,35656],"source":"\\n<p>\\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[36663,36698],"content":"Copy(Int16[], Int32, IntPtr, Int32)","needQuote":true,"nodes":[{"content":"Copy(Int16[], Int32, IntPtr, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The one-dimensional array to copy from.&lt;/p&gt;\\n","pos":[37699,37749],"source":"\\n<p>The one-dimensional array to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the source array where copying should start.&lt;/p&gt;\\n","pos":[37817,37896],"source":"\\n<p>The zero-based index in the source array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The memory pointer to copy to.&lt;/p&gt;\\n","pos":[37966,38007],"source":"\\n<p>The memory pointer to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[38071,38119],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; are not valid.&lt;/p&gt;\\n","pos":[38250,38317],"source":"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38422,38539],"source":"\\n<p>\\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[39542,39577],"content":"Copy(Int32[], Int32, IntPtr, Int32)","needQuote":true,"nodes":[{"content":"Copy(Int32[], Int32, IntPtr, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The one-dimensional array to copy from.&lt;/p&gt;\\n","pos":[40578,40628],"source":"\\n<p>The one-dimensional array to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the source array where copying should start.&lt;/p&gt;\\n","pos":[40696,40775],"source":"\\n<p>The zero-based index in the source array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The memory pointer to copy to.&lt;/p&gt;\\n","pos":[40845,40886],"source":"\\n<p>The memory pointer to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[40950,40998],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; are not valid.&lt;/p&gt;\\n","pos":[41129,41196],"source":"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[41301,41378],"source":"\\n<p>\\n<em>startIndex</em> or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[42381,42416],"content":"Copy(Int64[], Int32, IntPtr, Int32)","needQuote":true,"nodes":[{"content":"Copy(Int64[], Int32, IntPtr, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The one-dimensional array to copy from.&lt;/p&gt;\\n","pos":[43415,43465],"source":"\\n<p>The one-dimensional array to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the source array where copying should start.&lt;/p&gt;\\n","pos":[43533,43612],"source":"\\n<p>The zero-based index in the source array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The memory pointer to copy to.&lt;/p&gt;\\n","pos":[43682,43723],"source":"\\n<p>The memory pointer to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[43787,43835],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; are not valid.&lt;/p&gt;\\n","pos":[43966,44033],"source":"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44138,44255],"source":"\\n<p>\\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[45255,45289],"content":"Copy(IntPtr, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Copy(IntPtr, Byte[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The memory pointer to copy from.&lt;/p&gt;\\n","pos":[46270,46313],"source":"\\n<p>The memory pointer to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The array to copy to.&lt;/p&gt;\\n","pos":[46383,46415],"source":"\\n<p>The array to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the destination array where copying should start.&lt;/p&gt;\\n","pos":[46483,46567],"source":"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[46631,46679],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[46798,46915],"source":"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[48149,48183],"content":"Copy(IntPtr, Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Copy(IntPtr, Char[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The memory pointer to copy from.&lt;/p&gt;\\n","pos":[49151,49194],"source":"\\n<p>The memory pointer to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The array to copy to.&lt;/p&gt;\\n","pos":[49264,49296],"source":"\\n<p>The array to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the destination array where copying should start.&lt;/p&gt;\\n","pos":[49364,49448],"source":"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[49512,49560],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[49679,49796],"source":"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[51036,51072],"content":"Copy(IntPtr, Double[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Copy(IntPtr, Double[], Int32, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The memory pointer to copy from.&lt;/p&gt;\\n","pos":[52075,52118],"source":"\\n<p>The memory pointer to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The array to copy to.&lt;/p&gt;\\n","pos":[52190,52222],"source":"\\n<p>The array to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the destination array where copying should start.&lt;/p&gt;\\n","pos":[52290,52374],"source":"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[52438,52486],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[52605,52722],"source":"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[53967,54002],"content":"Copy(IntPtr, Int16[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Copy(IntPtr, Int16[], Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The memory pointer to copy from.&lt;/p&gt;\\n","pos":[54985,55028],"source":"\\n<p>The memory pointer to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The array to copy to.&lt;/p&gt;\\n","pos":[55099,55131],"source":"\\n<p>The array to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the destination array where copying should start.&lt;/p&gt;\\n","pos":[55199,55283],"source":"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[55347,55395],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[55514,55631],"source":"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[56872,56907],"content":"Copy(IntPtr, Int32[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Copy(IntPtr, Int32[], Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The memory pointer to copy from.&lt;/p&gt;\\n","pos":[57890,57933],"source":"\\n<p>The memory pointer to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The array to copy to.&lt;/p&gt;\\n","pos":[58004,58036],"source":"\\n<p>The array to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the destination array where copying should start.&lt;/p&gt;\\n","pos":[58104,58188],"source":"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[58252,58300],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[58419,58536],"source":"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[59777,59812],"content":"Copy(IntPtr, Int64[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Copy(IntPtr, Int64[], Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The memory pointer to copy from.&lt;/p&gt;\\n","pos":[60793,60836],"source":"\\n<p>The memory pointer to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The array to copy to.&lt;/p&gt;\\n","pos":[60907,60939],"source":"\\n<p>The array to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the destination array where copying should start.&lt;/p&gt;\\n","pos":[61007,61091],"source":"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[61155,61203],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[61322,61439],"source":"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[62683,62719],"content":"Copy(IntPtr, IntPtr[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Copy(IntPtr, IntPtr[], Int32, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The memory pointer to copy from.","pos":[63757,63794],"source":"\\n<p>The memory pointer to copy from."},{"content":"&lt;/p&gt;\\n","pos":[63795,63801],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The array to copy to.&lt;/p&gt;\\n","pos":[63873,63905],"source":"\\n<p>The array to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the destination array where copying should start.&lt;/p&gt;\\n","pos":[63973,64057],"source":"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[64121,64169],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[64288,64405],"source":"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[65415,65451],"content":"Copy(IntPtr, Single[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Copy(IntPtr, Single[], Int32, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The memory pointer to copy from.","pos":[66453,66490],"source":"\\n<p>The memory pointer to copy from."},{"content":"&lt;/p&gt;\\n","pos":[66491,66497],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The array to copy to.","pos":[66569,66595],"source":"\\n<p>The array to copy to."},{"content":"&lt;/p&gt;\\n","pos":[66596,66602],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the destination array where copying should start.","pos":[66670,66748],"source":"\\n<p>The zero-based index in the destination array where copying should start."},{"content":"&lt;/p&gt;\\n","pos":[66749,66755],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.","pos":[66819,66861],"source":"\\n<p>The number of array elements to copy."},{"content":"&lt;/p&gt;\\n","pos":[66862,66868],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[66987,67098],"source":"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[67099,67105],"source":" </p>\\n"},{"pos":[68353,68389],"content":"Copy(IntPtr[], Int32, IntPtr, Int32)","needQuote":true,"nodes":[{"content":"Copy(IntPtr[], Int32, IntPtr, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The one-dimensional array to copy from.&lt;/p&gt;\\n","pos":[69446,69496],"source":"\\n<p>The one-dimensional array to copy from.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the source array where copying should start.&lt;/p&gt;\\n","pos":[69564,69643],"source":"\\n<p>The zero-based index in the source array where copying should start.</p>\\n"},{"content":"\\n&lt;p&gt;The memory pointer to copy to.&lt;/p&gt;\\n","pos":[69713,69754],"source":"\\n<p>The memory pointer to copy to.</p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.&lt;/p&gt;\\n","pos":[69818,69866],"source":"\\n<p>The number of array elements to copy.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[69985,70102],"source":"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n"},{"pos":[71112,71148],"content":"Copy(Single[], Int32, IntPtr, Int32)","needQuote":true,"nodes":[{"content":"Copy(Single[], Int32, IntPtr, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The one-dimensional array to copy from.","pos":[72169,72213],"source":"\\n<p>The one-dimensional array to copy from."},{"content":"&lt;/p&gt;\\n","pos":[72214,72220],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in the source array where copying should start.","pos":[72288,72361],"source":"\\n<p>The zero-based index in the source array where copying should start."},{"content":"&lt;/p&gt;\\n","pos":[72362,72368],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The memory pointer to copy to.","pos":[72438,72473],"source":"\\n<p>The memory pointer to copy to."},{"content":"&lt;/p&gt;\\n","pos":[72474,72480],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements to copy.","pos":[72544,72586],"source":"\\n<p>The number of array elements to copy."},{"content":"&lt;/p&gt;\\n","pos":[72587,72593],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; are not valid.","pos":[72724,72785],"source":"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid."},{"content":"&lt;/p&gt;\\n","pos":[72786,72792],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt;, &lt;em&gt;startIndex&lt;/em&gt;, &lt;em&gt;destination&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[72897,73008],"source":"\\n<p>\\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[73009,73015],"source":" </p>\\n"},{"pos":[73995,74033],"content":"CreateAggregatedObject(IntPtr, Object)","needQuote":true,"nodes":[{"content":"CreateAggregatedObject(IntPtr, Object)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The outer &lt;strong&gt;IUnknown&lt;/strong&gt; pointer.&lt;/p&gt;\\n","pos":[74841,74896],"source":"\\n<p>The outer <strong>IUnknown</strong> pointer.</p>\\n"},{"content":"\\n&lt;p&gt;An object to aggregate.&lt;/p&gt;\\n","pos":[74956,74990],"source":"\\n<p>An object to aggregate.</p>\\n"},{"content":"\\n&lt;p&gt;The inner &lt;strong&gt;IUnknown&lt;/strong&gt; pointer of the managed object.&lt;/p&gt;\\n","pos":[75050,75127],"source":"\\n<p>The inner <strong>IUnknown</strong> pointer of the managed object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;o&lt;/em&gt; is a Windows Runtime object.&lt;/p&gt;\\n","pos":[75238,75290],"source":"\\n<p>\\n<em>o</em> is a Windows Runtime object.</p>\\n"},{"pos":[76361,76397],"content":"CreateAggregatedObject<T>(IntPtr, T)","needQuote":true,"nodes":[{"content":"CreateAggregatedObject&lt;T&gt;(IntPtr, T)","pos":[0,36],"source":"CreateAggregatedObject<T>(IntPtr, T)"}]},{"content":"\\n&lt;p&gt;The managed object to aggregate.","pos":[77559,77596],"source":"\\n<p>The managed object to aggregate."},{"content":"&lt;/p&gt;\\n","pos":[77597,77603],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the managed object to aggregate.","pos":[77657,77706],"source":"\\n<p>The type of the managed object to aggregate."},{"content":"&lt;/p&gt;\\n","pos":[77707,77713],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;o&lt;/em&gt; is a Windows Runtime object.","pos":[78011,78057],"source":"\\n<p>\\n<em>o</em> is a Windows Runtime object."},{"content":"&lt;/p&gt;\\n","pos":[78058,78064],"source":" </p>\\n"},{"pos":[79017,79050],"content":"CreateWrapperOfType(Object, Type)","needQuote":true,"nodes":[{"content":"CreateWrapperOfType(Object, Type)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The object to be wrapped.","pos":[79949,79979],"source":"\\n<p>The object to be wrapped."},{"content":"&lt;/p&gt;\\n","pos":[79980,79986],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of wrapper to create.","pos":[80044,80079],"source":"\\n<p>The type of wrapper to create."},{"content":"&lt;/p&gt;\\n","pos":[80080,80086],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The newly wrapped object that is an instance of the desired type.&lt;/p&gt;\\n","pos":[80146,80222],"source":"\\n<p>The newly wrapped object that is an instance of the desired type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;t&lt;/em&gt; must derive from &lt;strong&gt;__ComObject&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;t&lt;/em&gt; is a Windows Runtime type.&lt;/p&gt;\\n","pos":[80333,80464],"source":"\\n<p>\\n<em>t</em> must derive from <strong>__ComObject</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>t</em> is a Windows Runtime type.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;t&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[80569,80630],"source":"\\n<p>The <em>t</em> parameter is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;o&lt;/em&gt; cannot be converted to the destination type because it does not support all required interfaces.","pos":[80733,80847],"source":"\\n<p>\\n<em>o</em> cannot be converted to the destination type because it does not support all required interfaces."},{"content":"&lt;/p&gt;\\n","pos":[80848,80854],"source":" </p>\\n"},{"pos":[81994,82029],"content":"CreateWrapperOfType<T, TWrapper>(T)","needQuote":true,"nodes":[{"content":"CreateWrapperOfType&lt;T, TWrapper&gt;(T)","pos":[0,35],"source":"CreateWrapperOfType<T, TWrapper>(T)"}]},{"content":"\\n&lt;p&gt;The object to be wrapped.","pos":[82980,83010],"source":"\\n<p>The object to be wrapped."},{"content":"&lt;/p&gt;\\n","pos":[83011,83017],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of object to wrap.","pos":[83071,83103],"source":"\\n<p>The type of object to wrap."},{"content":"&lt;/p&gt;\\n","pos":[83104,83110],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of object to return.","pos":[83151,83185],"source":"\\n<p>The type of object to return."},{"content":"&lt;/p&gt;\\n","pos":[83186,83192],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The newly wrapped object.","pos":[83251,83281],"source":"\\n<p>The newly wrapped object."},{"content":"&lt;/p&gt;\\n","pos":[83282,83288],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;T&lt;/em&gt; must derive from &lt;strong&gt;__ComObject&lt;/strong&gt;.","pos":[83399,83463],"source":"\\n<p>\\n<em>T</em> must derive from <strong>__ComObject</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;T&lt;/em&gt; is a Windows Runtime type.&lt;/p&gt;\\n","pos":[83464,83531],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>T</em> is a Windows Runtime type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;o&lt;/em&gt; cannot be converted to the &lt;em&gt;TWrapper&lt;/em&gt; because it does not support all required interfaces.","pos":[83634,83749],"source":"\\n<p>\\n<em>o</em> cannot be converted to the <em>TWrapper</em> because it does not support all required interfaces."},{"content":"&lt;/p&gt;\\n","pos":[83750,83756],"source":" </p>\\n"},{"pos":[84689,84719],"content":"DestroyStructure(IntPtr, Type)","needQuote":true,"nodes":[{"content":"DestroyStructure(IntPtr, Type)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A pointer to an unmanaged block of memory.","pos":[85571,85618],"source":"\\n<p>A pointer to an unmanaged block of memory."},{"content":"&lt;/p&gt;\\n","pos":[85619,85625],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Type of a formatted class.","pos":[85695,85726],"source":"\\n<p>Type of a formatted class."},{"content":"This provides the layout information necessary to delete the buffer in the &lt;em&gt;ptr&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[85727,85831],"source":" This provides the layout information necessary to delete the buffer in the <em>ptr</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;structureType&lt;/em&gt; has an automatic layout.","pos":[85942,85996],"source":"\\n<p>\\n<em>structureType</em> has an automatic layout."},{"content":"Use sequential or explicit instead.&lt;/p&gt;\\n","pos":[85997,86038],"source":" Use sequential or explicit instead.</p>\\n"},{"pos":[87387,87414],"content":"DestroyStructure<T>(IntPtr)","needQuote":true,"nodes":[{"content":"DestroyStructure&lt;T&gt;(IntPtr)","pos":[0,27],"source":"DestroyStructure<T>(IntPtr)"}]},{"content":"\\n&lt;p&gt;A pointer to an unmanaged block of memory.","pos":[88369,88416],"source":"\\n<p>A pointer to an unmanaged block of memory."},{"content":"&lt;/p&gt;\\n","pos":[88417,88423],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the formatted structure.","pos":[88477,88518],"source":"\\n<p>The type of the formatted structure."},{"content":"This provides the layout information necessary to delete the buffer in the &lt;em&gt;ptr&lt;/em&gt; parameter.","pos":[88519,88617],"source":" This provides the layout information necessary to delete the buffer in the <em>ptr</em> parameter."},{"content":"&lt;/p&gt;\\n","pos":[88618,88624],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;T&lt;/em&gt; has an automatic layout.","pos":[88735,88777],"source":"\\n<p>\\n<em>T</em> has an automatic layout."},{"content":"Use sequential or explicit instead.","pos":[88778,88813]},{"content":"&lt;/p&gt;\\n","pos":[88814,88820],"source":" </p>\\n"},{"pos":[89707,89736],"content":"FinalReleaseComObject(Object)","needQuote":true,"nodes":[{"content":"FinalReleaseComObject(Object)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The RCW to be released.&lt;/p&gt;\\n","pos":[90639,90673],"source":"\\n<p>The RCW to be released.</p>\\n"},{"content":"\\n&lt;p&gt;The new value of the reference count of the RCW associated with the &lt;em&gt;o&lt;/em&gt;&lt;em&gt;&lt;/em&gt;parameter, which is 0 (zero) if the release is successful.&lt;/p&gt;\\n","pos":[90732,90888],"source":"\\n<p>The new value of the reference count of the RCW associated with the <em>o</em><em></em>parameter, which is 0 (zero) if the release is successful.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;o&lt;/em&gt; is not a valid COM object.&lt;/p&gt;\\n","pos":[90999,91049],"source":"\\n<p>\\n<em>o</em> is not a valid COM object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;o&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[91154,91203],"source":"\\n<p>\\n<em>o</em> is <strong>null</strong>.</p>\\n"},{"pos":[92128,92144],"content":"FreeBSTR(IntPtr)","needQuote":true,"nodes":[{"content":"FreeBSTR(IntPtr)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The address of the BSTR to be freed.","pos":[93023,93064],"source":"\\n<p>The address of the BSTR to be freed."},{"content":"&lt;/p&gt;\\n","pos":[93065,93071],"source":" </p>\\n"},{"pos":[94064,94085],"content":"FreeCoTaskMem(IntPtr)","needQuote":true,"nodes":[{"content":"FreeCoTaskMem(IntPtr)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The address of the memory to be freed.","pos":[94928,94971],"source":"\\n<p>The address of the memory to be freed."},{"content":"&lt;/p&gt;\\n","pos":[94972,94978],"source":" </p>\\n"},{"pos":[96358,96377],"content":"FreeHGlobal(IntPtr)","needQuote":true,"nodes":[{"content":"FreeHGlobal(IntPtr)","pos":[0,19]}]},{"pos":[98661,98699],"content":"GetComInterfaceForObject(Object, Type)","needQuote":true,"nodes":[{"content":"GetComInterfaceForObject(Object, Type)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The object that provides the interface.","pos":[99778,99822],"source":"\\n<p>The object that provides the interface."},{"content":"&lt;/p&gt;\\n","pos":[99823,99829],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of interface that is requested.","pos":[99887,99932],"source":"\\n<p>The type of interface that is requested."},{"content":"&lt;/p&gt;\\n","pos":[99933,99939],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The interface pointer that represents the specified interface for the object.&lt;/p&gt;\\n","pos":[99999,100087],"source":"\\n<p>The interface pointer that represents the specified interface for the object.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;T&lt;/em&gt; parameter is not an interface.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The type is not visible to COM.","pos":[100198,100301],"source":"\\n<p>The <em>T</em> parameter is not an interface.</p>\\n<p>-or-</p>\\n<p>The type is not visible to COM."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;T&lt;/em&gt; parameter is a generic type.&lt;/p&gt;\\n","pos":[100302,100373],"source":" </p>\\n<p>-or-</p>\\n<p>The <em>T</em> parameter is a generic type.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;o&lt;/em&gt; parameter does not support the requested interface.","pos":[100476,100547],"source":"\\n<p>The <em>o</em> parameter does not support the requested interface."},{"content":"&lt;/p&gt;\\n","pos":[100548,100554],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;o&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;T&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[100659,100793],"source":"\\n<p>The <em>o</em> parameter is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>The <em>T</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[102894,102958],"content":"GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)","needQuote":true,"nodes":[{"content":"GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)","pos":[0,64]}]},{"content":"\\n&lt;p&gt;The object that provides the interface.&lt;/p&gt;\\n","pos":[104187,104237],"source":"\\n<p>The object that provides the interface.</p>\\n"},{"content":"\\n&lt;p&gt;The type of interface that is requested.&lt;/p&gt;\\n","pos":[104295,104346],"source":"\\n<p>The type of interface that is requested.</p>\\n"},{"content":"\\n&lt;p&gt;The interface pointer that represents the interface for the object.&lt;/p&gt;\\n","pos":[104779,104857],"source":"\\n<p>The interface pointer that represents the interface for the object.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;T&lt;/em&gt; parameter is not an interface.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The type is not visible to COM.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;T&lt;/em&gt; parameter is a generic type.&lt;/p&gt;\\n","pos":[104968,105143],"source":"\\n<p>The <em>T</em> parameter is not an interface.</p>\\n<p>-or- </p>\\n<p>The type is not visible to COM.</p>\\n<p>-or-</p>\\n<p>The <em>T</em> parameter is a generic type.</p>\\n"},{"content":"\\n&lt;p&gt;The object &lt;em&gt;o&lt;/em&gt; does not support the requested interface.&lt;/p&gt;\\n","pos":[105246,105320],"source":"\\n<p>The object <em>o</em> does not support the requested interface.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;o&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;T&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[105425,105559],"source":"\\n<p>The <em>o</em> parameter is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>The <em>T</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[106566,106608],"content":"GetComInterfaceForObject<T, TInterface>(T)","needQuote":true,"nodes":[{"content":"GetComInterfaceForObject&lt;T, TInterface&gt;(T)","pos":[0,42],"source":"GetComInterfaceForObject<T, TInterface>(T)"}]},{"content":"\\n&lt;p&gt;The object that provides the interface.","pos":[107752,107796],"source":"\\n<p>The object that provides the interface."},{"content":"&lt;/p&gt;\\n","pos":[107797,107803],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of &lt;em&gt;o&lt;/em&gt;.","pos":[107857,107885],"source":"\\n<p>The type of <em>o</em>."},{"content":"&lt;/p&gt;\\n","pos":[107886,107892],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of interface to return.","pos":[107935,107972],"source":"\\n<p>The type of interface to return."},{"content":"&lt;/p&gt;\\n","pos":[107973,107979],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The interface pointer that represents the &lt;em&gt;TInterface&lt;/em&gt; interface.&lt;/p&gt;\\n","pos":[108039,108122],"source":"\\n<p>The interface pointer that represents the <em>TInterface</em> interface.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;TInterface&lt;/em&gt; parameter is not an interface.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The type is not visible to COM.","pos":[108233,108346],"source":"\\n<p>The <em>TInterface</em> parameter is not an interface.</p>\\n<p>-or- </p>\\n<p>The type is not visible to COM."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;T&lt;/em&gt; parameter is an open generic type.&lt;/p&gt;\\n","pos":[108347,108424],"source":" </p>\\n<p>-or-</p>\\n<p>The <em>T</em> parameter is an open generic type.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;o&lt;/em&gt; parameter does not support the &lt;em&gt;TInterface&lt;/em&gt; interface.","pos":[108527,108608],"source":"\\n<p>The <em>o</em> parameter does not support the <em>TInterface</em> interface."},{"content":"&lt;/p&gt;\\n","pos":[108609,108615],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;o&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[108720,108781],"source":"\\n<p>The <em>o</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[109781,109824],"content":"GetDelegateForFunctionPointer(IntPtr, Type)","needQuote":true,"nodes":[{"content":"GetDelegateForFunctionPointer(IntPtr, Type)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The unmanaged function pointer to be converted.&lt;/p&gt;\\n","pos":[110739,110797],"source":"\\n<p>The unmanaged function pointer to be converted.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the delegate to be returned.&lt;/p&gt;\\n","pos":[110855,110906],"source":"\\n<p>The type of the delegate to be returned.</p>\\n"},{"content":"\\n&lt;p&gt;A delegate instance that can be cast to the appropriate delegate type.&lt;/p&gt;\\n","pos":[110968,111049],"source":"\\n<p>A delegate instance that can be cast to the appropriate delegate type.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;t&lt;/em&gt; parameter is not a delegate or is generic.&lt;/p&gt;\\n","pos":[111160,111228],"source":"\\n<p>The <em>t</em> parameter is not a delegate or is generic.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;ptr&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;t&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[111333,111468],"source":"\\n<p>The <em>ptr</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>t</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[112562,112610],"content":"GetDelegateForFunctionPointer<TDelegate>(IntPtr)","needQuote":true,"nodes":[{"content":"GetDelegateForFunctionPointer&lt;TDelegate&gt;(IntPtr)","pos":[0,48],"source":"GetDelegateForFunctionPointer<TDelegate>(IntPtr)"}]},{"content":"\\n&lt;p&gt;The unmanaged function pointer to convert.","pos":[113641,113688],"source":"\\n<p>The unmanaged function pointer to convert."},{"content":"&lt;/p&gt;\\n","pos":[113689,113695],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the delegate to return.","pos":[113757,113797],"source":"\\n<p>The type of the delegate to return."},{"content":"&lt;/p&gt;\\n","pos":[113798,113804],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A instance of the specified delegate type.&lt;/p&gt;\\n","pos":[113864,113917],"source":"\\n<p>A instance of the specified delegate type.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;TDelegate&lt;/em&gt; generic parameter is not a delegate, or it is an open generic type.&lt;/p&gt;\\n","pos":[114028,114129],"source":"\\n<p>The <em>TDelegate</em> generic parameter is not a delegate, or it is an open generic type.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;ptr&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[114234,114297],"source":"\\n<p>The <em>ptr</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[115208,115226],"content":"GetExceptionCode()","needQuote":true,"nodes":[{"content":"GetExceptionCode()","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The type of the exception.&lt;/p&gt;\\n","pos":[115925,115962],"source":"\\n<p>The type of the exception.</p>\\n"},{"pos":[116836,116860],"content":"GetExceptionForHR(Int32)","needQuote":true,"nodes":[{"content":"GetExceptionForHR(Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The HRESULT to be converted.&lt;/p&gt;\\n","pos":[117824,117863],"source":"\\n<p>The HRESULT to be converted.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the converted HRESULT.&lt;/p&gt;\\n","pos":[117926,117985],"source":"\\n<p>An object that represents the converted HRESULT.</p>\\n"},{"pos":[118888,118920],"content":"GetExceptionForHR(Int32, IntPtr)","needQuote":true,"nodes":[{"content":"GetExceptionForHR(Int32, IntPtr)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The HRESULT to be converted.&lt;/p&gt;\\n","pos":[120032,120071],"source":"\\n<p>The HRESULT to be converted.</p>\\n"},{"content":"\\n&lt;p&gt;A pointer to the &lt;strong&gt;IErrorInfo&lt;/strong&gt; interface that provides more information about the error.","pos":[120139,120246],"source":"\\n<p>A pointer to the <strong>IErrorInfo</strong> interface that provides more information about the error."},{"content":"You can specify &lt;code&gt;IntPtr(0)&lt;/code&gt; to use the current &lt;strong&gt;IErrorInfo&lt;/strong&gt; interface, or &lt;code&gt;IntPtr(-1)&lt;/code&gt; to ignore the current &lt;strong&gt;IErrorInfo&lt;/strong&gt; interface and construct the exception just from the error code.&lt;/p&gt;\\n","pos":[120247,120490],"source":" You can specify <code>IntPtr(0)</code> to use the current <strong>IErrorInfo</strong> interface, or <code>IntPtr(-1)</code> to ignore the current <strong>IErrorInfo</strong> interface and construct the exception just from the error code.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the converted HRESULT and information obtained from &lt;em&gt;errorInfo&lt;/em&gt;.&lt;/p&gt;\\n","pos":[120553,120661],"source":"\\n<p>An object that represents the converted HRESULT and information obtained from <em>errorInfo</em>.</p>\\n"},{"pos":[121575,121614],"content":"GetFunctionPointerForDelegate(Delegate)","needQuote":true,"nodes":[{"content":"GetFunctionPointerForDelegate(Delegate)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The delegate to be passed to unmanaged code.&lt;/p&gt;\\n","pos":[122545,122600],"source":"\\n<p>The delegate to be passed to unmanaged code.</p>\\n"},{"content":"\\n&lt;p&gt;A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.","pos":[122660,122778],"source":"\\n<p>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate."},{"content":"&lt;/p&gt;\\n","pos":[122779,122785],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;d&lt;/em&gt; parameter is a generic type.&lt;/p&gt;\\n","pos":[122896,122950],"source":"\\n<p>The <em>d</em> parameter is a generic type.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;d&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[123055,123116],"source":"\\n<p>The <em>d</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[124167,124218],"content":"GetFunctionPointerForDelegate<TDelegate>(TDelegate)","needQuote":true,"nodes":[{"content":"GetFunctionPointerForDelegate&lt;TDelegate&gt;(TDelegate)","pos":[0,51],"source":"GetFunctionPointerForDelegate<TDelegate>(TDelegate)"}]},{"content":"\\n&lt;p&gt;The delegate to be passed to unmanaged code.","pos":[125265,125314],"source":"\\n<p>The delegate to be passed to unmanaged code."},{"content":"&lt;/p&gt;\\n","pos":[125315,125321],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of delegate to convert.","pos":[125383,125420],"source":"\\n<p>The type of delegate to convert."},{"content":"&lt;/p&gt;\\n","pos":[125421,125427],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.","pos":[125487,125605],"source":"\\n<p>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate."},{"content":"&lt;/p&gt;\\n","pos":[125606,125612],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;d&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[125731,125786],"source":"\\n<p>The <em>d</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[125787,125793],"source":" </p>\\n"},{"pos":[126766,126794],"content":"GetHRForException(Exception)","needQuote":true,"nodes":[{"content":"GetHRForException(Exception)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The exception to convert to an HRESULT.&lt;/p&gt;\\n","pos":[127533,127583],"source":"\\n<p>The exception to convert to an HRESULT.</p>\\n"},{"content":"\\n&lt;p&gt;The HRESULT mapped to the supplied exception.&lt;/p&gt;\\n","pos":[127642,127698],"source":"\\n<p>The HRESULT mapped to the supplied exception.</p>\\n"},{"pos":[128494,128518],"content":"GetHRForLastWin32Error()","needQuote":true,"nodes":[{"content":"GetHRForLastWin32Error()","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The HRESULT corresponding to the last Win32 error code.&lt;/p&gt;\\n","pos":[129616,129682],"source":"\\n<p>The HRESULT corresponding to the last Win32 error code.</p>\\n"},{"pos":[130509,130537],"content":"GetIUnknownForObject(Object)","needQuote":true,"nodes":[{"content":"GetIUnknownForObject(Object)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The object whose &lt;strong&gt;IUnknown&lt;/strong&gt; interface is requested.&lt;/p&gt;\\n","pos":[131460,131537],"source":"\\n<p>The object whose <strong>IUnknown</strong> interface is requested.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;IUnknown&lt;/strong&gt; pointer for the &lt;em&gt;o&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[131597,131675],"source":"\\n<p>The <strong>IUnknown</strong> pointer for the <em>o</em> parameter.</p>\\n"},{"pos":[132653,132672],"content":"GetLastWin32Error()","needQuote":true,"nodes":[{"content":"GetLastWin32Error()","pos":[0,19]}]},{"pos":[134722,134763],"content":"GetNativeVariantForObject(Object, IntPtr)","needQuote":true,"nodes":[{"content":"GetNativeVariantForObject(Object, IntPtr)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The object for which to get a COM VARIANT.&lt;/p&gt;\\n","pos":[135564,135617],"source":"\\n<p>The object for which to get a COM VARIANT.</p>\\n"},{"content":"\\n&lt;p&gt;A pointer to receive the VARIANT that corresponds to the &lt;em&gt;obj&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[135693,135784],"source":"\\n<p>A pointer to receive the VARIANT that corresponds to the <em>obj</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;obj&lt;/em&gt; parameter is a generic type.&lt;/p&gt;\\n","pos":[135895,135951],"source":"\\n<p>The <em>obj</em> parameter is a generic type.</p>\\n"},{"pos":[136919,136958],"content":"GetNativeVariantForObject<T>(T, IntPtr)","needQuote":true,"nodes":[{"content":"GetNativeVariantForObject&lt;T&gt;(T, IntPtr)","pos":[0,39],"source":"GetNativeVariantForObject<T>(T, IntPtr)"}]},{"content":"\\n&lt;p&gt;The object for which to get a COM VARIANT.","pos":[137949,137996],"source":"\\n<p>The object for which to get a COM VARIANT."},{"content":"&lt;/p&gt;\\n","pos":[137997,138003],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A pointer to receive the VARIANT that corresponds to the &lt;em&gt;obj&lt;/em&gt; parameter.","pos":[138079,138164],"source":"\\n<p>A pointer to receive the VARIANT that corresponds to the <em>obj</em> parameter."},{"content":"&lt;/p&gt;\\n","pos":[138165,138171],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the object to convert.","pos":[138225,138264],"source":"\\n<p>The type of the object to convert."},{"content":"&lt;/p&gt;\\n","pos":[138265,138271],"source":" </p>\\n"},{"pos":[139427,139455],"content":"GetObjectForIUnknown(IntPtr)","needQuote":true,"nodes":[{"content":"GetObjectForIUnknown(IntPtr)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A pointer to the &lt;strong&gt;IUnknown&lt;/strong&gt; interface.","pos":[140319,140377],"source":"\\n<p>A pointer to the <strong>IUnknown</strong> interface."},{"content":"&lt;/p&gt;\\n","pos":[140378,140384],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified unmanaged COM object.&lt;/p&gt;\\n","pos":[140444,140516],"source":"\\n<p>An object that represents the specified unmanaged COM object.</p>\\n"},{"pos":[141746,141779],"content":"GetObjectForNativeVariant(IntPtr)","needQuote":true,"nodes":[{"content":"GetObjectForNativeVariant(IntPtr)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A pointer to a COM VARIANT.&lt;/p&gt;\\n","pos":[142569,142607],"source":"\\n<p>A pointer to a COM VARIANT.</p>\\n"},{"content":"\\n&lt;p&gt;An object that corresponds to the &lt;em&gt;pSrcNativeVariant&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[142667,142749],"source":"\\n<p>An object that corresponds to the <em>pSrcNativeVariant</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;pSrcNativeVariant&lt;/em&gt; is not a valid VARIANT type.&lt;/p&gt;\\n","pos":[142934,143002],"source":"\\n<p>\\n<em>pSrcNativeVariant</em> is not a valid VARIANT type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;pSrcNativeVariant&lt;/em&gt; has an unsupported type.&lt;/p&gt;\\n","pos":[143107,143171],"source":"\\n<p>\\n<em>pSrcNativeVariant</em> has an unsupported type.</p>\\n"},{"pos":[144337,144373],"content":"GetObjectForNativeVariant<T>(IntPtr)","needQuote":true,"nodes":[{"content":"GetObjectForNativeVariant&lt;T&gt;(IntPtr)","pos":[0,36],"source":"GetObjectForNativeVariant<T>(IntPtr)"}]},{"content":"\\n&lt;p&gt;A pointer to a COM VARIANT.","pos":[145373,145405],"source":"\\n<p>A pointer to a COM VARIANT."},{"content":"&lt;/p&gt;\\n","pos":[145406,145412],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type to which to convert the COM VARIANT.","pos":[145466,145516],"source":"\\n<p>The type to which to convert the COM VARIANT."},{"content":"&lt;/p&gt;\\n","pos":[145517,145523],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object of the specified type that corresponds to the &lt;em&gt;pSrcNativeVariant&lt;/em&gt; parameter.","pos":[145575,145673],"source":"\\n<p>An object of the specified type that corresponds to the <em>pSrcNativeVariant</em> parameter."},{"content":"&lt;/p&gt;\\n","pos":[145674,145680],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;pSrcNativeVariant&lt;/em&gt; is not a valid VARIANT type.","pos":[145865,145927],"source":"\\n<p>\\n<em>pSrcNativeVariant</em> is not a valid VARIANT type."},{"content":"&lt;/p&gt;\\n","pos":[145928,145934],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;pSrcNativeVariant&lt;/em&gt; has an unsupported type.","pos":[146039,146097],"source":"\\n<p>\\n<em>pSrcNativeVariant</em> has an unsupported type."},{"content":"&lt;/p&gt;\\n","pos":[146098,146104],"source":" </p>\\n"},{"pos":[147305,147347],"content":"GetObjectsForNativeVariants(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"GetObjectsForNativeVariants(IntPtr, Int32)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;A pointer to the first element of an array of COM VARIANTs.&lt;/p&gt;\\n","pos":[148278,148348],"source":"\\n<p>A pointer to the first element of an array of COM VARIANTs.</p>\\n"},{"content":"\\n&lt;p&gt;The count of COM VARIANTs in &lt;em&gt;aSrcNativeVariant&lt;/em&gt;.&lt;/p&gt;\\n","pos":[148411,148478],"source":"\\n<p>The count of COM VARIANTs in <em>aSrcNativeVariant</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An object array that corresponds to &lt;em&gt;aSrcNativeVariant&lt;/em&gt;.&lt;/p&gt;\\n","pos":[148540,148614],"source":"\\n<p>An object array that corresponds to <em>aSrcNativeVariant</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cVars&lt;/em&gt; is a negative number.&lt;/p&gt;\\n","pos":[148745,148794],"source":"\\n<p>\\n<em>cVars</em> is a negative number.</p>\\n"},{"pos":[149797,149842],"content":"GetObjectsForNativeVariants<T>(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"GetObjectsForNativeVariants&lt;T&gt;(IntPtr, Int32)","pos":[0,45],"source":"GetObjectsForNativeVariants<T>(IntPtr, Int32)"}]},{"content":"\\n&lt;p&gt;A pointer to the first element of an array of COM VARIANTs.","pos":[150907,150971],"source":"\\n<p>A pointer to the first element of an array of COM VARIANTs."},{"content":"&lt;/p&gt;\\n","pos":[150972,150978],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The count of COM VARIANTs in &lt;em&gt;aSrcNativeVariant&lt;/em&gt;.","pos":[151041,151102],"source":"\\n<p>The count of COM VARIANTs in <em>aSrcNativeVariant</em>."},{"content":"&lt;/p&gt;\\n","pos":[151103,151109],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the array to return.","pos":[151163,151200],"source":"\\n<p>The type of the array to return."},{"content":"&lt;/p&gt;\\n","pos":[151201,151207],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of &lt;em&gt;T&lt;/em&gt; objects that corresponds to &lt;em&gt;aSrcNativeVariant&lt;/em&gt;.","pos":[151261,151344],"source":"\\n<p>An array of <em>T</em> objects that corresponds to <em>aSrcNativeVariant</em>."},{"content":"&lt;/p&gt;\\n","pos":[151345,151351],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cVars&lt;/em&gt; is a negative number.","pos":[151482,151525],"source":"\\n<p>\\n<em>cVars</em> is a negative number."},{"content":"&lt;/p&gt;\\n","pos":[151526,151532],"source":" </p>\\n"},{"pos":[152704,152725],"content":"GetStartComSlot(Type)","needQuote":true,"nodes":[{"content":"GetStartComSlot(Type)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A type that represents an interface.&lt;/p&gt;\\n","pos":[153494,153541],"source":"\\n<p>A type that represents an interface.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;t&lt;/em&gt; is not visible from COM.&lt;/p&gt;\\n","pos":[153948,153996],"source":"\\n<p>\\n<em>t</em> is not visible from COM.</p>\\n"},{"pos":[155131,155153],"content":"GetTypeFromCLSID(Guid)","needQuote":true,"nodes":[{"content":"GetTypeFromCLSID(Guid)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The CLSID of the type to return.","pos":[155945,155982],"source":"\\n<p>The CLSID of the type to return."},{"content":"&lt;/p&gt;\\n","pos":[155983,155989],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;System.__ComObject&lt;/strong&gt; regardless of whether the CLSID is valid.","pos":[156047,156131],"source":"\\n<p>\\n<strong>System.__ComObject</strong> regardless of whether the CLSID is valid."},{"content":"&lt;/p&gt;\\n","pos":[156132,156138],"source":" </p>\\n"},{"pos":[156658,156684],"content":"GetTypeInfoName(ITypeInfo)","needQuote":true,"nodes":[{"content":"GetTypeInfoName(ITypeInfo)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;An object that represents an &lt;strong&gt;ITypeInfo&lt;/strong&gt; pointer.&lt;/p&gt;\\n","pos":[157634,157709],"source":"\\n<p>An object that represents an <strong>ITypeInfo</strong> pointer.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the type that the &lt;em&gt;typeInfo&lt;/em&gt; parameter points to.&lt;/p&gt;\\n","pos":[157769,157848],"source":"\\n<p>The name of the type that the <em>typeInfo</em> parameter points to.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;typeInfo&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[157967,158035],"source":"\\n<p>The <em>typeInfo</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[159052,159086],"content":"GetUniqueObjectForIUnknown(IntPtr)","needQuote":true,"nodes":[{"content":"GetUniqueObjectForIUnknown(IntPtr)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;A managed pointer to an &lt;strong&gt;IUnknown&lt;/strong&gt; interface.&lt;/p&gt;\\n","pos":[159965,160036],"source":"\\n<p>A managed pointer to an <strong>IUnknown</strong> interface.</p>\\n"},{"content":"\\n&lt;p&gt;A unique RCW for the specified &lt;strong&gt;IUnknown&lt;/strong&gt; interface.&lt;/p&gt;\\n","pos":[160096,160174],"source":"\\n<p>A unique RCW for the specified <strong>IUnknown</strong> interface.</p>\\n"},{"pos":[160846,160865],"content":"IsComObject(Object)","needQuote":true,"nodes":[{"content":"IsComObject(Object)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The object to check.&lt;/p&gt;\\n","pos":[161537,161568],"source":"\\n<p>The object to check.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;o&lt;/em&gt; parameter is a COM type; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[161629,161741],"source":"\\n<p>\\n<strong>true</strong> if the <em>o</em> parameter is a COM type; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;o&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[161860,161903],"source":"\\n<p>\\n<em>o</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[161904,161910],"source":" </p>\\n"},{"pos":[162742,162764],"content":"OffsetOf(Type, String)","needQuote":true,"nodes":[{"content":"OffsetOf(Type, String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The field within the &lt;em&gt;t&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[163863,163916],"source":"\\n<p>The field within the <em>t</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;The offset, in bytes, for the &lt;em&gt;fieldName&lt;/em&gt; parameter within the specified class that is declared by platform invoke.&lt;/p&gt;\\n","pos":[163976,164109],"source":"\\n<p>The offset, in bytes, for the <em>fieldName</em> parameter within the specified class that is declared by platform invoke.</p>\\n"},{"content":"\\n&lt;p&gt;The class cannot be exported as a structure or the field is nonpublic.","pos":[164220,164295],"source":"\\n<p>The class cannot be exported as a structure or the field is nonpublic."},{"content":"Beginning with the .NET Framework version 2.0, the field may be private.&lt;/p&gt;\\n","pos":[164296,164374],"source":" Beginning with the .NET Framework version 2.0, the field may be private.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;t&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[164479,164540],"source":"\\n<p>The <em>t</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[165422,165441],"content":"OffsetOf<T>(String)","needQuote":true,"nodes":[{"content":"OffsetOf&lt;T&gt;(String)","pos":[0,19],"source":"OffsetOf<T>(String)"}]},{"content":"\\n&lt;p&gt;The name of the field in the &lt;em&gt;T&lt;/em&gt; type.","pos":[166307,166357],"source":"\\n<p>The name of the field in the <em>T</em> type."},{"content":"&lt;/p&gt;\\n","pos":[166358,166364],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The offset, in bytes, for the &lt;em&gt;fieldName&lt;/em&gt; parameter within the specified class that is declared by platform invoke.","pos":[166695,166822],"source":"\\n<p>The offset, in bytes, for the <em>fieldName</em> parameter within the specified class that is declared by platform invoke."},{"content":"&lt;/p&gt;\\n","pos":[166823,166829],"source":" </p>\\n"},{"pos":[167552,167575],"content":"PtrToStringAnsi(IntPtr)","needQuote":true,"nodes":[{"content":"PtrToStringAnsi(IntPtr)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The address of the first character of the unmanaged string.&lt;/p&gt;\\n","pos":[168578,168648],"source":"\\n<p>The address of the first character of the unmanaged string.</p>\\n"},{"content":"\\n&lt;p&gt;A managed string that holds a copy of the unmanaged ANSI string.","pos":[168708,168777],"source":"\\n<p>A managed string that holds a copy of the unmanaged ANSI string."},{"content":"If &lt;em&gt;ptr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, the method returns a null string.&lt;/p&gt;\\n","pos":[168778,168859],"source":" If <em>ptr</em> is <strong>null</strong>, the method returns a null string.</p>\\n"},{"pos":[169936,169966],"content":"PtrToStringAnsi(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"PtrToStringAnsi(IntPtr, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The address of the first character of the unmanaged string.&lt;/p&gt;\\n","pos":[171011,171081],"source":"\\n<p>The address of the first character of the unmanaged string.</p>\\n"},{"content":"\\n&lt;p&gt;The byte count of the input string to copy.&lt;/p&gt;\\n","pos":[171142,171196],"source":"\\n<p>The byte count of the input string to copy.</p>\\n"},{"content":"\\n&lt;p&gt;A managed string that holds a copy of the native ANSI string if the value of the &lt;em&gt;ptr&lt;/em&gt; parameter is not &lt;strong&gt;null&lt;/strong&gt;; otherwise, this method returns &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[171256,171454],"source":"\\n<p>A managed string that holds a copy of the native ANSI string if the value of the <em>ptr</em> parameter is not <strong>null</strong>; otherwise, this method returns <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;len&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[171565,171609],"source":"\\n<p>\\n<em>len</em> is less than zero.</p>\\n"},{"pos":[172654,172677],"content":"PtrToStringBSTR(IntPtr)","needQuote":true,"nodes":[{"content":"PtrToStringBSTR(IntPtr)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The address of the first character of the unmanaged string.&lt;/p&gt;\\n","pos":[173709,173779],"source":"\\n<p>The address of the first character of the unmanaged string.</p>\\n"},{"content":"\\n&lt;p&gt;A managed string that holds a copy of the unmanaged string.","pos":[173839,173903],"source":"\\n<p>A managed string that holds a copy of the unmanaged string."},{"content":"&lt;/p&gt;\\n","pos":[173904,173910],"source":" </p>\\n"},{"pos":[174984,175006],"content":"PtrToStringUni(IntPtr)","needQuote":true,"nodes":[{"content":"PtrToStringUni(IntPtr)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The address of the first character of the unmanaged string.&lt;/p&gt;\\n","pos":[175984,176054],"source":"\\n<p>The address of the first character of the unmanaged string.</p>\\n"},{"content":"\\n&lt;p&gt;A managed string that holds a copy of the unmanaged string if the value of the &lt;em&gt;ptr&lt;/em&gt; parameter is not &lt;strong&gt;null&lt;/strong&gt;; otherwise, this method returns &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[176114,176310],"source":"\\n<p>A managed string that holds a copy of the unmanaged string if the value of the <em>ptr</em> parameter is not <strong>null</strong>; otherwise, this method returns <strong>null</strong>.</p>\\n"},{"pos":[177383,177412],"content":"PtrToStringUni(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"PtrToStringUni(IntPtr, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The address of the first character of the unmanaged string.&lt;/p&gt;\\n","pos":[178416,178486],"source":"\\n<p>The address of the first character of the unmanaged string.</p>\\n"},{"content":"\\n&lt;p&gt;The number of Unicode characters to copy.&lt;/p&gt;\\n","pos":[178547,178599],"source":"\\n<p>The number of Unicode characters to copy.</p>\\n"},{"content":"\\n&lt;p&gt;A managed string that holds a copy of the unmanaged string if the value of the &lt;em&gt;ptr&lt;/em&gt; parameter is not &lt;strong&gt;null&lt;/strong&gt;; otherwise, this method returns &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[178659,178855],"source":"\\n<p>A managed string that holds a copy of the unmanaged string if the value of the <em>ptr</em> parameter is not <strong>null</strong>; otherwise, this method returns <strong>null</strong>.</p>\\n"},{"pos":[179899,179922],"content":"PtrToStringUTF8(IntPtr)","needQuote":true,"nodes":[{"content":"PtrToStringUTF8(IntPtr)","pos":[0,23]}]},{"pos":[181297,181327],"content":"PtrToStringUTF8(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"PtrToStringUTF8(IntPtr, Int32)","pos":[0,30]}]},{"pos":[182799,182829],"content":"PtrToStructure(IntPtr, Object)","needQuote":true,"nodes":[{"content":"PtrToStructure(IntPtr, Object)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A pointer to an unmanaged block of memory.&lt;/p&gt;\\n","pos":[183773,183826],"source":"\\n<p>A pointer to an unmanaged block of memory.</p>\\n"},{"content":"\\n&lt;p&gt;The object to which the data is to be copied.","pos":[183894,183944],"source":"\\n<p>The object to which the data is to be copied."},{"content":"This must be an instance of a formatted class.&lt;/p&gt;\\n","pos":[183945,183997],"source":" This must be an instance of a formatted class.</p>\\n"},{"content":"\\n&lt;p&gt;Structure layout is not sequential or explicit.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;Structure is a boxed value type.&lt;/p&gt;\\n","pos":[184108,184221],"source":"\\n<p>Structure layout is not sequential or explicit.</p>\\n<p>-or- </p>\\n<p>Structure is a boxed value type.</p>\\n"},{"pos":[185256,185284],"content":"PtrToStructure(IntPtr, Type)","needQuote":true,"nodes":[{"content":"PtrToStructure(IntPtr, Type)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A pointer to an unmanaged block of memory.&lt;/p&gt;\\n","pos":[186385,186438],"source":"\\n<p>A pointer to an unmanaged block of memory.</p>\\n"},{"content":"\\n&lt;p&gt;The type of object to be created.","pos":[186508,186546],"source":"\\n<p>The type of object to be created."},{"content":"This object must represent a formatted class or a structure.&lt;/p&gt;\\n","pos":[186547,186613],"source":" This object must represent a formatted class or a structure.</p>\\n"},{"content":"\\n&lt;p&gt;A managed object containing the data pointed to by the &lt;em&gt;ptr&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[186673,186762],"source":"\\n<p>A managed object containing the data pointed to by the <em>ptr</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;structureType&lt;/em&gt; parameter layout is not sequential or explicit.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;structureType&lt;/em&gt; parameter is a generic type.&lt;/p&gt;\\n","pos":[186873,187035],"source":"\\n<p>The <em>structureType</em> parameter layout is not sequential or explicit.</p>\\n<p>-or-</p>\\n<p>The <em>structureType</em> parameter is a generic type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;structureType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[187140,187201],"source":"\\n<p>\\n<em>structureType</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The class specified by &lt;em&gt;structureType&lt;/em&gt; does not have an accessible default constructor.","pos":[187308,187407],"source":"\\n<p>The class specified by <em>structureType</em> does not have an accessible default constructor."},{"content":"&lt;/p&gt;\\n","pos":[187408,187414],"source":" </p>\\n"},{"pos":[188602,188627],"content":"PtrToStructure<T>(IntPtr)","needQuote":true,"nodes":[{"content":"PtrToStructure&lt;T&gt;(IntPtr)","pos":[0,25],"source":"PtrToStructure<T>(IntPtr)"}]},{"content":"\\n&lt;p&gt;A pointer to an unmanaged block of memory.","pos":[189619,189666],"source":"\\n<p>A pointer to an unmanaged block of memory."},{"content":"&lt;/p&gt;\\n","pos":[189667,189673],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the object to which the data is to be copied.","pos":[189727,189789],"source":"\\n<p>The type of the object to which the data is to be copied."},{"content":"This must be a formatted class or a structure.","pos":[189790,189836]},{"content":"&lt;/p&gt;\\n","pos":[189837,189843],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A managed object that contains the data that the &lt;em&gt;ptr&lt;/em&gt; parameter points to.","pos":[189895,189982],"source":"\\n<p>A managed object that contains the data that the <em>ptr</em> parameter points to."},{"content":"&lt;/p&gt;\\n","pos":[189983,189989],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The layout of &lt;em&gt;T&lt;/em&gt; is not sequential or explicit.&lt;/p&gt;\\n","pos":[190100,190166],"source":"\\n<p>The layout of <em>T</em> is not sequential or explicit.</p>\\n"},{"content":"\\n&lt;p&gt;The class specified by &lt;em&gt;T&lt;/em&gt; does not have an accessible default constructor.","pos":[190273,190360],"source":"\\n<p>The class specified by <em>T</em> does not have an accessible default constructor."},{"content":"&lt;/p&gt;\\n","pos":[190361,190367],"source":" </p>\\n"},{"pos":[191246,191274],"content":"PtrToStructure<T>(IntPtr, T)","needQuote":true,"nodes":[{"content":"PtrToStructure&lt;T&gt;(IntPtr, T)","pos":[0,28],"source":"PtrToStructure<T>(IntPtr, T)"}]},{"content":"\\n&lt;p&gt;A pointer to an unmanaged block of memory.","pos":[192247,192294],"source":"\\n<p>A pointer to an unmanaged block of memory."},{"content":"&lt;/p&gt;\\n","pos":[192295,192301],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The object to which the data is to be copied.","pos":[192361,192411],"source":"\\n<p>The object to which the data is to be copied."},{"content":"&lt;/p&gt;\\n","pos":[192412,192418],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of &lt;em&gt;structure&lt;/em&gt;.","pos":[192472,192508],"source":"\\n<p>The type of <em>structure</em>."},{"content":"This must be a formatted class.","pos":[192509,192540]},{"content":"&lt;/p&gt;\\n","pos":[192541,192547],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Structure layout is not sequential or explicit.","pos":[192658,192710],"source":"\\n<p>Structure layout is not sequential or explicit."},{"content":"&lt;/p&gt;\\n","pos":[192711,192717],"source":" </p>\\n"},{"pos":[193671,193715],"content":"QueryInterface(IntPtr, ref Guid, out IntPtr)","needQuote":true,"nodes":[{"content":"QueryInterface(IntPtr, ref Guid, out IntPtr)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The interface to be queried.&lt;/p&gt;\\n","pos":[194563,194602],"source":"\\n<p>The interface to be queried.</p>\\n"},{"content":"\\n&lt;p&gt;The interface identifier (IID) of the requested interface.&lt;/p&gt;\\n","pos":[194662,194731],"source":"\\n<p>The interface identifier (IID) of the requested interface.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains a reference to the returned interface.&lt;/p&gt;\\n","pos":[194793,194877],"source":"\\n<p>When this method returns, contains a reference to the returned interface.</p>\\n"},{"content":"\\n&lt;p&gt;An HRESULT that indicates the success or failure of the call.&lt;/p&gt;\\n","pos":[194936,195008],"source":"\\n<p>An HRESULT that indicates the success or failure of the call.</p>\\n"},{"pos":[196994,197010],"content":"ReadByte(IntPtr)","needQuote":true,"nodes":[{"content":"ReadByte(IntPtr)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The address in unmanaged memory from which to read.&lt;/p&gt;\\n","pos":[197810,197872],"source":"\\n<p>The address in unmanaged memory from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The byte read from unmanaged memory.&lt;/p&gt;\\n","pos":[197930,197977],"source":"\\n<p>The byte read from unmanaged memory.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is not a recognized format.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[198102,198211],"source":"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[198212,198266],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n"},{"pos":[199188,199211],"content":"ReadByte(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"ReadByte(IntPtr, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory from which to read.&lt;/p&gt;\\n","pos":[200079,200146],"source":"\\n<p>The base address in unmanaged memory from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before reading.&lt;/p&gt;\\n","pos":[200207,200305],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n"},{"content":"\\n&lt;p&gt;The byte read from unmanaged memory at the given offset.&lt;/p&gt;\\n","pos":[200363,200430],"source":"\\n<p>The byte read from unmanaged memory at the given offset.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[200555,200661],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[201590,201613],"content":"ReadByte(Object, Int32)","needQuote":true,"nodes":[{"content":"ReadByte(Object, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory of the source object.&lt;/p&gt;\\n","pos":[202518,202587],"source":"\\n<p>The base address in unmanaged memory of the source object.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before reading.&lt;/p&gt;\\n","pos":[203088,203186],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n"},{"content":"\\n&lt;p&gt;The byte read from unmanaged memory at the given offset.&lt;/p&gt;\\n","pos":[203244,203311],"source":"\\n<p>The byte read from unmanaged memory at the given offset.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[203436,203542],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[205033,205050],"content":"ReadInt16(IntPtr)","needQuote":true,"nodes":[{"content":"ReadInt16(IntPtr)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The address in unmanaged memory from which to read.&lt;/p&gt;\\n","pos":[205866,205928],"source":"\\n<p>The address in unmanaged memory from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The 16-bit signed integer read from unmanaged memory.&lt;/p&gt;\\n","pos":[205987,206051],"source":"\\n<p>The 16-bit signed integer read from unmanaged memory.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is not a recognized format.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[206176,206339],"source":"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n"},{"pos":[207265,207289],"content":"ReadInt16(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"ReadInt16(IntPtr, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory from which to read.&lt;/p&gt;\\n","pos":[208162,208229],"source":"\\n<p>The base address in unmanaged memory from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before reading.&lt;/p&gt;\\n","pos":[208290,208388],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n"},{"content":"\\n&lt;p&gt;The 16-bit signed integer read from unmanaged memory at the given offset.&lt;/p&gt;\\n","pos":[208447,208531],"source":"\\n<p>The 16-bit signed integer read from unmanaged memory at the given offset.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[208656,208762],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[209874,209898],"content":"ReadInt16(Object, Int32)","needQuote":true,"nodes":[{"content":"ReadInt16(Object, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory of the source object.&lt;/p&gt;\\n","pos":[210808,210877],"source":"\\n<p>The base address in unmanaged memory of the source object.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before reading.&lt;/p&gt;\\n","pos":[211378,211476],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n"},{"content":"\\n&lt;p&gt;The 16-bit signed integer read from unmanaged memory at the given offset.&lt;/p&gt;\\n","pos":[211535,211619],"source":"\\n<p>The 16-bit signed integer read from unmanaged memory at the given offset.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[211744,211850],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[213343,213360],"content":"ReadInt32(IntPtr)","needQuote":true,"nodes":[{"content":"ReadInt32(IntPtr)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The address in unmanaged memory from which to read.&lt;/p&gt;\\n","pos":[214326,214388],"source":"\\n<p>The address in unmanaged memory from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The 32-bit signed integer read from unmanaged memory.&lt;/p&gt;\\n","pos":[214447,214511],"source":"\\n<p>The 32-bit signed integer read from unmanaged memory.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is not a recognized format.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[214636,214799],"source":"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n"},{"pos":[215725,215749],"content":"ReadInt32(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"ReadInt32(IntPtr, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory from which to read.&lt;/p&gt;\\n","pos":[216772,216839],"source":"\\n<p>The base address in unmanaged memory from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before reading.&lt;/p&gt;\\n","pos":[216900,216998],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n"},{"content":"\\n&lt;p&gt;The 32-bit signed integer read from unmanaged memory.&lt;/p&gt;\\n","pos":[217057,217121],"source":"\\n<p>The 32-bit signed integer read from unmanaged memory.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[217246,217352],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[218464,218488],"content":"ReadInt32(Object, Int32)","needQuote":true,"nodes":[{"content":"ReadInt32(Object, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory of the source object.&lt;/p&gt;\\n","pos":[219398,219467],"source":"\\n<p>The base address in unmanaged memory of the source object.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before reading.&lt;/p&gt;\\n","pos":[219968,220066],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n"},{"content":"\\n&lt;p&gt;The 32-bit signed integer read from unmanaged memory at the given offset.&lt;/p&gt;\\n","pos":[220125,220209],"source":"\\n<p>The 32-bit signed integer read from unmanaged memory at the given offset.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[220334,220440],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[221933,221950],"content":"ReadInt64(IntPtr)","needQuote":true,"nodes":[{"content":"ReadInt64(IntPtr)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The address in unmanaged memory from which to read.&lt;/p&gt;\\n","pos":[222914,222976],"source":"\\n<p>The address in unmanaged memory from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The 64-bit signed integer read from unmanaged memory.&lt;/p&gt;\\n","pos":[223035,223099],"source":"\\n<p>The 64-bit signed integer read from unmanaged memory.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is not a recognized format.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[223224,223387],"source":"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n"},{"pos":[224313,224337],"content":"ReadInt64(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"ReadInt64(IntPtr, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory from which to read.&lt;/p&gt;\\n","pos":[225208,225275],"source":"\\n<p>The base address in unmanaged memory from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before reading.&lt;/p&gt;\\n","pos":[225336,225434],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n"},{"content":"\\n&lt;p&gt;The 64-bit signed integer read from unmanaged memory at the given offset.&lt;/p&gt;\\n","pos":[225493,225577],"source":"\\n<p>The 64-bit signed integer read from unmanaged memory at the given offset.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[225702,225808],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[226920,226944],"content":"ReadInt64(Object, Int32)","needQuote":true,"nodes":[{"content":"ReadInt64(Object, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory of the source object.&lt;/p&gt;\\n","pos":[227852,227921],"source":"\\n<p>The base address in unmanaged memory of the source object.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before reading.&lt;/p&gt;\\n","pos":[228422,228520],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n"},{"content":"\\n&lt;p&gt;The 64-bit signed integer read from unmanaged memory at the given offset.&lt;/p&gt;\\n","pos":[228579,228663],"source":"\\n<p>The 64-bit signed integer read from unmanaged memory at the given offset.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[228788,228894],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[230390,230408],"content":"ReadIntPtr(IntPtr)","needQuote":true,"nodes":[{"content":"ReadIntPtr(IntPtr)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The address in unmanaged memory from which to read.&lt;/p&gt;\\n","pos":[231389,231451],"source":"\\n<p>The address in unmanaged memory from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The integer read from unmanaged memory.","pos":[231511,231555],"source":"\\n<p>The integer read from unmanaged memory."},{"content":"A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.&lt;/p&gt;\\n","pos":[231556,231662],"source":" A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is not a recognized format.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[231787,231896],"source":"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[231897,231951],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n"},{"pos":[232881,232906],"content":"ReadIntPtr(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"ReadIntPtr(IntPtr, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory from which to read.&lt;/p&gt;\\n","pos":[233944,234011],"source":"\\n<p>The base address in unmanaged memory from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before reading.&lt;/p&gt;\\n","pos":[234072,234170],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n"},{"content":"\\n&lt;p&gt;The integer read from unmanaged memory at the given offset.&lt;/p&gt;\\n","pos":[234230,234300],"source":"\\n<p>The integer read from unmanaged memory at the given offset.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[234425,234531],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[235647,235672],"content":"ReadIntPtr(Object, Int32)","needQuote":true,"nodes":[{"content":"ReadIntPtr(Object, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory of the source object.&lt;/p&gt;\\n","pos":[236729,236798],"source":"\\n<p>The base address in unmanaged memory of the source object.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before reading.&lt;/p&gt;\\n","pos":[237299,237397],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n"},{"content":"\\n&lt;p&gt;The integer read from unmanaged memory at the given offset.&lt;/p&gt;\\n","pos":[237457,237527],"source":"\\n<p>The integer read from unmanaged memory at the given offset.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[237652,237758],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[239313,239344],"content":"ReAllocCoTaskMem(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"ReAllocCoTaskMem(IntPtr, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The new size of the allocated block.&lt;/p&gt;\\n","pos":[240587,240634],"source":"\\n<p>The new size of the allocated block.</p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory to satisfy the request.&lt;/p&gt;\\n","pos":[241056,241119],"source":"\\n<p>There is insufficient memory to satisfy the request.</p>\\n"},{"pos":[242206,242236],"content":"ReAllocHGlobal(IntPtr, IntPtr)","needQuote":true,"nodes":[{"content":"ReAllocHGlobal(IntPtr, IntPtr)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;There is insufficient memory to satisfy the request.&lt;/p&gt;\\n","pos":[244106,244169],"source":"\\n<p>There is insufficient memory to satisfy the request.</p>\\n"},{"pos":[245190,245205],"content":"Release(IntPtr)","needQuote":true,"nodes":[{"content":"Release(IntPtr)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The interface to release.&lt;/p&gt;\\n","pos":[246072,246108],"source":"\\n<p>The interface to release.</p>\\n"},{"content":"\\n&lt;p&gt;The new value of the reference count on the interface specified by the &lt;em&gt;pUnk&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[246167,246273],"source":"\\n<p>The new value of the reference count on the interface specified by the <em>pUnk</em> parameter.</p>\\n"},{"pos":[247887,247911],"content":"ReleaseComObject(Object)","needQuote":true,"nodes":[{"content":"ReleaseComObject(Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The COM object to release.&lt;/p&gt;\\n","pos":[248818,248855],"source":"\\n<p>The COM object to release.</p>\\n"},{"content":"\\n&lt;p&gt;The new value of the reference count of the RCW associated with &lt;em&gt;o&lt;/em&gt;.","pos":[248914,248994],"source":"\\n<p>The new value of the reference count of the RCW associated with <em>o</em>."},{"content":"This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.&lt;/p&gt;\\n","pos":[248995,249150],"source":" This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;o&lt;/em&gt; is not a valid COM object.&lt;/p&gt;\\n","pos":[249261,249311],"source":"\\n<p>\\n<em>o</em> is not a valid COM object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;o&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[249418,249467],"source":"\\n<p>\\n<em>o</em> is <strong>null</strong>.</p>\\n"},{"pos":[250391,250405],"content":"SizeOf(Object)","needQuote":true,"nodes":[{"content":"SizeOf(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object whose size is to be returned.&lt;/p&gt;\\n","pos":[251224,251275],"source":"\\n<p>The object whose size is to be returned.</p>\\n"},{"content":"\\n&lt;p&gt;The size of the specified object in unmanaged code.&lt;/p&gt;\\n","pos":[251334,251396],"source":"\\n<p>The size of the specified object in unmanaged code.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;structure&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[251515,251584],"source":"\\n<p>The <em>structure</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[252377,252389],"content":"SizeOf(Type)","needQuote":true,"nodes":[{"content":"SizeOf(Type)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The type whose size is to be returned.&lt;/p&gt;\\n","pos":[253104,253153],"source":"\\n<p>The type whose size is to be returned.</p>\\n"},{"content":"\\n&lt;p&gt;The size of the specified type in unmanaged code.&lt;/p&gt;\\n","pos":[253212,253272],"source":"\\n<p>The size of the specified type in unmanaged code.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;t&lt;/em&gt; parameter is a generic type.&lt;/p&gt;\\n","pos":[253383,253437],"source":"\\n<p>The <em>t</em> parameter is a generic type.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;t&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[253542,253603],"source":"\\n<p>The <em>t</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[254362,254373],"content":"SizeOf<T>()","needQuote":true,"nodes":[{"content":"SizeOf&lt;T&gt;()","pos":[0,11],"source":"SizeOf<T>()"}]},{"content":"\\n&lt;p&gt;The type whose size is to be returned.","pos":[255121,255164],"source":"\\n<p>The type whose size is to be returned."},{"content":"&lt;/p&gt;\\n","pos":[255165,255171],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The size, in bytes, of the type that is specified by the &lt;em&gt;T&lt;/em&gt; generic type parameter.","pos":[255230,255326],"source":"\\n<p>The size, in bytes, of the type that is specified by the <em>T</em> generic type parameter."},{"content":"&lt;/p&gt;\\n","pos":[255327,255333],"source":" </p>\\n"},{"pos":[255823,255835],"content":"SizeOf<T>(T)","needQuote":true,"nodes":[{"content":"SizeOf&lt;T&gt;(T)","pos":[0,12],"source":"SizeOf<T>(T)"}]},{"content":"\\n&lt;p&gt;The object whose size is to be returned.","pos":[256655,256700],"source":"\\n<p>The object whose size is to be returned."},{"content":"&lt;/p&gt;\\n","pos":[256701,256707],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the &lt;em&gt;structure&lt;/em&gt; parameter.","pos":[256761,256811],"source":"\\n<p>The type of the <em>structure</em> parameter."},{"content":"&lt;/p&gt;\\n","pos":[256812,256818],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The size, in bytes, of the specified object in unmanaged code.","pos":[256877,256944],"source":"\\n<p>The size, in bytes, of the specified object in unmanaged code."},{"content":"&lt;/p&gt;\\n","pos":[256945,256951],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;structure&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[257070,257139],"source":"\\n<p>The <em>structure</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[257672,257692],"content":"StringToBSTR(String)","needQuote":true,"nodes":[{"content":"StringToBSTR(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The managed string to be copied.&lt;/p&gt;\\n","pos":[258670,258713],"source":"\\n<p>The managed string to be copied.</p>\\n"},{"content":"\\n&lt;p&gt;An unmanaged pointer to the &lt;strong&gt;BSTR&lt;/strong&gt;, or 0 if &lt;em&gt;s&lt;/em&gt; is null.&lt;/p&gt;\\n","pos":[258773,258862],"source":"\\n<p>An unmanaged pointer to the <strong>BSTR</strong>, or 0 if <em>s</em> is null.</p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory available.&lt;/p&gt;\\n","pos":[258979,259029],"source":"\\n<p>There is insufficient memory available.</p>\\n"},{"content":"\\n&lt;p&gt;The length for &lt;em&gt;s&lt;/em&gt; is out of range.&lt;/p&gt;\\n","pos":[259146,259199],"source":"\\n<p>The length for <em>s</em> is out of range.</p>\\n"},{"pos":[260218,260247],"content":"StringToCoTaskMemAnsi(String)","needQuote":true,"nodes":[{"content":"StringToCoTaskMemAnsi(String)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;A managed string to be copied.&lt;/p&gt;\\n","pos":[261232,261273],"source":"\\n<p>A managed string to be copied.</p>\\n"},{"content":"\\n&lt;p&gt;An integer representing a pointer to the block of memory allocated for the string, or 0 if &lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[261333,261471],"source":"\\n<p>An integer representing a pointer to the block of memory allocated for the string, or 0 if <em>s</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory available.&lt;/p&gt;\\n","pos":[261588,261638],"source":"\\n<p>There is insufficient memory available.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;s&lt;/em&gt; parameter exceeds the maximum length allowed by the operating system.&lt;/p&gt;\\n","pos":[261755,261850],"source":"\\n<p>The <em>s</em> parameter exceeds the maximum length allowed by the operating system.</p>\\n"},{"pos":[262885,262913],"content":"StringToCoTaskMemUni(String)","needQuote":true,"nodes":[{"content":"StringToCoTaskMemUni(String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A managed string to be copied.&lt;/p&gt;\\n","pos":[263894,263935],"source":"\\n<p>A managed string to be copied.</p>\\n"},{"content":"\\n&lt;p&gt;An integer representing a pointer to the block of memory allocated for the string, or 0 if s is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[263995,264124],"source":"\\n<p>An integer representing a pointer to the block of memory allocated for the string, or 0 if s is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;s&lt;/em&gt; parameter exceeds the maximum length allowed by the operating system.&lt;/p&gt;\\n","pos":[264255,264350],"source":"\\n<p>The <em>s</em> parameter exceeds the maximum length allowed by the operating system.</p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory available.&lt;/p&gt;\\n","pos":[264453,264503],"source":"\\n<p>There is insufficient memory available.</p>\\n"},{"pos":[265564,265593],"content":"StringToCoTaskMemUTF8(String)","needQuote":true,"nodes":[{"content":"StringToCoTaskMemUTF8(String)","pos":[0,29]}]},{"pos":[266966,266993],"content":"StringToHGlobalAnsi(String)","needQuote":true,"nodes":[{"content":"StringToHGlobalAnsi(String)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A managed string to be copied.&lt;/p&gt;\\n","pos":[267965,268006],"source":"\\n<p>A managed string to be copied.</p>\\n"},{"content":"\\n&lt;p&gt;The address, in unmanaged memory, to where &lt;em&gt;s&lt;/em&gt; was copied, or 0 if &lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[268066,268187],"source":"\\n<p>The address, in unmanaged memory, to where <em>s</em> was copied, or 0 if <em>s</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory available.&lt;/p&gt;\\n","pos":[268304,268354],"source":"\\n<p>There is insufficient memory available.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;s&lt;/em&gt; parameter exceeds the maximum length allowed by the operating system.&lt;/p&gt;\\n","pos":[268471,268566],"source":"\\n<p>The <em>s</em> parameter exceeds the maximum length allowed by the operating system.</p>\\n"},{"pos":[269593,269619],"content":"StringToHGlobalUni(String)","needQuote":true,"nodes":[{"content":"StringToHGlobalUni(String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A managed string to be copied.&lt;/p&gt;\\n","pos":[270545,270586],"source":"\\n<p>A managed string to be copied.</p>\\n"},{"content":"\\n&lt;p&gt;The address, in unmanaged memory, to where the &lt;em&gt;s&lt;/em&gt; was copied, or 0 if &lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[270646,270771],"source":"\\n<p>The address, in unmanaged memory, to where the <em>s</em> was copied, or 0 if <em>s</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The method could not allocate enough native heap memory.&lt;/p&gt;\\n","pos":[270888,270955],"source":"\\n<p>The method could not allocate enough native heap memory.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;s&lt;/em&gt; parameter exceeds the maximum length allowed by the operating system.&lt;/p&gt;\\n","pos":[271072,271167],"source":"\\n<p>The <em>s</em> parameter exceeds the maximum length allowed by the operating system.</p>\\n"},{"pos":[272129,272168],"content":"StructureToPtr(Object, IntPtr, Boolean)","needQuote":true,"nodes":[{"content":"StructureToPtr(Object, IntPtr, Boolean)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;A managed object that holds the data to be marshaled.","pos":[273216,273274],"source":"\\n<p>A managed object that holds the data to be marshaled."},{"content":"This object must be a structure or an instance of a formatted class.&lt;/p&gt;\\n","pos":[273275,273349],"source":" This object must be a structure or an instance of a formatted class.</p>\\n"},{"content":"\\n&lt;p&gt;A pointer to an unmanaged block of memory, which must be allocated before this method is called.&lt;/p&gt;\\n","pos":[273411,273518],"source":"\\n<p>A pointer to an unmanaged block of memory, which must be allocated before this method is called.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;structure&lt;/em&gt; is a reference type that is not a formatted class.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;structure&lt;/em&gt; is a generic type.","pos":[274108,274245],"source":"\\n<p>\\n<em>structure</em> is a reference type that is not a formatted class.</p>\\n<p>-or-</p>\\n<p>\\n<em>structure</em> is a generic type."},{"content":"&lt;/p&gt;\\n","pos":[274246,274252],"source":" </p>\\n"},{"pos":[275658,275695],"content":"StructureToPtr<T>(T, IntPtr, Boolean)","needQuote":true,"nodes":[{"content":"StructureToPtr&lt;T&gt;(T, IntPtr, Boolean)","pos":[0,37],"source":"StructureToPtr<T>(T, IntPtr, Boolean)"}]},{"content":"\\n&lt;p&gt;A managed object that holds the data to be marshaled.","pos":[276719,276777],"source":"\\n<p>A managed object that holds the data to be marshaled."},{"content":"The object must be a structure or an instance of a formatted class.","pos":[276778,276845]},{"content":"&lt;/p&gt;\\n","pos":[276846,276852],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A pointer to an unmanaged block of memory, which must be allocated before this method is called.","pos":[276914,277015],"source":"\\n<p>A pointer to an unmanaged block of memory, which must be allocated before this method is called."},{"content":"&lt;/p&gt;\\n","pos":[277016,277022],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the managed object.","pos":[277546,277582],"source":"\\n<p>The type of the managed object."},{"content":"&lt;/p&gt;\\n","pos":[277583,277589],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;structure&lt;/em&gt; is a reference type that is not a formatted class.","pos":[277700,277776],"source":"\\n<p>\\n<em>structure</em> is a reference type that is not a formatted class."},{"content":"&lt;/p&gt;\\n","pos":[277777,277783],"source":" </p>\\n"},{"pos":[279001,279027],"content":"ThrowExceptionForHR(Int32)","needQuote":true,"nodes":[{"content":"ThrowExceptionForHR(Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The HRESULT corresponding to the desired exception.&lt;/p&gt;\\n","pos":[279889,279951],"source":"\\n<p>The HRESULT corresponding to the desired exception.</p>\\n"},{"pos":[280804,280838],"content":"ThrowExceptionForHR(Int32, IntPtr)","needQuote":true,"nodes":[{"content":"ThrowExceptionForHR(Int32, IntPtr)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The HRESULT corresponding to the desired exception.&lt;/p&gt;\\n","pos":[281871,281933],"source":"\\n<p>The HRESULT corresponding to the desired exception.</p>\\n"},{"pos":[283426,283470],"content":"UnsafeAddrOfPinnedArrayElement(Array, Int32)","needQuote":true,"nodes":[{"content":"UnsafeAddrOfPinnedArrayElement(Array, Int32)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The array that contains the desired element.&lt;/p&gt;\\n","pos":[284318,284373],"source":"\\n<p>The array that contains the desired element.</p>\\n"},{"content":"\\n&lt;p&gt;The index in the &lt;em&gt;arr&lt;/em&gt; parameter of the desired element.&lt;/p&gt;\\n","pos":[284436,284510],"source":"\\n<p>The index in the <em>arr</em> parameter of the desired element.</p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;index&lt;/em&gt; inside &lt;em&gt;arr&lt;/em&gt;.&lt;/p&gt;\\n","pos":[284570,284631],"source":"\\n<p>The address of <em>index</em> inside <em>arr</em>.</p>\\n"},{"pos":[285868,285913],"content":"UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)","needQuote":true,"nodes":[{"content":"UnsafeAddrOfPinnedArrayElement&lt;T&gt;(T[], Int32)","pos":[0,45],"source":"UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)"}]},{"content":"\\n&lt;p&gt;The array that contains the desired element.","pos":[286952,287001],"source":"\\n<p>The array that contains the desired element."},{"content":"&lt;/p&gt;\\n","pos":[287002,287008],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the desired element in the &lt;em&gt;arr&lt;/em&gt; array.","pos":[287071,287135],"source":"\\n<p>The index of the desired element in the <em>arr</em> array."},{"content":"&lt;/p&gt;\\n","pos":[287136,287142],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the array.","pos":[287196,287223],"source":"\\n<p>The type of the array."},{"content":"&lt;/p&gt;\\n","pos":[287224,287230],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The address of &lt;em&gt;index&lt;/em&gt; in &lt;em&gt;arr&lt;/em&gt;.","pos":[287290,287341],"source":"\\n<p>The address of <em>index</em> in <em>arr</em>."},{"content":"&lt;/p&gt;\\n","pos":[287342,287348],"source":" </p>\\n"},{"pos":[288425,288448],"content":"WriteByte(IntPtr, Byte)","needQuote":true,"nodes":[{"content":"WriteByte(IntPtr, Byte)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The address in unmanaged memory to write to.&lt;/p&gt;\\n","pos":[289280,289335],"source":"\\n<p>The address in unmanaged memory to write to.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[289395,289425],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is not a recognized format.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[289550,289713],"source":"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n"},{"pos":[290681,290711],"content":"WriteByte(IntPtr, Int32, Byte)","needQuote":true,"nodes":[{"content":"WriteByte(IntPtr, Int32, Byte)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory to write to.&lt;/p&gt;\\n","pos":[291604,291664],"source":"\\n<p>The base address in unmanaged memory to write to.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before writing.&lt;/p&gt;\\n","pos":[291725,291823],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[291883,291913],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[292038,292144],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[293119,293149],"content":"WriteByte(Object, Int32, Byte)","needQuote":true,"nodes":[{"content":"WriteByte(Object, Int32, Byte)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory of the target object.&lt;/p&gt;\\n","pos":[294084,294153],"source":"\\n<p>The base address in unmanaged memory of the target object.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before writing.&lt;/p&gt;\\n","pos":[294798,294896],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[294956,294986],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[295111,295217],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[296761,296785],"content":"WriteInt16(IntPtr, Char)","needQuote":true,"nodes":[{"content":"WriteInt16(IntPtr, Char)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The address in unmanaged memory to write to.&lt;/p&gt;\\n","pos":[297639,297694],"source":"\\n<p>The address in unmanaged memory to write to.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[297754,297784],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is not a recognized format.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[297909,298072],"source":"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n"},{"pos":[299008,299033],"content":"WriteInt16(IntPtr, Int16)","needQuote":true,"nodes":[{"content":"WriteInt16(IntPtr, Int16)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The address in unmanaged memory to write to.&lt;/p&gt;\\n","pos":[299875,299930],"source":"\\n<p>The address in unmanaged memory to write to.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[299991,300021],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is not a recognized format.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[300146,300309],"source":"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n"},{"pos":[301282,301313],"content":"WriteInt16(IntPtr, Int32, Char)","needQuote":true,"nodes":[{"content":"WriteInt16(IntPtr, Int32, Char)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The base address in the native heap to write to.&lt;/p&gt;\\n","pos":[302220,302279],"source":"\\n<p>The base address in the native heap to write to.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before writing.&lt;/p&gt;\\n","pos":[302340,302438],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[302498,302528],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[302653,302759],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[303946,303978],"content":"WriteInt16(IntPtr, Int32, Int16)","needQuote":true,"nodes":[{"content":"WriteInt16(IntPtr, Int32, Int16)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory to write to.&lt;/p&gt;\\n","pos":[304890,304950],"source":"\\n<p>The base address in unmanaged memory to write to.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before writing.&lt;/p&gt;\\n","pos":[305011,305109],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[305170,305200],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[305325,305431],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[306616,306647],"content":"WriteInt16(Object, Int32, Char)","needQuote":true,"nodes":[{"content":"WriteInt16(Object, Int32, Char)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory of the target object.&lt;/p&gt;\\n","pos":[307564,307633],"source":"\\n<p>The base address in unmanaged memory of the target object.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before writing.&lt;/p&gt;\\n","pos":[307998,308096],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[308156,308186],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[308311,308417],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[310005,310037],"content":"WriteInt16(Object, Int32, Int16)","needQuote":true,"nodes":[{"content":"WriteInt16(Object, Int32, Int16)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory of the target object.&lt;/p&gt;\\n","pos":[310989,311058],"source":"\\n<p>The base address in unmanaged memory of the target object.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before writing.","pos":[311703,311795],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing."},{"content":"&lt;/p&gt;\\n","pos":[311796,311802],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[311863,311893],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[312018,312124],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[313675,313700],"content":"WriteInt32(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"WriteInt32(IntPtr, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The address in unmanaged memory to write to.&lt;/p&gt;\\n","pos":[314549,314604],"source":"\\n<p>The address in unmanaged memory to write to.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[314665,314695],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is not a recognized format.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[314820,314929],"source":"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[314930,314984],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n"},{"pos":[315960,315992],"content":"WriteInt32(IntPtr, Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteInt32(IntPtr, Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory to write to.&lt;/p&gt;\\n","pos":[316904,316964],"source":"\\n<p>The base address in unmanaged memory to write to.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before writing.&lt;/p&gt;\\n","pos":[317025,317123],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[317184,317214],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[317339,317445],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[318633,318665],"content":"WriteInt32(Object, Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteInt32(Object, Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory of the target object.&lt;/p&gt;\\n","pos":[319617,319686],"source":"\\n<p>The base address in unmanaged memory of the target object.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before writing.&lt;/p&gt;\\n","pos":[320331,320429],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[320490,320520],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[320645,320751],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[322341,322373],"content":"WriteInt64(IntPtr, Int32, Int64)","needQuote":true,"nodes":[{"content":"WriteInt64(IntPtr, Int32, Int64)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory to write.&lt;/p&gt;\\n","pos":[323281,323338],"source":"\\n<p>The base address in unmanaged memory to write.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before writing.&lt;/p&gt;\\n","pos":[323399,323497],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[323558,323588],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[323713,323819],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[324968,324993],"content":"WriteInt64(IntPtr, Int64)","needQuote":true,"nodes":[{"content":"WriteInt64(IntPtr, Int64)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The address in unmanaged memory to write to.&lt;/p&gt;\\n","pos":[325840,325895],"source":"\\n<p>The address in unmanaged memory to write to.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[325956,325986],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is not a recognized format.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[326111,326274],"source":"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n"},{"pos":[327250,327282],"content":"WriteInt64(Object, Int32, Int64)","needQuote":true,"nodes":[{"content":"WriteInt64(Object, Int32, Int64)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory of the target object.&lt;/p&gt;\\n","pos":[328232,328301],"source":"\\n<p>The base address in unmanaged memory of the target object.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before writing.&lt;/p&gt;\\n","pos":[328946,329044],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[329105,329135],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[329260,329366],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[330962,330996],"content":"WriteIntPtr(IntPtr, Int32, IntPtr)","needQuote":true,"nodes":[{"content":"WriteIntPtr(IntPtr, Int32, IntPtr)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory to write to.&lt;/p&gt;\\n","pos":[331922,331982],"source":"\\n<p>The base address in unmanaged memory to write to.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before writing.&lt;/p&gt;\\n","pos":[332043,332141],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[332203,332233],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[332358,332464],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[333621,333648],"content":"WriteIntPtr(IntPtr, IntPtr)","needQuote":true,"nodes":[{"content":"WriteIntPtr(IntPtr, IntPtr)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The address in unmanaged memory to write to.&lt;/p&gt;\\n","pos":[334515,334570],"source":"\\n<p>The address in unmanaged memory to write to.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[334632,334662],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is not a recognized format.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;ptr&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[334787,334950],"source":"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n"},{"pos":[335934,335968],"content":"WriteIntPtr(Object, Int32, IntPtr)","needQuote":true,"nodes":[{"content":"WriteIntPtr(Object, Int32, IntPtr)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The base address in unmanaged memory of the target object.&lt;/p&gt;\\n","pos":[336914,336983],"source":"\\n<p>The base address in unmanaged memory of the target object.</p>\\n"},{"content":"\\n&lt;p&gt;An additional byte offset, which is added to the &lt;em&gt;ptr&lt;/em&gt; parameter before writing.&lt;/p&gt;\\n","pos":[337628,337726],"source":"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[337788,337818],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;Base address (&lt;em&gt;ptr&lt;/em&gt;) plus offset byte (&lt;em&gt;ofs&lt;/em&gt;) produces a null or invalid address.&lt;/p&gt;\\n","pos":[337943,338049],"source":"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n"},{"pos":[339571,339591],"content":"ZeroFreeBSTR(IntPtr)","needQuote":true,"nodes":[{"content":"ZeroFreeBSTR(IntPtr)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The address of the &lt;strong&gt;BSTR&lt;/strong&gt; to free.&lt;/p&gt;\\n","pos":[340621,340681],"source":"\\n<p>The address of the <strong>BSTR</strong> to free.</p>\\n"},{"pos":[341369,341398],"content":"ZeroFreeCoTaskMemAnsi(IntPtr)","needQuote":true,"nodes":[{"content":"ZeroFreeCoTaskMemAnsi(IntPtr)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The address of the unmanaged string to free.&lt;/p&gt;\\n","pos":[342417,342472],"source":"\\n<p>The address of the unmanaged string to free.</p>\\n"},{"pos":[343178,343210],"content":"ZeroFreeCoTaskMemUnicode(IntPtr)","needQuote":true,"nodes":[{"content":"ZeroFreeCoTaskMemUnicode(IntPtr)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The address of the unmanaged string to free.&lt;/p&gt;\\n","pos":[344244,344299],"source":"\\n<p>The address of the unmanaged string to free.</p>\\n"},{"pos":[345005,345036],"content":"ZeroFreeGlobalAllocAnsi(IntPtr)","needQuote":true,"nodes":[{"content":"ZeroFreeGlobalAllocAnsi(IntPtr)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The address of the unmanaged string to free.&lt;/p&gt;\\n","pos":[346065,346120],"source":"\\n<p>The address of the unmanaged string to free.</p>\\n"},{"pos":[346834,346868],"content":"ZeroFreeGlobalAllocUnicode(IntPtr)","needQuote":true,"nodes":[{"content":"ZeroFreeGlobalAllocUnicode(IntPtr)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The address of the unmanaged string to free.&lt;/p&gt;\\n","pos":[347912,347967],"source":"\\n<p>The address of the unmanaged string to free.</p>\\n"},{"pos":[348660,348686],"content":"ZeroFreeMemoryUTF8(IntPtr)","needQuote":true,"nodes":[{"content":"ZeroFreeMemoryUTF8(IntPtr)","pos":[0,26]}]},{"pos":[349798,349828],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[350031,350037],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[350197,350207],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[350302,350310],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[350379,350380],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[350407,350408],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[350478,350486],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[350555,350556],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[350583,350584],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[350767,350781],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[350900,350906],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[350973,350974],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[351024,351030],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[351090,351091],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[351174,351180],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[351247,351248],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[351298,351304],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[351364,351365],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[351579,351601],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[351749,351755],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[351822,351823],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[351873,351879],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[351940,351941]},{"pos":[351996,352002],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[352062,352063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[352160,352166],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[352233,352234],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[352284,352290],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[352351,352352]},{"pos":[352407,352413],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[352473,352474],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[352719,352750],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[352916,352931],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[353007,353008],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[353058,353064],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[353125,353126]},{"pos":[353181,353187],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[353247,353248],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[353354,353369],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[353445,353446],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[353496,353502],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[353563,353564]},{"pos":[353619,353625],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[353685,353686],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[353916,353929],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[354030,354041],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[354113,354114],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[354141,354142],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[354215,354226],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[354298,354299],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[354326,354327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[354502,354511],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[354604,354611],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[354679,354680],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[354707,354708],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[354777,354784],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[354852,354853],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[354880,354881],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[355056,355073],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[355182,355197],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[355273,355274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[355301,355302],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[355379,355394],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[355470,355471],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[355498,355499],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[355644,355650],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[355780,355785],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[355927,355933],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[356079,356086],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[356197,356203],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[356323,356327],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[356386,356388]},{"pos":[356451,356455],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[356513,356515],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[356611,356617],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[356737,356741],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[356800,356802]},{"pos":[356865,356869],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[356927,356929],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[357027,357035],"content":"Double[]","needQuote":true,"nodes":[{"content":"Double[]","pos":[0,8]}]},{"pos":[357163,357169],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"content":"[]","pos":[357230,357232]},{"pos":[357297,357303],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[357363,357365],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[357466,357473],"content":"Int16[]","needQuote":true,"nodes":[{"content":"Int16[]","pos":[0,7]}]},{"pos":[357597,357602],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"content":"[]","pos":[357662,357664]},{"pos":[357728,357733],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[357792,357794],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[357893,357900],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[358024,358029],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[358089,358091]},{"pos":[358155,358160],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[358219,358221],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[358320,358327],"content":"Int64[]","needQuote":true,"nodes":[{"content":"Int64[]","pos":[0,7]}]},{"pos":[358451,358456],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":"[]","pos":[358516,358518]},{"pos":[358582,358587],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[358646,358648],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[358748,358756],"content":"IntPtr[]","needQuote":true,"nodes":[{"content":"IntPtr[]","pos":[0,8]}]},{"pos":[358884,358890],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"content":"[]","pos":[358951,358953]},{"pos":[359018,359024],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[359084,359086],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[359188,359196],"content":"Single[]","needQuote":true,"nodes":[{"content":"Single[]","pos":[0,8]}]},{"pos":[359324,359330],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"content":"[]","pos":[359391,359393]},{"pos":[359458,359464],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[359524,359526],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[359634,359635],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[359724,359725],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[359822,359826],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[359950,359958],"content":"TWrapper","needQuote":true,"nodes":[{"content":"TWrapper","pos":[0,8]}]},{"pos":[360075,360083],"content":"TWrapper","needQuote":true,"nodes":[{"content":"TWrapper","pos":[0,8]}]},{"pos":[360288,360312],"content":"CustomQueryInterfaceMode","needQuote":true,"nodes":[{"content":"CustomQueryInterfaceMode","pos":[0,24]}]},{"pos":[360561,360569],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[360707,360716],"content":"TDelegate","needQuote":true,"nodes":[{"content":"TDelegate","pos":[0,9]}]},{"pos":[360837,360846],"content":"TDelegate","needQuote":true,"nodes":[{"content":"TDelegate","pos":[0,9]}]},{"pos":[360964,360973],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[361092,361100],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[361228,361234],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[361295,361297]},{"pos":[361362,361368],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[361428,361430],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[361524,361527],"content":"T[]","needQuote":true,"nodes":[{"content":"T[]","pos":[0,3]}]},{"pos":[361603,361604],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[361632,361634]},{"pos":[361676,361677],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[361704,361706],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[361831,361835],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[362043,362052],"content":"ITypeInfo","needQuote":true,"nodes":[{"content":"ITypeInfo","pos":[0,9]}]},{"pos":[362272,362278],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[362432,362471],"content":"System.Runtime.InteropServices.ComTypes","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices.ComTypes","pos":[0,39]}]},{"pos":[362699,362703],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[362841,362846],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[362987,362992],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[363133,363138],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[363278,363282],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[363418,363438],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]},{"pos":[363629,363656],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[363862,363883],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[364084,364101],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[364276,364296],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[364514,364544],"content":"InvalidOleVariantTypeException","needQuote":true,"nodes":[{"content":"InvalidOleVariantTypeException","pos":[0,30]}]},{"pos":[364824,364845],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[365034,365056],"content":"MissingMethodException","needQuote":true,"nodes":[{"content":"MissingMethodException","pos":[0,22]}]},{"pos":[365287,365309],"content":"NullReferenceException","needQuote":true,"nodes":[{"content":"NullReferenceException","pos":[0,22]}]}],"content":"items:\n- uid: System.Runtime.InteropServices.Marshal\n  commentId: T:System.Runtime.InteropServices.Marshal\n  id: Marshal\n  parent: System.Runtime.InteropServices\n  children:\n  - System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n  - System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)\n  - System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup\n  - System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)\n  - System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)\n  - System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)\n  - System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)\n  - System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\n  - System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)\n  - System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)\n  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)\n  - System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)\n  - System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetExceptionCode\n  - System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)\n  - System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)\n  - System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)\n  - System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)\n  - System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error\n  - System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n  - System.Runtime.InteropServices.Marshal.GetLastWin32Error\n  - System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)\n  - System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)\n  - System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)\n  - System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.IsComObject(System.Object)\n  - System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)\n  - System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)\n  - System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)\n  - System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)\n  - System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)\n  - System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n  - System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)\n  - System.Runtime.InteropServices.Marshal.SizeOf(System.Object)\n  - System.Runtime.InteropServices.Marshal.SizeOf(System.Type)\n  - System.Runtime.InteropServices.Marshal.SizeOf``1\n  - System.Runtime.InteropServices.Marshal.SizeOf``1(``0)\n  - System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)\n  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)\n  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)\n  - System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  - System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)\n  - System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)\n  - System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)\n  - System.Runtime.InteropServices.Marshal.SystemDefaultCharSize\n  - System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize\n  - System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\n  - System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)\n  - System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)\n  - System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)\n  - System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n  - System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)\n  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)\n  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)\n  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)\n  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)\n  - System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)\n  - System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)\n  - System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)\n  - System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)\n  - System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)\n  - System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)\n  - System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)\n  - System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)\n  - System.Runtime.InteropServices.Marshal.ZeroFreeMemoryUTF8(System.IntPtr)\n  langs:\n  - csharp\n  - vb\n  name: Marshal\n  fullName: System.Runtime.InteropServices.Marshal\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Marshal\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 48\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public class Marshal\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Class Marshal\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Marshal\n- uid: System.Runtime.InteropServices.Marshal.SystemDefaultCharSize\n  commentId: F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize\n  id: SystemDefaultCharSize\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: SystemDefaultCharSize\n  fullName: System.Runtime.InteropServices.Marshal.SystemDefaultCharSize\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SystemDefaultCharSize\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 95\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly int SystemDefaultCharSize\n    content.vb: Public Shared ReadOnly SystemDefaultCharSize As Integer\n    return:\n      type: System.Int32\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)\n  - type: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Marshal.SystemDefaultCharSize\n- uid: System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize\n  commentId: F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize\n  id: SystemMaxDBCSCharSize\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: SystemMaxDBCSCharSize\n  fullName: System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SystemMaxDBCSCharSize\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 100\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly int SystemMaxDBCSCharSize\n    content.vb: Public Shared ReadOnly SystemMaxDBCSCharSize As Integer\n    return:\n      type: System.Int32\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  - type: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Marshal.SystemMaxDBCSCharSize\n- uid: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n  id: AddRef(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: AddRef(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Increments the reference count on the specified interface.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static int AddRef(IntPtr pUnk)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function AddRef(pUnk As IntPtr) As Integer\n    parameters:\n    - id: pUnk\n      type: System.IntPtr\n      description: \"\\n<p>The interface reference count to increment.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The new value of the reference count on the <em>pUnk</em> parameter.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n    commentId: M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n  - type: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n  - type: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n  - type: System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.AddRef(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n  id: AllocCoTaskMem(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: AllocCoTaskMem(Int32)\n  fullName: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AllocCoTaskMem\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1863\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Allocates a block of memory of specified size from the COM task memory allocator.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr AllocCoTaskMem(int cb)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function AllocCoTaskMem(cb As Integer) As IntPtr\n    parameters:\n    - id: cb\n      type: System.Int32\n      description: \"\\n<p>The size of the block of memory to be allocated.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>An integer representing the address of the block of memory allocated. This memory must be released with <xref href=\\\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory to satisfy the request.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.AllocCoTaskMem(Int32)\n- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)\n  id: AllocHGlobal(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: AllocHGlobal(Int32)\n  fullName: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AllocHGlobal\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1234\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Allocates memory from the unmanaged memory of the process by using the specified number of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static IntPtr AllocHGlobal(int cb)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function AllocHGlobal(cb As Integer) As IntPtr\n    parameters:\n    - id: cb\n      type: System.Int32\n      description: \"\\n<p>The required number of bytes in memory.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to the newly allocated memory. This memory must be released using the <xref href=\\\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory to satisfy the request.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.AllocHGlobal(Int32)\n- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\n  id: AllocHGlobal(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: AllocHGlobal(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AllocHGlobal\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1209\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public static IntPtr AllocHGlobal(IntPtr cb)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Shared Function AllocHGlobal(cb As IntPtr) As IntPtr\n    parameters:\n    - id: cb\n      type: System.IntPtr\n      description: \"\\n<p>The required number of bytes in memory.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to the newly allocated memory. This memory must be released using the <xref href=\\\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory to satisfy the request.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.AllocHGlobal(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup\n  commentId: M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup\n  id: AreComObjectsAvailableForCleanup\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: AreComObjectsAvailableForCleanup()\n  fullName: System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup()\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static bool AreComObjectsAvailableForCleanup()\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function AreComObjectsAvailableForCleanup As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if there are any RCWs available for cleanup; otherwise, <strong>false</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.AreComObjectsAvailableForCleanup()\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(Byte[], Int32, IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Byte[], System.Int32, System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 375\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(byte[] source, int startIndex, IntPtr destination, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As Byte(), startIndex As Integer, destination As IntPtr, length As Integer)\n    parameters:\n    - id: source\n      type: System.Byte[]\n      description: \"\\n<p>The one-dimensional array to copy from.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the source array where copying should start.</p>\\n\"\n    - id: destination\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy to.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Byte(), System.Int32, System.IntPtr, System.Int32)\n  name.vb: Copy(Byte(), Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Byte[], Int32, IntPtr, Int32)\n  nameWithType.vb: Marshal.Copy(Byte(), Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(Char[], Int32, IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Char[], System.Int32, System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 350\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(char[] source, int startIndex, IntPtr destination, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As Char(), startIndex As Integer, destination As IntPtr, length As Integer)\n    parameters:\n    - id: source\n      type: System.Char[]\n      description: \"\\n<p>The one-dimensional array to copy from.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the source array where copying should start.</p>\\n\"\n    - id: destination\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy to.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Char(), System.Int32, System.IntPtr, System.Int32)\n  name.vb: Copy(Char(), Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Char[], Int32, IntPtr, Int32)\n  nameWithType.vb: Marshal.Copy(Char(), Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(Double[], Int32, IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Double[], System.Int32, System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 370\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(double[] source, int startIndex, IntPtr destination, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As Double(), startIndex As Integer, destination As IntPtr, length As Integer)\n    parameters:\n    - id: source\n      type: System.Double[]\n      description: \"\\n<p>The one-dimensional array to copy from.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the source array where copying should start.</p>\\n\"\n    - id: destination\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy to.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Double(), System.Int32, System.IntPtr, System.Int32)\n  name.vb: Copy(Double(), Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Double[], Int32, IntPtr, Int32)\n  nameWithType.vb: Marshal.Copy(Double(), Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(Int16[], Int32, IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Int16[], System.Int32, System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 355\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(short[] source, int startIndex, IntPtr destination, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As Short(), startIndex As Integer, destination As IntPtr, length As Integer)\n    parameters:\n    - id: source\n      type: System.Int16[]\n      description: \"\\n<p>The one-dimensional array to copy from.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the source array where copying should start.</p>\\n\"\n    - id: destination\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy to.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Int16(), System.Int32, System.IntPtr, System.Int32)\n  name.vb: Copy(Int16(), Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Int16[], Int32, IntPtr, Int32)\n  nameWithType.vb: Marshal.Copy(Int16(), Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(Int32[], Int32, IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Int32[], System.Int32, System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 345\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(int[] source, int startIndex, IntPtr destination, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As Integer(), startIndex As Integer, destination As IntPtr, length As Integer)\n    parameters:\n    - id: source\n      type: System.Int32[]\n      description: \"\\n<p>The one-dimensional array to copy from.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the source array where copying should start.</p>\\n\"\n    - id: destination\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy to.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>startIndex</em> or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Int32(), System.Int32, System.IntPtr, System.Int32)\n  name.vb: Copy(Int32(), Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Int32[], Int32, IntPtr, Int32)\n  nameWithType.vb: Marshal.Copy(Int32(), Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(Int64[], Int32, IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Int64[], System.Int32, System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 360\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(long[] source, int startIndex, IntPtr destination, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As Long(), startIndex As Integer, destination As IntPtr, length As Integer)\n    parameters:\n    - id: source\n      type: System.Int64[]\n      description: \"\\n<p>The one-dimensional array to copy from.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the source array where copying should start.</p>\\n\"\n    - id: destination\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy to.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Int64(), System.Int32, System.IntPtr, System.Int32)\n  name.vb: Copy(Int64(), Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Int64[], Int32, IntPtr, Int32)\n  nameWithType.vb: Marshal.Copy(Int64(), Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(IntPtr, Byte[], Int32, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 421\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(IntPtr source, byte[] destination, int startIndex, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As IntPtr, destination As Byte(), startIndex As Integer, length As Integer)\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy from.</p>\\n\"\n    - id: destination\n      type: System.Byte[]\n      description: \"\\n<p>The array to copy to.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Byte(), System.Int32, System.Int32)\n  name.vb: Copy(IntPtr, Byte(), Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Byte[], Int32, Int32)\n  nameWithType.vb: Marshal.Copy(IntPtr, Byte(), Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(IntPtr, Char[], Int32, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 396\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from an unmanaged memory pointer to a managed character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(IntPtr source, char[] destination, int startIndex, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As IntPtr, destination As Char(), startIndex As Integer, length As Integer)\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy from.</p>\\n\"\n    - id: destination\n      type: System.Char[]\n      description: \"\\n<p>The array to copy to.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Char(), System.Int32, System.Int32)\n  name.vb: Copy(IntPtr, Char(), Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Char[], Int32, Int32)\n  nameWithType.vb: Marshal.Copy(IntPtr, Char(), Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(IntPtr, Double[], Int32, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Double[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 416\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(IntPtr source, double[] destination, int startIndex, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As IntPtr, destination As Double(), startIndex As Integer, length As Integer)\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy from.</p>\\n\"\n    - id: destination\n      type: System.Double[]\n      description: \"\\n<p>The array to copy to.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Double(), System.Int32, System.Int32)\n  name.vb: Copy(IntPtr, Double(), Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Double[], Int32, Int32)\n  nameWithType.vb: Marshal.Copy(IntPtr, Double(), Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(IntPtr, Int16[], Int32, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Int16[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 401\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(IntPtr source, short[] destination, int startIndex, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As IntPtr, destination As Short(), startIndex As Integer, length As Integer)\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy from.</p>\\n\"\n    - id: destination\n      type: System.Int16[]\n      description: \"\\n<p>The array to copy to.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Int16(), System.Int32, System.Int32)\n  name.vb: Copy(IntPtr, Int16(), Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Int16[], Int32, Int32)\n  nameWithType.vb: Marshal.Copy(IntPtr, Int16(), Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(IntPtr, Int32[], Int32, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Int32[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 391\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(IntPtr source, int[] destination, int startIndex, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As IntPtr, destination As Integer(), startIndex As Integer, length As Integer)\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy from.</p>\\n\"\n    - id: destination\n      type: System.Int32[]\n      description: \"\\n<p>The array to copy to.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Int32(), System.Int32, System.Int32)\n  name.vb: Copy(IntPtr, Int32(), Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Int32[], Int32, Int32)\n  nameWithType.vb: Marshal.Copy(IntPtr, Int32(), Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(IntPtr, Int64[], Int32, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Int64[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 406\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(IntPtr source, long[] destination, int startIndex, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As IntPtr, destination As Long(), startIndex As Integer, length As Integer)\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy from.</p>\\n\"\n    - id: destination\n      type: System.Int64[]\n      description: \"\\n<p>The array to copy to.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Int64(), System.Int32, System.Int32)\n  name.vb: Copy(IntPtr, Int64(), Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Int64[], Int32, Int32)\n  nameWithType.vb: Marshal.Copy(IntPtr, Int64(), Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(IntPtr, IntPtr[], Int32, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.IntPtr[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 426\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from an unmanaged memory pointer to a managed <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(IntPtr source, IntPtr[] destination, int startIndex, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As IntPtr, destination As IntPtr(), startIndex As Integer, length As Integer)\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy from. </p>\\n\"\n    - id: destination\n      type: System.IntPtr[]\n      description: \"\\n<p>The array to copy to.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the destination array where copying should start.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.IntPtr(), System.Int32, System.Int32)\n  name.vb: Copy(IntPtr, IntPtr(), Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, IntPtr[], Int32, Int32)\n  nameWithType.vb: Marshal.Copy(IntPtr, IntPtr(), Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)\n  id: Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(IntPtr, Single[], Int32, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Single[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 411\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(IntPtr source, float[] destination, int startIndex, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As IntPtr, destination As Single(), startIndex As Integer, length As Integer)\n    parameters:\n    - id: source\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy from. </p>\\n\"\n    - id: destination\n      type: System.Single[]\n      description: \"\\n<p>The array to copy to. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the destination array where copying should start. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Single(), System.Int32, System.Int32)\n  name.vb: Copy(IntPtr, Single(), Int32, Int32)\n  nameWithType: Marshal.Copy(IntPtr, Single[], Int32, Int32)\n  nameWithType.vb: Marshal.Copy(IntPtr, Single(), Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(IntPtr[], Int32, IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[], System.Int32, System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 380\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from a one-dimensional, managed <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array to an unmanaged memory pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(IntPtr[] source, int startIndex, IntPtr destination, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As IntPtr(), startIndex As Integer, destination As IntPtr, length As Integer)\n    parameters:\n    - id: source\n      type: System.IntPtr[]\n      description: \"\\n<p>The one-dimensional array to copy from.</p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the source array where copying should start.</p>\\n\"\n    - id: destination\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy to.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr(), System.Int32, System.IntPtr, System.Int32)\n  name.vb: Copy(IntPtr(), Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(IntPtr[], Int32, IntPtr, Int32)\n  nameWithType.vb: Marshal.Copy(IntPtr(), Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)\n  id: Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Copy(Single[], Int32, IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Single[], System.Int32, System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Copy\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 365\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void Copy(float[] source, int startIndex, IntPtr destination, int length)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub Copy(source As Single(), startIndex As Integer, destination As IntPtr, length As Integer)\n    parameters:\n    - id: source\n      type: System.Single[]\n      description: \"\\n<p>The one-dimensional array to copy from. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in the source array where copying should start. </p>\\n\"\n    - id: destination\n      type: System.IntPtr\n      description: \"\\n<p>The memory pointer to copy to. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements to copy. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> and <em>length</em> are not valid. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Single(), System.Int32, System.IntPtr, System.Int32)\n  name.vb: Copy(Single(), Int32, IntPtr, Int32)\n  nameWithType: Marshal.Copy(Single[], Int32, IntPtr, Int32)\n  nameWithType.vb: Marshal.Copy(Single(), Int32, IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)\n  id: CreateAggregatedObject(System.IntPtr,System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: CreateAggregatedObject(IntPtr, Object)\n  fullName: System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr, System.Object)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Aggregates a managed object with the specified COM object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static IntPtr CreateAggregatedObject(IntPtr pOuter, object o)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function CreateAggregatedObject(pOuter As IntPtr, o As Object) As IntPtr\n    parameters:\n    - id: pOuter\n      type: System.IntPtr\n      description: \"\\n<p>The outer <strong>IUnknown</strong> pointer.</p>\\n\"\n    - id: o\n      type: System.Object\n      description: \"\\n<p>An object to aggregate.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The inner <strong>IUnknown</strong> pointer of the managed object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>o</em> is a Windows Runtime object.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CreateAggregatedObject(IntPtr, Object) may be unavailable in future releases. Instead, use CreateAggregatedObject<T>(IntPtr, T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296518\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.CreateAggregatedObject(IntPtr, Object)\n- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)\n  commentId: M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)\n  id: CreateAggregatedObject``1(System.IntPtr,``0)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: CreateAggregatedObject<T>(IntPtr, T)\n  fullName: System.Runtime.InteropServices.Marshal.CreateAggregatedObject<T>(System.IntPtr, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateAggregatedObject\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1838\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Aggregates a managed object of the specified type with the specified COM object. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr CreateAggregatedObject<T>(IntPtr pOuter, T o)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function CreateAggregatedObject(Of T)(pOuter As IntPtr, o As T) As IntPtr\n    parameters:\n    - id: pOuter\n      type: System.IntPtr\n      description: \"\\n<p>The outer <see href=\\\"http://go.microsoft.com/fwlink/?LinkId=148003\\\">IUnknown</see> pointer. </p>\\n\"\n    - id: o\n      type: '{T}'\n      description: \"\\n<p>The managed object to aggregate. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the managed object to aggregate. </p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The inner <see href=\\\"http://go.microsoft.com/fwlink/?LinkId=148003\\\">IUnknown</see> pointer of the managed object. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>o</em> is a Windows Runtime object. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.CreateAggregatedObject(Of T)(System.IntPtr, T)\n  name.vb: CreateAggregatedObject(Of T)(IntPtr, T)\n  nameWithType: Marshal.CreateAggregatedObject<T>(IntPtr, T)\n  nameWithType.vb: Marshal.CreateAggregatedObject(Of T)(IntPtr, T)\n- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)\n  id: CreateWrapperOfType(System.Object,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: CreateWrapperOfType(Object, Type)\n  fullName: System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateWrapperOfType\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2161\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Wraps the specified COM object in an object of the specified type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static object CreateWrapperOfType(object o, Type t)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function CreateWrapperOfType(o As Object, t As Type) As Object\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The object to be wrapped. </p>\\n\"\n    - id: t\n      type: System.Type\n      description: \"\\n<p>The type of wrapper to create. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The newly wrapped object that is an instance of the desired type.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>t</em> must derive from <strong>__ComObject</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>t</em> is a Windows Runtime type.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>t</em> parameter is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>o</em> cannot be converted to the destination type because it does not support all required interfaces. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.ComImportAttribute\n    commentId: T:System.Runtime.InteropServices.ComImportAttribute\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: CreateWrapperOfType(Object, Type) may be unavailable in future releases. Instead, use CreateWrapperOfType<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296519\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.CreateWrapperOfType(Object, Type)\n- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)\n  commentId: M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)\n  id: CreateWrapperOfType``2(``0)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: CreateWrapperOfType<T, TWrapper>(T)\n  fullName: System.Runtime.InteropServices.Marshal.CreateWrapperOfType<T, TWrapper>(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateWrapperOfType\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2208\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Wraps the specified COM object in an object of the specified type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static TWrapper CreateWrapperOfType<T, TWrapper>(T o)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function CreateWrapperOfType(Of T, TWrapper)(o As T) As TWrapper\n    parameters:\n    - id: o\n      type: '{T}'\n      description: \"\\n<p>The object to be wrapped. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of object to wrap. </p>\\n\"\n    - id: TWrapper\n      description: \"\\n<p>The type of object to return. </p>\\n\"\n    return:\n      type: '{TWrapper}'\n      description: \"\\n<p>The newly wrapped object. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>T</em> must derive from <strong>__ComObject</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>T</em> is a Windows Runtime type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>o</em> cannot be converted to the <em>TWrapper</em> because it does not support all required interfaces. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.CreateWrapperOfType(Of T, TWrapper)(T)\n  name.vb: CreateWrapperOfType(Of T, TWrapper)(T)\n  nameWithType: Marshal.CreateWrapperOfType<T, TWrapper>(T)\n  nameWithType.vb: Marshal.CreateWrapperOfType(Of T, TWrapper)(T)\n- uid: System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\n  id: DestroyStructure(System.IntPtr,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: DestroyStructure(IntPtr, Type)\n  fullName: System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr, System.Type)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Frees all substructures that the specified unmanaged memory block points to.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ComVisible(true)]\n\n      public static void DestroyStructure(IntPtr ptr, Type structuretype)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ComVisible(True)>\n\n      Public Shared Sub DestroyStructure(ptr As IntPtr, structuretype As Type)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to an unmanaged block of memory. </p>\\n\"\n    - id: structuretype\n      type: System.Type\n      description: \"\\n<p>Type of a formatted class. This provides the layout information necessary to delete the buffer in the <em>ptr</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>structureType</em> has an automatic layout. Use sequential or explicit instead.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: DestroyStructure(IntPtr, Type) may be unavailable in future releases. Instead, use DestroyStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296520\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.DestroyStructure(IntPtr, Type)\n- uid: System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\n  id: DestroyStructure``1(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: DestroyStructure<T>(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.DestroyStructure<T>(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DestroyStructure\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1068\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Frees all substructures of a specified type that the specified unmanaged memory block points to. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void DestroyStructure<T>(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub DestroyStructure(Of T)(ptr As IntPtr)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to an unmanaged block of memory. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the formatted structure. This provides the layout information necessary to delete the buffer in the <em>ptr</em> parameter. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>T</em> has an automatic layout. Use sequential or explicit instead. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.DestroyStructure(Of T)(System.IntPtr)\n  name.vb: DestroyStructure(Of T)(IntPtr)\n  nameWithType: Marshal.DestroyStructure<T>(IntPtr)\n  nameWithType.vb: Marshal.DestroyStructure(Of T)(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)\n  id: FinalReleaseComObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: FinalReleaseComObject(Object)\n  fullName: System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FinalReleaseComObject\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2059\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static int FinalReleaseComObject(object o)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function FinalReleaseComObject(o As Object) As Integer\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The RCW to be released.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The new value of the reference count of the RCW associated with the <em>o</em><em></em>parameter, which is 0 (zero) if the release is successful.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>o</em> is not a valid COM object.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>o</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)\n    commentId: M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.FinalReleaseComObject(Object)\n- uid: System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)\n  id: FreeBSTR(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: FreeBSTR(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FreeBSTR\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1996\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Frees a <strong>BSTR</strong> using the COM <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=148633\\\">SysFreeString</see> function.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void FreeBSTR(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub FreeBSTR(ptr As IntPtr)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address of the BSTR to be freed. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.FreeBSTR(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  id: FreeCoTaskMem(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: FreeCoTaskMem(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FreeCoTaskMem\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1974\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Frees a block of memory allocated by the unmanaged COM task memory allocator.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void FreeCoTaskMem(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub FreeCoTaskMem(ptr As IntPtr)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address of the memory to be freed. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\n    commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\n  - type: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.FreeCoTaskMem(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  id: FreeHGlobal(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: FreeHGlobal(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FreeHGlobal\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1241\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Frees memory previously allocated from the unmanaged memory of the process.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static void FreeHGlobal(IntPtr hglobal)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Sub FreeHGlobal(hglobal As IntPtr)\n    parameters:\n    - id: hglobal\n      type: System.IntPtr\n      description: \"\\n<p>The handle returned by the original matching call to <xref href=\\\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.FreeHGlobal(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n  id: GetComInterfaceForObject(System.Object,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetComInterfaceForObject(Object, Type)\n  fullName: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetComInterfaceForObject\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1767\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns a pointer to an <see href=\\\"http://go.microsoft.com/fwlink/?LinkId=148003\\\">IUnknown</see> interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr GetComInterfaceForObject(object o, Type T)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function GetComInterfaceForObject(o As Object, T As Type) As IntPtr\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The object that provides the interface. </p>\\n\"\n    - id: T\n      type: System.Type\n      description: \"\\n<p>The type of interface that is requested. </p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The interface pointer that represents the specified interface for the object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>T</em> parameter is not an interface.</p>\\n<p>-or-</p>\\n<p>The type is not visible to COM. </p>\\n<p>-or-</p>\\n<p>The <em>T</em> parameter is a generic type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The <em>o</em> parameter does not support the requested interface. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>o</em> parameter is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>The <em>T</em> parameter is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)\n  - type: System.Runtime.InteropServices.ComImportAttribute\n    commentId: T:System.Runtime.InteropServices.ComImportAttribute\n  - type: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  - type: System.Runtime.InteropServices.UCOMIConnectionPointContainer\n    commentId: T:System.Runtime.InteropServices.UCOMIConnectionPointContainer\n  - type: System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: GetComInterfaceForObject(Object, Type) may be unavailable in future releases. Instead, use GetComInterfaceForObject<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296509\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetComInterfaceForObject(Object, Type)\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)\n  id: GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)\n  fullName: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object, System.Type, System.Runtime.InteropServices.CustomQueryInterfaceMode)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetComInterfaceForObject\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1784\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns a pointer to an <see href=\\\"http://go.microsoft.com/fwlink/?LinkId=148003\\\">IUnknown</see> interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr GetComInterfaceForObject(object o, Type T, CustomQueryInterfaceMode mode)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function GetComInterfaceForObject(o As Object, T As Type, mode As CustomQueryInterfaceMode) As IntPtr\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The object that provides the interface.</p>\\n\"\n    - id: T\n      type: System.Type\n      description: \"\\n<p>The type of interface that is requested.</p>\\n\"\n    - id: mode\n      type: System.Runtime.InteropServices.CustomQueryInterfaceMode\n      description: \"\\n<p>One of the enumeration values that indicates whether to apply an <strong>IUnknown::QueryInterface</strong> customization that is supplied by an <xref href=\\\"System.Runtime.InteropServices.ICustomQueryInterface\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The interface pointer that represents the interface for the object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>T</em> parameter is not an interface.</p>\\n<p>-or- </p>\\n<p>The type is not visible to COM.</p>\\n<p>-or-</p>\\n<p>The <em>T</em> parameter is a generic type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The object <em>o</em> does not support the requested interface.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>o</em> parameter is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>The <em>T</em> parameter is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode) and support for ICustomQueryInterface may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)\n- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)\n  id: GetComInterfaceForObject``2(``0)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetComInterfaceForObject<T, TInterface>(T)\n  fullName: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject<T, TInterface>(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetComInterfaceForObject\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1773\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Returns a pointer to an <see href=\\\"http://go.microsoft.com/fwlink/?LinkId=148003\\\">IUnknown</see> interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr GetComInterfaceForObject<T, TInterface>(T o)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function GetComInterfaceForObject(Of T, TInterface)(o As T) As IntPtr\n    parameters:\n    - id: o\n      type: '{T}'\n      description: \"\\n<p>The object that provides the interface. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of <em>o</em>. </p>\\n\"\n    - id: TInterface\n      description: \"\\n<p>The type of interface to return. </p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The interface pointer that represents the <em>TInterface</em> interface.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>TInterface</em> parameter is not an interface.</p>\\n<p>-or- </p>\\n<p>The type is not visible to COM. </p>\\n<p>-or-</p>\\n<p>The <em>T</em> parameter is an open generic type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The <em>o</em> parameter does not support the <em>TInterface</em> interface. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>o</em> parameter is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(Of T, TInterface)(T)\n  name.vb: GetComInterfaceForObject(Of T, TInterface)(T)\n  nameWithType: Marshal.GetComInterfaceForObject<T, TInterface>(T)\n  nameWithType.vb: Marshal.GetComInterfaceForObject(Of T, TInterface)(T)\n- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)\n  id: GetDelegateForFunctionPointer(System.IntPtr,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetDelegateForFunctionPointer(IntPtr, Type)\n  fullName: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDelegateForFunctionPointer\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2612\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Converts an unmanaged function pointer to a delegate.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t)\n    content.vb: \"<SecurityCritical>\\nPublic Shared Function GetDelegateForFunctionPointer(ptr As IntPtr, t As Type) As \"\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The unmanaged function pointer to be converted.</p>\\n\"\n    - id: t\n      type: System.Type\n      description: \"\\n<p>The type of the delegate to be returned.</p>\\n\"\n    return:\n      type: System.Delegate\n      description: \"\\n<p>A delegate instance that can be cast to the appropriate delegate type.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>t</em> parameter is not a delegate or is generic.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>ptr</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>t</em> parameter is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: GetDelegateForFunctionPointer(IntPtr, Type) may be unavailable in future releases. Instead, use GetDelegateForFunctionPointer<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296521\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetDelegateForFunctionPointer(IntPtr, Type)\n- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)\n  id: GetDelegateForFunctionPointer``1(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetDelegateForFunctionPointer<TDelegate>(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer<TDelegate>(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDelegateForFunctionPointer\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2636\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Converts an unmanaged function pointer to a delegate of a specified type. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static TDelegate GetDelegateForFunctionPointer<TDelegate>(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function GetDelegateForFunctionPointer(Of TDelegate)(ptr As IntPtr) As TDelegate\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The unmanaged function pointer to convert. </p>\\n\"\n    typeParameters:\n    - id: TDelegate\n      description: \"\\n<p>The type of the delegate to return. </p>\\n\"\n    return:\n      type: '{TDelegate}'\n      description: \"\\n<p>A instance of the specified delegate type.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>TDelegate</em> generic parameter is not a delegate, or it is an open generic type.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>ptr</em> parameter is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(Of TDelegate)(System.IntPtr)\n  name.vb: GetDelegateForFunctionPointer(Of TDelegate)(IntPtr)\n  nameWithType: Marshal.GetDelegateForFunctionPointer<TDelegate>(IntPtr)\n  nameWithType.vb: Marshal.GetDelegateForFunctionPointer(Of TDelegate)(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionCode\n  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionCode\n  id: GetExceptionCode\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetExceptionCode()\n  fullName: System.Runtime.InteropServices.Marshal.GetExceptionCode()\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Retrieves a code that identifies the type of the exception that occurred.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static int GetExceptionCode()\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function GetExceptionCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The type of the exception.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: GetExceptionCode() may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetExceptionCode()\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)\n  id: GetExceptionForHR(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetExceptionForHR(Int32)\n  fullName: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetExceptionForHR\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1128\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Converts the specified HRESULT error code to a corresponding <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static Exception GetExceptionForHR(int errorCode)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function GetExceptionForHR(errorCode As Integer) As Exception\n    parameters:\n    - id: errorCode\n      type: System.Int32\n      description: \"\\n<p>The HRESULT to be converted.</p>\\n\"\n    return:\n      type: System.Exception\n      description: \"\\n<p>An object that represents the converted HRESULT.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetExceptionForHR(Int32)\n- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)\n  id: GetExceptionForHR(System.Int32,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetExceptionForHR(Int32, IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32, System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetExceptionForHR\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1136\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Converts the specified HRESULT error code to a corresponding <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, with additional error information passed in an IErrorInfo interface for the exception object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static Exception GetExceptionForHR(int errorCode, IntPtr errorInfo)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function GetExceptionForHR(errorCode As Integer, errorInfo As IntPtr) As Exception\n    parameters:\n    - id: errorCode\n      type: System.Int32\n      description: \"\\n<p>The HRESULT to be converted.</p>\\n\"\n    - id: errorInfo\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to the <strong>IErrorInfo</strong> interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current <strong>IErrorInfo</strong> interface, or <code>IntPtr(-1)</code> to ignore the current <strong>IErrorInfo</strong> interface and construct the exception just from the error code.</p>\\n\"\n    return:\n      type: System.Exception\n      description: \"\\n<p>An object that represents the converted HRESULT and information obtained from <em>errorInfo</em>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetExceptionForHR(Int32, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)\n  id: GetFunctionPointerForDelegate(System.Delegate)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetFunctionPointerForDelegate(Delegate)\n  fullName: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFunctionPointerForDelegate\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2645\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Converts a delegate into a function pointer that is callable from unmanaged code.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr GetFunctionPointerForDelegate(Delegate d)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function GetFunctionPointerForDelegate(d As  Delegate) As IntPtr\n    parameters:\n    - id: d\n      type: System.Delegate\n      description: \"\\n<p>The delegate to be passed to unmanaged code.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>d</em> parameter is a generic type.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>d</em> parameter is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: GetFunctionPointerForDelegate(Delegate) may be unavailable in future releases. Instead, use GetFunctionPointerForDelegate<T>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296522\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetFunctionPointerForDelegate(Delegate)\n- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)\n  id: GetFunctionPointerForDelegate``1(``0)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetFunctionPointerForDelegate<TDelegate>(TDelegate)\n  fullName: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate<TDelegate>(TDelegate)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFunctionPointerForDelegate\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2655\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Converts a delegate of a specified type to a function pointer that is callable from unmanaged code. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr GetFunctionPointerForDelegate<TDelegate>(TDelegate d)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function GetFunctionPointerForDelegate(Of TDelegate)(d As TDelegate) As IntPtr\n    parameters:\n    - id: d\n      type: '{TDelegate}'\n      description: \"\\n<p>The delegate to be passed to unmanaged code. </p>\\n\"\n    typeParameters:\n    - id: TDelegate\n      description: \"\\n<p>The type of delegate to convert. </p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>d</em> parameter is <strong>null</strong>. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(Of TDelegate)(TDelegate)\n  name.vb: GetFunctionPointerForDelegate(Of TDelegate)(TDelegate)\n  nameWithType: Marshal.GetFunctionPointerForDelegate<TDelegate>(TDelegate)\n  nameWithType.vb: Marshal.GetFunctionPointerForDelegate(Of TDelegate)(TDelegate)\n- uid: System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)\n  id: GetHRForException(System.Exception)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetHRForException(Exception)\n  fullName: System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Converts the specified exception to an HRESULT.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static int GetHRForException(Exception e)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function GetHRForException(e As Exception) As Integer\n    parameters:\n    - id: e\n      type: System.Exception\n      description: \"\\n<p>The exception to convert to an HRESULT.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The HRESULT mapped to the supplied exception.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.PreserveSigAttribute\n    commentId: T:System.Runtime.InteropServices.PreserveSigAttribute\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetHRForException(Exception)\n- uid: System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error\n  commentId: M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error\n  id: GetHRForLastWin32Error\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetHRForLastWin32Error()\n  fullName: System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHRForLastWin32Error\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 898\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <xref href=\\\"System.Runtime.InteropServices.Marshal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static int GetHRForLastWin32Error()\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function GetHRForLastWin32Error As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The HRESULT corresponding to the last Win32 error code.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.DllImportAttribute\n    commentId: T:System.Runtime.InteropServices.DllImportAttribute\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetHRForLastWin32Error()\n- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n  id: GetIUnknownForObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetIUnknownForObject(Object)\n  fullName: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetIUnknownForObject\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1717\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns an <see href=\\\"http://go.microsoft.com/fwlink/?LinkId=148003\\\">IUnknown</see> interface from a managed object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr GetIUnknownForObject(object o)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function GetIUnknownForObject(o As Object) As IntPtr\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The object whose <strong>IUnknown</strong> interface is requested.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The <strong>IUnknown</strong> pointer for the <em>o</em> parameter.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetIUnknownForObject(Object)\n- uid: System.Runtime.InteropServices.Marshal.GetLastWin32Error\n  commentId: M:System.Runtime.InteropServices.Marshal.GetLastWin32Error\n  id: GetLastWin32Error\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetLastWin32Error()\n  fullName: System.Runtime.InteropServices.Marshal.GetLastWin32Error()\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <xref href=\\\"System.Runtime.InteropServices.DllImportAttribute.SetLastError\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag set.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static int GetLastWin32Error()\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function GetLastWin32Error As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The last error code set by a call to the Win32 <see href=\\\"http://go.microsoft.com/fwlink/?LinkId=148656\\\">SetLastError</see> function.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.DllImportAttribute\n    commentId: T:System.Runtime.InteropServices.DllImportAttribute\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetLastWin32Error()\n- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)\n  id: GetNativeVariantForObject(System.Object,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetNativeVariantForObject(Object, IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object, System.IntPtr)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Converts an object to a COM VARIANT.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static void GetNativeVariantForObject(object obj, IntPtr pDstNativeVariant)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Sub GetNativeVariantForObject(obj As Object, pDstNativeVariant As IntPtr)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object for which to get a COM VARIANT.</p>\\n\"\n    - id: pDstNativeVariant\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to receive the VARIANT that corresponds to the <em>obj</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>obj</em> parameter is a generic type.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: GetNativeVariantForObject(Object, IntPtr) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetNativeVariantForObject(Object, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)\n  id: GetNativeVariantForObject``1(``0,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetNativeVariantForObject<T>(T, IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject<T>(T, System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetNativeVariantForObject\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2257\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Converts an object of a specified type to a COM VARIANT. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void GetNativeVariantForObject<T>(T obj, IntPtr pDstNativeVariant)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub GetNativeVariantForObject(Of T)(obj As T, pDstNativeVariant As IntPtr)\n    parameters:\n    - id: obj\n      type: '{T}'\n      description: \"\\n<p>The object for which to get a COM VARIANT. </p>\\n\"\n    - id: pDstNativeVariant\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to receive the VARIANT that corresponds to the <em>obj</em> parameter. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the object to convert. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: GetNativeVariantForObject<T>(T, IntPtr) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(Of T)(T, System.IntPtr)\n  name.vb: GetNativeVariantForObject(Of T)(T, IntPtr)\n  nameWithType: Marshal.GetNativeVariantForObject<T>(T, IntPtr)\n  nameWithType.vb: Marshal.GetNativeVariantForObject(Of T)(T, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)\n  id: GetObjectForIUnknown(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetObjectForIUnknown(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns an instance of a type that represents a COM object by a pointer to its <see href=\\\"http://go.microsoft.com/fwlink/?LinkId=148003\\\">IUnknown</see> interface.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static object GetObjectForIUnknown(IntPtr pUnk)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function GetObjectForIUnknown(pUnk As IntPtr) As Object\n    parameters:\n    - id: pUnk\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to the <strong>IUnknown</strong> interface. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that represents the specified unmanaged COM object.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetObjectForIUnknown(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)\n  id: GetObjectForNativeVariant(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetObjectForNativeVariant(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Converts a COM VARIANT to an object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static object GetObjectForNativeVariant(IntPtr pSrcNativeVariant)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function GetObjectForNativeVariant(pSrcNativeVariant As IntPtr) As Object\n    parameters:\n    - id: pSrcNativeVariant\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to a COM VARIANT.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that corresponds to the <em>pSrcNativeVariant</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.Runtime.InteropServices.InvalidOleVariantTypeException\n    commentId: T:System.Runtime.InteropServices.InvalidOleVariantTypeException\n    description: \"\\n<p>\\n<em>pSrcNativeVariant</em> is not a valid VARIANT type.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>pSrcNativeVariant</em> has an unsupported type.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: GetObjectForNativeVariant(IntPtr) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetObjectForNativeVariant(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)\n  id: GetObjectForNativeVariant``1(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetObjectForNativeVariant<T>(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant<T>(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetObjectForNativeVariant\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2267\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Converts a COM VARIANT to an object of a specified type. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static T GetObjectForNativeVariant<T>(IntPtr pSrcNativeVariant)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function GetObjectForNativeVariant(Of T)(pSrcNativeVariant As IntPtr) As T\n    parameters:\n    - id: pSrcNativeVariant\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to a COM VARIANT. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type to which to convert the COM VARIANT. </p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>An object of the specified type that corresponds to the <em>pSrcNativeVariant</em> parameter. </p>\\n\"\n  exceptions:\n  - type: System.Runtime.InteropServices.InvalidOleVariantTypeException\n    commentId: T:System.Runtime.InteropServices.InvalidOleVariantTypeException\n    description: \"\\n<p>\\n<em>pSrcNativeVariant</em> is not a valid VARIANT type. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>pSrcNativeVariant</em> has an unsupported type. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: GetObjectForNativeVariant<T>(IntPtr) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(Of T)(System.IntPtr)\n  name.vb: GetObjectForNativeVariant(Of T)(IntPtr)\n  nameWithType: Marshal.GetObjectForNativeVariant<T>(IntPtr)\n  nameWithType.vb: Marshal.GetObjectForNativeVariant(Of T)(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)\n  id: GetObjectsForNativeVariants(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetObjectsForNativeVariants(IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Converts an array of COM <see href=\\\"http://go.microsoft.com/fwlink/?LinkId=148670\\\">VARIANTs</see> to an array of objects. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static object[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function GetObjectsForNativeVariants(aSrcNativeVariant As IntPtr, cVars As Integer) As Object()\n    parameters:\n    - id: aSrcNativeVariant\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to the first element of an array of COM VARIANTs.</p>\\n\"\n    - id: cVars\n      type: System.Int32\n      description: \"\\n<p>The count of COM VARIANTs in <em>aSrcNativeVariant</em>.</p>\\n\"\n    return:\n      type: System.Object[]\n      description: \"\\n<p>An object array that corresponds to <em>aSrcNativeVariant</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>cVars</em> is a negative number.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: GetObjectsForNativeVariants(IntPtr, Int32) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetObjectsForNativeVariants(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)\n  id: GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetObjectsForNativeVariants<T>(IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants<T>(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetObjectsForNativeVariants\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2277\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Converts an array of COM VARIANTs to an array of a specified type. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static T[] GetObjectsForNativeVariants<T>(IntPtr aSrcNativeVariant, int cVars)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function GetObjectsForNativeVariants(Of T)(aSrcNativeVariant As IntPtr, cVars As Integer) As T()\n    parameters:\n    - id: aSrcNativeVariant\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to the first element of an array of COM VARIANTs. </p>\\n\"\n    - id: cVars\n      type: System.Int32\n      description: \"\\n<p>The count of COM VARIANTs in <em>aSrcNativeVariant</em>. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the array to return. </p>\\n\"\n    return:\n      type: '{T}[]'\n      description: \"\\n<p>An array of <em>T</em> objects that corresponds to <em>aSrcNativeVariant</em>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>cVars</em> is a negative number. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: GetObjectsForNativeVariants<T>(IntPtr, Int32) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(Of T)(System.IntPtr, System.Int32)\n  name.vb: GetObjectsForNativeVariants(Of T)(IntPtr, Int32)\n  nameWithType: Marshal.GetObjectsForNativeVariants<T>(IntPtr, Int32)\n  nameWithType.vb: Marshal.GetObjectsForNativeVariants(Of T)(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)\n  id: GetStartComSlot(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetStartComSlot(Type)\n  fullName: System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static int GetStartComSlot(Type t)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function GetStartComSlot(t As Type) As Integer\n    parameters:\n    - id: t\n      type: System.Type\n      description: \"\\n<p>A type that represents an interface.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on <see href=\\\"http://go.microsoft.com/fwlink/?LinkId=148003\\\">IUnknown</see>, and 7 if the interface is based on IDispatch.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>t</em> is not visible from COM.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)\n  - type: System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetStartComSlot(Type)\n- uid: System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)\n  id: GetTypeFromCLSID(System.Guid)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetTypeFromCLSID(Guid)\n  fullName: System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTypeFromCLSID\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1700\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns the type associated with the specified class identifier (CLSID). </p>\\n\"\n  syntax:\n    content: public static Type GetTypeFromCLSID(Guid clsid)\n    content.vb: Public Shared Function GetTypeFromCLSID(clsid As Guid) As Type\n    parameters:\n    - id: clsid\n      type: System.Guid\n      description: \"\\n<p>The CLSID of the type to return. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>\\n<strong>System.__ComObject</strong> regardless of whether the CLSID is valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetTypeFromCLSID(Guid)\n- uid: System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)\n  id: GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetTypeInfoName(ITypeInfo)\n  fullName: System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTypeInfoName\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1533\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Retrieves the name of the type represented by an ITypeInfo object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static string GetTypeInfoName(ITypeInfo typeInfo)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function GetTypeInfoName(typeInfo As ITypeInfo) As String\n    parameters:\n    - id: typeInfo\n      type: System.Runtime.InteropServices.ComTypes.ITypeInfo\n      description: \"\\n<p>An object that represents an <strong>ITypeInfo</strong> pointer.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the type that the <em>typeInfo</em> parameter points to.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>typeInfo</em> parameter is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)\n    commentId: M:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetTypeInfoName(ITypeInfo)\n- uid: System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)\n  id: GetUniqueObjectForIUnknown(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: GetUniqueObjectForIUnknown(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Creates a unique Runtime Callable Wrapper (RCW) object for a given <see href=\\\"http://go.microsoft.com/fwlink/?LinkId=148003\\\">IUnknown</see> interface.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static object GetUniqueObjectForIUnknown(IntPtr unknown)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function GetUniqueObjectForIUnknown(unknown As IntPtr) As Object\n    parameters:\n    - id: unknown\n      type: System.IntPtr\n      description: \"\\n<p>A managed pointer to an <strong>IUnknown</strong> interface.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>A unique RCW for the specified <strong>IUnknown</strong> interface.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.GetUniqueObjectForIUnknown(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.IsComObject(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)\n  id: IsComObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: IsComObject(Object)\n  fullName: System.Runtime.InteropServices.Marshal.IsComObject(System.Object)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Indicates whether a specified object represents a COM object.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static bool IsComObject(object o)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function IsComObject(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The object to check.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>o</em> parameter is a COM type; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>o</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.ComImportAttribute\n    commentId: T:System.Runtime.InteropServices.ComImportAttribute\n  - type: System.Type.IsImport\n    commentId: P:System.Type.IsImport\n  - type: System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType(System.Type)\n    commentId: M:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType(System.Type)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.IsComObject(Object)\n- uid: System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)\n  id: OffsetOf(System.Type,System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: OffsetOf(Type, String)\n  fullName: System.Runtime.InteropServices.Marshal.OffsetOf(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OffsetOf\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 301\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns the field offset of the unmanaged form of the managed class.</p>\\n\"\n  syntax:\n    content: public static IntPtr OffsetOf(Type t, string fieldName)\n    content.vb: Public Shared Function OffsetOf(t As Type, fieldName As String) As IntPtr\n    parameters:\n    - id: t\n      type: System.Type\n      description: \"\\n<p>A value type or formatted reference type that specifies the managed class. You must apply the <xref href=\\\"System.Runtime.InteropServices.StructLayoutAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the class.</p>\\n\"\n    - id: fieldName\n      type: System.String\n      description: \"\\n<p>The field within the <em>t</em> parameter.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The offset, in bytes, for the <em>fieldName</em> parameter within the specified class that is declared by platform invoke.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>t</em> parameter is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.SizeOf(System.Object)\n    commentId: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: OffsetOf(Type, string) may be unavailable in future releases. Instead, use OffsetOf<T>(string). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296511\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.OffsetOf(Type, String)\n- uid: System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)\n  id: OffsetOf``1(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: OffsetOf<T>(String)\n  fullName: System.Runtime.InteropServices.Marshal.OffsetOf<T>(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OffsetOf\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 316\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Returns the field offset of the unmanaged form of a specified managed class.</p>\\n\"\n  syntax:\n    content: public static IntPtr OffsetOf<T>(string fieldName)\n    content.vb: Public Shared Function OffsetOf(Of T)(fieldName As String) As IntPtr\n    parameters:\n    - id: fieldName\n      type: System.String\n      description: \"\\n<p>The name of the field in the <em>T</em> type. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>A managed value type or formatted reference type. You must apply the <xref href=\\\"System.Runtime.InteropServices.StructLayoutAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attribute to the class. </p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The offset, in bytes, for the <em>fieldName</em> parameter within the specified class that is declared by platform invoke. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.SizeOf``1(``0)\n    commentId: M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.OffsetOf(Of T)(System.String)\n  name.vb: OffsetOf(Of T)(String)\n  nameWithType: Marshal.OffsetOf<T>(String)\n  nameWithType.vb: Marshal.OffsetOf(Of T)(String)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)\n  id: PtrToStringAnsi(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: PtrToStringAnsi(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PtrToStringAnsi\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 119\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies all characters up to the first null character from an unmanaged ANSI string to a managed <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and widens each ANSI character to Unicode.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static string PtrToStringAnsi(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function PtrToStringAnsi(ptr As IntPtr) As String\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address of the first character of the unmanaged string.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A managed string that holds a copy of the unmanaged ANSI string. If <em>ptr</em> is <strong>null</strong>, the method returns a null string.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  - type: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.PtrToStringAnsi(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)\n  id: PtrToStringAnsi(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: PtrToStringAnsi(IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PtrToStringAnsi\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 139\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Allocates a managed <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static string PtrToStringAnsi(IntPtr ptr, int len)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function PtrToStringAnsi(ptr As IntPtr, len As Integer) As String\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address of the first character of the unmanaged string.</p>\\n\"\n    - id: len\n      type: System.Int32\n      description: \"\\n<p>The byte count of the input string to copy.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A managed string that holds a copy of the native ANSI string if the value of the <em>ptr</em> parameter is not <strong>null</strong>; otherwise, this method returns <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>len</em> is less than zero.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  - type: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.PtrToStringAnsi(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)\n  id: PtrToStringBSTR(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: PtrToStringBSTR(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PtrToStringBSTR\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2022\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Allocates a managed <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and copies a <see href=\\\"https://msdn.microsoft.com/library/ms221069(v=vs.85).aspx\\\">binary string (BSTR)</see> stored in unmanaged memory into it.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static string PtrToStringBSTR(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function PtrToStringBSTR(ptr As IntPtr) As String\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address of the first character of the unmanaged string.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A managed string that holds a copy of the unmanaged string. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>ptr</em> equals <xref href=\\\"System.IntPtr.Zero\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.PtrToStringBSTR(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)\n  id: PtrToStringUni(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: PtrToStringUni(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PtrToStringUni\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 168\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Allocates a managed <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and copies all characters up to the first null character from an unmanaged Unicode string into it.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static string PtrToStringUni(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function PtrToStringUni(ptr As IntPtr) As String\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address of the first character of the unmanaged string.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A managed string that holds a copy of the unmanaged string if the value of the <em>ptr</em> parameter is not <strong>null</strong>; otherwise, this method returns <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  - type: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.PtrToStringUni(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)\n  id: PtrToStringUni(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: PtrToStringUni(IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PtrToStringUni\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 150\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Allocates a managed <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and copies a specified number of characters from an unmanaged Unicode string into it.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static string PtrToStringUni(IntPtr ptr, int len)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function PtrToStringUni(ptr As IntPtr, len As Integer) As String\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address of the first character of the unmanaged string.</p>\\n\"\n    - id: len\n      type: System.Int32\n      description: \"\\n<p>The number of Unicode characters to copy.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A managed string that holds a copy of the unmanaged string if the value of the <em>ptr</em> parameter is not <strong>null</strong>; otherwise, this method returns <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  - type: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n    commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.PtrToStringUni(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)\n  id: PtrToStringUTF8(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: PtrToStringUTF8(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PtrToStringUTF8\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 189\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static string PtrToStringUTF8(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function PtrToStringUTF8(ptr As IntPtr) As String\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n    return:\n      type: System.String\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.PtrToStringUTF8(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)\n  id: PtrToStringUTF8(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: PtrToStringUTF8(IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PtrToStringUTF8\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 196\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static string PtrToStringUTF8(IntPtr ptr, int byteLen)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function PtrToStringUTF8(ptr As IntPtr, byteLen As Integer) As String\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n    - id: byteLen\n      type: System.Int32\n    return:\n      type: System.String\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.PtrToStringUTF8(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)\n  id: PtrToStructure(System.IntPtr,System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: PtrToStructure(IntPtr, Object)\n  fullName: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PtrToStructure\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1004\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Marshals data from an unmanaged block of memory to a managed object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ComVisible(true)]\n\n      public static void PtrToStructure(IntPtr ptr, object structure)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ComVisible(True)>\n\n      Public Shared Sub PtrToStructure(ptr As IntPtr, structure As Object)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to an unmanaged block of memory.</p>\\n\"\n    - id: structure\n      type: System.Object\n      description: \"\\n<p>The object to which the data is to be copied. This must be an instance of a formatted class.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Structure layout is not sequential or explicit.</p>\\n<p>-or- </p>\\n<p>Structure is a boxed value type.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: PtrToStructure(IntPtr, Object) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296512\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.PtrToStructure(IntPtr, Object)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)\n  id: PtrToStructure(System.IntPtr,System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: PtrToStructure(IntPtr, Type)\n  fullName: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PtrToStructure\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1021\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ComVisible(true)]\n\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public static object PtrToStructure(IntPtr ptr, Type structureType)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ComVisible(True)>\n\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Shared Function PtrToStructure(ptr As IntPtr, structureType As Type) As Object\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to an unmanaged block of memory.</p>\\n\"\n    - id: structureType\n      type: System.Type\n      description: \"\\n<p>The type of object to be created. This object must represent a formatted class or a structure.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>A managed object containing the data pointed to by the <em>ptr</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>structureType</em> parameter layout is not sequential or explicit.</p>\\n<p>-or-</p>\\n<p>The <em>structureType</em> parameter is a generic type.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>structureType</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: \"\\n<p>The class specified by <em>structureType</em> does not have an accessible default constructor. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.UCOMITypeInfo.GetTypeAttr(System.IntPtr@)\n    commentId: M:System.Runtime.InteropServices.UCOMITypeInfo.GetTypeAttr(System.IntPtr@)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: PtrToStructure(IntPtr, Type) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296513\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.PtrToStructure(IntPtr, Type)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)\n  id: PtrToStructure``1(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: PtrToStructure<T>(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.PtrToStructure<T>(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PtrToStructure\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1046\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static T PtrToStructure<T>(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function PtrToStructure(Of T)(ptr As IntPtr) As T\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to an unmanaged block of memory. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the object to which the data is to be copied. This must be a formatted class or a structure. </p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>A managed object that contains the data that the <em>ptr</em> parameter points to. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The layout of <em>T</em> is not sequential or explicit.</p>\\n\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: \"\\n<p>The class specified by <em>T</em> does not have an accessible default constructor. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.PtrToStructure(Of T)(System.IntPtr)\n  name.vb: PtrToStructure(Of T)(IntPtr)\n  nameWithType: Marshal.PtrToStructure<T>(IntPtr)\n  nameWithType.vb: Marshal.PtrToStructure(Of T)(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)\n  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)\n  id: PtrToStructure``1(System.IntPtr,``0)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: PtrToStructure<T>(IntPtr, T)\n  fullName: System.Runtime.InteropServices.Marshal.PtrToStructure<T>(System.IntPtr, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PtrToStructure\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1011\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Marshals data from an unmanaged block of memory to a managed object of the specified type. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void PtrToStructure<T>(IntPtr ptr, T structure)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub PtrToStructure(Of T)(ptr As IntPtr, structure As T)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to an unmanaged block of memory. </p>\\n\"\n    - id: structure\n      type: '{T}'\n      description: \"\\n<p>The object to which the data is to be copied. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of <em>structure</em>. This must be a formatted class. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Structure layout is not sequential or explicit. </p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.PtrToStructure(Of T)(System.IntPtr, T)\n  name.vb: PtrToStructure(Of T)(IntPtr, T)\n  nameWithType: Marshal.PtrToStructure<T>(IntPtr, T)\n  nameWithType.vb: Marshal.PtrToStructure(Of T)(IntPtr, T)\n- uid: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n  commentId: M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n  id: QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: QueryInterface(IntPtr, ref Guid, out IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr, ref System.Guid, out System.IntPtr)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Requests a pointer to a specified interface from a COM object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static int QueryInterface(IntPtr pUnk, ref Guid iid, out IntPtr ppv)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function QueryInterface(pUnk As IntPtr, ByRef iid As Guid, ByRef ppv As IntPtr) As Integer\n    parameters:\n    - id: pUnk\n      type: System.IntPtr\n      description: \"\\n<p>The interface to be queried.</p>\\n\"\n    - id: iid\n      type: System.Guid\n      description: \"\\n<p>The interface identifier (IID) of the requested interface.</p>\\n\"\n    - id: ppv\n      type: System.IntPtr\n      description: \"\\n<p>When this method returns, contains a reference to the returned interface.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An HRESULT that indicates the success or failure of the call.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n  - type: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n  - type: System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)\n  - type: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr, ByRef System.Guid, ByRef System.IntPtr)\n  name.vb: QueryInterface(IntPtr, ByRef Guid, ByRef IntPtr)\n  nameWithType: Marshal.QueryInterface(IntPtr, ref Guid, out IntPtr)\n  nameWithType.vb: Marshal.QueryInterface(IntPtr, ByRef Guid, ByRef IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)\n  id: ReadByte(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadByte(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadByte\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 464\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a single byte from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static byte ReadByte(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function ReadByte(ptr As IntPtr) As Byte\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address in unmanaged memory from which to read.</p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The byte read from unmanaged memory.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadByte(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)\n  id: ReadByte(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadByte(IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadByte\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 449\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a single byte at a given offset (or index) from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static byte ReadByte(IntPtr ptr, int ofs)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function ReadByte(ptr As IntPtr, ofs As Integer) As Byte\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The base address in unmanaged memory from which to read.</p>\\n\"\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The byte read from unmanaged memory at the given offset.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadByte(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n  id: ReadByte(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadByte(Object, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.ReadByte(System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadByte\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 437\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a single byte at a given offset (or index) from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static byte ReadByte([MarshalAs(UnmanagedType.AsAny), In] object ptr, int ofs)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function ReadByte(ptr As Object, ofs As Integer) As Byte\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: \"\\n<p>The base address in unmanaged memory of the source object.</p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.MarshalAsAttribute\n        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)\n        arguments:\n        - type: System.Runtime.InteropServices.UnmanagedType\n          value: 40\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The byte read from unmanaged memory at the given offset.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ptr</em> is an <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This method does not accept <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: ReadByte(Object, Int32) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadByte(Object, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)\n  id: ReadInt16(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadInt16(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadInt16\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 510\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a 16-bit signed integer from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static short ReadInt16(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function ReadInt16(ptr As IntPtr) As Short\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address in unmanaged memory from which to read.</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer read from unmanaged memory.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadInt16(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)\n  id: ReadInt16(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadInt16(IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadInt16\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 482\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a 16-bit signed integer at a given offset from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static short ReadInt16(IntPtr ptr, int ofs)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function ReadInt16(ptr As IntPtr, ofs As Integer) As Short\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The base address in unmanaged memory from which to read.</p>\\n\"\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer read from unmanaged memory at the given offset.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadInt16(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)\n  id: ReadInt16(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadInt16(Object, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.ReadInt16(System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadInt16\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 470\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a 16-bit signed integer at a given offset from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static short ReadInt16([MarshalAs(UnmanagedType.AsAny), In] object ptr, int ofs)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function ReadInt16(ptr As Object, ofs As Integer) As Short\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: \"\\n<p>The base address in unmanaged memory of the source object.</p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.MarshalAsAttribute\n        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)\n        arguments:\n        - type: System.Runtime.InteropServices.UnmanagedType\n          value: 40\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer read from unmanaged memory at the given offset.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ptr</em> is an <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This method does not accept <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: ReadInt16(Object, Int32) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadInt16(Object, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)\n  id: ReadInt32(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadInt32(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadInt32\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 559\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a 32-bit signed integer from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static int ReadInt32(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function ReadInt32(ptr As IntPtr) As Integer\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address in unmanaged memory from which to read.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer read from unmanaged memory.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadInt32(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)\n  id: ReadInt32(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadInt32(IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadInt32\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 528\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a 32-bit signed integer at a given offset from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static int ReadInt32(IntPtr ptr, int ofs)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function ReadInt32(ptr As IntPtr, ofs As Integer) As Integer\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The base address in unmanaged memory from which to read.</p>\\n\"\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer read from unmanaged memory.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadInt32(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)\n  id: ReadInt32(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadInt32(Object, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.ReadInt32(System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadInt32\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 516\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a 32-bit signed integer at a given offset from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static int ReadInt32([MarshalAs(UnmanagedType.AsAny), In] object ptr, int ofs)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function ReadInt32(ptr As Object, ofs As Integer) As Integer\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: \"\\n<p>The base address in unmanaged memory of the source object.</p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.MarshalAsAttribute\n        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)\n        arguments:\n        - type: System.Runtime.InteropServices.UnmanagedType\n          value: 40\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer read from unmanaged memory at the given offset.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ptr</em> is an <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This method does not accept <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: ReadInt32(Object, Int32) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadInt32(Object, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)\n  id: ReadInt64(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadInt64(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadInt64\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 645\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a 64-bit signed integer from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static long ReadInt64(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function ReadInt64(ptr As IntPtr) As Long\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address in unmanaged memory from which to read.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer read from unmanaged memory.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadInt64(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)\n  id: ReadInt64(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadInt64(IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadInt64\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 611\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a 64-bit signed integer at a given offset from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static long ReadInt64(IntPtr ptr, int ofs)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function ReadInt64(ptr As IntPtr, ofs As Integer) As Long\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The base address in unmanaged memory from which to read.</p>\\n\"\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer read from unmanaged memory at the given offset.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadInt64(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)\n  id: ReadInt64(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadInt64(Object, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.ReadInt64(System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadInt64\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 599\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a 64-bit signed integer at a given offset from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static long ReadInt64([MarshalAs(UnmanagedType.AsAny), In] object ptr, int ofs)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function ReadInt64(ptr As Object, ofs As Integer) As Long\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: \"\\n<p>The base address in unmanaged memory of the source object.</p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.MarshalAsAttribute\n        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)\n        arguments:\n        - type: System.Runtime.InteropServices.UnmanagedType\n          value: 40\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer read from unmanaged memory at the given offset.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ptr</em> is an <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This method does not accept <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: ReadInt64(Object, Int32) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadInt64(Object, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)\n  id: ReadIntPtr(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadIntPtr(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadIntPtr\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 588\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a processor native-sized integer from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static IntPtr ReadIntPtr(IntPtr ptr)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function ReadIntPtr(ptr As IntPtr) As IntPtr\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address in unmanaged memory from which to read.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadIntPtr(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)\n  id: ReadIntPtr(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadIntPtr(IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadIntPtr\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 577\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a processor native sized integer at a given offset from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static IntPtr ReadIntPtr(IntPtr ptr, int ofs)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function ReadIntPtr(ptr As IntPtr, ofs As Integer) As IntPtr\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The base address in unmanaged memory from which to read.</p>\\n\"\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The integer read from unmanaged memory at the given offset.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadIntPtr(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)\n  id: ReadIntPtr(System.Object,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReadIntPtr(Object, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadIntPtr\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 566\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a processor native sized integer from unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static IntPtr ReadIntPtr([MarshalAs(UnmanagedType.AsAny), In] object ptr, int ofs)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function ReadIntPtr(ptr As Object, ofs As Integer) As IntPtr\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: \"\\n<p>The base address in unmanaged memory of the source object.</p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.MarshalAsAttribute\n        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)\n        arguments:\n        - type: System.Runtime.InteropServices.UnmanagedType\n          value: 40\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The integer read from unmanaged memory at the given offset.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ptr</em> is an <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This method does not accept <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: ReadIntPtr(Object, Int32) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReadIntPtr(Object, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)\n  id: ReAllocCoTaskMem(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReAllocCoTaskMem(IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReAllocCoTaskMem\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1982\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Resizes a block of memory previously allocated with <xref href=\\\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr ReAllocCoTaskMem(IntPtr pv, int cb)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function ReAllocCoTaskMem(pv As IntPtr, cb As Integer) As IntPtr\n    parameters:\n    - id: pv\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to memory allocated with <xref href=\\\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: cb\n      type: System.Int32\n      description: \"\\n<p>The new size of the allocated block.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>An integer representing the address of the reallocated block of memory. This memory must be released with <xref href=\\\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory to satisfy the request.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReAllocCoTaskMem(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)\n  id: ReAllocHGlobal(System.IntPtr,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReAllocHGlobal(IntPtr, IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr, System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReAllocHGlobal\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1252\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Resizes a block of memory previously allocated with <xref href=\\\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr ReAllocHGlobal(IntPtr pv, IntPtr cb)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function ReAllocHGlobal(pv As IntPtr, cb As IntPtr) As IntPtr\n    parameters:\n    - id: pv\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to memory allocated with <xref href=\\\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: cb\n      type: System.IntPtr\n      description: \"\\n<p>The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If you pass a pointer, it is treated as a size.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to the reallocated memory. This memory must be released using <xref href=\\\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory to satisfy the request.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReAllocHGlobal(IntPtr, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  id: Release(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: Release(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Decrements the reference count on the specified interface.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static int Release(IntPtr pUnk)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Release(pUnk As IntPtr) As Integer\n    parameters:\n    - id: pUnk\n      type: System.IntPtr\n      description: \"\\n<p>The interface to release.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The new value of the reference count on the interface specified by the <em>pUnk</em> parameter.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n    commentId: M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)\n  - type: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)\n  - type: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)\n  - type: System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)\n    commentId: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.Release(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)\n  id: ReleaseComObject(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ReleaseComObject(Object)\n  fullName: System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReleaseComObject\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2033\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Decrements the reference count of the specified Runtime Callable Wrapper (RCW) associated with the specified COM object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static int ReleaseComObject(object o)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function ReleaseComObject(o As Object) As Integer\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The COM object to release.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The new value of the reference count of the RCW associated with <em>o</em>. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>o</em> is not a valid COM object.</p>\\n\"\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>\\n<em>o</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)\n    commentId: M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ReleaseComObject(Object)\n- uid: System.Runtime.InteropServices.Marshal.SizeOf(System.Object)\n  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)\n  id: SizeOf(System.Object)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: SizeOf(Object)\n  fullName: System.Runtime.InteropServices.Marshal.SizeOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SizeOf\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 225\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns the unmanaged size of an object in bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static int SizeOf(object structure)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared Function SizeOf(structure As Object) As Integer\n    parameters:\n    - id: structure\n      type: System.Object\n      description: \"\\n<p>The object whose size is to be returned.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size of the specified object in unmanaged code.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>structure</em> parameter is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.CharSet\n    commentId: T:System.Runtime.InteropServices.CharSet\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: SizeOf(Object) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296514\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.SizeOf(Object)\n- uid: System.Runtime.InteropServices.Marshal.SizeOf(System.Type)\n  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)\n  id: SizeOf(System.Type)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: SizeOf(Type)\n  fullName: System.Runtime.InteropServices.Marshal.SizeOf(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SizeOf\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 241\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns the size of an unmanaged type in bytes.</p>\\n\"\n  syntax:\n    content: public static int SizeOf(Type t)\n    content.vb: Public Shared Function SizeOf(t As Type) As Integer\n    parameters:\n    - id: t\n      type: System.Type\n      description: \"\\n<p>The type whose size is to be returned.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size of the specified type in unmanaged code.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>t</em> parameter is a generic type.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>t</em> parameter is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.CharSet\n    commentId: T:System.Runtime.InteropServices.CharSet\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: SizeOf(Type) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296515\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.SizeOf(Type)\n- uid: System.Runtime.InteropServices.Marshal.SizeOf``1\n  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf``1\n  id: SizeOf``1\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: SizeOf<T>()\n  fullName: System.Runtime.InteropServices.Marshal.SizeOf<T>()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SizeOf\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 255\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Returns the size of an unmanaged type in bytes. </p>\\n\"\n  syntax:\n    content: public static int SizeOf<T>()\n    content.vb: Public Shared Function SizeOf(Of T) As Integer\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type whose size is to be returned. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size, in bytes, of the type that is specified by the <em>T</em> generic type parameter. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.SizeOf(Of T)()\n  name.vb: SizeOf(Of T)()\n  nameWithType: Marshal.SizeOf<T>()\n  nameWithType.vb: Marshal.SizeOf(Of T)()\n- uid: System.Runtime.InteropServices.Marshal.SizeOf``1(``0)\n  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)\n  id: SizeOf``1(``0)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: SizeOf<T>(T)\n  fullName: System.Runtime.InteropServices.Marshal.SizeOf<T>(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SizeOf\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 236\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Returns the unmanaged size of an object of a specified type in bytes. </p>\\n\"\n  syntax:\n    content: public static int SizeOf<T>(T structure)\n    content.vb: Public Shared Function SizeOf(Of T)(structure As T) As Integer\n    parameters:\n    - id: structure\n      type: '{T}'\n      description: \"\\n<p>The object whose size is to be returned. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the <em>structure</em> parameter. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size, in bytes, of the specified object in unmanaged code. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>structure</em> parameter is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.SizeOf(Of T)(T)\n  name.vb: SizeOf(Of T)(T)\n  nameWithType: Marshal.SizeOf<T>(T)\n  nameWithType.vb: Marshal.SizeOf(Of T)(T)\n- uid: System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)\n  id: StringToBSTR(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: StringToBSTR(String)\n  fullName: System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StringToBSTR\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2005\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Allocates a <see href=\\\"https://msdn.microsoft.com/library/ms221069.aspx\\\">BSTR</see> and copies the contents of a managed <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into it.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr StringToBSTR(string s)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function StringToBSTR(s As String) As IntPtr\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The managed string to be copied.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>An unmanaged pointer to the <strong>BSTR</strong>, or 0 if <em>s</em> is null.</p>\\n\"\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory available.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The length for <em>s</em> is out of range.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.StringToBSTR(String)\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  id: StringToCoTaskMemAnsi(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: StringToCoTaskMemAnsi(String)\n  fullName: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StringToCoTaskMemAnsi\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1945\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies the contents of a managed <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a block of memory allocated from the unmanaged COM task allocator.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr StringToCoTaskMemAnsi(string s)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function StringToCoTaskMemAnsi(s As String) As IntPtr\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A managed string to be copied.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>An integer representing a pointer to the block of memory allocated for the string, or 0 if <em>s</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory available.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>s</em> parameter exceeds the maximum length allowed by the operating system.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.StringToCoTaskMemAnsi(String)\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)\n  id: StringToCoTaskMemUni(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: StringToCoTaskMemUni(String)\n  fullName: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StringToCoTaskMemUni\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1874\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies the contents of a managed <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a block of memory allocated from the unmanaged COM task allocator.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr StringToCoTaskMemUni(string s)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function StringToCoTaskMemUni(s As String) As IntPtr\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A managed string to be copied.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>An integer representing a pointer to the block of memory allocated for the string, or 0 if s is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>s</em> parameter exceeds the maximum length allowed by the operating system.</p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory available.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.StringToCoTaskMemUni(String)\n- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)\n  id: StringToCoTaskMemUTF8(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: StringToCoTaskMemUTF8(String)\n  fullName: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StringToCoTaskMemUTF8\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1906\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr StringToCoTaskMemUTF8(string s)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function StringToCoTaskMemUTF8(s As String) As IntPtr\n    parameters:\n    - id: s\n      type: System.String\n    return:\n      type: System.IntPtr\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.StringToCoTaskMemUTF8(String)\n- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  id: StringToHGlobalAnsi(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: StringToHGlobalAnsi(String)\n  fullName: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StringToHGlobalAnsi\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1266\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies the contents of a managed <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into unmanaged memory, converting into ANSI format as it copies.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr StringToHGlobalAnsi(string s)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function StringToHGlobalAnsi(s As String) As IntPtr\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A managed string to be copied.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The address, in unmanaged memory, to where <em>s</em> was copied, or 0 if <em>s</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory available.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>s</em> parameter exceeds the maximum length allowed by the operating system.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\n  - type: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.StringToHGlobalAnsi(String)\n- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)\n  commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)\n  id: StringToHGlobalUni(System.String)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: StringToHGlobalUni(String)\n  fullName: System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StringToHGlobalUni\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1296\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Copies the contents of a managed <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr StringToHGlobalUni(string s)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function StringToHGlobalUni(s As String) As IntPtr\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A managed string to be copied.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The address, in unmanaged memory, to where the <em>s</em> was copied, or 0 if <em>s</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>The method could not allocate enough native heap memory.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>s</em> parameter exceeds the maximum length allowed by the operating system.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.StringToHGlobalUni(String)\n- uid: System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)\n  commentId: M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)\n  id: StructureToPtr(System.Object,System.IntPtr,System.Boolean)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: StructureToPtr(Object, IntPtr, Boolean)\n  fullName: System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object, System.IntPtr, System.Boolean)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Marshals data from a managed object to an unmanaged block of memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      [ComVisible(true)]\n\n      public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      <ComVisible(True)>\n\n      Public Shared Sub StructureToPtr(structure As Object, ptr As IntPtr, fDeleteOld As Boolean)\n    parameters:\n    - id: structure\n      type: System.Object\n      description: \"\\n<p>A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.</p>\\n\"\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to an unmanaged block of memory, which must be allocated before this method is called.</p>\\n\"\n    - id: fDeleteOld\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to call the <xref href=\\\"System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method on the <em>ptr</em> parameter before this method copies the data. The block must contain valid data. Note that passing <strong>false</strong> when the memory block already contains data can lead to a memory leak.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>structure</em> is a reference type that is not a formatted class.</p>\\n<p>-or-</p>\\n<p>\\n<em>structure</em> is a generic type. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\n    commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\n  - type: System.Runtime.InteropServices.GCHandle\n    commentId: T:System.Runtime.InteropServices.GCHandle\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: StructureToPtr(Object, IntPtr, Boolean) may be unavailable in future releases. Instead, use StructureToPtr<T>(T, IntPtr, Boolean). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296516\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.StructureToPtr(Object, IntPtr, Boolean)\n- uid: System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)\n  commentId: M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)\n  id: StructureToPtr``1(``0,System.IntPtr,System.Boolean)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: StructureToPtr<T>(T, IntPtr, Boolean)\n  fullName: System.Runtime.InteropServices.Marshal.StructureToPtr<T>(T, System.IntPtr, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StructureToPtr\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 995\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Marshals data from a managed object of a specified type to an unmanaged block of memory. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void StructureToPtr<T>(T structure, IntPtr ptr, bool fDeleteOld)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub StructureToPtr(Of T)(structure As T, ptr As IntPtr, fDeleteOld As Boolean)\n    parameters:\n    - id: structure\n      type: '{T}'\n      description: \"\\n<p>A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class. </p>\\n\"\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to an unmanaged block of memory, which must be allocated before this method is called. </p>\\n\"\n    - id: fDeleteOld\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to call the <xref href=\\\"System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method on the <em>ptr</em> parameter before this method copies the data. The block must contain valid data. Note that passing <strong>false</strong> when the memory block already contains data can lead to a memory leak.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the managed object. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>structure</em> is a reference type that is not a formatted class. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\n    commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\n  - type: System.Runtime.InteropServices.GCHandle\n    commentId: T:System.Runtime.InteropServices.GCHandle\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.StructureToPtr(Of T)(T, System.IntPtr, System.Boolean)\n  name.vb: StructureToPtr(Of T)(T, IntPtr, Boolean)\n  nameWithType: Marshal.StructureToPtr<T>(T, IntPtr, Boolean)\n  nameWithType.vb: Marshal.StructureToPtr(Of T)(T, IntPtr, Boolean)\n- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\n  id: ThrowExceptionForHR(System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ThrowExceptionForHR(Int32)\n  fullName: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ThrowExceptionForHR\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1108\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Throws an exception with a specific failure HRESULT value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void ThrowExceptionForHR(int errorCode)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub ThrowExceptionForHR(errorCode As Integer)\n    parameters:\n    - id: errorCode\n      type: System.Int32\n      description: \"\\n<p>The HRESULT corresponding to the desired exception.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ThrowExceptionForHR(Int32)\n- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)\n  id: ThrowExceptionForHR(System.Int32,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ThrowExceptionForHR(Int32, IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32, System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ThrowExceptionForHR\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 1114\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Throws an exception with a specific failure HRESULT, based on the specified <see href=\\\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\\\">IErrorInfo</see> interface.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void ThrowExceptionForHR(int errorCode, IntPtr errorInfo)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub ThrowExceptionForHR(errorCode As Integer, errorInfo As IntPtr)\n    parameters:\n    - id: errorCode\n      type: System.Int32\n      description: \"\\n<p>The HRESULT corresponding to the desired exception.</p>\\n\"\n    - id: errorInfo\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to the <see href=\\\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\\\">IErrorInfo</see> interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current <see href=\\\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\\\">IErrorInfo</see> interface, or <code>IntPtr(-1)</code> to ignore the current <see href=\\\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\\\">IErrorInfo</see> interface and construct the exception just from the error code.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.COMException\n    commentId: T:System.Runtime.InteropServices.COMException\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ThrowExceptionForHR(Int32, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)\n  id: UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: UnsafeAddrOfPinnedArrayElement(Array, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array, System.Int32)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Gets the address of the element at the specified index inside the specified array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function UnsafeAddrOfPinnedArrayElement(arr As Array, index As Integer) As IntPtr\n    parameters:\n    - id: arr\n      type: System.Array\n      description: \"\\n<p>The array that contains the desired element.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index in the <em>arr</em> parameter of the desired element.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The address of <em>index</em> inside <em>arr</em>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.GCHandle\n    commentId: T:System.Runtime.InteropServices.GCHandle\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: UnsafeAddrOfPinnedArrayElement(Array, Int32) may be unavailable in future releases. Instead, use UnsafeAddrOfPinnedArrayElement<T>(T[], Int32). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296517\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement(Array, Int32)\n- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)\n  id: UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)\n  fullName: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement<T>(T[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UnsafeAddrOfPinnedArrayElement\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 336\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Gets the address of the element at the specified index in an array of a specified type. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static IntPtr UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function UnsafeAddrOfPinnedArrayElement(Of T)(arr As T(), index As Integer) As IntPtr\n    parameters:\n    - id: arr\n      type: '{T}[]'\n      description: \"\\n<p>The array that contains the desired element. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the desired element in the <em>arr</em> array. </p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the array. </p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The address of <em>index</em> in <em>arr</em>. </p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.GCHandle\n    commentId: T:System.Runtime.InteropServices.GCHandle\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(Of T)(T(), System.Int32)\n  name.vb: UnsafeAddrOfPinnedArrayElement(Of T)(T(), Int32)\n  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)\n  nameWithType.vb: Marshal.UnsafeAddrOfPinnedArrayElement(Of T)(T(), Int32)\n- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)\n  id: WriteByte(System.IntPtr,System.Byte)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteByte(IntPtr, Byte)\n  fullName: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr, System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteByte\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 683\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a single byte value to unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteByte(IntPtr ptr, byte val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteByte(ptr As IntPtr, val As Byte)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address in unmanaged memory to write to.</p>\\n\"\n    - id: val\n      type: System.Byte\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteByte(IntPtr, Byte)\n- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n  id: WriteByte(System.IntPtr,System.Int32,System.Byte)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteByte(IntPtr, Int32, Byte)\n  fullName: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr, System.Int32, System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteByte\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 656\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a single byte value to unmanaged memory at a specified offset.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteByte(IntPtr ptr, int ofs, byte val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteByte(ptr As IntPtr, ofs As Integer, val As Byte)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The base address in unmanaged memory to write to.</p>\\n\"\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n\"\n    - id: val\n      type: System.Byte\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteByte(IntPtr, Int32, Byte)\n- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)\n  id: WriteByte(System.Object,System.Int32,System.Byte)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteByte(Object, Int32, Byte)\n  fullName: System.Runtime.InteropServices.Marshal.WriteByte(System.Object, System.Int32, System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteByte\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 671\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a single byte value to unmanaged memory at a specified offset.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteByte([MarshalAs(UnmanagedType.AsAny), In, Out] object ptr, int ofs, byte val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteByte(ptr As Object, ofs As Integer, val As Byte)\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: \"\\n<p>The base address in unmanaged memory of the target object.</p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.MarshalAsAttribute\n        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)\n        arguments:\n        - type: System.Runtime.InteropServices.UnmanagedType\n          value: 40\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n\"\n    - id: val\n      type: System.Byte\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ptr</em> is an <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This method does not accept <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: WriteByte(Object, Int32, Byte) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteByte(Object, Int32, Byte)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)\n  id: WriteInt16(System.IntPtr,System.Char)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteInt16(IntPtr, Char)\n  fullName: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteInt16\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 745\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a character as a 16-bit integer value to unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteInt16(IntPtr ptr, char val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteInt16(ptr As IntPtr, val As Char)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address in unmanaged memory to write to.</p>\\n\"\n    - id: val\n      type: System.Char\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteInt16(IntPtr, Char)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)\n  id: WriteInt16(System.IntPtr,System.Int16)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteInt16(IntPtr, Int16)\n  fullName: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr, System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteInt16\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 727\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a 16-bit integer value to unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteInt16(IntPtr ptr, short val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteInt16(ptr As IntPtr, val As Short)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address in unmanaged memory to write to.</p>\\n\"\n    - id: val\n      type: System.Int16\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteInt16(IntPtr, Int16)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)\n  id: WriteInt16(System.IntPtr,System.Int32,System.Char)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteInt16(IntPtr, Int32, Char)\n  fullName: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr, System.Int32, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteInt16\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 733\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteInt16(IntPtr ptr, int ofs, char val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteInt16(ptr As IntPtr, ofs As Integer, val As Char)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The base address in the native heap to write to.</p>\\n\"\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n\"\n    - id: val\n      type: System.Char\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n    commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteInt16(IntPtr, Int32, Char)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)\n  id: WriteInt16(System.IntPtr,System.Int32,System.Int16)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteInt16(IntPtr, Int32, Int16)\n  fullName: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr, System.Int32, System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteInt16\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 689\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a 16-bit signed integer value into unmanaged memory at a specified offset.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteInt16(IntPtr ptr, int ofs, short val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteInt16(ptr As IntPtr, ofs As Integer, val As Short)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The base address in unmanaged memory to write to.</p>\\n\"\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n\"\n    - id: val\n      type: System.Int16\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n    commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteInt16(IntPtr, Int32, Int16)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)\n  id: WriteInt16(System.Object,System.Int32,System.Char)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteInt16(Object, Int32, Char)\n  fullName: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object, System.Int32, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteInt16\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 739\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteInt16([In, Out] object ptr, int ofs, char val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteInt16(ptr As Object, ofs As Integer, val As Char)\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: \"\\n<p>The base address in unmanaged memory of the target object.</p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n\"\n    - id: val\n      type: System.Char\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ptr</em> is an <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This method does not accept <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: WriteInt16(Object, Int32, Char) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteInt16(Object, Int32, Char)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)\n  id: WriteInt16(System.Object,System.Int32,System.Int16)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteInt16(Object, Int32, Int16)\n  fullName: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object, System.Int32, System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteInt16\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 715\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteInt16([MarshalAs(UnmanagedType.AsAny), In, Out] object ptr, int ofs, short val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteInt16(ptr As Object, ofs As Integer, val As Short)\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: \"\\n<p>The base address in unmanaged memory of the target object.</p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.MarshalAsAttribute\n        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)\n        arguments:\n        - type: System.Runtime.InteropServices.UnmanagedType\n          value: 40\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing. </p>\\n\"\n    - id: val\n      type: System.Int16\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ptr</em> is an <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This method does not accept <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: WriteInt16(Object, Int32, Int16) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteInt16(Object, Int32, Int16)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)\n  id: WriteInt32(System.IntPtr,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteInt32(IntPtr, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteInt32\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 791\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a 32-bit signed integer value to unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteInt32(IntPtr ptr, int val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteInt32(ptr As IntPtr, val As Integer)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address in unmanaged memory to write to.</p>\\n\"\n    - id: val\n      type: System.Int32\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteInt32(IntPtr, Int32)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)\n  id: WriteInt32(System.IntPtr,System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteInt32(IntPtr, Int32, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteInt32\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 751\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a 32-bit signed integer value into unmanaged memory at a specified offset.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteInt32(IntPtr ptr, int ofs, int val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteInt32(ptr As IntPtr, ofs As Integer, val As Integer)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The base address in unmanaged memory to write to.</p>\\n\"\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n\"\n    - id: val\n      type: System.Int32\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n    commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteInt32(IntPtr, Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)\n  id: WriteInt32(System.Object,System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteInt32(Object, Int32, Int32)\n  fullName: System.Runtime.InteropServices.Marshal.WriteInt32(System.Object, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteInt32\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 779\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a 32-bit signed integer value to unmanaged memory at a specified offset.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteInt32([MarshalAs(UnmanagedType.AsAny), In, Out] object ptr, int ofs, int val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteInt32(ptr As Object, ofs As Integer, val As Integer)\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: \"\\n<p>The base address in unmanaged memory of the target object.</p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.MarshalAsAttribute\n        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)\n        arguments:\n        - type: System.Runtime.InteropServices.UnmanagedType\n          value: 40\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n\"\n    - id: val\n      type: System.Int32\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ptr</em> is an <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This method does not accept <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: WriteInt32(Object, Int32, Int32) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteInt32(Object, Int32, Int32)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)\n  id: WriteInt64(System.IntPtr,System.Int32,System.Int64)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteInt64(IntPtr, Int32, Int64)\n  fullName: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr, System.Int32, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteInt64\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 827\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteInt64(IntPtr ptr, int ofs, long val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteInt64(ptr As IntPtr, ofs As Integer, val As Long)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The base address in unmanaged memory to write.</p>\\n\"\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n\"\n    - id: val\n      type: System.Int64\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n    commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteInt64(IntPtr, Int32, Int64)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)\n  id: WriteInt64(System.IntPtr,System.Int64)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteInt64(IntPtr, Int64)\n  fullName: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteInt64\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 871\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a 64-bit signed integer value to unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteInt64(IntPtr ptr, long val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteInt64(ptr As IntPtr, val As Long)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address in unmanaged memory to write to.</p>\\n\"\n    - id: val\n      type: System.Int64\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteInt64(IntPtr, Int64)\n- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)\n  id: WriteInt64(System.Object,System.Int32,System.Int64)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteInt64(Object, Int32, Int64)\n  fullName: System.Runtime.InteropServices.Marshal.WriteInt64(System.Object, System.Int32, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteInt64\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 859\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteInt64([MarshalAs(UnmanagedType.AsAny), In, Out] object ptr, int ofs, long val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteInt64(ptr As Object, ofs As Integer, val As Long)\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: \"\\n<p>The base address in unmanaged memory of the target object.</p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.MarshalAsAttribute\n        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)\n        arguments:\n        - type: System.Runtime.InteropServices.UnmanagedType\n          value: 40\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n\"\n    - id: val\n      type: System.Int64\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ptr</em> is an <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This method does not accept <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: WriteInt64(Object, Int32, Int64) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteInt64(Object, Int32, Int64)\n- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)\n  id: WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteIntPtr(IntPtr, Int32, IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr, System.Int32, System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteIntPtr\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 797\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a processor native-sized integer value to unmanaged memory at a specified offset.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteIntPtr(IntPtr ptr, int ofs, IntPtr val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteIntPtr(ptr As IntPtr, ofs As Integer, val As IntPtr)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The base address in unmanaged memory to write to.</p>\\n\"\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n\"\n    - id: val\n      type: System.IntPtr\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  - type: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n    commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteIntPtr(IntPtr, Int32, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)\n  id: WriteIntPtr(System.IntPtr,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteIntPtr(IntPtr, IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr, System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteIntPtr\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 817\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a processor native sized integer value into unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteIntPtr(IntPtr ptr, IntPtr val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteIntPtr(ptr As IntPtr, val As IntPtr)\n    parameters:\n    - id: ptr\n      type: System.IntPtr\n      description: \"\\n<p>The address in unmanaged memory to write to.</p>\\n\"\n    - id: val\n      type: System.IntPtr\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>\\n<em>ptr</em> is not a recognized format.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>ptr</em> is invalid.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteIntPtr(IntPtr, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)\n  id: WriteIntPtr(System.Object,System.Int32,System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: WriteIntPtr(Object, Int32, IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object, System.Int32, System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteIntPtr\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 807\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a processor native sized integer value to unmanaged memory.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void WriteIntPtr([MarshalAs(UnmanagedType.AsAny), In, Out] object ptr, int ofs, IntPtr val)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub WriteIntPtr(ptr As Object, ofs As Integer, val As IntPtr)\n    parameters:\n    - id: ptr\n      type: System.Object\n      description: \"\\n<p>The base address in unmanaged memory of the target object.</p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.MarshalAsAttribute\n        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)\n        arguments:\n        - type: System.Runtime.InteropServices.UnmanagedType\n          value: 40\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: ofs\n      type: System.Int32\n      description: \"\\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\\n\"\n    - id: val\n      type: System.IntPtr\n      description: \"\\n<p>The value to write.</p>\\n\"\n  exceptions:\n  - type: System.AccessViolationException\n    commentId: T:System.AccessViolationException\n    description: \"\\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>ptr</em> is an <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This method does not accept <xref href=\\\"System.Runtime.InteropServices.ArrayWithOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: WriteIntPtr(Object, Int32, IntPtr) may be unavailable in future releases.\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.WriteIntPtr(Object, Int32, IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)\n  id: ZeroFreeBSTR(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ZeroFreeBSTR(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ZeroFreeBSTR\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2704\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Frees a <see href=\\\"https://msdn.microsoft.com/library/ms221069.aspx\\\">BSTR</see> pointer that was allocated using the <xref href=\\\"System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void ZeroFreeBSTR(IntPtr s)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub ZeroFreeBSTR(s As IntPtr)\n    parameters:\n    - id: s\n      type: System.IntPtr\n      description: \"\\n<p>The address of the <strong>BSTR</strong> to free.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ZeroFreeBSTR(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)\n  id: ZeroFreeCoTaskMemAnsi(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ZeroFreeCoTaskMemAnsi(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ZeroFreeCoTaskMemAnsi\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2712\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Frees an unmanaged string pointer that was allocated using the <xref href=\\\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void ZeroFreeCoTaskMemAnsi(IntPtr s)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub ZeroFreeCoTaskMemAnsi(s As IntPtr)\n    parameters:\n    - id: s\n      type: System.IntPtr\n      description: \"\\n<p>The address of the unmanaged string to free.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ZeroFreeCoTaskMemAnsi(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)\n  id: ZeroFreeCoTaskMemUnicode(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ZeroFreeCoTaskMemUnicode(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ZeroFreeCoTaskMemUnicode\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2719\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Frees an unmanaged string pointer that was allocated using the <xref href=\\\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void ZeroFreeCoTaskMemUnicode(IntPtr s)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub ZeroFreeCoTaskMemUnicode(s As IntPtr)\n    parameters:\n    - id: s\n      type: System.IntPtr\n      description: \"\\n<p>The address of the unmanaged string to free.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ZeroFreeCoTaskMemUnicode(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)\n  id: ZeroFreeGlobalAllocAnsi(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ZeroFreeGlobalAllocAnsi(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ZeroFreeGlobalAllocAnsi\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2755\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Frees an unmanaged string pointer that was allocated using the <xref href=\\\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void ZeroFreeGlobalAllocAnsi(IntPtr s)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub ZeroFreeGlobalAllocAnsi(s As IntPtr)\n    parameters:\n    - id: s\n      type: System.IntPtr\n      description: \"\\n<p>The address of the unmanaged string to free.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ZeroFreeGlobalAllocAnsi(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)\n  id: ZeroFreeGlobalAllocUnicode(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ZeroFreeGlobalAllocUnicode(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ZeroFreeGlobalAllocUnicode\n    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs\n    startLine: 2761\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Frees an unmanaged string pointer that was allocated using the <xref href=\\\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void ZeroFreeGlobalAllocUnicode(IntPtr s)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub ZeroFreeGlobalAllocUnicode(s As IntPtr)\n    parameters:\n    - id: s\n      type: System.IntPtr\n      description: \"\\n<p>The address of the unmanaged string to free.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ZeroFreeGlobalAllocUnicode(IntPtr)\n- uid: System.Runtime.InteropServices.Marshal.ZeroFreeMemoryUTF8(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeMemoryUTF8(System.IntPtr)\n  id: ZeroFreeMemoryUTF8(System.IntPtr)\n  parent: System.Runtime.InteropServices.Marshal\n  langs:\n  - csharp\n  - vb\n  name: ZeroFreeMemoryUTF8(IntPtr)\n  fullName: System.Runtime.InteropServices.Marshal.ZeroFreeMemoryUTF8(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ZeroFreeMemoryUTF8\n    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n    startLine: 660\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static void ZeroFreeMemoryUTF8(IntPtr s)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Sub ZeroFreeMemoryUTF8(s As IntPtr)\n    parameters:\n    - id: s\n      type: System.IntPtr\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Marshal.ZeroFreeMemoryUTF8(IntPtr)\nreferences:\n- uid: System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  nameWithType: IntPtr\n  commentId: T:System.IntPtr\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Double[]\n  name: Double[]\n  fullName: System.Double[]\n  fullname.vb: System.Double()\n  name.vb: Double()\n  spec.csharp:\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Double[]\n  nameWithType.vb: Double()\n- uid: System.Int16[]\n  name: Int16[]\n  fullName: System.Int16[]\n  fullname.vb: System.Int16()\n  name.vb: Int16()\n  spec.csharp:\n  - uid: System.Int16\n    name: Int16\n    fullName: System.Int16\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int16\n    name: Int16\n    fullName: System.Int16\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int16[]\n  nameWithType.vb: Int16()\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.Int64[]\n  name: Int64[]\n  fullName: System.Int64[]\n  fullname.vb: System.Int64()\n  name.vb: Int64()\n  spec.csharp:\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int64[]\n  nameWithType.vb: Int64()\n- uid: System.IntPtr[]\n  name: IntPtr[]\n  fullName: System.IntPtr[]\n  fullname.vb: System.IntPtr()\n  name.vb: IntPtr()\n  spec.csharp:\n  - uid: System.IntPtr\n    name: IntPtr\n    fullName: System.IntPtr\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.IntPtr\n    name: IntPtr\n    fullName: System.IntPtr\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: IntPtr[]\n  nameWithType.vb: IntPtr()\n- uid: System.Single[]\n  name: Single[]\n  fullName: System.Single[]\n  fullname.vb: System.Single()\n  name.vb: Single()\n  spec.csharp:\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Single[]\n  nameWithType.vb: Single()\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: '{TWrapper}'\n  definition: TWrapper\n  name: TWrapper\n  fullName: TWrapper\n  nameWithType: TWrapper\n  commentId: '!:TWrapper'\n- uid: TWrapper\n  isExternal: false\n  name: TWrapper\n  fullName: TWrapper\n  nameWithType: TWrapper\n  commentId: '!:TWrapper'\n- uid: System.Runtime.InteropServices.CustomQueryInterfaceMode\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: CustomQueryInterfaceMode\n  fullName: System.Runtime.InteropServices.CustomQueryInterfaceMode\n  nameWithType: CustomQueryInterfaceMode\n  commentId: T:System.Runtime.InteropServices.CustomQueryInterfaceMode\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  fullName: System.Delegate\n  nameWithType: Delegate\n  commentId: T:System.Delegate\n- uid: '{TDelegate}'\n  definition: TDelegate\n  name: TDelegate\n  fullName: TDelegate\n  nameWithType: TDelegate\n  commentId: '!:TDelegate'\n- uid: TDelegate\n  isExternal: false\n  name: TDelegate\n  fullName: TDelegate\n  nameWithType: TDelegate\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  fullName: System.Exception\n  nameWithType: Exception\n  commentId: T:System.Exception\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: '{T}[]'\n  name: T[]\n  fullName: T[]\n  fullname.vb: T()\n  name.vb: T()\n  spec.csharp:\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  nameWithType: T[]\n  nameWithType.vb: T()\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  nameWithType: Guid\n  commentId: T:System.Guid\n- uid: System.Runtime.InteropServices.ComTypes.ITypeInfo\n  parent: System.Runtime.InteropServices.ComTypes\n  isExternal: false\n  name: ITypeInfo\n  fullName: System.Runtime.InteropServices.ComTypes.ITypeInfo\n  nameWithType: ITypeInfo\n  commentId: T:System.Runtime.InteropServices.ComTypes.ITypeInfo\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Runtime.InteropServices.ComTypes\n  isExternal: false\n  name: System.Runtime.InteropServices.ComTypes\n  fullName: System.Runtime.InteropServices.ComTypes\n  nameWithType: System.Runtime.InteropServices.ComTypes\n  commentId: N:System.Runtime.InteropServices.ComTypes\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.Runtime.InteropServices.InvalidOleVariantTypeException\n  isExternal: false\n  name: InvalidOleVariantTypeException\n  fullName: System.Runtime.InteropServices.InvalidOleVariantTypeException\n  nameWithType: InvalidOleVariantTypeException\n  commentId: T:System.Runtime.InteropServices.InvalidOleVariantTypeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.MissingMethodException\n  isExternal: false\n  name: MissingMethodException\n  fullName: System.MissingMethodException\n  nameWithType: MissingMethodException\n  commentId: T:System.MissingMethodException\n- uid: System.AccessViolationException\n- uid: System.NullReferenceException\n  isExternal: false\n  name: NullReferenceException\n  fullName: System.NullReferenceException\n  nameWithType: NullReferenceException\n  commentId: T:System.NullReferenceException\n"}