{"nodes":[{"pos":[359,374],"content":"DictionaryEntry","needQuote":true,"nodes":[{"content":"DictionaryEntry","pos":[0,15]}]},{"pos":[2337,2368],"content":"DictionaryEntry(Object, Object)","needQuote":true,"nodes":[{"content":"DictionaryEntry(Object, Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The object defined in each key/value pair.","pos":[3204,3251],"source":"\\n<p>The object defined in each key/value pair."},{"content":"&lt;/p&gt;\\n","pos":[3252,3258],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The definition associated with &lt;em&gt;key&lt;/em&gt;.","pos":[3322,3371],"source":"\\n<p>The definition associated with <em>key</em>."},{"content":"&lt;/p&gt;\\n","pos":[3372,3378],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the .NET Framework version is 1.0 or 1.1.","pos":[3497,3587],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong> and the .NET Framework version is 1.0 or 1.1."},{"content":"&lt;/p&gt;\\n","pos":[3588,3594],"source":" </p>\\n"},{"pos":[3908,3911],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"content":"\\n&lt;p&gt;The key in the key/value pair.&lt;/p&gt;\\n","pos":[4546,4587],"source":"\\n<p>The key in the key/value pair.</p>\\n"},{"pos":[4895,4900],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The value in the key/value pair.&lt;/p&gt;\\n","pos":[5545,5588],"source":"\\n<p>The value in the key/value pair.</p>\\n"},{"pos":[5768,5786],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[5987,6001],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6126,6132],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6181,6182],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6232,6238],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6298,6299],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6385,6391],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6440,6441],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6491,6497],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6557,6558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6761,6774],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[6881,6892],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[6946,6947],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6974,6975],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7051,7062],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[7116,7117],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7144,7145],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7334,7344],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7445,7453],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7504,7505],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7532,7533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7606,7614],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7665,7666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7693,7694],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7897,7919],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8067,8073],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8140,8141],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8191,8197],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8258,8259]},{"pos":[8314,8320],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8380,8381],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8478,8484],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8551,8552],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8602,8608],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8669,8670]},{"pos":[8725,8731],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8791,8792],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9037,9068],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9234,9249],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9325,9326],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9376,9382],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9443,9444]},{"pos":[9499,9505],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9565,9566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9672,9687],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9763,9764],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9814,9820],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9881,9882]},{"pos":[9937,9943],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10003,10004],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10230,10239],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[10332,10339],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10407,10408],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10435,10436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10505,10512],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10580,10581],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10608,10609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10765,10774],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[10928,10934],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11055,11061],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11190,11211],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Collections.DictionaryEntry\n  commentId: T:System.Collections.DictionaryEntry\n  id: DictionaryEntry\n  parent: System.Collections\n  children:\n  - System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)\n  - System.Collections.DictionaryEntry.Key\n  - System.Collections.DictionaryEntry.Value\n  langs:\n  - csharp\n  - vb\n  name: DictionaryEntry\n  fullName: System.Collections.DictionaryEntry\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/DictionaryEntry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DictionaryEntry\n    path: src/mscorlib/src/System/Collections/DictionaryEntry.cs\n    startLine: 20\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Defines a dictionary key/value pair that can be set or retrieved.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public struct DictionaryEntry\n    content.vb: >-\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public Structure DictionaryEntry\n  seealso:\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.Generic.KeyValuePair`2\n    commentId: T:System.Collections.Generic.KeyValuePair`2\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: DictionaryEntry\n- uid: System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)\n  commentId: M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)\n  id: '#ctor(System.Object,System.Object)'\n  parent: System.Collections.DictionaryEntry\n  langs:\n  - csharp\n  - vb\n  name: DictionaryEntry(Object, Object)\n  fullName: System.Collections.DictionaryEntry.DictionaryEntry(System.Object, System.Object)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/DictionaryEntry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/DictionaryEntry.cs\n    startLine: 29\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes an instance of the <xref href=\\\"System.Collections.DictionaryEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type with the specified key and value.</p>\\n\"\n  syntax:\n    content: public DictionaryEntry(object key, object value)\n    content.vb: Public Sub New(key As Object, value As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The object defined in each key/value pair. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The definition associated with <em>key</em>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong> and the .NET Framework version is 1.0 or 1.1. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DictionaryEntry.DictionaryEntry(Object, Object)\n- uid: System.Collections.DictionaryEntry.Key\n  commentId: P:System.Collections.DictionaryEntry.Key\n  id: Key\n  parent: System.Collections.DictionaryEntry\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.Collections.DictionaryEntry.Key\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/DictionaryEntry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Key\n    path: src/mscorlib/src/System/Collections/DictionaryEntry.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the key in the key/value pair.</p>\\n\"\n  syntax:\n    content: public object Key { get; set; }\n    content.vb: Public Property Key As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The key in the key/value pair.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: DictionaryEntry.Key\n- uid: System.Collections.DictionaryEntry.Value\n  commentId: P:System.Collections.DictionaryEntry.Value\n  id: Value\n  parent: System.Collections.DictionaryEntry\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Collections.DictionaryEntry.Value\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/DictionaryEntry.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Value\n    path: src/mscorlib/src/System/Collections/DictionaryEntry.cs\n    startLine: 44\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the value in the key/value pair.</p>\\n\"\n  syntax:\n    content: public object Value { get; set; }\n    content.vb: Public Property Value As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The value in the key/value pair.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: DictionaryEntry.Value\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}