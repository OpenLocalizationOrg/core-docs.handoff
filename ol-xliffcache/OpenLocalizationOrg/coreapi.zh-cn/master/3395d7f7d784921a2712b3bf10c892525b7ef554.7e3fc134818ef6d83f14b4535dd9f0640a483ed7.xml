{"nodes":[{"pos":[1435,1447],"content":"BinaryReader","needQuote":true,"nodes":[{"content":"BinaryReader","pos":[0,12]}]},{"pos":[2775,2795],"content":"BinaryReader(Stream)","needQuote":true,"nodes":[{"content":"BinaryReader(Stream)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The input stream.","pos":[3555,3577],"source":"\\n<p>The input stream."},{"content":"&lt;/p&gt;\\n","pos":[3578,3584],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support reading, is &lt;strong&gt;null&lt;/strong&gt;, or is already closed.","pos":[3695,3784],"source":"\\n<p>The stream does not support reading, is <strong>null</strong>, or is already closed."},{"content":"&lt;/p&gt;\\n","pos":[3785,3791],"source":" </p>\\n"},{"pos":[4268,4298],"content":"BinaryReader(Stream, Encoding)","needQuote":true,"nodes":[{"content":"BinaryReader(Stream, Encoding)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The input stream.","pos":[5119,5141],"source":"\\n<p>The input stream."},{"content":"&lt;/p&gt;\\n","pos":[5142,5148],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character encoding to use.","pos":[5222,5257],"source":"\\n<p>The character encoding to use."},{"content":"&lt;/p&gt;\\n","pos":[5258,5264],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support reading, is &lt;strong&gt;null&lt;/strong&gt;, or is already closed.","pos":[5375,5464],"source":"\\n<p>The stream does not support reading, is <strong>null</strong>, or is already closed."},{"content":"&lt;/p&gt;\\n","pos":[5465,5471],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;encoding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5576,5626],"source":"\\n<p>\\n<em>encoding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5627,5633],"source":" </p>\\n"},{"pos":[6077,6116],"content":"BinaryReader(Stream, Encoding, Boolean)","needQuote":true,"nodes":[{"content":"BinaryReader(Stream, Encoding, Boolean)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The input stream.&lt;/p&gt;\\n","pos":[7030,7058],"source":"\\n<p>The input stream.</p>\\n"},{"content":"\\n&lt;p&gt;The character encoding to use.&lt;/p&gt;\\n","pos":[7132,7173],"source":"\\n<p>The character encoding to use.</p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support reading, is &lt;strong&gt;null&lt;/strong&gt;, or is already closed.","pos":[7560,7649],"source":"\\n<p>The stream does not support reading, is <strong>null</strong>, or is already closed."},{"content":"&lt;/p&gt;\\n","pos":[7650,7656],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;encoding&lt;/em&gt; or &lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[7761,7829],"source":"\\n<p>\\n<em>encoding</em> or <em>input</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7830,7836],"source":" </p>\\n"},{"pos":[8140,8150],"content":"BaseStream","needQuote":true,"nodes":[{"content":"BaseStream","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The underlying stream associated with the &lt;strong&gt;BinaryReader&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8877,8960],"source":"\\n<p>The underlying stream associated with the <strong>BinaryReader</strong>.</p>\\n"},{"pos":[9275,9284],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[10241,10257],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[11048,11185],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[11186,11192],"source":" </p>\\n"},{"pos":[11549,11566],"content":"FillBuffer(Int32)","needQuote":true,"nodes":[{"content":"FillBuffer(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The number of bytes to be read.","pos":[12264,12300],"source":"\\n<p>The number of bytes to be read."},{"content":"&lt;/p&gt;\\n","pos":[12301,12307],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached before &lt;em&gt;numBytes&lt;/em&gt; could be read.","pos":[12430,12507],"source":"\\n<p>The end of the stream is reached before <em>numBytes</em> could be read."},{"content":"&lt;/p&gt;\\n","pos":[12508,12514],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[12605,12630],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[12631,12637],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Requested &lt;em&gt;numBytes&lt;/em&gt; is larger than the internal buffer size.&lt;/p&gt;\\n","pos":[12754,12833],"source":"\\n<p>Requested <em>numBytes</em> is larger than the internal buffer size.</p>\\n"},{"pos":[13143,13153],"content":"PeekChar()","needQuote":true,"nodes":[{"content":"PeekChar()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The next available character, or -1 if no more characters are available or the stream does not support seeking.&lt;/p&gt;\\n","pos":[13791,13913],"source":"\\n<p>The next available character, or -1 if no more characters are available or the stream does not support seeking.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[14018,14043],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[14044,14050],"source":" </p>\\n"},{"pos":[14636,14642],"content":"Read()","needQuote":true,"nodes":[{"content":"Read()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The next character from the input stream, or -1 if no characters are currently available.&lt;/p&gt;\\n","pos":[15375,15475],"source":"\\n<p>The next character from the input stream, or -1 if no characters are currently available.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[15580,15605],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[15606,15612],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[15721,15747],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[15748,15754],"source":" </p>\\n"},{"pos":[16238,16264],"content":"Read(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Read(Byte[], Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The buffer to read data into.","pos":[17053,17087],"source":"\\n<p>The buffer to read data into."},{"content":"&lt;/p&gt;\\n","pos":[17088,17094],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting point in the buffer at which to begin reading into the buffer.","pos":[17157,17237],"source":"\\n<p>The starting point in the buffer at which to begin reading into the buffer."},{"content":"&lt;/p&gt;\\n","pos":[17238,17244],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to read.","pos":[17307,17340],"source":"\\n<p>The number of bytes to read."},{"content":"&lt;/p&gt;\\n","pos":[17341,17347],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes read into &lt;em&gt;buffer&lt;/em&gt;.","pos":[17406,17457],"source":"\\n<p>The number of bytes read into <em>buffer</em>."},{"content":"This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.&lt;/p&gt;\\n","pos":[17458,17612],"source":" This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.</p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.","pos":[17723,17795],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The number of decoded characters to read is greater than &lt;em&gt;count&lt;/em&gt;.","pos":[17796,17890],"source":" </p>\\n<p>-or-</p>\\n<p>The number of decoded characters to read is greater than <em>count</em>."},{"content":"This can happen if a Unicode decoder returns fallback characters or a surrogate pair.&lt;/p&gt;\\n","pos":[17891,17982],"source":" This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[18087,18135],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[18136,18142],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[18259,18311],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[18312,18318],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[18427,18453],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[18454,18460],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[18551,18576],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[18577,18583],"source":" </p>\\n"},{"pos":[19190,19216],"content":"Read(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Read(Char[], Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The buffer to read data into.","pos":[20092,20126],"source":"\\n<p>The buffer to read data into."},{"content":"&lt;/p&gt;\\n","pos":[20127,20133],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting point in the buffer at which to begin reading into the buffer.","pos":[20196,20276],"source":"\\n<p>The starting point in the buffer at which to begin reading into the buffer."},{"content":"&lt;/p&gt;\\n","pos":[20277,20283],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to read.","pos":[20346,20384],"source":"\\n<p>The number of characters to read."},{"content":"&lt;/p&gt;\\n","pos":[20385,20391],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The total number of characters read into the buffer.","pos":[20450,20507],"source":"\\n<p>The total number of characters read into the buffer."},{"content":"This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.&lt;/p&gt;\\n","pos":[20508,20682],"source":" This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.</p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.","pos":[20793,20865],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The number of decoded characters to read is greater than &lt;em&gt;count&lt;/em&gt;.","pos":[20866,20960],"source":" </p>\\n<p>-or-</p>\\n<p>The number of decoded characters to read is greater than <em>count</em>."},{"content":"This can happen if a Unicode decoder returns fallback characters or a surrogate pair.&lt;/p&gt;\\n","pos":[20961,21052],"source":" This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[21157,21205],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[21206,21212],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[21329,21381],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[21382,21388],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[21497,21523],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[21524,21530],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[21621,21646],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[21647,21653],"source":" </p>\\n"},{"pos":[22179,22199],"content":"Read7BitEncodedInt()","needQuote":true,"nodes":[{"content":"Read7BitEncodedInt()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A 32-bit integer in compressed format.&lt;/p&gt;\\n","pos":[22821,22870],"source":"\\n<p>A 32-bit integer in compressed format.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[22993,23031],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[23032,23038],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[23147,23173],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[23174,23180],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[23271,23296],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[23297,23303],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is corrupted.&lt;/p&gt;\\n","pos":[23396,23431],"source":"\\n<p>The stream is corrupted.</p>\\n"},{"pos":[23725,23738],"content":"ReadBoolean()","needQuote":true,"nodes":[{"content":"ReadBoolean()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the byte is nonzero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24425,24518],"source":"\\n<p>\\n<strong>true</strong> if the byte is nonzero; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[24641,24679],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[24680,24686],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[24795,24821],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[24822,24828],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[24919,24944],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[24945,24951],"source":" </p>\\n"},{"pos":[25251,25261],"content":"ReadByte()","needQuote":true,"nodes":[{"content":"ReadByte()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The next byte read from the current stream.&lt;/p&gt;\\n","pos":[25911,25965],"source":"\\n<p>The next byte read from the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[26088,26126],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[26127,26133],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[26242,26268],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[26269,26275],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[26366,26391],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[26392,26398],"source":" </p>\\n"},{"pos":[26740,26756],"content":"ReadBytes(Int32)","needQuote":true,"nodes":[{"content":"ReadBytes(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The number of bytes to read.","pos":[27506,27539],"source":"\\n<p>The number of bytes to read."},{"content":"This value must be 0 or a non-negative number or an exception will occur.&lt;/p&gt;\\n","pos":[27540,27619],"source":" This value must be 0 or a non-negative number or an exception will occur.</p>\\n"},{"content":"\\n&lt;p&gt;A byte array containing data read from the underlying stream.","pos":[27679,27745],"source":"\\n<p>A byte array containing data read from the underlying stream."},{"content":"This might be less than the number of bytes requested if the end of the stream is reached.&lt;/p&gt;\\n","pos":[27746,27842],"source":" This might be less than the number of bytes requested if the end of the stream is reached.</p>\\n"},{"content":"\\n&lt;p&gt;The number of decoded characters to read is greater than &lt;em&gt;count&lt;/em&gt;.","pos":[27953,28030],"source":"\\n<p>The number of decoded characters to read is greater than <em>count</em>."},{"content":"This can happen if a Unicode decoder returns fallback characters or a surrogate pair.&lt;/p&gt;\\n","pos":[28031,28122],"source":" This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[28213,28238],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[28239,28245],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[28354,28380],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[28381,28387],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is negative.","pos":[28504,28538],"source":"\\n<p>\\n<em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[28539,28545],"source":" </p>\\n"},{"pos":[28848,28858],"content":"ReadChar()","needQuote":true,"nodes":[{"content":"ReadChar()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A character read from the current stream.&lt;/p&gt;\\n","pos":[29609,29661],"source":"\\n<p>A character read from the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[29784,29822],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[29823,29829],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[29938,29964],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[29965,29971],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[30062,30087],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[30088,30094],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A surrogate character was read.","pos":[30191,30227],"source":"\\n<p>A surrogate character was read."},{"content":"&lt;/p&gt;\\n","pos":[30228,30234],"source":" </p>\\n"},{"pos":[30656,30672],"content":"ReadChars(Int32)","needQuote":true,"nodes":[{"content":"ReadChars(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The number of characters to read.","pos":[31611,31649],"source":"\\n<p>The number of characters to read."},{"content":"&lt;/p&gt;\\n","pos":[31650,31656],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A character array containing data read from the underlying stream.","pos":[31716,31787],"source":"\\n<p>A character array containing data read from the underlying stream."},{"content":"This might be less than the number of characters requested if the end of the stream is reached.&lt;/p&gt;\\n","pos":[31788,31889],"source":" This might be less than the number of characters requested if the end of the stream is reached.</p>\\n"},{"content":"\\n&lt;p&gt;The number of decoded characters to read is greater than &lt;em&gt;count&lt;/em&gt;.","pos":[32000,32077],"source":"\\n<p>The number of decoded characters to read is greater than <em>count</em>."},{"content":"This can happen if a Unicode decoder returns fallback characters or a surrogate pair.&lt;/p&gt;\\n","pos":[32078,32169],"source":" This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[32278,32304],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[32305,32311],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[32402,32427],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[32428,32434],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is negative.","pos":[32551,32585],"source":"\\n<p>\\n<em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[32586,32592],"source":" </p>\\n"},{"pos":[32984,32997],"content":"ReadDecimal()","needQuote":true,"nodes":[{"content":"ReadDecimal()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A decimal value read from the current stream.&lt;/p&gt;\\n","pos":[33675,33731],"source":"\\n<p>A decimal value read from the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[33854,33892],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[33893,33899],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[34008,34034],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[34035,34041],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[34132,34157],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[34158,34164],"source":" </p>\\n"},{"pos":[34470,34482],"content":"ReadDouble()","needQuote":true,"nodes":[{"content":"ReadDouble()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An 8-byte floating point value read from the current stream.&lt;/p&gt;\\n","pos":[35244,35315],"source":"\\n<p>An 8-byte floating point value read from the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[35438,35476],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[35477,35483],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[35592,35618],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[35619,35625],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[35716,35741],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[35742,35748],"source":" </p>\\n"},{"pos":[36050,36061],"content":"ReadInt16()","needQuote":true,"nodes":[{"content":"ReadInt16()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A 2-byte signed integer read from the current stream.&lt;/p&gt;\\n","pos":[36729,36793],"source":"\\n<p>A 2-byte signed integer read from the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[36916,36954],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[36955,36961],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[37070,37096],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[37097,37103],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[37194,37219],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[37220,37226],"source":" </p>\\n"},{"pos":[37527,37538],"content":"ReadInt32()","needQuote":true,"nodes":[{"content":"ReadInt32()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A 4-byte signed integer read from the current stream.&lt;/p&gt;\\n","pos":[38207,38271],"source":"\\n<p>A 4-byte signed integer read from the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[38394,38432],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[38433,38439],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[38548,38574],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[38575,38581],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[38672,38697],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[38698,38704],"source":" </p>\\n"},{"pos":[39005,39016],"content":"ReadInt64()","needQuote":true,"nodes":[{"content":"ReadInt64()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;An 8-byte signed integer read from the current stream.&lt;/p&gt;\\n","pos":[39685,39750],"source":"\\n<p>An 8-byte signed integer read from the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[39873,39911],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[39912,39918],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[40027,40053],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[40054,40060],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[40151,40176],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[40177,40183],"source":" </p>\\n"},{"pos":[40484,40495],"content":"ReadSByte()","needQuote":true,"nodes":[{"content":"ReadSByte()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A signed byte read from the current stream.&lt;/p&gt;\\n","pos":[41221,41275],"source":"\\n<p>A signed byte read from the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[41398,41436],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[41437,41443],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[41552,41578],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[41579,41585],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[41676,41701],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[41702,41708],"source":" </p>\\n"},{"pos":[42187,42199],"content":"ReadSingle()","needQuote":true,"nodes":[{"content":"ReadSingle()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A 4-byte floating point value read from the current stream.&lt;/p&gt;\\n","pos":[42958,43028],"source":"\\n<p>A 4-byte floating point value read from the current stream.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[43151,43189],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[43190,43196],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[43305,43331],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[43332,43338],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[43429,43454],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[43455,43461],"source":" </p>\\n"},{"pos":[43766,43778],"content":"ReadString()","needQuote":true,"nodes":[{"content":"ReadString()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The string being read.&lt;/p&gt;\\n","pos":[44461,44494],"source":"\\n<p>The string being read.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[44617,44655],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[44656,44662],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[44771,44797],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[44798,44804],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[44895,44920],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[44921,44927],"source":" </p>\\n"},{"pos":[45232,45244],"content":"ReadUInt16()","needQuote":true,"nodes":[{"content":"ReadUInt16()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A 2-byte unsigned integer read from this stream.&lt;/p&gt;\\n","pos":[46018,46077],"source":"\\n<p>A 2-byte unsigned integer read from this stream.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[46200,46238],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[46239,46245],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[46354,46380],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[46381,46387],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[46478,46503],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[46504,46510],"source":" </p>\\n"},{"pos":[46990,47002],"content":"ReadUInt32()","needQuote":true,"nodes":[{"content":"ReadUInt32()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A 4-byte unsigned integer read from this stream.&lt;/p&gt;\\n","pos":[47748,47807],"source":"\\n<p>A 4-byte unsigned integer read from this stream.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[47930,47968],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[47969,47975],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[48084,48110],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[48111,48117],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[48208,48233],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[48234,48240],"source":" </p>\\n"},{"pos":[48720,48732],"content":"ReadUInt64()","needQuote":true,"nodes":[{"content":"ReadUInt64()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An 8-byte unsigned integer read from this stream.&lt;/p&gt;\\n","pos":[49478,49538],"source":"\\n<p>An 8-byte unsigned integer read from this stream.</p>\\n"},{"content":"\\n&lt;p&gt;The end of the stream is reached.","pos":[49661,49699],"source":"\\n<p>The end of the stream is reached."},{"content":"&lt;/p&gt;\\n","pos":[49700,49706],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[49797,49822],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[49823,49829],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream is closed.","pos":[49938,49964],"source":"\\n<p>The stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[49965,49971],"source":" </p>\\n"},{"pos":[50333,50342],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[50482,50488],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50638,50649],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[50824,50834],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[50929,50937],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[51006,51007],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51034,51035],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51105,51113],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[51182,51183],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51210,51211],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51394,51408],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[51527,51533],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51600,51601],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51651,51657],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51717,51718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51801,51807],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51874,51875],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51925,51931],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51991,51992],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52206,52228],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[52376,52382],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[52449,52450],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52500,52506],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[52567,52568]},{"pos":[52623,52629],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52689,52690],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52787,52793],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[52860,52861],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52911,52917],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[52978,52979]},{"pos":[53034,53040],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53100,53101],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53346,53377],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[53543,53558],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[53634,53635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53685,53691],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[53752,53753]},{"pos":[53808,53814],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53874,53875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53981,53996],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[54072,54073],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54123,54129],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[54190,54191]},{"pos":[54246,54252],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54312,54313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54543,54556],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[54657,54668],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[54740,54741],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54768,54769],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54842,54853],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[54925,54926],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54953,54954],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55129,55138],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[55231,55238],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[55306,55307],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55334,55335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55404,55411],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[55479,55480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55507,55508],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55683,55700],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[55809,55824],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[55900,55901],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55928,55929],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56006,56021],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[56097,56098],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56125,56126],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56271,56277],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[56414,56420],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[56583,56591],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[56733,56744],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[56891,56898],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[57071,57080],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[57183,57190],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[57242,57243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57270,57271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57345,57352],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[57404,57405],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57432,57433],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57595,57600],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[57705,57711],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[57831,57835],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[57894,57896]},{"pos":[57959,57963],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[58021,58023],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[58119,58125],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[58245,58249],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[58308,58310]},{"pos":[58373,58377],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[58435,58437],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[58568,58572],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[58709,58713],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[58853,58860],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[59008,59014],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[59158,59163],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[59304,59309],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[59450,59455],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[59597,59603],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[59748,59754],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[59899,59905],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[60050,60056],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[60201,60207],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[60363,60380],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[60556,60577],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[60767,60787],"content":"EndOfStreamException","needQuote":true,"nodes":[{"content":"EndOfStreamException","pos":[0,20]}]},{"pos":[60991,61002],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]},{"pos":[61172,61199],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[61407,61430],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[61635,61650],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.IO.BinaryReader\n  commentId: T:System.IO.BinaryReader\n  id: BinaryReader\n  parent: System.IO\n  children:\n  - System.IO.BinaryReader.#ctor(System.IO.Stream)\n  - System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)\n  - System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  - System.IO.BinaryReader.BaseStream\n  - System.IO.BinaryReader.Dispose\n  - System.IO.BinaryReader.Dispose(System.Boolean)\n  - System.IO.BinaryReader.FillBuffer(System.Int32)\n  - System.IO.BinaryReader.PeekChar\n  - System.IO.BinaryReader.Read\n  - System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)\n  - System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)\n  - System.IO.BinaryReader.Read7BitEncodedInt\n  - System.IO.BinaryReader.ReadBoolean\n  - System.IO.BinaryReader.ReadByte\n  - System.IO.BinaryReader.ReadBytes(System.Int32)\n  - System.IO.BinaryReader.ReadChar\n  - System.IO.BinaryReader.ReadChars(System.Int32)\n  - System.IO.BinaryReader.ReadDecimal\n  - System.IO.BinaryReader.ReadDouble\n  - System.IO.BinaryReader.ReadInt16\n  - System.IO.BinaryReader.ReadInt32\n  - System.IO.BinaryReader.ReadInt64\n  - System.IO.BinaryReader.ReadSByte\n  - System.IO.BinaryReader.ReadSingle\n  - System.IO.BinaryReader.ReadString\n  - System.IO.BinaryReader.ReadUInt16\n  - System.IO.BinaryReader.ReadUInt32\n  - System.IO.BinaryReader.ReadUInt64\n  langs:\n  - csharp\n  - vb\n  name: BinaryReader\n  fullName: System.IO.BinaryReader\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BinaryReader\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 24\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads primitive data types as binary values in a specific encoding.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public class BinaryReader : IDisposable\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Class BinaryReader\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: BinaryReader\n- uid: System.IO.BinaryReader.#ctor(System.IO.Stream)\n  commentId: M:System.IO.BinaryReader.#ctor(System.IO.Stream)\n  id: '#ctor(System.IO.Stream)'\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: BinaryReader(Stream)\n  fullName: System.IO.BinaryReader.BinaryReader(System.IO.Stream)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 42\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.BinaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class based on the specified stream and using UTF-8 encoding.</p>\\n\"\n  syntax:\n    content: public BinaryReader(Stream input)\n    content.vb: Public Sub New(input As Stream)\n    parameters:\n    - id: input\n      type: System.IO.Stream\n      description: \"\\n<p>The input stream. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The stream does not support reading, is <strong>null</strong>, or is already closed. </p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding\n    commentId: T:System.Text.UTF8Encoding\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BinaryReader.BinaryReader(Stream)\n- uid: System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)\n  commentId: M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)\n  id: '#ctor(System.IO.Stream,System.Text.Encoding)'\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: BinaryReader(Stream, Encoding)\n  fullName: System.IO.BinaryReader.BinaryReader(System.IO.Stream, System.Text.Encoding)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 45\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.BinaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class based on the specified stream and character encoding.</p>\\n\"\n  syntax:\n    content: public BinaryReader(Stream input, Encoding encoding)\n    content.vb: Public Sub New(input As Stream, encoding As Encoding)\n    parameters:\n    - id: input\n      type: System.IO.Stream\n      description: \"\\n<p>The input stream. </p>\\n\"\n    - id: encoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The character encoding to use. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The stream does not support reading, is <strong>null</strong>, or is already closed. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>encoding</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BinaryReader.BinaryReader(Stream, Encoding)\n- uid: System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  commentId: M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)'\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: BinaryReader(Stream, Encoding, Boolean)\n  fullName: System.IO.BinaryReader.BinaryReader(System.IO.Stream, System.Text.Encoding, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 48\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.BinaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class based on the specified stream and character encoding, and optionally leaves the stream open.</p>\\n\"\n  syntax:\n    content: public BinaryReader(Stream input, Encoding encoding, bool leaveOpen)\n    content.vb: Public Sub New(input As Stream, encoding As Encoding, leaveOpen As Boolean)\n    parameters:\n    - id: input\n      type: System.IO.Stream\n      description: \"\\n<p>The input stream.</p>\\n\"\n    - id: encoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The character encoding to use.</p>\\n\"\n    - id: leaveOpen\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to leave the stream open after the <xref href=\\\"System.IO.BinaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is disposed; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The stream does not support reading, is <strong>null</strong>, or is already closed. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>encoding</em> or <em>input</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BinaryReader.BinaryReader(Stream, Encoding, Boolean)\n- uid: System.IO.BinaryReader.BaseStream\n  commentId: P:System.IO.BinaryReader.BaseStream\n  id: BaseStream\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: BaseStream\n  fullName: System.IO.BinaryReader.BaseStream\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BaseStream\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 78\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Exposes access to the underlying stream of the <xref href=\\\"System.IO.BinaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual Stream BaseStream { get; }\n    content.vb: Public Overridable ReadOnly Property BaseStream As Stream\n    parameters: []\n    return:\n      type: System.IO.Stream\n      description: \"\\n<p>The underlying stream associated with the <strong>BinaryReader</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: BinaryReader.BaseStream\n- uid: System.IO.BinaryReader.Dispose\n  commentId: M:System.IO.BinaryReader.Dispose\n  id: Dispose\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.IO.BinaryReader.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 103\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.IO.BinaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BinaryReader.Dispose()\n- uid: System.IO.BinaryReader.Dispose(System.Boolean)\n  commentId: M:System.IO.BinaryReader.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.IO.BinaryReader.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 88\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.IO.BinaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: BinaryReader.Dispose(Boolean)\n- uid: System.IO.BinaryReader.FillBuffer(System.Int32)\n  commentId: M:System.IO.BinaryReader.FillBuffer(System.Int32)\n  id: FillBuffer(System.Int32)\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: FillBuffer(Int32)\n  fullName: System.IO.BinaryReader.FillBuffer(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FillBuffer\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 537\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Fills the internal buffer with the specified number of bytes read from the stream.</p>\\n\"\n  syntax:\n    content: protected virtual void FillBuffer(int numBytes)\n    content.vb: Protected Overridable Sub FillBuffer(numBytes As Integer)\n    parameters:\n    - id: numBytes\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to be read. </p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached before <em>numBytes</em> could be read. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Requested <em>numBytes</em> is larger than the internal buffer size.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: BinaryReader.FillBuffer(Int32)\n- uid: System.IO.BinaryReader.PeekChar\n  commentId: M:System.IO.BinaryReader.PeekChar\n  id: PeekChar\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: PeekChar()\n  fullName: System.IO.BinaryReader.PeekChar()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PeekChar\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 108\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Returns the next available character and does not advance the byte or character position.</p>\\n\"\n  syntax:\n    content: public virtual int PeekChar()\n    content.vb: Public Overridable Function PeekChar As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The next available character, or -1 if no more characters are available or the stream does not support seeking.</p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The current character cannot be decoded into the internal character buffer by using the <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> selected for the stream.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.PeekChar()\n- uid: System.IO.BinaryReader.Read\n  commentId: M:System.IO.BinaryReader.Read\n  id: Read\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: Read()\n  fullName: System.IO.BinaryReader.Read()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 121\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads characters from the underlying stream and advances the current position of the stream in accordance with the <strong>Encoding</strong> used and the specific character being read from the stream.</p>\\n\"\n  syntax:\n    content: public virtual int Read()\n    content.vb: Public Overridable Function Read As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The next character from the input stream, or -1 if no characters are currently available.</p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.Read()\n- uid: System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: Read(Byte[], Int32, Int32)\n  fullName: System.IO.BinaryReader.Read(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 488\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads the specified number of bytes from the stream, starting from a specified point in the byte array. </p>\\n\"\n  syntax:\n    content: public virtual int Read(byte[] buffer, int index, int count)\n    content.vb: Public Overridable Function Read(buffer As Byte(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer to read data into. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting point in the buffer at which to begin reading into the buffer. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes read into <em>buffer</em>. This might be less than the number of bytes requested if that many bytes are not available, or it might be zero if the end of the stream is reached.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\\n<p>-or-</p>\\n<p>The number of decoded characters to read is greater than <em>count</em>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.BinaryReader.Read(System.Byte(), System.Int32, System.Int32)\n  name.vb: Read(Byte(), Int32, Int32)\n  nameWithType: BinaryReader.Read(Byte[], Int32, Int32)\n  nameWithType.vb: BinaryReader.Read(Byte(), Int32, Int32)\n- uid: System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)\n  id: Read(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: Read(Char[], Int32, Int32)\n  fullName: System.IO.BinaryReader.Read(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 296\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads the specified number of characters from the stream, starting from a specified point in the character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual int Read(char[] buffer, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function Read(buffer As Char(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>The buffer to read data into. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The starting point in the buffer at which to begin reading into the buffer. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The total number of characters read into the buffer. This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\\n<p>-or-</p>\\n<p>The number of decoded characters to read is greater than <em>count</em>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.IO.BinaryReader.Read(System.Char(), System.Int32, System.Int32)\n  name.vb: Read(Char(), Int32, Int32)\n  nameWithType: BinaryReader.Read(Char[], Int32, Int32)\n  nameWithType.vb: BinaryReader.Read(Char(), Int32, Int32)\n- uid: System.IO.BinaryReader.Read7BitEncodedInt\n  commentId: M:System.IO.BinaryReader.Read7BitEncodedInt\n  id: Read7BitEncodedInt\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: Read7BitEncodedInt()\n  fullName: System.IO.BinaryReader.Read7BitEncodedInt()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read7BitEncodedInt\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 566\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads in a 32-bit integer in compressed format.</p>\\n\"\n  syntax:\n    content: protected int Read7BitEncodedInt()\n    content.vb: Protected Function Read7BitEncodedInt As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit integer in compressed format.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The stream is corrupted.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: BinaryReader.Read7BitEncodedInt()\n- uid: System.IO.BinaryReader.ReadBoolean\n  commentId: M:System.IO.BinaryReader.ReadBoolean\n  id: ReadBoolean\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadBoolean()\n  fullName: System.IO.BinaryReader.ReadBoolean()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadBoolean\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 130\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a <strong>Boolean</strong> value from the current stream and advances the current position of the stream by one byte.</p>\\n\"\n  syntax:\n    content: public virtual bool ReadBoolean()\n    content.vb: Public Overridable Function ReadBoolean As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the byte is nonzero; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadBoolean()\n- uid: System.IO.BinaryReader.ReadByte\n  commentId: M:System.IO.BinaryReader.ReadByte\n  id: ReadByte\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadByte()\n  fullName: System.IO.BinaryReader.ReadByte()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadByte\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 135\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads the next byte from the current stream and advances the current position of the stream by one byte.</p>\\n\"\n  syntax:\n    content: public virtual byte ReadByte()\n    content.vb: Public Overridable Function ReadByte As Byte\n    return:\n      type: System.Byte\n      description: \"\\n<p>The next byte read from the current stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadByte()\n- uid: System.IO.BinaryReader.ReadBytes(System.Int32)\n  commentId: M:System.IO.BinaryReader.ReadBytes(System.Int32)\n  id: ReadBytes(System.Int32)\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadBytes(Int32)\n  fullName: System.IO.BinaryReader.ReadBytes(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadBytes\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 505\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads the specified number of bytes from the current stream into a byte array and advances the current position by that number of bytes.</p>\\n\"\n  syntax:\n    content: public virtual byte[] ReadBytes(int count)\n    content.vb: Public Overridable Function ReadBytes(count As Integer) As Byte()\n    parameters:\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to read. This value must be 0 or a non-negative number or an exception will occur.</p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing data read from the underlying stream. This might be less than the number of bytes requested if the end of the stream is reached.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of decoded characters to read is greater than <em>count</em>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is negative. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadBytes(Int32)\n- uid: System.IO.BinaryReader.ReadChar\n  commentId: M:System.IO.BinaryReader.ReadChar\n  id: ReadChar\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadChar()\n  fullName: System.IO.BinaryReader.ReadChar()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadChar\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 151\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads the next character from the current stream and advances the current position of the stream in accordance with the <strong>Encoding</strong> used and the specific character being read from the stream.</p>\\n\"\n  syntax:\n    content: public virtual char ReadChar()\n    content.vb: Public Overridable Function ReadChar As Char\n    return:\n      type: System.Char\n      description: \"\\n<p>A character read from the current stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A surrogate character was read. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadChar()\n- uid: System.IO.BinaryReader.ReadChars(System.Int32)\n  commentId: M:System.IO.BinaryReader.ReadChars(System.Int32)\n  id: ReadChars(System.Int32)\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadChars(Int32)\n  fullName: System.IO.BinaryReader.ReadChars(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadChars\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 460\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads the specified number of characters from the current stream, returns the data in a character array, and advances the current position in accordance with the <strong>Encoding</strong> used and the specific character being read from the stream.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual char[] ReadChars(int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function ReadChars(count As Integer) As Char()\n    parameters:\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to read. </p>\\n\"\n    return:\n      type: System.Char[]\n      description: \"\\n<p>A character array containing data read from the underlying stream. This might be less than the number of characters requested if the end of the stream is reached.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of decoded characters to read is greater than <em>count</em>. This can happen if a Unicode decoder returns fallback characters or a surrogate pair.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is negative. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadChars(Int32)\n- uid: System.IO.BinaryReader.ReadDecimal\n  commentId: M:System.IO.BinaryReader.ReadDecimal\n  id: ReadDecimal\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadDecimal()\n  fullName: System.IO.BinaryReader.ReadDecimal()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadDecimal\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 230\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.</p>\\n\"\n  syntax:\n    content: public virtual decimal ReadDecimal()\n    content.vb: Public Overridable Function ReadDecimal As Decimal\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal value read from the current stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadDecimal()\n- uid: System.IO.BinaryReader.ReadDouble\n  commentId: M:System.IO.BinaryReader.ReadDouble\n  id: ReadDouble\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadDouble()\n  fullName: System.IO.BinaryReader.ReadDouble()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadDouble\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 218\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual double ReadDouble()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function ReadDouble As Double\n    return:\n      type: System.Double\n      description: \"\\n<p>An 8-byte floating point value read from the current stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadDouble()\n- uid: System.IO.BinaryReader.ReadInt16\n  commentId: M:System.IO.BinaryReader.ReadInt16\n  id: ReadInt16\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadInt16()\n  fullName: System.IO.BinaryReader.ReadInt16()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadInt16\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 159\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.</p>\\n\"\n  syntax:\n    content: public virtual short ReadInt16()\n    content.vb: Public Overridable Function ReadInt16 As Short\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 2-byte signed integer read from the current stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadInt16()\n- uid: System.IO.BinaryReader.ReadInt32\n  commentId: M:System.IO.BinaryReader.ReadInt32\n  id: ReadInt32\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadInt32()\n  fullName: System.IO.BinaryReader.ReadInt32()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadInt32\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 170\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.</p>\\n\"\n  syntax:\n    content: public virtual int ReadInt32()\n    content.vb: Public Overridable Function ReadInt32 As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 4-byte signed integer read from the current stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadInt32()\n- uid: System.IO.BinaryReader.ReadInt64\n  commentId: M:System.IO.BinaryReader.ReadInt64\n  id: ReadInt64\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadInt64()\n  fullName: System.IO.BinaryReader.ReadInt64()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadInt64\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 192\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.</p>\\n\"\n  syntax:\n    content: public virtual long ReadInt64()\n    content.vb: Public Overridable Function ReadInt64 As Long\n    return:\n      type: System.Int64\n      description: \"\\n<p>An 8-byte signed integer read from the current stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadInt64()\n- uid: System.IO.BinaryReader.ReadSByte\n  commentId: M:System.IO.BinaryReader.ReadSByte\n  id: ReadSByte\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadSByte()\n  fullName: System.IO.BinaryReader.ReadSByte()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadSByte\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 145\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a signed byte from this stream and advances the current position of the stream by one byte.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public virtual sbyte ReadSByte()\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Overridable Function ReadSByte As SByte\n    return:\n      type: System.SByte\n      description: \"\\n<p>A signed byte read from the current stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadSByte()\n- uid: System.IO.BinaryReader.ReadSingle\n  commentId: M:System.IO.BinaryReader.ReadSingle\n  id: ReadSingle\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadSingle()\n  fullName: System.IO.BinaryReader.ReadSingle()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadSingle\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 211\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual float ReadSingle()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Function ReadSingle As Single\n    return:\n      type: System.Single\n      description: \"\\n<p>A 4-byte floating point value read from the current stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadSingle()\n- uid: System.IO.BinaryReader.ReadString\n  commentId: M:System.IO.BinaryReader.ReadString\n  id: ReadString\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadString()\n  fullName: System.IO.BinaryReader.ReadString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadString\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 241\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.</p>\\n\"\n  syntax:\n    content: public virtual string ReadString()\n    content.vb: Public Overridable Function ReadString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string being read.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadString()\n- uid: System.IO.BinaryReader.ReadUInt16\n  commentId: M:System.IO.BinaryReader.ReadUInt16\n  id: ReadUInt16\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadUInt16()\n  fullName: System.IO.BinaryReader.ReadUInt16()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadUInt16\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 164\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public virtual ushort ReadUInt16()\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Overridable Function ReadUInt16 As UShort\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 2-byte unsigned integer read from this stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadUInt16()\n- uid: System.IO.BinaryReader.ReadUInt32\n  commentId: M:System.IO.BinaryReader.ReadUInt32\n  id: ReadUInt32\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadUInt32()\n  fullName: System.IO.BinaryReader.ReadUInt32()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadUInt32\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 186\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public virtual uint ReadUInt32()\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Overridable Function ReadUInt32 As UInteger\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 4-byte unsigned integer read from this stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadUInt32()\n- uid: System.IO.BinaryReader.ReadUInt64\n  commentId: M:System.IO.BinaryReader.ReadUInt64\n  id: ReadUInt64\n  parent: System.IO.BinaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadUInt64()\n  fullName: System.IO.BinaryReader.ReadUInt64()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/BinaryReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadUInt64\n    path: src/mscorlib/src/System/IO/BinaryReader.cs\n    startLine: 201\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public virtual ulong ReadUInt64()\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Overridable Function ReadUInt64 As ULong\n    return:\n      type: System.UInt64\n      description: \"\\n<p>An 8-byte unsigned integer read from this stream.</p>\\n\"\n  exceptions:\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: \"\\n<p>The end of the stream is reached. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream is closed. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: BinaryReader.ReadUInt64()\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  nameWithType: Stream\n  commentId: T:System.IO.Stream\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  nameWithType: Encoding\n  commentId: T:System.Text.Encoding\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.IO.EndOfStreamException\n  isExternal: false\n  name: EndOfStreamException\n  fullName: System.IO.EndOfStreamException\n  nameWithType: EndOfStreamException\n  commentId: T:System.IO.EndOfStreamException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}