{"nodes":[{"pos":[6001,6009],"content":"Parallel","needQuote":true,"nodes":[{"content":"Parallel","pos":[0,8]}]},{"pos":[7628,7679],"content":"For(Int32, Int32, Action<Int32, ParallelLoopState>)","needQuote":true,"nodes":[{"content":"For(Int32, Int32, Action&lt;Int32, ParallelLoopState&gt;)","pos":[0,51],"source":"For(Int32, Int32, Action<Int32, ParallelLoopState>)"}]},{"content":"\\n&lt;p&gt;The start index, inclusive.&lt;/p&gt;\\n","pos":[8758,8796],"source":"\\n<p>The start index, inclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The end index, exclusive.&lt;/p&gt;\\n","pos":[8865,8901],"source":"\\n<p>The end index, exclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[9019,9078],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;A  structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[9166,9258],"source":"\\n<p>A  structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9377,9440],"source":"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[9539,9630],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[10557,10589],"content":"For(Int32, Int32, Action<Int32>)","needQuote":true,"nodes":[{"content":"For(Int32, Int32, Action&lt;Int32&gt;)","pos":[0,32],"source":"For(Int32, Int32, Action<Int32>)"}]},{"content":"\\n&lt;p&gt;The start index, inclusive.&lt;/p&gt;\\n","pos":[11529,11567],"source":"\\n<p>The start index, inclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The end index, exclusive.&lt;/p&gt;\\n","pos":[11636,11672],"source":"\\n<p>The end index, exclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[11749,11808],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[11896,11987],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12106,12169],"source":"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[12268,12359],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[13307,13375],"content":"For(Int32, Int32, ParallelOptions, Action<Int32, ParallelLoopState>)","needQuote":true,"nodes":[{"content":"For(Int32, Int32, ParallelOptions, Action&lt;Int32, ParallelLoopState&gt;)","pos":[0,68],"source":"For(Int32, Int32, ParallelOptions, Action<Int32, ParallelLoopState>)"}]},{"content":"\\n&lt;p&gt;The start index, inclusive.&lt;/p&gt;\\n","pos":[14596,14634],"source":"\\n<p>The start index, inclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The end index, exclusive.&lt;/p&gt;\\n","pos":[14703,14739],"source":"\\n<p>The end index, exclusive.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[14838,14906],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[15024,15083],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[15171,15262],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15659,15807],"source":"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[15906,15997],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[17402,17451],"content":"For(Int32, Int32, ParallelOptions, Action<Int32>)","needQuote":true,"nodes":[{"content":"For(Int32, Int32, ParallelOptions, Action&lt;Int32&gt;)","pos":[0,49],"source":"For(Int32, Int32, ParallelOptions, Action<Int32>)"}]},{"content":"\\n&lt;p&gt;The start index, inclusive.&lt;/p&gt;\\n","pos":[18535,18573],"source":"\\n<p>The start index, inclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The end index, exclusive.&lt;/p&gt;\\n","pos":[18642,18678],"source":"\\n<p>The end index, exclusive.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[18777,18845],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[18922,18981],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;A  structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[19069,19161],"source":"\\n<p>A  structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19558,19706],"source":"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[19805,19896],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[21208,21259],"content":"For(Int64, Int64, Action<Int64, ParallelLoopState>)","needQuote":true,"nodes":[{"content":"For(Int64, Int64, Action&lt;Int64, ParallelLoopState&gt;)","pos":[0,51],"source":"For(Int64, Int64, Action<Int64, ParallelLoopState>)"}]},{"content":"\\n&lt;p&gt;The start index, inclusive.&lt;/p&gt;\\n","pos":[22352,22390],"source":"\\n<p>The start index, inclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The end index, exclusive.&lt;/p&gt;\\n","pos":[22459,22495],"source":"\\n<p>The end index, exclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[22613,22672],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23068,23131],"source":"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[23230,23321],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[24128,24160],"content":"For(Int64, Int64, Action<Int64>)","needQuote":true,"nodes":[{"content":"For(Int64, Int64, Action&lt;Int64&gt;)","pos":[0,32],"source":"For(Int64, Int64, Action<Int64>)"}]},{"content":"\\n&lt;p&gt;The start index, inclusive.&lt;/p&gt;\\n","pos":[25114,25152],"source":"\\n<p>The start index, inclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The end index, exclusive.&lt;/p&gt;\\n","pos":[25221,25257],"source":"\\n<p>The end index, exclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[25334,25393],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[25481,25572],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25691,25754],"source":"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[25853,25944],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[26892,26960],"content":"For(Int64, Int64, ParallelOptions, Action<Int64, ParallelLoopState>)","needQuote":true,"nodes":[{"content":"For(Int64, Int64, ParallelOptions, Action&lt;Int64, ParallelLoopState&gt;)","pos":[0,68],"source":"For(Int64, Int64, ParallelOptions, Action<Int64, ParallelLoopState>)"}]},{"content":"\\n&lt;p&gt;The start index, inclusive.&lt;/p&gt;\\n","pos":[28196,28234],"source":"\\n<p>The start index, inclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The end index, exclusive.&lt;/p&gt;\\n","pos":[28303,28339],"source":"\\n<p>The end index, exclusive.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[28438,28506],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[28624,28683],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[28771,28862],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29259,29407],"source":"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[29506,29597],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[31002,31051],"content":"For(Int64, Int64, ParallelOptions, Action<Int64>)","needQuote":true,"nodes":[{"content":"For(Int64, Int64, ParallelOptions, Action&lt;Int64&gt;)","pos":[0,49],"source":"For(Int64, Int64, ParallelOptions, Action<Int64>)"}]},{"content":"\\n&lt;p&gt;The start index, inclusive.&lt;/p&gt;\\n","pos":[32150,32188],"source":"\\n<p>The start index, inclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The end index, exclusive.&lt;/p&gt;\\n","pos":[32257,32293],"source":"\\n<p>The end index, exclusive.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[32392,32460],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[32537,32596],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[32684,32775],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[33172,33320],"source":"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[33419,33510],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[34957,35060],"content":"For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)","needQuote":true,"nodes":[{"content":"For&lt;TLocal&gt;(Int32, Int32, Func&lt;TLocal&gt;, Func&lt;Int32, ParallelLoopState, TLocal, TLocal&gt;, Action&lt;TLocal&gt;)","pos":[0,103],"source":"For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)"}]},{"content":"\\n&lt;p&gt;The start index, inclusive.&lt;/p&gt;\\n","pos":[36394,36432],"source":"\\n<p>The start index, inclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The end index, exclusive.&lt;/p&gt;\\n","pos":[36501,36537],"source":"\\n<p>The end index, exclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that returns the initial state of the local data for each task.&lt;/p&gt;\\n","pos":[36613,36709],"source":"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[36843,36902],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that performs a final action on the local state of each task.&lt;/p&gt;\\n","pos":[36983,37068],"source":"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the thread-local data.&lt;/p&gt;\\n","pos":[37127,37172],"source":"\\n<p>The type of the thread-local data.</p>\\n"},{"content":"\\n&lt;p&gt;A  structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[37260,37352],"source":"\\n<p>A  structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localInit&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localFinally&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[37471,37695],"source":"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[37794,37885],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[39316,39436],"content":"For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)","needQuote":true,"nodes":[{"content":"For&lt;TLocal&gt;(Int32, Int32, ParallelOptions, Func&lt;TLocal&gt;, Func&lt;Int32, ParallelLoopState, TLocal, TLocal&gt;, Action&lt;TLocal&gt;)","pos":[0,120],"source":"For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)"}]},{"content":"\\n&lt;p&gt;The start index, inclusive.&lt;/p&gt;\\n","pos":[40912,40950],"source":"\\n<p>The start index, inclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The end index, exclusive.&lt;/p&gt;\\n","pos":[41019,41055],"source":"\\n<p>The end index, exclusive.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[41154,41222],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that returns the initial state of the local data for each task.&lt;/p&gt;\\n","pos":[41298,41394],"source":"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[41528,41587],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that performs a final action on the local state of each task.&lt;/p&gt;\\n","pos":[41668,41753],"source":"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the thread-local data.&lt;/p&gt;\\n","pos":[41812,41857],"source":"\\n<p>The type of the thread-local data.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[41945,42036],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localInit&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localFinally&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42155,42464],"source":"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[43231,43322],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[44727,44830],"content":"For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)","needQuote":true,"nodes":[{"content":"For&lt;TLocal&gt;(Int64, Int64, Func&lt;TLocal&gt;, Func&lt;Int64, ParallelLoopState, TLocal, TLocal&gt;, Action&lt;TLocal&gt;)","pos":[0,103],"source":"For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)"}]},{"content":"\\n&lt;p&gt;The start index, inclusive.&lt;/p&gt;\\n","pos":[46178,46216],"source":"\\n<p>The start index, inclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The end index, exclusive.&lt;/p&gt;\\n","pos":[46285,46321],"source":"\\n<p>The end index, exclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that returns the initial state of the local data for each task.&lt;/p&gt;\\n","pos":[46397,46493],"source":"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[46627,46686],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that performs a final action on the local state of each task.&lt;/p&gt;\\n","pos":[46767,46852],"source":"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the thread-local data.&lt;/p&gt;\\n","pos":[46911,46956],"source":"\\n<p>The type of the thread-local data.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[47044,47135],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localInit&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localFinally&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[47254,47478],"source":"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[47577,47668],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[49099,49219],"content":"For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)","needQuote":true,"nodes":[{"content":"For&lt;TLocal&gt;(Int64, Int64, ParallelOptions, Func&lt;TLocal&gt;, Func&lt;Int64, ParallelLoopState, TLocal, TLocal&gt;, Action&lt;TLocal&gt;)","pos":[0,120],"source":"For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)"}]},{"content":"\\n&lt;p&gt;The start index, inclusive.&lt;/p&gt;\\n","pos":[50707,50745],"source":"\\n<p>The start index, inclusive.</p>\\n"},{"content":"\\n&lt;p&gt;The end index, exclusive.&lt;/p&gt;\\n","pos":[50814,50850],"source":"\\n<p>The end index, exclusive.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[50949,51017],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that returns the initial state of the local data for each thread.&lt;/p&gt;\\n","pos":[51093,51191],"source":"\\n<p>The function delegate that returns the initial state of the local data for each thread.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[51325,51384],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that performs a final action on the local state of each thread.&lt;/p&gt;\\n","pos":[51465,51552],"source":"\\n<p>The delegate that performs a final action on the local state of each thread.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the thread-local data.&lt;/p&gt;\\n","pos":[51611,51656],"source":"\\n<p>The type of the thread-local data.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[51744,51835],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localInit&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localFinally&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51954,52263],"source":"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[53030,53121],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[54514,54604],"content":"ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource, ParallelLoopState, Int64>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource&gt;(OrderablePartitioner&lt;TSource&gt;, Action&lt;TSource, ParallelLoopState, Int64&gt;)","pos":[0,90],"source":"ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource, ParallelLoopState, Int64>)"}]},{"content":"\\n&lt;p&gt;The orderable partitioner that contains the original data source.&lt;/p&gt;\\n","pos":[55958,56034],"source":"\\n<p>The orderable partitioner that contains the original data source.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[56162,56221],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[56281,56336],"source":"\\n<p>The type of the elements in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[56424,56515],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[56634,56773],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[58805,58912],"content":"ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource&gt;(OrderablePartitioner&lt;TSource&gt;, ParallelOptions, Action&lt;TSource, ParallelLoopState, Int64&gt;)","pos":[0,107],"source":"ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)"}]},{"content":"\\n&lt;p&gt;The orderable partitioner that contains the original data source.&lt;/p&gt;\\n","pos":[60408,60484],"source":"\\n<p>The orderable partitioner that contains the original data source.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[60583,60651],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[60779,60838],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[60898,60953],"source":"\\n<p>The type of the elements in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[61041,61132],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is  &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[61528,61753],"source":"\\n<p>The <em>source</em> argument is  <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[64135,64209],"content":"ForEach<TSource>(Partitioner<TSource>, Action<TSource, ParallelLoopState>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource&gt;(Partitioner&lt;TSource&gt;, Action&lt;TSource, ParallelLoopState&gt;)","pos":[0,74],"source":"ForEach<TSource>(Partitioner<TSource>, Action<TSource, ParallelLoopState>)"}]},{"content":"\\n&lt;p&gt;The partitioner that contains the original data source.&lt;/p&gt;\\n","pos":[65491,65557],"source":"\\n<p>The partitioner that contains the original data source.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[65672,65731],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[65791,65846],"source":"\\n<p>The type of the elements in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[65934,66025],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[66144,66283],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[67944,67999],"content":"ForEach<TSource>(Partitioner<TSource>, Action<TSource>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource&gt;(Partitioner&lt;TSource&gt;, Action&lt;TSource&gt;)","pos":[0,55],"source":"ForEach<TSource>(Partitioner<TSource>, Action<TSource>)"}]},{"content":"\\n&lt;p&gt;The partitioner that contains the original data source.&lt;/p&gt;\\n","pos":[69141,69207],"source":"\\n<p>The partitioner that contains the original data source.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[69281,69340],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[69400,69455],"source":"\\n<p>The type of the elements in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[69543,69634],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is  &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[69753,69893],"source":"\\n<p>The <em>source</em> argument is  <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[71731,71822],"content":"ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource&gt;(Partitioner&lt;TSource&gt;, ParallelOptions, Action&lt;TSource, ParallelLoopState&gt;)","pos":[0,91],"source":"ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)"}]},{"content":"\\n&lt;p&gt;The partitioner that contains the original data source.&lt;/p&gt;\\n","pos":[73245,73311],"source":"\\n<p>The partitioner that contains the original data source.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[73410,73478],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[73593,73652],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[73712,73767],"source":"\\n<p>The type of the elements in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A  structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[73855,73947],"source":"\\n<p>A  structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[74734,74958],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[76614,76686],"content":"ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource&gt;(Partitioner&lt;TSource&gt;, ParallelOptions, Action&lt;TSource&gt;)","pos":[0,72],"source":"ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)"}]},{"content":"\\n&lt;p&gt;The partitioner that contains the original data source.&lt;/p&gt;\\n","pos":[77972,78038],"source":"\\n<p>The partitioner that contains the original data source.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[78137,78205],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[78279,78338],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[78398,78453],"source":"\\n<p>The type of the elements in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[78541,78632],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[79419,79643],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[81236,81317],"content":"ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState, Int64>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Action&lt;TSource, ParallelLoopState, Int64&gt;)","pos":[0,81],"source":"ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState, Int64>)"}]},{"content":"\\n&lt;p&gt;An enumerable data source.&lt;/p&gt;\\n","pos":[82629,82666],"source":"\\n<p>An enumerable data source.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[82794,82853],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the data in the source.&lt;/p&gt;\\n","pos":[82913,82959],"source":"\\n<p>The type of the data in the source.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[83047,83138],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[83257,83396],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[83495,83586],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[84715,84789],"content":"ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Action&lt;TSource, ParallelLoopState&gt;)","pos":[0,74],"source":"ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState>)"}]},{"content":"\\n&lt;p&gt;An enumerable data source.&lt;/p&gt;\\n","pos":[86055,86092],"source":"\\n<p>An enumerable data source.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[86207,86266],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the data in the source.&lt;/p&gt;\\n","pos":[86326,86372],"source":"\\n<p>The type of the data in the source.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[86460,86551],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[86670,86809],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[86908,86999],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[87970,88025],"content":"ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Action&lt;TSource&gt;)","pos":[0,55],"source":"ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)"}]},{"content":"\\n&lt;p&gt;An enumerable data source.&lt;/p&gt;\\n","pos":[89151,89188],"source":"\\n<p>An enumerable data source.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[89262,89321],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the data in the source.&lt;/p&gt;\\n","pos":[89381,89427],"source":"\\n<p>The type of the data in the source.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[89515,89606],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[89725,89864],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[89963,90054],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[91205,91303],"content":"ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, ParallelOptions, Action&lt;TSource, ParallelLoopState, Int64&gt;)","pos":[0,98],"source":"ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)"}]},{"content":"\\n&lt;p&gt;An enumerable data source.&lt;/p&gt;\\n","pos":[92756,92793],"source":"\\n<p>An enumerable data source.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[92892,92960],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[93088,93147],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the data in the source.&lt;/p&gt;\\n","pos":[93207,93253],"source":"\\n<p>The type of the data in the source.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[93341,93432],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[93828,94052],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[94151,94242],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[95969,96060],"content":"ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, ParallelOptions, Action&lt;TSource, ParallelLoopState&gt;)","pos":[0,91],"source":"ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)"}]},{"content":"\\n&lt;p&gt;An enumerable data source.&lt;/p&gt;\\n","pos":[97467,97504],"source":"\\n<p>An enumerable data source.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[97603,97671],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[97786,97845],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the data in the source.&lt;/p&gt;\\n","pos":[97905,97951],"source":"\\n<p>The type of the data in the source.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[98039,98130],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[98526,98750],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[98849,98940],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[100509,100581],"content":"ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, ParallelOptions, Action&lt;TSource&gt;)","pos":[0,72],"source":"ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)"}]},{"content":"\\n&lt;p&gt;An enumerable data source.&lt;/p&gt;\\n","pos":[101851,101888],"source":"\\n<p>An enumerable data source.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[101987,102055],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[102129,102188],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the data in the source.&lt;/p&gt;\\n","pos":[102248,102294],"source":"\\n<p>The type of the data in the source.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[102382,102473],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[102869,103093],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[103192,103283],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[104960,105102],"content":"ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource, TLocal&gt;(OrderablePartitioner&lt;TSource&gt;, Func&lt;TLocal&gt;, Func&lt;TSource, ParallelLoopState, Int64, TLocal, TLocal&gt;, Action&lt;TLocal&gt;)","pos":[0,142],"source":"ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)"}]},{"content":"\\n&lt;p&gt;The orderable partitioner that contains the original data source.&lt;/p&gt;\\n","pos":[106740,106816],"source":"\\n<p>The orderable partitioner that contains the original data source.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that returns the initial state of the local data for each task.&lt;/p&gt;\\n","pos":[106892,106988],"source":"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[107132,107191],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that performs a final action on the local state of each task.&lt;/p&gt;\\n","pos":[107272,107357],"source":"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[107417,107472],"source":"\\n<p>The type of the elements in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the thread-local data.&lt;/p&gt;\\n","pos":[107511,107556],"source":"\\n<p>The type of the thread-local data.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[107644,107735],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localInit&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localFinally&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[107854,108154],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[108735,108826],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[110552,110711],"content":"ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource, TLocal&gt;(OrderablePartitioner&lt;TSource&gt;, ParallelOptions, Func&lt;TLocal&gt;, Func&lt;TSource, ParallelLoopState, Int64, TLocal, TLocal&gt;, Action&lt;TLocal&gt;)","pos":[0,159],"source":"ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)"}]},{"content":"\\n&lt;p&gt;The orderable partitioner that contains the original data source.&lt;/p&gt;\\n","pos":[112484,112560],"source":"\\n<p>The orderable partitioner that contains the original data source.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[112659,112727],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that returns the initial state of the local data for each task.&lt;/p&gt;\\n","pos":[112803,112899],"source":"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[113043,113102],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that performs a final action on the local state of each task.&lt;/p&gt;\\n","pos":[113183,113268],"source":"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[113328,113383],"source":"\\n<p>The type of the elements in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the thread-local data.&lt;/p&gt;\\n","pos":[113422,113467],"source":"\\n<p>The type of the thread-local data.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[113555,113646],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localInit&lt;/em&gt; or &lt;em&gt;localFinally&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[113765,114093],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> or <em>localFinally</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[114675,114766],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[117068,117194],"content":"ForEach<TSource, TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource, TLocal&gt;(Partitioner&lt;TSource&gt;, Func&lt;TLocal&gt;, Func&lt;TSource, ParallelLoopState, TLocal, TLocal&gt;, Action&lt;TLocal&gt;)","pos":[0,126],"source":"ForEach<TSource, TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)"}]},{"content":"\\n&lt;p&gt;The partitioner that contains the original data source.&lt;/p&gt;\\n","pos":[118726,118792],"source":"\\n<p>The partitioner that contains the original data source.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that returns the initial state of the local data for each task.&lt;/p&gt;\\n","pos":[118868,118964],"source":"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[119095,119154],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that performs a final action on the local state of each task.&lt;/p&gt;\\n","pos":[119235,119320],"source":"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[119380,119435],"source":"\\n<p>The type of the elements in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the thread-local data.&lt;/p&gt;\\n","pos":[119474,119519],"source":"\\n<p>The type of the thread-local data.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[119607,119698],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localInit&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localFinally&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[119817,120117],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[120698,120789],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[122378,122521],"content":"ForEach<TSource, TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource, TLocal&gt;(Partitioner&lt;TSource&gt;, ParallelOptions, Func&lt;TLocal&gt;, Func&lt;TSource, ParallelLoopState, TLocal, TLocal&gt;, Action&lt;TLocal&gt;)","pos":[0,143],"source":"ForEach<TSource, TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)"}]},{"content":"\\n&lt;p&gt;The partitioner that contains the original data source.&lt;/p&gt;\\n","pos":[124196,124262],"source":"\\n<p>The partitioner that contains the original data source.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[124361,124429],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that returns the initial state of the local data for each task.&lt;/p&gt;\\n","pos":[124505,124601],"source":"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[124732,124791],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that performs a final action on the local state of each task.&lt;/p&gt;\\n","pos":[124872,124957],"source":"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[125017,125072],"source":"\\n<p>The type of the elements in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the thread-local data.&lt;/p&gt;\\n","pos":[125111,125156],"source":"\\n<p>The type of the thread-local data.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[125244,125335],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localInit&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localFinally&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[125454,125839],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[126420,126511],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[128733,128859],"content":"ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource, TLocal&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TLocal&gt;, Func&lt;TSource, ParallelLoopState, TLocal, TLocal&gt;, Action&lt;TLocal&gt;)","pos":[0,126],"source":"ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)"}]},{"content":"\\n&lt;p&gt;An enumerable data source.&lt;/p&gt;\\n","pos":[130376,130413],"source":"\\n<p>An enumerable data source.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that returns the initial state of the local data for each task.&lt;/p&gt;\\n","pos":[130489,130585],"source":"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[130716,130775],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that performs a final action on the local state of each task.&lt;/p&gt;\\n","pos":[130856,130941],"source":"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the data in the source.&lt;/p&gt;\\n","pos":[131001,131047],"source":"\\n<p>The type of the data in the source.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the thread-local data.&lt;/p&gt;\\n","pos":[131086,131131],"source":"\\n<p>The type of the thread-local data.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[131219,131310],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localInit&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localFinally&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[131429,131729],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[131828,131919],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[133418,133551],"content":"ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource, TLocal&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TLocal&gt;, Func&lt;TSource, ParallelLoopState, Int64, TLocal, TLocal&gt;, Action&lt;TLocal&gt;)","pos":[0,133],"source":"ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)"}]},{"content":"\\n&lt;p&gt;An enumerable data source.&lt;/p&gt;\\n","pos":[135093,135130],"source":"\\n<p>An enumerable data source.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that returns the initial state of the local data for each task.&lt;/p&gt;\\n","pos":[135206,135302],"source":"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[135446,135505],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that performs a final action on the local state of each task.&lt;/p&gt;\\n","pos":[135586,135671],"source":"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the data in the source.&lt;/p&gt;\\n","pos":[135731,135777],"source":"\\n<p>The type of the data in the source.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the thread-local data.&lt;/p&gt;\\n","pos":[135816,135861],"source":"\\n<p>The type of the thread-local data.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[135949,136040],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localInit&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localFinally&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[136159,136459],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[136558,136649],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[138261,138404],"content":"ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource, TLocal&gt;(IEnumerable&lt;TSource&gt;, ParallelOptions, Func&lt;TLocal&gt;, Func&lt;TSource, ParallelLoopState, TLocal, TLocal&gt;, Action&lt;TLocal&gt;)","pos":[0,143],"source":"ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)"}]},{"content":"\\n&lt;p&gt;An enumerable data source.&lt;/p&gt;\\n","pos":[140063,140100],"source":"\\n<p>An enumerable data source.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[140199,140267],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that returns the initial state of the local data for each task.&lt;/p&gt;\\n","pos":[140343,140439],"source":"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[140570,140629],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that performs a final action on the local state of each task.&lt;/p&gt;\\n","pos":[140710,140795],"source":"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the data in the source.&lt;/p&gt;\\n","pos":[140855,140901],"source":"\\n<p>The type of the data in the source.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the thread-local data.&lt;/p&gt;\\n","pos":[140940,140985],"source":"\\n<p>The type of the thread-local data.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[141073,141164],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localInit&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localFinally&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[141283,141668],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[142435,142526],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[144233,144383],"content":"ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)","needQuote":true,"nodes":[{"content":"ForEach&lt;TSource, TLocal&gt;(IEnumerable&lt;TSource&gt;, ParallelOptions, Func&lt;TLocal&gt;, Func&lt;TSource, ParallelLoopState, Int64, TLocal, TLocal&gt;, Action&lt;TLocal&gt;)","pos":[0,150],"source":"ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)"}]},{"content":"\\n&lt;p&gt;An enumerable data source.&lt;/p&gt;\\n","pos":[146086,146123],"source":"\\n<p>An enumerable data source.</p>\\n"},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[146222,146290],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that returns the initial state of the local data for each task.&lt;/p&gt;\\n","pos":[146366,146462],"source":"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that is invoked once per iteration.&lt;/p&gt;\\n","pos":[146606,146665],"source":"\\n<p>The delegate that is invoked once per iteration.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that performs a final action on the local state of each task.&lt;/p&gt;\\n","pos":[146746,146831],"source":"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the data in the source.&lt;/p&gt;\\n","pos":[146891,146937],"source":"\\n<p>The type of the data in the source.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the thread-local data.&lt;/p&gt;\\n","pos":[146976,147021],"source":"\\n<p>The type of the thread-local data.</p>\\n"},{"content":"\\n&lt;p&gt;A structure that contains information about which portion of the loop completed.&lt;/p&gt;\\n","pos":[147109,147200],"source":"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;source&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;body&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localInit&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;localFinally&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[147319,147704],"source":"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that contains all the individual exceptions thrown on all threads.&lt;/p&gt;\\n","pos":[148471,148562],"source":"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n"},{"pos":[149746,149762],"content":"Invoke(Action[])","needQuote":true,"nodes":[{"content":"Invoke(Action[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;actions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[150726,150792],"source":"\\n<p>The <em>actions</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when any action in the &lt;em&gt;actions&lt;/em&gt; array throws an exception.&lt;/p&gt;\\n","pos":[150891,150997],"source":"\\n<p>The exception that is thrown when any action in the <em>actions</em> array throws an exception.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;actions&lt;/em&gt; array contains a &lt;strong&gt;null&lt;/strong&gt; element.&lt;/p&gt;\\n","pos":[151094,151173],"source":"\\n<p>The <em>actions</em> array contains a <strong>null</strong> element.</p>\\n"},{"pos":[151799,151832],"content":"Invoke(ParallelOptions, Action[])","needQuote":true,"nodes":[{"content":"Invoke(ParallelOptions, Action[])","pos":[0,33]}]},{"content":"\\n&lt;p&gt;An object that configures the behavior of this operation.&lt;/p&gt;\\n","pos":[152756,152824],"source":"\\n<p>An object that configures the behavior of this operation.</p>\\n"},{"content":"\\n&lt;p&gt;An array of actions to execute.&lt;/p&gt;\\n","pos":[152892,152934],"source":"\\n<p>An array of actions to execute.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;actions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;parallelOptions&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[153317,153468],"source":"\\n<p>The <em>actions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when any action in the &lt;em&gt;actions&lt;/em&gt; array throws an exception.&lt;/p&gt;\\n","pos":[153567,153673],"source":"\\n<p>The exception that is thrown when any action in the <em>actions</em> array throws an exception.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;actions&lt;/em&gt; array contains a &lt;strong&gt;null&lt;/strong&gt; element.&lt;/p&gt;\\n","pos":[153770,153849],"source":"\\n<p>The <em>actions</em> array contains a <strong>null</strong> element.</p>\\n"},{"pos":[154668,154690],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[154869,154875],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[155035,155045],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[155140,155148],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[155217,155218],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[155245,155246],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[155316,155324],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[155393,155394],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[155421,155422],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[155605,155619],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[155738,155744],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[155811,155812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[155862,155868],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[155928,155929],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[156012,156018],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[156085,156086],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[156136,156142],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[156202,156203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[156417,156439],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[156587,156593],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[156660,156661],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[156711,156717],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[156778,156779]},{"pos":[156834,156840],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[156900,156901],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[156998,157004],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[157071,157072],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[157122,157128],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[157189,157190]},{"pos":[157245,157251],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[157311,157312],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[157557,157588],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[157754,157769],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[157845,157846],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[157896,157902],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[157963,157964]},{"pos":[158019,158025],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[158085,158086],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[158192,158207],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[158283,158284],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[158334,158340],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[158401,158402]},{"pos":[158457,158463],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[158523,158524],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[158754,158767],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[158868,158879],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[158951,158952],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[158979,158980],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[159053,159064],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[159136,159137],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[159164,159165],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[159340,159349],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[159442,159449],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[159517,159518],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[159545,159546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[159615,159622],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[159690,159691],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[159718,159719],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[159894,159911],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[160020,160035],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[160111,160112],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[160139,160140],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[160217,160232],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[160308,160309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[160336,160337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[160482,160488],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[160618,160623],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[160830,160862],"content":"Action<Int32, ParallelLoopState>","needQuote":true,"nodes":[{"content":"Action&lt;Int32, ParallelLoopState&gt;","pos":[0,32],"source":"Action<Int32, ParallelLoopState>"}]},{"pos":[161130,161136],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[161196,161197],"content":"<","needQuote":true,"nodes":[]},{"pos":[161246,161251],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[161311,161312]},{"pos":[161394,161411],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"pos":[161545,161551],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[161612,161615]},{"pos":[161671,161676],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[161736,161737]},{"pos":[161819,161836],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"pos":[161902,161903],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[162218,162236],"content":"ParallelLoopResult","needQuote":true,"nodes":[{"content":"ParallelLoopResult","pos":[0,18]}]},{"pos":[162434,162448],"content":"Action<T1, T2>","needQuote":true,"nodes":[{"content":"Action&lt;T1, T2&gt;","pos":[0,14],"source":"Action<T1, T2>"}]},{"pos":[162602,162608],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[162647,162648],"content":"<","needQuote":true,"nodes":[]},{"pos":[162675,162677],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[162706,162707]},{"pos":[162739,162741],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"pos":[162837,162843],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[162883,162886]},{"pos":[162920,162922],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[162951,162952]},{"pos":[162984,162986],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"pos":[163014,163015],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[163221,163234],"content":"Action<Int32>","needQuote":true,"nodes":[{"content":"Action&lt;Int32&gt;","pos":[0,13],"source":"Action<Int32>"}]},{"pos":[163399,163405],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[163465,163466],"content":"<","needQuote":true,"nodes":[]},{"pos":[163515,163520],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[163647,163653],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[163714,163717]},{"pos":[163773,163778],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[163837,163838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[164015,164024],"content":"Action<T>","needQuote":true,"nodes":[{"content":"Action&lt;T&gt;","pos":[0,9],"source":"Action<T>"}]},{"pos":[164163,164169],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[164208,164209],"content":"<","needQuote":true,"nodes":[]},{"pos":[164236,164237],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[164332,164338],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[164378,164381]},{"pos":[164415,164416],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[164443,164444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[164657,164672],"content":"ParallelOptions","needQuote":true,"nodes":[{"content":"ParallelOptions","pos":[0,15]}]},{"pos":[164875,164880],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[165087,165119],"content":"Action<Int64, ParallelLoopState>","needQuote":true,"nodes":[{"content":"Action&lt;Int64, ParallelLoopState&gt;","pos":[0,32],"source":"Action<Int64, ParallelLoopState>"}]},{"pos":[165387,165393],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[165453,165454],"content":"<","needQuote":true,"nodes":[]},{"pos":[165503,165508],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[165568,165569]},{"pos":[165651,165668],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"pos":[165802,165808],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[165869,165872]},{"pos":[165928,165933],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[165993,165994]},{"pos":[166076,166093],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"pos":[166159,166160],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[166455,166468],"content":"Action<Int64>","needQuote":true,"nodes":[{"content":"Action&lt;Int64&gt;","pos":[0,13],"source":"Action<Int64>"}]},{"pos":[166633,166639],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[166699,166700],"content":"<","needQuote":true,"nodes":[]},{"pos":[166749,166754],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[166881,166887],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[166948,166951]},{"pos":[167007,167012],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[167071,167072],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[167280,167292],"content":"Func<TLocal>","needQuote":true,"nodes":[{"content":"Func&lt;TLocal&gt;","pos":[0,12],"source":"Func<TLocal>"}]},{"pos":[167438,167442],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[167500,167501],"content":"<","needQuote":true,"nodes":[]},{"pos":[167528,167534],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"pos":[167632,167636],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[167695,167698]},{"pos":[167732,167738],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"pos":[167770,167771],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[168029,168075],"content":"Func<Int32, ParallelLoopState, TLocal, TLocal>","needQuote":true,"nodes":[{"content":"Func&lt;Int32, ParallelLoopState, TLocal, TLocal&gt;","pos":[0,46],"source":"Func<Int32, ParallelLoopState, TLocal, TLocal>"}]},{"pos":[168383,168387],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[168445,168446],"content":"<","needQuote":true,"nodes":[]},{"pos":[168495,168500],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[168560,168561]},{"pos":[168643,168660],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"content":",","pos":[168727,168728]},{"pos":[168760,168766],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"content":",","pos":[168799,168800]},{"pos":[168832,168838],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"pos":[168936,168940],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[168999,169002]},{"pos":[169058,169063],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[169123,169124]},{"pos":[169206,169223],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"content":",","pos":[169290,169291]},{"pos":[169323,169329],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"content":",","pos":[169362,169363]},{"pos":[169395,169401],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"pos":[169433,169434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[169759,169773],"content":"Action<TLocal>","needQuote":true,"nodes":[{"content":"Action&lt;TLocal&gt;","pos":[0,14],"source":"Action<TLocal>"}]},{"pos":[169927,169933],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[169993,169994],"content":"<","needQuote":true,"nodes":[]},{"pos":[170021,170027],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"pos":[170127,170133],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[170194,170197]},{"pos":[170231,170237],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"pos":[170269,170270],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[170438,170451],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[170600,170604],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[170641,170642],"content":"<","needQuote":true,"nodes":[]},{"pos":[170669,170676],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[170775,170779],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[170817,170820]},{"pos":[170854,170861],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[170894,170895],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[171056,171081],"content":"Func<T1, T2, T3, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, T3, TResult&gt;","pos":[0,25],"source":"Func<T1, T2, T3, TResult>"}]},{"pos":[171266,171270],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[171307,171308],"content":"<","needQuote":true,"nodes":[]},{"pos":[171335,171337],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[171366,171367]},{"pos":[171399,171401],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[171430,171431]},{"pos":[171463,171465],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[171494,171495]},{"pos":[171527,171534],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[171633,171637],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[171675,171678]},{"pos":[171712,171714],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[171743,171744]},{"pos":[171776,171778],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[171807,171808]},{"pos":[171840,171842],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[171871,171872]},{"pos":[171904,171911],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[171944,171945],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[172226,172272],"content":"Func<Int64, ParallelLoopState, TLocal, TLocal>","needQuote":true,"nodes":[{"content":"Func&lt;Int64, ParallelLoopState, TLocal, TLocal&gt;","pos":[0,46],"source":"Func<Int64, ParallelLoopState, TLocal, TLocal>"}]},{"pos":[172580,172584],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[172642,172643],"content":"<","needQuote":true,"nodes":[]},{"pos":[172692,172697],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[172757,172758]},{"pos":[172840,172857],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"content":",","pos":[172924,172925]},{"pos":[172957,172963],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"content":",","pos":[172996,172997]},{"pos":[173029,173035],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"pos":[173133,173137],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[173196,173199]},{"pos":[173255,173260],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[173320,173321]},{"pos":[173403,173420],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"content":",","pos":[173487,173488]},{"pos":[173520,173526],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"content":",","pos":[173559,173560]},{"pos":[173592,173598],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"pos":[173630,173631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[174054,174083],"content":"OrderablePartitioner<TSource>","needQuote":true,"nodes":[{"content":"OrderablePartitioner&lt;TSource&gt;","pos":[0,29],"source":"OrderablePartitioner<TSource>"}]},{"pos":[174365,174385],"content":"OrderablePartitioner","needQuote":true,"nodes":[{"content":"OrderablePartitioner","pos":[0,20]}]},{"pos":[174461,174462],"content":"<","needQuote":true,"nodes":[]},{"pos":[174489,174496],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[174634,174654],"content":"OrderablePartitioner","needQuote":true,"nodes":[{"content":"OrderablePartitioner","pos":[0,20]}]},{"content":"(Of","pos":[174731,174734]},{"pos":[174768,174775],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[174808,174809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[175136,175177],"content":"Action<TSource, ParallelLoopState, Int64>","needQuote":true,"nodes":[{"content":"Action&lt;TSource, ParallelLoopState, Int64&gt;","pos":[0,41],"source":"Action<TSource, ParallelLoopState, Int64>"}]},{"pos":[175472,175478],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[175538,175539],"content":"<","needQuote":true,"nodes":[]},{"pos":[175566,175573],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[175607,175608]},{"pos":[175690,175707],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"content":",","pos":[175774,175775]},{"pos":[175829,175834],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[175961,175967],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[176028,176031]},{"pos":[176065,176072],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[176106,176107]},{"pos":[176189,176206],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"content":",","pos":[176273,176274]},{"pos":[176328,176333],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[176392,176393],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[176708,176737],"content":"OrderablePartitioner<TSource>","needQuote":true,"nodes":[{"content":"OrderablePartitioner&lt;TSource&gt;","pos":[0,29],"source":"OrderablePartitioner<TSource>"}]},{"pos":[177019,177039],"content":"OrderablePartitioner","needQuote":true,"nodes":[{"content":"OrderablePartitioner","pos":[0,20]}]},{"pos":[177115,177116],"content":"<","needQuote":true,"nodes":[]},{"pos":[177143,177150],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[177288,177308],"content":"OrderablePartitioner","needQuote":true,"nodes":[{"content":"OrderablePartitioner","pos":[0,20]}]},{"content":"(Of","pos":[177385,177388]},{"pos":[177422,177429],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[177462,177463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[177711,177740],"content":"System.Collections.Concurrent","needQuote":true,"nodes":[{"content":"System.Collections.Concurrent","pos":[0,29]}]},{"pos":[177925,177943],"content":"Action<T1, T2, T3>","needQuote":true,"nodes":[{"content":"Action&lt;T1, T2, T3&gt;","pos":[0,18],"source":"Action<T1, T2, T3>"}]},{"pos":[178109,178115],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[178154,178155],"content":"<","needQuote":true,"nodes":[]},{"pos":[178182,178184],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[178213,178214]},{"pos":[178246,178248],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[178277,178278]},{"pos":[178310,178312],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"pos":[178408,178414],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[178454,178457]},{"pos":[178491,178493],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[178522,178523]},{"pos":[178555,178557],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[178586,178587]},{"pos":[178619,178621],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"pos":[178649,178650],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[178940,178960],"content":"Partitioner<TSource>","needQuote":true,"nodes":[{"content":"Partitioner&lt;TSource&gt;","pos":[0,20],"source":"Partitioner<TSource>"}]},{"pos":[179206,179217],"content":"Partitioner","needQuote":true,"nodes":[{"content":"Partitioner","pos":[0,11]}]},{"pos":[179284,179285],"content":"<","needQuote":true,"nodes":[]},{"pos":[179312,179319],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[179448,179459],"content":"Partitioner","needQuote":true,"nodes":[{"content":"Partitioner","pos":[0,11]}]},{"content":"(Of","pos":[179527,179530]},{"pos":[179564,179571],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[179604,179605],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[179892,179926],"content":"Action<TSource, ParallelLoopState>","needQuote":true,"nodes":[{"content":"Action&lt;TSource, ParallelLoopState&gt;","pos":[0,34],"source":"Action<TSource, ParallelLoopState>"}]},{"pos":[180186,180192],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[180252,180253],"content":"<","needQuote":true,"nodes":[]},{"pos":[180280,180287],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[180321,180322]},{"pos":[180404,180421],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"pos":[180555,180561],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[180622,180625]},{"pos":[180659,180666],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[180700,180701]},{"pos":[180783,180800],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"pos":[180866,180867],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[181146,181166],"content":"Partitioner<TSource>","needQuote":true,"nodes":[{"content":"Partitioner&lt;TSource&gt;","pos":[0,20],"source":"Partitioner<TSource>"}]},{"pos":[181412,181423],"content":"Partitioner","needQuote":true,"nodes":[{"content":"Partitioner","pos":[0,11]}]},{"pos":[181490,181491],"content":"<","needQuote":true,"nodes":[]},{"pos":[181518,181525],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[181654,181665],"content":"Partitioner","needQuote":true,"nodes":[{"content":"Partitioner","pos":[0,11]}]},{"content":"(Of","pos":[181733,181736]},{"pos":[181770,181777],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[181810,181811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[182054,182069],"content":"Action<TSource>","needQuote":true,"nodes":[{"content":"Action&lt;TSource&gt;","pos":[0,15],"source":"Action<TSource>"}]},{"pos":[182226,182232],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[182292,182293],"content":"<","needQuote":true,"nodes":[]},{"pos":[182320,182327],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[182428,182434],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[182495,182498]},{"pos":[182532,182539],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[182572,182573],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[182851,182871],"content":"IEnumerable<TSource>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TSource&gt;","pos":[0,20],"source":"IEnumerable<TSource>"}]},{"pos":[183108,183119],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[183204,183205],"content":"<","needQuote":true,"nodes":[]},{"pos":[183232,183239],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[183365,183376],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[183462,183465]},{"pos":[183499,183506],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[183539,183540],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[183772,183786],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[184005,184016],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[184080,184081],"content":"<","needQuote":true,"nodes":[]},{"pos":[184108,184109],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[184229,184240],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[184305,184308]},{"pos":[184342,184343],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[184370,184371],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[184574,184600],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[184880,184935],"content":"Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, ParallelLoopState, Int64, TLocal, TLocal&gt;","pos":[0,55],"source":"Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>"}]},{"pos":[185270,185274],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[185332,185333],"content":"<","needQuote":true,"nodes":[]},{"pos":[185360,185367],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[185401,185402]},{"pos":[185484,185501],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"content":",","pos":[185568,185569]},{"pos":[185623,185628],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[185688,185689]},{"pos":[185721,185727],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"content":",","pos":[185760,185761]},{"pos":[185793,185799],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"pos":[185897,185901],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[185960,185963]},{"pos":[185997,186004],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[186038,186039]},{"pos":[186121,186138],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"content":",","pos":[186205,186206]},{"pos":[186260,186265],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[186325,186326]},{"pos":[186358,186364],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"content":",","pos":[186397,186398]},{"pos":[186430,186436],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"pos":[186468,186469],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[186779,186808],"content":"Func<T1, T2, T3, T4, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, T3, T4, TResult&gt;","pos":[0,29],"source":"Func<T1, T2, T3, T4, TResult>"}]},{"pos":[187005,187009],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[187046,187047],"content":"<","needQuote":true,"nodes":[]},{"pos":[187074,187076],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[187105,187106]},{"pos":[187138,187140],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[187169,187170]},{"pos":[187202,187204],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[187233,187234]},{"pos":[187266,187268],"content":"T4","needQuote":true,"nodes":[{"content":"T4","pos":[0,2]}]},{"content":",","pos":[187297,187298]},{"pos":[187330,187337],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[187436,187440],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[187478,187481]},{"pos":[187515,187517],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[187546,187547]},{"pos":[187579,187581],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[187610,187611]},{"pos":[187643,187645],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[187674,187675]},{"pos":[187707,187709],"content":"T4","needQuote":true,"nodes":[{"content":"T4","pos":[0,2]}]},{"content":",","pos":[187738,187739]},{"pos":[187771,187778],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[187811,187812],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[188098,188146],"content":"Func<TSource, ParallelLoopState, TLocal, TLocal>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, ParallelLoopState, TLocal, TLocal&gt;","pos":[0,48],"source":"Func<TSource, ParallelLoopState, TLocal, TLocal>"}]},{"pos":[188446,188450],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[188508,188509],"content":"<","needQuote":true,"nodes":[]},{"pos":[188536,188543],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[188577,188578]},{"pos":[188660,188677],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"content":",","pos":[188744,188745]},{"pos":[188777,188783],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"content":",","pos":[188816,188817]},{"pos":[188849,188855],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"pos":[188953,188957],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[189016,189019]},{"pos":[189053,189060],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[189094,189095]},{"pos":[189177,189194],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"content":",","pos":[189261,189262]},{"pos":[189294,189300],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"content":",","pos":[189333,189334]},{"pos":[189366,189372],"content":"TLocal","needQuote":true,"nodes":[{"content":"TLocal","pos":[0,6]}]},{"pos":[189404,189405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[189670,189678],"content":"Action[]","needQuote":true,"nodes":[{"content":"Action[]","pos":[0,8]}]},{"pos":[189806,189812],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"[]","pos":[189873,189875]},{"pos":[189940,189946],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[190006,190008],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[190143,190164],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[190366,190384],"content":"AggregateException","needQuote":true,"nodes":[{"content":"AggregateException","pos":[0,18]}]},{"pos":[190585,190611],"content":"OperationCanceledException","needQuote":true,"nodes":[{"content":"OperationCanceledException","pos":[0,26]}]},{"pos":[190816,190839],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[191054,191079],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[191292,191309],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Threading.Tasks.Parallel\n  commentId: T:System.Threading.Tasks.Parallel\n  id: Parallel\n  parent: System.Threading.Tasks\n  children:\n  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})\n  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})\n  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})\n  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})\n  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.Invoke(System.Action[])\n  - System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])\n  langs:\n  - csharp\n  - vb\n  name: Parallel\n  fullName: System.Threading.Tasks.Parallel\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parallel\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 144\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Provides support for parallel loops and regions.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public class Parallel\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public Class Parallel\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Parallel\n- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  id: For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: For(Int32, Int32, Action<Int32, ParallelLoopState>)\n  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: For\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 588\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int, ParallelLoopState> body)\n    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: \"\\n<p>The start index, inclusive.</p>\\n\"\n    - id: toExclusive\n      type: System.Int32\n      description: \"\\n<p>The end index, exclusive.</p>\\n\"\n    - id: body\n      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A  structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.ParallelLoopState\n    commentId: T:System.Threading.Tasks.ParallelLoopState\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState))\n  name.vb: For(Int32, Int32, Action(Of Int32, ParallelLoopState))\n  nameWithType: Parallel.For(Int32, Int32, Action<Int32, ParallelLoopState>)\n  nameWithType.vb: Parallel.For(Int32, Int32, Action(Of Int32, ParallelLoopState))\n- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})\n  id: For(System.Int32,System.Int32,System.Action{System.Int32})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: For(Int32, Int32, Action<Int32>)\n  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: For\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 421\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop in which iterations may run in parallel.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int> body)\n    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: \"\\n<p>The start index, inclusive.</p>\\n\"\n    - id: toExclusive\n      type: System.Int32\n      description: \"\\n<p>The end index, exclusive.</p>\\n\"\n    - id: body\n      type: System.Action{System.Int32}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action(Of System.Int32))\n  name.vb: For(Int32, Int32, Action(Of Int32))\n  nameWithType: Parallel.For(Int32, Int32, Action<Int32>)\n  nameWithType.vb: Parallel.For(Int32, Int32, Action(Of Int32))\n- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: For(Int32, Int32, ParallelOptions, Action<Int32, ParallelLoopState>)\n  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: For\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 659\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int, ParallelLoopState> body)\n    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: \"\\n<p>The start index, inclusive.</p>\\n\"\n    - id: toExclusive\n      type: System.Int32\n      description: \"\\n<p>The end index, exclusive.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: body\n      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState))\n  name.vb: For(Int32, Int32, ParallelOptions, Action(Of Int32, ParallelLoopState))\n  nameWithType: Parallel.For(Int32, Int32, ParallelOptions, Action<Int32, ParallelLoopState>)\n  nameWithType.vb: Parallel.For(Int32, Int32, ParallelOptions, Action(Of Int32, ParallelLoopState))\n- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})\n  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: For(Int32, Int32, ParallelOptions, Action<Int32>)\n  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: For\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 489\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int> body)\n    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, body As Action(Of Integer)) As ParallelLoopResult\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: \"\\n<p>The start index, inclusive.</p>\\n\"\n    - id: toExclusive\n      type: System.Int32\n      description: \"\\n<p>The end index, exclusive.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: body\n      type: System.Action{System.Int32}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A  structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int32))\n  name.vb: For(Int32, Int32, ParallelOptions, Action(Of Int32))\n  nameWithType: Parallel.For(Int32, Int32, ParallelOptions, Action<Int32>)\n  nameWithType.vb: Parallel.For(Int32, Int32, ParallelOptions, Action(Of Int32))\n- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  id: For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: For(Int64, Int64, Action<Int64, ParallelLoopState>)\n  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: For\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 618\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action<long, ParallelLoopState> body)\n    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: \"\\n<p>The start index, inclusive.</p>\\n\"\n    - id: toExclusive\n      type: System.Int64\n      description: \"\\n<p>The end index, exclusive.</p>\\n\"\n    - id: body\n      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.ParallelLoopResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains information on what portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState))\n  name.vb: For(Int64, Int64, Action(Of Int64, ParallelLoopState))\n  nameWithType: Parallel.For(Int64, Int64, Action<Int64, ParallelLoopState>)\n  nameWithType.vb: Parallel.For(Int64, Int64, Action(Of Int64, ParallelLoopState))\n- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})\n  id: For(System.Int64,System.Int64,System.Action{System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: For(Int64, Int64, Action<Int64>)\n  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: For\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 450\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action<long> body)\n    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: \"\\n<p>The start index, inclusive.</p>\\n\"\n    - id: toExclusive\n      type: System.Int64\n      description: \"\\n<p>The end index, exclusive.</p>\\n\"\n    - id: body\n      type: System.Action{System.Int64}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action(Of System.Int64))\n  name.vb: For(Int64, Int64, Action(Of Int64))\n  nameWithType: Parallel.For(Int64, Int64, Action<Int64>)\n  nameWithType.vb: Parallel.For(Int64, Int64, Action(Of Int64))\n- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: For(Int64, Int64, ParallelOptions, Action<Int64, ParallelLoopState>)\n  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: For\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 704\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action<long, ParallelLoopState> body)\n    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: \"\\n<p>The start index, inclusive.</p>\\n\"\n    - id: toExclusive\n      type: System.Int64\n      description: \"\\n<p>The end index, exclusive.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: body\n      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState))\n  name.vb: For(Int64, Int64, ParallelOptions, Action(Of Int64, ParallelLoopState))\n  nameWithType: Parallel.For(Int64, Int64, ParallelOptions, Action<Int64, ParallelLoopState>)\n  nameWithType.vb: Parallel.For(Int64, Int64, ParallelOptions, Action(Of Int64, ParallelLoopState))\n- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})\n  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: For(Int64, Int64, ParallelOptions, Action<Int64>)\n  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: For\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 532\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>for</strong>  (<strong>For</strong> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action<long> body)\n    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, body As Action(Of Long)) As ParallelLoopResult\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: \"\\n<p>The start index, inclusive.</p>\\n\"\n    - id: toExclusive\n      type: System.Int64\n      description: \"\\n<p>The end index, exclusive.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: body\n      type: System.Action{System.Int64}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int64))\n  name.vb: For(Int64, Int64, ParallelOptions, Action(Of Int64))\n  nameWithType: Parallel.For(Int64, Int64, ParallelOptions, Action<Int64>)\n  nameWithType.vb: Parallel.For(Int64, Int64, ParallelOptions, Action(Of Int64))\n- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  id: For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int32, System.Int32, System.Func<TLocal>, System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: For\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 759\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, Func<TLocal> localInit, Func<int, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)\n    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: \"\\n<p>The start index, inclusive.</p>\\n\"\n    - id: toExclusive\n      type: System.Int32\n      description: \"\\n<p>The end index, exclusive.</p>\\n\"\n    - id: localInit\n      type: System.Func{{TLocal}}\n      description: \"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n\"\n    - id: body\n      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    - id: localFinally\n      type: System.Action{{TLocal}}\n      description: \"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n\"\n    typeParameters:\n    - id: TLocal\n      description: \"\\n<p>The type of the thread-local data.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A  structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int32, System.Int32, System.Func(Of TLocal), System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))\n  name.vb: For(Of TLocal)(Int32, Int32, Func(Of TLocal), Func(Of Int32, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n  nameWithType: Parallel.For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  nameWithType.vb: Parallel.For(Of TLocal)(Int32, Int32, Func(Of TLocal), Func(Of Int32, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  id: For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: For\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 894\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<int, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)\n    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: \"\\n<p>The start index, inclusive.</p>\\n\"\n    - id: toExclusive\n      type: System.Int32\n      description: \"\\n<p>The end index, exclusive.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: localInit\n      type: System.Func{{TLocal}}\n      description: \"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n\"\n    - id: body\n      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    - id: localFinally\n      type: System.Action{{TLocal}}\n      description: \"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n\"\n    typeParameters:\n    - id: TLocal\n      description: \"\\n<p>The type of the thread-local data.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))\n  name.vb: For(Of TLocal)(Int32, Int32, ParallelOptions, Func(Of TLocal), Func(Of Int32, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n  nameWithType: Parallel.For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  nameWithType.vb: Parallel.For(Of TLocal)(Int32, Int32, ParallelOptions, Func(Of TLocal), Func(Of Int32, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  id: For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int64, System.Int64, System.Func<TLocal>, System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: For\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 821\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, Func<TLocal> localInit, Func<long, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)\n    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: \"\\n<p>The start index, inclusive.</p>\\n\"\n    - id: toExclusive\n      type: System.Int64\n      description: \"\\n<p>The end index, exclusive.</p>\\n\"\n    - id: localInit\n      type: System.Func{{TLocal}}\n      description: \"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n\"\n    - id: body\n      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    - id: localFinally\n      type: System.Action{{TLocal}}\n      description: \"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n\"\n    typeParameters:\n    - id: TLocal\n      description: \"\\n<p>The type of the thread-local data.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int64, System.Int64, System.Func(Of TLocal), System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))\n  name.vb: For(Of TLocal)(Int64, Int64, Func(Of TLocal), Func(Of Int64, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n  nameWithType: Parallel.For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  nameWithType.vb: Parallel.For(Of TLocal)(Int64, Int64, Func(Of TLocal), Func(Of Int64, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  id: For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: For\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 971\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>for</strong> (<strong>For</strong> in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<long, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)\n    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: \"\\n<p>The start index, inclusive.</p>\\n\"\n    - id: toExclusive\n      type: System.Int64\n      description: \"\\n<p>The end index, exclusive.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: localInit\n      type: System.Func{{TLocal}}\n      description: \"\\n<p>The function delegate that returns the initial state of the local data for each thread.</p>\\n\"\n    - id: body\n      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    - id: localFinally\n      type: System.Action{{TLocal}}\n      description: \"\\n<p>The delegate that performs a final action on the local state of each thread.</p>\\n\"\n    typeParameters:\n    - id: TLocal\n      description: \"\\n<p>The type of the thread-local data.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))\n  name.vb: For(Of TLocal)(Int64, Int64, ParallelOptions, Func(Of TLocal), Func(Of Int64, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n  nameWithType: Parallel.For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  nameWithType.vb: Parallel.For(Of TLocal)(Int64, Int64, ParallelOptions, Func(Of TLocal), Func(Of Int64, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource, ParallelLoopState, Int64>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 2533\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on a <xref href=\\\"System.Collections.Concurrent.OrderablePartitioner`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource>(OrderablePartitioner<TSource> source, Action<TSource, ParallelLoopState, long> body)\n    content.vb: Public Shared Function ForEach(Of TSource)(source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}\n      description: \"\\n<p>The orderable partitioner that contains the original data source.</p>\\n\"\n    - id: body\n      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements in <em>source</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the <em>source</em> orderable partitioner returns <strong>false</strong>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the source orderable partitioner returns <strong>false</strong>.</p>\\n<p>-or-</p>\\n<p>Any methods in the source orderable partitioner return <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))\n  name.vb: ForEach(Of TSource)(OrderablePartitioner(Of TSource), Action(Of TSource, ParallelLoopState, Int64))\n  nameWithType: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource, ParallelLoopState, Int64>)\n  nameWithType.vb: Parallel.ForEach(Of TSource)(OrderablePartitioner(Of TSource), Action(Of TSource, ParallelLoopState, Int64))\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 2941\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on a <xref href=\\\"System.Collections.Concurrent.OrderablePartitioner`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource>(OrderablePartitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState, long> body)\n    content.vb: Public Shared Function ForEach(Of TSource)(source As OrderablePartitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}\n      description: \"\\n<p>The orderable partitioner that contains the original data source.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: body\n      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements in <em>source</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is  <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the <em>source</em> orderable partitioner returns <strong>false</strong>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the <em>source</em> orderable partitioner returns <strong>false</strong>.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when any methods in the <em>source</em> orderable partitioner return <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))\n  name.vb: ForEach(Of TSource)(OrderablePartitioner(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState, Int64))\n  nameWithType: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)\n  nameWithType.vb: Parallel.ForEach(Of TSource)(OrderablePartitioner(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState, Int64))\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource, ParallelLoopState>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 2471\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on a <xref href=\\\"System.Collections.Concurrent.Partitioner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, Action<TSource, ParallelLoopState> body)\n    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner{{TSource}}\n      description: \"\\n<p>The partitioner that contains the original data source.</p>\\n\"\n    - id: body\n      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements in <em>source</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the <em>source</em> partitioner returns <strong>false</strong>.</p>\\n<p>-or-</p>\\n<p>A method in the <em>source</em> partitioner returns <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method in the <em>source</em> partitioner does not return the correct number of partitions.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))\n  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), Action(Of TSource, ParallelLoopState))\n  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>, Action<TSource, ParallelLoopState>)\n  nameWithType.vb: Parallel.ForEach(Of TSource)(Partitioner(Of TSource), Action(Of TSource, ParallelLoopState))\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\n  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 2412\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on a <xref href=\\\"System.Collections.Concurrent.Partitioner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, Action<TSource> body)\n    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner{{TSource}}\n      description: \"\\n<p>The partitioner that contains the original data source.</p>\\n\"\n    - id: body\n      type: System.Action{{TSource}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements in <em>source</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is  <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the <em>source</em> partitioner returns <strong>false</strong>.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when any methods in the <em>source</em> partitioner return <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method in the <em>source</em> partitioner does not return the correct number of partitions.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Action(Of TSource))\n  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), Action(Of TSource))\n  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>, Action<TSource>)\n  nameWithType.vb: Parallel.ForEach(Of TSource)(Partitioner(Of TSource), Action(Of TSource))\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 2863\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on a <xref href=\\\"System.Collections.Concurrent.Partitioner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState> body)\n    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner{{TSource}}\n      description: \"\\n<p>The partitioner that contains the original data source.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: body\n      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements in <em>source</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A  structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the <em>source</em> partitioner returns <strong>false</strong>.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when any methods in the <em>source</em> partitioner return <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))\n  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState))\n  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)\n  nameWithType.vb: Parallel.ForEach(Of TSource)(Partitioner(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState))\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 2788\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on a <xref href=\\\"System.Collections.Concurrent.Partitioner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel and loop options can be configured.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource> body)\n    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner{{TSource}}\n      description: \"\\n<p>The partitioner that contains the original data source.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: body\n      type: System.Action{{TSource}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements in <em>source</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the <em>source</em> partitioner returns <strong>false</strong>.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when any methods in the <em>source</em> partitioner return <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource))\n  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), ParallelOptions, Action(Of TSource))\n  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)\n  nameWithType.vb: Parallel.ForEach(Of TSource)(Partitioner(Of TSource), ParallelOptions, Action(Of TSource))\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState, Int64>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 1826\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with 64-bit indexes on an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource, ParallelLoopState, long> body)\n    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An enumerable data source.</p>\\n\"\n    - id: body\n      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the data in the source.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))\n  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource, ParallelLoopState, Int64))\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState, Int64>)\n  nameWithType.vb: Parallel.ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource, ParallelLoopState, Int64))\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 1739\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource, ParallelLoopState> body)\n    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An enumerable data source.</p>\\n\"\n    - id: body\n      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the data in the source.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))\n  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource, ParallelLoopState))\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState>)\n  nameWithType.vb: Parallel.ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource, ParallelLoopState))\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\n  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 1654\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource> body)\n    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An enumerable data source.</p>\\n\"\n    - id: body\n      type: System.Action{{TSource}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the data in the source.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource))\n  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource))\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)\n  nameWithType.vb: Parallel.ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource))\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 1873\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with 64-bit indexes on an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState, long> body)\n    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An enumerable data source.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: body\n      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the data in the source.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))\n  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState, Int64))\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)\n  nameWithType.vb: Parallel.ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState, Int64))\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 1786\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState> body)\n    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An enumerable data source.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: body\n      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the data in the source.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))\n  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState))\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)\n  nameWithType.vb: Parallel.ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState))\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 1699\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation on an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel and loop options can be configured.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource> body)\n    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An enumerable data source.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: body\n      type: System.Action{{TSource}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the data in the source.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource))\n  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource))\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)\n  nameWithType.vb: Parallel.ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource))\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 2705\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with thread-local data on a <xref href=\\\"System.Collections.Concurrent.OrderablePartitioner`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource, TLocal>(OrderablePartitioner<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)\n    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}\n      description: \"\\n<p>The orderable partitioner that contains the original data source.</p>\\n\"\n    - id: localInit\n      type: System.Func{{TLocal}}\n      description: \"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n\"\n    - id: body\n      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    - id: localFinally\n      type: System.Action{{TLocal}}\n      description: \"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements in <em>source</em>.</p>\\n\"\n    - id: TLocal\n      description: \"\\n<p>The type of the thread-local data.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the <em>source</em><xref href=\\\"System.Collections.Concurrent.Partitioner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong> or the partitioner returns <strong>null</strong> partitions.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))\n  name.vb: ForEach(Of TSource, TLocal)(OrderablePartitioner(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))\n  nameWithType: Parallel.ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)\n  nameWithType.vb: Parallel.ForEach(Of TSource, TLocal)(OrderablePartitioner(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 3145\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <xref href=\\\"System.Collections.Concurrent.OrderablePartitioner`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource, TLocal>(OrderablePartitioner<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)\n    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As OrderablePartitioner(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}\n      description: \"\\n<p>The orderable partitioner that contains the original data source.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: localInit\n      type: System.Func{{TLocal}}\n      description: \"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n\"\n    - id: body\n      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    - id: localFinally\n      type: System.Action{{TLocal}}\n      description: \"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements in <em>source</em>.</p>\\n\"\n    - id: TLocal\n      description: \"\\n<p>The type of the thread-local data.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> or <em>localFinally</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the <em>source</em><xref href=\\\"System.Collections.Concurrent.Partitioner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong> or the partitioner returns <strong>null</strong>  partitions.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))\n  name.vb: ForEach(Of TSource, TLocal)(OrderablePartitioner(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))\n  nameWithType: Parallel.ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)\n  nameWithType.vb: Parallel.ForEach(Of TSource, TLocal)(OrderablePartitioner(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource, TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 2615\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with thread-local data on a <xref href=\\\"System.Collections.Concurrent.Partitioner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Partitioner<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)\n    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner{{TSource}}\n      description: \"\\n<p>The partitioner that contains the original data source.</p>\\n\"\n    - id: localInit\n      type: System.Func{{TLocal}}\n      description: \"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n\"\n    - id: body\n      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    - id: localFinally\n      type: System.Action{{TLocal}}\n      description: \"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements in <em>source</em>.</p>\\n\"\n    - id: TLocal\n      description: \"\\n<p>The type of the thread-local data.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the <em>source</em><xref href=\\\"System.Collections.Concurrent.Partitioner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong> or the partitioner returns <strong>null</strong> partitions.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.Partitioner(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))\n  name.vb: ForEach(Of TSource, TLocal)(Partitioner(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n  nameWithType: Parallel.ForEach<TSource, TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  nameWithType.vb: Parallel.ForEach(Of TSource, TLocal)(Partitioner(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource, TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 3039\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation  with thread-local data on a <xref href=\\\"System.Collections.Concurrent.Partitioner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Partitioner<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)\n    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Partitioner(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner{{TSource}}\n      description: \"\\n<p>The partitioner that contains the original data source.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: localInit\n      type: System.Func{{TLocal}}\n      description: \"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n\"\n    - id: body\n      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    - id: localFinally\n      type: System.Action{{TLocal}}\n      description: \"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements in <em>source</em>.</p>\\n\"\n    - id: TLocal\n      description: \"\\n<p>The type of the thread-local data.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in the <em>source</em><xref href=\\\"System.Collections.Concurrent.Partitioner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong> or the partitioner returns <strong>null</strong> partitions.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))\n  name.vb: ForEach(Of TSource, TLocal)(Partitioner(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n  nameWithType: Parallel.ForEach<TSource, TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  nameWithType.vb: Parallel.ForEach(Of TSource, TLocal)(Partitioner(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 1933\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with thread-local data on an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)\n    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An enumerable data source.</p>\\n\"\n    - id: localInit\n      type: System.Func{{TLocal}}\n      description: \"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n\"\n    - id: body\n      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    - id: localFinally\n      type: System.Action{{TLocal}}\n      description: \"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the data in the source.</p>\\n\"\n    - id: TLocal\n      description: \"\\n<p>The type of the thread-local data.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))\n  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n  nameWithType: Parallel.ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  nameWithType.vb: Parallel.ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 2079\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with thread-local data on an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)\n    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An enumerable data source.</p>\\n\"\n    - id: localInit\n      type: System.Func{{TLocal}}\n      description: \"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n\"\n    - id: body\n      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    - id: localFinally\n      type: System.Action{{TLocal}}\n      description: \"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the data in the source.</p>\\n\"\n    - id: TLocal\n      description: \"\\n<p>The type of the thread-local data.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))\n  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))\n  nameWithType: Parallel.ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)\n  nameWithType.vb: Parallel.ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 2009\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with thread-local data on an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)\n    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An enumerable data source.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: localInit\n      type: System.Func{{TLocal}}\n      description: \"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n\"\n    - id: body\n      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    - id: localFinally\n      type: System.Action{{TLocal}}\n      description: \"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the data in the source.</p>\\n\"\n    - id: TLocal\n      description: \"\\n<p>The type of the thread-local data.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))\n  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n  nameWithType: Parallel.ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n  nameWithType.vb: Parallel.ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)\n  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForEach\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 2155\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes a <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) operation with thread-local data and 64-bit indexes on an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</p>\\n\"\n  syntax:\n    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)\n    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An enumerable data source.</p>\\n\"\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: localInit\n      type: System.Func{{TLocal}}\n      description: \"\\n<p>The function delegate that returns the initial state of the local data for each task.</p>\\n\"\n    - id: body\n      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}\n      description: \"\\n<p>The delegate that is invoked once per iteration.</p>\\n\"\n    - id: localFinally\n      type: System.Action{{TLocal}}\n      description: \"\\n<p>The delegate that performs a final action on the local state of each task.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the data in the source.</p>\\n\"\n    - id: TLocal\n      description: \"\\n<p>The type of the thread-local data.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: \"\\n<p>A structure that contains information about which portion of the loop completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>source</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>body</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localInit</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>localFinally</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> argument is canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that contains all the individual exceptions thrown on all threads.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))\n  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))\n  nameWithType: Parallel.ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)\n  nameWithType.vb: Parallel.ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))\n- uid: System.Threading.Tasks.Parallel.Invoke(System.Action[])\n  commentId: M:System.Threading.Tasks.Parallel.Invoke(System.Action[])\n  id: Invoke(System.Action[])\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: Invoke(Action[])\n  fullName: System.Threading.Tasks.Parallel.Invoke(System.Action[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Invoke\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 173\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes each of the provided actions, possibly in parallel.</p>\\n\"\n  syntax:\n    content: public static void Invoke(params Action[] actions)\n    content.vb: Public Shared Sub Invoke(ParamArray actions As Action())\n    parameters:\n    - id: actions\n      type: System.Action[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Action\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to execute.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>actions</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that is thrown when any action in the <em>actions</em> array throws an exception.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>actions</em> array contains a <strong>null</strong> element.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.Invoke(System.Action())\n  name.vb: Invoke(Action())\n  nameWithType: Parallel.Invoke(Action[])\n  nameWithType.vb: Parallel.Invoke(Action())\n- uid: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])\n  commentId: M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])\n  id: Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  - vb\n  name: Invoke(ParallelOptions, Action[])\n  fullName: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions, System.Action[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Invoke\n    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs\n    startLine: 206\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</p>\\n\"\n  syntax:\n    content: public static void Invoke(ParallelOptions parallelOptions, params Action[] actions)\n    content.vb: Public Shared Sub Invoke(parallelOptions As ParallelOptions, ParamArray actions As Action())\n    parameters:\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: \"\\n<p>An object that configures the behavior of this operation.</p>\\n\"\n    - id: actions\n      type: System.Action[]\n      description: \"\\n<p>An array of actions to execute.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> is set.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>actions</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>parallelOptions</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The exception that is thrown when any action in the <em>actions</em> array throws an exception.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>actions</em> array contains a <strong>null</strong> element.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <em>parallelOptions</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions, System.Action())\n  name.vb: Invoke(ParallelOptions, Action())\n  nameWithType: Parallel.Invoke(ParallelOptions, Action[])\n  nameWithType.vb: Parallel.Invoke(ParallelOptions, Action())\nreferences:\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}\n  parent: System\n  definition: System.Action`2\n  name: Action<Int32, ParallelLoopState>\n  fullName: System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>\n  fullname.vb: System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState)\n  name.vb: Action(Of Int32, ParallelLoopState)\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: )\n    fullName: )\n  nameWithType: Action<Int32, ParallelLoopState>\n  nameWithType.vb: Action(Of Int32, ParallelLoopState)\n  commentId: T:System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}\n- uid: System.Threading.Tasks.ParallelLoopResult\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: ParallelLoopResult\n  fullName: System.Threading.Tasks.ParallelLoopResult\n  nameWithType: ParallelLoopResult\n  commentId: T:System.Threading.Tasks.ParallelLoopResult\n- uid: System.Action`2\n  isExternal: false\n  name: Action<T1, T2>\n  fullName: System.Action<T1, T2>\n  fullname.vb: System.Action(Of T1, T2)\n  name.vb: Action(Of T1, T2)\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: )\n    fullName: )\n  nameWithType: Action<T1, T2>\n  nameWithType.vb: Action(Of T1, T2)\n  commentId: T:System.Action`2\n- uid: System.Action{System.Int32}\n  parent: System\n  definition: System.Action`1\n  name: Action<Int32>\n  fullName: System.Action<System.Int32>\n  fullname.vb: System.Action(Of System.Int32)\n  name.vb: Action(Of Int32)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Action<Int32>\n  nameWithType.vb: Action(Of Int32)\n  commentId: T:System.Action{System.Int32}\n- uid: System.Action`1\n  isExternal: false\n  name: Action<T>\n  fullName: System.Action<T>\n  fullname.vb: System.Action(Of T)\n  name.vb: Action(Of T)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Action<T>\n  nameWithType.vb: Action(Of T)\n  commentId: T:System.Action`1\n- uid: System.Threading.Tasks.ParallelOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: ParallelOptions\n  fullName: System.Threading.Tasks.ParallelOptions\n  nameWithType: ParallelOptions\n  commentId: T:System.Threading.Tasks.ParallelOptions\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}\n  parent: System\n  definition: System.Action`2\n  name: Action<Int64, ParallelLoopState>\n  fullName: System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>\n  fullname.vb: System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState)\n  name.vb: Action(Of Int64, ParallelLoopState)\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: )\n    fullName: )\n  nameWithType: Action<Int64, ParallelLoopState>\n  nameWithType.vb: Action(Of Int64, ParallelLoopState)\n  commentId: T:System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}\n- uid: System.Action{System.Int64}\n  parent: System\n  definition: System.Action`1\n  name: Action<Int64>\n  fullName: System.Action<System.Int64>\n  fullname.vb: System.Action(Of System.Int64)\n  name.vb: Action(Of Int64)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Action<Int64>\n  nameWithType.vb: Action(Of Int64)\n  commentId: T:System.Action{System.Int64}\n- uid: System.Func{{TLocal}}\n  parent: System\n  definition: System.Func`1\n  name: Func<TLocal>\n  fullName: System.Func<TLocal>\n  fullname.vb: System.Func(Of TLocal)\n  name.vb: Func(Of TLocal)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TLocal\n    fullName: TLocal\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TLocal\n    fullName: TLocal\n  - name: )\n    fullName: )\n  nameWithType: Func<TLocal>\n  nameWithType.vb: Func(Of TLocal)\n  commentId: T:System.Func{``0}\n- uid: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}\n  parent: System\n  definition: System.Func`4\n  name: Func<Int32, ParallelLoopState, TLocal, TLocal>\n  fullName: System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>\n  fullname.vb: System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)\n  name.vb: Func(Of Int32, ParallelLoopState, TLocal, TLocal)\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: )\n    fullName: )\n  nameWithType: Func<Int32, ParallelLoopState, TLocal, TLocal>\n  nameWithType.vb: Func(Of Int32, ParallelLoopState, TLocal, TLocal)\n  commentId: T:System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0}\n- uid: System.Action{{TLocal}}\n  parent: System\n  definition: System.Action`1\n  name: Action<TLocal>\n  fullName: System.Action<TLocal>\n  fullname.vb: System.Action(Of TLocal)\n  name.vb: Action(Of TLocal)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TLocal\n    fullName: TLocal\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TLocal\n    fullName: TLocal\n  - name: )\n    fullName: )\n  nameWithType: Action<TLocal>\n  nameWithType.vb: Action(Of TLocal)\n  commentId: T:System.Action{``0}\n- uid: System.Func`1\n  isExternal: false\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n  commentId: T:System.Func`1\n- uid: System.Func`4\n  isExternal: false\n  name: Func<T1, T2, T3, TResult>\n  fullName: System.Func<T1, T2, T3, TResult>\n  fullname.vb: System.Func(Of T1, T2, T3, TResult)\n  name.vb: Func(Of T1, T2, T3, TResult)\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T1, T2, T3, TResult>\n  nameWithType.vb: Func(Of T1, T2, T3, TResult)\n  commentId: T:System.Func`4\n- uid: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}\n  parent: System\n  definition: System.Func`4\n  name: Func<Int64, ParallelLoopState, TLocal, TLocal>\n  fullName: System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>\n  fullname.vb: System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)\n  name.vb: Func(Of Int64, ParallelLoopState, TLocal, TLocal)\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: )\n    fullName: )\n  nameWithType: Func<Int64, ParallelLoopState, TLocal, TLocal>\n  nameWithType.vb: Func(Of Int64, ParallelLoopState, TLocal, TLocal)\n  commentId: T:System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0}\n- uid: System.Collections.Concurrent.OrderablePartitioner{{TSource}}\n  parent: System.Collections.Concurrent\n  definition: System.Collections.Concurrent.OrderablePartitioner`1\n  name: OrderablePartitioner<TSource>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>\n  fullname.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)\n  name.vb: OrderablePartitioner(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Concurrent.OrderablePartitioner`1\n    name: OrderablePartitioner\n    fullName: System.Collections.Concurrent.OrderablePartitioner\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Concurrent.OrderablePartitioner`1\n    name: OrderablePartitioner\n    fullName: System.Collections.Concurrent.OrderablePartitioner\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  nameWithType: OrderablePartitioner<TSource>\n  nameWithType.vb: OrderablePartitioner(Of TSource)\n  commentId: T:System.Collections.Concurrent.OrderablePartitioner{``0}\n- uid: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}\n  parent: System\n  definition: System.Action`3\n  name: Action<TSource, ParallelLoopState, Int64>\n  fullName: System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>\n  fullname.vb: System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64)\n  name.vb: Action(Of TSource, ParallelLoopState, Int64)\n  spec.csharp:\n  - uid: System.Action`3\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`3\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Action<TSource, ParallelLoopState, Int64>\n  nameWithType.vb: Action(Of TSource, ParallelLoopState, Int64)\n  commentId: T:System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64}\n- uid: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: OrderablePartitioner<TSource>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>\n  fullname.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)\n  name.vb: OrderablePartitioner(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Concurrent.OrderablePartitioner`1\n    name: OrderablePartitioner\n    fullName: System.Collections.Concurrent.OrderablePartitioner\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Concurrent.OrderablePartitioner`1\n    name: OrderablePartitioner\n    fullName: System.Collections.Concurrent.OrderablePartitioner\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  nameWithType: OrderablePartitioner<TSource>\n  nameWithType.vb: OrderablePartitioner(Of TSource)\n  commentId: T:System.Collections.Concurrent.OrderablePartitioner`1\n- uid: System.Collections.Concurrent\n  isExternal: false\n  name: System.Collections.Concurrent\n  fullName: System.Collections.Concurrent\n  nameWithType: System.Collections.Concurrent\n  commentId: N:System.Collections.Concurrent\n- uid: System.Action`3\n  isExternal: false\n  name: Action<T1, T2, T3>\n  fullName: System.Action<T1, T2, T3>\n  fullname.vb: System.Action(Of T1, T2, T3)\n  name.vb: Action(Of T1, T2, T3)\n  spec.csharp:\n  - uid: System.Action`3\n    name: Action\n    fullName: System.Action\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`3\n    name: Action\n    fullName: System.Action\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: )\n    fullName: )\n  nameWithType: Action<T1, T2, T3>\n  nameWithType.vb: Action(Of T1, T2, T3)\n  commentId: T:System.Action`3\n- uid: System.Collections.Concurrent.Partitioner{{TSource}}\n  parent: System.Collections.Concurrent\n  definition: System.Collections.Concurrent.Partitioner`1\n  name: Partitioner<TSource>\n  fullName: System.Collections.Concurrent.Partitioner<TSource>\n  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)\n  name.vb: Partitioner(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Concurrent.Partitioner`1\n    name: Partitioner\n    fullName: System.Collections.Concurrent.Partitioner\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Concurrent.Partitioner`1\n    name: Partitioner\n    fullName: System.Collections.Concurrent.Partitioner\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  nameWithType: Partitioner<TSource>\n  nameWithType.vb: Partitioner(Of TSource)\n  commentId: T:System.Collections.Concurrent.Partitioner{``0}\n- uid: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}\n  parent: System\n  definition: System.Action`2\n  name: Action<TSource, ParallelLoopState>\n  fullName: System.Action<TSource, System.Threading.Tasks.ParallelLoopState>\n  fullname.vb: System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState)\n  name.vb: Action(Of TSource, ParallelLoopState)\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: )\n    fullName: )\n  nameWithType: Action<TSource, ParallelLoopState>\n  nameWithType.vb: Action(Of TSource, ParallelLoopState)\n  commentId: T:System.Action{``0,System.Threading.Tasks.ParallelLoopState}\n- uid: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: Partitioner<TSource>\n  fullName: System.Collections.Concurrent.Partitioner<TSource>\n  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)\n  name.vb: Partitioner(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Concurrent.Partitioner`1\n    name: Partitioner\n    fullName: System.Collections.Concurrent.Partitioner\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Concurrent.Partitioner`1\n    name: Partitioner\n    fullName: System.Collections.Concurrent.Partitioner\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  nameWithType: Partitioner<TSource>\n  nameWithType.vb: Partitioner(Of TSource)\n  commentId: T:System.Collections.Concurrent.Partitioner`1\n- uid: System.Action{{TSource}}\n  parent: System\n  definition: System.Action`1\n  name: Action<TSource>\n  fullName: System.Action<TSource>\n  fullname.vb: System.Action(Of TSource)\n  name.vb: Action(Of TSource)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  nameWithType: Action<TSource>\n  nameWithType.vb: Action(Of TSource)\n  commentId: T:System.Action{``0}\n- uid: System.Collections.Generic.IEnumerable{{TSource}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)\n  name.vb: IEnumerable(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<TSource>\n  nameWithType.vb: IEnumerable(Of TSource)\n  commentId: T:System.Collections.Generic.IEnumerable{``0}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}\n  parent: System\n  definition: System.Func`5\n  name: Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>\n  fullName: System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>\n  fullname.vb: System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal)\n  name.vb: Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal)\n  spec.csharp:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: )\n    fullName: )\n  nameWithType: Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>\n  nameWithType.vb: Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal)\n  commentId: T:System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1}\n- uid: System.Func`5\n  isExternal: false\n  name: Func<T1, T2, T3, T4, TResult>\n  fullName: System.Func<T1, T2, T3, T4, TResult>\n  fullname.vb: System.Func(Of T1, T2, T3, T4, TResult)\n  name.vb: Func(Of T1, T2, T3, T4, TResult)\n  spec.csharp:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: T4\n    fullName: T4\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: T4\n    fullName: T4\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T1, T2, T3, T4, TResult>\n  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)\n  commentId: T:System.Func`5\n- uid: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}\n  parent: System\n  definition: System.Func`4\n  name: Func<TSource, ParallelLoopState, TLocal, TLocal>\n  fullName: System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>\n  fullname.vb: System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)\n  name.vb: Func(Of TSource, ParallelLoopState, TLocal, TLocal)\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: ', '\n    fullName: ', '\n  - name: TLocal\n    fullName: TLocal\n  - name: )\n    fullName: )\n  nameWithType: Func<TSource, ParallelLoopState, TLocal, TLocal>\n  nameWithType.vb: Func(Of TSource, ParallelLoopState, TLocal, TLocal)\n  commentId: T:System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1}\n- uid: System.Action[]\n  name: Action[]\n  fullName: System.Action[]\n  fullname.vb: System.Action()\n  name.vb: Action()\n  spec.csharp:\n  - uid: System.Action\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Action\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Action[]\n  nameWithType.vb: Action()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.AggregateException\n  parent: System\n  isExternal: false\n  name: AggregateException\n  fullName: System.AggregateException\n  nameWithType: AggregateException\n  commentId: T:System.AggregateException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  fullName: System.OperationCanceledException\n  nameWithType: OperationCanceledException\n  commentId: T:System.OperationCanceledException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}