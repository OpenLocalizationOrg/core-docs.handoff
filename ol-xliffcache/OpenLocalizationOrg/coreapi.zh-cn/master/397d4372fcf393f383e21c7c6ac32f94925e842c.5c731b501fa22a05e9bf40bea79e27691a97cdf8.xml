{"nodes":[{"pos":[1457,1477],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[3050,3054],"content":"Mode","needQuote":true,"nodes":[{"content":"Mode","pos":[0,4]}]},{"content":"\\n&lt;p&gt;A padding mode.","pos":[4014,4034],"source":"\\n<p>A padding mode."},{"content":"&lt;/p&gt;\\n","pos":[4035,4041],"source":" </p>\\n"},{"pos":[4441,4458],"content":"OaepHashAlgorithm","needQuote":true,"nodes":[{"content":"OaepHashAlgorithm","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The hash algorithm.","pos":[5882,5906],"source":"\\n<p>The hash algorithm."},{"content":"&lt;/p&gt;\\n","pos":[5907,5913],"source":" </p>\\n"},{"pos":[6299,6307],"content":"OaepSHA1","needQuote":true,"nodes":[{"content":"OaepSHA1","pos":[0,8]}]},{"content":"\\n&lt;p&gt;An object that represents the OAEP encryption standard with a SHA1 hash algorithm.&lt;/p&gt;\\n","pos":[7250,7343],"source":"\\n<p>An object that represents the OAEP encryption standard with a SHA1 hash algorithm.</p>\\n"},{"pos":[7748,7758],"content":"OaepSHA256","needQuote":true,"nodes":[{"content":"OaepSHA256","pos":[0,10]}]},{"content":"\\n&lt;p&gt;An object that represents the OAEP encryption standard with a SHA256 hash algorithm.","pos":[8712,8801],"source":"\\n<p>An object that represents the OAEP encryption standard with a SHA256 hash algorithm."},{"content":"&lt;/p&gt;\\n","pos":[8802,8808],"source":" </p>\\n"},{"pos":[9215,9225],"content":"OaepSHA384","needQuote":true,"nodes":[{"content":"OaepSHA384","pos":[0,10]}]},{"content":"\\n&lt;p&gt;An object that represents the OAEP encryption standard with a SHA384 hash algorithm.","pos":[10179,10268],"source":"\\n<p>An object that represents the OAEP encryption standard with a SHA384 hash algorithm."},{"content":"&lt;/p&gt;\\n","pos":[10269,10275],"source":" </p>\\n"},{"pos":[10682,10692],"content":"OaepSHA512","needQuote":true,"nodes":[{"content":"OaepSHA512","pos":[0,10]}]},{"content":"\\n&lt;p&gt;An object that represents the OAEP encryption standard with a SHA512 hash algorithm.","pos":[11646,11735],"source":"\\n<p>An object that represents the OAEP encryption standard with a SHA512 hash algorithm."},{"content":"&lt;/p&gt;\\n","pos":[11736,11742],"source":" </p>\\n"},{"pos":[12134,12139],"content":"Pkcs1","needQuote":true,"nodes":[{"content":"Pkcs1","pos":[0,5]}]},{"content":"\\n&lt;p&gt;An object that represents the PKCS #1 encryption standard.","pos":[13007,13070],"source":"\\n<p>An object that represents the PKCS #1 encryption standard."},{"content":"&lt;/p&gt;\\n","pos":[13071,13077],"source":" </p>\\n"},{"pos":[13623,13652],"content":"CreateOaep(HashAlgorithmName)","needQuote":true,"nodes":[{"content":"CreateOaep(HashAlgorithmName)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The hash algorithm.","pos":[14986,15010],"source":"\\n<p>The hash algorithm."},{"content":"&lt;/p&gt;\\n","pos":[15011,15017],"source":" </p>\\n"},{"pos":[16274,16288],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare.","pos":[17131,17158],"source":"\\n<p>The object to compare."},{"content":"&lt;/p&gt;\\n","pos":[17159,17165],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; is equal to the current instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[17226,17339],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> is equal to the current instance; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[17340,17346],"source":" </p>\\n"},{"pos":[17932,17960],"content":"Equals(RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Equals(RSAEncryptionPadding)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The object to compare.","pos":[19000,19027],"source":"\\n<p>The object to compare."},{"content":"&lt;/p&gt;\\n","pos":[19028,19034],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;other&lt;/em&gt; is equal to the current instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[19095,19210],"source":"\\n<p>\\n<strong>true</strong> if <em>other</em> is equal to the current instance; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19211,19217],"source":" </p>\\n"},{"pos":[19747,19760],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code of this instance.","pos":[20639,20675],"source":"\\n<p>The hash code of this instance."},{"content":"&lt;/p&gt;\\n","pos":[20676,20682],"source":" </p>\\n"},{"pos":[21422,21474],"content":"Equality(RSAEncryptionPadding, RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Equality(RSAEncryptionPadding, RSAEncryptionPadding)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[22621,22654],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[22655,22661],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[22761,22795],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[22796,22802],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;strong&gt;left&lt;/strong&gt; and &lt;strong&gt;right&lt;/strong&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[22863,22989],"source":"\\n<p>\\n<strong>true</strong> if <strong>left</strong> and <strong>right</strong> are equal; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22990,22996],"source":" </p>\\n"},{"pos":[23736,23790],"content":"Inequality(RSAEncryptionPadding, RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Inequality(RSAEncryptionPadding, RSAEncryptionPadding)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[24944,24977],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[24978,24984],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[25084,25118],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[25119,25125],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;strong&gt;left&lt;/strong&gt; and &lt;strong&gt;right&lt;/strong&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25186,25322],"source":"\\n<p>\\n<strong>true</strong> if <strong>left</strong> and <strong>right</strong> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[25746,25756],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The string representation of the current object.","pos":[26647,26700],"source":"\\n<p>The string representation of the current object."},{"content":"&lt;/p&gt;\\n","pos":[26701,26707],"source":" </p>\\n"},{"pos":[26955,26983],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[27180,27186],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27400,27432],"content":"IEquatable<RSAEncryptionPadding>","needQuote":true,"nodes":[{"content":"IEquatable&lt;RSAEncryptionPadding&gt;","pos":[0,32],"source":"IEquatable<RSAEncryptionPadding>"}]},{"pos":[27702,27712],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[27776,27777],"content":"<","needQuote":true,"nodes":[]},{"pos":[27863,27883],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[28030,28040],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[28105,28108]},{"pos":[28201,28221],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[28296,28297],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28610,28632],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[28780,28786],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28853,28854],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28904,28910],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28971,28972]},{"pos":[29027,29033],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29093,29094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29191,29197],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29264,29265],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29315,29321],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29382,29383]},{"pos":[29438,29444],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29504,29505],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29750,29781],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[29947,29962],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30038,30039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30089,30095],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30156,30157]},{"pos":[30212,30218],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30278,30279],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30385,30400],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30476,30477],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30527,30533],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30594,30595]},{"pos":[30650,30656],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30716,30717],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30943,30952],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[31045,31052],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31120,31121],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31148,31149],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31218,31225],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31293,31294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31321,31322],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31497,31514],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[31623,31638],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[31714,31715],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31742,31743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31820,31835],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[31911,31912],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31939,31940],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32085,32091],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[32211,32224],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[32379,32389],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[32432,32433],"content":"<","needQuote":true,"nodes":[]},{"pos":[32460,32461],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32560,32570],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[32614,32617]},{"pos":[32651,32652],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32679,32680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32926,32950],"content":"RSAEncryptionPaddingMode","needQuote":true,"nodes":[{"content":"RSAEncryptionPaddingMode","pos":[0,24]}]},{"pos":[33248,33265],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[33545,33565],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[33824,33838],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[33957,33963],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34030,34031],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34081,34087],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34147,34148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34231,34237],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34304,34305],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34355,34361],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34421,34422],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34595,34602],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[34950,34978],"content":"Equals(RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Equals(RSAEncryptionPadding)","pos":[0,28]}]},{"pos":[35328,35334],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35456,35457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35543,35563],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[35638,35639],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35717,35723],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35848,35849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35935,35955],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[36030,36031],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36418,36427],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[36585,36591],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36644,36645],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36672,36673],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[36700,36701],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36779,36785],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36841,36842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36869,36870],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[36897,36898],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37131,37144],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[37245,37256],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37328,37329],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37356,37357],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37430,37441],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37513,37514],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37541,37542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37702,37707],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37864,37874],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[37969,37977],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[38046,38047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38074,38075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38145,38153],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[38222,38223],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38250,38251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38406,38412],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[38568,38585],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Cryptography.RSAEncryptionPadding\n  commentId: T:System.Security.Cryptography.RSAEncryptionPadding\n  id: RSAEncryptionPadding\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Object)\n  - System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSAEncryptionPadding.GetHashCode\n  - System.Security.Cryptography.RSAEncryptionPadding.Mode\n  - System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm\n  - System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1\n  - System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256\n  - System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384\n  - System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512\n  - System.Security.Cryptography.RSAEncryptionPadding.op_Equality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSAEncryptionPadding.op_Inequality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSAEncryptionPadding.Pkcs1\n  - System.Security.Cryptography.RSAEncryptionPadding.ToString\n  langs:\n  - csharp\n  - vb\n  name: RSAEncryptionPadding\n  fullName: System.Security.Cryptography.RSAEncryptionPadding\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RSAEncryptionPadding\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 223\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Specifies the padding mode and parameters to use with RSA encryption or decryption operations. </p>\\n\"\n  syntax:\n    content: 'public sealed class RSAEncryptionPadding : IEquatable<RSAEncryptionPadding>'\n    content.vb: >-\n      Public NotInheritable Class RSAEncryptionPadding\n          Implements IEquatable(Of RSAEncryptionPadding)\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable{System.Security.Cryptography.RSAEncryptionPadding}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: RSAEncryptionPadding\n- uid: System.Security.Cryptography.RSAEncryptionPadding.Mode\n  commentId: P:System.Security.Cryptography.RSAEncryptionPadding.Mode\n  id: Mode\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: Mode\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.Mode\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Mode\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 226\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the padding mode represented by this <xref href=\\\"System.Security.Cryptography.RSAEncryptionPadding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. </p>\\n\"\n  syntax:\n    content: public RSAEncryptionPaddingMode Mode { get; }\n    content.vb: Public ReadOnly Property Mode As RSAEncryptionPaddingMode\n    parameters: []\n    return:\n      type: System.Security.Cryptography.RSAEncryptionPaddingMode\n      description: \"\\n<p>A padding mode. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: RSAEncryptionPadding.Mode\n- uid: System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm\n  commentId: P:System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm\n  id: OaepHashAlgorithm\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: OaepHashAlgorithm\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OaepHashAlgorithm\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 227\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the hash algorithm used in conjunction with the <xref href=\\\"System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> padding mode. If the value of the <xref href=\\\"System.Security.Cryptography.RSAEncryptionPadding.Mode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is not <xref href=\\\"System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong>. </p>\\n\"\n  syntax:\n    content: public HashAlgorithmName OaepHashAlgorithm { get; }\n    content.vb: Public ReadOnly Property OaepHashAlgorithm As HashAlgorithmName\n    parameters: []\n    return:\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: RSAEncryptionPadding.OaepHashAlgorithm\n- uid: System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1\n  commentId: P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1\n  id: OaepSHA1\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: OaepSHA1\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OaepSHA1\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 228\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets an object that represents the Optimal Asymmetric Encryption Padding (OAEP) encryption standard with a SHA1 hash algorithm.</p>\\n\"\n  syntax:\n    content: public static RSAEncryptionPadding OaepSHA1 { get; }\n    content.vb: Public Shared ReadOnly Property OaepSHA1 As RSAEncryptionPadding\n    parameters: []\n    return:\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>An object that represents the OAEP encryption standard with a SHA1 hash algorithm.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: RSAEncryptionPadding.OaepSHA1\n- uid: System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256\n  commentId: P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256\n  id: OaepSHA256\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: OaepSHA256\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OaepSHA256\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 229\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets an object that represents the Optimal Asymmetric Encryption Padding (OAEP) encryption standard with a SHA256 hash algorithm. </p>\\n\"\n  syntax:\n    content: public static RSAEncryptionPadding OaepSHA256 { get; }\n    content.vb: Public Shared ReadOnly Property OaepSHA256 As RSAEncryptionPadding\n    parameters: []\n    return:\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>An object that represents the OAEP encryption standard with a SHA256 hash algorithm. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: RSAEncryptionPadding.OaepSHA256\n- uid: System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384\n  commentId: P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384\n  id: OaepSHA384\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: OaepSHA384\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OaepSHA384\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 230\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets an object that represents the Optimal Asymmetric Encryption Padding (OAEP) encryption standard with a SHA-384 hash algorithm.</p>\\n\"\n  syntax:\n    content: public static RSAEncryptionPadding OaepSHA384 { get; }\n    content.vb: Public Shared ReadOnly Property OaepSHA384 As RSAEncryptionPadding\n    parameters: []\n    return:\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>An object that represents the OAEP encryption standard with a SHA384 hash algorithm. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: RSAEncryptionPadding.OaepSHA384\n- uid: System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512\n  commentId: P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512\n  id: OaepSHA512\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: OaepSHA512\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OaepSHA512\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 231\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets an object that represents the Optimal Asymmetric Encryption Padding (OAEP) encryption standard with a SHA512 hash algorithm. </p>\\n\"\n  syntax:\n    content: public static RSAEncryptionPadding OaepSHA512 { get; }\n    content.vb: Public Shared ReadOnly Property OaepSHA512 As RSAEncryptionPadding\n    parameters: []\n    return:\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>An object that represents the OAEP encryption standard with a SHA512 hash algorithm. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: RSAEncryptionPadding.OaepSHA512\n- uid: System.Security.Cryptography.RSAEncryptionPadding.Pkcs1\n  commentId: P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1\n  id: Pkcs1\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: Pkcs1\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.Pkcs1\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Pkcs1\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 232\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets an object that represents the PKCS #1 encryption standard. </p>\\n\"\n  syntax:\n    content: public static RSAEncryptionPadding Pkcs1 { get; }\n    content.vb: Public Shared ReadOnly Property Pkcs1 As RSAEncryptionPadding\n    parameters: []\n    return:\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>An object that represents the PKCS #1 encryption standard. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: RSAEncryptionPadding.Pkcs1\n- uid: System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)\n  id: CreateOaep(System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: CreateOaep(HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateOaep\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 233\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Security.Cryptography.RSAEncryptionPadding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance whose <xref href=\\\"System.Security.Cryptography.RSAEncryptionPadding.Mode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the given hash algorithm. </p>\\n\"\n  syntax:\n    content: public static RSAEncryptionPadding CreateOaep(HashAlgorithmName hashAlgorithm)\n    content.vb: Public Shared Function CreateOaep(hashAlgorithm As HashAlgorithmName) As RSAEncryptionPadding\n    parameters:\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm. </p>\\n\"\n    return:\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>An object whose mode is <xref href=\\\"System.Security.Cryptography.RSAEncryptionPadding.Mode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the hash algorithm specified by <em>hashAlgorithm</em>. .</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of <em>hashAlgorithm</em> is either <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RSAEncryptionPadding.CreateOaep(HashAlgorithmName)\n- uid: System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Object)\n  commentId: M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 234\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether the current instance is equal to the specified object. </p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is equal to the current instance; otherwise, <strong>false</strong>. </p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RSAEncryptionPadding.Equals(Object)\n- uid: System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Security.Cryptography.RSAEncryptionPadding)\n  id: Equals(System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: Equals(RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Security.Cryptography.RSAEncryptionPadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 235\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether the current instance is equal to the specified <xref href=\\\"System.Security.Cryptography.RSAEncryptionPadding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  syntax:\n    content: public bool Equals(RSAEncryptionPadding other)\n    content.vb: Public Function Equals(other As RSAEncryptionPadding) As Boolean\n    parameters:\n    - id: other\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>The object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>other</em> is equal to the current instance; otherwise, <strong>false</strong>. </p>\\n\"\n  implements:\n  - System.IEquatable{System.Security.Cryptography.RSAEncryptionPadding}.Equals(System.Security.Cryptography.RSAEncryptionPadding)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSAEncryptionPadding.Equals(RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSAEncryptionPadding.GetHashCode\n  commentId: M:System.Security.Cryptography.RSAEncryptionPadding.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 236\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Returns the hash code of this <xref href=\\\"System.Security.Cryptography.RSAEncryptionPadding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code of this instance. </p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RSAEncryptionPadding.GetHashCode()\n- uid: System.Security.Cryptography.RSAEncryptionPadding.op_Equality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSAEncryptionPadding.op_Equality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)\n  id: op_Equality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: Equality(RSAEncryptionPadding, RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.Equality(System.Security.Cryptography.RSAEncryptionPadding, System.Security.Cryptography.RSAEncryptionPadding)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 237\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Indicates whether two specified <xref href=\\\"System.Security.Cryptography.RSAEncryptionPadding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are equal. </p>\\n\"\n  syntax:\n    content: public static bool operator ==(RSAEncryptionPadding left, RSAEncryptionPadding right)\n    content.vb: Public Shared Operator =(left As RSAEncryptionPadding, right As RSAEncryptionPadding) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <strong>left</strong> and <strong>right</strong> are equal; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RSAEncryptionPadding.Equality(RSAEncryptionPadding, RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSAEncryptionPadding.op_Inequality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSAEncryptionPadding.op_Inequality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)\n  id: op_Inequality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: Inequality(RSAEncryptionPadding, RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.Inequality(System.Security.Cryptography.RSAEncryptionPadding, System.Security.Cryptography.RSAEncryptionPadding)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 238\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Indicates whether two specified <xref href=\\\"System.Security.Cryptography.RSAEncryptionPadding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are unequal. </p>\\n\"\n  syntax:\n    content: public static bool operator !=(RSAEncryptionPadding left, RSAEncryptionPadding right)\n    content.vb: Public Shared Operator <>(left As RSAEncryptionPadding, right As RSAEncryptionPadding) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <strong>left</strong> and <strong>right</strong> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: RSAEncryptionPadding.Inequality(RSAEncryptionPadding, RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSAEncryptionPadding.ToString\n  commentId: M:System.Security.Cryptography.RSAEncryptionPadding.ToString\n  id: ToString\n  parent: System.Security.Cryptography.RSAEncryptionPadding\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Security.Cryptography.RSAEncryptionPadding.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 239\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Returns the string representation of the current <xref href=\\\"System.Security.Cryptography.RSAEncryptionPadding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. </p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current object. </p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RSAEncryptionPadding.ToString()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IEquatable{System.Security.Cryptography.RSAEncryptionPadding}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<RSAEncryptionPadding>\n  fullName: System.IEquatable<System.Security.Cryptography.RSAEncryptionPadding>\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: IEquatable(Of RSAEncryptionPadding)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Security.Cryptography.RSAEncryptionPadding}\n  nameWithType: IEquatable<RSAEncryptionPadding>\n  nameWithType.vb: IEquatable(Of RSAEncryptionPadding)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System.Security.Cryptography.RSAEncryptionPaddingMode\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAEncryptionPaddingMode\n  fullName: System.Security.Cryptography.RSAEncryptionPaddingMode\n  commentId: T:System.Security.Cryptography.RSAEncryptionPaddingMode\n  nameWithType: RSAEncryptionPaddingMode\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n  commentId: T:System.Security.Cryptography.HashAlgorithmName\n  nameWithType: HashAlgorithmName\n- uid: System.Security.Cryptography.RSAEncryptionPadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAEncryptionPadding\n  fullName: System.Security.Cryptography.RSAEncryptionPadding\n  commentId: T:System.Security.Cryptography.RSAEncryptionPadding\n  nameWithType: RSAEncryptionPadding\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IEquatable{System.Security.Cryptography.RSAEncryptionPadding}.Equals(System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.IEquatable{System.Security.Cryptography.RSAEncryptionPadding}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(RSAEncryptionPadding)\n  fullName: System.IEquatable<System.Security.Cryptography.RSAEncryptionPadding>.Equals(System.Security.Cryptography.RSAEncryptionPadding)\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.RSAEncryptionPadding).Equals(System.Security.Cryptography.RSAEncryptionPadding)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Security.Cryptography.RSAEncryptionPadding>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Security.Cryptography.RSAEncryptionPadding).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Security.Cryptography.RSAEncryptionPadding}.Equals(System.Security.Cryptography.RSAEncryptionPadding)\n  nameWithType: IEquatable<RSAEncryptionPadding>.Equals(RSAEncryptionPadding)\n  nameWithType.vb: IEquatable(Of RSAEncryptionPadding).Equals(RSAEncryptionPadding)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}