{"nodes":[{"pos":[5817,5825],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[7279,7287],"content":"MaxValue","needQuote":true,"nodes":[{"content":"MaxValue","pos":[0,8]}]},{"pos":[8318,8326],"content":"MinValue","needQuote":true,"nodes":[{"content":"MinValue","pos":[0,8]}]},{"pos":[9383,9412],"content":"DateTime(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"DateTime(Int32, Int32, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The year (1 through 9999).","pos":[10195,10226],"source":"\\n<p>The year (1 through 9999)."},{"content":"&lt;/p&gt;\\n","pos":[10227,10233],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The month (1 through 12).","pos":[10296,10326],"source":"\\n<p>The month (1 through 12)."},{"content":"&lt;/p&gt;\\n","pos":[10327,10333],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The day (1 through the number of days in &lt;em&gt;month&lt;/em&gt;).","pos":[10394,10456],"source":"\\n<p>The day (1 through the number of days in <em>month</em>)."},{"content":"&lt;/p&gt;\\n","pos":[10457,10463],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is less than 1 or greater than 9999.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is less than 1 or greater than 12.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is less than 1 or greater than the number of days in &lt;em&gt;month&lt;/em&gt;.","pos":[10594,10831],"source":"\\n<p>\\n<em>year</em> is less than 1 or greater than 9999.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is less than 1 or greater than 12.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is less than 1 or greater than the number of days in <em>month</em>."},{"content":"&lt;/p&gt;\\n","pos":[10832,10838],"source":" </p>\\n"},{"pos":[11331,11381],"content":"DateTime(Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"DateTime(Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The year (1 through 9999).","pos":[12317,12348],"source":"\\n<p>The year (1 through 9999)."},{"content":"&lt;/p&gt;\\n","pos":[12349,12355],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The month (1 through 12).","pos":[12418,12448],"source":"\\n<p>The month (1 through 12)."},{"content":"&lt;/p&gt;\\n","pos":[12449,12455],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The day (1 through the number of days in &lt;em&gt;month&lt;/em&gt;).","pos":[12516,12578],"source":"\\n<p>The day (1 through the number of days in <em>month</em>)."},{"content":"&lt;/p&gt;\\n","pos":[12579,12585],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hours (0 through 23).","pos":[12647,12677],"source":"\\n<p>The hours (0 through 23)."},{"content":"&lt;/p&gt;\\n","pos":[12678,12684],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The minutes (0 through 59).","pos":[12748,12780],"source":"\\n<p>The minutes (0 through 59)."},{"content":"&lt;/p&gt;\\n","pos":[12781,12787],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The seconds (0 through 59).","pos":[12851,12883],"source":"\\n<p>The seconds (0 through 59)."},{"content":"&lt;/p&gt;\\n","pos":[12884,12890],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is less than 1 or greater than 9999.","pos":[13021,13078],"source":"\\n<p>\\n<em>year</em> is less than 1 or greater than 9999."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is less than 1 or greater than 12.","pos":[13079,13153],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is less than 1 or greater than 12."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is less than 1 or greater than the number of days in &lt;em&gt;month&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;hour&lt;/em&gt; is less than 0 or greater than 23.","pos":[13154,13333],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is less than 1 or greater than the number of days in <em>month</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than 0 or greater than 23."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;minute&lt;/em&gt; is less than 0 or greater than 59.","pos":[13334,13409],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than 0 or greater than 59."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;second&lt;/em&gt; is less than 0 or greater than 59.","pos":[13410,13485],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than 0 or greater than 59."},{"content":"&lt;/p&gt;\\n","pos":[13486,13492],"source":" </p>\\n"},{"pos":[14066,14130],"content":"DateTime(Int32, Int32, Int32, Int32, Int32, Int32, DateTimeKind)","needQuote":true,"nodes":[{"content":"DateTime(Int32, Int32, Int32, Int32, Int32, Int32, DateTimeKind)","pos":[0,64]}]},{"content":"\\n&lt;p&gt;The year (1 through 9999).","pos":[15176,15207],"source":"\\n<p>The year (1 through 9999)."},{"content":"&lt;/p&gt;\\n","pos":[15208,15214],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The month (1 through 12).","pos":[15277,15307],"source":"\\n<p>The month (1 through 12)."},{"content":"&lt;/p&gt;\\n","pos":[15308,15314],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The day (1 through the number of days in &lt;em&gt;month&lt;/em&gt;).","pos":[15375,15437],"source":"\\n<p>The day (1 through the number of days in <em>month</em>)."},{"content":"&lt;/p&gt;\\n","pos":[15438,15444],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hours (0 through 23).","pos":[15506,15536],"source":"\\n<p>The hours (0 through 23)."},{"content":"&lt;/p&gt;\\n","pos":[15537,15543],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The minutes (0 through 59).","pos":[15607,15639],"source":"\\n<p>The minutes (0 through 59)."},{"content":"&lt;/p&gt;\\n","pos":[15640,15646],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The seconds (0 through 59).","pos":[15710,15742],"source":"\\n<p>The seconds (0 through 59)."},{"content":"&lt;/p&gt;\\n","pos":[15743,15749],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that indicates whether &lt;em&gt;year&lt;/em&gt;, &lt;em&gt;month&lt;/em&gt;, &lt;em&gt;day&lt;/em&gt;, &lt;em&gt;hour&lt;/em&gt;, &lt;em&gt;minute&lt;/em&gt; and &lt;em&gt;second&lt;/em&gt; specify a local time, Coordinated Universal Time (UTC), or neither.&lt;/p&gt;\\n","pos":[15818,16045],"source":"\\n<p>One of the enumeration values that indicates whether <em>year</em>, <em>month</em>, <em>day</em>, <em>hour</em>, <em>minute</em> and <em>second</em> specify a local time, Coordinated Universal Time (UTC), or neither.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is less than 1 or greater than 9999.","pos":[16176,16233],"source":"\\n<p>\\n<em>year</em> is less than 1 or greater than 9999."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is less than 1 or greater than 12.","pos":[16234,16308],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is less than 1 or greater than 12."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is less than 1 or greater than the number of days in &lt;em&gt;month&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;hour&lt;/em&gt; is less than 0 or greater than 23.","pos":[16309,16488],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is less than 1 or greater than the number of days in <em>month</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than 0 or greater than 23."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;minute&lt;/em&gt; is less than 0 or greater than 59.","pos":[16489,16564],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than 0 or greater than 59."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;second&lt;/em&gt; is less than 0 or greater than 59.","pos":[16565,16640],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than 0 or greater than 59."},{"content":"&lt;/p&gt;\\n","pos":[16641,16647],"source":" </p>\\n"},{"pos":[17443,17500],"content":"DateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"DateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;The year (1 through 9999).","pos":[18504,18535],"source":"\\n<p>The year (1 through 9999)."},{"content":"&lt;/p&gt;\\n","pos":[18536,18542],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The month (1 through 12).","pos":[18605,18635],"source":"\\n<p>The month (1 through 12)."},{"content":"&lt;/p&gt;\\n","pos":[18636,18642],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The day (1 through the number of days in &lt;em&gt;month&lt;/em&gt;).","pos":[18703,18765],"source":"\\n<p>The day (1 through the number of days in <em>month</em>)."},{"content":"&lt;/p&gt;\\n","pos":[18766,18772],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hours (0 through 23).","pos":[18834,18864],"source":"\\n<p>The hours (0 through 23)."},{"content":"&lt;/p&gt;\\n","pos":[18865,18871],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The minutes (0 through 59).","pos":[18935,18967],"source":"\\n<p>The minutes (0 through 59)."},{"content":"&lt;/p&gt;\\n","pos":[18968,18974],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The seconds (0 through 59).","pos":[19038,19070],"source":"\\n<p>The seconds (0 through 59)."},{"content":"&lt;/p&gt;\\n","pos":[19071,19077],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The milliseconds (0 through 999).","pos":[19146,19184],"source":"\\n<p>The milliseconds (0 through 999)."},{"content":"&lt;/p&gt;\\n","pos":[19185,19191],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is less than 1 or greater than 9999.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is less than 1 or greater than 12.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is less than 1 or greater than the number of days in &lt;em&gt;month&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;hour&lt;/em&gt; is less than 0 or greater than 23.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;minute&lt;/em&gt; is less than 0 or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;second&lt;/em&gt; is less than 0 or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;millisecond&lt;/em&gt; is less than 0 or greater than 999.","pos":[19322,19863],"source":"\\n<p>\\n<em>year</em> is less than 1 or greater than 9999.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is less than 1 or greater than 12.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is less than 1 or greater than the number of days in <em>month</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than 0 or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than 0 or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than 0 or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than 0 or greater than 999."},{"content":"&lt;/p&gt;\\n","pos":[19864,19870],"source":" </p>\\n"},{"pos":[20554,20625],"content":"DateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, DateTimeKind)","needQuote":true,"nodes":[{"content":"DateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, DateTimeKind)","pos":[0,71]}]},{"content":"\\n&lt;p&gt;The year (1 through 9999).","pos":[21739,21770],"source":"\\n<p>The year (1 through 9999)."},{"content":"&lt;/p&gt;\\n","pos":[21771,21777],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The month (1 through 12).","pos":[21840,21870],"source":"\\n<p>The month (1 through 12)."},{"content":"&lt;/p&gt;\\n","pos":[21871,21877],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The day (1 through the number of days in &lt;em&gt;month&lt;/em&gt;).","pos":[21938,22000],"source":"\\n<p>The day (1 through the number of days in <em>month</em>)."},{"content":"&lt;/p&gt;\\n","pos":[22001,22007],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hours (0 through 23).","pos":[22069,22099],"source":"\\n<p>The hours (0 through 23)."},{"content":"&lt;/p&gt;\\n","pos":[22100,22106],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The minutes (0 through 59).","pos":[22170,22202],"source":"\\n<p>The minutes (0 through 59)."},{"content":"&lt;/p&gt;\\n","pos":[22203,22209],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The seconds (0 through 59).","pos":[22273,22305],"source":"\\n<p>The seconds (0 through 59)."},{"content":"&lt;/p&gt;\\n","pos":[22306,22312],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The milliseconds (0 through 999).","pos":[22381,22419],"source":"\\n<p>The milliseconds (0 through 999)."},{"content":"&lt;/p&gt;\\n","pos":[22420,22426],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that indicates whether &lt;em&gt;year&lt;/em&gt;, &lt;em&gt;month&lt;/em&gt;, &lt;em&gt;day&lt;/em&gt;, &lt;em&gt;hour&lt;/em&gt;, &lt;em&gt;minute&lt;/em&gt;, &lt;em&gt;second&lt;/em&gt;, and &lt;em&gt;millisecond&lt;/em&gt; specify a local time, Coordinated Universal Time (UTC), or neither.&lt;/p&gt;\\n","pos":[22495,22745],"source":"\\n<p>One of the enumeration values that indicates whether <em>year</em>, <em>month</em>, <em>day</em>, <em>hour</em>, <em>minute</em>, <em>second</em>, and <em>millisecond</em> specify a local time, Coordinated Universal Time (UTC), or neither.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is less than 1 or greater than 9999.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is less than 1 or greater than 12.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is less than 1 or greater than the number of days in &lt;em&gt;month&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;hour&lt;/em&gt; is less than 0 or greater than 23.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;minute&lt;/em&gt; is less than 0 or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;second&lt;/em&gt; is less than 0 or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;millisecond&lt;/em&gt; is less than 0 or greater than 999.","pos":[22876,23417],"source":"\\n<p>\\n<em>year</em> is less than 1 or greater than 9999.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is less than 1 or greater than 12.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is less than 1 or greater than the number of days in <em>month</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than 0 or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than 0 or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than 0 or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than 0 or greater than 999."},{"content":"&lt;/p&gt;\\n","pos":[23418,23424],"source":" </p>\\n"},{"pos":[23993,24008],"content":"DateTime(Int64)","needQuote":true,"nodes":[{"content":"DateTime(Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.","pos":[24703,24858],"source":"\\n<p>A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar."},{"content":"&lt;/p&gt;\\n","pos":[24859,24865],"source":" </p>\\n"},{"pos":[25568,25597],"content":"DateTime(Int64, DateTimeKind)","needQuote":true,"nodes":[{"content":"DateTime(Int64, DateTimeKind)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.","pos":[26408,26563],"source":"\\n<p>A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar."},{"content":"&lt;/p&gt;\\n","pos":[26564,26570],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that indicates whether &lt;em&gt;ticks&lt;/em&gt; specifies a local time, Coordinated Universal Time (UTC), or neither.&lt;/p&gt;\\n","pos":[26639,26787],"source":"\\n<p>One of the enumeration values that indicates whether <em>ticks</em> specifies a local time, Coordinated Universal Time (UTC), or neither.</p>\\n"},{"pos":[27626,27630],"content":"Date","needQuote":true,"nodes":[{"content":"Date","pos":[0,4]}]},{"content":"\\n&lt;p&gt;A new object with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00).&lt;/p&gt;\\n","pos":[28205,28321],"source":"\\n<p>A new object with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00).</p>\\n"},{"pos":[28565,28568],"content":"Day","needQuote":true,"nodes":[{"content":"Day","pos":[0,3]}]},{"content":"\\n&lt;p&gt;The day component, expressed as a value between 1 and 31.&lt;/p&gt;\\n","pos":[29148,29216],"source":"\\n<p>The day component, expressed as a value between 1 and 31.</p>\\n"},{"pos":[29477,29486],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[30663,30672],"content":"DayOfYear","needQuote":true,"nodes":[{"content":"DayOfYear","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The day of the year, expressed as a value between 1 and 366.&lt;/p&gt;\\n","pos":[31275,31346],"source":"\\n<p>The day of the year, expressed as a value between 1 and 366.</p>\\n"},{"pos":[31756,31760],"content":"Hour","needQuote":true,"nodes":[{"content":"Hour","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The hour component, expressed as a value between 0 and 23.&lt;/p&gt;\\n","pos":[32354,32423],"source":"\\n<p>The hour component, expressed as a value between 0 and 23.</p>\\n"},{"pos":[32670,32674],"content":"Kind","needQuote":true,"nodes":[{"content":"Kind","pos":[0,4]}]},{"pos":[34000,34011],"content":"Millisecond","needQuote":true,"nodes":[{"content":"Millisecond","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The milliseconds component, expressed as a value between 0 and 999.&lt;/p&gt;\\n","pos":[34641,34719],"source":"\\n<p>The milliseconds component, expressed as a value between 0 and 999.</p>\\n"},{"pos":[34979,34985],"content":"Minute","needQuote":true,"nodes":[{"content":"Minute","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The minute component, expressed as a value between 0 and 59.&lt;/p&gt;\\n","pos":[35589,35660],"source":"\\n<p>The minute component, expressed as a value between 0 and 59.</p>\\n"},{"pos":[35912,35917],"content":"Month","needQuote":true,"nodes":[{"content":"Month","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The month component, expressed as a value between 1 and 12.&lt;/p&gt;\\n","pos":[36516,36586],"source":"\\n<p>The month component, expressed as a value between 1 and 12.</p>\\n"},{"pos":[36831,36834],"content":"Now","needQuote":true,"nodes":[{"content":"Now","pos":[0,3]}]},{"content":"\\n&lt;p&gt;An object whose value is the current local date and time.&lt;/p&gt;\\n","pos":[37555,37623],"source":"\\n<p>An object whose value is the current local date and time.</p>\\n"},{"pos":[38060,38066],"content":"Second","needQuote":true,"nodes":[{"content":"Second","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The seconds component, expressed as a value between 0 and 59.&lt;/p&gt;\\n","pos":[38671,38743],"source":"\\n<p>The seconds component, expressed as a value between 0 and 59.</p>\\n"},{"pos":[38995,39000],"content":"Ticks","needQuote":true,"nodes":[{"content":"Ticks","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The number of ticks that represent the date and time of this instance.","pos":[39606,39681],"source":"\\n<p>The number of ticks that represent the date and time of this instance."},{"content":"The value is between &lt;strong&gt;DateTime.MinValue.Ticks&lt;/strong&gt; and &lt;strong&gt;DateTime.MaxValue.Ticks&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39682,39795],"source":" The value is between <strong>DateTime.MinValue.Ticks</strong> and <strong>DateTime.MaxValue.Ticks</strong>.</p>\\n"},{"pos":[40058,40067],"content":"TimeOfDay","needQuote":true,"nodes":[{"content":"TimeOfDay","pos":[0,9]}]},{"content":"\\n&lt;p&gt;A time interval that represents the fraction of the day that has elapsed since midnight.&lt;/p&gt;\\n","pos":[40664,40763],"source":"\\n<p>A time interval that represents the fraction of the day that has elapsed since midnight.</p>\\n"},{"pos":[41088,41093],"content":"Today","needQuote":true,"nodes":[{"content":"Today","pos":[0,5]}]},{"content":"\\n&lt;p&gt;An object that is set to today's date, with the time component set to 00:00:00.&lt;/p&gt;\\n","pos":[41667,41757],"source":"\\n<p>An object that is set to today's date, with the time component set to 00:00:00.</p>\\n"},{"pos":[42190,42196],"content":"UtcNow","needQuote":true,"nodes":[{"content":"UtcNow","pos":[0,6]}]},{"content":"\\n&lt;p&gt;An object whose value is the current UTC date and time.&lt;/p&gt;\\n","pos":[43016,43082],"source":"\\n<p>An object whose value is the current UTC date and time.</p>\\n"},{"pos":[43568,43572],"content":"Year","needQuote":true,"nodes":[{"content":"Year","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The year, between 1 and 9999.&lt;/p&gt;\\n","pos":[44166,44206],"source":"\\n<p>The year, between 1 and 9999.</p>\\n"},{"pos":[44652,44665],"content":"Add(TimeSpan)","needQuote":true,"nodes":[{"content":"Add(TimeSpan)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A positive or negative time interval.","pos":[45461,45503],"source":"\\n<p>A positive or negative time interval."},{"content":"&lt;/p&gt;\\n","pos":[45504,45510],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object whose value is the sum of the date and time represented by this instance and the time interval represented by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[45572,45718],"source":"\\n<p>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <em>value</em>.</p>\\n"},{"pos":[46610,46625],"content":"AddDays(Double)","needQuote":true,"nodes":[{"content":"AddDays(Double)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A number of whole and fractional days.","pos":[47355,47398],"source":"\\n<p>A number of whole and fractional days."},{"content":"The &lt;em&gt;value&lt;/em&gt; parameter can be negative or positive.","pos":[47399,47456],"source":" The <em>value</em> parameter can be negative or positive."},{"content":"&lt;/p&gt;\\n","pos":[47457,47463],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object whose value is the sum of the date and time represented by this instance and the number of days represented by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[47525,47672],"source":"\\n<p>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <em>value</em>.</p>\\n"},{"pos":[48464,48480],"content":"AddHours(Double)","needQuote":true,"nodes":[{"content":"AddHours(Double)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A number of whole and fractional hours.","pos":[49215,49259],"source":"\\n<p>A number of whole and fractional hours."},{"content":"The &lt;em&gt;value&lt;/em&gt; parameter can be negative or positive.","pos":[49260,49317],"source":" The <em>value</em> parameter can be negative or positive."},{"content":"&lt;/p&gt;\\n","pos":[49318,49324],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object whose value is the sum of the date and time represented by this instance and the number of hours represented by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[49386,49534],"source":"\\n<p>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <em>value</em>.</p>\\n"},{"pos":[50394,50417],"content":"AddMilliseconds(Double)","needQuote":true,"nodes":[{"content":"AddMilliseconds(Double)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A number of whole and fractional milliseconds.","pos":[51187,51238],"source":"\\n<p>A number of whole and fractional milliseconds."},{"content":"The &lt;em&gt;value&lt;/em&gt; parameter can be negative or positive.","pos":[51239,51296],"source":" The <em>value</em> parameter can be negative or positive."},{"content":"Note that this value is rounded to the nearest integer.&lt;/p&gt;\\n","pos":[51297,51358],"source":" Note that this value is rounded to the nearest integer.</p>\\n"},{"content":"\\n&lt;p&gt;An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[51420,51575],"source":"\\n<p>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <em>value</em>.</p>\\n"},{"pos":[52381,52399],"content":"AddMinutes(Double)","needQuote":true,"nodes":[{"content":"AddMinutes(Double)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A number of whole and fractional minutes.","pos":[53144,53190],"source":"\\n<p>A number of whole and fractional minutes."},{"content":"The &lt;em&gt;value&lt;/em&gt; parameter can be negative or positive.","pos":[53191,53248],"source":" The <em>value</em> parameter can be negative or positive."},{"content":"&lt;/p&gt;\\n","pos":[53249,53255],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[53317,53467],"source":"\\n<p>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <em>value</em>.</p>\\n"},{"pos":[54262,54278],"content":"AddMonths(Int32)","needQuote":true,"nodes":[{"content":"AddMonths(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A number of months.","pos":[55017,55041],"source":"\\n<p>A number of months."},{"content":"The &lt;em&gt;months&lt;/em&gt; parameter can be negative or positive.","pos":[55042,55100],"source":" The <em>months</em> parameter can be negative or positive."},{"content":"&lt;/p&gt;\\n","pos":[55101,55107],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object whose value is the sum of the date and time represented by this instance and &lt;em&gt;months&lt;/em&gt;.&lt;/p&gt;\\n","pos":[55169,55283],"source":"\\n<p>An object whose value is the sum of the date and time represented by this instance and <em>months</em>.</p>\\n"},{"pos":[56103,56121],"content":"AddSeconds(Double)","needQuote":true,"nodes":[{"content":"AddSeconds(Double)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A number of whole and fractional seconds.","pos":[56866,56912],"source":"\\n<p>A number of whole and fractional seconds."},{"content":"The &lt;em&gt;value&lt;/em&gt; parameter can be negative or positive.","pos":[56913,56970],"source":" The <em>value</em> parameter can be negative or positive."},{"content":"&lt;/p&gt;\\n","pos":[56971,56977],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[57039,57189],"source":"\\n<p>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <em>value</em>.</p>\\n"},{"pos":[57981,57996],"content":"AddTicks(Int64)","needQuote":true,"nodes":[{"content":"AddTicks(Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A number of 100-nanosecond ticks.","pos":[58725,58763],"source":"\\n<p>A number of 100-nanosecond ticks."},{"content":"The &lt;em&gt;value&lt;/em&gt; parameter can be positive or negative.","pos":[58764,58821],"source":" The <em>value</em> parameter can be positive or negative."},{"content":"&lt;/p&gt;\\n","pos":[58822,58828],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object whose value is the sum of the date and time represented by this instance and the time represented by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[58890,59027],"source":"\\n<p>An object whose value is the sum of the date and time represented by this instance and the time represented by <em>value</em>.</p>\\n"},{"pos":[59885,59900],"content":"AddYears(Int32)","needQuote":true,"nodes":[{"content":"AddYears(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A number of years.","pos":[60631,60654],"source":"\\n<p>A number of years."},{"content":"The &lt;em&gt;value&lt;/em&gt; parameter can be negative or positive.","pos":[60655,60712],"source":" The <em>value</em> parameter can be negative or positive."},{"content":"&lt;/p&gt;\\n","pos":[60713,60719],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object whose value is the sum of the date and time represented by this instance and the number of years represented by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[60781,60929],"source":"\\n<p>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <em>value</em>.</p>\\n"},{"pos":[61726,61753],"content":"Compare(DateTime, DateTime)","needQuote":true,"nodes":[{"content":"Compare(DateTime, DateTime)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[62604,62637],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[62638,62644],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[62707,62741],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[62742,62748],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A signed number indicating the relative values of &lt;em&gt;t1&lt;/em&gt; and &lt;em&gt;t2&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;Value Type &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;t1&lt;/em&gt; is earlier than &lt;em&gt;t2&lt;/em&gt;.","pos":[62807,63039],"source":"\\n<p>A signed number indicating the relative values of <em>t1</em> and <em>t2</em>.</p>\\n<p>Value Type </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>t1</em> is earlier than <em>t2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;t1&lt;/em&gt; is the same as &lt;em&gt;t2&lt;/em&gt;.","pos":[63040,63135],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>t1</em> is the same as <em>t2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;t1&lt;/em&gt; is later than &lt;em&gt;t2&lt;/em&gt;.","pos":[63136,63243],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>t1</em> is later than <em>t2</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[63244,63278],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[63838,63857],"content":"CompareTo(DateTime)","needQuote":true,"nodes":[{"content":"CompareTo(DateTime)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The object to compare to the current instance.","pos":[64771,64822],"source":"\\n<p>The object to compare to the current instance."},{"content":"&lt;/p&gt;\\n","pos":[64823,64829],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A signed number indicating the relative values of this instance and the &lt;em&gt;value&lt;/em&gt; parameter.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Description &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is earlier than &lt;em&gt;value&lt;/em&gt;.","pos":[64888,65139],"source":"\\n<p>A signed number indicating the relative values of this instance and the <em>value</em> parameter.</p>\\n<p>Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is earlier than <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is the same as &lt;em&gt;value&lt;/em&gt;.","pos":[65140,65238],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is later than &lt;em&gt;value&lt;/em&gt;.","pos":[65239,65349],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is later than <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[65350,65384],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[66063,66088],"content":"DaysInMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"DaysInMonth(Int32, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The year.","pos":[66782,66796],"source":"\\n<p>The year."},{"content":"&lt;/p&gt;\\n","pos":[66797,66803],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The month (a number ranging from 1 to 12).","pos":[66866,66913],"source":"\\n<p>The month (a number ranging from 1 to 12)."},{"content":"&lt;/p&gt;\\n","pos":[66914,66920],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in &lt;em&gt;month&lt;/em&gt; for the specified &lt;em&gt;year&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;For example, if &lt;em&gt;month&lt;/em&gt; equals 2 for February, the return value is 28 or 29 depending upon whether &lt;em&gt;year&lt;/em&gt; is a leap year.&lt;/p&gt;\\n","pos":[66979,67203],"source":"\\n<p>The number of days in <em>month</em> for the specified <em>year</em>.</p>\\n<p>For example, if <em>month</em> equals 2 for February, the return value is 28 or 29 depending upon whether <em>year</em> is a leap year.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is less than 1 or greater than 12.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is less than 1 or greater than 9999.&lt;/p&gt;\\n","pos":[67334,67470],"source":"\\n<p>\\n<em>month</em> is less than 1 or greater than 12.</p>\\n<p>-or-</p>\\n<p>\\n<em>year</em> is less than 1 or greater than 9999.</p>\\n"},{"pos":[67796,67812],"content":"Equals(DateTime)","needQuote":true,"nodes":[{"content":"Equals(DateTime)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The object to compare to this instance.","pos":[68568,68612],"source":"\\n<p>The object to compare to this instance."},{"content":"&lt;/p&gt;\\n","pos":[68613,68619],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;value&lt;/em&gt; parameter equals the value of this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[68680,68816],"source":"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter equals the value of this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[69600,69626],"content":"Equals(DateTime, DateTime)","needQuote":true,"nodes":[{"content":"Equals(DateTime, DateTime)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[70403,70436],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[70437,70443],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[70506,70540],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[70541,70547],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two values are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[70608,70706],"source":"\\n<p>\\n<strong>true</strong> if the two values are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[71345,71359],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare to this instance.","pos":[72024,72068],"source":"\\n<p>The object to compare to this instance."},{"content":"&lt;/p&gt;\\n","pos":[72069,72075],"source":" </p>\\n"},{"pos":[72993,73010],"content":"FromBinary(Int64)","needQuote":true,"nodes":[{"content":"FromBinary(Int64)","pos":[0,17]}]},{"pos":[75110,75129],"content":"FromFileTime(Int64)","needQuote":true,"nodes":[{"content":"FromFileTime(Int64)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A Windows file time expressed in ticks.","pos":[75806,75850],"source":"\\n<p>A Windows file time expressed in ticks."},{"content":"&lt;/p&gt;\\n","pos":[75851,75857],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the local time equivalent of the date and time represented by the &lt;em&gt;fileTime&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[75919,76050],"source":"\\n<p>An object that represents the local time equivalent of the date and time represented by the <em>fileTime</em> parameter.</p>\\n"},{"pos":[76906,76928],"content":"FromFileTimeUtc(Int64)","needQuote":true,"nodes":[{"content":"FromFileTimeUtc(Int64)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A Windows file time expressed in ticks.","pos":[77615,77659],"source":"\\n<p>A Windows file time expressed in ticks."},{"content":"&lt;/p&gt;\\n","pos":[77660,77666],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the UTC time equivalent of the date and time represented by the &lt;em&gt;fileTime&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[77728,77857],"source":"\\n<p>An object that represents the UTC time equivalent of the date and time represented by the <em>fileTime</em> parameter.</p>\\n"},{"pos":[78796,78816],"content":"GetDateTimeFormats()","needQuote":true,"nodes":[{"content":"GetDateTimeFormats()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.&lt;/p&gt;\\n","pos":[79504,79668],"source":"\\n<p>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</p>\\n"},{"pos":[79991,80015],"content":"GetDateTimeFormats(Char)","needQuote":true,"nodes":[{"content":"GetDateTimeFormats(Char)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;A standard date and time format string (see Remarks).","pos":[80767,80825],"source":"\\n<p>A standard date and time format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[80826,80832],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string array where each element is the representation of the value of this instance formatted with the &lt;em&gt;format&lt;/em&gt; standard date and time format specifier.&lt;/p&gt;\\n","pos":[80894,81066],"source":"\\n<p>A string array where each element is the representation of the value of this instance formatted with the <em>format</em> standard date and time format specifier.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid standard date and time format specifier character.&lt;/p&gt;\\n","pos":[81173,81267],"source":"\\n<p>\\n<em>format</em> is not a valid standard date and time format specifier character.</p>\\n"},{"pos":[81663,81704],"content":"GetDateTimeFormats(Char, IFormatProvider)","needQuote":true,"nodes":[{"content":"GetDateTimeFormats(Char, IFormatProvider)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;A date and time format string (see Remarks).","pos":[82579,82628],"source":"\\n<p>A date and time format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[82629,82635],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about this instance.","pos":[82711,82800],"source":"\\n<p>An object that supplies culture-specific formatting information about this instance."},{"content":"&lt;/p&gt;\\n","pos":[82801,82807],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.&lt;/p&gt;\\n","pos":[82869,83033],"source":"\\n<p>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid standard date and time format specifier character.&lt;/p&gt;\\n","pos":[83140,83234],"source":"\\n<p>\\n<em>format</em> is not a valid standard date and time format specifier character.</p>\\n"},{"pos":[83611,83646],"content":"GetDateTimeFormats(IFormatProvider)","needQuote":true,"nodes":[{"content":"GetDateTimeFormats(IFormatProvider)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about this instance.","pos":[84497,84586],"source":"\\n<p>An object that supplies culture-specific formatting information about this instance."},{"content":"&lt;/p&gt;\\n","pos":[84587,84593],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.&lt;/p&gt;\\n","pos":[84655,84819],"source":"\\n<p>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</p>\\n"},{"pos":[85097,85110],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[85691,85736],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[86089,86111],"content":"IsDaylightSavingTime()","needQuote":true,"nodes":[{"content":"IsDaylightSavingTime()","pos":[0,22]}]},{"pos":[88007,88024],"content":"IsLeapYear(Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A 4-digit year.","pos":[88677,88697],"source":"\\n<p>A 4-digit year."},{"content":"&lt;/p&gt;\\n","pos":[88698,88704],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;year&lt;/em&gt; is a leap year; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[88765,88867],"source":"\\n<p>\\n<strong>true</strong> if <em>year</em> is a leap year; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is less than 1 or greater than 9999.&lt;/p&gt;\\n","pos":[88998,89061],"source":"\\n<p>\\n<em>year</em> is less than 1 or greater than 9999.</p>\\n"},{"pos":[89442,89470],"content":"Addition(DateTime, TimeSpan)","needQuote":true,"nodes":[{"content":"Addition(DateTime, TimeSpan)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The date and time value to add.","pos":[90186,90222],"source":"\\n<p>The date and time value to add."},{"content":"&lt;/p&gt;\\n","pos":[90223,90229],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The time interval to add.","pos":[90291,90321],"source":"\\n<p>The time interval to add."},{"content":"&lt;/p&gt;\\n","pos":[90322,90328],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that is the sum of the values of &lt;em&gt;d&lt;/em&gt; and &lt;em&gt;t&lt;/em&gt;.&lt;/p&gt;\\n","pos":[90390,90470],"source":"\\n<p>An object that is the sum of the values of <em>d</em> and <em>t</em>.</p>\\n"},{"pos":[91536,91564],"content":"Equality(DateTime, DateTime)","needQuote":true,"nodes":[{"content":"Equality(DateTime, DateTime)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[92323,92356],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[92357,92363],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[92426,92460],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[92461,92467],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; and &lt;em&gt;d2&lt;/em&gt; represent the same date and time; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[92528,92662],"source":"\\n<p>\\n<strong>true</strong> if <em>d1</em> and <em>d2</em> represent the same date and time; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[93181,93212],"content":"GreaterThan(DateTime, DateTime)","needQuote":true,"nodes":[{"content":"GreaterThan(DateTime, DateTime)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[94059,94092],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[94093,94099],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[94162,94196],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[94197,94203],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;t1&lt;/em&gt; is later than &lt;em&gt;t2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[94264,94375],"source":"\\n<p>\\n<strong>true</strong> if <em>t1</em> is later than <em>t2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[94924,94962],"content":"GreaterThanOrEqual(DateTime, DateTime)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(DateTime, DateTime)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[95874,95907],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[95908,95914],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[95977,96011],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[96012,96018],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;t1&lt;/em&gt; is the same as or later than &lt;em&gt;t2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[96079,96205],"source":"\\n<p>\\n<strong>true</strong> if <em>t1</em> is the same as or later than <em>t2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[96737,96767],"content":"Inequality(DateTime, DateTime)","needQuote":true,"nodes":[{"content":"Inequality(DateTime, DateTime)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[97535,97568],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[97569,97575],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[97638,97672],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[97673,97679],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;d1&lt;/em&gt; and &lt;em&gt;d2&lt;/em&gt; do not represent the same date and time; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[97740,97881],"source":"\\n<p>\\n<strong>true</strong> if <em>d1</em> and <em>d2</em> do not represent the same date and time; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[98399,98427],"content":"LessThan(DateTime, DateTime)","needQuote":true,"nodes":[{"content":"LessThan(DateTime, DateTime)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[99272,99305],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[99306,99312],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[99375,99409],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[99410,99416],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;t1&lt;/em&gt; is earlier than &lt;em&gt;t2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[99477,99590],"source":"\\n<p>\\n<strong>true</strong> if <em>t1</em> is earlier than <em>t2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[100127,100162],"content":"LessThanOrEqual(DateTime, DateTime)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(DateTime, DateTime)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[101070,101109],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[101172,101206],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[101207,101213],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;t1&lt;/em&gt; is the same as or earlier than &lt;em&gt;t2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[101274,101402],"source":"\\n<p>\\n<strong>true</strong> if <em>t1</em> is the same as or earlier than <em>t2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[101934,101965],"content":"Subtraction(DateTime, DateTime)","needQuote":true,"nodes":[{"content":"Subtraction(DateTime, DateTime)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The date and time value to subtract from (the minuend).","pos":[102703,102763],"source":"\\n<p>The date and time value to subtract from (the minuend)."},{"content":"&lt;/p&gt;\\n","pos":[102764,102770],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The date and time value to subtract (the subtrahend).","pos":[102833,102891],"source":"\\n<p>The date and time value to subtract (the subtrahend)."},{"content":"&lt;/p&gt;\\n","pos":[102892,102898],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The time interval between &lt;em&gt;d1&lt;/em&gt; and &lt;em&gt;d2&lt;/em&gt;; that is, &lt;em&gt;d1&lt;/em&gt; minus &lt;em&gt;d2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[102960,103065],"source":"\\n<p>The time interval between <em>d1</em> and <em>d2</em>; that is, <em>d1</em> minus <em>d2</em>.</p>\\n"},{"pos":[103662,103693],"content":"Subtraction(DateTime, TimeSpan)","needQuote":true,"nodes":[{"content":"Subtraction(DateTime, TimeSpan)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The date and time value to subtract from.","pos":[104424,104470],"source":"\\n<p>The date and time value to subtract from."},{"content":"&lt;/p&gt;\\n","pos":[104471,104477],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The time interval to subtract.","pos":[104539,104574],"source":"\\n<p>The time interval to subtract."},{"content":"&lt;/p&gt;\\n","pos":[104575,104581],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object whose value is the value of &lt;em&gt;d&lt;/em&gt; minus the value of &lt;em&gt;t&lt;/em&gt;.&lt;/p&gt;\\n","pos":[104643,104733],"source":"\\n<p>An object whose value is the value of <em>d</em> minus the value of <em>t</em>.</p>\\n"},{"pos":[105740,105753],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.","pos":[106466,106521],"source":"\\n<p>A string that contains a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[106522,106528],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the date and time contained in &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[106590,106675],"source":"\\n<p>An object that is equivalent to the date and time contained in <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[106794,106837],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[106838,106844],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not contain a valid string representation of a date and time.","pos":[106937,107021],"source":"\\n<p>\\n<em>s</em> does not contain a valid string representation of a date and time."},{"content":"&lt;/p&gt;\\n","pos":[107022,107028],"source":" </p>\\n"},{"pos":[107754,107784],"content":"Parse(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"Parse(String, IFormatProvider)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.","pos":[108622,108677],"source":"\\n<p>A string that contains a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[108678,108684],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific format information about &lt;em&gt;s&lt;/em&gt;.","pos":[108760,108842],"source":"\\n<p>An object that supplies culture-specific format information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[108843,108849],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the date and time contained in &lt;em&gt;s&lt;/em&gt; as specified by &lt;em&gt;provider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[108911,109030],"source":"\\n<p>An object that is equivalent to the date and time contained in <em>s</em> as specified by <em>provider</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[109149,109192],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[109193,109199],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not contain a valid string representation of a date and time.","pos":[109292,109376],"source":"\\n<p>\\n<em>s</em> does not contain a valid string representation of a date and time."},{"content":"&lt;/p&gt;\\n","pos":[109377,109383],"source":" </p>\\n"},{"pos":[110234,110280],"content":"Parse(String, IFormatProvider, DateTimeStyles)","needQuote":true,"nodes":[{"content":"Parse(String, IFormatProvider, DateTimeStyles)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.","pos":[111225,111280],"source":"\\n<p>A string that contains a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[111281,111287],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;s&lt;/em&gt;.","pos":[111363,111449],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[111450,111456],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the date and time contained in &lt;em&gt;s&lt;/em&gt;, as specified by &lt;em&gt;provider&lt;/em&gt; and &lt;em&gt;styles&lt;/em&gt;.&lt;/p&gt;\\n","pos":[112007,112147],"source":"\\n<p>An object that is equivalent to the date and time contained in <em>s</em>, as specified by <em>provider</em> and <em>styles</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[112266,112309],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[112310,112316],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not contain a valid string representation of a date and time.","pos":[112409,112493],"source":"\\n<p>\\n<em>s</em> does not contain a valid string representation of a date and time."},{"content":"&lt;/p&gt;\\n","pos":[112494,112500],"source":" </p>\\n"},{"pos":[113823,113866],"content":"ParseExact(String, String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ParseExact(String, String, IFormatProvider)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.","pos":[114885,114940],"source":"\\n<p>A string that contains a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[114941,114947],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A format specifier that defines the required format of &lt;em&gt;s&lt;/em&gt;.","pos":[115012,115083],"source":"\\n<p>A format specifier that defines the required format of <em>s</em>."},{"content":"For more information, see the Remarks section.","pos":[115084,115130]},{"content":"&lt;/p&gt;\\n","pos":[115131,115137],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific format information about &lt;em&gt;s&lt;/em&gt;.","pos":[115213,115295],"source":"\\n<p>An object that supplies culture-specific format information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[115296,115302],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the date and time contained in &lt;em&gt;s&lt;/em&gt;, as specified by &lt;em&gt;format&lt;/em&gt; and &lt;em&gt;provider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[115364,115504],"source":"\\n<p>An object that is equivalent to the date and time contained in <em>s</em>, as specified by <em>format</em> and <em>provider</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; or &lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[115623,115685],"source":"\\n<p>\\n<em>s</em> or <em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[115686,115692],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; or &lt;em&gt;format&lt;/em&gt; is an empty string.","pos":[115785,115841],"source":"\\n<p>\\n<em>s</em> or <em>format</em> is an empty string."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not contain a date and time that corresponds to the pattern specified in &lt;em&gt;format&lt;/em&gt;.","pos":[115842,115972],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>s</em> does not contain a date and time that corresponds to the pattern specified in <em>format</em>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The hour component and the AM/PM designator in &lt;em&gt;s&lt;/em&gt; do not agree.&lt;/p&gt;\\n","pos":[115973,116072],"source":" </p>\\n<p>-or-</p>\\n<p>The hour component and the AM/PM designator in <em>s</em> do not agree.</p>\\n"},{"pos":[117149,117208],"content":"ParseExact(String, String, IFormatProvider, DateTimeStyles)","needQuote":true,"nodes":[{"content":"ParseExact(String, String, IFormatProvider, DateTimeStyles)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;A string containing a date and time to convert.","pos":[118345,118397],"source":"\\n<p>A string containing a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[118398,118404],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A format specifier that defines the required format of &lt;em&gt;s&lt;/em&gt;.","pos":[118469,118540],"source":"\\n<p>A format specifier that defines the required format of <em>s</em>."},{"content":"For more information, see the Remarks section.","pos":[118541,118587]},{"content":"&lt;/p&gt;\\n","pos":[118588,118594],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;s&lt;/em&gt;.","pos":[118670,118756],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[118757,118763],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the date and time contained in &lt;em&gt;s&lt;/em&gt;, as specified by &lt;em&gt;format&lt;/em&gt;, &lt;em&gt;provider&lt;/em&gt;, and &lt;em&gt;style&lt;/em&gt;.&lt;/p&gt;\\n","pos":[119340,119497],"source":"\\n<p>An object that is equivalent to the date and time contained in <em>s</em>, as specified by <em>format</em>, <em>provider</em>, and <em>style</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; or &lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[119616,119678],"source":"\\n<p>\\n<em>s</em> or <em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[119679,119685],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; or &lt;em&gt;format&lt;/em&gt; is an empty string.","pos":[119778,119834],"source":"\\n<p>\\n<em>s</em> or <em>format</em> is an empty string."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not contain a date and time that corresponds to the pattern specified in &lt;em&gt;format&lt;/em&gt;.","pos":[119835,119965],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>s</em> does not contain a date and time that corresponds to the pattern specified in <em>format</em>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The hour component and the AM/PM designator in &lt;em&gt;s&lt;/em&gt; do not agree.&lt;/p&gt;\\n","pos":[119966,120065],"source":" </p>\\n<p>-or-</p>\\n<p>The hour component and the AM/PM designator in <em>s</em> do not agree.</p>\\n"},{"pos":[121670,121731],"content":"ParseExact(String, String[], IFormatProvider, DateTimeStyles)","needQuote":true,"nodes":[{"content":"ParseExact(String, String[], IFormatProvider, DateTimeStyles)","pos":[0,61]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.","pos":[122903,122958],"source":"\\n<p>A string that contains a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[122959,122965],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of allowable formats of &lt;em&gt;s&lt;/em&gt;.","pos":[123033,123082],"source":"\\n<p>An array of allowable formats of <em>s</em>."},{"content":"For more information, see the Remarks section.","pos":[123083,123129]},{"content":"&lt;/p&gt;\\n","pos":[123130,123136],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific format information about &lt;em&gt;s&lt;/em&gt;.","pos":[123212,123294],"source":"\\n<p>An object that supplies culture-specific format information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[123295,123301],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the date and time contained in &lt;em&gt;s&lt;/em&gt;, as specified by &lt;em&gt;formats&lt;/em&gt;, &lt;em&gt;provider&lt;/em&gt;, and &lt;em&gt;style&lt;/em&gt;.&lt;/p&gt;\\n","pos":[123686,123844],"source":"\\n<p>An object that is equivalent to the date and time contained in <em>s</em>, as specified by <em>formats</em>, <em>provider</em>, and <em>style</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; or &lt;em&gt;formats&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[123963,124026],"source":"\\n<p>\\n<em>s</em> or <em>formats</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[124027,124033],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is an empty string.","pos":[124126,124163],"source":"\\n<p>\\n<em>s</em> is an empty string."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;an element of &lt;em&gt;formats&lt;/em&gt; is an empty string.","pos":[124164,124237],"source":" </p>\\n<p>-or- </p>\\n<p>an element of <em>formats</em> is an empty string."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; does not contain a date and time that corresponds to any element of &lt;em&gt;formats&lt;/em&gt;.","pos":[124238,124359],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>s</em> does not contain a date and time that corresponds to any element of <em>formats</em>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The hour component and the AM/PM designator in &lt;em&gt;s&lt;/em&gt; do not agree.&lt;/p&gt;\\n","pos":[124360,124459],"source":" </p>\\n<p>-or-</p>\\n<p>The hour component and the AM/PM designator in <em>s</em> do not agree.</p>\\n"},{"pos":[126208,126243],"content":"SpecifyKind(DateTime, DateTimeKind)","needQuote":true,"nodes":[{"content":"SpecifyKind(DateTime, DateTimeKind)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;A date and time.","pos":[127337,127358],"source":"\\n<p>A date and time."},{"content":"&lt;/p&gt;\\n","pos":[127359,127365],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.&lt;/p&gt;\\n","pos":[127434,127552],"source":"\\n<p>One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</p>\\n"},{"pos":[128208,128226],"content":"Subtract(DateTime)","needQuote":true,"nodes":[{"content":"Subtract(DateTime)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The date and time value to subtract.","pos":[128867,128908],"source":"\\n<p>The date and time value to subtract."},{"content":"&lt;/p&gt;\\n","pos":[128909,128915],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A time interval that is equal to the date and time represented by this instance minus the date and time represented by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[128977,129122],"source":"\\n<p>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <em>value</em>.</p>\\n"},{"pos":[129778,129796],"content":"Subtract(TimeSpan)","needQuote":true,"nodes":[{"content":"Subtract(TimeSpan)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The time interval to subtract.","pos":[130432,130467],"source":"\\n<p>The time interval to subtract."},{"content":"&lt;/p&gt;\\n","pos":[130468,130474],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that is equal to the date and time represented by this instance minus the time interval represented by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[130536,130675],"source":"\\n<p>An object that is equal to the date and time represented by this instance minus the time interval represented by <em>value</em>.</p>\\n"},{"pos":[131469,131498],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"pos":[132625,132651],"content":"IConvertible.GetTypeCode()","needQuote":true,"nodes":[{"content":"IConvertible.GetTypeCode()","pos":[0,26]}]},{"pos":[133747,133786],"content":"IConvertible.ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToBoolean(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[134921,134977],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[135094,135118],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[135678,135714],"content":"IConvertible.ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToByte(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[136828,136884],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[137001,137025],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[137573,137609],"content":"IConvertible.ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToChar(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[138723,138779],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[138896,138920],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[139480,139520],"content":"IConvertible.ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDateTime(IFormatProvider)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The current object.&lt;/p&gt;\\n","pos":[140603,140633],"source":"\\n<p>The current object.</p>\\n"},{"pos":[141206,141245],"content":"IConvertible.ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDecimal(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[142383,142439],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[142556,142580],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[143146,143184],"content":"IConvertible.ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDouble(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[144314,144370],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[144487,144511],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[145070,145107],"content":"IConvertible.ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt16(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[146229,146285],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[146402,146426],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[146981,147018],"content":"IConvertible.ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt32(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[148140,148196],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[148313,148337],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[148892,148929],"content":"IConvertible.ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt64(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[150049,150105],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[150222,150246],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[150801,150838],"content":"IConvertible.ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSByte(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[151960,152016],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[152133,152157],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[152715,152753],"content":"IConvertible.ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSingle(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[153882,153938],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.","pos":[154055,154073],"source":"\\n<p>In all cases."},{"content":"&lt;/p&gt;\\n","pos":[154074,154080],"source":" </p>\\n"},{"pos":[154672,154714],"content":"IConvertible.ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToType(Type, IFormatProvider)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The desired type.","pos":[155577,155599],"source":"\\n<p>The desired type."},{"content":"&lt;/p&gt;\\n","pos":[155600,155606],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[156253,156299],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[156300,156306],"source":" </p>\\n"},{"pos":[157194,157232],"content":"IConvertible.ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt16(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[158362,158418],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[158535,158559],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[159121,159159],"content":"IConvertible.ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt32(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[160289,160345],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[160462,160486],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[161048,161086],"content":"IConvertible.ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt64(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The return value for this member is not used.&lt;/p&gt;\\n","pos":[162214,162270],"source":"\\n<p>The return value for this member is not used.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.&lt;/p&gt;\\n","pos":[162387,162411],"source":"\\n<p>In all cases.</p>\\n"},{"pos":[162827,162837],"content":"ToBinary()","needQuote":true,"nodes":[{"content":"ToBinary()","pos":[0,10]}]},{"pos":[164206,164218],"content":"ToFileTime()","needQuote":true,"nodes":[{"content":"ToFileTime()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E.","pos":[165158,165261],"source":"\\n<p>The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E."},{"content":"UTC.","pos":[165262,165266]},{"content":"&lt;/p&gt;\\n","pos":[165267,165273],"source":" </p>\\n"},{"pos":[165895,165910],"content":"ToFileTimeUtc()","needQuote":true,"nodes":[{"content":"ToFileTimeUtc()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E.","pos":[166862,166965],"source":"\\n<p>The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E."},{"content":"UTC.","pos":[166966,166970]},{"content":"&lt;/p&gt;\\n","pos":[166971,166977],"source":" </p>\\n"},{"pos":[167590,167603],"content":"ToLocalTime()","needQuote":true,"nodes":[{"content":"ToLocalTime()","pos":[0,13]}]},{"pos":[169739,169749],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The date and time is outside the range of dates supported by the calendar used by the current culture.","pos":[170812,170919],"source":"\\n<p>The date and time is outside the range of dates supported by the calendar used by the current culture."},{"content":"&lt;/p&gt;\\n","pos":[170920,170926],"source":" </p>\\n"},{"pos":[171480,171505],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[172339,172408],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[172409,172415],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The date and time is outside the range of dates supported by the calendar used by &lt;em&gt;provider&lt;/em&gt;.","pos":[172782,172887],"source":"\\n<p>The date and time is outside the range of dates supported by the calendar used by <em>provider</em>."},{"content":"&lt;/p&gt;\\n","pos":[172888,172894],"source":" </p>\\n"},{"pos":[173480,173496],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A standard or custom date and time format string (see Remarks).","pos":[174313,174381],"source":"\\n<p>A standard or custom date and time format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[174382,174388],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The date and time is outside the range of dates supported by the calendar used by the current culture.&lt;/p&gt;\\n","pos":[175147,175260],"source":"\\n<p>The date and time is outside the range of dates supported by the calendar used by the current culture.</p>\\n"},{"pos":[175835,175868],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A standard or custom date and time format string.","pos":[176750,176804],"source":"\\n<p>A standard or custom date and time format string."},{"content":"&lt;/p&gt;\\n","pos":[176805,176811],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[176887,176956],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[176957,176963],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The date and time is outside the range of dates supported by the calendar used by &lt;em&gt;provider&lt;/em&gt;.","pos":[177744,177849],"source":"\\n<p>The date and time is outside the range of dates supported by the calendar used by <em>provider</em>."},{"content":"&lt;/p&gt;\\n","pos":[177850,177856],"source":" </p>\\n"},{"pos":[178440,178457],"content":"ToUniversalTime()","needQuote":true,"nodes":[{"content":"ToUniversalTime()","pos":[0,17]}]},{"pos":[180411,180441],"content":"TryParse(String, out DateTime)","needQuote":true,"nodes":[{"content":"TryParse(String, out DateTime)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A string containing a date and time to convert.","pos":[181308,181360],"source":"\\n<p>A string containing a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[181361,181367],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;s&lt;/em&gt; parameter was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[182039,182164],"source":"\\n<p>\\n<strong>true</strong> if the <em>s</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[183218,183281],"content":"TryParse(String, IFormatProvider, DateTimeStyles, out DateTime)","needQuote":true,"nodes":[{"content":"TryParse(String, IFormatProvider, DateTimeStyles, out DateTime)","pos":[0,63]}]},{"content":"\\n&lt;p&gt;A string containing a date and time to convert.","pos":[184391,184443],"source":"\\n<p>A string containing a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[184444,184450],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[184526,184618],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;s&lt;/em&gt; parameter was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[185667,185792],"source":"\\n<p>\\n<strong>true</strong> if the <em>s</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;provider&lt;/em&gt; is a neutral culture and cannot be used in a parsing operation.&lt;/p&gt;\\n","pos":[186576,186670],"source":"\\n<p>\\n<em>provider</em> is a neutral culture and cannot be used in a parsing operation.</p>\\n"},{"pos":[187941,188017],"content":"TryParseExact(String, String, IFormatProvider, DateTimeStyles, out DateTime)","needQuote":true,"nodes":[{"content":"TryParseExact(String, String, IFormatProvider, DateTimeStyles, out DateTime)","pos":[0,76]}]},{"content":"\\n&lt;p&gt;A string containing a date and time to convert.","pos":[189279,189331],"source":"\\n<p>A string containing a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[189332,189338],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The required format of &lt;em&gt;s&lt;/em&gt;.","pos":[189403,189442],"source":"\\n<p>The required format of <em>s</em>."},{"content":"See the Remarks section for more information.","pos":[189443,189488]},{"content":"&lt;/p&gt;\\n","pos":[189489,189495],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information about &lt;em&gt;s&lt;/em&gt;.","pos":[189571,189657],"source":"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[189658,189664],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of one or more enumeration values that indicate the permitted format of &lt;em&gt;s&lt;/em&gt;.","pos":[189750,189860],"source":"\\n<p>A bitwise combination of one or more enumeration values that indicate the permitted format of <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[189861,189867],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;s&lt;/em&gt; was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[190585,190696],"source":"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[192795,192873],"content":"TryParseExact(String, String[], IFormatProvider, DateTimeStyles, out DateTime)","needQuote":true,"nodes":[{"content":"TryParseExact(String, String[], IFormatProvider, DateTimeStyles, out DateTime)","pos":[0,78]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.","pos":[194170,194225],"source":"\\n<p>A string that contains a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[194226,194232],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of allowable formats of &lt;em&gt;s&lt;/em&gt;.","pos":[194300,194349],"source":"\\n<p>An array of allowable formats of <em>s</em>."},{"content":"See the Remarks section for more information.","pos":[194350,194395]},{"content":"&lt;/p&gt;\\n","pos":[194396,194402],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific format information about &lt;em&gt;s&lt;/em&gt;.","pos":[194478,194560],"source":"\\n<p>An object that supplies culture-specific format information about <em>s</em>."},{"content":"&lt;/p&gt;\\n","pos":[194561,194567],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;s&lt;/em&gt; parameter was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[195652,195777],"source":"\\n<p>\\n<strong>true</strong> if the <em>s</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[197454,197460],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[197596,197607],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[197804,197825],"content":"IComparable<DateTime>","needQuote":true,"nodes":[{"content":"IComparable&lt;DateTime&gt;","pos":[0,21],"source":"IComparable<DateTime>"}]},{"pos":[198019,198030],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[198074,198075],"content":"<","needQuote":true,"nodes":[]},{"pos":[198127,198135],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[198249,198260],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[198305,198308]},{"pos":[198367,198375],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[198416,198417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[198639,198651],"content":"IConvertible","needQuote":true,"nodes":[{"content":"IConvertible","pos":[0,12]}]},{"pos":[198849,198869],"content":"IEquatable<DateTime>","needQuote":true,"nodes":[{"content":"IEquatable&lt;DateTime&gt;","pos":[0,20],"source":"IEquatable<DateTime>"}]},{"pos":[199059,199069],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[199112,199113],"content":"<","needQuote":true,"nodes":[]},{"pos":[199165,199173],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[199286,199296],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[199340,199343]},{"pos":[199402,199410],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[199451,199452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[199671,199683],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[199888,199910],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[200058,200064],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[200131,200132],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[200182,200188],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[200249,200250]},{"pos":[200305,200311],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[200371,200372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[200469,200475],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[200542,200543],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[200593,200599],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[200660,200661]},{"pos":[200716,200722],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[200782,200783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[201028,201059],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[201225,201240],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[201316,201317],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[201367,201373],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[201434,201435]},{"pos":[201490,201496],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[201556,201557],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[201663,201678],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[201754,201755],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[201805,201811],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[201872,201873]},{"pos":[201928,201934],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[201994,201995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[202221,202230],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[202323,202330],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[202398,202399],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[202426,202427],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[202496,202503],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[202571,202572],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[202599,202600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[202743,202757],"content":"IComparable<T>","needQuote":true,"nodes":[{"content":"IComparable&lt;T&gt;","pos":[0,14],"source":"IComparable<T>"}]},{"pos":[202916,202927],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[202971,202972],"content":"<","needQuote":true,"nodes":[]},{"pos":[202999,203000],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[203100,203111],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[203156,203159]},{"pos":[203193,203194],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[203221,203222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[203398,203411],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[203566,203576],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[203619,203620],"content":"<","needQuote":true,"nodes":[]},{"pos":[203647,203648],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[203747,203757],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[203801,203804]},{"pos":[203838,203839],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[203866,203867],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[204051,204057],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[204204,204212],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[204362,204367],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[204515,204527],"content":"DateTimeKind","needQuote":true,"nodes":[{"content":"DateTimeKind","pos":[0,12]}]},{"pos":[204689,204694],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[204839,204848],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[205004,205012],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[205163,205169],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[205421,205440],"content":"CompareTo(DateTime)","needQuote":true,"nodes":[{"content":"CompareTo(DateTime)","pos":[0,19]}]},{"pos":[205666,205675],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[205746,205747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[205799,205807],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[205848,205849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[205931,205940],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[206014,206015],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[206067,206075],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[206116,206117],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[206404,206416],"content":"CompareTo(T)","needQuote":true,"nodes":[{"content":"CompareTo(T)","pos":[0,12]}]},{"pos":[206586,206595],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[206652,206653],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[206680,206681],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[206708,206709],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[206791,206800],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[206860,206861],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[206888,206889],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[206916,206917],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[207242,207258],"content":"Equals(DateTime)","needQuote":true,"nodes":[{"content":"Equals(DateTime)","pos":[0,16]}]},{"pos":[207472,207478],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[207545,207546],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[207598,207606],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[207647,207648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[207726,207732],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[207802,207803],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[207855,207863],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[207904,207905],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[208177,208184],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[208332,208341],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[208499,208505],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[208558,208559],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[208586,208587],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[208614,208615],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[208693,208699],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[208755,208756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[208783,208784],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[208811,208812],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[209061,209075],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[209200,209206],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[209255,209256],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[209306,209312],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[209372,209373],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[209459,209465],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[209514,209515],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[209565,209571],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[209631,209632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[209813,209822],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[209941,209949],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[210077,210083],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[210144,210146]},{"pos":[210211,210217],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[210277,210279],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[210414,210418],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[210566,210581],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[210778,210791],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[210898,210909],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[210963,210964],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[210991,210992],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[211068,211079],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[211133,211134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[211161,211162],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[211329,211335],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[211516,211530],"content":"DateTimeStyles","needQuote":true,"nodes":[{"content":"DateTimeStyles","pos":[0,14]}]},{"pos":[211717,211737],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[211951,211968],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[212103,212112],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[212166,212167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[212217,212223],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[212283,212284],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[212375,212384],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[212438,212439],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[212489,212495],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[212555,212556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[212775,212788],"content":"GetTypeCode()","needQuote":true,"nodes":[{"content":"GetTypeCode()","pos":[0,13]}]},{"pos":[212901,212912],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[212969,212970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[212997,212998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[213077,213088],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[213145,213146],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[213173,213174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[213349,213357],"content":"TypeCode","needQuote":true,"nodes":[{"content":"TypeCode","pos":[0,8]}]},{"pos":[213561,213587],"content":"ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToBoolean(IFormatProvider)","pos":[0,26]}]},{"pos":[213742,213751],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[213806,213807],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[213866,213881],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[213929,213930],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[214031,214040],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[214095,214096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[214155,214170],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[214218,214219],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[214477,214500],"content":"ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToByte(IFormatProvider)","pos":[0,23]}]},{"pos":[214649,214655],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[214707,214708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[214767,214782],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[214830,214831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[214929,214935],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[214987,214988],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[215047,215062],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[215110,215111],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[215311,215315],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[215504,215527],"content":"ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToChar(IFormatProvider)","pos":[0,23]}]},{"pos":[215676,215682],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[215734,215735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[215794,215809],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[215857,215858],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[215956,215962],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[216014,216015],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[216074,216089],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[216137,216138],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[216394,216421],"content":"ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDateTime(IFormatProvider)","pos":[0,27]}]},{"pos":[216578,216588],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[216644,216645],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[216704,216719],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[216767,216768],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[216870,216880],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[216936,216937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[216996,217011],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[217059,217060],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[217323,217349],"content":"ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDecimal(IFormatProvider)","pos":[0,26]}]},{"pos":[217504,217513],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[217568,217569],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[217628,217643],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[217691,217692],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[217793,217802],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[217857,217858],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[217917,217932],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[217980,217981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[218190,218197],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[218397,218422],"content":"ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDouble(IFormatProvider)","pos":[0,25]}]},{"pos":[218575,218583],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[218637,218638],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[218697,218712],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[218760,218761],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[218861,218869],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[218923,218924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[218983,218998],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[219046,219047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[219304,219328],"content":"ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt16(IFormatProvider)","pos":[0,24]}]},{"pos":[219479,219486],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[219539,219540],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[219599,219614],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[219662,219663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[219762,219769],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[219822,219823],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[219882,219897],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[219945,219946],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[220149,220154],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[220347,220371],"content":"ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt32(IFormatProvider)","pos":[0,24]}]},{"pos":[220522,220529],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[220582,220583],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[220642,220657],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[220705,220706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[220805,220812],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[220865,220866],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[220925,220940],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[220988,220989],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[221244,221268],"content":"ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt64(IFormatProvider)","pos":[0,24]}]},{"pos":[221419,221426],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[221479,221480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[221539,221554],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[221602,221603],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[221702,221709],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[221762,221763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[221822,221837],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[221885,221886],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[222141,222165],"content":"ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSByte(IFormatProvider)","pos":[0,24]}]},{"pos":[222316,222323],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[222376,222377],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[222436,222451],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[222499,222500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[222599,222606],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[222659,222660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[222719,222734],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[222782,222783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[222986,222991],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[223185,223210],"content":"ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSingle(IFormatProvider)","pos":[0,25]}]},{"pos":[223363,223371],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[223425,223426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[223485,223500],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[223548,223549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[223649,223657],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[223711,223712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[223771,223786],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[223834,223835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[224041,224047],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[224254,224283],"content":"ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToType(Type, IFormatProvider)","pos":[0,29]}]},{"pos":[224457,224463],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[224515,224516],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[224564,224568],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[224606,224607]},{"pos":[224671,224686],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[224734,224735],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[224845,224851],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[224903,224904],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[224952,224956],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[224994,224995]},{"pos":[225059,225074],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[225122,225123],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[225341,225345],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[225536,225561],"content":"ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt16(IFormatProvider)","pos":[0,25]}]},{"pos":[225714,225722],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[225776,225777],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[225836,225851],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[225899,225900],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[226000,226008],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[226062,226063],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[226122,226137],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[226185,226186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[226392,226398],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[226595,226620],"content":"ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt32(IFormatProvider)","pos":[0,25]}]},{"pos":[226773,226781],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[226835,226836],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[226895,226910],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[226958,226959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[227059,227067],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[227121,227122],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[227181,227196],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[227244,227245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[227451,227457],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[227654,227679],"content":"ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt64(IFormatProvider)","pos":[0,25]}]},{"pos":[227832,227840],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[227894,227895],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[227954,227969],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[228017,228018],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[228118,228126],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[228180,228181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[228240,228255],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[228303,228304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[228510,228516],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[228683,228693],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[228794,228802],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[228853,228854],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[228881,228882],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[228955,228963],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[229014,229015],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[229042,229043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[229256,229281],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"pos":[229434,229442],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[229496,229497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[229556,229571],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[229619,229620],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[229720,229728],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[229782,229783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[229842,229857],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[229905,229906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[230177,230210],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[230392,230400],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[230454,230455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[230505,230511],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[230572,230573]},{"pos":[230637,230652],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[230700,230701],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[230815,230823],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[230877,230878],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[230928,230934],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[230995,230996]},{"pos":[231060,231075],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[231123,231124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[231356,231383],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[231602,231619],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[231806,231821],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[231991,232012],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[232199,232219],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[232421,232442],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]}],"content":"items:\n- uid: System.DateTime\n  commentId: T:System.DateTime\n  id: DateTime\n  parent: System\n  children:\n  - System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)\n  - System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)\n  - System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)\n  - System.DateTime.#ctor(System.Int64)\n  - System.DateTime.#ctor(System.Int64,System.DateTimeKind)\n  - System.DateTime.Add(System.TimeSpan)\n  - System.DateTime.AddDays(System.Double)\n  - System.DateTime.AddHours(System.Double)\n  - System.DateTime.AddMilliseconds(System.Double)\n  - System.DateTime.AddMinutes(System.Double)\n  - System.DateTime.AddMonths(System.Int32)\n  - System.DateTime.AddSeconds(System.Double)\n  - System.DateTime.AddTicks(System.Int64)\n  - System.DateTime.AddYears(System.Int32)\n  - System.DateTime.Compare(System.DateTime,System.DateTime)\n  - System.DateTime.CompareTo(System.DateTime)\n  - System.DateTime.Date\n  - System.DateTime.Day\n  - System.DateTime.DayOfWeek\n  - System.DateTime.DayOfYear\n  - System.DateTime.DaysInMonth(System.Int32,System.Int32)\n  - System.DateTime.Equals(System.DateTime)\n  - System.DateTime.Equals(System.DateTime,System.DateTime)\n  - System.DateTime.Equals(System.Object)\n  - System.DateTime.FromBinary(System.Int64)\n  - System.DateTime.FromFileTime(System.Int64)\n  - System.DateTime.FromFileTimeUtc(System.Int64)\n  - System.DateTime.GetDateTimeFormats\n  - System.DateTime.GetDateTimeFormats(System.Char)\n  - System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)\n  - System.DateTime.GetDateTimeFormats(System.IFormatProvider)\n  - System.DateTime.GetHashCode\n  - System.DateTime.Hour\n  - System.DateTime.IsDaylightSavingTime\n  - System.DateTime.IsLeapYear(System.Int32)\n  - System.DateTime.Kind\n  - System.DateTime.MaxValue\n  - System.DateTime.Millisecond\n  - System.DateTime.Minute\n  - System.DateTime.MinValue\n  - System.DateTime.Month\n  - System.DateTime.Now\n  - System.DateTime.op_Addition(System.DateTime,System.TimeSpan)\n  - System.DateTime.op_Equality(System.DateTime,System.DateTime)\n  - System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)\n  - System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)\n  - System.DateTime.op_Inequality(System.DateTime,System.DateTime)\n  - System.DateTime.op_LessThan(System.DateTime,System.DateTime)\n  - System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)\n  - System.DateTime.op_Subtraction(System.DateTime,System.DateTime)\n  - System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)\n  - System.DateTime.Parse(System.String)\n  - System.DateTime.Parse(System.String,System.IFormatProvider)\n  - System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  - System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)\n  - System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  - System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)\n  - System.DateTime.Second\n  - System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)\n  - System.DateTime.Subtract(System.DateTime)\n  - System.DateTime.Subtract(System.TimeSpan)\n  - System.DateTime.System#IComparable#CompareTo(System.Object)\n  - System.DateTime.System#IConvertible#GetTypeCode\n  - System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)\n  - System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)\n  - System.DateTime.Ticks\n  - System.DateTime.TimeOfDay\n  - System.DateTime.ToBinary\n  - System.DateTime.Today\n  - System.DateTime.ToFileTime\n  - System.DateTime.ToFileTimeUtc\n  - System.DateTime.ToLocalTime\n  - System.DateTime.ToString\n  - System.DateTime.ToString(System.IFormatProvider)\n  - System.DateTime.ToString(System.String)\n  - System.DateTime.ToString(System.String,System.IFormatProvider)\n  - System.DateTime.ToUniversalTime\n  - System.DateTime.TryParse(System.String,System.DateTime@)\n  - System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  - System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  - System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  - System.DateTime.UtcNow\n  - System.DateTime.Year\n  langs:\n  - csharp\n  - vb\n  name: DateTime\n  fullName: System.DateTime\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DateTime\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 53\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents an instant in time, typically expressed as a date and time of day. </p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Auto)]\n\n      [Serializable]\n\n      public struct DateTime : IComparable, IFormattable, IConvertible, ISerializable, IComparable<DateTime>, IEquatable<DateTime>\n    content.vb: >-\n      <StructLayout(LayoutKind.Auto)>\n\n      <Serializable>\n\n      Public Structure DateTime\n          Implements IComparable, IFormattable, IConvertible, ISerializable, IComparable(Of Date), IEquatable(Of Date)\n  implements:\n  - System.IComparable\n  - System.IComparable{System.DateTime}\n  - System.IConvertible\n  - System.IEquatable{System.DateTime}\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: DateTime\n- uid: System.DateTime.MaxValue\n  commentId: F:System.DateTime.MaxValue\n  id: MaxValue\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: MaxValue\n  fullName: System.DateTime.MaxValue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaxValue\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 113\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the largest possible value of <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly DateTime MaxValue\n    content.vb: Public Shared ReadOnly MaxValue As Date\n    return:\n      type: System.DateTime\n  seealso:\n  - type: System.DateTime.MinValue\n    commentId: F:System.DateTime.MinValue\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: DateTime.MaxValue\n- uid: System.DateTime.MinValue\n  commentId: F:System.DateTime.MinValue\n  id: MinValue\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: MinValue\n  fullName: System.DateTime.MinValue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MinValue\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 112\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the smallest possible value of <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly DateTime MinValue\n    content.vb: Public Shared ReadOnly MinValue As Date\n    return:\n      type: System.DateTime\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: DateTime.MinValue\n- uid: System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32,System.Int32)'\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: DateTime(Int32, Int32, Int32)\n  fullName: System.DateTime.DateTime(System.Int32, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 176\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the specified year, month, and day.</p>\\n\"\n  syntax:\n    content: public DateTime(int year, int month, int day)\n    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer)\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>The year (1 through 9999). </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>The month (1 through 12). </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>The day (1 through the number of days in <em>month</em>). </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is less than 1 or greater than 9999.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is less than 1 or greater than 12.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is less than 1 or greater than the number of days in <em>month</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.DateTime(Int32, Int32, Int32)\n- uid: System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)'\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: DateTime(Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.DateTime.DateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 191\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the specified year, month, day, hour, minute, and second.</p>\\n\"\n  syntax:\n    content: public DateTime(int year, int month, int day, int hour, int minute, int second)\n    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>The year (1 through 9999). </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>The month (1 through 12). </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>The day (1 through the number of days in <em>month</em>). </p>\\n\"\n    - id: hour\n      type: System.Int32\n      description: \"\\n<p>The hours (0 through 23). </p>\\n\"\n    - id: minute\n      type: System.Int32\n      description: \"\\n<p>The minutes (0 through 59). </p>\\n\"\n    - id: second\n      type: System.Int32\n      description: \"\\n<p>The seconds (0 through 59). </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is less than 1 or greater than 9999. </p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is less than 1 or greater than 12. </p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is less than 1 or greater than the number of days in <em>month</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than 0 or greater than 23. </p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than 0 or greater than 59. </p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than 0 or greater than 59. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.DateTime(Int32, Int32, Int32, Int32, Int32, Int32)\n- uid: System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)\n  commentId: M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)\n  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)'\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: DateTime(Int32, Int32, Int32, Int32, Int32, Int32, DateTimeKind)\n  fullName: System.DateTime.DateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.DateTimeKind)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 195\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.</p>\\n\"\n  syntax:\n    content: public DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind)\n    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>The year (1 through 9999). </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>The month (1 through 12). </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>The day (1 through the number of days in <em>month</em>). </p>\\n\"\n    - id: hour\n      type: System.Int32\n      description: \"\\n<p>The hours (0 through 23). </p>\\n\"\n    - id: minute\n      type: System.Int32\n      description: \"\\n<p>The minutes (0 through 59). </p>\\n\"\n    - id: second\n      type: System.Int32\n      description: \"\\n<p>The seconds (0 through 59). </p>\\n\"\n    - id: kind\n      type: System.DateTimeKind\n      description: \"\\n<p>One of the enumeration values that indicates whether <em>year</em>, <em>month</em>, <em>day</em>, <em>hour</em>, <em>minute</em> and <em>second</em> specify a local time, Coordinated Universal Time (UTC), or neither.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is less than 1 or greater than 9999. </p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is less than 1 or greater than 12. </p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is less than 1 or greater than the number of days in <em>month</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than 0 or greater than 23. </p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than 0 or greater than 59. </p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than 0 or greater than 59. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>kind</em> is not one of the <xref href=\\\"System.DateTimeKind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.DateTime(Int32, Int32, Int32, Int32, Int32, Int32, DateTimeKind)\n- uid: System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)'\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: DateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.DateTime.DateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 217\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the specified year, month, day, hour, minute, second, and millisecond.</p>\\n\"\n  syntax:\n    content: public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond)\n    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>The year (1 through 9999). </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>The month (1 through 12). </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>The day (1 through the number of days in <em>month</em>). </p>\\n\"\n    - id: hour\n      type: System.Int32\n      description: \"\\n<p>The hours (0 through 23). </p>\\n\"\n    - id: minute\n      type: System.Int32\n      description: \"\\n<p>The minutes (0 through 59). </p>\\n\"\n    - id: second\n      type: System.Int32\n      description: \"\\n<p>The seconds (0 through 59). </p>\\n\"\n    - id: millisecond\n      type: System.Int32\n      description: \"\\n<p>The milliseconds (0 through 999). </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is less than 1 or greater than 9999.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is less than 1 or greater than 12.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is less than 1 or greater than the number of days in <em>month</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than 0 or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than 0 or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than 0 or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than 0 or greater than 999. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.DateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n- uid: System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)\n  commentId: M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)\n  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)'\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: DateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, DateTimeKind)\n  fullName: System.DateTime.DateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.DateTimeKind)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 229\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.</p>\\n\"\n  syntax:\n    content: public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind)\n    content.vb: Public Sub New(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>The year (1 through 9999). </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>The month (1 through 12). </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>The day (1 through the number of days in <em>month</em>). </p>\\n\"\n    - id: hour\n      type: System.Int32\n      description: \"\\n<p>The hours (0 through 23). </p>\\n\"\n    - id: minute\n      type: System.Int32\n      description: \"\\n<p>The minutes (0 through 59). </p>\\n\"\n    - id: second\n      type: System.Int32\n      description: \"\\n<p>The seconds (0 through 59). </p>\\n\"\n    - id: millisecond\n      type: System.Int32\n      description: \"\\n<p>The milliseconds (0 through 999). </p>\\n\"\n    - id: kind\n      type: System.DateTimeKind\n      description: \"\\n<p>One of the enumeration values that indicates whether <em>year</em>, <em>month</em>, <em>day</em>, <em>hour</em>, <em>minute</em>, <em>second</em>, and <em>millisecond</em> specify a local time, Coordinated Universal Time (UTC), or neither.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is less than 1 or greater than 9999.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is less than 1 or greater than 12.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is less than 1 or greater than the number of days in <em>month</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than 0 or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than 0 or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than 0 or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than 0 or greater than 999. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>kind</em> is not one of the <xref href=\\\"System.DateTimeKind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.DateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, DateTimeKind)\n- uid: System.DateTime.#ctor(System.Int64)\n  commentId: M:System.DateTime.#ctor(System.Int64)\n  id: '#ctor(System.Int64)'\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: DateTime(Int64)\n  fullName: System.DateTime.DateTime(System.Int64)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 142\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a specified number of ticks.</p>\\n\"\n  syntax:\n    content: public DateTime(long ticks)\n    content.vb: Public Sub New(ticks As Long)\n    parameters:\n    - id: ticks\n      type: System.Int64\n      description: \"\\n<p>A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>ticks</em> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.DateTime(Int64)\n- uid: System.DateTime.#ctor(System.Int64,System.DateTimeKind)\n  commentId: M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)\n  id: '#ctor(System.Int64,System.DateTimeKind)'\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: DateTime(Int64, DateTimeKind)\n  fullName: System.DateTime.DateTime(System.Int64, System.DateTimeKind)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 153\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.</p>\\n\"\n  syntax:\n    content: public DateTime(long ticks, DateTimeKind kind)\n    content.vb: Public Sub New(ticks As Long, kind As DateTimeKind)\n    parameters:\n    - id: ticks\n      type: System.Int64\n      description: \"\\n<p>A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar. </p>\\n\"\n    - id: kind\n      type: System.DateTimeKind\n      description: \"\\n<p>One of the enumeration values that indicates whether <em>ticks</em> specifies a local time, Coordinated Universal Time (UTC), or neither.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>ticks</em> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>kind</em> is not one of the <xref href=\\\"System.DateTimeKind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.DateTime(Int64, DateTimeKind)\n- uid: System.DateTime.Date\n  commentId: P:System.DateTime.Date\n  id: Date\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Date\n  fullName: System.DateTime.Date\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Date\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 733\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the date component of this instance.</p>\\n\"\n  syntax:\n    content: public DateTime Date { get; }\n    content.vb: Public ReadOnly Property Date As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>A new object with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.Date\n- uid: System.DateTime.Day\n  commentId: P:System.DateTime.Day\n  id: Day\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Day\n  fullName: System.DateTime.Day\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Day\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 790\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the day of the month represented by this instance.</p>\\n\"\n  syntax:\n    content: public int Day { get; }\n    content.vb: Public ReadOnly Property Day As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The day component, expressed as a value between 1 and 31.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.Day\n- uid: System.DateTime.DayOfWeek\n  commentId: P:System.DateTime.DayOfWeek\n  id: DayOfWeek\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: DayOfWeek\n  fullName: System.DateTime.DayOfWeek\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DayOfWeek\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 803\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the day of the week represented by this instance.</p>\\n\"\n  syntax:\n    content: public DayOfWeek DayOfWeek { get; }\n    content.vb: Public ReadOnly Property DayOfWeek As DayOfWeek\n    parameters: []\n    return:\n      type: System.DayOfWeek\n      description: \"\\n<p>An enumerated constant that indicates the day of the week of this <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  seealso:\n  - type: System.DateTime.Ticks\n    commentId: P:System.DateTime.Ticks\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.DayOfWeek\n- uid: System.DateTime.DayOfYear\n  commentId: P:System.DateTime.DayOfYear\n  id: DayOfYear\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: DayOfYear\n  fullName: System.DateTime.DayOfYear\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DayOfYear\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 814\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the day of the year represented by this instance.</p>\\n\"\n  syntax:\n    content: public int DayOfYear { get; }\n    content.vb: Public ReadOnly Property DayOfYear As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The day of the year, expressed as a value between 1 and 366.</p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.DayOfYear\n- uid: System.DateTime.Hour\n  commentId: P:System.DateTime.Hour\n  id: Hour\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Hour\n  fullName: System.DateTime.Hour\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Hour\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 832\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the hour component of the date represented by this instance.</p>\\n\"\n  syntax:\n    content: public int Hour { get; }\n    content.vb: Public ReadOnly Property Hour As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hour component, expressed as a value between 0 and 23.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.Hour\n- uid: System.DateTime.Kind\n  commentId: P:System.DateTime.Kind\n  id: Kind\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Kind\n  fullName: System.DateTime.Kind\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Kind\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 844\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.</p>\\n\"\n  syntax:\n    content: public DateTimeKind Kind { get; }\n    content.vb: Public ReadOnly Property Kind As DateTimeKind\n    parameters: []\n    return:\n      type: System.DateTimeKind\n      description: \"\\n<p>One of the enumeration values that indicates what the current time represents. The default is <xref href=\\\"System.DateTimeKind.Unspecified\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)\n    commentId: M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.Kind\n- uid: System.DateTime.Millisecond\n  commentId: P:System.DateTime.Millisecond\n  id: Millisecond\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Millisecond\n  fullName: System.DateTime.Millisecond\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Millisecond\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 861\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the milliseconds component of the date represented by this instance.</p>\\n\"\n  syntax:\n    content: public int Millisecond { get; }\n    content.vb: Public ReadOnly Property Millisecond As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The milliseconds component, expressed as a value between 0 and 999.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.Millisecond\n- uid: System.DateTime.Minute\n  commentId: P:System.DateTime.Minute\n  id: Minute\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Minute\n  fullName: System.DateTime.Minute\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Minute\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 872\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the minute component of the date represented by this instance.</p>\\n\"\n  syntax:\n    content: public int Minute { get; }\n    content.vb: Public ReadOnly Property Minute As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The minute component, expressed as a value between 0 and 59.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.Minute\n- uid: System.DateTime.Month\n  commentId: P:System.DateTime.Month\n  id: Month\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Month\n  fullName: System.DateTime.Month\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Month\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 883\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the month component of the date represented by this instance.</p>\\n\"\n  syntax:\n    content: public int Month { get; }\n    content.vb: Public ReadOnly Property Month As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The month component, expressed as a value between 1 and 12.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.Month\n- uid: System.DateTime.Now\n  commentId: P:System.DateTime.Now\n  id: Now\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Now\n  fullName: System.DateTime.Now\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Now\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 896\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is set to the current date and time on this computer, expressed as the local time.</p>\\n\"\n  syntax:\n    content: public static DateTime Now { get; }\n    content.vb: Public Shared ReadOnly Property Now As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose value is the current local date and time.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.Now\n    commentId: P:System.DateTimeOffset.Now\n  - type: System.DateTime.UtcNow\n    commentId: P:System.DateTime.UtcNow\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: DateTime.Now\n- uid: System.DateTime.Second\n  commentId: P:System.DateTime.Second\n  id: Second\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Second\n  fullName: System.DateTime.Second\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Second\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 936\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the seconds component of the date represented by this instance.</p>\\n\"\n  syntax:\n    content: public int Second { get; }\n    content.vb: Public ReadOnly Property Second As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The seconds component, expressed as a value between 0 and 59.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.Second\n- uid: System.DateTime.Ticks\n  commentId: P:System.DateTime.Ticks\n  id: Ticks\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Ticks\n  fullName: System.DateTime.Ticks\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ticks\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 948\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the number of ticks that represent the date and time of this instance.</p>\\n\"\n  syntax:\n    content: public long Ticks { get; }\n    content.vb: Public ReadOnly Property Ticks As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The number of ticks that represent the date and time of this instance. The value is between <strong>DateTime.MinValue.Ticks</strong> and <strong>DateTime.MaxValue.Ticks</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.Ticks\n- uid: System.DateTime.TimeOfDay\n  commentId: P:System.DateTime.TimeOfDay\n  id: TimeOfDay\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: TimeOfDay\n  fullName: System.DateTime.TimeOfDay\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TimeOfDay\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 957\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the time of day for this instance.</p>\\n\"\n  syntax:\n    content: public TimeSpan TimeOfDay { get; }\n    content.vb: Public ReadOnly Property TimeOfDay As TimeSpan\n    parameters: []\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>A time interval that represents the fraction of the day that has elapsed since midnight.</p>\\n\"\n  seealso:\n  - type: System.TimeSpan\n    commentId: T:System.TimeSpan\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.TimeOfDay\n- uid: System.DateTime.Today\n  commentId: P:System.DateTime.Today\n  id: Today\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Today\n  fullName: System.DateTime.Today\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Today\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 967\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the current date.</p>\\n\"\n  syntax:\n    content: public static DateTime Today { get; }\n    content.vb: Public Shared ReadOnly Property Today As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object that is set to today's date, with the time component set to 00:00:00.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Now\n    commentId: P:System.DateTime.Now\n  - type: System.DateTime.TimeOfDay\n    commentId: P:System.DateTime.TimeOfDay\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: DateTime.Today\n- uid: System.DateTime.UtcNow\n  commentId: P:System.DateTime.UtcNow\n  id: UtcNow\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: UtcNow\n  fullName: System.DateTime.UtcNow\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UtcNow\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 914\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</p>\\n\"\n  syntax:\n    content: >-\n      public static DateTime UtcNow\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property UtcNow As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose value is the current UTC date and time.</p>\\n\"\n  seealso:\n  - type: System.DateTimeOffset.UtcNow\n    commentId: P:System.DateTimeOffset.UtcNow\n  - type: System.TimeZone.GetUtcOffset(System.DateTime)\n    commentId: M:System.TimeZone.GetUtcOffset(System.DateTime)\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: DateTime.UtcNow\n- uid: System.DateTime.Year\n  commentId: P:System.DateTime.Year\n  id: Year\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Year\n  fullName: System.DateTime.Year\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Year\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 976\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the year component of the date represented by this instance.</p>\\n\"\n  syntax:\n    content: public int Year { get; }\n    content.vb: Public ReadOnly Property Year As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The year, between 1 and 9999.</p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.Globalization.Calendar\n    commentId: T:System.Globalization.Calendar\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DateTime.Year\n- uid: System.DateTime.Add(System.TimeSpan)\n  commentId: M:System.DateTime.Add(System.TimeSpan)\n  id: Add(System.TimeSpan)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Add(TimeSpan)\n  fullName: System.DateTime.Add(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 338\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that adds the value of the specified <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTime Add(TimeSpan value)\n    content.vb: Public Function Add(value As TimeSpan) As Date\n    parameters:\n    - id: value\n      type: System.TimeSpan\n      description: \"\\n<p>A positive or negative time interval. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.TimeSpan\n    commentId: T:System.TimeSpan\n  - type: System.TimeSpan.Add(System.TimeSpan)\n    commentId: M:System.TimeSpan.Add(System.TimeSpan)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.Add(TimeSpan)\n- uid: System.DateTime.AddDays(System.Double)\n  commentId: M:System.DateTime.AddDays(System.Double)\n  id: AddDays(System.Double)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: AddDays(Double)\n  fullName: System.DateTime.AddDays(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddDays\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 357\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that adds the specified number of days to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTime AddDays(double value)\n    content.vb: Public Function AddDays(value As Double) As Date\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A number of whole and fractional days. The <em>value</em> parameter can be negative or positive. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.AddDays(Double)\n- uid: System.DateTime.AddHours(System.Double)\n  commentId: M:System.DateTime.AddHours(System.Double)\n  id: AddHours(System.Double)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: AddHours(Double)\n  fullName: System.DateTime.AddHours(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddHours\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 367\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that adds the specified number of hours to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTime AddHours(double value)\n    content.vb: Public Function AddHours(value As Double) As Date\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A number of whole and fractional hours. The <em>value</em> parameter can be negative or positive. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.DateTime.Add(System.TimeSpan)\n    commentId: M:System.DateTime.Add(System.TimeSpan)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.AddHours(Double)\n- uid: System.DateTime.AddMilliseconds(System.Double)\n  commentId: M:System.DateTime.AddMilliseconds(System.Double)\n  id: AddMilliseconds(System.Double)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: AddMilliseconds(Double)\n  fullName: System.DateTime.AddMilliseconds(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMilliseconds\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 377\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that adds the specified number of milliseconds to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTime AddMilliseconds(double value)\n    content.vb: Public Function AddMilliseconds(value As Double) As Date\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A number of whole and fractional milliseconds. The <em>value</em> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.AddMilliseconds(Double)\n- uid: System.DateTime.AddMinutes(System.Double)\n  commentId: M:System.DateTime.AddMinutes(System.Double)\n  id: AddMinutes(System.Double)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: AddMinutes(Double)\n  fullName: System.DateTime.AddMinutes(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMinutes\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 387\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that adds the specified number of minutes to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTime AddMinutes(double value)\n    content.vb: Public Function AddMinutes(value As Double) As Date\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A number of whole and fractional minutes. The <em>value</em> parameter can be negative or positive. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.AddMinutes(Double)\n- uid: System.DateTime.AddMonths(System.Int32)\n  commentId: M:System.DateTime.AddMonths(System.Int32)\n  id: AddMonths(System.Int32)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: AddMonths(Int32)\n  fullName: System.DateTime.AddMonths(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMonths\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 408\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that adds the specified number of months to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTime AddMonths(int months)\n    content.vb: Public Function AddMonths(months As Integer) As Date\n    parameters:\n    - id: months\n      type: System.Int32\n      description: \"\\n<p>A number of months. The <em>months</em> parameter can be negative or positive. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by this instance and <em>months</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>months</em> is less than -120,000 or greater than 120,000. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.AddMonths(Int32)\n- uid: System.DateTime.AddSeconds(System.Double)\n  commentId: M:System.DateTime.AddSeconds(System.Double)\n  id: AddSeconds(System.Double)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: AddSeconds(Double)\n  fullName: System.DateTime.AddSeconds(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddSeconds\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 437\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that adds the specified number of seconds to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTime AddSeconds(double value)\n    content.vb: Public Function AddSeconds(value As Double) As Date\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A number of whole and fractional seconds. The <em>value</em> parameter can be negative or positive. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.AddSeconds(Double)\n- uid: System.DateTime.AddTicks(System.Int64)\n  commentId: M:System.DateTime.AddTicks(System.Int64)\n  id: AddTicks(System.Int64)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: AddTicks(Int64)\n  fullName: System.DateTime.AddTicks(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddTicks\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 445\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that adds the specified number of ticks to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTime AddTicks(long value)\n    content.vb: Public Function AddTicks(value As Long) As Date\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>A number of 100-nanosecond ticks. The <em>value</em> parameter can be positive or negative. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by this instance and the time represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Int64\n    commentId: T:System.Int64\n  - type: System.DateTime.Ticks\n    commentId: P:System.DateTime.Ticks\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.AddTicks(Int64)\n- uid: System.DateTime.AddYears(System.Int32)\n  commentId: M:System.DateTime.AddYears(System.Int32)\n  id: AddYears(System.Int32)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: AddYears(Int32)\n  fullName: System.DateTime.AddYears(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddYears\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 461\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that adds the specified number of years to the value of this instance.</p>\\n\"\n  syntax:\n    content: public DateTime AddYears(int value)\n    content.vb: Public Function AddYears(value As Integer) As Date\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>A number of years. The <em>value</em> parameter can be negative or positive. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>value</em> or the resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.AddYears(Int32)\n- uid: System.DateTime.Compare(System.DateTime,System.DateTime)\n  commentId: M:System.DateTime.Compare(System.DateTime,System.DateTime)\n  id: Compare(System.DateTime,System.DateTime)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Compare(DateTime, DateTime)\n  fullName: System.DateTime.Compare(System.DateTime, System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 470\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.</p>\\n\"\n  syntax:\n    content: public static int Compare(DateTime t1, DateTime t2)\n    content.vb: Public Shared Function Compare(t1 As Date, t2 As Date) As Integer\n    parameters:\n    - id: t1\n      type: System.DateTime\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: t2\n      type: System.DateTime\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number indicating the relative values of <em>t1</em> and <em>t2</em>.</p>\\n<p>Value Type </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>t1</em> is earlier than <em>t2</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>t1</em> is the same as <em>t2</em>. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>t1</em> is later than <em>t2</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.DateTime.CompareTo(System.Object)\n    commentId: M:System.DateTime.CompareTo(System.Object)\n  - type: System.DateTime.Equals(System.Object)\n    commentId: M:System.DateTime.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.Compare(DateTime, DateTime)\n- uid: System.DateTime.CompareTo(System.DateTime)\n  commentId: M:System.DateTime.CompareTo(System.DateTime)\n  id: CompareTo(System.DateTime)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(DateTime)\n  fullName: System.DateTime.CompareTo(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareTo\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 493\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares the value of this instance to a specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public int CompareTo(DateTime value)\n    content.vb: Public Function CompareTo(value As Date) As Integer\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: \"\\n<p>The object to compare to the current instance. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number indicating the relative values of this instance and the <em>value</em> parameter.</p>\\n<p>Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is earlier than <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is later than <em>value</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.DateTime.Compare(System.DateTime,System.DateTime)\n    commentId: M:System.DateTime.Compare(System.DateTime,System.DateTime)\n  - type: System.DateTime.Equals(System.Object)\n    commentId: M:System.DateTime.Equals(System.Object)\n  implements:\n  - System.IComparable{System.DateTime}.CompareTo(System.DateTime)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.CompareTo(DateTime)\n- uid: System.DateTime.DaysInMonth(System.Int32,System.Int32)\n  commentId: M:System.DateTime.DaysInMonth(System.Int32,System.Int32)\n  id: DaysInMonth(System.Int32,System.Int32)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: DaysInMonth(Int32, Int32)\n  fullName: System.DateTime.DaysInMonth(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DaysInMonth\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 527\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the number of days in the specified month and year.</p>\\n\"\n  syntax:\n    content: public static int DaysInMonth(int year, int month)\n    content.vb: Public Shared Function DaysInMonth(year As Integer, month As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>The year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>The month (a number ranging from 1 to 12). </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in <em>month</em> for the specified <em>year</em>.</p>\\n<p>For example, if <em>month</em> equals 2 for February, the return value is 28 or 29 depending upon whether <em>year</em> is a leap year.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>month</em> is less than 1 or greater than 12.</p>\\n<p>-or-</p>\\n<p>\\n<em>year</em> is less than 1 or greater than 9999.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.DaysInMonth(Int32, Int32)\n- uid: System.DateTime.Equals(System.DateTime)\n  commentId: M:System.DateTime.Equals(System.DateTime)\n  id: Equals(System.DateTime)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Equals(DateTime)\n  fullName: System.DateTime.Equals(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 583\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether the value of this instance is equal to the value of the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public bool Equals(DateTime value)\n    content.vb: Public Function Equals(value As Date) As Boolean\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: \"\\n<p>The object to compare to this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter equals the value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Equals(System.Object)\n    commentId: M:System.DateTime.Equals(System.Object)\n  - type: System.DateTime.Compare(System.DateTime,System.DateTime)\n    commentId: M:System.DateTime.Compare(System.DateTime,System.DateTime)\n  - type: System.DateTime.CompareTo(System.Object)\n    commentId: M:System.DateTime.CompareTo(System.Object)\n  implements:\n  - System.IEquatable{System.DateTime}.Equals(System.DateTime)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.Equals(DateTime)\n- uid: System.DateTime.Equals(System.DateTime,System.DateTime)\n  commentId: M:System.DateTime.Equals(System.DateTime,System.DateTime)\n  id: Equals(System.DateTime,System.DateTime)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Equals(DateTime, DateTime)\n  fullName: System.DateTime.Equals(System.DateTime, System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 591\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether two <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances  have the same date and time value.</p>\\n\"\n  syntax:\n    content: public static bool Equals(DateTime t1, DateTime t2)\n    content.vb: Public Shared Function Equals(t1 As Date, t2 As Date) As Boolean\n    parameters:\n    - id: t1\n      type: System.DateTime\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: t2\n      type: System.DateTime\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two values are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.DateTime.Compare(System.DateTime,System.DateTime)\n    commentId: M:System.DateTime.Compare(System.DateTime,System.DateTime)\n  - type: System.DateTime.CompareTo(System.Object)\n    commentId: M:System.DateTime.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.Equals(DateTime, DateTime)\n- uid: System.DateTime.Equals(System.Object)\n  commentId: M:System.DateTime.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.DateTime.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 576\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to compare to this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is an instance of <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and equals the value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  seealso:\n  - type: System.DateTime.Compare(System.DateTime,System.DateTime)\n    commentId: M:System.DateTime.Compare(System.DateTime,System.DateTime)\n  - type: System.DateTime.CompareTo(System.Object)\n    commentId: M:System.DateTime.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DateTime.Equals(Object)\n- uid: System.DateTime.FromBinary(System.Int64)\n  commentId: M:System.DateTime.FromBinary(System.Int64)\n  id: FromBinary(System.Int64)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: FromBinary(Int64)\n  fullName: System.DateTime.FromBinary(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromBinary\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 595\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Deserializes a 64-bit binary value and recreates an original serialized <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static DateTime FromBinary(long dateData)\n    content.vb: Public Shared Function FromBinary(dateData As Long) As Date\n    parameters:\n    - id: dateData\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that encodes the <xref href=\\\"System.DateTime.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in a 2-bit field and the <xref href=\\\"System.DateTime.Ticks\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property in a 62-bit field. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object that is equivalent to the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that was serialized by the <xref href=\\\"System.DateTime.ToBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>dateData</em> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.DateTime.ToBinary\n    commentId: M:System.DateTime.ToBinary\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.FromBinary(Int64)\n- uid: System.DateTime.FromFileTime(System.Int64)\n  commentId: M:System.DateTime.FromFileTime(System.Int64)\n  id: FromFileTime(System.Int64)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: FromFileTime(Int64)\n  fullName: System.DateTime.FromFileTime(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromFileTime\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 652\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified Windows file time to an equivalent local time.</p>\\n\"\n  syntax:\n    content: public static DateTime FromFileTime(long fileTime)\n    content.vb: Public Shared Function FromFileTime(fileTime As Long) As Date\n    parameters:\n    - id: fileTime\n      type: System.Int64\n      description: \"\\n<p>A Windows file time expressed in ticks. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object that represents the local time equivalent of the date and time represented by the <em>fileTime</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>fileTime</em> is less than 0 or represents a time greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.DateTime.ToUniversalTime\n    commentId: M:System.DateTime.ToUniversalTime\n  - type: System.TimeZone.GetUtcOffset(System.DateTime)\n    commentId: M:System.TimeZone.GetUtcOffset(System.DateTime)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.FromFileTime(Int64)\n- uid: System.DateTime.FromFileTimeUtc(System.Int64)\n  commentId: M:System.DateTime.FromFileTimeUtc(System.Int64)\n  id: FromFileTimeUtc(System.Int64)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: FromFileTimeUtc(Int64)\n  fullName: System.DateTime.FromFileTimeUtc(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromFileTimeUtc\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 656\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified Windows file time to an equivalent UTC time.</p>\\n\"\n  syntax:\n    content: public static DateTime FromFileTimeUtc(long fileTime)\n    content.vb: Public Shared Function FromFileTimeUtc(fileTime As Long) As Date\n    parameters:\n    - id: fileTime\n      type: System.Int64\n      description: \"\\n<p>A Windows file time expressed in ticks. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object that represents the UTC time equivalent of the date and time represented by the <em>fileTime</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>fileTime</em> is less than 0 or represents a time greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.DateTime.ToUniversalTime\n    commentId: M:System.DateTime.ToUniversalTime\n  - type: System.TimeZone.GetUtcOffset(System.DateTime)\n    commentId: M:System.TimeZone.GetUtcOffset(System.DateTime)\n  - type: System.DateTime.FromFileTime(System.Int64)\n    commentId: M:System.DateTime.FromFileTime(System.Int64)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.FromFileTimeUtc(Int64)\n- uid: System.DateTime.GetDateTimeFormats\n  commentId: M:System.DateTime.GetDateTimeFormats\n  id: GetDateTimeFormats\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: GetDateTimeFormats()\n  fullName: System.DateTime.GetDateTimeFormats()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDateTimeFormats\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1233\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</p>\\n\"\n  syntax:\n    content: public string[] GetDateTimeFormats()\n    content.vb: Public Function GetDateTimeFormats As String()\n    return:\n      type: System.String[]\n      description: \"\\n<p>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.GetDateTimeFormats()\n- uid: System.DateTime.GetDateTimeFormats(System.Char)\n  commentId: M:System.DateTime.GetDateTimeFormats(System.Char)\n  id: GetDateTimeFormats(System.Char)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: GetDateTimeFormats(Char)\n  fullName: System.DateTime.GetDateTimeFormats(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDateTimeFormats\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1252\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier.</p>\\n\"\n  syntax:\n    content: public string[] GetDateTimeFormats(char format)\n    content.vb: Public Function GetDateTimeFormats(format As Char) As String()\n    parameters:\n    - id: format\n      type: System.Char\n      description: \"\\n<p>A standard date and time format string (see Remarks). </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>A string array where each element is the representation of the value of this instance formatted with the <em>format</em> standard date and time format specifier.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid standard date and time format specifier character.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.GetDateTimeFormats(Char)\n- uid: System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)\n  commentId: M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)\n  id: GetDateTimeFormats(System.Char,System.IFormatProvider)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: GetDateTimeFormats(Char, IFormatProvider)\n  fullName: System.DateTime.GetDateTimeFormats(System.Char, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDateTimeFormats\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1261\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier and culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public string[] GetDateTimeFormats(char format, IFormatProvider provider)\n    content.vb: Public Function GetDateTimeFormats(format As Char, provider As IFormatProvider) As String()\n    parameters:\n    - id: format\n      type: System.Char\n      description: \"\\n<p>A date and time format string (see Remarks). </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about this instance. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid standard date and time format specifier character.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.GetDateTimeFormats(Char, IFormatProvider)\n- uid: System.DateTime.GetDateTimeFormats(System.IFormatProvider)\n  commentId: M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)\n  id: GetDateTimeFormats(System.IFormatProvider)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: GetDateTimeFormats(IFormatProvider)\n  fullName: System.DateTime.GetDateTimeFormats(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDateTimeFormats\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1242\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers and the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public string[] GetDateTimeFormats(IFormatProvider provider)\n    content.vb: Public Function GetDateTimeFormats(provider As IFormatProvider) As String()\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about this instance. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.GetDateTimeFormats(IFormatProvider)\n- uid: System.DateTime.GetHashCode\n  commentId: M:System.DateTime.GetHashCode\n  id: GetHashCode\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.DateTime.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 824\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DateTime.GetHashCode()\n- uid: System.DateTime.IsDaylightSavingTime\n  commentId: M:System.DateTime.IsDaylightSavingTime\n  id: IsDaylightSavingTime\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IsDaylightSavingTime()\n  fullName: System.DateTime.IsDaylightSavingTime()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDaylightSavingTime\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 687\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether this instance of <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is within the daylight saving time range for the current time zone.</p>\\n\"\n  syntax:\n    content: public bool IsDaylightSavingTime()\n    content.vb: Public Function IsDaylightSavingTime As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the value of the <xref href=\\\"System.DateTime.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <xref href=\\\"System.DateTimeKind.Local\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.DateTimeKind.Unspecified\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the value of this instance of <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is within the daylight saving time range for the local time zone; <strong>false</strong> if <xref href=\\\"System.DateTime.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.DateTimeKind.Utc\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\n    commentId: M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.IsDaylightSavingTime()\n- uid: System.DateTime.IsLeapYear(System.Int32)\n  commentId: M:System.DateTime.IsLeapYear(System.Int32)\n  id: IsLeapYear(System.Int32)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IsLeapYear(Int32)\n  fullName: System.DateTime.IsLeapYear(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapYear\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 986\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns an indication whether the specified year is a leap year.</p>\\n\"\n  syntax:\n    content: public static bool IsLeapYear(int year)\n    content.vb: Public Shared Function IsLeapYear(year As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>A 4-digit year. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>year</em> is a leap year; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is less than 1 or greater than 9999.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.IsLeapYear(Int32)\n- uid: System.DateTime.op_Addition(System.DateTime,System.TimeSpan)\n  commentId: M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)\n  id: op_Addition(System.DateTime,System.TimeSpan)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Addition(DateTime, TimeSpan)\n  fullName: System.DateTime.Addition(System.DateTime, System.TimeSpan)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Addition\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1183\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Adds a specified time interval to a specified date and time, yielding a new date and time.</p>\\n\"\n  syntax:\n    content: public static DateTime operator +(DateTime d, TimeSpan t)\n    content.vb: Public Shared Operator +(d As Date, t As TimeSpan) As Date\n    parameters:\n    - id: d\n      type: System.DateTime\n      description: \"\\n<p>The date and time value to add. </p>\\n\"\n    - id: t\n      type: System.TimeSpan\n      description: \"\\n<p>The time interval to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object that is the sum of the values of <em>d</em> and <em>t</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.DateTime.Add(System.TimeSpan)\n    commentId: M:System.DateTime.Add(System.TimeSpan)\n  - type: System.TimeSpan\n    commentId: T:System.TimeSpan\n  - type: System.DateTime.Ticks\n    commentId: P:System.DateTime.Ticks\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.Addition(DateTime, TimeSpan)\n- uid: System.DateTime.op_Equality(System.DateTime,System.DateTime)\n  commentId: M:System.DateTime.op_Equality(System.DateTime,System.DateTime)\n  id: op_Equality(System.DateTime,System.DateTime)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Equality(DateTime, DateTime)\n  fullName: System.DateTime.Equality(System.DateTime, System.DateTime)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1205\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified instances of <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(DateTime d1, DateTime d2)\n    content.vb: Public Shared Operator =(d1 As Date, d2 As Date) As Boolean\n    parameters:\n    - id: d1\n      type: System.DateTime\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: d2\n      type: System.DateTime\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d1</em> and <em>d2</em> represent the same date and time; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Equals(System.DateTime)\n    commentId: M:System.DateTime.Equals(System.DateTime)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.Equality(DateTime, DateTime)\n- uid: System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)\n  commentId: M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)\n  id: op_GreaterThan(System.DateTime,System.DateTime)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(DateTime, DateTime)\n  fullName: System.DateTime.GreaterThan(System.DateTime, System.DateTime)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_GreaterThan\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1221\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether one specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is later than another specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static bool operator>(DateTime t1, DateTime t2)\n    content.vb: Public Shared Operator>(t1 As Date, t2 As Date) As Boolean\n    parameters:\n    - id: t1\n      type: System.DateTime\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: t2\n      type: System.DateTime\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>t1</em> is later than <em>t2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.CompareTo(System.DateTime)\n    commentId: M:System.DateTime.CompareTo(System.DateTime)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.GreaterThan(DateTime, DateTime)\n- uid: System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)\n  commentId: M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)\n  id: op_GreaterThanOrEqual(System.DateTime,System.DateTime)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(DateTime, DateTime)\n  fullName: System.DateTime.GreaterThanOrEqual(System.DateTime, System.DateTime)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_GreaterThanOrEqual\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1225\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether one specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> represents a date and time that is the same as or later than another specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static bool operator >=(DateTime t1, DateTime t2)\n    content.vb: Public Shared Operator >=(t1 As Date, t2 As Date) As Boolean\n    parameters:\n    - id: t1\n      type: System.DateTime\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: t2\n      type: System.DateTime\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>t1</em> is the same as or later than <em>t2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.CompareTo(System.DateTime)\n    commentId: M:System.DateTime.CompareTo(System.DateTime)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.GreaterThanOrEqual(DateTime, DateTime)\n- uid: System.DateTime.op_Inequality(System.DateTime,System.DateTime)\n  commentId: M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)\n  id: op_Inequality(System.DateTime,System.DateTime)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Inequality(DateTime, DateTime)\n  fullName: System.DateTime.Inequality(System.DateTime, System.DateTime)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1209\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified instances of <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(DateTime d1, DateTime d2)\n    content.vb: Public Shared Operator <>(d1 As Date, d2 As Date) As Boolean\n    parameters:\n    - id: d1\n      type: System.DateTime\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: d2\n      type: System.DateTime\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>d1</em> and <em>d2</em> do not represent the same date and time; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.CompareTo(System.DateTime)\n    commentId: M:System.DateTime.CompareTo(System.DateTime)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.Inequality(DateTime, DateTime)\n- uid: System.DateTime.op_LessThan(System.DateTime,System.DateTime)\n  commentId: M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)\n  id: op_LessThan(System.DateTime,System.DateTime)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: LessThan(DateTime, DateTime)\n  fullName: System.DateTime.LessThan(System.DateTime, System.DateTime)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_LessThan\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1213\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether one specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is earlier than another specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static bool operator <(DateTime t1, DateTime t2)\n    content.vb: Public Shared Operator <(t1 As Date, t2 As Date) As Boolean\n    parameters:\n    - id: t1\n      type: System.DateTime\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: t2\n      type: System.DateTime\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>t1</em> is earlier than <em>t2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.CompareTo(System.DateTime)\n    commentId: M:System.DateTime.CompareTo(System.DateTime)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.LessThan(DateTime, DateTime)\n- uid: System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)\n  commentId: M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)\n  id: op_LessThanOrEqual(System.DateTime,System.DateTime)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(DateTime, DateTime)\n  fullName: System.DateTime.LessThanOrEqual(System.DateTime, System.DateTime)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_LessThanOrEqual\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1217\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether one specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> represents a date and time that is the same as or earlier than another specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static bool operator <=(DateTime t1, DateTime t2)\n    content.vb: Public Shared Operator <=(t1 As Date, t2 As Date) As Boolean\n    parameters:\n    - id: t1\n      type: System.DateTime\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: t2\n      type: System.DateTime\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>t1</em> is the same as or earlier than <em>t2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.CompareTo(System.DateTime)\n    commentId: M:System.DateTime.CompareTo(System.DateTime)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.LessThanOrEqual(DateTime, DateTime)\n- uid: System.DateTime.op_Subtraction(System.DateTime,System.DateTime)\n  commentId: M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)\n  id: op_Subtraction(System.DateTime,System.DateTime)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(DateTime, DateTime)\n  fullName: System.DateTime.Subtraction(System.DateTime, System.DateTime)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Subtraction\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1201\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts a specified date and time from another specified date and time and returns a time interval.</p>\\n\"\n  syntax:\n    content: public static TimeSpan operator -(DateTime d1, DateTime d2)\n    content.vb: Public Shared Operator -(d1 As Date, d2 As Date) As TimeSpan\n    parameters:\n    - id: d1\n      type: System.DateTime\n      description: \"\\n<p>The date and time value to subtract from (the minuend). </p>\\n\"\n    - id: d2\n      type: System.DateTime\n      description: \"\\n<p>The date and time value to subtract (the subtrahend). </p>\\n\"\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>The time interval between <em>d1</em> and <em>d2</em>; that is, <em>d1</em> minus <em>d2</em>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Subtract(System.DateTime)\n    commentId: M:System.DateTime.Subtract(System.DateTime)\n  - type: System.DateTime.Ticks\n    commentId: P:System.DateTime.Ticks\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.Subtraction(DateTime, DateTime)\n- uid: System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)\n  commentId: M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)\n  id: op_Subtraction(System.DateTime,System.TimeSpan)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(DateTime, TimeSpan)\n  fullName: System.DateTime.Subtraction(System.DateTime, System.TimeSpan)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Subtraction\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1192\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts a specified time interval from a specified date and time and returns a new date and time.</p>\\n\"\n  syntax:\n    content: public static DateTime operator -(DateTime d, TimeSpan t)\n    content.vb: Public Shared Operator -(d As Date, t As TimeSpan) As Date\n    parameters:\n    - id: d\n      type: System.DateTime\n      description: \"\\n<p>The date and time value to subtract from. </p>\\n\"\n    - id: t\n      type: System.TimeSpan\n      description: \"\\n<p>The time interval to subtract. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose value is the value of <em>d</em> minus the value of <em>t</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.DateTime.Subtract(System.TimeSpan)\n    commentId: M:System.DateTime.Subtract(System.TimeSpan)\n  - type: System.DateTime.Ticks\n    commentId: P:System.DateTime.Ticks\n  - type: System.TimeSpan\n    commentId: T:System.TimeSpan\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.Subtraction(DateTime, TimeSpan)\n- uid: System.DateTime.Parse(System.String)\n  commentId: M:System.DateTime.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.DateTime.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 998\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a date and time to its <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static DateTime Parse(string s)\n    content.vb: Public Shared Function Parse(s As String) As Date\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object that is equivalent to the date and time contained in <em>s</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> does not contain a valid string representation of a date and time. </p>\\n\"\n  seealso:\n  - type: System.DateTime.TryParse(System.String,System.DateTime@)\n    commentId: M:System.DateTime.TryParse(System.String,System.DateTime@)\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.Parse(String)\n- uid: System.DateTime.Parse(System.String,System.IFormatProvider)\n  commentId: M:System.DateTime.Parse(System.String,System.IFormatProvider)\n  id: Parse(System.String,System.IFormatProvider)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, IFormatProvider)\n  fullName: System.DateTime.Parse(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1006\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a date and time to its <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent by using culture-specific format information.</p>\\n\"\n  syntax:\n    content: public static DateTime Parse(string s, IFormatProvider provider)\n    content.vb: Public Shared Function Parse(s As String, provider As IFormatProvider) As Date\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific format information about <em>s</em>. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object that is equivalent to the date and time contained in <em>s</em> as specified by <em>provider</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> does not contain a valid string representation of a date and time. </p>\\n\"\n  seealso:\n  - type: System.DateTime.TryParse(System.String,System.DateTime@)\n    commentId: M:System.DateTime.TryParse(System.String,System.DateTime@)\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.Parse(String, IFormatProvider)\n- uid: System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  commentId: M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  id: Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Parse(String, IFormatProvider, DateTimeStyles)\n  fullName: System.DateTime.Parse(System.String, System.IFormatProvider, System.Globalization.DateTimeStyles)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1010\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a date and time to its <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent by using culture-specific format information and formatting style.</p>\\n\"\n  syntax:\n    content: public static DateTime Parse(string s, IFormatProvider provider, DateTimeStyles styles)\n    content.vb: Public Shared Function Parse(s As String, provider As IFormatProvider, styles As DateTimeStyles) As Date\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>. </p>\\n\"\n    - id: styles\n      type: System.Globalization.DateTimeStyles\n      description: \"\\n<p>A bitwise combination of the enumeration values that indicates the style elements that can be present in <em>s</em> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <xref href=\\\"System.Globalization.DateTimeStyles.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object that is equivalent to the date and time contained in <em>s</em>, as specified by <em>provider</em> and <em>styles</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> does not contain a valid string representation of a date and time. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>styles</em> contains an invalid combination of <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. For example, both <xref href=\\\"System.Globalization.DateTimeStyles.AssumeLocal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.DateTimeStyles.AssumeUniversal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.TryParse(System.String,System.DateTime@)\n    commentId: M:System.DateTime.TryParse(System.String,System.DateTime@)\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.Parse(String, IFormatProvider, DateTimeStyles)\n- uid: System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)\n  commentId: M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)\n  id: ParseExact(System.String,System.String,System.IFormatProvider)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: ParseExact(String, String, IFormatProvider)\n  fullName: System.DateTime.ParseExact(System.String, System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ParseExact\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1019\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</p>\\n\"\n  syntax:\n    content: public static DateTime ParseExact(string s, string format, IFormatProvider provider)\n    content.vb: Public Shared Function ParseExact(s As String, format As String, provider As IFormatProvider) As Date\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert. </p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format specifier that defines the required format of <em>s</em>. For more information, see the Remarks section. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific format information about <em>s</em>. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object that is equivalent to the date and time contained in <em>s</em>, as specified by <em>format</em> and <em>provider</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> or <em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> or <em>format</em> is an empty string. </p>\\n<p>-or- </p>\\n<p>\\n<em>s</em> does not contain a date and time that corresponds to the pattern specified in <em>format</em>. </p>\\n<p>-or-</p>\\n<p>The hour component and the AM/PM designator in <em>s</em> do not agree.</p>\\n\"\n  seealso:\n  - type: System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n    commentId: M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.ParseExact(String, String, IFormatProvider)\n- uid: System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  commentId: M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  id: ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: ParseExact(String, String, IFormatProvider, DateTimeStyles)\n  fullName: System.DateTime.ParseExact(System.String, System.String, System.IFormatProvider, System.Globalization.DateTimeStyles)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ParseExact\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1027\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</p>\\n\"\n  syntax:\n    content: public static DateTime ParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style)\n    content.vb: Public Shared Function ParseExact(s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As Date\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string containing a date and time to convert. </p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format specifier that defines the required format of <em>s</em>. For more information, see the Remarks section. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>. </p>\\n\"\n    - id: style\n      type: System.Globalization.DateTimeStyles\n      description: \"\\n<p>A bitwise combination of the enumeration values that provides additional information about <em>s</em>, about style elements that may be present in <em>s</em>, or about the conversion from <em>s</em> to a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. A typical value to specify is <xref href=\\\"System.Globalization.DateTimeStyles.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object that is equivalent to the date and time contained in <em>s</em>, as specified by <em>format</em>, <em>provider</em>, and <em>style</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> or <em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> or <em>format</em> is an empty string. </p>\\n<p>-or- </p>\\n<p>\\n<em>s</em> does not contain a date and time that corresponds to the pattern specified in <em>format</em>. </p>\\n<p>-or-</p>\\n<p>The hour component and the AM/PM designator in <em>s</em> do not agree.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> contains an invalid combination of <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. For example, both <xref href=\\\"System.Globalization.DateTimeStyles.AssumeLocal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.DateTimeStyles.AssumeUniversal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n    commentId: M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.ParseExact(String, String, IFormatProvider, DateTimeStyles)\n- uid: System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)\n  commentId: M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)\n  id: ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: ParseExact(String, String[], IFormatProvider, DateTimeStyles)\n  fullName: System.DateTime.ParseExact(System.String, System.String[], System.IFormatProvider, System.Globalization.DateTimeStyles)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ParseExact\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1032\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</p>\\n\"\n  syntax:\n    content: public static DateTime ParseExact(string s, string[] formats, IFormatProvider provider, DateTimeStyles style)\n    content.vb: Public Shared Function ParseExact(s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As Date\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert. </p>\\n\"\n    - id: formats\n      type: System.String[]\n      description: \"\\n<p>An array of allowable formats of <em>s</em>. For more information, see the Remarks section. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific format information about <em>s</em>. </p>\\n\"\n    - id: style\n      type: System.Globalization.DateTimeStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of <em>s</em>. A typical value to specify is <xref href=\\\"System.Globalization.DateTimeStyles.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object that is equivalent to the date and time contained in <em>s</em>, as specified by <em>formats</em>, <em>provider</em>, and <em>style</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> or <em>formats</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>s</em> is an empty string. </p>\\n<p>-or- </p>\\n<p>an element of <em>formats</em> is an empty string. </p>\\n<p>-or- </p>\\n<p>\\n<em>s</em> does not contain a date and time that corresponds to any element of <em>formats</em>. </p>\\n<p>-or-</p>\\n<p>The hour component and the AM/PM designator in <em>s</em> do not agree.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>style</em> contains an invalid combination of <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. For example, both <xref href=\\\"System.Globalization.DateTimeStyles.AssumeLocal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.DateTimeStyles.AssumeUniversal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n    commentId: M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.DateTime.ParseExact(System.String, System.String(), System.IFormatProvider, System.Globalization.DateTimeStyles)\n  name.vb: ParseExact(String, String(), IFormatProvider, DateTimeStyles)\n  nameWithType: DateTime.ParseExact(String, String[], IFormatProvider, DateTimeStyles)\n  nameWithType.vb: DateTime.ParseExact(String, String(), IFormatProvider, DateTimeStyles)\n- uid: System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)\n  commentId: M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)\n  id: SpecifyKind(System.DateTime,System.DateTimeKind)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: SpecifyKind(DateTime, DateTimeKind)\n  fullName: System.DateTime.SpecifyKind(System.DateTime, System.DateTimeKind)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SpecifyKind\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 694\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that has the same number of ticks as the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <xref href=\\\"System.DateTimeKind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static DateTime SpecifyKind(DateTime value, DateTimeKind kind)\n    content.vb: Public Shared Function SpecifyKind(value As Date, kind As DateTimeKind) As Date\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: \"\\n<p>A date and time. </p>\\n\"\n    - id: kind\n      type: System.DateTimeKind\n      description: \"\\n<p>One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>A new object that has the same number of ticks as the object represented by the <em>value</em> parameter and the <xref href=\\\"System.DateTimeKind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value specified by the <em>kind</em> parameter. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DateTime.SpecifyKind(DateTime, DateTimeKind)\n- uid: System.DateTime.Subtract(System.DateTime)\n  commentId: M:System.DateTime.Subtract(System.DateTime)\n  id: Subtract(System.DateTime)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Subtract(DateTime)\n  fullName: System.DateTime.Subtract(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Subtract\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1037\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts the specified date and time from this instance.</p>\\n\"\n  syntax:\n    content: public TimeSpan Subtract(DateTime value)\n    content.vb: Public Function Subtract(value As Date) As TimeSpan\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: \"\\n<p>The date and time value to subtract. </p>\\n\"\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The result is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.Subtract(DateTime)\n- uid: System.DateTime.Subtract(System.TimeSpan)\n  commentId: M:System.DateTime.Subtract(System.TimeSpan)\n  id: Subtract(System.TimeSpan)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: Subtract(TimeSpan)\n  fullName: System.DateTime.Subtract(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Subtract\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1041\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts the specified duration from this instance.</p>\\n\"\n  syntax:\n    content: public DateTime Subtract(TimeSpan value)\n    content.vb: Public Function Subtract(value As TimeSpan) As Date\n    parameters:\n    - id: value\n      type: System.TimeSpan\n      description: \"\\n<p>The time interval to subtract. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object that is equal to the date and time represented by this instance minus the time interval represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The result is less than <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.TimeSpan\n    commentId: T:System.TimeSpan\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.Subtract(TimeSpan)\n- uid: System.DateTime.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.DateTime.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.DateTime.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IComparable.CompareTo\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 468\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: int IComparable.CompareTo(object value)\n    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: value\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: DateTime.IComparable.CompareTo(Object)\n  nameWithType.vb: DateTime.System.IComparable.CompareTo(Object)\n- uid: System.DateTime.System#IConvertible#GetTypeCode\n  commentId: M:System.DateTime.System#IConvertible#GetTypeCode\n  id: System#IConvertible#GetTypeCode\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.GetTypeCode()\n  fullName: System.DateTime.System.IConvertible.GetTypeCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IConvertible.GetTypeCode\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 469\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: TypeCode IConvertible.GetTypeCode()\n    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode\n    return:\n      type: System.TypeCode\n  implements:\n  - System.IConvertible.GetTypeCode\n  name.vb: System.IConvertible.GetTypeCode()\n  nameWithType: DateTime.IConvertible.GetTypeCode()\n  nameWithType.vb: DateTime.System.IConvertible.GetTypeCode()\n- uid: System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)\n  id: System#IConvertible#ToBoolean(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToBoolean(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToBoolean(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToBoolean\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1277\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: bool IConvertible.ToBoolean(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToBoolean(System.IFormatProvider)\n  name.vb: System.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToBoolean(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)\n  id: System#IConvertible#ToByte(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToByte(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToByte\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1292\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: byte IConvertible.ToByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToByte(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToByte(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToByte(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)\n  id: System#IConvertible#ToChar(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToChar(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToChar(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToChar\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1282\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: char IConvertible.ToChar(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToChar(System.IFormatProvider)\n  name.vb: System.IConvertible.ToChar(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToChar(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToChar(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)\n  id: System#IConvertible#ToDateTime(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDateTime(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToDateTime(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDateTime\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1342\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The current object.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDateTime(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToDateTime(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)\n  id: System#IConvertible#ToDecimal(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDecimal(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToDecimal(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDecimal\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1337\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: decimal IConvertible.ToDecimal(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDecimal(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToDecimal(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)\n  id: System#IConvertible#ToDouble(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDouble(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToDouble(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDouble\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1332\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: double IConvertible.ToDouble(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToDouble(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDouble(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToDouble(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToDouble(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)\n  id: System#IConvertible#ToInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt16(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt16\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1297\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: short IConvertible.ToInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt16(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToInt16(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToInt16(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)\n  id: System#IConvertible#ToInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt32(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt32\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1307\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IConvertible.ToInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt32(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToInt32(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToInt32(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)\n  id: System#IConvertible#ToInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt64(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt64\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1317\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: long IConvertible.ToInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt64(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToInt64(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToInt64(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)\n  id: System#IConvertible#ToSByte(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSByte(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToSByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSByte\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1287\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: sbyte IConvertible.ToSByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToSByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSByte(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToSByte(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToSByte(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)\n  id: System#IConvertible#ToSingle(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSingle(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToSingle(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSingle\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1327\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: float IConvertible.ToSingle(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases. </p>\\n\"\n  implements:\n  - System.IConvertible.ToSingle(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSingle(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToSingle(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToSingle(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToType(Type, IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToType\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1347\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to an object of a specified type.</p>\\n\"\n  syntax:\n    content: object IConvertible.ToType(Type type, IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The desired type. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object of the type specified by the <em>type</em> parameter, with a value equivalent to the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>This conversion is not supported for the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  seealso:\n  - type: System.Convert\n    commentId: T:System.Convert\n  implements:\n  - System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  name.vb: System.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToType(Type, IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)\n  id: System#IConvertible#ToUInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt16(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToUInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt16\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1302\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ushort IConvertible.ToUInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToUInt16(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)\n  id: System#IConvertible#ToUInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt32(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToUInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt32\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1312\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: uint IConvertible.ToUInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToUInt32(IFormatProvider)\n- uid: System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)\n  commentId: M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)\n  id: System#IConvertible#ToUInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt64(IFormatProvider)\n  fullName: System.DateTime.System.IConvertible.ToUInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt64\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1322\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\\\"System.InvalidCastException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: ulong IConvertible.ToUInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IFormatProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. (This parameter is not used; specify <strong>null</strong>.)</p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>The return value for this member is not used.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType: DateTime.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType.vb: DateTime.System.IConvertible.ToUInt64(IFormatProvider)\n- uid: System.DateTime.ToBinary\n  commentId: M:System.DateTime.ToBinary\n  id: ToBinary\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: ToBinary()\n  fullName: System.DateTime.ToBinary()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBinary\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 698\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Serializes the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a 64-bit binary value that subsequently can be used to recreate the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public long ToBinary()\n    content.vb: Public Function ToBinary As Long\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that encodes the <xref href=\\\"System.DateTime.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.DateTime.Ticks\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties. </p>\\n\"\n  seealso:\n  - type: System.DateTime.FromBinary(System.Int64)\n    commentId: M:System.DateTime.FromBinary(System.Int64)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.ToBinary()\n- uid: System.DateTime.ToFileTime\n  commentId: M:System.DateTime.ToFileTime\n  id: ToFileTime\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: ToFileTime()\n  fullName: System.DateTime.ToFileTime()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToFileTime\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1074\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a Windows file time.</p>\\n\"\n  syntax:\n    content: public long ToFileTime()\n    content.vb: Public Function ToFileTime As Long\n    return:\n      type: System.Int64\n      description: \"\\n<p>The value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object expressed as a Windows file time.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC. </p>\\n\"\n  seealso:\n  - type: System.DateTime.ToFileTimeUtc\n    commentId: M:System.DateTime.ToFileTimeUtc\n  - type: System.Int64\n    commentId: T:System.Int64\n  - type: System.DateTime.ToUniversalTime\n    commentId: M:System.DateTime.ToUniversalTime\n  - type: System.TimeZone.GetUtcOffset(System.DateTime)\n    commentId: M:System.TimeZone.GetUtcOffset(System.DateTime)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.ToFileTime()\n- uid: System.DateTime.ToFileTimeUtc\n  commentId: M:System.DateTime.ToFileTimeUtc\n  id: ToFileTimeUtc\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: ToFileTimeUtc()\n  fullName: System.DateTime.ToFileTimeUtc()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToFileTimeUtc\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1079\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a Windows file time.</p>\\n\"\n  syntax:\n    content: public long ToFileTimeUtc()\n    content.vb: Public Function ToFileTimeUtc As Long\n    return:\n      type: System.Int64\n      description: \"\\n<p>The value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object expressed as a Windows file time.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC. </p>\\n\"\n  seealso:\n  - type: System.DateTime.ToFileTime\n    commentId: M:System.DateTime.ToFileTime\n  - type: System.Int64\n    commentId: T:System.Int64\n  - type: System.DateTime.ToUniversalTime\n    commentId: M:System.DateTime.ToUniversalTime\n  - type: System.TimeZone.GetUtcOffset(System.DateTime)\n    commentId: M:System.TimeZone.GetUtcOffset(System.DateTime)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.ToFileTimeUtc()\n- uid: System.DateTime.ToLocalTime\n  commentId: M:System.DateTime.ToLocalTime\n  id: ToLocalTime\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: ToLocalTime()\n  fullName: System.DateTime.ToLocalTime()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToLocalTime\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1089\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to local time.</p>\\n\"\n  syntax:\n    content: public DateTime ToLocalTime()\n    content.vb: Public Function ToLocalTime As Date\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose <xref href=\\\"System.DateTime.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <xref href=\\\"System.DateTimeKind.Local\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and whose value is the local time equivalent to the value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, or <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the converted value is too large to be represented by a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, or <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the converted value is too small to be represented as a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.TimeZone\n    commentId: T:System.TimeZone\n  - type: System.TimeZone.GetUtcOffset(System.DateTime)\n    commentId: M:System.TimeZone.GetUtcOffset(System.DateTime)\n  - type: System.TimeZone.GetDaylightChanges(System.Int32)\n    commentId: M:System.TimeZone.GetDaylightChanges(System.Int32)\n  - type: System.DateTime.ToUniversalTime\n    commentId: M:System.DateTime.ToUniversalTime\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.ToLocalTime()\n- uid: System.DateTime.ToString\n  commentId: M:System.DateTime.ToString\n  id: ToString\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.DateTime.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1140\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation using the formatting conventions of the current culture.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.ValueType.ToString\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The date and time is outside the range of dates supported by the calendar used by the current culture. </p>\\n\"\n  seealso:\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DateTime.ToString()\n- uid: System.DateTime.ToString(System.IFormatProvider)\n  commentId: M:System.DateTime.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: ToString(IFormatProvider)\n  fullName: System.DateTime.ToString(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1150\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation using the specified culture-specific format information.</p>\\n\"\n  syntax:\n    content: public string ToString(IFormatProvider provider)\n    content.vb: Public Function ToString(provider As IFormatProvider) As String\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object as specified by <em>provider</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The date and time is outside the range of dates supported by the calendar used by <em>provider</em>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  implements:\n  - System.IConvertible.ToString(System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.ToString(IFormatProvider)\n- uid: System.DateTime.ToString(System.String)\n  commentId: M:System.DateTime.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  fullName: System.DateTime.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1145\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation using the specified format and the formatting conventions of the current culture.</p>\\n\"\n  syntax:\n    content: public string ToString(string format)\n    content.vb: Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A standard or custom date and time format string (see Remarks). </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object as specified by <em>format</em>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The length of <em>format</em> is 1, and it is not one of the format specifier characters defined for <xref href=\\\"System.Globalization.DateTimeFormatInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>format</em> does not contain a valid custom format pattern. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The date and time is outside the range of dates supported by the calendar used by the current culture.</p>\\n\"\n  seealso:\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.ToString(String)\n- uid: System.DateTime.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.DateTime.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: ToString(String, IFormatProvider)\n  fullName: System.DateTime.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1155\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation using the specified format and culture-specific format information.</p>\\n\"\n  syntax:\n    content: public string ToString(string format, IFormatProvider provider)\n    content.vb: Public Function ToString(format As String, provider As IFormatProvider) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A standard or custom date and time format string. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object as specified by <em>format</em> and <em>provider</em>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The length of <em>format</em> is 1, and it is not one of the format specifier characters defined for <xref href=\\\"System.Globalization.DateTimeFormatInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>format</em> does not contain a valid custom format pattern. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The date and time is outside the range of dates supported by the calendar used by <em>provider</em>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.ToString(String, IFormatProvider)\n- uid: System.DateTime.ToUniversalTime\n  commentId: M:System.DateTime.ToUniversalTime\n  id: ToUniversalTime\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: ToUniversalTime()\n  fullName: System.DateTime.ToUniversalTime()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUniversalTime\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1160\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to Coordinated Universal Time (UTC).</p>\\n\"\n  syntax:\n    content: public DateTime ToUniversalTime()\n    content.vb: Public Function ToUniversalTime As Date\n    return:\n      type: System.DateTime\n      description: \"\\n<p>An object whose <xref href=\\\"System.DateTime.Kind\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <xref href=\\\"System.DateTimeKind.Utc\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and whose value is the UTC equivalent to the value of the current <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, or <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the converted value is too large to be represented by a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, or <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the converted value is too small to be represented by a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.DateTime.ToLocalTime\n    commentId: M:System.DateTime.ToLocalTime\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DateTime.ToUniversalTime()\n- uid: System.DateTime.TryParse(System.String,System.DateTime@)\n  commentId: M:System.DateTime.TryParse(System.String,System.DateTime@)\n  id: TryParse(System.String,System.DateTime@)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out DateTime)\n  fullName: System.DateTime.TryParse(System.String, out System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1164\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent and returns a value that indicates whether the conversion succeeded.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string s, out DateTime result)\n    content.vb: Public Shared Function TryParse(s As String, ByRef result As Date) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string containing a date and time to convert. </p>\\n\"\n    - id: result\n      type: System.DateTime\n      description: \"\\n<p>When this method returns, contains the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value equivalent to the date and time contained in <em>s</em>, if the conversion succeeded, or <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the conversion failed. The conversion fails if the <em>s</em> parameter is <strong>null</strong>, is an empty string (\\\"\\\"), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>s</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Parse(System.String)\n    commentId: M:System.DateTime.Parse(System.String)\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.DateTime.TryParse(System.String, ByRef System.DateTime)\n  name.vb: TryParse(String, ByRef DateTime)\n  nameWithType: DateTime.TryParse(String, out DateTime)\n  nameWithType.vb: DateTime.TryParse(String, ByRef DateTime)\n- uid: System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  commentId: M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  id: TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, IFormatProvider, DateTimeStyles, out DateTime)\n  fullName: System.DateTime.TryParse(System.String, System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1168\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string s, IFormatProvider provider, DateTimeStyles styles, out DateTime result)\n    content.vb: Public Shared Function TryParse(s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As Date) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string containing a date and time to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>.</p>\\n\"\n    - id: styles\n      type: System.Globalization.DateTimeStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <xref href=\\\"System.Globalization.DateTimeStyles.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: result\n      type: System.DateTime\n      description: \"\\n<p>When this method returns, contains the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value equivalent to the date and time contained in <em>s</em>, if the conversion succeeded, or <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the conversion failed. The conversion fails if the <em>s</em> parameter is <strong>null</strong>, is an empty string (\\\"\\\"), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>s</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>styles</em> is not a valid <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<em>styles</em> contains an invalid combination of <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values (for example, both <xref href=\\\"System.Globalization.DateTimeStyles.AssumeLocal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.DateTimeStyles.AssumeUniversal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>provider</em> is a neutral culture and cannot be used in a parsing operation.</p>\\n\"\n  seealso:\n  - type: System.DateTime.Parse(System.String)\n    commentId: M:System.DateTime.Parse(System.String)\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.DateTime.TryParse(System.String, System.IFormatProvider, System.Globalization.DateTimeStyles, ByRef System.DateTime)\n  name.vb: TryParse(String, IFormatProvider, DateTimeStyles, ByRef DateTime)\n  nameWithType: DateTime.TryParse(String, IFormatProvider, DateTimeStyles, out DateTime)\n  nameWithType.vb: DateTime.TryParse(String, IFormatProvider, DateTimeStyles, ByRef DateTime)\n- uid: System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  commentId: M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  id: TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: TryParseExact(String, String, IFormatProvider, DateTimeStyles, out DateTime)\n  fullName: System.DateTime.TryParseExact(System.String, System.String, System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParseExact\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1173\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</p>\\n\"\n  syntax:\n    content: public static bool TryParseExact(string s, string format, IFormatProvider provider, DateTimeStyles style, out DateTime result)\n    content.vb: Public Shared Function TryParseExact(s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As Date) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string containing a date and time to convert. </p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>The required format of <em>s</em>. See the Remarks section for more information. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information about <em>s</em>. </p>\\n\"\n    - id: style\n      type: System.Globalization.DateTimeStyles\n      description: \"\\n<p>A bitwise combination of one or more enumeration values that indicate the permitted format of <em>s</em>. </p>\\n\"\n    - id: result\n      type: System.DateTime\n      description: \"\\n<p>When this method returns, contains the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value equivalent to the date and time contained in <em>s</em>, if the conversion succeeded, or <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the conversion failed. The conversion fails if either the <em>s</em> or <em>format</em> parameter is <strong>null</strong>, is an empty string, or does not contain a date and time that correspond to the pattern specified in <em>format</em>. This parameter is passed uninitialized. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>styles</em> is not a valid <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<em>styles</em> contains an invalid combination of <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values (for example, both <xref href=\\\"System.Globalization.DateTimeStyles.AssumeLocal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.DateTimeStyles.AssumeUniversal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  seealso:\n  - type: System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)\n    commentId: M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.DateTime.TryParseExact(System.String, System.String, System.IFormatProvider, System.Globalization.DateTimeStyles, ByRef System.DateTime)\n  name.vb: TryParseExact(String, String, IFormatProvider, DateTimeStyles, ByRef DateTime)\n  nameWithType: DateTime.TryParseExact(String, String, IFormatProvider, DateTimeStyles, out DateTime)\n  nameWithType.vb: DateTime.TryParseExact(String, String, IFormatProvider, DateTimeStyles, ByRef DateTime)\n- uid: System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  commentId: M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  id: TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)\n  parent: System.DateTime\n  langs:\n  - csharp\n  - vb\n  name: TryParseExact(String, String[], IFormatProvider, DateTimeStyles, out DateTime)\n  fullName: System.DateTime.TryParseExact(System.String, System.String[], System.IFormatProvider, System.Globalization.DateTimeStyles, out System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/DateTime.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParseExact\n    path: src/mscorlib/src/System/DateTime.cs\n    startLine: 1178\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to its <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</p>\\n\"\n  syntax:\n    content: public static bool TryParseExact(string s, string[] formats, IFormatProvider provider, DateTimeStyles style, out DateTime result)\n    content.vb: Public Shared Function TryParseExact(s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As Date) As Boolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert. </p>\\n\"\n    - id: formats\n      type: System.String[]\n      description: \"\\n<p>An array of allowable formats of <em>s</em>. See the Remarks section for more information. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific format information about <em>s</em>. </p>\\n\"\n    - id: style\n      type: System.Globalization.DateTimeStyles\n      description: \"\\n<p>A bitwise combination of enumeration values that indicates the permitted format of <em>s</em>. A typical value to specify is <xref href=\\\"System.Globalization.DateTimeStyles.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: result\n      type: System.DateTime\n      description: \"\\n<p>When this method returns, contains the <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value equivalent to the date and time contained in <em>s</em>, if the conversion succeeded, or <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the conversion failed. The conversion fails if <em>s</em> or <em>formats</em> is <strong>null</strong>, <em>s</em> or an element of <em>formats</em> is an empty string, or the format of <em>s</em> is not exactly as specified by at least one of the format patterns in <em>formats</em>. This parameter is passed uninitialized. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>s</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>styles</em> is not a valid <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<em>styles</em> contains an invalid combination of <xref href=\\\"System.Globalization.DateTimeStyles\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values (for example, both <xref href=\\\"System.Globalization.DateTimeStyles.AssumeLocal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Globalization.DateTimeStyles.AssumeUniversal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  seealso:\n  - type: System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)\n    commentId: M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.DateTimeFormatInfo\n    commentId: T:System.Globalization.DateTimeFormatInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.DateTime.TryParseExact(System.String, System.String(), System.IFormatProvider, System.Globalization.DateTimeStyles, ByRef System.DateTime)\n  name.vb: TryParseExact(String, String(), IFormatProvider, DateTimeStyles, ByRef DateTime)\n  nameWithType: DateTime.TryParseExact(String, String[], IFormatProvider, DateTimeStyles, out DateTime)\n  nameWithType.vb: DateTime.TryParseExact(String, String(), IFormatProvider, DateTimeStyles, ByRef DateTime)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.IComparable{System.DateTime}\n  parent: System\n  definition: System.IComparable`1\n  name: IComparable<DateTime>\n  fullName: System.IComparable<System.DateTime>\n  fullname.vb: System.IComparable(Of System.DateTime)\n  name.vb: IComparable(Of DateTime)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n  - name: )\n    fullName: )\n  nameWithType: IComparable<DateTime>\n  nameWithType.vb: IComparable(Of DateTime)\n  commentId: T:System.IComparable{System.DateTime}\n- uid: System.IConvertible\n  parent: System\n  isExternal: false\n  name: IConvertible\n  fullName: System.IConvertible\n  nameWithType: IConvertible\n  commentId: T:System.IConvertible\n- uid: System.IEquatable{System.DateTime}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<DateTime>\n  fullName: System.IEquatable<System.DateTime>\n  fullname.vb: System.IEquatable(Of System.DateTime)\n  name.vb: IEquatable(Of DateTime)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<DateTime>\n  nameWithType.vb: IEquatable(Of DateTime)\n  commentId: T:System.IEquatable{System.DateTime}\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  fullName: System.IFormattable\n  nameWithType: IFormattable\n  commentId: T:System.IFormattable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.IComparable`1\n  isExternal: false\n  name: IComparable<T>\n  fullName: System.IComparable<T>\n  fullname.vb: System.IComparable(Of T)\n  name.vb: IComparable(Of T)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>\n  nameWithType.vb: IComparable(Of T)\n  commentId: T:System.IComparable`1\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n  commentId: T:System.IEquatable`1\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.DateTimeKind\n  parent: System\n  isExternal: false\n  name: DateTimeKind\n  fullName: System.DateTimeKind\n  nameWithType: DateTimeKind\n  commentId: T:System.DateTimeKind\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.DayOfWeek\n  parent: System\n  isExternal: false\n  name: DayOfWeek\n  fullName: System.DayOfWeek\n  nameWithType: DayOfWeek\n  commentId: T:System.DayOfWeek\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.IComparable{System.DateTime}.CompareTo(System.DateTime)\n  parent: System.IComparable{System.DateTime}\n  definition: System.IComparable`1.CompareTo(`0)\n  name: CompareTo(DateTime)\n  fullName: System.IComparable<System.DateTime>.CompareTo(System.DateTime)\n  fullname.vb: System.IComparable(Of System.DateTime).CompareTo(System.DateTime)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<System.DateTime>.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of System.DateTime).CompareTo\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n  - name: )\n    fullName: )\n  nameWithType: IComparable<DateTime>.CompareTo(DateTime)\n  nameWithType.vb: IComparable(Of DateTime).CompareTo(DateTime)\n  commentId: M:System.IComparable{System.DateTime}.CompareTo(System.DateTime)\n- uid: System.IComparable`1.CompareTo(`0)\n  isExternal: false\n  name: CompareTo(T)\n  fullName: System.IComparable<T>.CompareTo(T)\n  fullname.vb: System.IComparable(Of T).CompareTo(T)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<T>.CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of T).CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>.CompareTo(T)\n  nameWithType.vb: IComparable(Of T).CompareTo(T)\n  commentId: M:System.IComparable`1.CompareTo(`0)\n- uid: System.IEquatable{System.DateTime}.Equals(System.DateTime)\n  parent: System.IEquatable{System.DateTime}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(DateTime)\n  fullName: System.IEquatable<System.DateTime>.Equals(System.DateTime)\n  fullname.vb: System.IEquatable(Of System.DateTime).Equals(System.DateTime)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.DateTime>.Equals\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.DateTime).Equals\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<DateTime>.Equals(DateTime)\n  nameWithType.vb: IEquatable(Of DateTime).Equals(DateTime)\n  commentId: M:System.IEquatable{System.DateTime}.Equals(System.DateTime)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n  commentId: M:System.IEquatable`1.Equals(`0)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Globalization.DateTimeStyles\n  parent: System.Globalization\n  isExternal: false\n  name: DateTimeStyles\n  fullName: System.Globalization.DateTimeStyles\n  nameWithType: DateTimeStyles\n  commentId: T:System.Globalization.DateTimeStyles\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.IConvertible.GetTypeCode\n  parent: System.IConvertible\n  isExternal: false\n  name: GetTypeCode()\n  fullName: System.IConvertible.GetTypeCode()\n  spec.csharp:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.GetTypeCode()\n  commentId: M:System.IConvertible.GetTypeCode\n- uid: System.TypeCode\n  parent: System\n  isExternal: false\n  name: TypeCode\n  fullName: System.TypeCode\n  nameWithType: TypeCode\n  commentId: T:System.TypeCode\n- uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToBoolean(IFormatProvider)\n  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToBoolean(IFormatProvider)\n  commentId: M:System.IConvertible.ToBoolean(System.IFormatProvider)\n- uid: System.IConvertible.ToByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToByte(IFormatProvider)\n  fullName: System.IConvertible.ToByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToByte(System.IFormatProvider)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.IConvertible.ToChar(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToChar(IFormatProvider)\n  fullName: System.IConvertible.ToChar(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToChar(IFormatProvider)\n  commentId: M:System.IConvertible.ToChar(System.IFormatProvider)\n- uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDateTime(IFormatProvider)\n  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDateTime(IFormatProvider)\n  commentId: M:System.IConvertible.ToDateTime(System.IFormatProvider)\n- uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDecimal(IFormatProvider)\n  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDecimal(IFormatProvider)\n  commentId: M:System.IConvertible.ToDecimal(System.IFormatProvider)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.IConvertible.ToDouble(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDouble(IFormatProvider)\n  fullName: System.IConvertible.ToDouble(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDouble(IFormatProvider)\n  commentId: M:System.IConvertible.ToDouble(System.IFormatProvider)\n- uid: System.IConvertible.ToInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt16(IFormatProvider)\n  fullName: System.IConvertible.ToInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt16(System.IFormatProvider)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.IConvertible.ToInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt32(IFormatProvider)\n  fullName: System.IConvertible.ToInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt32(System.IFormatProvider)\n- uid: System.IConvertible.ToInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt64(IFormatProvider)\n  fullName: System.IConvertible.ToInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt64(System.IFormatProvider)\n- uid: System.IConvertible.ToSByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSByte(IFormatProvider)\n  fullName: System.IConvertible.ToSByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToSByte(System.IFormatProvider)\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.IConvertible.ToSingle(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSingle(IFormatProvider)\n  fullName: System.IConvertible.ToSingle(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSingle(IFormatProvider)\n  commentId: M:System.IConvertible.ToSingle(System.IFormatProvider)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToType(Type, IFormatProvider)\n  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToType(Type, IFormatProvider)\n  commentId: M:System.IConvertible.ToType(System.Type,System.IFormatProvider)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt16(IFormatProvider)\n  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt16(System.IFormatProvider)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt32(IFormatProvider)\n  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt32(System.IFormatProvider)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt64(IFormatProvider)\n  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt64(System.IFormatProvider)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.IConvertible.ToString(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToString(IFormatProvider)\n  fullName: System.IConvertible.ToString(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToString(IFormatProvider)\n  commentId: M:System.IConvertible.ToString(System.IFormatProvider)\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n"}