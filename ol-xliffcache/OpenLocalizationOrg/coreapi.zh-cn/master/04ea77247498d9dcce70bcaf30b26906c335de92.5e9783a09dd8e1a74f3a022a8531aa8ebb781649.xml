{"nodes":[{"pos":[1294,1307],"content":"EventListener","needQuote":true,"nodes":[{"content":"EventListener","pos":[0,13]}]},{"pos":[2700,2715],"content":"EventListener()","needQuote":true,"nodes":[{"content":"EventListener()","pos":[0,15]}]},{"pos":[3866,3892],"content":"DisableEvents(EventSource)","needQuote":true,"nodes":[{"content":"DisableEvents(EventSource)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The event source to disable events for.&lt;/p&gt;\\n","pos":[4705,4755],"source":"\\n<p>The event source to disable events for.</p>\\n"},{"pos":[5092,5101],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[6467,6504],"content":"EnableEvents(EventSource, EventLevel)","needQuote":true,"nodes":[{"content":"EnableEvents(EventSource, EventLevel)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The event source to enable events for.&lt;/p&gt;\\n","pos":[7434,7483],"source":"\\n<p>The event source to enable events for.</p>\\n"},{"content":"\\n&lt;p&gt;The level of events to enable.&lt;/p&gt;\\n","pos":[7571,7612],"source":"\\n<p>The level of events to enable.</p>\\n"},{"pos":[8332,8384],"content":"EnableEvents(EventSource, EventLevel, EventKeywords)","needQuote":true,"nodes":[{"content":"EnableEvents(EventSource, EventLevel, EventKeywords)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;The event source to enable events for.&lt;/p&gt;\\n","pos":[9449,9498],"source":"\\n<p>The event source to enable events for.</p>\\n"},{"content":"\\n&lt;p&gt;The level of events to enable.&lt;/p&gt;\\n","pos":[9586,9627],"source":"\\n<p>The level of events to enable.</p>\\n"},{"content":"\\n&lt;p&gt;The keyword flags necessary to enable the events.&lt;/p&gt;\\n","pos":[9728,9788],"source":"\\n<p>The keyword flags necessary to enable the events.</p>\\n"},{"pos":[10727,10808],"content":"EnableEvents(EventSource, EventLevel, EventKeywords, IDictionary<String, String>)","needQuote":true,"nodes":[{"content":"EnableEvents(EventSource, EventLevel, EventKeywords, IDictionary&lt;String, String&gt;)","pos":[0,81],"source":"EnableEvents(EventSource, EventLevel, EventKeywords, IDictionary<String, String>)"}]},{"content":"\\n&lt;p&gt;The event source to enable events for.&lt;/p&gt;\\n","pos":[12052,12101],"source":"\\n<p>The event source to enable events for.</p>\\n"},{"content":"\\n&lt;p&gt;The level of events to enable.&lt;/p&gt;\\n","pos":[12189,12230],"source":"\\n<p>The level of events to enable.</p>\\n"},{"content":"\\n&lt;p&gt;The keyword flags necessary to enable the events.&lt;/p&gt;\\n","pos":[12331,12391],"source":"\\n<p>The keyword flags necessary to enable the events.</p>\\n"},{"content":"\\n&lt;p&gt;The arguments to be matched to enable the events.&lt;/p&gt;\\n","pos":[12513,12573],"source":"\\n<p>The arguments to be matched to enable the events.</p>\\n"},{"pos":[13589,13618],"content":"EventSourceIndex(EventSource)","needQuote":true,"nodes":[{"content":"EventSourceIndex(EventSource)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The event source to find the index for.&lt;/p&gt;\\n","pos":[14497,14547],"source":"\\n<p>The event source to find the index for.</p>\\n"},{"content":"\\n&lt;p&gt;A small non-negative number that represents the specified event source.&lt;/p&gt;\\n","pos":[14606,14688],"source":"\\n<p>A small non-negative number that represents the specified event source.</p>\\n"},{"pos":[15215,15248],"content":"OnEventSourceCreated(EventSource)","needQuote":true,"nodes":[{"content":"OnEventSourceCreated(EventSource)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The event source.&lt;/p&gt;\\n","pos":[16193,16221],"source":"\\n<p>The event source.</p>\\n"},{"pos":[16770,16807],"content":"OnEventWritten(EventWrittenEventArgs)","needQuote":true,"nodes":[{"content":"OnEventWritten(EventWrittenEventArgs)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The event arguments that describe the event.&lt;/p&gt;\\n","pos":[17742,17797],"source":"\\n<p>The event arguments that describe the event.</p>\\n"},{"pos":[18035,18061],"content":"System.Diagnostics.Tracing","needQuote":true,"nodes":[{"content":"System.Diagnostics.Tracing","pos":[0,26]}]},{"pos":[18252,18258],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18408,18419],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[18594,18604],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[18699,18707],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[18776,18777],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18804,18805],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18875,18883],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[18952,18953],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18980,18981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19164,19178],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19297,19303],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19370,19371],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19421,19427],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19487,19488],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19571,19577],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19644,19645],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19695,19701],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19761,19762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19976,19998],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[20146,20152],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20219,20220],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20270,20276],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20337,20338]},{"pos":[20393,20399],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20459,20460],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20557,20563],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20630,20631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20681,20687],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20748,20749]},{"pos":[20804,20810],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20870,20871],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21116,21147],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21313,21328],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21404,21405],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21455,21461],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21522,21523]},{"pos":[21578,21584],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21644,21645],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21751,21766],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21842,21843],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21893,21899],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21960,21961]},{"pos":[22016,22022],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22082,22083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22313,22326],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[22427,22438],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22510,22511],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22538,22539],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22612,22623],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22695,22696],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22723,22724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22899,22908],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[23001,23008],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23076,23077],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23104,23105],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23174,23181],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23249,23250],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23277,23278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23453,23470],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[23579,23594],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23670,23671],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23698,23699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23776,23791],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23867,23868],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23895,23896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24041,24047],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24223,24234],"content":"EventSource","needQuote":true,"nodes":[{"content":"EventSource","pos":[0,11]}]},{"pos":[24459,24468],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[24571,24578],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[24630,24631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24658,24659],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24733,24740],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[24792,24793],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24820,24821],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25028,25038],"content":"EventLevel","needQuote":true,"nodes":[{"content":"EventLevel","pos":[0,10]}]},{"pos":[25282,25295],"content":"EventKeywords","needQuote":true,"nodes":[{"content":"EventKeywords","pos":[0,13]}]},{"pos":[25610,25637],"content":"IDictionary<String, String>","needQuote":true,"nodes":[{"content":"IDictionary&lt;String, String&gt;","pos":[0,27],"source":"IDictionary<String, String>"}]},{"pos":[25923,25934],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[26019,26020],"content":"<","needQuote":true,"nodes":[]},{"pos":[26070,26076],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[26137,26138]},{"pos":[26193,26199],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[26352,26363],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[26449,26452]},{"pos":[26509,26515],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[26576,26577]},{"pos":[26632,26638],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[26698,26699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26969,26994],"content":"IDictionary<TKey, TValue>","needQuote":true,"nodes":[{"content":"IDictionary&lt;TKey, TValue&gt;","pos":[0,25],"source":"IDictionary<TKey, TValue>"}]},{"pos":[27246,27257],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[27321,27322],"content":"<","needQuote":true,"nodes":[]},{"pos":[27349,27353],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[27384,27385]},{"pos":[27417,27423],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[27548,27559],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[27624,27627]},{"pos":[27661,27665],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[27696,27697]},{"pos":[27729,27735],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[27767,27768],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27993,28019],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[28209,28214],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28411,28432],"content":"EventWrittenEventArgs","needQuote":true,"nodes":[{"content":"EventWrittenEventArgs","pos":[0,21]}]}],"content":"items:\n- uid: System.Diagnostics.Tracing.EventListener\n  commentId: T:System.Diagnostics.Tracing.EventListener\n  id: EventListener\n  parent: System.Diagnostics.Tracing\n  children:\n  - System.Diagnostics.Tracing.EventListener.#ctor\n  - System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)\n  - System.Diagnostics.Tracing.EventListener.Dispose\n  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)\n  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})\n  - System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)\n  - System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)\n  - System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)\n  langs:\n  - csharp\n  - vb\n  name: EventListener\n  fullName: System.Diagnostics.Tracing.EventListener\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventListener\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4214\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Provides methods for enabling and disabling events from event sources.</p>\\n\"\n  syntax:\n    content: 'public class EventListener : IDisposable'\n    content.vb: >-\n      Public Class EventListener\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: EventListener\n- uid: System.Diagnostics.Tracing.EventListener.#ctor\n  commentId: M:System.Diagnostics.Tracing.EventListener.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.Tracing.EventListener\n  langs:\n  - csharp\n  - vb\n  name: EventListener()\n  fullName: System.Diagnostics.Tracing.EventListener.EventListener()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4254\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Diagnostics.Tracing.EventListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public EventListener()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventListener.EventListener()\n- uid: System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)\n  commentId: M:System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)\n  id: DisableEvents(System.Diagnostics.Tracing.EventSource)\n  parent: System.Diagnostics.Tracing.EventListener\n  langs:\n  - csharp\n  - vb\n  name: DisableEvents(EventSource)\n  fullName: System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DisableEvents\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4364\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Disables all events for the specified event source.</p>\\n\"\n  syntax:\n    content: public void DisableEvents(EventSource eventSource)\n    content.vb: Public Sub DisableEvents(eventSource As EventSource)\n    parameters:\n    - id: eventSource\n      type: System.Diagnostics.Tracing.EventSource\n      description: \"\\n<p>The event source to disable events for.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventListener.DisableEvents(EventSource)\n- uid: System.Diagnostics.Tracing.EventListener.Dispose\n  commentId: M:System.Diagnostics.Tracing.EventListener.Dispose\n  id: Dispose\n  parent: System.Diagnostics.Tracing.EventListener\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Diagnostics.Tracing.EventListener.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4269\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Releases the resources used by the current instance of the <xref href=\\\"System.Diagnostics.Tracing.EventListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public virtual void Dispose()\n    content.vb: Public Overridable Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: EventListener.Dispose()\n- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)\n  commentId: M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)\n  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)\n  parent: System.Diagnostics.Tracing.EventListener\n  langs:\n  - csharp\n  - vb\n  name: EnableEvents(EventSource, EventLevel)\n  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnableEvents\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4318\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Enables events for the specified event source that has the specified verbosity level or lower.</p>\\n\"\n  syntax:\n    content: public void EnableEvents(EventSource eventSource, EventLevel level)\n    content.vb: Public Sub EnableEvents(eventSource As EventSource, level As EventLevel)\n    parameters:\n    - id: eventSource\n      type: System.Diagnostics.Tracing.EventSource\n      description: \"\\n<p>The event source to enable events for.</p>\\n\"\n    - id: level\n      type: System.Diagnostics.Tracing.EventLevel\n      description: \"\\n<p>The level of events to enable.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventListener.EnableEvents(EventSource, EventLevel)\n- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  commentId: M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  parent: System.Diagnostics.Tracing.EventListener\n  langs:\n  - csharp\n  - vb\n  name: EnableEvents(EventSource, EventLevel, EventKeywords)\n  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnableEvents\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4333\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Enables events for the specified event source that has the specified verbosity level or lower, and matching keyword flags.</p>\\n\"\n  syntax:\n    content: public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword)\n    content.vb: Public Sub EnableEvents(eventSource As EventSource, level As EventLevel, matchAnyKeyword As EventKeywords)\n    parameters:\n    - id: eventSource\n      type: System.Diagnostics.Tracing.EventSource\n      description: \"\\n<p>The event source to enable events for.</p>\\n\"\n    - id: level\n      type: System.Diagnostics.Tracing.EventLevel\n      description: \"\\n<p>The level of events to enable.</p>\\n\"\n    - id: matchAnyKeyword\n      type: System.Diagnostics.Tracing.EventKeywords\n      description: \"\\n<p>The keyword flags necessary to enable the events.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventListener.EnableEvents(EventSource, EventLevel, EventKeywords)\n- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})\n  commentId: M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})\n  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})\n  parent: System.Diagnostics.Tracing.EventListener\n  langs:\n  - csharp\n  - vb\n  name: EnableEvents(EventSource, EventLevel, EventKeywords, IDictionary<String, String>)\n  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Collections.Generic.IDictionary<System.String, System.String>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnableEvents\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4349\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Enables events for the specified event source that has the specified verbosity level or lower, matching event keyword flag, and matching arguments.</p>\\n\"\n  syntax:\n    content: public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword, IDictionary<string, string> arguments)\n    content.vb: Public Sub EnableEvents(eventSource As EventSource, level As EventLevel, matchAnyKeyword As EventKeywords, arguments As IDictionary(Of String, String))\n    parameters:\n    - id: eventSource\n      type: System.Diagnostics.Tracing.EventSource\n      description: \"\\n<p>The event source to enable events for.</p>\\n\"\n    - id: level\n      type: System.Diagnostics.Tracing.EventLevel\n      description: \"\\n<p>The level of events to enable.</p>\\n\"\n    - id: matchAnyKeyword\n      type: System.Diagnostics.Tracing.EventKeywords\n      description: \"\\n<p>The keyword flags necessary to enable the events.</p>\\n\"\n    - id: arguments\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: \"\\n<p>The arguments to be matched to enable the events.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Collections.Generic.IDictionary(Of System.String, System.String))\n  name.vb: EnableEvents(EventSource, EventLevel, EventKeywords, IDictionary(Of String, String))\n  nameWithType: EventListener.EnableEvents(EventSource, EventLevel, EventKeywords, IDictionary<String, String>)\n  nameWithType.vb: EventListener.EnableEvents(EventSource, EventLevel, EventKeywords, IDictionary(Of String, String))\n- uid: System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)\n  commentId: M:System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)\n  id: EventSourceIndex(System.Diagnostics.Tracing.EventSource)\n  parent: System.Diagnostics.Tracing.EventListener\n  langs:\n  - csharp\n  - vb\n  name: EventSourceIndex(EventSource)\n  fullName: System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventSourceIndex\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4382\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets a small non-negative number that represents the specified event source.</p>\\n\"\n  syntax:\n    content: public static int EventSourceIndex(EventSource eventSource)\n    content.vb: Public Shared Function EventSourceIndex(eventSource As EventSource) As Integer\n    parameters:\n    - id: eventSource\n      type: System.Diagnostics.Tracing.EventSource\n      description: \"\\n<p>The event source to find the index for.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A small non-negative number that represents the specified event source.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - static\n  modifiers.vb:\n  - Protected\n  - Shared\n  nameWithType: EventListener.EventSourceIndex(EventSource)\n- uid: System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)\n  commentId: M:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)\n  id: OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)\n  parent: System.Diagnostics.Tracing.EventListener\n  langs:\n  - csharp\n  - vb\n  name: OnEventSourceCreated(EventSource)\n  fullName: System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnEventSourceCreated\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4397\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Called for all existing event sources when the event listener is created and when a new event source is attached to the listener.</p>\\n\"\n  syntax:\n    content: protected virtual void OnEventSourceCreated(EventSource eventSource)\n    content.vb: Protected Overridable Sub OnEventSourceCreated(eventSource As EventSource)\n    parameters:\n    - id: eventSource\n      type: System.Diagnostics.Tracing.EventSource\n      description: \"\\n<p>The event source.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: EventListener.OnEventSourceCreated(EventSource)\n- uid: System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)\n  commentId: M:System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)\n  id: OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)\n  parent: System.Diagnostics.Tracing.EventListener\n  langs:\n  - csharp\n  - vb\n  name: OnEventWritten(EventWrittenEventArgs)\n  fullName: System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnEventWritten\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4413\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Called whenever an event has been written by an event source for which the event listener has enabled events.</p>\\n\"\n  syntax:\n    content: protected virtual void OnEventWritten(EventWrittenEventArgs eventData)\n    content.vb: Protected Overridable Sub OnEventWritten(eventData As EventWrittenEventArgs)\n    parameters:\n    - id: eventData\n      type: System.Diagnostics.Tracing.EventWrittenEventArgs\n      description: \"\\n<p>The event arguments that describe the event.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: EventListener.OnEventWritten(EventWrittenEventArgs)\nreferences:\n- uid: System.Diagnostics.Tracing\n  isExternal: false\n  name: System.Diagnostics.Tracing\n  fullName: System.Diagnostics.Tracing\n  nameWithType: System.Diagnostics.Tracing\n  commentId: N:System.Diagnostics.Tracing\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Diagnostics.Tracing.EventSource\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventSource\n  fullName: System.Diagnostics.Tracing.EventSource\n  nameWithType: EventSource\n  commentId: T:System.Diagnostics.Tracing.EventSource\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Diagnostics.Tracing.EventLevel\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventLevel\n  fullName: System.Diagnostics.Tracing.EventLevel\n  nameWithType: EventLevel\n  commentId: T:System.Diagnostics.Tracing.EventLevel\n- uid: System.Diagnostics.Tracing.EventKeywords\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventKeywords\n  fullName: System.Diagnostics.Tracing.EventKeywords\n  nameWithType: EventKeywords\n  commentId: T:System.Diagnostics.Tracing.EventKeywords\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IDictionary`2\n  name: IDictionary<String, String>\n  fullName: System.Collections.Generic.IDictionary<System.String, System.String>\n  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)\n  name.vb: IDictionary(Of String, String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary<String, String>\n  nameWithType.vb: IDictionary(Of String, String)\n  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}\n- uid: System.Collections.Generic.IDictionary`2\n  isExternal: false\n  name: IDictionary<TKey, TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>\n  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)\n  name.vb: IDictionary(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  nameWithType: IDictionary<TKey, TValue>\n  nameWithType.vb: IDictionary(Of TKey, TValue)\n  commentId: T:System.Collections.Generic.IDictionary`2\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventWrittenEventArgs\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs\n  nameWithType: EventWrittenEventArgs\n  commentId: T:System.Diagnostics.Tracing.EventWrittenEventArgs\n"}