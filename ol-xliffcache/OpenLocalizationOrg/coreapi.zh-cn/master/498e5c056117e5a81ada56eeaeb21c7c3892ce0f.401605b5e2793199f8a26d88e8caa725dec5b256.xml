{"nodes":[{"pos":[2279,2303],"content":"CommonSecurityDescriptor","needQuote":true,"nodes":[{"content":"CommonSecurityDescriptor","pos":[0,24]}]},{"pos":[4629,4686],"content":"CommonSecurityDescriptor(Boolean, Boolean, Byte[], Int32)","needQuote":true,"nodes":[{"content":"CommonSecurityDescriptor(Boolean, Boolean, Byte[], Int32)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the new security descriptor is associated with a container object.&lt;/p&gt;\\n","pos":[5773,5877],"source":"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a container object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the new security descriptor is associated with a directory object.&lt;/p&gt;\\n","pos":[5941,6045],"source":"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a directory object.</p>\\n"},{"content":"\\n&lt;p&gt;The offset in the &lt;em&gt;binaryForm&lt;/em&gt; array at which to begin copying.&lt;/p&gt;\\n","pos":[6365,6446],"source":"\\n<p>The offset in the <em>binaryForm</em> array at which to begin copying.</p>\\n"},{"pos":[7943,8068],"content":"CommonSecurityDescriptor(Boolean, Boolean, ControlFlags, SecurityIdentifier, SecurityIdentifier, SystemAcl, DiscretionaryAcl)","needQuote":true,"nodes":[{"content":"CommonSecurityDescriptor(Boolean, Boolean, ControlFlags, SecurityIdentifier, SecurityIdentifier, SystemAcl, DiscretionaryAcl)","pos":[0,125]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the new security descriptor is associated with a container object.&lt;/p&gt;\\n","pos":[9541,9645],"source":"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a container object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the new security descriptor is associated with a directory object.&lt;/p&gt;\\n","pos":[9709,9813],"source":"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a directory object.</p>\\n"},{"pos":[11895,11960],"content":"CommonSecurityDescriptor(Boolean, Boolean, RawSecurityDescriptor)","needQuote":true,"nodes":[{"content":"CommonSecurityDescriptor(Boolean, Boolean, RawSecurityDescriptor)","pos":[0,65]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the new security descriptor is associated with a container object.&lt;/p&gt;\\n","pos":[13190,13294],"source":"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a container object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the new security descriptor is associated with a directory object.&lt;/p&gt;\\n","pos":[13358,13462],"source":"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a directory object.</p>\\n"},{"pos":[14425,14475],"content":"CommonSecurityDescriptor(Boolean, Boolean, String)","needQuote":true,"nodes":[{"content":"CommonSecurityDescriptor(Boolean, Boolean, String)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the new security descriptor is associated with a container object.&lt;/p&gt;\\n","pos":[15546,15650],"source":"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a container object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the new security descriptor is associated with a directory object.&lt;/p&gt;\\n","pos":[15714,15818],"source":"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a directory object.</p>\\n"},{"pos":[16492,16504],"content":"ControlFlags","needQuote":true,"nodes":[{"content":"ControlFlags","pos":[0,12]}]},{"pos":[18160,18176],"content":"DiscretionaryAcl","needQuote":true,"nodes":[{"content":"DiscretionaryAcl","pos":[0,16]}]},{"pos":[19713,19718],"content":"Group","needQuote":true,"nodes":[{"content":"Group","pos":[0,5]}]},{"pos":[21292,21303],"content":"IsContainer","needQuote":true,"nodes":[{"content":"IsContainer","pos":[0,11]}]},{"pos":[22934,22961],"content":"IsDiscretionaryAclCanonical","needQuote":true,"nodes":[{"content":"IsDiscretionaryAclCanonical","pos":[0,27]}]},{"pos":[24635,24639],"content":"IsDS","needQuote":true,"nodes":[{"content":"IsDS","pos":[0,4]}]},{"pos":[26214,26234],"content":"IsSystemAclCanonical","needQuote":true,"nodes":[{"content":"IsSystemAclCanonical","pos":[0,20]}]},{"pos":[27869,27874],"content":"Owner","needQuote":true,"nodes":[{"content":"Owner","pos":[0,5]}]},{"pos":[29478,29487],"content":"SystemAcl","needQuote":true,"nodes":[{"content":"SystemAcl","pos":[0,9]}]},{"pos":[31080,31112],"content":"AddDiscretionaryAcl(Byte, Int32)","needQuote":true,"nodes":[{"content":"AddDiscretionaryAcl(Byte, Int32)","pos":[0,32]}]},{"pos":[33273,33298],"content":"AddSystemAcl(Byte, Int32)","needQuote":true,"nodes":[{"content":"AddSystemAcl(Byte, Int32)","pos":[0,25]}]},{"pos":[35474,35512],"content":"PurgeAccessControl(SecurityIdentifier)","needQuote":true,"nodes":[{"content":"PurgeAccessControl(SecurityIdentifier)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The security identifier for which to remove access rules.&lt;/p&gt;\\n","pos":[36592,36660],"source":"\\n<p>The security identifier for which to remove access rules.</p>\\n"},{"pos":[37209,37239],"content":"PurgeAudit(SecurityIdentifier)","needQuote":true,"nodes":[{"content":"PurgeAudit(SecurityIdentifier)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The security identifier for which to remove audit rules.&lt;/p&gt;\\n","pos":[38279,38346],"source":"\\n<p>The security identifier for which to remove audit rules.</p>\\n"},{"pos":[38899,38946],"content":"SetDiscretionaryAclProtection(Boolean, Boolean)","needQuote":true,"nodes":[{"content":"SetDiscretionaryAclProtection(Boolean, Boolean)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to protect the DACL from inheritance.&lt;/p&gt;\\n","pos":[40128,40200],"source":"\\n<p>\\n<strong>true</strong> to protect the DACL from inheritance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to keep inherited access rules in the DACL; &lt;strong&gt;false&lt;/strong&gt; to remove inherited access rules from the DACL.&lt;/p&gt;\\n","pos":[40279,40428],"source":"\\n<p>\\n<strong>true</strong> to keep inherited access rules in the DACL; <strong>false</strong> to remove inherited access rules from the DACL.</p>\\n"},{"pos":[40977,41017],"content":"SetSystemAclProtection(Boolean, Boolean)","needQuote":true,"nodes":[{"content":"SetSystemAclProtection(Boolean, Boolean)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to protect the SACL from inheritance.&lt;/p&gt;\\n","pos":[42163,42235],"source":"\\n<p>\\n<strong>true</strong> to protect the SACL from inheritance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to keep inherited audit rules in the SACL; &lt;strong&gt;false&lt;/strong&gt; to remove inherited audit rules from the SACL.&lt;/p&gt;\\n","pos":[42314,42461],"source":"\\n<p>\\n<strong>true</strong> to keep inherited audit rules in the SACL; <strong>false</strong> to remove inherited audit rules from the SACL.</p>\\n"},{"pos":[42680,42709],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[42909,42915],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43125,43150],"content":"GenericSecurityDescriptor","needQuote":true,"nodes":[{"content":"GenericSecurityDescriptor","pos":[0,25]}]},{"pos":[43502,43514],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[43901,43909],"content":"Revision","needQuote":true,"nodes":[{"content":"Revision","pos":[0,8]}]},{"pos":[44316,44344],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"pos":[44742,44755],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[44850,44851],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44899,44903],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[44962,44964]},{"content":",","pos":[44996,44997]},{"pos":[45051,45056],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[45115,45116],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45261,45274],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[45369,45370],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45418,45422],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[45480,45482],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[45511,45512]},{"pos":[45566,45571],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[45630,45631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46128,46162],"content":"GetSddlForm(AccessControlSections)","needQuote":true,"nodes":[{"content":"GetSddlForm(AccessControlSections)","pos":[0,34]}]},{"pos":[46451,46462],"content":"GetSddlForm","needQuote":true,"nodes":[{"content":"GetSddlForm","pos":[0,11]}]},{"pos":[46555,46556],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46644,46665],"content":"AccessControlSections","needQuote":true,"nodes":[{"content":"AccessControlSections","pos":[0,21]}]},{"pos":[46742,46743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46911,46922],"content":"GetSddlForm","needQuote":true,"nodes":[{"content":"GetSddlForm","pos":[0,11]}]},{"pos":[47015,47016],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47104,47125],"content":"AccessControlSections","needQuote":true,"nodes":[{"content":"AccessControlSections","pos":[0,21]}]},{"pos":[47202,47203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47616,47643],"content":"IsSddlConversionSupported()","needQuote":true,"nodes":[{"content":"IsSddlConversionSupported()","pos":[0,27]}]},{"pos":[47856,47881],"content":"IsSddlConversionSupported","needQuote":true,"nodes":[{"content":"IsSddlConversionSupported","pos":[0,25]}]},{"pos":[47988,47989],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48016,48017],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48146,48171],"content":"IsSddlConversionSupported","needQuote":true,"nodes":[{"content":"IsSddlConversionSupported","pos":[0,25]}]},{"pos":[48278,48279],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48306,48307],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48572,48582],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[48677,48685],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[48754,48755],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48782,48783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48853,48861],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[48930,48931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48958,48959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49142,49156],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[49275,49281],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49348,49349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49399,49405],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49465,49466],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49549,49555],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49622,49623],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49673,49679],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49739,49740],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49954,49976],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[50124,50130],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50197,50198],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50248,50254],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50315,50316]},{"pos":[50371,50377],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50437,50438],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50535,50541],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50608,50609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50659,50665],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50726,50727]},{"pos":[50782,50788],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50848,50849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51094,51125],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[51291,51306],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[51382,51383],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51433,51439],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51500,51501]},{"pos":[51556,51562],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51622,51623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51729,51744],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[51820,51821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51871,51877],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51938,51939]},{"pos":[51994,52000],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52060,52061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52291,52304],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[52405,52416],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[52488,52489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52516,52517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52590,52601],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[52673,52674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52701,52702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52877,52886],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[52979,52986],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[53054,53055],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53082,53083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53152,53159],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[53227,53228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53255,53256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53431,53448],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[53557,53572],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[53648,53649],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53676,53677],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53754,53769],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[53845,53846],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53873,53874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54019,54025],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[54157,54164],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[54275,54281],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[54401,54405],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[54464,54466]},{"pos":[54529,54533],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[54591,54593],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[54725,54730],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[54924,54936],"content":"ControlFlags","needQuote":true,"nodes":[{"content":"ControlFlags","pos":[0,12]}]},{"pos":[55195,55213],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[55481,55490],"content":"SystemAcl","needQuote":true,"nodes":[{"content":"SystemAcl","pos":[0,9]}]},{"pos":[55746,55762],"content":"DiscretionaryAcl","needQuote":true,"nodes":[{"content":"DiscretionaryAcl","pos":[0,16]}]},{"pos":[55978,56003],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[56252,56273],"content":"RawSecurityDescriptor","needQuote":true,"nodes":[{"content":"RawSecurityDescriptor","pos":[0,21]}]},{"pos":[56509,56515],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[56764,56776],"content":"ControlFlags","needQuote":true,"nodes":[{"content":"ControlFlags","pos":[0,12]}]},{"pos":[57160,57165],"content":"Group","needQuote":true,"nodes":[{"content":"Group","pos":[0,5]}]},{"pos":[57528,57533],"content":"Owner","needQuote":true,"nodes":[{"content":"Owner","pos":[0,5]}]},{"pos":[57797,57801],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]}],"content":"items:\n- uid: System.Security.AccessControl.CommonSecurityDescriptor\n  commentId: T:System.Security.AccessControl.CommonSecurityDescriptor\n  id: CommonSecurityDescriptor\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)\n  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)\n  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)\n  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)\n  - System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)\n  - System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)\n  - System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags\n  - System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\n  - System.Security.AccessControl.CommonSecurityDescriptor.Group\n  - System.Security.AccessControl.CommonSecurityDescriptor.IsContainer\n  - System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  - System.Security.AccessControl.CommonSecurityDescriptor.IsDS\n  - System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical\n  - System.Security.AccessControl.CommonSecurityDescriptor.Owner\n  - System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)\n  - System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)\n  - System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\n  langs:\n  - csharp\n  - vb\n  name: CommonSecurityDescriptor\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CommonSecurityDescriptor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 180\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).</p>\\n\"\n  syntax:\n    content: 'public sealed class CommonSecurityDescriptor : GenericSecurityDescriptor'\n    content.vb: >-\n      Public NotInheritable Class CommonSecurityDescriptor\n          Inherits GenericSecurityDescriptor\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericSecurityDescriptor\n  inheritedMembers:\n  - System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  - System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  - System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: CommonSecurityDescriptor\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)\n  id: '#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)'\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: CommonSecurityDescriptor(Boolean, Boolean, Byte[], Int32)\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(System.Boolean, System.Boolean, System.Byte[], System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 182\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified array of byte values.</p>\\n\"\n  syntax:\n    content: public CommonSecurityDescriptor(bool isContainer, bool isDS, byte[] binaryForm, int offset)\n    content.vb: Public Sub New(isContainer As Boolean, isDS As Boolean, binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: isContainer\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a container object.</p>\\n\"\n    - id: isDS\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a directory object.</p>\\n\"\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The array of byte values from which to create the new <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset in the <em>binaryForm</em> array at which to begin copying.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(System.Boolean, System.Boolean, System.Byte(), System.Int32)\n  name.vb: CommonSecurityDescriptor(Boolean, Boolean, Byte(), Int32)\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, Byte[], Int32)\n  nameWithType.vb: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, Byte(), Int32)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)\n  id: '#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)'\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: CommonSecurityDescriptor(Boolean, Boolean, ControlFlags, SecurityIdentifier, SecurityIdentifier, SystemAcl, DiscretionaryAcl)\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(System.Boolean, System.Boolean, System.Security.AccessControl.ControlFlags, System.Security.Principal.SecurityIdentifier, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.SystemAcl, System.Security.AccessControl.DiscretionaryAcl)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 183\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified information.</p>\\n\"\n  syntax:\n    content: public CommonSecurityDescriptor(bool isContainer, bool isDS, ControlFlags flags, SecurityIdentifier owner, SecurityIdentifier group, SystemAcl systemAcl, DiscretionaryAcl discretionaryAcl)\n    content.vb: Public Sub New(isContainer As Boolean, isDS As Boolean, flags As ControlFlags, owner As SecurityIdentifier, group As SecurityIdentifier, systemAcl As SystemAcl, discretionaryAcl As DiscretionaryAcl)\n    parameters:\n    - id: isContainer\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a container object.</p>\\n\"\n    - id: isDS\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a directory object.</p>\\n\"\n    - id: flags\n      type: System.Security.AccessControl.ControlFlags\n      description: \"\\n<p>Flags that specify behavior of the new <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: owner\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The owner for the new <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: group\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The primary group for the new <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: systemAcl\n      type: System.Security.AccessControl.SystemAcl\n      description: \"\\n<p>The System Access Control List (SACL) for the new <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: discretionaryAcl\n      type: System.Security.AccessControl.DiscretionaryAcl\n      description: \"\\n<p>The Discretionary Access Control List (DACL) for the new <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, ControlFlags, SecurityIdentifier, SecurityIdentifier, SystemAcl, DiscretionaryAcl)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)\n  id: '#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)'\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: CommonSecurityDescriptor(Boolean, Boolean, RawSecurityDescriptor)\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(System.Boolean, System.Boolean, System.Security.AccessControl.RawSecurityDescriptor)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 184\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public CommonSecurityDescriptor(bool isContainer, bool isDS, RawSecurityDescriptor rawSecurityDescriptor)\n    content.vb: Public Sub New(isContainer As Boolean, isDS As Boolean, rawSecurityDescriptor As RawSecurityDescriptor)\n    parameters:\n    - id: isContainer\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a container object.</p>\\n\"\n    - id: isDS\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a directory object.</p>\\n\"\n    - id: rawSecurityDescriptor\n      type: System.Security.AccessControl.RawSecurityDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.RawSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from which to create the new <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, RawSecurityDescriptor)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)\n  id: '#ctor(System.Boolean,System.Boolean,System.String)'\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: CommonSecurityDescriptor(Boolean, Boolean, String)\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(System.Boolean, System.Boolean, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 185\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified Security Descriptor Definition Language (SDDL) string.</p>\\n\"\n  syntax:\n    content: public CommonSecurityDescriptor(bool isContainer, bool isDS, string sddlForm)\n    content.vb: Public Sub New(isContainer As Boolean, isDS As Boolean, sddlForm As String)\n    parameters:\n    - id: isContainer\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a container object.</p>\\n\"\n    - id: isDS\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new security descriptor is associated with a directory object.</p>\\n\"\n    - id: sddlForm\n      type: System.String\n      description: \"\\n<p>The SDDL string from which to create the new <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean, Boolean, String)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags\n  id: ControlFlags\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: ControlFlags\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ControlFlags\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 186\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets values that specify behavior of the <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override ControlFlags ControlFlags { get; }\n    content.vb: Public Overrides ReadOnly Property ControlFlags As ControlFlags\n    parameters: []\n    return:\n      type: System.Security.AccessControl.ControlFlags\n      description: \"\\n<p>One or more values of the <xref href=\\\"System.Security.AccessControl.ControlFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration combined with a logical OR operation.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: CommonSecurityDescriptor.ControlFlags\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\n  id: DiscretionaryAcl\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: DiscretionaryAcl\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DiscretionaryAcl\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 187\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the discretionary access control list (DACL) for this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The DACL contains access rules.</p>\\n\"\n  syntax:\n    content: public DiscretionaryAcl DiscretionaryAcl { get; set; }\n    content.vb: Public Property DiscretionaryAcl As DiscretionaryAcl\n    parameters: []\n    return:\n      type: System.Security.AccessControl.DiscretionaryAcl\n      description: \"\\n<p>The DACL for this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CommonSecurityDescriptor.DiscretionaryAcl\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.Group\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.Group\n  id: Group\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Group\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.Group\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Group\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 188\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the primary group for this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override SecurityIdentifier Group { get; set; }\n    content.vb: Public Overrides Property Group As SecurityIdentifier\n    parameters: []\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The primary group for this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericSecurityDescriptor.Group\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CommonSecurityDescriptor.Group\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer\n  id: IsContainer\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: IsContainer\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsContainer\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 189\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a Boolean value that specifies whether the object associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a container object.</p>\\n\"\n  syntax:\n    content: public bool IsContainer { get; }\n    content.vb: Public ReadOnly Property IsContainer As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the object associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a container object; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CommonSecurityDescriptor.IsContainer\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  id: IsDiscretionaryAclCanonical\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: IsDiscretionaryAclCanonical\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDiscretionaryAclCanonical\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 190\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a Boolean value that specifies whether the Discretionary Access Control List (DACL) associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is in canonical order.</p>\\n\"\n  syntax:\n    content: public bool IsDiscretionaryAclCanonical { get; }\n    content.vb: Public ReadOnly Property IsDiscretionaryAclCanonical As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the DACL associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is in canonical order; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CommonSecurityDescriptor.IsDiscretionaryAclCanonical\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDS\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.IsDS\n  id: IsDS\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: IsDS\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsDS\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDS\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 191\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a Boolean value that specifies whether the object associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a directory object.</p>\\n\"\n  syntax:\n    content: public bool IsDS { get; }\n    content.vb: Public ReadOnly Property IsDS As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the object associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a directory object; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CommonSecurityDescriptor.IsDS\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical\n  id: IsSystemAclCanonical\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: IsSystemAclCanonical\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSystemAclCanonical\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 192\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a Boolean value that specifies whether the System Access Control List (SACL) associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is in canonical order.</p>\\n\"\n  syntax:\n    content: public bool IsSystemAclCanonical { get; }\n    content.vb: Public ReadOnly Property IsSystemAclCanonical As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the SACL associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is in canonical order; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CommonSecurityDescriptor.IsSystemAclCanonical\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.Owner\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.Owner\n  id: Owner\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Owner\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.Owner\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Owner\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 193\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the owner of the object associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override SecurityIdentifier Owner { get; set; }\n    content.vb: Public Overrides Property Owner As SecurityIdentifier\n    parameters: []\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The owner of the object associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericSecurityDescriptor.Owner\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CommonSecurityDescriptor.Owner\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\n  commentId: P:System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\n  id: SystemAcl\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: SystemAcl\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SystemAcl\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 194\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the System Access Control List (SACL) for this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The SACL contains audit rules.</p>\\n\"\n  syntax:\n    content: public SystemAcl SystemAcl { get; set; }\n    content.vb: Public Property SystemAcl As SystemAcl\n    parameters: []\n    return:\n      type: System.Security.AccessControl.SystemAcl\n      description: \"\\n<p>The SACL for this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CommonSecurityDescriptor.SystemAcl\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)\n  id: AddDiscretionaryAcl(System.Byte,System.Int32)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: AddDiscretionaryAcl(Byte, Int32)\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddDiscretionaryAcl\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 195\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance and sets the <xref href=\\\"System.Security.AccessControl.ControlFlags.DiscretionaryAclPresent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag.</p>\\n\"\n  syntax:\n    content: public void AddDiscretionaryAcl(byte revision, int trusted)\n    content.vb: Public Sub AddDiscretionaryAcl(revision As Byte, trusted As Integer)\n    parameters:\n    - id: revision\n      type: System.Byte\n      description: \"\\n<p>The revision level of the new <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: trusted\n      type: System.Int32\n      description: \"\\n<p>The number of Access Control Entries (ACEs) this <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can contain. This number is to be used only as a hint.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CommonSecurityDescriptor.AddDiscretionaryAcl(Byte, Int32)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)\n  id: AddSystemAcl(System.Byte,System.Int32)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: AddSystemAcl(Byte, Int32)\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddSystemAcl\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 196\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance and sets the <xref href=\\\"System.Security.AccessControl.ControlFlags.SystemAclPresent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag.</p>\\n\"\n  syntax:\n    content: public void AddSystemAcl(byte revision, int trusted)\n    content.vb: Public Sub AddSystemAcl(revision As Byte, trusted As Integer)\n    parameters:\n    - id: revision\n      type: System.Byte\n      description: \"\\n<p>The revision level of the new <xref href=\\\"System.Security.AccessControl.SystemAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: trusted\n      type: System.Int32\n      description: \"\\n<p>The number of Access Control Entries (ACEs) this <xref href=\\\"System.Security.AccessControl.SystemAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can contain. This number is to be used only as a hint.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CommonSecurityDescriptor.AddSystemAcl(Byte, Int32)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)\n  id: PurgeAccessControl(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: PurgeAccessControl(SecurityIdentifier)\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PurgeAccessControl\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 197\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes all access rules for the specified security identifier from the Discretionary Access Control List (DACL) associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void PurgeAccessControl(SecurityIdentifier sid)\n    content.vb: Public Sub PurgeAccessControl(sid As SecurityIdentifier)\n    parameters:\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The security identifier for which to remove access rules.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)\n  id: PurgeAudit(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: PurgeAudit(SecurityIdentifier)\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PurgeAudit\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 198\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes all audit rules for the specified security identifier from the System Access Control List (SACL) associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void PurgeAudit(SecurityIdentifier sid)\n    content.vb: Public Sub PurgeAudit(sid As SecurityIdentifier)\n    parameters:\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The security identifier for which to remove audit rules.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)\n  id: SetDiscretionaryAclProtection(System.Boolean,System.Boolean)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: SetDiscretionaryAclProtection(Boolean, Boolean)\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetDiscretionaryAclProtection\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 199\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the inheritance protection for the Discretionary Access Control List (DACL) associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. DACLs that are protected do not inherit access rules from parent containers.</p>\\n\"\n  syntax:\n    content: public void SetDiscretionaryAclProtection(bool isProtected, bool preserveInheritance)\n    content.vb: Public Sub SetDiscretionaryAclProtection(isProtected As Boolean, preserveInheritance As Boolean)\n    parameters:\n    - id: isProtected\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to protect the DACL from inheritance.</p>\\n\"\n    - id: preserveInheritance\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to keep inherited access rules in the DACL; <strong>false</strong> to remove inherited access rules from the DACL.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean, Boolean)\n- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)\n  commentId: M:System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)\n  id: SetSystemAclProtection(System.Boolean,System.Boolean)\n  parent: System.Security.AccessControl.CommonSecurityDescriptor\n  langs:\n  - csharp\n  - vb\n  name: SetSystemAclProtection(Boolean, Boolean)\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetSystemAclProtection\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 200\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the inheritance protection for the System Access Control List (SACL) associated with this <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. SACLs that are protected do not inherit audit rules from parent containers.</p>\\n\"\n  syntax:\n    content: public void SetSystemAclProtection(bool isProtected, bool preserveInheritance)\n    content.vb: Public Sub SetSystemAclProtection(isProtected As Boolean, preserveInheritance As Boolean)\n    parameters:\n    - id: isProtected\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to protect the SACL from inheritance.</p>\\n\"\n    - id: preserveInheritance\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to keep inherited audit rules in the SACL; <strong>false</strong> to remove inherited audit rules from the SACL.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CommonSecurityDescriptor.SetSystemAclProtection(Boolean, Boolean)\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.GenericSecurityDescriptor\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericSecurityDescriptor\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor\n  commentId: T:System.Security.AccessControl.GenericSecurityDescriptor\n  nameWithType: GenericSecurityDescriptor\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: BinaryLength\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength\n  nameWithType: GenericSecurityDescriptor.BinaryLength\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: Revision\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.Revision\n  nameWithType: GenericSecurityDescriptor.Revision\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: true\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericSecurityDescriptor.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericSecurityDescriptor.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: GetSddlForm(AccessControlSections)\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n    name: GetSddlForm\n    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm\n  - name: (\n    fullName: (\n  - uid: System.Security.AccessControl.AccessControlSections\n    name: AccessControlSections\n    fullName: System.Security.AccessControl.AccessControlSections\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n    name: GetSddlForm\n    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm\n  - name: (\n    fullName: (\n  - uid: System.Security.AccessControl.AccessControlSections\n    name: AccessControlSections\n    fullName: System.Security.AccessControl.AccessControlSections\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)\n  nameWithType: GenericSecurityDescriptor.GetSddlForm(AccessControlSections)\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: IsSddlConversionSupported()\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n    name: IsSddlConversionSupported\n    fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n    name: IsSddlConversionSupported\n    fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported\n  nameWithType: GenericSecurityDescriptor.IsSddlConversionSupported()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.AccessControl.ControlFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: ControlFlags\n  fullName: System.Security.AccessControl.ControlFlags\n  commentId: T:System.Security.AccessControl.ControlFlags\n  nameWithType: ControlFlags\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n  commentId: T:System.Security.Principal.SecurityIdentifier\n  nameWithType: SecurityIdentifier\n- uid: System.Security.AccessControl.SystemAcl\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: SystemAcl\n  fullName: System.Security.AccessControl.SystemAcl\n  commentId: T:System.Security.AccessControl.SystemAcl\n  nameWithType: SystemAcl\n- uid: System.Security.AccessControl.DiscretionaryAcl\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: DiscretionaryAcl\n  fullName: System.Security.AccessControl.DiscretionaryAcl\n  commentId: T:System.Security.AccessControl.DiscretionaryAcl\n  nameWithType: DiscretionaryAcl\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Security.AccessControl.RawSecurityDescriptor\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: RawSecurityDescriptor\n  fullName: System.Security.AccessControl.RawSecurityDescriptor\n  commentId: T:System.Security.AccessControl.RawSecurityDescriptor\n  nameWithType: RawSecurityDescriptor\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: ControlFlags\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags\n  nameWithType: GenericSecurityDescriptor.ControlFlags\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.Group\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: Group\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Group\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.Group\n  nameWithType: GenericSecurityDescriptor.Group\n- uid: System.Security.AccessControl.GenericSecurityDescriptor.Owner\n  parent: System.Security.AccessControl.GenericSecurityDescriptor\n  isExternal: false\n  name: Owner\n  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Owner\n  commentId: P:System.Security.AccessControl.GenericSecurityDescriptor.Owner\n  nameWithType: GenericSecurityDescriptor.Owner\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  commentId: T:System.Byte\n  nameWithType: Byte\n"}