{"nodes":[{"pos":[543,558],"content":"LazyInitializer","needQuote":true,"nodes":[{"content":"LazyInitializer","pos":[0,15]}]},{"pos":[1960,1987],"content":"EnsureInitialized<T>(ref T)","needQuote":true,"nodes":[{"content":"EnsureInitialized&lt;T&gt;(ref T)","pos":[0,27],"source":"EnsureInitialized<T>(ref T)"}]},{"content":"\\n&lt;p&gt;A reference of type &lt;em&gt;T&lt;/em&gt; to initialize if it has not already been initialized.&lt;/p&gt;\\n","pos":[2799,2894],"source":"\\n<p>A reference of type <em>T</em> to initialize if it has not already been initialized.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the reference to be initialized.&lt;/p&gt;\\n","pos":[2948,3003],"source":"\\n<p>The type of the reference to be initialized.</p>\\n"},{"content":"\\n&lt;p&gt;The initialized reference of type &lt;em&gt;T&lt;/em&gt;.&lt;/p&gt;\\n","pos":[3055,3111],"source":"\\n<p>The initialized reference of type <em>T</em>.</p>\\n"},{"content":"\\n&lt;p&gt;Permissions to access the constructor of type &lt;em&gt;T&lt;/em&gt; were missing.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[3230,3320],"source":"\\n<p>Permissions to access the constructor of type <em>T</em> were missing.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;Type &lt;em&gt;T&lt;/em&gt; does not have a default constructor.&lt;/p&gt;\\n","pos":[3427,3490],"source":"\\n<p>Type <em>T</em> does not have a default constructor.</p>\\n"},{"pos":[4171,4223],"content":"EnsureInitialized<T>(ref T, ref Boolean, ref Object)","needQuote":true,"nodes":[{"content":"EnsureInitialized&lt;T&gt;(ref T, ref Boolean, ref Object)","pos":[0,52],"source":"EnsureInitialized<T>(ref T, ref Boolean, ref Object)"}]},{"content":"\\n&lt;p&gt;A reference or value of type &lt;em&gt;T&lt;/em&gt; to initialize if it hasn't already been initialized.&lt;/p&gt;\\n","pos":[5150,5253],"source":"\\n<p>A reference or value of type <em>T</em> to initialize if it hasn't already been initialized.</p>\\n"},{"content":"\\n&lt;p&gt;A reference to a Boolean value that determines whether the target has already been initialized.&lt;/p&gt;\\n","pos":[5324,5430],"source":"\\n<p>A reference to a Boolean value that determines whether the target has already been initialized.</p>\\n"},{"content":"\\n&lt;p&gt;A reference to an object used as the mutually exclusive lock for initializing &lt;em&gt;target&lt;/em&gt;.","pos":[5497,5596],"source":"\\n<p>A reference to an object used as the mutually exclusive lock for initializing <em>target</em>."},{"content":"If &lt;em&gt;syncLock&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, a new object will be instantiated.&lt;/p&gt;\\n","pos":[5597,5684],"source":" If <em>syncLock</em> is <strong>null</strong>, a new object will be instantiated.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the reference to be initialized.&lt;/p&gt;\\n","pos":[5738,5793],"source":"\\n<p>The type of the reference to be initialized.</p>\\n"},{"content":"\\n&lt;p&gt;The initialized value of type &lt;em&gt;T&lt;/em&gt;.&lt;/p&gt;\\n","pos":[5845,5897],"source":"\\n<p>The initialized value of type <em>T</em>.</p>\\n"},{"content":"\\n&lt;p&gt;Permissions to access the constructor of type &lt;em&gt;T&lt;/em&gt; were missing.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[6016,6106],"source":"\\n<p>Permissions to access the constructor of type <em>T</em> were missing.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;Type &lt;em&gt;T&lt;/em&gt; does not have a default constructor.&lt;/p&gt;\\n","pos":[6213,6276],"source":"\\n<p>Type <em>T</em> does not have a default constructor.</p>\\n"},{"pos":[7134,7195],"content":"EnsureInitialized<T>(ref T, ref Boolean, ref Object, Func<T>)","needQuote":true,"nodes":[{"content":"EnsureInitialized&lt;T&gt;(ref T, ref Boolean, ref Object, Func&lt;T&gt;)","pos":[0,61],"source":"EnsureInitialized<T>(ref T, ref Boolean, ref Object, Func<T>)"}]},{"content":"\\n&lt;p&gt;A reference or value of type &lt;em&gt;T&lt;/em&gt; to initialize if it hasn't already been initialized.&lt;/p&gt;\\n","pos":[8189,8292],"source":"\\n<p>A reference or value of type <em>T</em> to initialize if it hasn't already been initialized.</p>\\n"},{"content":"\\n&lt;p&gt;A reference to a Boolean value that determines whether the target has already been initialized.&lt;/p&gt;\\n","pos":[8363,8469],"source":"\\n<p>A reference to a Boolean value that determines whether the target has already been initialized.</p>\\n"},{"content":"\\n&lt;p&gt;A reference to an object used as the mutually exclusive lock for initializing &lt;em&gt;target&lt;/em&gt;.","pos":[8536,8635],"source":"\\n<p>A reference to an object used as the mutually exclusive lock for initializing <em>target</em>."},{"content":"If &lt;em&gt;syncLock&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, a new object will be instantiated.&lt;/p&gt;\\n","pos":[8636,8723],"source":" If <em>syncLock</em> is <strong>null</strong>, a new object will be instantiated.</p>\\n"},{"content":"\\n&lt;p&gt;The function that is called to initialize the reference or value.&lt;/p&gt;\\n","pos":[8797,8873],"source":"\\n<p>The function that is called to initialize the reference or value.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the reference to be initialized.&lt;/p&gt;\\n","pos":[8927,8982],"source":"\\n<p>The type of the reference to be initialized.</p>\\n"},{"content":"\\n&lt;p&gt;The initialized value of type &lt;em&gt;T&lt;/em&gt;.&lt;/p&gt;\\n","pos":[9034,9086],"source":"\\n<p>The initialized value of type <em>T</em>.</p>\\n"},{"content":"\\n&lt;p&gt;Permissions to access the constructor of type &lt;em&gt;T&lt;/em&gt; were missing.&lt;/p&gt;\\n","pos":[9205,9286],"source":"\\n<p>Permissions to access the constructor of type <em>T</em> were missing.</p>\\n"},{"content":"\\n&lt;p&gt;Type &lt;em&gt;T&lt;/em&gt; does not have a default constructor.&lt;/p&gt;\\n","pos":[9393,9456],"source":"\\n<p>Type <em>T</em> does not have a default constructor.</p>\\n"},{"pos":[10273,10309],"content":"EnsureInitialized<T>(ref T, Func<T>)","needQuote":true,"nodes":[{"content":"EnsureInitialized&lt;T&gt;(ref T, Func&lt;T&gt;)","pos":[0,36],"source":"EnsureInitialized<T>(ref T, Func<T>)"}]},{"content":"\\n&lt;p&gt;The reference of type &lt;em&gt;T&lt;/em&gt; to initialize if it hasn't already been initialized.&lt;/p&gt;\\n","pos":[11182,11278],"source":"\\n<p>The reference of type <em>T</em> to initialize if it hasn't already been initialized.</p>\\n"},{"content":"\\n&lt;p&gt;The function that is called to initialize the reference.&lt;/p&gt;\\n","pos":[11352,11419],"source":"\\n<p>The function that is called to initialize the reference.</p>\\n"},{"content":"\\n&lt;p&gt;The reference type of the reference to be initialized.&lt;/p&gt;\\n","pos":[11473,11538],"source":"\\n<p>The reference type of the reference to be initialized.</p>\\n"},{"content":"\\n&lt;p&gt;The initialized value of type &lt;em&gt;T&lt;/em&gt;.&lt;/p&gt;\\n","pos":[11590,11642],"source":"\\n<p>The initialized value of type <em>T</em>.</p>\\n"},{"content":"\\n&lt;p&gt;Type &lt;em&gt;T&lt;/em&gt; does not have a default constructor.&lt;/p&gt;\\n","pos":[11763,11826],"source":"\\n<p>Type <em>T</em> does not have a default constructor.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;valueFactory&lt;/em&gt; returned null (Nothing in Visual Basic).&lt;/p&gt;\\n","pos":[11939,12014],"source":"\\n<p>\\n<em>valueFactory</em> returned null (Nothing in Visual Basic).</p>\\n"},{"pos":[12465,12481],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[12642,12648],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12808,12818],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12913,12921],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12990,12991],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13018,13019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13089,13097],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13166,13167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13194,13195],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13378,13392],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[13511,13517],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13584,13585],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13635,13641],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13701,13702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13785,13791],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13858,13859],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13909,13915],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13975,13976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14190,14212],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[14360,14366],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14433,14434],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14484,14490],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14551,14552]},{"pos":[14607,14613],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14673,14674],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14771,14777],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14844,14845],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14895,14901],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14962,14963]},{"pos":[15018,15024],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15084,15085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15330,15361],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[15527,15542],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15618,15619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15669,15675],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15736,15737]},{"pos":[15792,15798],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15858,15859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15965,15980],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16056,16057],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16107,16113],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16174,16175]},{"pos":[16230,16236],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16296,16297],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16527,16540],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16641,16652],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16724,16725],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16752,16753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16826,16837],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16909,16910],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16937,16938],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17113,17122],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17215,17222],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17290,17291],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17318,17319],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17388,17395],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17463,17464],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17491,17492],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17667,17684],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[17793,17808],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17884,17885],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17912,17913],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17990,18005],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18081,18082],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18109,18110],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18255,18261],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[18363,18364],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18453,18454],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[18554,18561],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18720,18727],"content":"Func<T>","needQuote":true,"nodes":[{"content":"Func&lt;T&gt;","pos":[0,7],"source":"Func<T>"}]},{"pos":[18858,18862],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[18899,18900],"content":"<","needQuote":true,"nodes":[]},{"pos":[18927,18928],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19021,19025],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[19063,19066]},{"pos":[19100,19101],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19128,19129],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19281,19294],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[19443,19447],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[19484,19485],"content":"<","needQuote":true,"nodes":[]},{"pos":[19512,19519],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[19618,19622],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[19660,19663]},{"pos":[19697,19704],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[19737,19738],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19931,19952],"content":"MemberAccessException","needQuote":true,"nodes":[{"content":"MemberAccessException","pos":[0,21]}]},{"pos":[20158,20180],"content":"MissingMemberException","needQuote":true,"nodes":[{"content":"MissingMemberException","pos":[0,22]}]},{"pos":[20392,20417],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Threading.LazyInitializer\n  commentId: T:System.Threading.LazyInitializer\n  id: LazyInitializer\n  parent: System.Threading\n  children:\n  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@)\n  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)\n  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})\n  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})\n  langs:\n  - csharp\n  - vb\n  name: LazyInitializer\n  fullName: System.Threading.LazyInitializer\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/LazyInitializer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LazyInitializer\n    path: src/mscorlib/src/System/Threading/LazyInitializer.cs\n    startLine: 56\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Provides lazy initialization routines.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public class LazyInitializer\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public Class LazyInitializer\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: LazyInitializer\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@)\n  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)\n  id: EnsureInitialized``1(``0@)\n  parent: System.Threading.LazyInitializer\n  langs:\n  - csharp\n  - vb\n  name: EnsureInitialized<T>(ref T)\n  fullName: System.Threading.LazyInitializer.EnsureInitialized<T>(ref T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/LazyInitializer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnsureInitialized\n    path: src/mscorlib/src/System/Threading/LazyInitializer.cs\n    startLine: 85\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</p>\\n\"\n  syntax:\n    content: 'public static T EnsureInitialized<T>(ref T target)where T : class'\n    content.vb: Public Shared Function EnsureInitialized(Of T As Class)(ByRef target As T) As T\n    parameters:\n    - id: target\n      type: '{T}'\n      description: \"\\n<p>A reference of type <em>T</em> to initialize if it has not already been initialized.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the reference to be initialized.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The initialized reference of type <em>T</em>.</p>\\n\"\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: \"\\n<p>Permissions to access the constructor of type <em>T</em> were missing.</p>\\n<p></p>\\n\"\n  - type: System.MissingMemberException\n    commentId: T:System.MissingMemberException\n    description: \"\\n<p>Type <em>T</em> does not have a default constructor.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.LazyInitializer.EnsureInitialized(Of T)(ByRef T)\n  name.vb: EnsureInitialized(Of T)(ByRef T)\n  nameWithType: LazyInitializer.EnsureInitialized<T>(ref T)\n  nameWithType.vb: LazyInitializer.EnsureInitialized(Of T)(ByRef T)\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)\n  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)\n  id: EnsureInitialized``1(``0@,System.Boolean@,System.Object@)\n  parent: System.Threading.LazyInitializer\n  langs:\n  - csharp\n  - vb\n  name: EnsureInitialized<T>(ref T, ref Boolean, ref Object)\n  fullName: System.Threading.LazyInitializer.EnsureInitialized<T>(ref T, ref System.Boolean, ref System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/LazyInitializer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnsureInitialized\n    path: src/mscorlib/src/System/Threading/LazyInitializer.cs\n    startLine: 168\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</p>\\n\"\n  syntax:\n    content: public static T EnsureInitialized<T>(ref T target, ref bool initialized, ref object syncLock)\n    content.vb: Public Shared Function EnsureInitialized(Of T)(ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T\n    parameters:\n    - id: target\n      type: '{T}'\n      description: \"\\n<p>A reference or value of type <em>T</em> to initialize if it hasn't already been initialized.</p>\\n\"\n    - id: initialized\n      type: System.Boolean\n      description: \"\\n<p>A reference to a Boolean value that determines whether the target has already been initialized.</p>\\n\"\n    - id: syncLock\n      type: System.Object\n      description: \"\\n<p>A reference to an object used as the mutually exclusive lock for initializing <em>target</em>. If <em>syncLock</em> is <strong>null</strong>, a new object will be instantiated.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the reference to be initialized.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The initialized value of type <em>T</em>.</p>\\n\"\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: \"\\n<p>Permissions to access the constructor of type <em>T</em> were missing.</p>\\n<p></p>\\n\"\n  - type: System.MissingMemberException\n    commentId: T:System.MissingMemberException\n    description: \"\\n<p>Type <em>T</em> does not have a default constructor.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.LazyInitializer.EnsureInitialized(Of T)(ByRef T, ByRef System.Boolean, ByRef System.Object)\n  name.vb: EnsureInitialized(Of T)(ByRef T, ByRef Boolean, ByRef Object)\n  nameWithType: LazyInitializer.EnsureInitialized<T>(ref T, ref Boolean, ref Object)\n  nameWithType.vb: LazyInitializer.EnsureInitialized(Of T)(ByRef T, ByRef Boolean, ByRef Object)\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})\n  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})\n  id: EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})\n  parent: System.Threading.LazyInitializer\n  langs:\n  - csharp\n  - vb\n  name: EnsureInitialized<T>(ref T, ref Boolean, ref Object, Func<T>)\n  fullName: System.Threading.LazyInitializer.EnsureInitialized<T>(ref T, ref System.Boolean, ref System.Object, System.Func<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/LazyInitializer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnsureInitialized\n    path: src/mscorlib/src/System/Threading/LazyInitializer.cs\n    startLine: 193\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</p>\\n\"\n  syntax:\n    content: public static T EnsureInitialized<T>(ref T target, ref bool initialized, ref object syncLock, Func<T> valueFactory)\n    content.vb: Public Shared Function EnsureInitialized(Of T)(ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T\n    parameters:\n    - id: target\n      type: '{T}'\n      description: \"\\n<p>A reference or value of type <em>T</em> to initialize if it hasn't already been initialized.</p>\\n\"\n    - id: initialized\n      type: System.Boolean\n      description: \"\\n<p>A reference to a Boolean value that determines whether the target has already been initialized.</p>\\n\"\n    - id: syncLock\n      type: System.Object\n      description: \"\\n<p>A reference to an object used as the mutually exclusive lock for initializing <em>target</em>. If <em>syncLock</em> is <strong>null</strong>, a new object will be instantiated.</p>\\n\"\n    - id: valueFactory\n      type: System.Func{{T}}\n      description: \"\\n<p>The function that is called to initialize the reference or value.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the reference to be initialized.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The initialized value of type <em>T</em>.</p>\\n\"\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: \"\\n<p>Permissions to access the constructor of type <em>T</em> were missing.</p>\\n\"\n  - type: System.MissingMemberException\n    commentId: T:System.MissingMemberException\n    description: \"\\n<p>Type <em>T</em> does not have a default constructor.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.LazyInitializer.EnsureInitialized(Of T)(ByRef T, ByRef System.Boolean, ByRef System.Object, System.Func(Of T))\n  name.vb: EnsureInitialized(Of T)(ByRef T, ByRef Boolean, ByRef Object, Func(Of T))\n  nameWithType: LazyInitializer.EnsureInitialized<T>(ref T, ref Boolean, ref Object, Func<T>)\n  nameWithType.vb: LazyInitializer.EnsureInitialized(Of T)(ByRef T, ByRef Boolean, ByRef Object, Func(Of T))\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})\n  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})\n  id: EnsureInitialized``1(``0@,System.Func{``0})\n  parent: System.Threading.LazyInitializer\n  langs:\n  - csharp\n  - vb\n  name: EnsureInitialized<T>(ref T, Func<T>)\n  fullName: System.Threading.LazyInitializer.EnsureInitialized<T>(ref T, System.Func<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/LazyInitializer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnsureInitialized\n    path: src/mscorlib/src/System/Threading/LazyInitializer.cs\n    startLine: 124\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a target reference type by using a specified function if it hasn't already been initialized.</p>\\n\"\n  syntax:\n    content: 'public static T EnsureInitialized<T>(ref T target, Func<T> valueFactory)where T : class'\n    content.vb: Public Shared Function EnsureInitialized(Of T As Class)(ByRef target As T, valueFactory As Func(Of T)) As T\n    parameters:\n    - id: target\n      type: '{T}'\n      description: \"\\n<p>The reference of type <em>T</em> to initialize if it hasn't already been initialized.</p>\\n\"\n    - id: valueFactory\n      type: System.Func{{T}}\n      description: \"\\n<p>The function that is called to initialize the reference.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The reference type of the reference to be initialized.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The initialized value of type <em>T</em>.</p>\\n\"\n  exceptions:\n  - type: System.MissingMemberException\n    commentId: T:System.MissingMemberException\n    description: \"\\n<p>Type <em>T</em> does not have a default constructor.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>valueFactory</em> returned null (Nothing in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.LazyInitializer.EnsureInitialized(Of T)(ByRef T, System.Func(Of T))\n  name.vb: EnsureInitialized(Of T)(ByRef T, Func(Of T))\n  nameWithType: LazyInitializer.EnsureInitialized<T>(ref T, Func<T>)\n  nameWithType.vb: LazyInitializer.EnsureInitialized(Of T)(ByRef T, Func(Of T))\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Func{{T}}\n  parent: System\n  definition: System.Func`1\n  name: Func<T>\n  fullName: System.Func<T>\n  fullname.vb: System.Func(Of T)\n  name.vb: Func(Of T)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Func<T>\n  nameWithType.vb: Func(Of T)\n  commentId: T:System.Func{``0}\n- uid: System.Func`1\n  isExternal: false\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n  commentId: T:System.Func`1\n- uid: System.MemberAccessException\n  parent: System\n  isExternal: false\n  name: MemberAccessException\n  fullName: System.MemberAccessException\n  nameWithType: MemberAccessException\n  commentId: T:System.MemberAccessException\n- uid: System.MissingMemberException\n  parent: System\n  isExternal: false\n  name: MissingMemberException\n  fullName: System.MissingMemberException\n  nameWithType: MissingMemberException\n  commentId: T:System.MissingMemberException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}