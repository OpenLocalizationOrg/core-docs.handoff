{"nodes":[{"pos":[1786,1792],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[3640,3648],"content":"Assembly","needQuote":true,"nodes":[{"content":"Assembly","pos":[0,8]}]},{"content":"\\n&lt;p&gt;An &lt;strong&gt;Assembly&lt;/strong&gt; object.&lt;/p&gt;\\n","pos":[4488,4535],"source":"\\n<p>An <strong>Assembly</strong> object.</p>\\n"},{"pos":[4875,4891],"content":"CustomAttributes","needQuote":true,"nodes":[{"content":"CustomAttributes","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A collection that contains this module's custom attributes.&lt;/p&gt;\\n","pos":[5715,5785],"source":"\\n<p>A collection that contains this module's custom attributes.</p>\\n"},{"pos":[6139,6157],"content":"FullyQualifiedName","needQuote":true,"nodes":[{"content":"FullyQualifiedName","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The fully qualified module name.&lt;/p&gt;\\n","pos":[6943,6986],"source":"\\n<p>The fully qualified module name.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permissions.","pos":[7115,7170],"source":"\\n<p>The caller does not have the required permissions."},{"content":"&lt;/p&gt;\\n","pos":[7171,7177],"source":" </p>\\n"},{"pos":[7615,7619],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The module name with no path.&lt;/p&gt;\\n","pos":[8301,8341],"source":"\\n<p>The module name with no path.</p>\\n"},{"pos":[8692,8706],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.","pos":[9386,9432],"source":"\\n<p>The object to compare with this instance."},{"content":"&lt;/p&gt;\\n","pos":[9433,9439],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;o&lt;/em&gt; is equal to this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9500,9610],"source":"\\n<p>\\n<strong>true</strong> if <em>o</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9969,9982],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[10604,10649],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[11120,11153],"content":"GetType(String, Boolean, Boolean)","needQuote":true,"nodes":[{"content":"GetType(String, Boolean, Boolean)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The name of the type to locate.","pos":[12134,12170],"source":"\\n<p>The name of the type to locate."},{"content":"The name must be fully qualified with the namespace.","pos":[12171,12223]},{"content":"&lt;/p&gt;\\n","pos":[12224,12230],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to throw an exception if the type cannot be found; &lt;strong&gt;false&lt;/strong&gt; to return &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12302,12443],"source":"\\n<p>\\n<strong>true</strong> to throw an exception if the type cannot be found; <strong>false</strong> to return <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; for case-insensitive search; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[12513,12605],"source":"\\n<p>\\n<strong>true</strong> for case-insensitive search; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12606,12612],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12987,13038],"source":"\\n<p>\\n<em>className</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[13039,13045],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The class initializers are invoked and an exception is thrown.","pos":[13180,13247],"source":"\\n<p>The class initializers are invoked and an exception is thrown."},{"content":"&lt;/p&gt;\\n","pos":[13248,13254],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; is a zero-length string.","pos":[13351,13401],"source":"\\n<p>\\n<em>className</em> is a zero-length string."},{"content":"&lt;/p&gt;\\n","pos":[13402,13408],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;throwOnError&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;, and the type cannot be found.","pos":[13505,13589],"source":"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong>, and the type cannot be found."},{"content":"&lt;/p&gt;\\n","pos":[13590,13596],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; requires a dependent assembly that could not be found.","pos":[13707,13787],"source":"\\n<p>\\n<em>className</em> requires a dependent assembly that could not be found."},{"content":"&lt;/p&gt;\\n","pos":[13788,13794],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; requires a dependent assembly that was found but could not be loaded.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The current assembly was loaded into the reflection-only context, and &lt;em&gt;className&lt;/em&gt; requires a dependent assembly that was not preloaded.","pos":[13897,14156],"source":"\\n<p>\\n<em>className</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>className</em> requires a dependent assembly that was not preloaded."},{"content":"&lt;/p&gt;\\n","pos":[14157,14163],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; requires a dependent assembly, but the file is not a valid assembly.","pos":[14272,14366],"source":"\\n<p>\\n<em>className</em> requires a dependent assembly, but the file is not a valid assembly."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.&lt;/p&gt;\\n","pos":[14367,14534],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>className</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\\n"},{"pos":[14854,14864],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A &lt;strong&gt;String&lt;/strong&gt; representing the name of this module.&lt;/p&gt;\\n","pos":[15468,15542],"source":"\\n<p>A <strong>String</strong> representing the name of this module.</p>\\n"},{"pos":[15893,15907],"content":"FilterTypeName","needQuote":true,"nodes":[{"content":"FilterTypeName","pos":[0,14]}]},{"pos":[17223,17247],"content":"FilterTypeNameIgnoreCase","needQuote":true,"nodes":[{"content":"FilterTypeNameIgnoreCase","pos":[0,24]}]},{"pos":[18588,18603],"content":"ModuleVersionId","needQuote":true,"nodes":[{"content":"ModuleVersionId","pos":[0,15]}]},{"pos":[19819,19828],"content":"ScopeName","needQuote":true,"nodes":[{"content":"ScopeName","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The module name.&lt;/p&gt;\\n","pos":[20491,20518],"source":"\\n<p>The module name.</p>\\n"},{"pos":[20970,20999],"content":"FindTypes(TypeFilter, Object)","needQuote":true,"nodes":[{"content":"FindTypes(TypeFilter, Object)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The delegate used to filter the classes.","pos":[21821,21866],"source":"\\n<p>The delegate used to filter the classes."},{"content":"&lt;/p&gt;\\n","pos":[21867,21873],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An Object used to filter the classes.","pos":[21946,21988],"source":"\\n<p>An Object used to filter the classes."},{"content":"&lt;/p&gt;\\n","pos":[21989,21995],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of type &lt;strong&gt;Type&lt;/strong&gt; containing classes that were accepted by the filter.&lt;/p&gt;\\n","pos":[22055,22157],"source":"\\n<p>An array of type <strong>Type</strong> containing classes that were accepted by the filter.</p>\\n"},{"content":"\\n&lt;p&gt;One or more classes in a module could not be loaded.","pos":[22310,22367],"source":"\\n<p>One or more classes in a module could not be loaded."},{"content":"&lt;/p&gt;\\n","pos":[22368,22374],"source":" </p>\\n"},{"pos":[23099,23115],"content":"GetField(String)","needQuote":true,"nodes":[{"content":"GetField(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The field name.","pos":[23776,23796],"source":"\\n<p>The field name."},{"content":"&lt;/p&gt;\\n","pos":[23797,23803],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;FieldInfo&lt;/strong&gt; object having the specified name, or &lt;strong&gt;null&lt;/strong&gt; if the field does not exist.&lt;/p&gt;\\n","pos":[23877,24004],"source":"\\n<p>A <strong>FieldInfo</strong> object having the specified name, or <strong>null</strong> if the field does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;name&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[24123,24181],"source":"\\n<p>The <em>name</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24182,24188],"source":" </p>\\n"},{"pos":[24601,24631],"content":"GetField(String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetField(String, BindingFlags)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The field name.","pos":[25422,25442],"source":"\\n<p>The field name."},{"content":"&lt;/p&gt;\\n","pos":[25443,25449],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;One of the &lt;strong&gt;BindingFlags&lt;/strong&gt; bit flags used to control the search.","pos":[25536,25619],"source":"\\n<p>One of the <strong>BindingFlags</strong> bit flags used to control the search."},{"content":"&lt;/p&gt;\\n","pos":[25620,25626],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;FieldInfo&lt;/strong&gt; object having the specified name and binding attributes, or &lt;strong&gt;null&lt;/strong&gt; if the field does not exist.&lt;/p&gt;\\n","pos":[25700,25850],"source":"\\n<p>A <strong>FieldInfo</strong> object having the specified name and binding attributes, or <strong>null</strong> if the field does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;name&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[25969,26027],"source":"\\n<p>The <em>name</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[26028,26034],"source":" </p>\\n"},{"pos":[26354,26365],"content":"GetFields()","needQuote":true,"nodes":[{"content":"GetFields()","pos":[0,11]}]},{"pos":[27597,27620],"content":"GetFields(BindingFlags)","needQuote":true,"nodes":[{"content":"GetFields(BindingFlags)","pos":[0,23]}]},{"pos":[29295,29312],"content":"GetMethod(String)","needQuote":true,"nodes":[{"content":"GetMethod(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The method name.","pos":[29980,30001],"source":"\\n<p>The method name."},{"content":"&lt;/p&gt;\\n","pos":[30002,30008],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;MethodInfo&lt;/strong&gt; object having the specified name, or &lt;strong&gt;null&lt;/strong&gt; if the method does not exist.&lt;/p&gt;\\n","pos":[30083,30212],"source":"\\n<p>A <strong>MethodInfo</strong> object having the specified name, or <strong>null</strong> if the method does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[30331,30377],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[30378,30384],"source":" </p>\\n"},{"pos":[30750,30775],"content":"GetMethod(String, Type[])","needQuote":true,"nodes":[{"content":"GetMethod(String, Type[])","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The method name.","pos":[31509,31530],"source":"\\n<p>The method name."},{"content":"&lt;/p&gt;\\n","pos":[31531,31537],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The parameter types to search for.","pos":[31601,31640],"source":"\\n<p>The parameter types to search for."},{"content":"&lt;/p&gt;\\n","pos":[31641,31647],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;MethodInfo&lt;/strong&gt; object in accordance with the specified criteria, or &lt;strong&gt;null&lt;/strong&gt; if the method does not exist.&lt;/p&gt;\\n","pos":[31722,31867],"source":"\\n<p>A <strong>MethodInfo</strong> object in accordance with the specified criteria, or <strong>null</strong> if the method does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, &lt;em&gt;types&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, or &lt;em&gt;types&lt;/em&gt; (i) is &lt;strong&gt;null&lt;/strong&gt;.","pos":[31986,32121],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>, <em>types</em> is <strong>null</strong>, or <em>types</em> (i) is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[32122,32128],"source":" </p>\\n"},{"pos":[32587,32599],"content":"GetMethods()","needQuote":true,"nodes":[{"content":"GetMethods()","pos":[0,12]}]},{"pos":[33850,33874],"content":"GetMethods(BindingFlags)","needQuote":true,"nodes":[{"content":"GetMethods(BindingFlags)","pos":[0,24]}]},{"pos":[35555,35570],"content":"GetType(String)","needQuote":true,"nodes":[{"content":"GetType(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The name of the type to locate.","pos":[36343,36379],"source":"\\n<p>The name of the type to locate."},{"content":"The name must be fully qualified with the namespace.","pos":[36380,36432]},{"content":"&lt;/p&gt;\\n","pos":[36433,36439],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Type&lt;/strong&gt; object representing the given type, if the type is in this module; otherwise, &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36497,36632],"source":"\\n<p>A <strong>Type</strong> object representing the given type, if the type is in this module; otherwise, <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[36751,36802],"source":"\\n<p>\\n<em>className</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[36803,36809],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The class initializers are invoked and an exception is thrown.","pos":[36944,37011],"source":"\\n<p>The class initializers are invoked and an exception is thrown."},{"content":"&lt;/p&gt;\\n","pos":[37012,37018],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; is a zero-length string.","pos":[37115,37165],"source":"\\n<p>\\n<em>className</em> is a zero-length string."},{"content":"&lt;/p&gt;\\n","pos":[37166,37172],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; requires a dependent assembly that could not be found.","pos":[37283,37363],"source":"\\n<p>\\n<em>className</em> requires a dependent assembly that could not be found."},{"content":"&lt;/p&gt;\\n","pos":[37364,37370],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; requires a dependent assembly that was found but could not be loaded.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The current assembly was loaded into the reflection-only context, and &lt;em&gt;className&lt;/em&gt; requires a dependent assembly that was not preloaded.","pos":[37473,37732],"source":"\\n<p>\\n<em>className</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>className</em> requires a dependent assembly that was not preloaded."},{"content":"&lt;/p&gt;\\n","pos":[37733,37739],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; requires a dependent assembly, but the file is not a valid assembly.","pos":[37848,37942],"source":"\\n<p>\\n<em>className</em> requires a dependent assembly, but the file is not a valid assembly."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.&lt;/p&gt;\\n","pos":[37943,38110],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>className</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\\n"},{"pos":[38499,38523],"content":"GetType(String, Boolean)","needQuote":true,"nodes":[{"content":"GetType(String, Boolean)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The name of the type to locate.","pos":[39374,39410],"source":"\\n<p>The name of the type to locate."},{"content":"The name must be fully qualified with the namespace.","pos":[39411,39463]},{"content":"&lt;/p&gt;\\n","pos":[39464,39470],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; for case-insensitive search; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[39540,39632],"source":"\\n<p>\\n<strong>true</strong> for case-insensitive search; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[39633,39639],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Type&lt;/strong&gt; object representing the given type, if the type is in this module; otherwise, &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39697,39832],"source":"\\n<p>A <strong>Type</strong> object representing the given type, if the type is in this module; otherwise, <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[39951,40002],"source":"\\n<p>\\n<em>className</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[40003,40009],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The class initializers are invoked and an exception is thrown.","pos":[40144,40211],"source":"\\n<p>The class initializers are invoked and an exception is thrown."},{"content":"&lt;/p&gt;\\n","pos":[40212,40218],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; is a zero-length string.","pos":[40315,40365],"source":"\\n<p>\\n<em>className</em> is a zero-length string."},{"content":"&lt;/p&gt;\\n","pos":[40366,40372],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; requires a dependent assembly that could not be found.","pos":[40483,40563],"source":"\\n<p>\\n<em>className</em> requires a dependent assembly that could not be found."},{"content":"&lt;/p&gt;\\n","pos":[40564,40570],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; requires a dependent assembly that was found but could not be loaded.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The current assembly was loaded into the reflection-only context, and &lt;em&gt;className&lt;/em&gt; requires a dependent assembly that was not preloaded.","pos":[40673,40932],"source":"\\n<p>\\n<em>className</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>className</em> requires a dependent assembly that was not preloaded."},{"content":"&lt;/p&gt;\\n","pos":[40933,40939],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; requires a dependent assembly, but the file is not a valid assembly.","pos":[41048,41142],"source":"\\n<p>\\n<em>className</em> requires a dependent assembly, but the file is not a valid assembly."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;className&lt;/em&gt; requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.&lt;/p&gt;\\n","pos":[41143,41310],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>className</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\\n"},{"pos":[41621,41631],"content":"GetTypes()","needQuote":true,"nodes":[{"content":"GetTypes()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;An array of type &lt;strong&gt;Type&lt;/strong&gt; containing types defined within the module that is reflected by this instance.&lt;/p&gt;\\n","pos":[42254,42382],"source":"\\n<p>An array of type <strong>Type</strong> containing types defined within the module that is reflected by this instance.</p>\\n"},{"content":"\\n&lt;p&gt;One or more classes in a module could not be loaded.","pos":[42535,42592],"source":"\\n<p>One or more classes in a module could not be loaded."},{"content":"&lt;/p&gt;\\n","pos":[42593,42599],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[42714,42768],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[42769,42775],"source":" </p>\\n"},{"pos":[43558,43611],"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","pos":[0,53]}]},{"pos":[45266,45325],"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","pos":[0,59]}]},{"pos":[47084,47133],"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","pos":[0,49]}]},{"pos":[48456,48473],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[48637,48643],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48828,48852],"content":"ICustomAttributeProvider","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider","pos":[0,24]}]},{"pos":[49115,49137],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[49285,49291],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49358,49359],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49409,49415],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[49476,49477]},{"pos":[49532,49538],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49598,49599],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49696,49702],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49769,49770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49820,49826],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[49887,49888]},{"pos":[49943,49949],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50009,50010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50255,50286],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[50452,50467],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[50543,50544],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50594,50600],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50661,50662]},{"pos":[50717,50723],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50783,50784],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50890,50905],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[50981,50982],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51032,51038],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51099,51100]},{"pos":[51155,51161],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51221,51222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51448,51457],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[51550,51557],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[51625,51626],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51653,51654],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51723,51730],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[51798,51799],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51826,51827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52002,52019],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[52128,52143],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[52219,52220],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52247,52248],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52325,52340],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[52416,52417],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52444,52445],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52590,52596],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[52751,52759],"content":"Assembly","needQuote":true,"nodes":[{"content":"Assembly","pos":[0,8]}]},{"pos":[53051,53083],"content":"IEnumerable<CustomAttributeData>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;CustomAttributeData&gt;","pos":[0,32],"source":"IEnumerable<CustomAttributeData>"}]},{"pos":[53392,53403],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[53488,53489],"content":"<","needQuote":true,"nodes":[]},{"pos":[53563,53582],"content":"CustomAttributeData","needQuote":true,"nodes":[{"content":"CustomAttributeData","pos":[0,19]}]},{"pos":[53738,53749],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[53835,53838]},{"pos":[53919,53938],"content":"CustomAttributeData","needQuote":true,"nodes":[{"content":"CustomAttributeData","pos":[0,19]}]},{"pos":[54001,54002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54292,54306],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[54525,54536],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[54600,54601],"content":"<","needQuote":true,"nodes":[]},{"pos":[54628,54629],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[54749,54760],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[54825,54828]},{"pos":[54862,54863],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[54890,54891],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55094,55120],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[55311,55317],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[55490,55504],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[55623,55629],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[55696,55697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55747,55753],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55813,55814],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55897,55903],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[55970,55971],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56021,56027],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56087,56088],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56261,56268],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[56434,56447],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[56548,56559],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[56631,56632],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56659,56660],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56733,56744],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[56816,56817],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56844,56845],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57005,57010],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[57150,57154],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[57308,57318],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[57413,57421],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[57490,57491],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57518,57519],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57589,57597],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[57666,57667],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57694,57695],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57876,57886],"content":"TypeFilter","needQuote":true,"nodes":[{"content":"TypeFilter","pos":[0,10]}]},{"pos":[58063,58067],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[58169,58175],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[58295,58299],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[58337,58339]},{"pos":[58402,58406],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[58443,58445],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[58603,58612],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[58816,58828],"content":"BindingFlags","needQuote":true,"nodes":[{"content":"BindingFlags","pos":[0,12]}]},{"pos":[58992,59003],"content":"FieldInfo[]","needQuote":true,"nodes":[{"content":"FieldInfo[]","pos":[0,11]}]},{"pos":[59176,59185],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"content":"[]","pos":[59239,59241]},{"pos":[59320,59329],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[59382,59384],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[59553,59563],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[59722,59734],"content":"MethodInfo[]","needQuote":true,"nodes":[{"content":"MethodInfo[]","pos":[0,12]}]},{"pos":[59911,59921],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"content":"[]","pos":[59976,59978]},{"pos":[60058,60068],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[60122,60124],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[60369,60397],"content":"GetCustomAttributes(Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(Boolean)","pos":[0,28]}]},{"pos":[60602,60621],"content":"GetCustomAttributes","needQuote":true,"nodes":[{"content":"GetCustomAttributes","pos":[0,19]}]},{"pos":[60709,60710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60761,60768],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[60829,60830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60956,60975],"content":"GetCustomAttributes","needQuote":true,"nodes":[{"content":"GetCustomAttributes","pos":[0,19]}]},{"pos":[61063,61064],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61115,61122],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[61183,61184],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61396,61404],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[61532,61538],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[61599,61601]},{"pos":[61666,61672],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61732,61734],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[61983,62017],"content":"GetCustomAttributes(Type, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(Type, Boolean)","pos":[0,34]}]},{"pos":[62247,62266],"content":"GetCustomAttributes","needQuote":true,"nodes":[{"content":"GetCustomAttributes","pos":[0,19]}]},{"pos":[62354,62355],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62403,62407],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[62466,62467]},{"pos":[62523,62530],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[62591,62592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62730,62749],"content":"GetCustomAttributes","needQuote":true,"nodes":[{"content":"GetCustomAttributes","pos":[0,19]}]},{"pos":[62837,62838],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62886,62890],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[62949,62950]},{"pos":[63006,63013],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[63074,63075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63442,63466],"content":"IsDefined(Type, Boolean)","needQuote":true,"nodes":[{"content":"IsDefined(Type, Boolean)","pos":[0,24]}]},{"pos":[63676,63685],"content":"IsDefined","needQuote":true,"nodes":[{"content":"IsDefined","pos":[0,9]}]},{"pos":[63763,63764],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63812,63816],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[63875,63876]},{"pos":[63932,63939],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[64000,64001],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64129,64138],"content":"IsDefined","needQuote":true,"nodes":[{"content":"IsDefined","pos":[0,9]}]},{"pos":[64216,64217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64265,64269],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[64328,64329]},{"pos":[64385,64392],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[64453,64454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64702,64719],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]},{"pos":[64913,64934],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[65137,65162],"content":"TargetInvocationException","needQuote":true,"nodes":[{"content":"TargetInvocationException","pos":[0,25]}]},{"pos":[65397,65414],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[65603,65620],"content":"TypeLoadException","needQuote":true,"nodes":[{"content":"TypeLoadException","pos":[0,17]}]},{"pos":[65799,65820],"content":"FileNotFoundException","needQuote":true,"nodes":[{"content":"FileNotFoundException","pos":[0,21]}]},{"pos":[66013,66030],"content":"FileLoadException","needQuote":true,"nodes":[{"content":"FileLoadException","pos":[0,17]}]},{"pos":[66214,66237],"content":"BadImageFormatException","needQuote":true,"nodes":[{"content":"BadImageFormatException","pos":[0,23]}]},{"pos":[66448,66475],"content":"ReflectionTypeLoadException","needQuote":true,"nodes":[{"content":"ReflectionTypeLoadException","pos":[0,27]}]}],"content":"items:\n- uid: System.Reflection.Module\n  commentId: T:System.Reflection.Module\n  id: Module\n  parent: System.Reflection\n  children:\n  - System.Reflection.Module.Assembly\n  - System.Reflection.Module.CustomAttributes\n  - System.Reflection.Module.Equals(System.Object)\n  - System.Reflection.Module.FilterTypeName\n  - System.Reflection.Module.FilterTypeNameIgnoreCase\n  - System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)\n  - System.Reflection.Module.FullyQualifiedName\n  - System.Reflection.Module.GetField(System.String)\n  - System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.Module.GetFields\n  - System.Reflection.Module.GetFields(System.Reflection.BindingFlags)\n  - System.Reflection.Module.GetHashCode\n  - System.Reflection.Module.GetMethod(System.String)\n  - System.Reflection.Module.GetMethod(System.String,System.Type[])\n  - System.Reflection.Module.GetMethods\n  - System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)\n  - System.Reflection.Module.GetType(System.String)\n  - System.Reflection.Module.GetType(System.String,System.Boolean)\n  - System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)\n  - System.Reflection.Module.GetTypes\n  - System.Reflection.Module.ModuleVersionId\n  - System.Reflection.Module.Name\n  - System.Reflection.Module.ScopeName\n  - System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.Module.ToString\n  langs:\n  - csharp\n  - vb\n  name: Module\n  fullName: System.Reflection.Module\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Module\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 57\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Performs reflection on a module.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_Module))]\n\n      [ComVisible(true)]\n\n      [PermissionSet(SecurityAction.InheritanceDemand, Unrestricted = true)]\n\n      public abstract class Module : _Module, ISerializable, ICustomAttributeProvider\n    content.vb: >-\n      <Serializable>\n\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_Module))>\n\n      <ComVisible(True)>\n\n      <PermissionSet(SecurityAction.InheritanceDemand, Unrestricted:=True)>\n\n      Public MustInherit Class Module\n          Implements _Module, ISerializable, ICustomAttributeProvider\n  see:\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  inheritance:\n  - System.Object\n  implements:\n  - System.Reflection.ICustomAttributeProvider\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Module\n- uid: System.Reflection.Module.Assembly\n  commentId: P:System.Reflection.Module.Assembly\n  id: Assembly\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: Assembly\n  fullName: System.Reflection.Module.Assembly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Assembly\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 515\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the appropriate <xref href=\\\"System.Reflection.Assembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for this instance of <xref href=\\\"System.Reflection.Module\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual Assembly Assembly { get; }\n    content.vb: Public Overridable ReadOnly Property Assembly As Assembly\n    parameters: []\n    return:\n      type: System.Reflection.Assembly\n      description: \"\\n<p>An <strong>Assembly</strong> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Module.Assembly\n- uid: System.Reflection.Module.CustomAttributes\n  commentId: P:System.Reflection.Module.CustomAttributes\n  id: CustomAttributes\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: CustomAttributes\n  fullName: System.Reflection.Module.CustomAttributes\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CustomAttributes\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 129\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection that contains this module's custom attributes.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<CustomAttributeData> CustomAttributes { get; }\n    content.vb: Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n      description: \"\\n<p>A collection that contains this module's custom attributes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Module.CustomAttributes\n- uid: System.Reflection.Module.FullyQualifiedName\n  commentId: P:System.Reflection.Module.FullyQualifiedName\n  id: FullyQualifiedName\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: FullyQualifiedName\n  fullName: System.Reflection.Module.FullyQualifiedName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FullyQualifiedName\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 301\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a string representing the fully qualified name and path to this module.</p>\\n\"\n  syntax:\n    content: >-\n      public virtual string FullyQualifiedName\n\n      {\n          [SecurityCritical]\n          get;\n      }\n    content.vb: Public Overridable ReadOnly Property FullyQualifiedName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The fully qualified module name.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permissions. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Module.FullyQualifiedName\n- uid: System.Reflection.Module.Name\n  commentId: P:System.Reflection.Module.Name\n  id: Name\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Reflection.Module.Name\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Name\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 500\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a <strong>String</strong> representing the name of the module with the path removed.</p>\\n\"\n  syntax:\n    content: public virtual string Name { get; }\n    content.vb: Public Overridable ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The module name with no path.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Module.Name\n- uid: System.Reflection.Module.Equals(System.Object)\n  commentId: M:System.Reflection.Module.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Reflection.Module.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 107\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Determines whether this module and the specified object are equal.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object o)\n    content.vb: Public Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The object to compare with this instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>o</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Module.Equals(Object)\n- uid: System.Reflection.Module.GetHashCode\n  commentId: M:System.Reflection.Module.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Reflection.Module.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 112\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Module.GetHashCode()\n- uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)\n  commentId: M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)\n  id: GetType(System.String,System.Boolean,System.Boolean)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetType(String, Boolean, Boolean)\n  fullName: System.Reflection.Module.GetType(System.String, System.Boolean, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetType\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 295\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public virtual Type GetType(string className, bool throwOnError, bool ignoreCase)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Overridable Function GetType(className As String, throwOnError As Boolean, ignoreCase As Boolean) As Type\n    parameters:\n    - id: className\n      type: System.String\n      description: \"\\n<p>The name of the type to locate. The name must be fully qualified with the namespace. </p>\\n\"\n    - id: throwOnError\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to throw an exception if the type cannot be found; <strong>false</strong> to return <strong>null</strong>.</p>\\n\"\n    - id: ignoreCase\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> for case-insensitive search; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the specified type, if the type is declared in this module; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>className</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>The class initializers are invoked and an exception is thrown. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>className</em> is a zero-length string. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong>, and the type cannot be found. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>\\n<em>className</em> requires a dependent assembly that could not be found. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>\\n<em>className</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>className</em> requires a dependent assembly that was not preloaded. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>\\n<em>className</em> requires a dependent assembly, but the file is not a valid assembly. </p>\\n<p>-or-</p>\\n<p>\\n<em>className</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Module.GetType(String, Boolean, Boolean)\n- uid: System.Reflection.Module.ToString\n  commentId: M:System.Reflection.Module.ToString\n  id: ToString\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Reflection.Module.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 123\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the name of the module.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A <strong>String</strong> representing the name of this module.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Module.ToString()\n- uid: System.Reflection.Module.FilterTypeName\n  commentId: F:System.Reflection.Module.FilterTypeName\n  id: FilterTypeName\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: FilterTypeName\n  fullName: System.Reflection.Module.FilterTypeName\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FilterTypeName\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 83\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>A <strong>TypeFilter</strong> object that filters the list of types defined in this module based upon the name. This field is case-sensitive and read-only.</p>\\n\"\n  syntax:\n    content: public static readonly TypeFilter FilterTypeName\n    content.vb: Public Shared ReadOnly FilterTypeName As TypeFilter\n    return:\n      type: System.Reflection.TypeFilter\n  seealso:\n  - type: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)\n    commentId: M:System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Module.FilterTypeName\n- uid: System.Reflection.Module.FilterTypeNameIgnoreCase\n  commentId: F:System.Reflection.Module.FilterTypeNameIgnoreCase\n  id: FilterTypeNameIgnoreCase\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: FilterTypeNameIgnoreCase\n  fullName: System.Reflection.Module.FilterTypeNameIgnoreCase\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FilterTypeNameIgnoreCase\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 84\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>A <strong>TypeFilter</strong> object that filters the list of types defined in this module based upon the name. This field is case-insensitive and read-only.</p>\\n\"\n  syntax:\n    content: public static readonly TypeFilter FilterTypeNameIgnoreCase\n    content.vb: Public Shared ReadOnly FilterTypeNameIgnoreCase As TypeFilter\n    return:\n      type: System.Reflection.TypeFilter\n  seealso:\n  - type: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)\n    commentId: M:System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Module.FilterTypeNameIgnoreCase\n- uid: System.Reflection.Module.ModuleVersionId\n  commentId: P:System.Reflection.Module.ModuleVersionId\n  id: ModuleVersionId\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: ModuleVersionId\n  fullName: System.Reflection.Module.ModuleVersionId\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ModuleVersionId\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 339\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.</p>\\n\"\n  syntax:\n    content: public virtual Guid ModuleVersionId { get; }\n    content.vb: Public Overridable ReadOnly Property ModuleVersionId As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>A <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to distinguish between two versions of a module.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Module.ModuleVersionId\n- uid: System.Reflection.Module.ScopeName\n  commentId: P:System.Reflection.Module.ScopeName\n  id: ScopeName\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: ScopeName\n  fullName: System.Reflection.Module.ScopeName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ScopeName\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 485\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a string representing the name of the module.</p>\\n\"\n  syntax:\n    content: public virtual string ScopeName { get; }\n    content.vb: Public Overridable ReadOnly Property ScopeName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The module name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Module.ScopeName\n- uid: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)\n  commentId: M:System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)\n  id: FindTypes(System.Reflection.TypeFilter,System.Object)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: FindTypes(TypeFilter, Object)\n  fullName: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FindTypes\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 312\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an array of classes accepted by the given filter and filter criteria.</p>\\n\"\n  syntax:\n    content: public virtual Type[] FindTypes(TypeFilter filter, object filterCriteria)\n    content.vb: Public Overridable Function FindTypes(filter As TypeFilter, filterCriteria As Object) As Type()\n    parameters:\n    - id: filter\n      type: System.Reflection.TypeFilter\n      description: \"\\n<p>The delegate used to filter the classes. </p>\\n\"\n    - id: filterCriteria\n      type: System.Object\n      description: \"\\n<p>An Object used to filter the classes. </p>\\n\"\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array of type <strong>Type</strong> containing classes that were accepted by the filter.</p>\\n\"\n  exceptions:\n  - type: System.Reflection.ReflectionTypeLoadException\n    commentId: T:System.Reflection.ReflectionTypeLoadException\n    description: \"\\n<p>One or more classes in a module could not be loaded. </p>\\n\"\n  seealso:\n  - type: System.Reflection.Module.FilterTypeName\n    commentId: F:System.Reflection.Module.FilterTypeName\n  - type: System.Reflection.Module.FilterTypeNameIgnoreCase\n    commentId: F:System.Reflection.Module.FilterTypeNameIgnoreCase\n  - type: System.Reflection.ReflectionTypeLoadException\n    commentId: T:System.Reflection.ReflectionTypeLoadException\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Module.FindTypes(TypeFilter, Object)\n- uid: System.Reflection.Module.GetField(System.String)\n  commentId: M:System.Reflection.Module.GetField(System.String)\n  id: GetField(System.String)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetField(String)\n  fullName: System.Reflection.Module.GetField(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetField\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 398\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a field having the specified name.</p>\\n\"\n  syntax:\n    content: public FieldInfo GetField(string name)\n    content.vb: Public Function GetField(name As String) As FieldInfo\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The field name. </p>\\n\"\n    return:\n      type: System.Reflection.FieldInfo\n      description: \"\\n<p>A <strong>FieldInfo</strong> object having the specified name, or <strong>null</strong> if the field does not exist.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Module.GetField(String)\n- uid: System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)\n  id: GetField(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetField(String, BindingFlags)\n  fullName: System.Reflection.Module.GetField(System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetField\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 403\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a field having the specified name and binding attributes.</p>\\n\"\n  syntax:\n    content: public virtual FieldInfo GetField(string name, BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetField(name As String, bindingAttr As BindingFlags) As FieldInfo\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The field name. </p>\\n\"\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: \"\\n<p>One of the <strong>BindingFlags</strong> bit flags used to control the search. </p>\\n\"\n    return:\n      type: System.Reflection.FieldInfo\n      description: \"\\n<p>A <strong>FieldInfo</strong> object having the specified name and binding attributes, or <strong>null</strong> if the field does not exist.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Module.GetField(String, BindingFlags)\n- uid: System.Reflection.Module.GetFields\n  commentId: M:System.Reflection.Module.GetFields\n  id: GetFields\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetFields()\n  fullName: System.Reflection.Module.GetFields()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFields\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 381\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the global fields defined on the module.</p>\\n\"\n  syntax:\n    content: public FieldInfo[] GetFields()\n    content.vb: Public Function GetFields As FieldInfo()\n    return:\n      type: System.Reflection.FieldInfo[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Reflection.FieldInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects representing the global fields defined on the module; if there are no global fields, an empty array is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Module.GetFields()\n- uid: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Module.GetFields(System.Reflection.BindingFlags)\n  id: GetFields(System.Reflection.BindingFlags)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetFields(BindingFlags)\n  fullName: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFields\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 386\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the global fields defined on the module that match the specified binding flags.</p>\\n\"\n  syntax:\n    content: public virtual FieldInfo[] GetFields(BindingFlags bindingFlags)\n    content.vb: Public Overridable Function GetFields(bindingFlags As BindingFlags) As FieldInfo()\n    parameters:\n    - id: bindingFlags\n      type: System.Reflection.BindingFlags\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Reflection.BindingFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that limit the search.</p>\\n\"\n    return:\n      type: System.Reflection.FieldInfo[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Reflection.FieldInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the global fields defined on the module that match the specified binding flags; if no global fields match the binding flags, an empty array is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Module.GetFields(BindingFlags)\n- uid: System.Reflection.Module.GetMethod(System.String)\n  commentId: M:System.Reflection.Module.GetMethod(System.String)\n  id: GetMethod(System.String)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetMethod(String)\n  fullName: System.Reflection.Module.GetMethod(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMethod\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 469\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a method having the specified name.</p>\\n\"\n  syntax:\n    content: public MethodInfo GetMethod(string name)\n    content.vb: Public Function GetMethod(name As String) As MethodInfo\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The method name. </p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <strong>MethodInfo</strong> object having the specified name, or <strong>null</strong> if the method does not exist.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Module.GetMethod(String)\n- uid: System.Reflection.Module.GetMethod(System.String,System.Type[])\n  commentId: M:System.Reflection.Module.GetMethod(System.String,System.Type[])\n  id: GetMethod(System.String,System.Type[])\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetMethod(String, Type[])\n  fullName: System.Reflection.Module.GetMethod(System.String, System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMethod\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 451\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a method having the specified name and parameter types.</p>\\n\"\n  syntax:\n    content: public MethodInfo GetMethod(string name, Type[] types)\n    content.vb: Public Function GetMethod(name As String, types As Type()) As MethodInfo\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The method name. </p>\\n\"\n    - id: types\n      type: System.Type[]\n      description: \"\\n<p>The parameter types to search for. </p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <strong>MethodInfo</strong> object in accordance with the specified criteria, or <strong>null</strong> if the method does not exist.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>, <em>types</em> is <strong>null</strong>, or <em>types</em> (i) is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.Module.GetMethod(System.String, System.Type())\n  name.vb: GetMethod(String, Type())\n  nameWithType: Module.GetMethod(String, Type[])\n  nameWithType.vb: Module.GetMethod(String, Type())\n- uid: System.Reflection.Module.GetMethods\n  commentId: M:System.Reflection.Module.GetMethods\n  id: GetMethods\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetMethods()\n  fullName: System.Reflection.Module.GetMethods()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMethods\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 415\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the global methods defined on the module.</p>\\n\"\n  syntax:\n    content: public MethodInfo[] GetMethods()\n    content.vb: Public Function GetMethods As MethodInfo()\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects representing all the global methods defined on the module; if there are no global methods, an empty array is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Module.GetMethods()\n- uid: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)\n  id: GetMethods(System.Reflection.BindingFlags)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetMethods(BindingFlags)\n  fullName: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMethods\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 420\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the global methods defined on the module that match the specified binding flags.</p>\\n\"\n  syntax:\n    content: public virtual MethodInfo[] GetMethods(BindingFlags bindingFlags)\n    content.vb: Public Overridable Function GetMethods(bindingFlags As BindingFlags) As MethodInfo()\n    parameters:\n    - id: bindingFlags\n      type: System.Reflection.BindingFlags\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Reflection.BindingFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that limit the search.</p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the global methods defined on the module that match the specified binding flags; if no global methods match the binding flags, an empty array is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Module.GetMethods(BindingFlags)\n- uid: System.Reflection.Module.GetType(System.String)\n  commentId: M:System.Reflection.Module.GetType(System.String)\n  id: GetType(System.String)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetType(String)\n  fullName: System.Reflection.Module.GetType(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetType\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 290\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the specified type, performing a case-sensitive search.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public virtual Type GetType(string className)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Overridable Function GetType(className As String) As Type\n    parameters:\n    - id: className\n      type: System.String\n      description: \"\\n<p>The name of the type to locate. The name must be fully qualified with the namespace. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>A <strong>Type</strong> object representing the given type, if the type is in this module; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>className</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>The class initializers are invoked and an exception is thrown. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>className</em> is a zero-length string. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>\\n<em>className</em> requires a dependent assembly that could not be found. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>\\n<em>className</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>className</em> requires a dependent assembly that was not preloaded. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>\\n<em>className</em> requires a dependent assembly, but the file is not a valid assembly. </p>\\n<p>-or-</p>\\n<p>\\n<em>className</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Module.GetType(String)\n- uid: System.Reflection.Module.GetType(System.String,System.Boolean)\n  commentId: M:System.Reflection.Module.GetType(System.String,System.Boolean)\n  id: GetType(System.String,System.Boolean)\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetType(String, Boolean)\n  fullName: System.Reflection.Module.GetType(System.String, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetType\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 284\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the specified type, searching the module with the specified case sensitivity.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public virtual Type GetType(string className, bool ignoreCase)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Overridable Function GetType(className As String, ignoreCase As Boolean) As Type\n    parameters:\n    - id: className\n      type: System.String\n      description: \"\\n<p>The name of the type to locate. The name must be fully qualified with the namespace. </p>\\n\"\n    - id: ignoreCase\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> for case-insensitive search; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>A <strong>Type</strong> object representing the given type, if the type is in this module; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>className</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>The class initializers are invoked and an exception is thrown. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>className</em> is a zero-length string. </p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>\\n<em>className</em> requires a dependent assembly that could not be found. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>\\n<em>className</em> requires a dependent assembly that was found but could not be loaded.</p>\\n<p>-or-</p>\\n<p>The current assembly was loaded into the reflection-only context, and <em>className</em> requires a dependent assembly that was not preloaded. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>\\n<em>className</em> requires a dependent assembly, but the file is not a valid assembly. </p>\\n<p>-or-</p>\\n<p>\\n<em>className</em> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Module.GetType(String, Boolean)\n- uid: System.Reflection.Module.GetTypes\n  commentId: M:System.Reflection.Module.GetTypes\n  id: GetTypes\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: GetTypes()\n  fullName: System.Reflection.Module.GetTypes()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Module.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTypes\n    path: src/mscorlib/src/System/Reflection/Module.cs\n    startLine: 334\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns all the types defined within this module.</p>\\n\"\n  syntax:\n    content: public virtual Type[] GetTypes()\n    content.vb: Public Overridable Function GetTypes As Type()\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array of type <strong>Type</strong> containing types defined within the module that is reflected by this instance.</p>\\n\"\n  exceptions:\n  - type: System.Reflection.ReflectionTypeLoadException\n    commentId: T:System.Reflection.ReflectionTypeLoadException\n    description: \"\\n<p>One or more classes in a module could not be loaded. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  seealso:\n  - type: System.Reflection.ReflectionTypeLoadException\n    commentId: T:System.Reflection.ReflectionTypeLoadException\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Module.GetTypes()\n- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  isEii: true\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: System.Reflection.Module.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 326\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: object[] ICustomAttributeProvider.GetCustomAttributes(bool inherit)\n    content.vb: Function System.Reflection.ICustomAttributeProvider.GetCustomAttributes(inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes\n    parameters:\n    - id: inherit\n      type: System.Boolean\n    return:\n      type: System.Object[]\n  implements:\n  - System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: Module.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType.vb: Module.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Module.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  isEii: true\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: System.Reflection.Module.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 327\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: object[] ICustomAttributeProvider.GetCustomAttributes(Type attributeType, bool inherit)\n    content.vb: Function System.Reflection.ICustomAttributeProvider.GetCustomAttributes(attributeType As Type, inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes\n    parameters:\n    - id: attributeType\n      type: System.Type\n    - id: inherit\n      type: System.Boolean\n    return:\n      type: System.Object[]\n  implements:\n  - System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: Module.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType.vb: Module.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Module.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  isEii: true\n  parent: System.Reflection.Module\n  langs:\n  - csharp\n  - vb\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: System.Reflection.Module.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Reflection.ICustomAttributeProvider.IsDefined\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 328\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: bool ICustomAttributeProvider.IsDefined(Type attributeType, bool inherit)\n    content.vb: Function System.Reflection.ICustomAttributeProvider.IsDefined(attributeType As Type, inherit As Boolean) As Boolean Implements ICustomAttributeProvider.IsDefined\n    parameters:\n    - id: attributeType\n      type: System.Type\n    - id: inherit\n      type: System.Boolean\n    return:\n      type: System.Boolean\n  implements:\n  - System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: Module.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType.vb: Module.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  commentId: T:System.Reflection.ICustomAttributeProvider\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  fullName: System.Reflection.Assembly\n  nameWithType: Assembly\n  commentId: T:System.Reflection.Assembly\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<CustomAttributeData>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.CustomAttributeData)\n  name.vb: IEnumerable(Of CustomAttributeData)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.CustomAttributeData\n    name: CustomAttributeData\n    fullName: System.Reflection.CustomAttributeData\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.CustomAttributeData\n    name: CustomAttributeData\n    fullName: System.Reflection.CustomAttributeData\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<CustomAttributeData>\n  nameWithType.vb: IEnumerable(Of CustomAttributeData)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Reflection.TypeFilter\n  parent: System.Reflection\n  isExternal: false\n  name: TypeFilter\n  fullName: System.Reflection.TypeFilter\n  nameWithType: TypeFilter\n  commentId: T:System.Reflection.TypeFilter\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  nameWithType: Guid\n  commentId: T:System.Guid\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  fullName: System.Reflection.FieldInfo\n  nameWithType: FieldInfo\n  commentId: T:System.Reflection.FieldInfo\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  fullName: System.Reflection.BindingFlags\n  nameWithType: BindingFlags\n  commentId: T:System.Reflection.BindingFlags\n- uid: System.Reflection.FieldInfo[]\n  name: FieldInfo[]\n  fullName: System.Reflection.FieldInfo[]\n  fullname.vb: System.Reflection.FieldInfo()\n  name.vb: FieldInfo()\n  spec.csharp:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: ()\n    fullName: ()\n  nameWithType: FieldInfo[]\n  nameWithType.vb: FieldInfo()\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  fullName: System.Reflection.MethodInfo\n  nameWithType: MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n- uid: System.Reflection.MethodInfo[]\n  name: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  fullname.vb: System.Reflection.MethodInfo()\n  name.vb: MethodInfo()\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: ()\n    fullName: ()\n  nameWithType: MethodInfo[]\n  nameWithType.vb: MethodInfo()\n- uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.ICustomAttributeProvider\n  isExternal: true\n  name: GetCustomAttributes(Boolean)\n  fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  spec.csharp:\n  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n    name: GetCustomAttributes\n    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n    name: GetCustomAttributes\n    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  commentId: M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.ICustomAttributeProvider\n  isExternal: true\n  name: GetCustomAttributes(Type, Boolean)\n  fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)\n  spec.csharp:\n  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n    name: GetCustomAttributes\n    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n    name: GetCustomAttributes\n    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  commentId: M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n- uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.ICustomAttributeProvider\n  isExternal: true\n  name: IsDefined(Type, Boolean)\n  fullName: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)\n  spec.csharp:\n  - uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n    name: IsDefined\n    fullName: System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n    name: IsDefined\n    fullName: System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  commentId: M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Reflection.TargetInvocationException\n  isExternal: false\n  name: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n  nameWithType: TargetInvocationException\n  commentId: T:System.Reflection.TargetInvocationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.TypeLoadException\n  parent: System\n  isExternal: false\n  name: TypeLoadException\n  fullName: System.TypeLoadException\n  nameWithType: TypeLoadException\n  commentId: T:System.TypeLoadException\n- uid: System.IO.FileNotFoundException\n  isExternal: false\n  name: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n  nameWithType: FileNotFoundException\n  commentId: T:System.IO.FileNotFoundException\n- uid: System.IO.FileLoadException\n  isExternal: false\n  name: FileLoadException\n  fullName: System.IO.FileLoadException\n  nameWithType: FileLoadException\n  commentId: T:System.IO.FileLoadException\n- uid: System.BadImageFormatException\n  isExternal: false\n  name: BadImageFormatException\n  fullName: System.BadImageFormatException\n  nameWithType: BadImageFormatException\n  commentId: T:System.BadImageFormatException\n- uid: System.Reflection.ReflectionTypeLoadException\n  isExternal: false\n  name: ReflectionTypeLoadException\n  fullName: System.Reflection.ReflectionTypeLoadException\n  nameWithType: ReflectionTypeLoadException\n  commentId: T:System.Reflection.ReflectionTypeLoadException\n"}