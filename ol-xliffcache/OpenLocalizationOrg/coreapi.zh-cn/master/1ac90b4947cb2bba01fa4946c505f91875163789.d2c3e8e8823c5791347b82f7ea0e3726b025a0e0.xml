{"nodes":[{"pos":[934,944],"content":"XNamespace","needQuote":true,"nodes":[{"content":"XNamespace","pos":[0,10]}]},{"pos":[2080,2093],"content":"NamespaceName","needQuote":true,"nodes":[{"content":"NamespaceName","pos":[0,13]}]},{"pos":[3198,3202],"content":"None","needQuote":true,"nodes":[{"content":"None","pos":[0,4]}]},{"pos":[4400,4403],"content":"Xml","needQuote":true,"nodes":[{"content":"Xml","pos":[0,3]}]},{"pos":[5704,5709],"content":"Xmlns","needQuote":true,"nodes":[{"content":"Xmlns","pos":[0,5]}]},{"pos":[7075,7089],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8947,8958],"content":"Get(String)","needQuote":true,"nodes":[{"content":"Get(String)","pos":[0,11]}]},{"pos":[10398,10411],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11725,11740],"content":"GetName(String)","needQuote":true,"nodes":[{"content":"GetName(String)","pos":[0,15]}]},{"pos":[13445,13473],"content":"Addition(XNamespace, String)","needQuote":true,"nodes":[{"content":"Addition(XNamespace, String)","pos":[0,28]}]},{"pos":[15438,15470],"content":"Equality(XNamespace, XNamespace)","needQuote":true,"nodes":[{"content":"Equality(XNamespace, XNamespace)","pos":[0,32]}]},{"pos":[17354,17384],"content":"Implicit(String to XNamespace)","needQuote":true,"nodes":[{"content":"Implicit(String to XNamespace)","pos":[0,30]}]},{"pos":[19548,19582],"content":"Inequality(XNamespace, XNamespace)","needQuote":true,"nodes":[{"content":"Inequality(XNamespace, XNamespace)","pos":[0,34]}]},{"pos":[21346,21356],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[22397,22412],"content":"System.Xml.Linq","needQuote":true,"nodes":[{"content":"System.Xml.Linq","pos":[0,15]}]},{"pos":[22570,22576],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22763,22785],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[22933,22939],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23006,23007],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23057,23063],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23124,23125]},{"pos":[23180,23186],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23246,23247],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23344,23350],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23417,23418],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23468,23474],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23535,23536]},{"pos":[23591,23597],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23657,23658],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23903,23934],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[24100,24115],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24191,24192],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24242,24248],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24309,24310]},{"pos":[24365,24371],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24431,24432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24538,24553],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24629,24630],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24680,24686],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24747,24748]},{"pos":[24803,24809],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24869,24870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25096,25105],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[25198,25205],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25273,25274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25301,25302],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25371,25378],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25446,25447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25474,25475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25650,25667],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[25776,25791],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[25867,25868],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25895,25896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25973,25988],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26064,26065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26092,26093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26238,26244],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[26375,26381],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[26548,26558],"content":"XNamespace","needQuote":true,"nodes":[{"content":"XNamespace","pos":[0,10]}]},{"pos":[26761,26775],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[26894,26900],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26967,26968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27018,27024],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27084,27085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27168,27174],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27241,27242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27292,27298],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27358,27359],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27532,27539],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[27705,27718],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[27819,27830],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27902,27903],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27930,27931],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28004,28015],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28087,28088],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28115,28116],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28276,28281],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28440,28445],"content":"XName","needQuote":true,"nodes":[{"content":"XName","pos":[0,5]}]},{"pos":[28620,28630],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[28725,28733],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28802,28803],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28830,28831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28901,28909],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28978,28979],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29006,29007],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Xml.Linq.XNamespace\n  commentId: T:System.Xml.Linq.XNamespace\n  id: XNamespace\n  parent: System.Xml.Linq\n  children:\n  - System.Xml.Linq.XNamespace.Equals(System.Object)\n  - System.Xml.Linq.XNamespace.Get(System.String)\n  - System.Xml.Linq.XNamespace.GetHashCode\n  - System.Xml.Linq.XNamespace.GetName(System.String)\n  - System.Xml.Linq.XNamespace.NamespaceName\n  - System.Xml.Linq.XNamespace.None\n  - System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)\n  - System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  - System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace\n  - System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  - System.Xml.Linq.XNamespace.ToString\n  - System.Xml.Linq.XNamespace.Xml\n  - System.Xml.Linq.XNamespace.Xmlns\n  langs:\n  - csharp\n  - vb\n  name: XNamespace\n  fullName: System.Xml.Linq.XNamespace\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XNamespace\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 323\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Represents an XML namespace. This class cannot be inherited. </p>\\n\"\n  syntax:\n    content: public sealed class XNamespace\n    content.vb: Public NotInheritable Class XNamespace\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: XNamespace\n- uid: System.Xml.Linq.XNamespace.NamespaceName\n  commentId: P:System.Xml.Linq.XNamespace.NamespaceName\n  id: NamespaceName\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: NamespaceName\n  fullName: System.Xml.Linq.XNamespace.NamespaceName\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NamespaceName\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 326\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets the Uniform Resource Identifier (URI) of this namespace.</p>\\n\"\n  syntax:\n    content: public string NamespaceName { get; }\n    content.vb: Public ReadOnly Property NamespaceName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the URI of the namespace.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XNamespace.NamespaceName\n- uid: System.Xml.Linq.XNamespace.None\n  commentId: P:System.Xml.Linq.XNamespace.None\n  id: None\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: None\n  fullName: System.Xml.Linq.XNamespace.None\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: None\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 327\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that corresponds to no namespace.</p>\\n\"\n  syntax:\n    content: public static XNamespace None { get; }\n    content.vb: Public Shared ReadOnly Property None As XNamespace\n    parameters: []\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that corresponds to no namespace.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: XNamespace.None\n- uid: System.Xml.Linq.XNamespace.Xml\n  commentId: P:System.Xml.Linq.XNamespace.Xml\n  id: Xml\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: Xml\n  fullName: System.Xml.Linq.XNamespace.Xml\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Xml\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 328\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that corresponds to the XML URI (<code>http://www.w3.org/XML/1998/namespace</code>).</p>\\n\"\n  syntax:\n    content: public static XNamespace Xml { get; }\n    content.vb: Public Shared ReadOnly Property Xml As XNamespace\n    parameters: []\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that corresponds to the XML URI (<code>http://www.w3.org/XML/1998/namespace</code>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: XNamespace.Xml\n- uid: System.Xml.Linq.XNamespace.Xmlns\n  commentId: P:System.Xml.Linq.XNamespace.Xmlns\n  id: Xmlns\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: Xmlns\n  fullName: System.Xml.Linq.XNamespace.Xmlns\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Xmlns\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 329\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that corresponds to the xmlns URI (<code>http://www.w3.org/2000/xmlns/</code>).</p>\\n\"\n  syntax:\n    content: public static XNamespace Xmlns { get; }\n    content.vb: Public Shared ReadOnly Property Xmlns As XNamespace\n    parameters: []\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that corresponds to the <strong>xmlns</strong> URI (<code>http://www.w3.org/2000/xmlns/</code>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: XNamespace.Xmlns\n- uid: System.Xml.Linq.XNamespace.Equals(System.Object)\n  commentId: M:System.Xml.Linq.XNamespace.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Xml.Linq.XNamespace.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 330\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to the current <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates whether the specified <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XNamespace.Equals(Object)\n- uid: System.Xml.Linq.XNamespace.Get(System.String)\n  commentId: M:System.Xml.Linq.XNamespace.Get(System.String)\n  id: Get(System.String)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: Get(String)\n  fullName: System.Xml.Linq.XNamespace.Get(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Get\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 331\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the specified Uniform Resource Identifier (URI).</p>\\n\"\n  syntax:\n    content: public static XNamespace Get(string namespaceName)\n    content.vb: Public Shared Function Get(namespaceName As String) As XNamespace\n    parameters:\n    - id: namespaceName\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains a namespace URI.</p>\\n\"\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> created from the specified URI.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XNamespace.Get(String)\n- uid: System.Xml.Linq.XNamespace.GetHashCode\n  commentId: M:System.Xml.Linq.XNamespace.GetHashCode\n  id: GetHashCode\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Xml.Linq.XNamespace.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 332\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets a hash code for this <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the hash code for the <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XNamespace.GetHashCode()\n- uid: System.Xml.Linq.XNamespace.GetName(System.String)\n  commentId: M:System.Xml.Linq.XNamespace.GetName(System.String)\n  id: GetName(System.String)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: GetName(String)\n  fullName: System.Xml.Linq.XNamespace.GetName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetName\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 333\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object created from this <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the specified local name.</p>\\n\"\n  syntax:\n    content: public XName GetName(string localName)\n    content.vb: Public Function GetName(localName As String) As XName\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains a local name.</p>\\n\"\n    return:\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> created from this <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the specified local name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNamespace.GetName(String)\n- uid: System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)\n  commentId: M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)\n  id: op_Addition(System.Xml.Linq.XNamespace,System.String)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: Addition(XNamespace, String)\n  fullName: System.Xml.Linq.XNamespace.Addition(System.Xml.Linq.XNamespace, System.String)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 334\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Combines an <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with a local name to create an <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static XName operator +(XNamespace ns, string localName)\n    content.vb: Public Shared Operator +(ns As XNamespace, localName As String) As XName\n    parameters:\n    - id: ns\n      type: System.Xml.Linq.XNamespace\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the namespace.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the local name.</p>\\n\"\n    return:\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The new <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructed from the namespace and local name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XNamespace.Addition(XNamespace, String)\n- uid: System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  commentId: M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  id: op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: Equality(XNamespace, XNamespace)\n  fullName: System.Xml.Linq.XNamespace.Equality(System.Xml.Linq.XNamespace, System.Xml.Linq.XNamespace)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 335\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a value indicating whether two instances of <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(XNamespace left, XNamespace right)\n    content.vb: Public Shared Operator =(left As XNamespace, right As XNamespace) As Boolean\n    parameters:\n    - id: left\n      type: System.Xml.Linq.XNamespace\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    - id: right\n      type: System.Xml.Linq.XNamespace\n      description: \"\\n<p>The second <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates whether <em>left</em> and <em>right</em> are equal.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XNamespace.Equality(XNamespace, XNamespace)\n- uid: System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace\n  commentId: M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace\n  id: op_Implicit(System.String)~System.Xml.Linq.XNamespace\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: Implicit(String to XNamespace)\n  fullName: System.Xml.Linq.XNamespace.Implicit(System.String to System.Xml.Linq.XNamespace)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 336\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Converts a string containing a Uniform Resource Identifier (URI) to an <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator XNamespace(string namespaceName)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(namespaceName As String) As XNamespace\n    parameters:\n    - id: namespaceName\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the namespace URI.</p>\\n\"\n    return:\n      type: System.Xml.Linq.XNamespace\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructed from the URI string.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.XNamespace.Widening(System.String to System.Xml.Linq.XNamespace)\n  name.vb: Widening(String to XNamespace)\n  nameWithType: XNamespace.Implicit(String to XNamespace)\n  nameWithType.vb: XNamespace.Widening(String to XNamespace)\n- uid: System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  commentId: M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  id: op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: Inequality(XNamespace, XNamespace)\n  fullName: System.Xml.Linq.XNamespace.Inequality(System.Xml.Linq.XNamespace, System.Xml.Linq.XNamespace)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 338\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a value indicating whether two instances of <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(XNamespace left, XNamespace right)\n    content.vb: Public Shared Operator <>(left As XNamespace, right As XNamespace) As Boolean\n    parameters:\n    - id: left\n      type: System.Xml.Linq.XNamespace\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    - id: right\n      type: System.Xml.Linq.XNamespace\n      description: \"\\n<p>The second <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indicates whether <em>left</em> and <em>right</em> are not equal.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XNamespace.Inequality(XNamespace, XNamespace)\n- uid: System.Xml.Linq.XNamespace.ToString\n  commentId: M:System.Xml.Linq.XNamespace.ToString\n  id: ToString\n  parent: System.Xml.Linq.XNamespace\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Xml.Linq.XNamespace.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 339\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns the URI of this <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The URI of this <xref href=\\\"System.Xml.Linq.XNamespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XNamespace.ToString()\nreferences:\n- uid: System.Xml.Linq\n  isExternal: false\n  name: System.Xml.Linq\n  fullName: System.Xml.Linq\n  commentId: N:System.Xml.Linq\n  nameWithType: System.Xml.Linq\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.Linq.XNamespace\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNamespace\n  fullName: System.Xml.Linq.XNamespace\n  commentId: T:System.Xml.Linq.XNamespace\n  nameWithType: XNamespace\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Xml.Linq.XName\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XName\n  fullName: System.Xml.Linq.XName\n  commentId: T:System.Xml.Linq.XName\n  nameWithType: XName\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n"}