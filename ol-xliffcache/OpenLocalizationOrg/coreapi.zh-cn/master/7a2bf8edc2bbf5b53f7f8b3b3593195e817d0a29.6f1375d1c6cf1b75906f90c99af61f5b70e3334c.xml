{"nodes":[{"pos":[1739,1753],"content":"TypeAttributes","needQuote":true,"nodes":[{"content":"TypeAttributes","pos":[0,14]}]},{"pos":[2847,2855],"content":"Abstract","needQuote":true,"nodes":[{"content":"Abstract","pos":[0,8]}]},{"pos":[3734,3743],"content":"AnsiClass","needQuote":true,"nodes":[{"content":"AnsiClass","pos":[0,9]}]},{"pos":[4618,4627],"content":"AutoClass","needQuote":true,"nodes":[{"content":"AutoClass","pos":[0,9]}]},{"pos":[5516,5526],"content":"AutoLayout","needQuote":true,"nodes":[{"content":"AutoLayout","pos":[0,10]}]},{"pos":[6479,6494],"content":"BeforeFieldInit","needQuote":true,"nodes":[{"content":"BeforeFieldInit","pos":[0,15]}]},{"pos":[7456,7461],"content":"Class","needQuote":true,"nodes":[{"content":"Class","pos":[0,5]}]},{"pos":[8352,8370],"content":"ClassSemanticsMask","needQuote":true,"nodes":[{"content":"ClassSemanticsMask","pos":[0,18]}]},{"pos":[9360,9377],"content":"CustomFormatClass","needQuote":true,"nodes":[{"content":"CustomFormatClass","pos":[0,17]}]},{"pos":[10538,10554],"content":"CustomFormatMask","needQuote":true,"nodes":[{"content":"CustomFormatMask","pos":[0,16]}]},{"pos":[11641,11655],"content":"ExplicitLayout","needQuote":true,"nodes":[{"content":"ExplicitLayout","pos":[0,14]}]},{"pos":[12593,12604],"content":"HasSecurity","needQuote":true,"nodes":[{"content":"HasSecurity","pos":[0,11]}]},{"pos":[13489,13495],"content":"Import","needQuote":true,"nodes":[{"content":"Import","pos":[0,6]}]},{"pos":[14401,14410],"content":"Interface","needQuote":true,"nodes":[{"content":"Interface","pos":[0,9]}]},{"pos":[15299,15309],"content":"LayoutMask","needQuote":true,"nodes":[{"content":"LayoutMask","pos":[0,10]}]},{"pos":[16209,16223],"content":"NestedAssembly","needQuote":true,"nodes":[{"content":"NestedAssembly","pos":[0,14]}]},{"pos":[17232,17249],"content":"NestedFamANDAssem","needQuote":true,"nodes":[{"content":"NestedFamANDAssem","pos":[0,17]}]},{"pos":[18299,18311],"content":"NestedFamily","needQuote":true,"nodes":[{"content":"NestedFamily","pos":[0,12]}]},{"pos":[19329,19345],"content":"NestedFamORAssem","needQuote":true,"nodes":[{"content":"NestedFamORAssem","pos":[0,16]}]},{"pos":[20386,20399],"content":"NestedPrivate","needQuote":true,"nodes":[{"content":"NestedPrivate","pos":[0,13]}]},{"pos":[21328,21340],"content":"NestedPublic","needQuote":true,"nodes":[{"content":"NestedPublic","pos":[0,12]}]},{"pos":[22255,22264],"content":"NotPublic","needQuote":true,"nodes":[{"content":"NotPublic","pos":[0,9]}]},{"pos":[23139,23145],"content":"Public","needQuote":true,"nodes":[{"content":"Public","pos":[0,6]}]},{"pos":[24025,24038],"content":"RTSpecialName","needQuote":true,"nodes":[{"content":"RTSpecialName","pos":[0,13]}]},{"pos":[24928,24934],"content":"Sealed","needQuote":true,"nodes":[{"content":"Sealed","pos":[0,6]}]},{"pos":[25850,25866],"content":"SequentialLayout","needQuote":true,"nodes":[{"content":"SequentialLayout","pos":[0,16]}]},{"pos":[26861,26873],"content":"Serializable","needQuote":true,"nodes":[{"content":"Serializable","pos":[0,12]}]},{"pos":[27782,27793],"content":"SpecialName","needQuote":true,"nodes":[{"content":"SpecialName","pos":[0,11]}]},{"pos":[28735,28751],"content":"StringFormatMask","needQuote":true,"nodes":[{"content":"StringFormatMask","pos":[0,16]}]},{"pos":[29702,29714],"content":"UnicodeClass","needQuote":true,"nodes":[{"content":"UnicodeClass","pos":[0,12]}]},{"pos":[30623,30637],"content":"VisibilityMask","needQuote":true,"nodes":[{"content":"VisibilityMask","pos":[0,14]}]},{"pos":[31555,31569],"content":"WindowsRuntime","needQuote":true,"nodes":[{"content":"WindowsRuntime","pos":[0,14]}]},{"pos":[32445,32462],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[32656,32670],"content":"TypeAttributes","needQuote":true,"nodes":[{"content":"TypeAttributes","pos":[0,14]}]}],"content":"items:\n- uid: System.Reflection.TypeAttributes\n  commentId: T:System.Reflection.TypeAttributes\n  id: TypeAttributes\n  parent: System.Reflection\n  children:\n  - System.Reflection.TypeAttributes.Abstract\n  - System.Reflection.TypeAttributes.AnsiClass\n  - System.Reflection.TypeAttributes.AutoClass\n  - System.Reflection.TypeAttributes.AutoLayout\n  - System.Reflection.TypeAttributes.BeforeFieldInit\n  - System.Reflection.TypeAttributes.Class\n  - System.Reflection.TypeAttributes.ClassSemanticsMask\n  - System.Reflection.TypeAttributes.CustomFormatClass\n  - System.Reflection.TypeAttributes.CustomFormatMask\n  - System.Reflection.TypeAttributes.ExplicitLayout\n  - System.Reflection.TypeAttributes.HasSecurity\n  - System.Reflection.TypeAttributes.Import\n  - System.Reflection.TypeAttributes.Interface\n  - System.Reflection.TypeAttributes.LayoutMask\n  - System.Reflection.TypeAttributes.NestedAssembly\n  - System.Reflection.TypeAttributes.NestedFamANDAssem\n  - System.Reflection.TypeAttributes.NestedFamily\n  - System.Reflection.TypeAttributes.NestedFamORAssem\n  - System.Reflection.TypeAttributes.NestedPrivate\n  - System.Reflection.TypeAttributes.NestedPublic\n  - System.Reflection.TypeAttributes.NotPublic\n  - System.Reflection.TypeAttributes.Public\n  - System.Reflection.TypeAttributes.RTSpecialName\n  - System.Reflection.TypeAttributes.Sealed\n  - System.Reflection.TypeAttributes.SequentialLayout\n  - System.Reflection.TypeAttributes.Serializable\n  - System.Reflection.TypeAttributes.SpecialName\n  - System.Reflection.TypeAttributes.StringFormatMask\n  - System.Reflection.TypeAttributes.UnicodeClass\n  - System.Reflection.TypeAttributes.VisibilityMask\n  - System.Reflection.TypeAttributes.WindowsRuntime\n  langs:\n  - csharp\n  - vb\n  name: TypeAttributes\n  fullName: System.Reflection.TypeAttributes\n  type: Enum\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TypeAttributes\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 8\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies type attributes.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [Flags]\n\n      [ComVisible(true)]\n\n      public enum TypeAttributes\n    content.vb: >-\n      <Serializable>\n\n      <Flags>\n\n      <ComVisible(True)>\n\n      Public Enum TypeAttributes\n  attributes:\n  - type: System.FlagsAttribute\n    ctor: System.FlagsAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - enum\n  modifiers.vb:\n  - Public\n  - Enum\n  nameWithType: TypeAttributes\n- uid: System.Reflection.TypeAttributes.Abstract\n  commentId: F:System.Reflection.TypeAttributes.Abstract\n  id: Abstract\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: Abstract\n  fullName: System.Reflection.TypeAttributes.Abstract\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Abstract\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 37\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the type is abstract.</p>\\n\"\n  syntax:\n    content: Abstract = 128\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.Abstract\n- uid: System.Reflection.TypeAttributes.AnsiClass\n  commentId: F:System.Reflection.TypeAttributes.AnsiClass\n  id: AnsiClass\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: AnsiClass\n  fullName: System.Reflection.TypeAttributes.AnsiClass\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AnsiClass\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 50\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>LPTSTR is interpreted as ANSI.</p>\\n\"\n  syntax:\n    content: AnsiClass = 0\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.AnsiClass\n- uid: System.Reflection.TypeAttributes.AutoClass\n  commentId: F:System.Reflection.TypeAttributes.AutoClass\n  id: AutoClass\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: AutoClass\n  fullName: System.Reflection.TypeAttributes.AutoClass\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AutoClass\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 52\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>LPTSTR is interpreted automatically.</p>\\n\"\n  syntax:\n    content: AutoClass = 131072\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.AutoClass\n- uid: System.Reflection.TypeAttributes.AutoLayout\n  commentId: F:System.Reflection.TypeAttributes.AutoLayout\n  id: AutoLayout\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: AutoLayout\n  fullName: System.Reflection.TypeAttributes.AutoLayout\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AutoLayout\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 26\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that class fields are automatically laid out by the common language runtime.</p>\\n\"\n  syntax:\n    content: AutoLayout = 0\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.AutoLayout\n- uid: System.Reflection.TypeAttributes.BeforeFieldInit\n  commentId: F:System.Reflection.TypeAttributes.BeforeFieldInit\n  id: BeforeFieldInit\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: BeforeFieldInit\n  fullName: System.Reflection.TypeAttributes.BeforeFieldInit\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BeforeFieldInit\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 58\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that calling static methods of the type does not force the system to initialize the type.</p>\\n\"\n  syntax:\n    content: BeforeFieldInit = 1048576\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.BeforeFieldInit\n- uid: System.Reflection.TypeAttributes.Class\n  commentId: F:System.Reflection.TypeAttributes.Class\n  id: Class\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: Class\n  fullName: System.Reflection.TypeAttributes.Class\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Class\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 33\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the type is a class.</p>\\n\"\n  syntax:\n    content: Class = 0\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.Class\n- uid: System.Reflection.TypeAttributes.ClassSemanticsMask\n  commentId: F:System.Reflection.TypeAttributes.ClassSemanticsMask\n  id: ClassSemanticsMask\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: ClassSemanticsMask\n  fullName: System.Reflection.TypeAttributes.ClassSemanticsMask\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ClassSemanticsMask\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 32\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies class semantics information; the current class is contextful (else agile).</p>\\n\"\n  syntax:\n    content: ClassSemanticsMask = 32\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.ClassSemanticsMask\n- uid: System.Reflection.TypeAttributes.CustomFormatClass\n  commentId: F:System.Reflection.TypeAttributes.CustomFormatClass\n  id: CustomFormatClass\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: CustomFormatClass\n  fullName: System.Reflection.TypeAttributes.CustomFormatClass\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CustomFormatClass\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 53\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>LPSTR is interpreted by some implementation-specific means, which includes the possibility of throwing a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Not used in the Microsoft implementation of the .NET Framework.</p>\\n\"\n  syntax:\n    content: CustomFormatClass = 196608\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.CustomFormatClass\n- uid: System.Reflection.TypeAttributes.CustomFormatMask\n  commentId: F:System.Reflection.TypeAttributes.CustomFormatMask\n  id: CustomFormatMask\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: CustomFormatMask\n  fullName: System.Reflection.TypeAttributes.CustomFormatMask\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CustomFormatMask\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 54\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Used to retrieve non-standard encoding information for native interop. The meaning of the values of these 2 bits is unspecified. Not used in the Microsoft implementation of the .NET Framework.</p>\\n\"\n  syntax:\n    content: CustomFormatMask = 12582912\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.CustomFormatMask\n- uid: System.Reflection.TypeAttributes.ExplicitLayout\n  commentId: F:System.Reflection.TypeAttributes.ExplicitLayout\n  id: ExplicitLayout\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: ExplicitLayout\n  fullName: System.Reflection.TypeAttributes.ExplicitLayout\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ExplicitLayout\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 28\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that class fields are laid out at the specified offsets.</p>\\n\"\n  syntax:\n    content: ExplicitLayout = 16\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.ExplicitLayout\n- uid: System.Reflection.TypeAttributes.HasSecurity\n  commentId: F:System.Reflection.TypeAttributes.HasSecurity\n  id: HasSecurity\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: HasSecurity\n  fullName: System.Reflection.TypeAttributes.HasSecurity\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: HasSecurity\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 63\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Type has security associate with it.</p>\\n\"\n  syntax:\n    content: HasSecurity = 262144\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.HasSecurity\n- uid: System.Reflection.TypeAttributes.Import\n  commentId: F:System.Reflection.TypeAttributes.Import\n  id: Import\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: Import\n  fullName: System.Reflection.TypeAttributes.Import\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Import\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 42\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the class or interface is imported from another module.</p>\\n\"\n  syntax:\n    content: Import = 4096\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.Import\n- uid: System.Reflection.TypeAttributes.Interface\n  commentId: F:System.Reflection.TypeAttributes.Interface\n  id: Interface\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: Interface\n  fullName: System.Reflection.TypeAttributes.Interface\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Interface\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 34\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the type is an interface.</p>\\n\"\n  syntax:\n    content: Interface = 32\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.Interface\n- uid: System.Reflection.TypeAttributes.LayoutMask\n  commentId: F:System.Reflection.TypeAttributes.LayoutMask\n  id: LayoutMask\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: LayoutMask\n  fullName: System.Reflection.TypeAttributes.LayoutMask\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LayoutMask\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 25\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies class layout information.</p>\\n\"\n  syntax:\n    content: LayoutMask = 24\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.LayoutMask\n- uid: System.Reflection.TypeAttributes.NestedAssembly\n  commentId: F:System.Reflection.TypeAttributes.NestedAssembly\n  id: NestedAssembly\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: NestedAssembly\n  fullName: System.Reflection.TypeAttributes.NestedAssembly\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NestedAssembly\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 19\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the class is nested with assembly visibility, and is thus accessible only by methods within its assembly.</p>\\n\"\n  syntax:\n    content: NestedAssembly = 5\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.NestedAssembly\n- uid: System.Reflection.TypeAttributes.NestedFamANDAssem\n  commentId: F:System.Reflection.TypeAttributes.NestedFamANDAssem\n  id: NestedFamANDAssem\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: NestedFamANDAssem\n  fullName: System.Reflection.TypeAttributes.NestedFamANDAssem\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NestedFamANDAssem\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 20\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the class is nested with assembly and family visibility, and is thus accessible only by methods lying in the intersection of its family and assembly.</p>\\n\"\n  syntax:\n    content: NestedFamANDAssem = 6\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.NestedFamANDAssem\n- uid: System.Reflection.TypeAttributes.NestedFamily\n  commentId: F:System.Reflection.TypeAttributes.NestedFamily\n  id: NestedFamily\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: NestedFamily\n  fullName: System.Reflection.TypeAttributes.NestedFamily\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NestedFamily\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 18\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the class is nested with family visibility, and is thus accessible only by methods within its own type and any derived types.</p>\\n\"\n  syntax:\n    content: NestedFamily = 4\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.NestedFamily\n- uid: System.Reflection.TypeAttributes.NestedFamORAssem\n  commentId: F:System.Reflection.TypeAttributes.NestedFamORAssem\n  id: NestedFamORAssem\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: NestedFamORAssem\n  fullName: System.Reflection.TypeAttributes.NestedFamORAssem\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NestedFamORAssem\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 21\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the class is nested with family or assembly visibility, and is thus accessible only by methods lying in the union of its family and assembly.</p>\\n\"\n  syntax:\n    content: NestedFamORAssem = 7\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.NestedFamORAssem\n- uid: System.Reflection.TypeAttributes.NestedPrivate\n  commentId: F:System.Reflection.TypeAttributes.NestedPrivate\n  id: NestedPrivate\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: NestedPrivate\n  fullName: System.Reflection.TypeAttributes.NestedPrivate\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NestedPrivate\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 17\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the class is nested with private visibility.</p>\\n\"\n  syntax:\n    content: NestedPrivate = 3\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.NestedPrivate\n- uid: System.Reflection.TypeAttributes.NestedPublic\n  commentId: F:System.Reflection.TypeAttributes.NestedPublic\n  id: NestedPublic\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: NestedPublic\n  fullName: System.Reflection.TypeAttributes.NestedPublic\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NestedPublic\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 16\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the class is nested with public visibility.</p>\\n\"\n  syntax:\n    content: NestedPublic = 2\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.NestedPublic\n- uid: System.Reflection.TypeAttributes.NotPublic\n  commentId: F:System.Reflection.TypeAttributes.NotPublic\n  id: NotPublic\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: NotPublic\n  fullName: System.Reflection.TypeAttributes.NotPublic\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NotPublic\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 14\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the class is not public.</p>\\n\"\n  syntax:\n    content: NotPublic = 0\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.NotPublic\n- uid: System.Reflection.TypeAttributes.Public\n  commentId: F:System.Reflection.TypeAttributes.Public\n  id: Public\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: Public\n  fullName: System.Reflection.TypeAttributes.Public\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Public\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 15\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the class is public.</p>\\n\"\n  syntax:\n    content: Public = 1\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.Public\n- uid: System.Reflection.TypeAttributes.RTSpecialName\n  commentId: F:System.Reflection.TypeAttributes.RTSpecialName\n  id: RTSpecialName\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: RTSpecialName\n  fullName: System.Reflection.TypeAttributes.RTSpecialName\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RTSpecialName\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 62\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Runtime should check name encoding.</p>\\n\"\n  syntax:\n    content: RTSpecialName = 2048\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.RTSpecialName\n- uid: System.Reflection.TypeAttributes.Sealed\n  commentId: F:System.Reflection.TypeAttributes.Sealed\n  id: Sealed\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: Sealed\n  fullName: System.Reflection.TypeAttributes.Sealed\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sealed\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 38\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the class is concrete and cannot be extended.</p>\\n\"\n  syntax:\n    content: Sealed = 256\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.Sealed\n- uid: System.Reflection.TypeAttributes.SequentialLayout\n  commentId: F:System.Reflection.TypeAttributes.SequentialLayout\n  id: SequentialLayout\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: SequentialLayout\n  fullName: System.Reflection.TypeAttributes.SequentialLayout\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SequentialLayout\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 27\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that class fields are laid out sequentially, in the order that the fields were emitted to the metadata.</p>\\n\"\n  syntax:\n    content: SequentialLayout = 8\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.SequentialLayout\n- uid: System.Reflection.TypeAttributes.Serializable\n  commentId: F:System.Reflection.TypeAttributes.Serializable\n  id: Serializable\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: Serializable\n  fullName: System.Reflection.TypeAttributes.Serializable\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Serializable\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 43\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the class can be serialized.</p>\\n\"\n  syntax:\n    content: Serializable = 8192\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.Serializable\n- uid: System.Reflection.TypeAttributes.SpecialName\n  commentId: F:System.Reflection.TypeAttributes.SpecialName\n  id: SpecialName\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: SpecialName\n  fullName: System.Reflection.TypeAttributes.SpecialName\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SpecialName\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 39\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the class is special in a way denoted by the name.</p>\\n\"\n  syntax:\n    content: SpecialName = 1024\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.SpecialName\n- uid: System.Reflection.TypeAttributes.StringFormatMask\n  commentId: F:System.Reflection.TypeAttributes.StringFormatMask\n  id: StringFormatMask\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: StringFormatMask\n  fullName: System.Reflection.TypeAttributes.StringFormatMask\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StringFormatMask\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 49\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Used to retrieve string information for native interoperability.</p>\\n\"\n  syntax:\n    content: StringFormatMask = 196608\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.StringFormatMask\n- uid: System.Reflection.TypeAttributes.UnicodeClass\n  commentId: F:System.Reflection.TypeAttributes.UnicodeClass\n  id: UnicodeClass\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: UnicodeClass\n  fullName: System.Reflection.TypeAttributes.UnicodeClass\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UnicodeClass\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 51\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>LPTSTR is interpreted as UNICODE.</p>\\n\"\n  syntax:\n    content: UnicodeClass = 65536\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.UnicodeClass\n- uid: System.Reflection.TypeAttributes.VisibilityMask\n  commentId: F:System.Reflection.TypeAttributes.VisibilityMask\n  id: VisibilityMask\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: VisibilityMask\n  fullName: System.Reflection.TypeAttributes.VisibilityMask\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: VisibilityMask\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 13\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies type visibility information.</p>\\n\"\n  syntax:\n    content: VisibilityMask = 7\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.VisibilityMask\n- uid: System.Reflection.TypeAttributes.WindowsRuntime\n  commentId: F:System.Reflection.TypeAttributes.WindowsRuntime\n  id: WindowsRuntime\n  parent: System.Reflection.TypeAttributes\n  langs:\n  - csharp\n  - vb\n  name: WindowsRuntime\n  fullName: System.Reflection.TypeAttributes.WindowsRuntime\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WindowsRuntime\n    path: src/mscorlib/src/System/Reflection/TypeAttributes.cs\n    startLine: 45\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies a Windows Runtime type.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      WindowsRuntime = 16384\n    content.vb: >-\n      <ComVisible(False)>\n\n      WindowsRuntime = 16384\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: TypeAttributes.WindowsRuntime\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Reflection.TypeAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: TypeAttributes\n  fullName: System.Reflection.TypeAttributes\n  nameWithType: TypeAttributes\n  commentId: T:System.Reflection.TypeAttributes\n"}