{"nodes":[{"pos":[3798,3805],"content":"Vector2","needQuote":true,"nodes":[{"content":"Vector2","pos":[0,7]}]},{"pos":[5356,5357],"content":"X","needQuote":true,"nodes":[{"content":"X","pos":[0,1]}]},{"pos":[6144,6145],"content":"Y","needQuote":true,"nodes":[{"content":"Y","pos":[0,1]}]},{"pos":[6991,7006],"content":"Vector2(Single)","needQuote":true,"nodes":[{"content":"Vector2(Single)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The value to assign to both elements.","pos":[7768,7810],"source":"\\n<p>The value to assign to both elements."},{"content":"&lt;/p&gt;\\n","pos":[7811,7817],"source":" </p>\\n"},{"pos":[8169,8192],"content":"Vector2(Single, Single)","needQuote":true,"nodes":[{"content":"Vector2(Single, Single)","pos":[0,23]}]},{"pos":[9481,9484],"content":"One","needQuote":true,"nodes":[{"content":"One","pos":[0,3]}]},{"content":"\\n&lt;p&gt;A vector whose two elements are equal to one (that is, it returns the vector &lt;code&gt;(1,1)&lt;/code&gt;.&lt;/p&gt;\\n","pos":[10158,10265],"source":"\\n<p>A vector whose two elements are equal to one (that is, it returns the vector <code>(1,1)</code>.</p>\\n"},{"pos":[10559,10564],"content":"UnitX","needQuote":true,"nodes":[{"content":"UnitX","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The vector &lt;code&gt;(1,0)&lt;/code&gt;.","pos":[11220,11255],"source":"\\n<p>The vector <code>(1,0)</code>."},{"content":"&lt;/p&gt;\\n","pos":[11256,11262],"source":" </p>\\n"},{"pos":[11558,11563],"content":"UnitY","needQuote":true,"nodes":[{"content":"UnitY","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The vector &lt;code&gt;(0,1)&lt;/code&gt;.&lt;/p&gt;\\n","pos":[12218,12259],"source":"\\n<p>The vector <code>(0,1)</code>.</p>\\n"},{"pos":[12552,12556],"content":"Zero","needQuote":true,"nodes":[{"content":"Zero","pos":[0,4]}]},{"content":"\\n&lt;p&gt;A vector whose two elements are equal to zero (that is, it returns the vector &lt;code&gt;(0,0)&lt;/code&gt;.","pos":[13238,13340],"source":"\\n<p>A vector whose two elements are equal to zero (that is, it returns the vector <code>(0,0)</code>."},{"content":"&lt;/p&gt;\\n","pos":[13341,13347],"source":" </p>\\n"},{"pos":[13711,13723],"content":"Abs(Vector2)","needQuote":true,"nodes":[{"content":"Abs(Vector2)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A vector.","pos":[14487,14501],"source":"\\n<p>A vector."},{"content":"&lt;/p&gt;\\n","pos":[14502,14508],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The absolute value vector.","pos":[14578,14609],"source":"\\n<p>The absolute value vector."},{"content":"&lt;/p&gt;\\n","pos":[14610,14616],"source":" </p>\\n"},{"pos":[15039,15060],"content":"Add(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Add(Vector2, Vector2)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The first vector to add.","pos":[15806,15835],"source":"\\n<p>The first vector to add."},{"content":"&lt;/p&gt;\\n","pos":[15836,15842],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector to add.","pos":[15916,15946],"source":"\\n<p>The second vector to add."},{"content":"&lt;/p&gt;\\n","pos":[15947,15953],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The summed vector.","pos":[16023,16046],"source":"\\n<p>The summed vector."},{"content":"&lt;/p&gt;\\n","pos":[16047,16053],"source":" </p>\\n"},{"pos":[16563,16595],"content":"Clamp(Vector2, Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Clamp(Vector2, Vector2, Vector2)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The vector to restrict.","pos":[17436,17464],"source":"\\n<p>The vector to restrict."},{"content":"&lt;/p&gt;\\n","pos":[17465,17471],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The minimum value.","pos":[17543,17566],"source":"\\n<p>The minimum value."},{"content":"&lt;/p&gt;\\n","pos":[17567,17573],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum value.","pos":[17645,17668],"source":"\\n<p>The maximum value."},{"content":"&lt;/p&gt;\\n","pos":[17669,17675],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The restricted vector.","pos":[17745,17772],"source":"\\n<p>The restricted vector."},{"content":"&lt;/p&gt;\\n","pos":[17773,17779],"source":" </p>\\n"},{"pos":[18135,18151],"content":"CopyTo(Single[])","needQuote":true,"nodes":[{"content":"CopyTo(Single[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The destination array.","pos":[18835,18862],"source":"\\n<p>The destination array."},{"content":"&lt;/p&gt;\\n","pos":[18863,18869],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[18988,19035],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19036,19042],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the current instance is greater than in the array.","pos":[19139,19220],"source":"\\n<p>The number of elements in the current instance is greater than in the array."},{"content":"&lt;/p&gt;\\n","pos":[19221,19227],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[19316,19364],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"pos":[19856,19879],"content":"CopyTo(Single[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Single[], Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The destination array.&lt;/p&gt;\\n","pos":[20644,20677],"source":"\\n<p>The destination array.</p>\\n"},{"content":"\\n&lt;p&gt;The index at which to copy the first element of the vector.","pos":[20740,20804],"source":"\\n<p>The index at which to copy the first element of the vector."},{"content":"&lt;/p&gt;\\n","pos":[20805,20811],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[20930,20977],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[20978,20984],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the current instance is greater than in the array.","pos":[21081,21162],"source":"\\n<p>The number of elements in the current instance is greater than in the array."},{"content":"&lt;/p&gt;\\n","pos":[21163,21169],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is greater than or equal to the array length.","pos":[21286,21410],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than or equal to the array length."},{"content":"&lt;/p&gt;\\n","pos":[21411,21417],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n","pos":[21506,21554],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n"},{"pos":[22144,22170],"content":"Distance(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Distance(Vector2, Vector2)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first point.","pos":[22976,22997],"source":"\\n<p>The first point."},{"content":"&lt;/p&gt;\\n","pos":[22998,23004],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second point.","pos":[23079,23101],"source":"\\n<p>The second point."},{"content":"&lt;/p&gt;\\n","pos":[23102,23108],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The distance.","pos":[23168,23186],"source":"\\n<p>The distance."},{"content":"&lt;/p&gt;\\n","pos":[23187,23193],"source":" </p>\\n"},{"pos":[23666,23699],"content":"DistanceSquared(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"DistanceSquared(Vector2, Vector2)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The first point.","pos":[24540,24561],"source":"\\n<p>The first point."},{"content":"&lt;/p&gt;\\n","pos":[24562,24568],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second point.","pos":[24643,24665],"source":"\\n<p>The second point."},{"content":"&lt;/p&gt;\\n","pos":[24666,24672],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The distance squared.","pos":[24732,24758],"source":"\\n<p>The distance squared."},{"content":"&lt;/p&gt;\\n","pos":[24759,24765],"source":" </p>\\n"},{"pos":[25218,25242],"content":"Divide(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Divide(Vector2, Vector2)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[26013,26035],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[26036,26042],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[26116,26139],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[26140,26146],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The vector resulting from the division.","pos":[26216,26260],"source":"\\n<p>The vector resulting from the division."},{"content":"&lt;/p&gt;\\n","pos":[26261,26267],"source":" </p>\\n"},{"pos":[26681,26704],"content":"Divide(Vector2, Single)","needQuote":true,"nodes":[{"content":"Divide(Vector2, Single)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The vector.","pos":[27484,27500],"source":"\\n<p>The vector."},{"content":"&lt;/p&gt;\\n","pos":[27501,27507],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scalar value.","pos":[27573,27595],"source":"\\n<p>The scalar value."},{"content":"&lt;/p&gt;\\n","pos":[27596,27602],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The vector that results from the division.","pos":[27672,27719],"source":"\\n<p>The vector that results from the division."},{"content":"&lt;/p&gt;\\n","pos":[27720,27726],"source":" </p>\\n"},{"pos":[28160,28181],"content":"Dot(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Dot(Vector2, Vector2)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[28945,28967],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[28968,28974],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[29049,29072],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[29073,29079],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The dot product.","pos":[29139,29160],"source":"\\n<p>The dot product."},{"content":"&lt;/p&gt;\\n","pos":[29161,29167],"source":" </p>\\n"},{"pos":[29536,29551],"content":"Equals(Vector2)","needQuote":true,"nodes":[{"content":"Equals(Vector2)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The other vector.","pos":[30293,30315],"source":"\\n<p>The other vector."},{"content":"&lt;/p&gt;\\n","pos":[30316,30322],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two vectors are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[30383,30476],"source":"\\n<p>\\n<strong>true</strong> if the two vectors are equal; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[30477,30483],"source":" </p>\\n"},{"pos":[30887,30901],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current instance.","pos":[31637,31690],"source":"\\n<p>The object to compare with the current instance."},{"content":"&lt;/p&gt;\\n","pos":[31691,31697],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance and &lt;em&gt;obj&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;.","pos":[31758,31890],"source":"\\n<p>\\n<strong>true</strong> if the current instance and <em>obj</em> are equal; otherwise, <strong>false</strong><strong></strong>."},{"content":"If &lt;em&gt;obj&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, the method returns &lt;strong&gt;false&lt;/strong&gt;.","pos":[31891,31975],"source":" If <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[31976,31982],"source":" </p>\\n"},{"pos":[32342,32355],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code.","pos":[33008,33027],"source":"\\n<p>The hash code."},{"content":"&lt;/p&gt;\\n","pos":[33028,33034],"source":" </p>\\n"},{"pos":[33368,33376],"content":"Length()","needQuote":true,"nodes":[{"content":"Length()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The vector's length.","pos":[33985,34010],"source":"\\n<p>The vector's length."},{"content":"&lt;/p&gt;\\n","pos":[34011,34017],"source":" </p>\\n"},{"pos":[34411,34426],"content":"LengthSquared()","needQuote":true,"nodes":[{"content":"LengthSquared()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The vector's length squared.","pos":[35071,35104],"source":"\\n<p>The vector's length squared."},{"content":"&lt;/p&gt;\\n","pos":[35105,35111],"source":" </p>\\n"},{"pos":[35660,35690],"content":"Lerp(Vector2, Vector2, Single)","needQuote":true,"nodes":[{"content":"Lerp(Vector2, Vector2, Single)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[36550,36572],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[36573,36579],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[36654,36677],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[36678,36684],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A value between 0 and 1 that indicates the weight of &lt;em&gt;value2&lt;/em&gt;.","pos":[36749,36823],"source":"\\n<p>A value between 0 and 1 that indicates the weight of <em>value2</em>."},{"content":"&lt;/p&gt;\\n","pos":[36824,36830],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The interpolated vector.","pos":[36900,36929],"source":"\\n<p>The interpolated vector."},{"content":"&lt;/p&gt;\\n","pos":[36930,36936],"source":" </p>\\n"},{"pos":[37377,37398],"content":"Max(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Max(Vector2, Vector2)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[38231,38253],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[38254,38260],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[38335,38358],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[38359,38365],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximized vector.","pos":[38435,38461],"source":"\\n<p>The maximized vector."},{"content":"&lt;/p&gt;\\n","pos":[38462,38468],"source":" </p>\\n"},{"pos":[38900,38921],"content":"Min(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Min(Vector2, Vector2)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[39754,39776],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[39777,39783],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[39858,39881],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[39882,39888],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The minimized vector.","pos":[39958,39984],"source":"\\n<p>The minimized vector."},{"content":"&lt;/p&gt;\\n","pos":[39985,39991],"source":" </p>\\n"},{"pos":[40438,40464],"content":"Multiply(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Multiply(Vector2, Vector2)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[41236,41258],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[41259,41265],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[41339,41362],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[41363,41369],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The product vector.","pos":[41439,41463],"source":"\\n<p>The product vector."},{"content":"&lt;/p&gt;\\n","pos":[41464,41470],"source":" </p>\\n"},{"pos":[41892,41917],"content":"Multiply(Vector2, Single)","needQuote":true,"nodes":[{"content":"Multiply(Vector2, Single)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The vector to multiply.","pos":[42686,42714],"source":"\\n<p>The vector to multiply."},{"content":"&lt;/p&gt;\\n","pos":[42715,42721],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scalar value.","pos":[42785,42807],"source":"\\n<p>The scalar value."},{"content":"&lt;/p&gt;\\n","pos":[42808,42814],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scaled vector.","pos":[42884,42907],"source":"\\n<p>The scaled vector."},{"content":"&lt;/p&gt;\\n","pos":[42908,42914],"source":" </p>\\n"},{"pos":[43335,43360],"content":"Multiply(Single, Vector2)","needQuote":true,"nodes":[{"content":"Multiply(Single, Vector2)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The scaled value.","pos":[44124,44146],"source":"\\n<p>The scaled value."},{"content":"&lt;/p&gt;\\n","pos":[44147,44153],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The vector.","pos":[44227,44243],"source":"\\n<p>The vector."},{"content":"&lt;/p&gt;\\n","pos":[44244,44250],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scaled vector.","pos":[44320,44343],"source":"\\n<p>The scaled vector."},{"content":"&lt;/p&gt;\\n","pos":[44344,44350],"source":" </p>\\n"},{"pos":[44723,44738],"content":"Negate(Vector2)","needQuote":true,"nodes":[{"content":"Negate(Vector2)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The vector to negate.","pos":[45442,45468],"source":"\\n<p>The vector to negate."},{"content":"&lt;/p&gt;\\n","pos":[45469,45475],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The negated vector.","pos":[45545,45569],"source":"\\n<p>The negated vector."},{"content":"&lt;/p&gt;\\n","pos":[45570,45576],"source":" </p>\\n"},{"pos":[45948,45966],"content":"Normalize(Vector2)","needQuote":true,"nodes":[{"content":"Normalize(Vector2)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The vector to normalize.","pos":[46746,46775],"source":"\\n<p>The vector to normalize."},{"content":"&lt;/p&gt;\\n","pos":[46776,46782],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The normalized vector.","pos":[46852,46879],"source":"\\n<p>The normalized vector."},{"content":"&lt;/p&gt;\\n","pos":[46880,46886],"source":" </p>\\n"},{"pos":[47339,47365],"content":"Addition(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Addition(Vector2, Vector2)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first vector to add.","pos":[48131,48160],"source":"\\n<p>The first vector to add."},{"content":"&lt;/p&gt;\\n","pos":[48161,48167],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector to add.","pos":[48241,48271],"source":"\\n<p>The second vector to add."},{"content":"&lt;/p&gt;\\n","pos":[48272,48278],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The summed vector.","pos":[48348,48371],"source":"\\n<p>The summed vector."},{"content":"&lt;/p&gt;\\n","pos":[48372,48378],"source":" </p>\\n"},{"pos":[48839,48865],"content":"Division(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Division(Vector2, Vector2)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[49644,49666],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[49667,49673],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[49747,49770],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[49771,49777],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The vector that results from dividing &lt;em&gt;left&lt;/em&gt; by &lt;em&gt;right&lt;/em&gt;.","pos":[49847,49922],"source":"\\n<p>The vector that results from dividing <em>left</em> by <em>right</em>."},{"content":"&lt;/p&gt;\\n","pos":[49923,49929],"source":" </p>\\n"},{"pos":[50360,50385],"content":"Division(Vector2, Single)","needQuote":true,"nodes":[{"content":"Division(Vector2, Single)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The vector.","pos":[51176,51192],"source":"\\n<p>The vector."},{"content":"&lt;/p&gt;\\n","pos":[51193,51199],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scalar value.","pos":[51264,51286],"source":"\\n<p>The scalar value."},{"content":"&lt;/p&gt;\\n","pos":[51287,51293],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The result of the division.","pos":[51363,51395],"source":"\\n<p>The result of the division."},{"content":"&lt;/p&gt;\\n","pos":[51396,51402],"source":" </p>\\n"},{"pos":[51862,51888],"content":"Equality(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Equality(Vector2, Vector2)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first vector to compare.","pos":[52722,52755],"source":"\\n<p>The first vector to compare."},{"content":"&lt;/p&gt;\\n","pos":[52756,52762],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector to compare.","pos":[52836,52870],"source":"\\n<p>The second vector to compare."},{"content":"&lt;/p&gt;\\n","pos":[52871,52877],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[52938,53054],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[53521,53549],"content":"Inequality(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Inequality(Vector2, Vector2)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The first vector to compare.","pos":[54368,54401],"source":"\\n<p>The first vector to compare."},{"content":"&lt;/p&gt;\\n","pos":[54402,54408],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector to compare.","pos":[54482,54516],"source":"\\n<p>The second vector to compare."},{"content":"&lt;/p&gt;\\n","pos":[54517,54523],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[54584,54698],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[54699,54705],"source":" </p>\\n"},{"pos":[55168,55194],"content":"Multiply(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Multiply(Vector2, Vector2)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[55966,55988],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[55989,55995],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[56069,56092],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[56093,56099],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The product vector.","pos":[56169,56193],"source":"\\n<p>The product vector."},{"content":"&lt;/p&gt;\\n","pos":[56194,56200],"source":" </p>\\n"},{"pos":[56631,56656],"content":"Multiply(Vector2, Single)","needQuote":true,"nodes":[{"content":"Multiply(Vector2, Single)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The vector.","pos":[57444,57460],"source":"\\n<p>The vector."},{"content":"&lt;/p&gt;\\n","pos":[57461,57467],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scalar value.","pos":[57531,57553],"source":"\\n<p>The scalar value."},{"content":"&lt;/p&gt;\\n","pos":[57554,57560],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scaled vector.","pos":[57630,57653],"source":"\\n<p>The scaled vector."},{"content":"&lt;/p&gt;\\n","pos":[57654,57660],"source":" </p>\\n"},{"pos":[58090,58115],"content":"Multiply(Single, Vector2)","needQuote":true,"nodes":[{"content":"Multiply(Single, Vector2)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The vector.","pos":[58883,58899],"source":"\\n<p>The vector."},{"content":"&lt;/p&gt;\\n","pos":[58900,58906],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scalar value.","pos":[58980,59002],"source":"\\n<p>The scalar value."},{"content":"&lt;/p&gt;\\n","pos":[59003,59009],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The scaled vector.","pos":[59079,59102],"source":"\\n<p>The scaled vector."},{"content":"&lt;/p&gt;\\n","pos":[59103,59109],"source":" </p>\\n"},{"pos":[59578,59607],"content":"Subtraction(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Subtraction(Vector2, Vector2)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[60396,60418],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[60419,60425],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[60499,60522],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[60523,60529],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The vector that results from subtracting &lt;em&gt;right&lt;/em&gt; from &lt;em&gt;left&lt;/em&gt;.","pos":[60599,60679],"source":"\\n<p>The vector that results from subtracting <em>right</em> from <em>left</em>."},{"content":"&lt;/p&gt;\\n","pos":[60680,60686],"source":" </p>\\n"},{"pos":[61093,61115],"content":"UnaryNegation(Vector2)","needQuote":true,"nodes":[{"content":"UnaryNegation(Vector2)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The vector to negate.","pos":[61839,61865],"source":"\\n<p>The vector to negate."},{"content":"&lt;/p&gt;\\n","pos":[61866,61872],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The negated vector.","pos":[61942,61966],"source":"\\n<p>The negated vector."},{"content":"&lt;/p&gt;\\n","pos":[61967,61973],"source":" </p>\\n"},{"pos":[62418,62443],"content":"Reflect(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Reflect(Vector2, Vector2)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The source vector.","pos":[63266,63289],"source":"\\n<p>The source vector."},{"content":"&lt;/p&gt;\\n","pos":[63290,63296],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The normal of the surface being reflected off.","pos":[63371,63422],"source":"\\n<p>The normal of the surface being reflected off."},{"content":"&lt;/p&gt;\\n","pos":[63423,63429],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The reflected vector.","pos":[63499,63525],"source":"\\n<p>The reflected vector."},{"content":"&lt;/p&gt;\\n","pos":[63526,63532],"source":" </p>\\n"},{"pos":[63917,63936],"content":"SquareRoot(Vector2)","needQuote":true,"nodes":[{"content":"SquareRoot(Vector2)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A vector.","pos":[64721,64735],"source":"\\n<p>A vector."},{"content":"&lt;/p&gt;\\n","pos":[64736,64742],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The square root vector.","pos":[64812,64840],"source":"\\n<p>The square root vector."},{"content":"&lt;/p&gt;\\n","pos":[64841,64847],"source":" </p>\\n"},{"pos":[65292,65318],"content":"Subtract(Vector2, Vector2)","needQuote":true,"nodes":[{"content":"Subtract(Vector2, Vector2)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first vector.","pos":[66101,66123],"source":"\\n<p>The first vector."},{"content":"&lt;/p&gt;\\n","pos":[66124,66130],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second vector.","pos":[66204,66227],"source":"\\n<p>The second vector."},{"content":"&lt;/p&gt;\\n","pos":[66228,66234],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The difference vector.","pos":[66304,66331],"source":"\\n<p>The difference vector."},{"content":"&lt;/p&gt;\\n","pos":[66332,66338],"source":" </p>\\n"},{"pos":[66643,66653],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The string representation of the current instance.","pos":[67340,67395],"source":"\\n<p>The string representation of the current instance."},{"content":"&lt;/p&gt;\\n","pos":[67396,67402],"source":" </p>\\n"},{"pos":[67781,67797],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A standard or custom numeric format string that defines the format of individual elements.&lt;/p&gt;\\n","pos":[68569,68670],"source":"\\n<p>A standard or custom numeric format string that defines the format of individual elements.</p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the current instance.","pos":[68730,68785],"source":"\\n<p>The string representation of the current instance."},{"content":"&lt;/p&gt;\\n","pos":[68786,68792],"source":" </p>\\n"},{"pos":[69179,69212],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A standard or custom numeric format string that defines the format of individual elements.","pos":[70146,70241],"source":"\\n<p>A standard or custom numeric format string that defines the format of individual elements."},{"content":"&lt;/p&gt;\\n","pos":[70242,70248],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A format provider that supplies culture-specific formatting information.","pos":[70330,70407],"source":"\\n<p>A format provider that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[70408,70414],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the current instance.","pos":[70474,70529],"source":"\\n<p>The string representation of the current instance."},{"content":"&lt;/p&gt;\\n","pos":[70530,70536],"source":" </p>\\n"},{"pos":[71067,71096],"content":"Transform(Vector2, Matrix3x2)","needQuote":true,"nodes":[{"content":"Transform(Vector2, Matrix3x2)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The vector to transform.","pos":[71906,71935],"source":"\\n<p>The vector to transform."},{"content":"&lt;/p&gt;\\n","pos":[71936,71942],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformation matrix.","pos":[72019,72050],"source":"\\n<p>The transformation matrix."},{"content":"&lt;/p&gt;\\n","pos":[72051,72057],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformed vector.","pos":[72127,72155],"source":"\\n<p>The transformed vector."},{"content":"&lt;/p&gt;\\n","pos":[72156,72162],"source":" </p>\\n"},{"pos":[72626,72655],"content":"Transform(Vector2, Matrix4x4)","needQuote":true,"nodes":[{"content":"Transform(Vector2, Matrix4x4)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The vector to transform.","pos":[73465,73494],"source":"\\n<p>The vector to transform."},{"content":"&lt;/p&gt;\\n","pos":[73495,73501],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformation matrix.","pos":[73578,73609],"source":"\\n<p>The transformation matrix."},{"content":"&lt;/p&gt;\\n","pos":[73610,73616],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformed vector.","pos":[73686,73714],"source":"\\n<p>The transformed vector."},{"content":"&lt;/p&gt;\\n","pos":[73715,73721],"source":" </p>\\n"},{"pos":[74188,74218],"content":"Transform(Vector2, Quaternion)","needQuote":true,"nodes":[{"content":"Transform(Vector2, Quaternion)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The vector to rotate.","pos":[75043,75069],"source":"\\n<p>The vector to rotate."},{"content":"&lt;/p&gt;\\n","pos":[75070,75076],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The rotation to apply.","pos":[75156,75183],"source":"\\n<p>The rotation to apply."},{"content":"&lt;/p&gt;\\n","pos":[75184,75190],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformed vector.","pos":[75260,75288],"source":"\\n<p>The transformed vector."},{"content":"&lt;/p&gt;\\n","pos":[75289,75295],"source":" </p>\\n"},{"pos":[75778,75813],"content":"TransformNormal(Vector2, Matrix3x2)","needQuote":true,"nodes":[{"content":"TransformNormal(Vector2, Matrix3x2)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The source vector.","pos":[76646,76669],"source":"\\n<p>The source vector."},{"content":"&lt;/p&gt;\\n","pos":[76670,76676],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The matrix.","pos":[76753,76769],"source":"\\n<p>The matrix."},{"content":"&lt;/p&gt;\\n","pos":[76770,76776],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformed vector.","pos":[76846,76874],"source":"\\n<p>The transformed vector."},{"content":"&lt;/p&gt;\\n","pos":[76875,76881],"source":" </p>\\n"},{"pos":[77369,77404],"content":"TransformNormal(Vector2, Matrix4x4)","needQuote":true,"nodes":[{"content":"TransformNormal(Vector2, Matrix4x4)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The source vector.","pos":[78237,78260],"source":"\\n<p>The source vector."},{"content":"&lt;/p&gt;\\n","pos":[78261,78267],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The matrix.","pos":[78344,78360],"source":"\\n<p>The matrix."},{"content":"&lt;/p&gt;\\n","pos":[78361,78367],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The transformed vector.","pos":[78437,78465],"source":"\\n<p>The transformed vector."},{"content":"&lt;/p&gt;\\n","pos":[78466,78472],"source":" </p>\\n"},{"pos":[78677,78692],"content":"System.Numerics","needQuote":true,"nodes":[{"content":"System.Numerics","pos":[0,15]}]},{"pos":[78893,78912],"content":"IEquatable<Vector2>","needQuote":true,"nodes":[{"content":"IEquatable&lt;Vector2&gt;","pos":[0,19],"source":"IEquatable<Vector2>"}]},{"pos":[79117,79127],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[79191,79192],"content":"<","needQuote":true,"nodes":[]},{"pos":[79252,79259],"content":"Vector2","needQuote":true,"nodes":[{"content":"Vector2","pos":[0,7]}]},{"pos":[79380,79390],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[79455,79458]},{"pos":[79525,79532],"content":"Vector2","needQuote":true,"nodes":[{"content":"Vector2","pos":[0,7]}]},{"pos":[79581,79582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79807,79819],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[80024,80046],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[80194,80200],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[80267,80268],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80318,80324],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[80385,80386]},{"pos":[80441,80447],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[80507,80508],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80605,80611],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[80678,80679],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80729,80735],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[80796,80797]},{"pos":[80852,80858],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[80918,80919],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81164,81195],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[81361,81376],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[81452,81453],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81503,81509],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[81570,81571]},{"pos":[81626,81632],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[81692,81693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81799,81814],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[81890,81891],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81941,81947],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[82008,82009]},{"pos":[82064,82070],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[82130,82131],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82357,82366],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[82459,82466],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[82534,82535],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82562,82563],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82632,82639],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[82707,82708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82735,82736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82878,82891],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[83046,83056],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[83099,83100],"content":"<","needQuote":true,"nodes":[]},{"pos":[83127,83128],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[83227,83237],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[83281,83284]},{"pos":[83318,83319],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[83346,83347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83507,83513],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[83644,83650],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[83795,83801],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[83965,83972],"content":"Vector2","needQuote":true,"nodes":[{"content":"Vector2","pos":[0,7]}]},{"pos":[84103,84111],"content":"Single[]","needQuote":true,"nodes":[{"content":"Single[]","pos":[0,8]}]},{"pos":[84239,84245],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"content":"[]","pos":[84306,84308]},{"pos":[84373,84379],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[84439,84441],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[84577,84582],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[84846,84861],"content":"Equals(Vector2)","needQuote":true,"nodes":[{"content":"Equals(Vector2)","pos":[0,15]}]},{"pos":[85107,85113],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[85209,85210],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85270,85277],"content":"Vector2","needQuote":true,"nodes":[{"content":"Vector2","pos":[0,7]}]},{"pos":[85326,85327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85405,85411],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[85510,85511],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85571,85578],"content":"Vector2","needQuote":true,"nodes":[{"content":"Vector2","pos":[0,7]}]},{"pos":[85627,85628],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85912,85919],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[86067,86076],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[86234,86240],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[86293,86294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86321,86322],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[86349,86350],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86428,86434],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[86490,86491],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86518,86519],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[86546,86547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86796,86810],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[86935,86941],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[86990,86991],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87041,87047],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87107,87108],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87194,87200],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[87249,87250],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87300,87306],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87366,87367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87548,87557],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[87736,87749],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[87856,87867],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[87921,87922],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87949,87950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88026,88037],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[88091,88092],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88119,88120],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88309,88319],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[88420,88428],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[88479,88480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88507,88508],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88581,88589],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[88640,88641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88668,88669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88830,88836],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[89046,89079],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[89261,89269],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[89323,89324],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89374,89380],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[89441,89442]},{"pos":[89506,89521],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[89569,89570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89684,89692],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[89746,89747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89797,89803],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[89864,89865]},{"pos":[89929,89944],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[89992,89993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90230,90245],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[90438,90447],"content":"Matrix3x2","needQuote":true,"nodes":[{"content":"Matrix3x2","pos":[0,9]}]},{"pos":[90640,90649],"content":"Matrix4x4","needQuote":true,"nodes":[{"content":"Matrix4x4","pos":[0,9]}]},{"pos":[90843,90853],"content":"Quaternion","needQuote":true,"nodes":[{"content":"Quaternion","pos":[0,10]}]},{"pos":[91026,91047],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[91248,91265],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[91433,91446],"content":"RankException","needQuote":true,"nodes":[{"content":"RankException","pos":[0,13]}]},{"pos":[91616,91643],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Numerics.Vector2\n  commentId: T:System.Numerics.Vector2\n  id: Vector2\n  parent: System.Numerics\n  children:\n  - System.Numerics.Vector2.#ctor(System.Single)\n  - System.Numerics.Vector2.#ctor(System.Single,System.Single)\n  - System.Numerics.Vector2.Abs(System.Numerics.Vector2)\n  - System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.CopyTo(System.Single[])\n  - System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)\n  - System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)\n  - System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Equals(System.Numerics.Vector2)\n  - System.Numerics.Vector2.Equals(System.Object)\n  - System.Numerics.Vector2.GetHashCode\n  - System.Numerics.Vector2.Length\n  - System.Numerics.Vector2.LengthSquared\n  - System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)\n  - System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)\n  - System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)\n  - System.Numerics.Vector2.Negate(System.Numerics.Vector2)\n  - System.Numerics.Vector2.Normalize(System.Numerics.Vector2)\n  - System.Numerics.Vector2.One\n  - System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)\n  - System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)\n  - System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)\n  - System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)\n  - System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)\n  - System.Numerics.Vector2.ToString\n  - System.Numerics.Vector2.ToString(System.String)\n  - System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)\n  - System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  - System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  - System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)\n  - System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  - System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  - System.Numerics.Vector2.UnitX\n  - System.Numerics.Vector2.UnitY\n  - System.Numerics.Vector2.X\n  - System.Numerics.Vector2.Y\n  - System.Numerics.Vector2.Zero\n  langs:\n  - csharp\n  - vb\n  name: Vector2\n  fullName: System.Numerics.Vector2\n  type: Struct\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Vector2\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 313\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Represents a vector with two single-precision floating-point values. </p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct Vector2 : IEquatable<Vector2>, IFormattable\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure Vector2\n          Implements IEquatable(Of Vector2), IFormattable\n  implements:\n  - System.IEquatable{System.Numerics.Vector2}\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: Vector2\n- uid: System.Numerics.Vector2.X\n  commentId: F:System.Numerics.Vector2.X\n  id: X\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: X\n  fullName: System.Numerics.Vector2.X\n  type: Field\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: X\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 316\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>The X component of the vector. </p>\\n\"\n  syntax:\n    content: public float X\n    content.vb: Public X As Single\n    return:\n      type: System.Single\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector2.X\n- uid: System.Numerics.Vector2.Y\n  commentId: F:System.Numerics.Vector2.Y\n  id: Y\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Y\n  fullName: System.Numerics.Vector2.Y\n  type: Field\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Y\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 317\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>The Y component of the vector. </p>\\n\"\n  syntax:\n    content: public float Y\n    content.vb: Public Y As Single\n    return:\n      type: System.Single\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector2.Y\n- uid: System.Numerics.Vector2.#ctor(System.Single)\n  commentId: M:System.Numerics.Vector2.#ctor(System.Single)\n  id: '#ctor(System.Single)'\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Vector2(Single)\n  fullName: System.Numerics.Vector2.Vector2(System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 318\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Numerics.Vector2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object whose two elements have the same value.</p>\\n\"\n  syntax:\n    content: public Vector2(float value)\n    content.vb: Public Sub New(value As Single)\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The value to assign to both elements. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector2.Vector2(Single)\n- uid: System.Numerics.Vector2.#ctor(System.Single,System.Single)\n  commentId: M:System.Numerics.Vector2.#ctor(System.Single,System.Single)\n  id: '#ctor(System.Single,System.Single)'\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Vector2(Single, Single)\n  fullName: System.Numerics.Vector2.Vector2(System.Single, System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 319\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a vector whose elements have the specified values. </p>\\n\"\n  syntax:\n    content: public Vector2(float x, float y)\n    content.vb: Public Sub New(x As Single, y As Single)\n    parameters:\n    - id: x\n      type: System.Single\n      description: \"\\n<p>The value to assign to the <xref href=\\\"System.Numerics.Vector2.X\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> field. </p>\\n\"\n    - id: y\n      type: System.Single\n      description: \"\\n<p>The value to assign to the <xref href=\\\"System.Numerics.Vector2.Y\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> field. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector2.Vector2(Single, Single)\n- uid: System.Numerics.Vector2.One\n  commentId: P:System.Numerics.Vector2.One\n  id: One\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: One\n  fullName: System.Numerics.Vector2.One\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: One\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 320\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets a vector whose 2 elements are equal to one. </p>\\n\"\n  syntax:\n    content: public static Vector2 One { get; }\n    content.vb: Public Shared ReadOnly Property One As Vector2\n    parameters: []\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>A vector whose two elements are equal to one (that is, it returns the vector <code>(1,1)</code>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Vector2.One\n- uid: System.Numerics.Vector2.UnitX\n  commentId: P:System.Numerics.Vector2.UnitX\n  id: UnitX\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: UnitX\n  fullName: System.Numerics.Vector2.UnitX\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnitX\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 321\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets the vector (1,0). </p>\\n\"\n  syntax:\n    content: public static Vector2 UnitX { get; }\n    content.vb: Public Shared ReadOnly Property UnitX As Vector2\n    parameters: []\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector <code>(1,0)</code>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Vector2.UnitX\n- uid: System.Numerics.Vector2.UnitY\n  commentId: P:System.Numerics.Vector2.UnitY\n  id: UnitY\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: UnitY\n  fullName: System.Numerics.Vector2.UnitY\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnitY\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 322\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets the vector (0,1).</p>\\n\"\n  syntax:\n    content: public static Vector2 UnitY { get; }\n    content.vb: Public Shared ReadOnly Property UnitY As Vector2\n    parameters: []\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector <code>(0,1)</code>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Vector2.UnitY\n- uid: System.Numerics.Vector2.Zero\n  commentId: P:System.Numerics.Vector2.Zero\n  id: Zero\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Zero\n  fullName: System.Numerics.Vector2.Zero\n  type: Property\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zero\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 323\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a vector whose 2 elements are equal to zero. </p>\\n\"\n  syntax:\n    content: public static Vector2 Zero { get; }\n    content.vb: Public Shared ReadOnly Property Zero As Vector2\n    parameters: []\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>A vector whose two elements are equal to zero (that is, it returns the vector <code>(0,0)</code>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Vector2.Zero\n- uid: System.Numerics.Vector2.Abs(System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)\n  id: Abs(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Abs(Vector2)\n  fullName: System.Numerics.Vector2.Abs(System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Abs\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 324\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a vector whose elements are the absolute values of each of the specified vector's elements. </p>\\n\"\n  syntax:\n    content: public static Vector2 Abs(Vector2 value)\n    content.vb: Public Shared Function Abs(value As Vector2) As Vector2\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: \"\\n<p>A vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The absolute value vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Abs(Vector2)\n- uid: System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Add(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Add(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Add(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 325\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Adds two vectors together. </p>\\n\"\n  syntax:\n    content: public static Vector2 Add(Vector2 left, Vector2 right)\n    content.vb: Public Shared Function Add(left As Vector2, right As Vector2) As Vector2\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector to add. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector to add. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The summed vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Add(Vector2, Vector2)\n- uid: System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Clamp(Vector2, Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Clamp(System.Numerics.Vector2, System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clamp\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 326\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Restricts a vector between a minimum and a maximum value. </p>\\n\"\n  syntax:\n    content: public static Vector2 Clamp(Vector2 value1, Vector2 min, Vector2 max)\n    content.vb: Public Shared Function Clamp(value1 As Vector2, min As Vector2, max As Vector2) As Vector2\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector to restrict. </p>\\n\"\n    - id: min\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The minimum value. </p>\\n\"\n    - id: max\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The maximum value. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The restricted vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Clamp(Vector2, Vector2, Vector2)\n- uid: System.Numerics.Vector2.CopyTo(System.Single[])\n  commentId: M:System.Numerics.Vector2.CopyTo(System.Single[])\n  id: CopyTo(System.Single[])\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Single[])\n  fullName: System.Numerics.Vector2.CopyTo(System.Single[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 327\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Copies the elements of the vector to a specified array. </p>\\n\"\n  syntax:\n    content: public void CopyTo(float[] array)\n    content.vb: Public Sub CopyTo(array As Single())\n    parameters:\n    - id: array\n      type: System.Single[]\n      description: \"\\n<p>The destination array. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of elements in the current instance is greater than in the array. </p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.Vector2.CopyTo(System.Single())\n  name.vb: CopyTo(Single())\n  nameWithType: Vector2.CopyTo(Single[])\n  nameWithType.vb: Vector2.CopyTo(Single())\n- uid: System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)\n  commentId: M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)\n  id: CopyTo(System.Single[],System.Int32)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Single[], Int32)\n  fullName: System.Numerics.Vector2.CopyTo(System.Single[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 328\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Copies the elements of the vector to a specified array starting at a specified index position.</p>\\n\"\n  syntax:\n    content: public void CopyTo(float[] array, int index)\n    content.vb: Public Sub CopyTo(array As Single(), index As Integer)\n    parameters:\n    - id: array\n      type: System.Single[]\n      description: \"\\n<p>The destination array.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index at which to copy the first element of the vector. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of elements in the current instance is greater than in the array. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than or equal to the array length. </p>\\n\"\n  - type: System.RankException\n    commentId: T:System.RankException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Numerics.Vector2.CopyTo(System.Single(), System.Int32)\n  name.vb: CopyTo(Single(), Int32)\n  nameWithType: Vector2.CopyTo(Single[], Int32)\n  nameWithType.vb: Vector2.CopyTo(Single(), Int32)\n- uid: System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Distance(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Distance(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Distance(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Distance\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 329\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Computes the Euclidean distance between the two given points. </p>\\n\"\n  syntax:\n    content: public static float Distance(Vector2 value1, Vector2 value2)\n    content.vb: Public Shared Function Distance(value1 As Vector2, value2 As Vector2) As Single\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first point. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second point. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The distance. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Distance(Vector2, Vector2)\n- uid: System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: DistanceSquared(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DistanceSquared\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 330\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the Euclidean distance squared between two specified points. </p>\\n\"\n  syntax:\n    content: public static float DistanceSquared(Vector2 value1, Vector2 value2)\n    content.vb: Public Shared Function DistanceSquared(value1 As Vector2, value2 As Vector2) As Single\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first point. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second point. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The distance squared. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.DistanceSquared(Vector2, Vector2)\n- uid: System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Divide(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Divide(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Divide(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 331\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides the first vector by the second. </p>\\n\"\n  syntax:\n    content: public static Vector2 Divide(Vector2 left, Vector2 right)\n    content.vb: Public Shared Function Divide(left As Vector2, right As Vector2) As Vector2\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector resulting from the division. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Divide(Vector2, Vector2)\n- uid: System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)\n  commentId: M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)\n  id: Divide(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Divide(Vector2, Single)\n  fullName: System.Numerics.Vector2.Divide(System.Numerics.Vector2, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 332\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides the specified vector by a specified scalar value. </p>\\n\"\n  syntax:\n    content: public static Vector2 Divide(Vector2 left, float divisor)\n    content.vb: Public Shared Function Divide(left As Vector2, divisor As Single) As Vector2\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector. </p>\\n\"\n    - id: divisor\n      type: System.Single\n      description: \"\\n<p>The scalar value. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector that results from the division. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Divide(Vector2, Single)\n- uid: System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Dot(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Dot(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Dot(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dot\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 333\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the dot product of two vectors. </p>\\n\"\n  syntax:\n    content: public static float Dot(Vector2 value1, Vector2 value2)\n    content.vb: Public Shared Function Dot(value1 As Vector2, value2 As Vector2) As Single\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The dot product. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Dot(Vector2, Vector2)\n- uid: System.Numerics.Vector2.Equals(System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)\n  id: Equals(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Equals(Vector2)\n  fullName: System.Numerics.Vector2.Equals(System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 334\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether this instance and another vector are equal. </p>\\n\"\n  syntax:\n    content: public bool Equals(Vector2 other)\n    content.vb: Public Function Equals(other As Vector2) As Boolean\n    parameters:\n    - id: other\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The other vector. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two vectors are equal; otherwise, <strong>false</strong>. </p>\\n\"\n  implements:\n  - System.IEquatable{System.Numerics.Vector2}.Equals(System.Numerics.Vector2)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector2.Equals(Vector2)\n- uid: System.Numerics.Vector2.Equals(System.Object)\n  commentId: M:System.Numerics.Vector2.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Numerics.Vector2.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 335\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether this instance and a specified object are equal.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance and <em>obj</em> are equal; otherwise, <strong>false</strong><strong></strong>. If <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>. </p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Vector2.Equals(Object)\n- uid: System.Numerics.Vector2.GetHashCode\n  commentId: M:System.Numerics.Vector2.GetHashCode\n  id: GetHashCode\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Numerics.Vector2.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 336\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the hash code for this instance. </p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code. </p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Vector2.GetHashCode()\n- uid: System.Numerics.Vector2.Length\n  commentId: M:System.Numerics.Vector2.Length\n  id: Length\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Length()\n  fullName: System.Numerics.Vector2.Length()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Length\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 337\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the length of the vector. </p>\\n\"\n  syntax:\n    content: public float Length()\n    content.vb: Public Function Length As Single\n    return:\n      type: System.Single\n      description: \"\\n<p>The vector's length. </p>\\n\"\n  seealso:\n  - type: System.Numerics.Vector2.LengthSquared\n    commentId: M:System.Numerics.Vector2.LengthSquared\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector2.Length()\n- uid: System.Numerics.Vector2.LengthSquared\n  commentId: M:System.Numerics.Vector2.LengthSquared\n  id: LengthSquared\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: LengthSquared()\n  fullName: System.Numerics.Vector2.LengthSquared()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LengthSquared\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 338\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the length of the vector squared. </p>\\n\"\n  syntax:\n    content: public float LengthSquared()\n    content.vb: Public Function LengthSquared As Single\n    return:\n      type: System.Single\n      description: \"\\n<p>The vector's length squared. </p>\\n\"\n  seealso:\n  - type: System.Numerics.Vector2.Length\n    commentId: M:System.Numerics.Vector2.Length\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector2.LengthSquared()\n- uid: System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)\n  commentId: M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)\n  id: Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Lerp(Vector2, Vector2, Single)\n  fullName: System.Numerics.Vector2.Lerp(System.Numerics.Vector2, System.Numerics.Vector2, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Lerp\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 339\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Performs a linear interpolation between two vectors based on the given weighting. </p>\\n\"\n  syntax:\n    content: public static Vector2 Lerp(Vector2 value1, Vector2 value2, float amount)\n    content.vb: Public Shared Function Lerp(value1 As Vector2, value2 As Vector2, amount As Single) As Vector2\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector. </p>\\n\"\n    - id: amount\n      type: System.Single\n      description: \"\\n<p>A value between 0 and 1 that indicates the weight of <em>value2</em>. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The interpolated vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Lerp(Vector2, Vector2, Single)\n- uid: System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Max(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Max(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Max(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 340\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.</p>\\n\"\n  syntax:\n    content: public static Vector2 Max(Vector2 value1, Vector2 value2)\n    content.vb: Public Shared Function Max(value1 As Vector2, value2 As Vector2) As Vector2\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The maximized vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Max(Vector2, Vector2)\n- uid: System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Min(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Min(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Min(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 341\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.</p>\\n\"\n  syntax:\n    content: public static Vector2 Min(Vector2 value1, Vector2 value2)\n    content.vb: Public Shared Function Min(value1 As Vector2, value2 As Vector2) As Vector2\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: value2\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The minimized vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Min(Vector2, Vector2)\n- uid: System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Multiply(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 342\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiplies two vectors together. </p>\\n\"\n  syntax:\n    content: public static Vector2 Multiply(Vector2 left, Vector2 right)\n    content.vb: Public Shared Function Multiply(left As Vector2, right As Vector2) As Vector2\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The product vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Multiply(Vector2, Vector2)\n- uid: System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)\n  commentId: M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)\n  id: Multiply(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Vector2, Single)\n  fullName: System.Numerics.Vector2.Multiply(System.Numerics.Vector2, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 343\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiplies a vector by a specified scalar. </p>\\n\"\n  syntax:\n    content: public static Vector2 Multiply(Vector2 left, float right)\n    content.vb: Public Shared Function Multiply(left As Vector2, right As Single) As Vector2\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector to multiply. </p>\\n\"\n    - id: right\n      type: System.Single\n      description: \"\\n<p>The scalar value. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The scaled vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Multiply(Vector2, Single)\n- uid: System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)\n  id: Multiply(System.Single,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Single, Vector2)\n  fullName: System.Numerics.Vector2.Multiply(System.Single, System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 344\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiplies a scalar value by a specified vector.</p>\\n\"\n  syntax:\n    content: public static Vector2 Multiply(float left, Vector2 right)\n    content.vb: Public Shared Function Multiply(left As Single, right As Vector2) As Vector2\n    parameters:\n    - id: left\n      type: System.Single\n      description: \"\\n<p>The scaled value. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The scaled vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Multiply(Single, Vector2)\n- uid: System.Numerics.Vector2.Negate(System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)\n  id: Negate(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Negate(Vector2)\n  fullName: System.Numerics.Vector2.Negate(System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Negate\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 345\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Negates a specified vector. </p>\\n\"\n  syntax:\n    content: public static Vector2 Negate(Vector2 value)\n    content.vb: Public Shared Function Negate(value As Vector2) As Vector2\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector to negate. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The negated vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Negate(Vector2)\n- uid: System.Numerics.Vector2.Normalize(System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)\n  id: Normalize(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Normalize(Vector2)\n  fullName: System.Numerics.Vector2.Normalize(System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Normalize\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 346\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a vector with the same direction as the specified vector, but with a length of one. </p>\\n\"\n  syntax:\n    content: public static Vector2 Normalize(Vector2 value)\n    content.vb: Public Shared Function Normalize(value As Vector2) As Vector2\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector to normalize. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The normalized vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Normalize(Vector2)\n- uid: System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Addition(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Addition(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 347\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Adds two vectors together. </p>\\n\"\n  syntax:\n    content: public static Vector2 operator +(Vector2 left, Vector2 right)\n    content.vb: Public Shared Operator +(left As Vector2, right As Vector2) As Vector2\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector to add. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector to add. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The summed vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Addition(Vector2, Vector2)\n- uid: System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: op_Division(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Division(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Division(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Division\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 348\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides the first vector by the second. </p>\\n\"\n  syntax:\n    content: public static Vector2 operator /(Vector2 left, Vector2 right)\n    content.vb: Public Shared Operator /(left As Vector2, right As Vector2) As Vector2\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector that results from dividing <em>left</em> by <em>right</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Division(Vector2, Vector2)\n- uid: System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)\n  commentId: M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)\n  id: op_Division(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Division(Vector2, Single)\n  fullName: System.Numerics.Vector2.Division(System.Numerics.Vector2, System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Division\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 349\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides the specified vector by a specified scalar value.</p>\\n\"\n  syntax:\n    content: public static Vector2 operator /(Vector2 value1, float value2)\n    content.vb: Public Shared Operator /(value1 As Vector2, value2 As Single) As Vector2\n    parameters:\n    - id: value1\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector. </p>\\n\"\n    - id: value2\n      type: System.Single\n      description: \"\\n<p>The scalar value. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The result of the division. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Division(Vector2, Single)\n- uid: System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Equality(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Equality(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 350\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether each pair of elements in two specified vectors is equal.  </p>\\n\"\n  syntax:\n    content: public static bool operator ==(Vector2 left, Vector2 right)\n    content.vb: Public Shared Operator =(left As Vector2, right As Vector2) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector to compare. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Equality(Vector2, Vector2)\n- uid: System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Inequality(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 351\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether two specified vectors are not equal.  </p>\\n\"\n  syntax:\n    content: public static bool operator !=(Vector2 left, Vector2 right)\n    content.vb: Public Shared Operator <>(left As Vector2, right As Vector2) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector to compare. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Inequality(Vector2, Vector2)\n- uid: System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Multiply(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 352\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiplies two vectors together. </p>\\n\"\n  syntax:\n    content: public static Vector2 operator *(Vector2 left, Vector2 right)\n    content.vb: Public Shared Operator *(left As Vector2, right As Vector2) As Vector2\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The product vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Multiply(Vector2, Vector2)\n- uid: System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)\n  commentId: M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)\n  id: op_Multiply(System.Numerics.Vector2,System.Single)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Vector2, Single)\n  fullName: System.Numerics.Vector2.Multiply(System.Numerics.Vector2, System.Single)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 353\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiples the specified vector by the specified scalar value. </p>\\n\"\n  syntax:\n    content: public static Vector2 operator *(Vector2 left, float right)\n    content.vb: Public Shared Operator *(left As Vector2, right As Single) As Vector2\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector. </p>\\n\"\n    - id: right\n      type: System.Single\n      description: \"\\n<p>The scalar value. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The scaled vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Multiply(Vector2, Single)\n- uid: System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)\n  id: op_Multiply(System.Single,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Single, Vector2)\n  fullName: System.Numerics.Vector2.Multiply(System.Single, System.Numerics.Vector2)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 354\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiples the scalar value by the specified vector. </p>\\n\"\n  syntax:\n    content: public static Vector2 operator *(float left, Vector2 right)\n    content.vb: Public Shared Operator *(left As Single, right As Vector2) As Vector2\n    parameters:\n    - id: left\n      type: System.Single\n      description: \"\\n<p>The vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The scalar value. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The scaled vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Multiply(Single, Vector2)\n- uid: System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Subtraction(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Subtraction\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 355\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Subtracts the second vector from the first. </p>\\n\"\n  syntax:\n    content: public static Vector2 operator -(Vector2 left, Vector2 right)\n    content.vb: Public Shared Operator -(left As Vector2, right As Vector2) As Vector2\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector that results from subtracting <em>right</em> from <em>left</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Subtraction(Vector2, Vector2)\n- uid: System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)\n  id: op_UnaryNegation(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: UnaryNegation(Vector2)\n  fullName: System.Numerics.Vector2.UnaryNegation(System.Numerics.Vector2)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_UnaryNegation\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 356\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Negates the specified vector. </p>\\n\"\n  syntax:\n    content: public static Vector2 operator -(Vector2 value)\n    content.vb: Public Shared Operator -(value As Vector2) As Vector2\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector to negate. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The negated vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.UnaryNegation(Vector2)\n- uid: System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Reflect(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Reflect(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Reflect(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Reflect\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 357\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the reflection of a vector off a surface that has the specified normal. </p>\\n\"\n  syntax:\n    content: public static Vector2 Reflect(Vector2 vector, Vector2 normal)\n    content.vb: Public Shared Function Reflect(vector As Vector2, normal As Vector2) As Vector2\n    parameters:\n    - id: vector\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The source vector. </p>\\n\"\n    - id: normal\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The normal of the surface being reflected off. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The reflected vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Reflect(Vector2, Vector2)\n- uid: System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)\n  id: SquareRoot(System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: SquareRoot(Vector2)\n  fullName: System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SquareRoot\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 358\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a vector whose elements are the square root of each of a specified vector's elements.</p>\\n\"\n  syntax:\n    content: public static Vector2 SquareRoot(Vector2 value)\n    content.vb: Public Shared Function SquareRoot(value As Vector2) As Vector2\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: \"\\n<p>A vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The square root vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.SquareRoot(Vector2)\n- uid: System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)\n  commentId: M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)\n  id: Subtract(System.Numerics.Vector2,System.Numerics.Vector2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Subtract(Vector2, Vector2)\n  fullName: System.Numerics.Vector2.Subtract(System.Numerics.Vector2, System.Numerics.Vector2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 359\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Subtracts the second vector from the first. </p>\\n\"\n  syntax:\n    content: public static Vector2 Subtract(Vector2 left, Vector2 right)\n    content.vb: Public Shared Function Subtract(left As Vector2, right As Vector2) As Vector2\n    parameters:\n    - id: left\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The first vector. </p>\\n\"\n    - id: right\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The second vector. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The difference vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Subtract(Vector2, Vector2)\n- uid: System.Numerics.Vector2.ToString\n  commentId: M:System.Numerics.Vector2.ToString\n  id: ToString\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Numerics.Vector2.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 360\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the string representation of the current instance using default formatting. </p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current instance. </p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Vector2.ToString()\n- uid: System.Numerics.Vector2.ToString(System.String)\n  commentId: M:System.Numerics.Vector2.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  fullName: System.Numerics.Vector2.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 361\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the string representation of the current instance using the specified format string to format individual elements. </p>\\n\"\n  syntax:\n    content: public string ToString(string format)\n    content.vb: Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A standard or custom numeric format string that defines the format of individual elements.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current instance. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector2.ToString(String)\n- uid: System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: ToString(String, IFormatProvider)\n  fullName: System.Numerics.Vector2.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 362\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.</p>\\n\"\n  syntax:\n    content: public string ToString(string format, IFormatProvider formatProvider)\n    content.vb: Public Function ToString(format As String, formatProvider As IFormatProvider) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A standard or custom numeric format string that defines the format of individual elements. </p>\\n\"\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: \"\\n<p>A format provider that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current instance. </p>\\n\"\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Vector2.ToString(String, IFormatProvider)\n- uid: System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  commentId: M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  id: Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Transform(Vector2, Matrix3x2)\n  fullName: System.Numerics.Vector2.Transform(System.Numerics.Vector2, System.Numerics.Matrix3x2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Transform\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 363\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Transforms a vector by a specified 3x2 matrix. </p>\\n\"\n  syntax:\n    content: public static Vector2 Transform(Vector2 position, Matrix3x2 matrix)\n    content.vb: Public Shared Function Transform(position As Vector2, matrix As Matrix3x2) As Vector2\n    parameters:\n    - id: position\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector to transform. </p>\\n\"\n    - id: matrix\n      type: System.Numerics.Matrix3x2\n      description: \"\\n<p>The transformation matrix. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The transformed vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Transform(Vector2, Matrix3x2)\n- uid: System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  commentId: M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  id: Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Transform(Vector2, Matrix4x4)\n  fullName: System.Numerics.Vector2.Transform(System.Numerics.Vector2, System.Numerics.Matrix4x4)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Transform\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 364\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Transforms a vector by a specified 4x4 matrix. </p>\\n\"\n  syntax:\n    content: public static Vector2 Transform(Vector2 position, Matrix4x4 matrix)\n    content.vb: Public Shared Function Transform(position As Vector2, matrix As Matrix4x4) As Vector2\n    parameters:\n    - id: position\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector to transform. </p>\\n\"\n    - id: matrix\n      type: System.Numerics.Matrix4x4\n      description: \"\\n<p>The transformation matrix. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The transformed vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Transform(Vector2, Matrix4x4)\n- uid: System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)\n  commentId: M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)\n  id: Transform(System.Numerics.Vector2,System.Numerics.Quaternion)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: Transform(Vector2, Quaternion)\n  fullName: System.Numerics.Vector2.Transform(System.Numerics.Vector2, System.Numerics.Quaternion)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Transform\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 365\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Transforms a vector by the specified Quaternion rotation value. </p>\\n\"\n  syntax:\n    content: public static Vector2 Transform(Vector2 value, Quaternion rotation)\n    content.vb: Public Shared Function Transform(value As Vector2, rotation As Quaternion) As Vector2\n    parameters:\n    - id: value\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The vector to rotate. </p>\\n\"\n    - id: rotation\n      type: System.Numerics.Quaternion\n      description: \"\\n<p>The rotation to apply. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The transformed vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.Transform(Vector2, Quaternion)\n- uid: System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  commentId: M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  id: TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: TransformNormal(Vector2, Matrix3x2)\n  fullName: System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2, System.Numerics.Matrix3x2)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TransformNormal\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 366\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Transforms a vector normal by the given 3x2 matrix. </p>\\n\"\n  syntax:\n    content: public static Vector2 TransformNormal(Vector2 normal, Matrix3x2 matrix)\n    content.vb: Public Shared Function TransformNormal(normal As Vector2, matrix As Matrix3x2) As Vector2\n    parameters:\n    - id: normal\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The source vector. </p>\\n\"\n    - id: matrix\n      type: System.Numerics.Matrix3x2\n      description: \"\\n<p>The matrix. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The transformed vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.TransformNormal(Vector2, Matrix3x2)\n- uid: System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  commentId: M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  id: TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)\n  parent: System.Numerics.Vector2\n  langs:\n  - csharp\n  - vb\n  name: TransformNormal(Vector2, Matrix4x4)\n  fullName: System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2, System.Numerics.Matrix4x4)\n  type: Method\n  source:\n    remote:\n      path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TransformNormal\n    path: src/System.Numerics.Vectors/ref/System.Numerics.Vectors.cs\n    startLine: 367\n  assemblies:\n  - System.Numerics.Vectors\n  namespace: System.Numerics\n  summary: \"\\n<p>Transforms a vector normal by the given 4x4 matrix. </p>\\n\"\n  syntax:\n    content: public static Vector2 TransformNormal(Vector2 normal, Matrix4x4 matrix)\n    content.vb: Public Shared Function TransformNormal(normal As Vector2, matrix As Matrix4x4) As Vector2\n    parameters:\n    - id: normal\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The source vector. </p>\\n\"\n    - id: matrix\n      type: System.Numerics.Matrix4x4\n      description: \"\\n<p>The matrix. </p>\\n\"\n    return:\n      type: System.Numerics.Vector2\n      description: \"\\n<p>The transformed vector. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Vector2.TransformNormal(Vector2, Matrix4x4)\nreferences:\n- uid: System.Numerics\n  isExternal: false\n  name: System.Numerics\n  fullName: System.Numerics\n  commentId: N:System.Numerics\n  nameWithType: System.Numerics\n- uid: System.IEquatable{System.Numerics.Vector2}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<Vector2>\n  fullName: System.IEquatable<System.Numerics.Vector2>\n  fullname.vb: System.IEquatable(Of System.Numerics.Vector2)\n  name.vb: IEquatable(Of Vector2)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Numerics.Vector2\n    name: Vector2\n    fullName: System.Numerics.Vector2\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Numerics.Vector2\n    name: Vector2\n    fullName: System.Numerics.Vector2\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Numerics.Vector2}\n  nameWithType: IEquatable<Vector2>\n  nameWithType.vb: IEquatable(Of Vector2)\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  fullName: System.IFormattable\n  commentId: T:System.IFormattable\n  nameWithType: IFormattable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.Numerics.Vector2\n  parent: System.Numerics\n  isExternal: false\n  name: Vector2\n  fullName: System.Numerics.Vector2\n  commentId: T:System.Numerics.Vector2\n  nameWithType: Vector2\n- uid: System.Single[]\n  name: Single[]\n  fullName: System.Single[]\n  fullname.vb: System.Single()\n  name.vb: Single()\n  spec.csharp:\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Single[]\n  nameWithType.vb: Single()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.IEquatable{System.Numerics.Vector2}.Equals(System.Numerics.Vector2)\n  parent: System.IEquatable{System.Numerics.Vector2}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(Vector2)\n  fullName: System.IEquatable<System.Numerics.Vector2>.Equals(System.Numerics.Vector2)\n  fullname.vb: System.IEquatable(Of System.Numerics.Vector2).Equals(System.Numerics.Vector2)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Numerics.Vector2>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.Vector2\n    name: Vector2\n    fullName: System.Numerics.Vector2\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Numerics.Vector2).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.Vector2\n    name: Vector2\n    fullName: System.Numerics.Vector2\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Numerics.Vector2}.Equals(System.Numerics.Vector2)\n  nameWithType: IEquatable<Vector2>.Equals(Vector2)\n  nameWithType.vb: IEquatable(Of Vector2).Equals(Vector2)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.Equals(System.Object)\n  nameWithType: ValueType.Equals(Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  commentId: T:System.ValueType\n  nameWithType: ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.GetHashCode\n  nameWithType: ValueType.GetHashCode()\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.ToString\n  nameWithType: ValueType.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  commentId: T:System.IFormatProvider\n  nameWithType: IFormatProvider\n- uid: System.Numerics.Matrix3x2\n  parent: System.Numerics\n  isExternal: false\n  name: Matrix3x2\n  fullName: System.Numerics.Matrix3x2\n  commentId: T:System.Numerics.Matrix3x2\n  nameWithType: Matrix3x2\n- uid: System.Numerics.Matrix4x4\n  parent: System.Numerics\n  isExternal: false\n  name: Matrix4x4\n  fullName: System.Numerics.Matrix4x4\n  commentId: T:System.Numerics.Matrix4x4\n  nameWithType: Matrix4x4\n- uid: System.Numerics.Quaternion\n  parent: System.Numerics\n  isExternal: false\n  name: Quaternion\n  fullName: System.Numerics.Quaternion\n  commentId: T:System.Numerics.Quaternion\n  nameWithType: Quaternion\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.RankException\n  isExternal: false\n  name: RankException\n  fullName: System.RankException\n  nameWithType: RankException\n  commentId: T:System.RankException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}