{"nodes":[{"pos":[521,528],"content":"Lazy<T>","needQuote":true,"nodes":[{"content":"Lazy&lt;T&gt;","pos":[0,7],"source":"Lazy<T>"}]},{"content":"\\n&lt;p&gt;The type of object that is being lazily initialized.&lt;/p&gt;\\n","pos":[1570,1633],"source":"\\n<p>The type of object that is being lazily initialized.</p>\\n"},{"pos":[2371,2377],"content":"Lazy()","needQuote":true,"nodes":[{"content":"Lazy()","pos":[0,6]}]},{"pos":[3338,3351],"content":"Lazy(Boolean)","needQuote":true,"nodes":[{"content":"Lazy(Boolean)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to make this instance usable concurrently by multiple threads; &lt;strong&gt;false&lt;/strong&gt; to make the instance usable by only one thread at a time.","pos":[4144,4316],"source":"\\n<p>\\n<strong>true</strong> to make this instance usable concurrently by multiple threads; <strong>false</strong> to make the instance usable by only one thread at a time."},{"content":"&lt;/p&gt;\\n","pos":[4317,4323],"source":" </p>\\n"},{"pos":[4705,4718],"content":"Lazy(Func<T>)","needQuote":true,"nodes":[{"content":"Lazy(Func&lt;T&gt;)","pos":[0,13],"source":"Lazy(Func<T>)"}]},{"content":"\\n&lt;p&gt;The delegate that is invoked to produce the lazily initialized value when it is needed.&lt;/p&gt;\\n","pos":[5475,5573],"source":"\\n<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;valueFactory&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5692,5746],"source":"\\n<p>\\n<em>valueFactory</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5747,5753],"source":" </p>\\n"},{"pos":[6214,6236],"content":"Lazy(Func<T>, Boolean)","needQuote":true,"nodes":[{"content":"Lazy(Func&lt;T&gt;, Boolean)","pos":[0,22],"source":"Lazy(Func<T>, Boolean)"}]},{"content":"\\n&lt;p&gt;The delegate that is invoked to produce the lazily initialized value when it is needed.&lt;/p&gt;\\n","pos":[7078,7176],"source":"\\n<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to make this instance usable concurrently by multiple threads; &lt;strong&gt;false&lt;/strong&gt; to make this instance usable by only one thread at a time.&lt;/p&gt;\\n","pos":[7248,7427],"source":"\\n<p>\\n<strong>true</strong> to make this instance usable concurrently by multiple threads; <strong>false</strong> to make this instance usable by only one thread at a time.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;valueFactory&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[7546,7600],"source":"\\n<p>\\n<em>valueFactory</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7601,7607],"source":" </p>\\n"},{"pos":[8180,8215],"content":"Lazy(Func<T>, LazyThreadSafetyMode)","needQuote":true,"nodes":[{"content":"Lazy(Func&lt;T&gt;, LazyThreadSafetyMode)","pos":[0,35],"source":"Lazy(Func<T>, LazyThreadSafetyMode)"}]},{"content":"\\n&lt;p&gt;The delegate that is invoked to produce the lazily initialized value when it is needed.&lt;/p&gt;\\n","pos":[9059,9157],"source":"\\n<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the thread safety mode.","pos":[9244,9317],"source":"\\n<p>One of the enumeration values that specifies the thread safety mode."},{"content":"&lt;/p&gt;\\n","pos":[9318,9324],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mode&lt;/em&gt; contains an invalid value.","pos":[9455,9502],"source":"\\n<p>\\n<em>mode</em> contains an invalid value."},{"content":"&lt;/p&gt;\\n","pos":[9503,9509],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;valueFactory&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9614,9668],"source":"\\n<p>\\n<em>valueFactory</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9669,9675],"source":" </p>\\n"},{"pos":[10262,10288],"content":"Lazy(LazyThreadSafetyMode)","needQuote":true,"nodes":[{"content":"Lazy(LazyThreadSafetyMode)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the thread safety mode.","pos":[11093,11166],"source":"\\n<p>One of the enumeration values that specifies the thread safety mode."},{"content":"&lt;/p&gt;\\n","pos":[11167,11173],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;mode&lt;/em&gt; contains an invalid value.","pos":[11304,11351],"source":"\\n<p>\\n<em>mode</em> contains an invalid value."},{"content":"&lt;/p&gt;\\n","pos":[11352,11358],"source":" </p>\\n"},{"pos":[11877,11891],"content":"IsValueCreated","needQuote":true,"nodes":[{"content":"IsValueCreated","pos":[0,14]}]},{"pos":[13257,13262],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[15493,15503],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[17219,17225],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[17356,17362],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17535,17549],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[17668,17674],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17741,17742],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17792,17798],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17858,17859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17942,17948],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18015,18016],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18066,18072],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18132,18133],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18347,18369],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[18517,18523],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18590,18591],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18641,18647],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18708,18709]},{"pos":[18764,18770],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18830,18831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18928,18934],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19001,19002],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19052,19058],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19119,19120]},{"pos":[19175,19181],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19241,19242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19487,19518],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[19684,19699],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19775,19776],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19826,19832],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19893,19894]},{"pos":[19949,19955],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20015,20016],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20122,20137],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[20213,20214],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20264,20270],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20331,20332]},{"pos":[20387,20393],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20453,20454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20684,20697],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[20798,20809],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20881,20882],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20909,20910],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20983,20994],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[21066,21067],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21094,21095],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21270,21279],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[21372,21379],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[21447,21448],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21475,21476],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21545,21552],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[21620,21621],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21648,21649],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21824,21841],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[21950,21965],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[22041,22042],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22069,22070],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22147,22162],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[22238,22239],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22266,22267],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22437,22444],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22603,22610],"content":"Func<T>","needQuote":true,"nodes":[{"content":"Func&lt;T&gt;","pos":[0,7],"source":"Func<T>"}]},{"pos":[22741,22745],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[22782,22783],"content":"<","needQuote":true,"nodes":[]},{"pos":[22810,22811],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22904,22908],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[22946,22949]},{"pos":[22983,22984],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23011,23012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23164,23177],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[23326,23330],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[23367,23368],"content":"<","needQuote":true,"nodes":[]},{"pos":[23395,23402],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[23501,23505],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[23543,23546]},{"pos":[23580,23587],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[23620,23621],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23833,23853],"content":"LazyThreadSafetyMode","needQuote":true,"nodes":[{"content":"LazyThreadSafetyMode","pos":[0,20]}]},{"pos":[24046,24062],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[24194,24195],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24284,24285],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24399,24409],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[24504,24512],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24581,24582],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24609,24610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24680,24688],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24757,24758],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24785,24786],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24941,24947],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[25090,25111],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[25305,25332],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[25555,25576],"content":"MemberAccessException","needQuote":true,"nodes":[{"content":"MemberAccessException","pos":[0,21]}]},{"pos":[25782,25804],"content":"MissingMemberException","needQuote":true,"nodes":[{"content":"MissingMemberException","pos":[0,22]}]},{"pos":[26016,26041],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[26242,26264],"content":"NullReferenceException","needQuote":true,"nodes":[{"content":"NullReferenceException","pos":[0,22]}]}],"content":"items:\n- uid: System.Lazy`1\n  commentId: T:System.Lazy`1\n  id: Lazy`1\n  parent: System\n  children:\n  - System.Lazy`1.#ctor\n  - System.Lazy`1.#ctor(System.Boolean)\n  - System.Lazy`1.#ctor(System.Func{`0})\n  - System.Lazy`1.#ctor(System.Func{`0},System.Boolean)\n  - System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\n  - System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)\n  - System.Lazy`1.IsValueCreated\n  - System.Lazy`1.ToString\n  - System.Lazy`1.Value\n  langs:\n  - csharp\n  - vb\n  name: Lazy<T>\n  fullName: System.Lazy<T>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Lazy.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Lazy\n    path: src/mscorlib/src/System/Lazy.cs\n    startLine: 48\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Provides support for lazy initialization.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(false)]\n\n      [DebuggerTypeProxy(typeof (System_LazyDebugView<>))]\n\n      [DebuggerDisplay(\"ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}\")]\n\n      public class Lazy<T>\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(False)>\n\n      <DebuggerTypeProxy(GetType(System_LazyDebugView(Of )))>\n\n      <DebuggerDisplay(\"ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}\")>\n\n      Public Class Lazy(Of T)\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of object that is being lazily initialized.</p>\\n\"\n  seealso:\n  - type: System.Threading.LazyThreadSafetyMode\n    commentId: T:System.Threading.LazyThreadSafetyMode\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  fullName.vb: System.Lazy(Of T)\n  name.vb: Lazy(Of T)\n  nameWithType: Lazy<T>\n  nameWithType.vb: Lazy(Of T)\n- uid: System.Lazy`1.#ctor\n  commentId: M:System.Lazy`1.#ctor\n  id: '#ctor'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  - vb\n  name: Lazy()\n  fullName: System.Lazy<T>.Lazy()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Lazy.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Lazy.cs\n    startLine: 120\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Lazy`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. When lazy initialization occurs, the default constructor of the target type is used.</p>\\n\"\n  syntax:\n    content: public Lazy()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Lazy(Of T).Lazy()\n  nameWithType: Lazy<T>.Lazy()\n  nameWithType.vb: Lazy(Of T).Lazy()\n- uid: System.Lazy`1.#ctor(System.Boolean)\n  commentId: M:System.Lazy`1.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  - vb\n  name: Lazy(Boolean)\n  fullName: System.Lazy<T>.Lazy(System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Lazy.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Lazy.cs\n    startLine: 149\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Lazy`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</p>\\n\"\n  syntax:\n    content: public Lazy(bool isThreadSafe)\n    content.vb: Public Sub New(isThreadSafe As Boolean)\n    parameters:\n    - id: isThreadSafe\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to make this instance usable concurrently by multiple threads; <strong>false</strong> to make the instance usable by only one thread at a time. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Lazy(Of T).Lazy(System.Boolean)\n  nameWithType: Lazy<T>.Lazy(Boolean)\n  nameWithType.vb: Lazy(Of T).Lazy(Boolean)\n- uid: System.Lazy`1.#ctor(System.Func{`0})\n  commentId: M:System.Lazy`1.#ctor(System.Func{`0})\n  id: '#ctor(System.Func{`0})'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  - vb\n  name: Lazy(Func<T>)\n  fullName: System.Lazy<T>.Lazy(System.Func<T>)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Lazy.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Lazy.cs\n    startLine: 138\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Lazy`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. When lazy initialization occurs, the specified initialization function is used.</p>\\n\"\n  syntax:\n    content: public Lazy(Func<T> valueFactory)\n    content.vb: Public Sub New(valueFactory As Func(Of T))\n    parameters:\n    - id: valueFactory\n      type: System.Func{{T}}\n      description: \"\\n<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>valueFactory</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Lazy(Of T).Lazy(System.Func(Of T))\n  name.vb: Lazy(Func(Of T))\n  nameWithType: Lazy<T>.Lazy(Func<T>)\n  nameWithType.vb: Lazy(Of T).Lazy(Func(Of T))\n- uid: System.Lazy`1.#ctor(System.Func{`0},System.Boolean)\n  commentId: M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)\n  id: '#ctor(System.Func{`0},System.Boolean)'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  - vb\n  name: Lazy(Func<T>, Boolean)\n  fullName: System.Lazy<T>.Lazy(System.Func<T>, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Lazy.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Lazy.cs\n    startLine: 177\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Lazy`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. When lazy initialization occurs, the specified initialization function and initialization mode are used.</p>\\n\"\n  syntax:\n    content: public Lazy(Func<T> valueFactory, bool isThreadSafe)\n    content.vb: Public Sub New(valueFactory As Func(Of T), isThreadSafe As Boolean)\n    parameters:\n    - id: valueFactory\n      type: System.Func{{T}}\n      description: \"\\n<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\\n\"\n    - id: isThreadSafe\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to make this instance usable concurrently by multiple threads; <strong>false</strong> to make this instance usable by only one thread at a time.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>valueFactory</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Lazy(Of T).Lazy(System.Func(Of T), System.Boolean)\n  name.vb: Lazy(Func(Of T), Boolean)\n  nameWithType: Lazy<T>.Lazy(Func<T>, Boolean)\n  nameWithType.vb: Lazy(Of T).Lazy(Func(Of T), Boolean)\n- uid: System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\n  commentId: M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\n  id: '#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  - vb\n  name: Lazy(Func<T>, LazyThreadSafetyMode)\n  fullName: System.Lazy<T>.Lazy(System.Func<T>, System.Threading.LazyThreadSafetyMode)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Lazy.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Lazy.cs\n    startLine: 193\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Lazy`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that uses the specified initialization function and thread-safety mode.</p>\\n\"\n  syntax:\n    content: public Lazy(Func<T> valueFactory, LazyThreadSafetyMode mode)\n    content.vb: Public Sub New(valueFactory As Func(Of T), mode As LazyThreadSafetyMode)\n    parameters:\n    - id: valueFactory\n      type: System.Func{{T}}\n      description: \"\\n<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\\n\"\n    - id: mode\n      type: System.Threading.LazyThreadSafetyMode\n      description: \"\\n<p>One of the enumeration values that specifies the thread safety mode. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>mode</em> contains an invalid value. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>valueFactory</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Lazy(Of T).Lazy(System.Func(Of T), System.Threading.LazyThreadSafetyMode)\n  name.vb: Lazy(Func(Of T), LazyThreadSafetyMode)\n  nameWithType: Lazy<T>.Lazy(Func<T>, LazyThreadSafetyMode)\n  nameWithType.vb: Lazy(Of T).Lazy(Func(Of T), LazyThreadSafetyMode)\n- uid: System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)\n  commentId: M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)\n  id: '#ctor(System.Threading.LazyThreadSafetyMode)'\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  - vb\n  name: Lazy(LazyThreadSafetyMode)\n  fullName: System.Lazy<T>.Lazy(System.Threading.LazyThreadSafetyMode)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Lazy.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Lazy.cs\n    startLine: 160\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Lazy`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that uses the default constructor of <em>T</em> and the specified thread-safety mode.</p>\\n\"\n  syntax:\n    content: public Lazy(LazyThreadSafetyMode mode)\n    content.vb: Public Sub New(mode As LazyThreadSafetyMode)\n    parameters:\n    - id: mode\n      type: System.Threading.LazyThreadSafetyMode\n      description: \"\\n<p>One of the enumeration values that specifies the thread safety mode. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>mode</em> contains an invalid value. </p>\\n\"\n  seealso:\n  - type: System.Threading.LazyThreadSafetyMode\n    commentId: T:System.Threading.LazyThreadSafetyMode\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Lazy(Of T).Lazy(System.Threading.LazyThreadSafetyMode)\n  nameWithType: Lazy<T>.Lazy(LazyThreadSafetyMode)\n  nameWithType.vb: Lazy(Of T).Lazy(LazyThreadSafetyMode)\n- uid: System.Lazy`1.IsValueCreated\n  commentId: P:System.Lazy`1.IsValueCreated\n  id: IsValueCreated\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  - vb\n  name: IsValueCreated\n  fullName: System.Lazy<T>.IsValueCreated\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Lazy.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsValueCreated\n    path: src/mscorlib/src/System/Lazy.cs\n    startLine: 280\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value that indicates whether a value has been created for this <xref href=\\\"System.Lazy`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public bool IsValueCreated { get; }\n    content.vb: Public ReadOnly Property IsValueCreated As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if a value has been created for this <xref href=\\\"System.Lazy`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Threading.LazyThreadSafetyMode\n    commentId: T:System.Threading.LazyThreadSafetyMode\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Lazy(Of T).IsValueCreated\n  nameWithType: Lazy<T>.IsValueCreated\n  nameWithType.vb: Lazy(Of T).IsValueCreated\n- uid: System.Lazy`1.Value\n  commentId: P:System.Lazy`1.Value\n  id: Value\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Lazy<T>.Value\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Lazy.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Value\n    path: src/mscorlib/src/System/Lazy.cs\n    startLine: 309\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the lazily initialized value of the current <xref href=\\\"System.Lazy`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerBrowsable(DebuggerBrowsableState.Never)]\n\n      public T Value { get; }\n    content.vb: >-\n      <DebuggerBrowsable(DebuggerBrowsableState.Never)>\n\n      Public ReadOnly Property Value As T\n    parameters: []\n    return:\n      type: '{T}'\n      description: \"\\n<p>The lazily initialized value of the current <xref href=\\\"System.Lazy`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: \"\\n<p>The <xref href=\\\"System.Lazy`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing. </p>\\n\"\n  - type: System.MissingMemberException\n    commentId: T:System.MissingMemberException\n    description: \"\\n<p>The <xref href=\\\"System.Lazy`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The initialization function tries to access <xref href=\\\"System.Lazy`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on this instance. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Lazy(Of T).Value\n  nameWithType: Lazy<T>.Value\n  nameWithType.vb: Lazy(Of T).Value\n- uid: System.Lazy`1.ToString\n  commentId: M:System.Lazy`1.ToString\n  id: ToString\n  parent: System.Lazy`1\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Lazy<T>.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Lazy.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Lazy.cs\n    startLine: 232\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Creates and returns a string representation of the <xref href=\\\"System.Lazy`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for this instance.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The result of calling the <xref href=\\\"System.Object.ToString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method on the <xref href=\\\"System.Lazy`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property for this instance, if the value has been created (that is, if the <xref href=\\\"System.Lazy`1.IsValueCreated\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property returns <strong>true</strong>). Otherwise, a string indicating that the value has not been created. </p>\\n\"\n  overridden: System.Object.ToString\n  exceptions:\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>The <xref href=\\\"System.Lazy`1.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Lazy(Of T).ToString()\n  nameWithType: Lazy<T>.ToString()\n  nameWithType.vb: Lazy(Of T).ToString()\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Func{{T}}\n  parent: System\n  definition: System.Func`1\n  name: Func<T>\n  fullName: System.Func<T>\n  fullname.vb: System.Func(Of T)\n  name.vb: Func(Of T)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Func<T>\n  nameWithType.vb: Func(Of T)\n  commentId: T:System.Func{``0}\n- uid: System.Func`1\n  isExternal: false\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n  commentId: T:System.Func`1\n- uid: System.Threading.LazyThreadSafetyMode\n  parent: System.Threading\n  isExternal: false\n  name: LazyThreadSafetyMode\n  fullName: System.Threading.LazyThreadSafetyMode\n  nameWithType: LazyThreadSafetyMode\n  commentId: T:System.Threading.LazyThreadSafetyMode\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.MemberAccessException\n  parent: System\n  isExternal: false\n  name: MemberAccessException\n  fullName: System.MemberAccessException\n  nameWithType: MemberAccessException\n  commentId: T:System.MemberAccessException\n- uid: System.MissingMemberException\n  parent: System\n  isExternal: false\n  name: MissingMemberException\n  fullName: System.MissingMemberException\n  nameWithType: MissingMemberException\n  commentId: T:System.MissingMemberException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.NullReferenceException\n  isExternal: false\n  name: NullReferenceException\n  fullName: System.NullReferenceException\n  nameWithType: NullReferenceException\n  commentId: T:System.NullReferenceException\n"}