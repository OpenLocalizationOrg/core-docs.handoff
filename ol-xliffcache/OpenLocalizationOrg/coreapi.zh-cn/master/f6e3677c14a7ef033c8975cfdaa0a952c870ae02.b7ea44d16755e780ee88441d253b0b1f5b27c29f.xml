{"nodes":[{"pos":[522,543],"content":"EventCommandEventArgs","needQuote":true,"nodes":[{"content":"EventCommandEventArgs","pos":[0,21]}]},{"pos":[2120,2129],"content":"Arguments","needQuote":true,"nodes":[{"content":"Arguments","pos":[0,9]}]},{"content":"\\n&lt;p&gt;An array of callback arguments.&lt;/p&gt;\\n","pos":[2939,2981],"source":"\\n<p>An array of callback arguments.</p>\\n"},{"pos":[3354,3361],"content":"Command","needQuote":true,"nodes":[{"content":"Command","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The callback command.&lt;/p&gt;\\n","pos":[4091,4123],"source":"\\n<p>The callback command.</p>\\n"},{"pos":[4551,4570],"content":"DisableEvent(Int32)","needQuote":true,"nodes":[{"content":"DisableEvent(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The identifier of the event to disable.&lt;/p&gt;\\n","pos":[5330,5380],"source":"\\n<p>The identifier of the event to disable.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;eventId&lt;/em&gt; is in range; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5441,5543],"source":"\\n<p>\\n<strong>true</strong> if <em>eventId</em> is in range; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[5959,5977],"content":"EnableEvent(Int32)","needQuote":true,"nodes":[{"content":"EnableEvent(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The identifier of the event to enable.&lt;/p&gt;\\n","pos":[6731,6780],"source":"\\n<p>The identifier of the event to enable.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;eventId&lt;/em&gt; is in range; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6841,6943],"source":"\\n<p>\\n<strong>true</strong> if <em>eventId</em> is in range; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[7134,7160],"content":"System.Diagnostics.Tracing","needQuote":true,"nodes":[{"content":"System.Diagnostics.Tracing","pos":[0,26]}]},{"pos":[7351,7357],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7505,7514],"content":"EventArgs","needQuote":true,"nodes":[{"content":"EventArgs","pos":[0,9]}]},{"pos":[7686,7691],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[7878,7888],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7983,7991],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8060,8061],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8088,8089],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8159,8167],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8236,8237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8264,8265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8448,8462],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8581,8587],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8654,8655],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8705,8711],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8771,8772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8855,8861],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8928,8929],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8979,8985],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9045,9046],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9260,9282],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[9430,9436],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9503,9504],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9554,9560],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9621,9622]},{"pos":[9677,9683],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9743,9744],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9841,9847],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9914,9915],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9965,9971],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10032,10033]},{"pos":[10088,10094],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10154,10155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10400,10431],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10597,10612],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10688,10689],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10739,10745],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10806,10807]},{"pos":[10862,10868],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10928,10929],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11035,11050],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11126,11127],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11177,11183],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11244,11245]},{"pos":[11300,11306],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11366,11367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11597,11610],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11711,11722],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11794,11795],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11822,11823],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11896,11907],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11979,11980],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12007,12008],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12183,12192],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[12285,12292],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12360,12361],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12388,12389],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12458,12465],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12533,12534],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12561,12562],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12737,12754],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[12863,12878],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12954,12955],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12982,12983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13060,13075],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13151,13152],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13179,13180],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13325,13331],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[13571,13598],"content":"IDictionary<String, String>","needQuote":true,"nodes":[{"content":"IDictionary&lt;String, String&gt;","pos":[0,27],"source":"IDictionary<String, String>"}]},{"pos":[13884,13895],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[13980,13981],"content":"<","needQuote":true,"nodes":[]},{"pos":[14031,14037],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[14098,14099]},{"pos":[14154,14160],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[14313,14324],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[14410,14413]},{"pos":[14470,14476],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[14537,14538]},{"pos":[14593,14599],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[14659,14660],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14930,14955],"content":"IDictionary<TKey, TValue>","needQuote":true,"nodes":[{"content":"IDictionary&lt;TKey, TValue&gt;","pos":[0,25],"source":"IDictionary<TKey, TValue>"}]},{"pos":[15207,15218],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[15282,15283],"content":"<","needQuote":true,"nodes":[]},{"pos":[15310,15314],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[15345,15346]},{"pos":[15378,15384],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[15509,15520],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[15585,15588]},{"pos":[15622,15626],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[15657,15658]},{"pos":[15690,15696],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[15728,15729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15954,15980],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[16217,16229],"content":"EventCommand","needQuote":true,"nodes":[{"content":"EventCommand","pos":[0,12]}]},{"pos":[16431,16436],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16579,16586],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Diagnostics.Tracing.EventCommandEventArgs\n  commentId: T:System.Diagnostics.Tracing.EventCommandEventArgs\n  id: EventCommandEventArgs\n  parent: System.Diagnostics.Tracing\n  children:\n  - System.Diagnostics.Tracing.EventCommandEventArgs.Arguments\n  - System.Diagnostics.Tracing.EventCommandEventArgs.Command\n  - System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)\n  - System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: EventCommandEventArgs\n  fullName: System.Diagnostics.Tracing.EventCommandEventArgs\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventCommandEventArgs\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4703\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Provides the arguments for the <xref href=\\\"System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> callback.</p>\\n\"\n  syntax:\n    content: 'public class EventCommandEventArgs : EventArgs'\n    content.vb: >-\n      Public Class EventCommandEventArgs\n          Inherits EventArgs\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: EventCommandEventArgs\n- uid: System.Diagnostics.Tracing.EventCommandEventArgs.Arguments\n  commentId: P:System.Diagnostics.Tracing.EventCommandEventArgs.Arguments\n  id: Arguments\n  parent: System.Diagnostics.Tracing.EventCommandEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Arguments\n  fullName: System.Diagnostics.Tracing.EventCommandEventArgs.Arguments\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Arguments\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4713\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the array of arguments for the callback.</p>\\n\"\n  syntax:\n    content: public IDictionary<string, string> Arguments { get; }\n    content.vb: Public ReadOnly Property Arguments As IDictionary(Of String, String)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: \"\\n<p>An array of callback arguments.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventCommandEventArgs.Arguments\n- uid: System.Diagnostics.Tracing.EventCommandEventArgs.Command\n  commentId: P:System.Diagnostics.Tracing.EventCommandEventArgs.Command\n  id: Command\n  parent: System.Diagnostics.Tracing.EventCommandEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Command\n  fullName: System.Diagnostics.Tracing.EventCommandEventArgs.Command\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Command\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4708\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the command for the callback.</p>\\n\"\n  syntax:\n    content: public EventCommand Command { get; }\n    content.vb: Public ReadOnly Property Command As EventCommand\n    parameters: []\n    return:\n      type: System.Diagnostics.Tracing.EventCommand\n      description: \"\\n<p>The callback command.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventCommandEventArgs.Command\n- uid: System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)\n  id: DisableEvent(System.Int32)\n  parent: System.Diagnostics.Tracing.EventCommandEventArgs\n  langs:\n  - csharp\n  - vb\n  name: DisableEvent(Int32)\n  fullName: System.Diagnostics.Tracing.EventCommandEventArgs.DisableEvent(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DisableEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4732\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Disables the event that have the specified identifier.</p>\\n\"\n  syntax:\n    content: public bool DisableEvent(int eventId)\n    content.vb: Public Function DisableEvent(eventId As Integer) As Boolean\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The identifier of the event to disable.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>eventId</em> is in range; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventCommandEventArgs.DisableEvent(Int32)\n- uid: System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)\n  id: EnableEvent(System.Int32)\n  parent: System.Diagnostics.Tracing.EventCommandEventArgs\n  langs:\n  - csharp\n  - vb\n  name: EnableEvent(Int32)\n  fullName: System.Diagnostics.Tracing.EventCommandEventArgs.EnableEvent(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnableEvent\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4720\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Enables the event that has the specified identifier.</p>\\n\"\n  syntax:\n    content: public bool EnableEvent(int eventId)\n    content.vb: Public Function EnableEvent(eventId As Integer) As Boolean\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: \"\\n<p>The identifier of the event to enable.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>eventId</em> is in range; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventCommandEventArgs.EnableEvent(Int32)\nreferences:\n- uid: System.Diagnostics.Tracing\n  isExternal: false\n  name: System.Diagnostics.Tracing\n  fullName: System.Diagnostics.Tracing\n  nameWithType: System.Diagnostics.Tracing\n  commentId: N:System.Diagnostics.Tracing\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  fullName: System.EventArgs\n  nameWithType: EventArgs\n  commentId: T:System.EventArgs\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: true\n  name: Empty\n  fullName: System.EventArgs.Empty\n  nameWithType: EventArgs.Empty\n  commentId: F:System.EventArgs.Empty\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IDictionary`2\n  name: IDictionary<String, String>\n  fullName: System.Collections.Generic.IDictionary<System.String, System.String>\n  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)\n  name.vb: IDictionary(Of String, String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary<String, String>\n  nameWithType.vb: IDictionary(Of String, String)\n  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}\n- uid: System.Collections.Generic.IDictionary`2\n  isExternal: false\n  name: IDictionary<TKey, TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>\n  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)\n  name.vb: IDictionary(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  nameWithType: IDictionary<TKey, TValue>\n  nameWithType.vb: IDictionary(Of TKey, TValue)\n  commentId: T:System.Collections.Generic.IDictionary`2\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Diagnostics.Tracing.EventCommand\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventCommand\n  fullName: System.Diagnostics.Tracing.EventCommand\n  nameWithType: EventCommand\n  commentId: T:System.Diagnostics.Tracing.EventCommand\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n"}