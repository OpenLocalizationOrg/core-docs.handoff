{"nodes":[{"pos":[412,433],"content":"IXmlNamespaceResolver","needQuote":true,"nodes":[{"content":"IXmlNamespaceResolver","pos":[0,21]}]},{"pos":[1502,1541],"content":"GetNamespacesInScope(XmlNamespaceScope)","needQuote":true,"nodes":[{"content":"GetNamespacesInScope(XmlNamespaceScope)","pos":[0,39]}]},{"pos":[3176,3199],"content":"LookupNamespace(String)","needQuote":true,"nodes":[{"content":"LookupNamespace(String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The prefix whose namespace URI you wish to find.&lt;/p&gt;\\n","pos":[3919,3978],"source":"\\n<p>The prefix whose namespace URI you wish to find.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI that is mapped to the prefix; &lt;strong&gt;null&lt;/strong&gt; if the prefix is not mapped to a namespace URI.&lt;/p&gt;\\n","pos":[4038,4166],"source":"\\n<p>The namespace URI that is mapped to the prefix; <strong>null</strong> if the prefix is not mapped to a namespace URI.</p>\\n"},{"pos":[4486,4506],"content":"LookupPrefix(String)","needQuote":true,"nodes":[{"content":"LookupPrefix(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The namespace URI whose prefix you wish to find.&lt;/p&gt;\\n","pos":[5243,5302],"source":"\\n<p>The namespace URI whose prefix you wish to find.</p>\\n"},{"content":"\\n&lt;p&gt;The prefix that is mapped to the namespace URI; &lt;strong&gt;null&lt;/strong&gt; if the namespace URI is not mapped to a prefix.&lt;/p&gt;\\n","pos":[5362,5490],"source":"\\n<p>The prefix that is mapped to the namespace URI; <strong>null</strong> if the namespace URI is not mapped to a prefix.</p>\\n"},{"pos":[5609,5619],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[5781,5798],"content":"XmlNamespaceScope","needQuote":true,"nodes":[{"content":"XmlNamespaceScope","pos":[0,17]}]},{"pos":[6093,6120],"content":"IDictionary<String, String>","needQuote":true,"nodes":[{"content":"IDictionary&lt;String, String&gt;","pos":[0,27],"source":"IDictionary<String, String>"}]},{"pos":[6406,6417],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[6502,6503],"content":"<","needQuote":true,"nodes":[]},{"pos":[6553,6559],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[6620,6621]},{"pos":[6676,6682],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[6835,6846],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[6932,6935]},{"pos":[6992,6998],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[7059,7060]},{"pos":[7115,7121],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[7181,7182],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7452,7477],"content":"IDictionary<TKey, TValue>","needQuote":true,"nodes":[{"content":"IDictionary&lt;TKey, TValue&gt;","pos":[0,25],"source":"IDictionary<TKey, TValue>"}]},{"pos":[7729,7740],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[7804,7805],"content":"<","needQuote":true,"nodes":[]},{"pos":[7832,7836],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[7867,7868]},{"pos":[7900,7906],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[8031,8042],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[8107,8110]},{"pos":[8144,8148],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[8179,8180]},{"pos":[8212,8218],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[8250,8251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8476,8502],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[8693,8699],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[8820,8826],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]}],"content":"items:\n- uid: System.Xml.IXmlNamespaceResolver\n  commentId: T:System.Xml.IXmlNamespaceResolver\n  id: IXmlNamespaceResolver\n  parent: System.Xml\n  children:\n  - System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  - System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)\n  - System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)\n  langs:\n  - csharp\n  - vb\n  name: IXmlNamespaceResolver\n  fullName: System.Xml.IXmlNamespaceResolver\n  type: Interface\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IXmlNamespaceResolver\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 27\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Provides read-only access to a set of prefix and namespace mappings.</p>\\n\"\n  syntax:\n    content: public interface IXmlNamespaceResolver\n    content.vb: Public Interface IXmlNamespaceResolver\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  nameWithType: IXmlNamespaceResolver\n- uid: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  commentId: M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  id: GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  parent: System.Xml.IXmlNamespaceResolver\n  langs:\n  - csharp\n  - vb\n  name: GetNamespacesInScope(XmlNamespaceScope)\n  fullName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNamespacesInScope\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 29\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets a collection of defined prefix-namespace mappings that are currently in scope.</p>\\n\"\n  syntax:\n    content: IDictionary<string, string> GetNamespacesInScope(XmlNamespaceScope scope)\n    content.vb: Function GetNamespacesInScope(scope As XmlNamespaceScope) As IDictionary(Of String, String)\n    parameters:\n    - id: scope\n      type: System.Xml.XmlNamespaceScope\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlNamespaceScope\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies the type of namespace nodes to return.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the current in-scope namespaces.</p>\\n\"\n  nameWithType: IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)\n- uid: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)\n  commentId: M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)\n  id: LookupNamespace(System.String)\n  parent: System.Xml.IXmlNamespaceResolver\n  langs:\n  - csharp\n  - vb\n  name: LookupNamespace(String)\n  fullName: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LookupNamespace\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 30\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the namespace URI mapped to the specified prefix.</p>\\n\"\n  syntax:\n    content: string LookupNamespace(string prefix)\n    content.vb: Function LookupNamespace(prefix As String) As String\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix whose namespace URI you wish to find.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The namespace URI that is mapped to the prefix; <strong>null</strong> if the prefix is not mapped to a namespace URI.</p>\\n\"\n  nameWithType: IXmlNamespaceResolver.LookupNamespace(String)\n- uid: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)\n  commentId: M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)\n  id: LookupPrefix(System.String)\n  parent: System.Xml.IXmlNamespaceResolver\n  langs:\n  - csharp\n  - vb\n  name: LookupPrefix(String)\n  fullName: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LookupPrefix\n    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs\n    startLine: 31\n  assemblies:\n  - System.Xml.ReaderWriter\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the prefix that is mapped to the specified namespace URI.</p>\\n\"\n  syntax:\n    content: string LookupPrefix(string namespaceName)\n    content.vb: Function LookupPrefix(namespaceName As String) As String\n    parameters:\n    - id: namespaceName\n      type: System.String\n      description: \"\\n<p>The namespace URI whose prefix you wish to find.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The prefix that is mapped to the namespace URI; <strong>null</strong> if the namespace URI is not mapped to a prefix.</p>\\n\"\n  nameWithType: IXmlNamespaceResolver.LookupPrefix(String)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Xml.XmlNamespaceScope\n  parent: System.Xml\n  isExternal: false\n  name: XmlNamespaceScope\n  fullName: System.Xml.XmlNamespaceScope\n  commentId: T:System.Xml.XmlNamespaceScope\n  nameWithType: XmlNamespaceScope\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IDictionary`2\n  name: IDictionary<String, String>\n  fullName: System.Collections.Generic.IDictionary<System.String, System.String>\n  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)\n  name.vb: IDictionary(Of String, String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}\n  nameWithType: IDictionary<String, String>\n  nameWithType.vb: IDictionary(Of String, String)\n- uid: System.Collections.Generic.IDictionary`2\n  isExternal: false\n  name: IDictionary<TKey, TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>\n  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)\n  name.vb: IDictionary(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IDictionary`2\n  nameWithType: IDictionary<TKey, TValue>\n  nameWithType.vb: IDictionary(Of TKey, TValue)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n"}