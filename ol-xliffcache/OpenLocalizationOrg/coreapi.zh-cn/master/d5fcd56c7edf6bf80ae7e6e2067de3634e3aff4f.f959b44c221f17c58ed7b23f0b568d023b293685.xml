{"nodes":[{"pos":[1046,1056],"content":"SafeHandle","needQuote":true,"nodes":[{"content":"SafeHandle","pos":[0,10]}]},{"pos":[3378,3384],"content":"handle","needQuote":true,"nodes":[{"content":"handle","pos":[0,6]}]},{"pos":[4413,4440],"content":"SafeHandle(IntPtr, Boolean)","needQuote":true,"nodes":[{"content":"SafeHandle(IntPtr, Boolean)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The derived class resides in an assembly without unmanaged code access permission.","pos":[6240,6327],"source":"\\n<p>The derived class resides in an assembly without unmanaged code access permission."},{"content":"&lt;/p&gt;\\n","pos":[6328,6334],"source":" </p>\\n"},{"pos":[6948,6956],"content":"IsClosed","needQuote":true,"nodes":[{"content":"IsClosed","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the handle is closed; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7777,7871],"source":"\\n<p>\\n<strong>true</strong> if the handle is closed; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8345,8354],"content":"IsInvalid","needQuote":true,"nodes":[{"content":"IsInvalid","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the handle value is invalid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9244,9345],"source":"\\n<p>\\n<strong>true</strong> if the handle value is invalid; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9919,9947],"content":"DangerousAddRef(ref Boolean)","needQuote":true,"nodes":[{"content":"DangerousAddRef(ref Boolean)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the reference counter was successfully incremented; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10927,11051],"source":"\\n<p>\\n<strong>true</strong> if the reference counter was successfully incremented; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12047,12067],"content":"DangerousGetHandle()","needQuote":true,"nodes":[{"content":"DangerousGetHandle()","pos":[0,20]}]},{"pos":[13953,13971],"content":"DangerousRelease()","needQuote":true,"nodes":[{"content":"DangerousRelease()","pos":[0,18]}]},{"pos":[15599,15608],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[17212,17228],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; for a normal dispose operation; &lt;strong&gt;false&lt;/strong&gt; to finalize the handle.&lt;/p&gt;\\n","pos":[18361,18474],"source":"\\n<p>\\n<strong>true</strong> for a normal dispose operation; <strong>false</strong> to finalize the handle.</p>\\n"},{"pos":[19123,19138],"content":"ReleaseHandle()","needQuote":true,"nodes":[{"content":"ReleaseHandle()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the handle is released successfully; otherwise, in the event of a catastrophic failure,&lt;strong&gt; false&lt;/strong&gt;.","pos":[20059,20202],"source":"\\n<p>\\n<strong>true</strong> if the handle is released successfully; otherwise, in the event of a catastrophic failure,<strong> false</strong>."},{"content":"In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.&lt;/p&gt;\\n","pos":[20203,20290],"source":" In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</p>\\n"},{"pos":[20831,20848],"content":"SetHandle(IntPtr)","needQuote":true,"nodes":[{"content":"SetHandle(IntPtr)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The pre-existing handle to use.","pos":[21750,21786],"source":"\\n<p>The pre-existing handle to use."},{"content":"&lt;/p&gt;\\n","pos":[21787,21793],"source":" </p>\\n"},{"pos":[22288,22308],"content":"SetHandleAsInvalid()","needQuote":true,"nodes":[{"content":"SetHandleAsInvalid()","pos":[0,20]}]},{"pos":[23634,23644],"content":"Finalize()","needQuote":true,"nodes":[{"content":"Finalize()","pos":[0,10]}]},{"pos":[24769,24799],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[25002,25008],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25158,25169],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[25344,25354],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25449,25457],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25526,25527],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25554,25555],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25625,25633],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25702,25703],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25730,25731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25914,25928],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[26047,26053],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26120,26121],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26171,26177],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26237,26238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26321,26327],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26394,26395],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26445,26451],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26511,26512],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26726,26748],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[26896,26902],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26969,26970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27020,27026],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27087,27088]},{"pos":[27143,27149],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27209,27210],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27307,27313],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27380,27381],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27431,27437],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27498,27499]},{"pos":[27554,27560],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27620,27621],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27866,27897],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[28063,28078],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28154,28155],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28205,28211],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28272,28273]},{"pos":[28328,28334],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28394,28395],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28501,28516],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28592,28593],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28643,28649],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28710,28711]},{"pos":[28766,28772],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28832,28833],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29063,29076],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[29177,29188],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29260,29261],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29288,29289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29362,29373],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29445,29446],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29473,29474],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29649,29658],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[29751,29758],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[29826,29827],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29854,29855],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29924,29931],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[29999,30000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30027,30028],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30203,30220],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[30329,30344],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[30420,30421],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30448,30449],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30526,30541],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[30617,30618],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30645,30646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30791,30797],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[30928,30934],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[31080,31087],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31260,31269],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[31372,31379],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[31431,31432],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31459,31460],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31534,31541],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[31593,31594],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31621,31622],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31796,31813],"content":"TypeLoadException","needQuote":true,"nodes":[{"content":"TypeLoadException","pos":[0,17]}]}],"content":"items:\n- uid: System.Runtime.InteropServices.SafeHandle\n  commentId: T:System.Runtime.InteropServices.SafeHandle\n  id: SafeHandle\n  parent: System.Runtime.InteropServices\n  children:\n  - System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)\n  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  - System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  - System.Runtime.InteropServices.SafeHandle.Dispose\n  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  - System.Runtime.InteropServices.SafeHandle.Finalize\n  - System.Runtime.InteropServices.SafeHandle.handle\n  - System.Runtime.InteropServices.SafeHandle.IsClosed\n  - System.Runtime.InteropServices.SafeHandle.IsInvalid\n  - System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  langs:\n  - csharp\n  - vb\n  name: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SafeHandle\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n    startLine: 136\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Represents a wrapper class for operating system handles. This class must be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public abstract class SafeHandle : CriticalFinalizerObject, IDisposable\n    content.vb: >-\n      <SecurityCritical>\n\n      Public MustInherit Class SafeHandle\n          Inherits CriticalFinalizerObject\n          Implements IDisposable\n  seealso:\n  - type: Microsoft.Win32.SafeHandles\n    commentId: N:Microsoft.Win32.SafeHandles\n  - type: System.Runtime.InteropServices.CriticalHandle\n    commentId: T:System.Runtime.InteropServices.CriticalHandle\n  - type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n    commentId: T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n  see:\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: SafeHandle\n- uid: System.Runtime.InteropServices.SafeHandle.handle\n  commentId: F:System.Runtime.InteropServices.SafeHandle.handle\n  id: handle\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: handle\n  fullName: System.Runtime.InteropServices.SafeHandle.handle\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: handle\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n    startLine: 150\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Specifies the handle to be wrapped.</p>\\n\"\n  syntax:\n    content: protected IntPtr handle\n    content.vb: Protected handle As IntPtr\n    return:\n      type: System.IntPtr\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SafeHandle.handle\n- uid: System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)\n  commentId: M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)\n  id: '#ctor(System.IntPtr,System.Boolean)'\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: SafeHandle(IntPtr, Boolean)\n  fullName: System.Runtime.InteropServices.SafeHandle.SafeHandle(System.IntPtr, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n    startLine: 160\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.InteropServices.SafeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified invalid handle value.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      protected SafeHandle(IntPtr invalidHandleValue, bool ownsHandle)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Protected Sub New(invalidHandleValue As IntPtr, ownsHandle As Boolean)\n    parameters:\n    - id: invalidHandleValue\n      type: System.IntPtr\n      description: \"\\n<p>The value of an invalid handle (usually 0 or -1).  Your implementation of <xref href=\\\"System.Runtime.InteropServices.SafeHandle.IsInvalid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should return <strong>true</strong> for this value.</p>\\n\"\n    - id: ownsHandle\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to reliably let <xref href=\\\"System.Runtime.InteropServices.SafeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> release the handle during the finalization phase; otherwise, <strong>false</strong> (not recommended). </p>\\n\"\n  exceptions:\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>The derived class resides in an assembly without unmanaged code access permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SafeHandle.SafeHandle(IntPtr, Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.IsClosed\n  commentId: P:System.Runtime.InteropServices.SafeHandle.IsClosed\n  id: IsClosed\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: IsClosed\n  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsClosed\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n    startLine: 228\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Gets a value indicating whether the handle is closed.</p>\\n\"\n  syntax:\n    content: >-\n      public bool IsClosed\n\n      {\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          get;\n      }\n    content.vb: Public ReadOnly Property IsClosed As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the handle is closed; otherwise, <strong>false</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SafeHandle.IsClosed\n- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid\n  commentId: P:System.Runtime.InteropServices.SafeHandle.IsInvalid\n  id: IsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: IsInvalid\n  fullName: System.Runtime.InteropServices.SafeHandle.IsInvalid\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsInvalid\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n    startLine: 233\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>When overridden in a derived class, gets a value indicating whether the handle value is invalid.</p>\\n\"\n  syntax:\n    content: >-\n      public abstract bool IsInvalid\n\n      {\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          get;\n      }\n    content.vb: Public MustOverride ReadOnly Property IsInvalid As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the handle value is invalid; otherwise, <strong>false</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: SafeHandle.IsInvalid\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  id: DangerousAddRef(System.Boolean@)\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: DangerousAddRef(ref Boolean)\n  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(ref System.Boolean)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Manually increments the reference counter on <xref href=\\\"System.Runtime.InteropServices.SafeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public void DangerousAddRef(ref bool success)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Sub DangerousAddRef(ByRef success As Boolean)\n    parameters:\n    - id: success\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the reference counter was successfully incremented; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n    commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(ByRef System.Boolean)\n  name.vb: DangerousAddRef(ByRef Boolean)\n  nameWithType: SafeHandle.DangerousAddRef(ref Boolean)\n  nameWithType.vb: SafeHandle.DangerousAddRef(ByRef Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  id: DangerousGetHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: DangerousGetHandle()\n  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DangerousGetHandle\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n    startLine: 222\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Returns the value of the <xref href=\\\"System.Runtime.InteropServices.SafeHandle.handle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> field.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public IntPtr DangerousGetHandle()\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Function DangerousGetHandle As IntPtr\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>An <strong>IntPtr</strong> representing the value of the <xref href=\\\"System.Runtime.InteropServices.SafeHandle.handle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> field. If the handle has been marked invalid with <xref href=\\\"System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this method still returns the original handle value, which can be a stale value.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SafeHandle.DangerousGetHandle()\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  id: DangerousRelease\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: DangerousRelease()\n  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Manually decrements the reference counter on a <xref href=\\\"System.Runtime.InteropServices.SafeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public void DangerousRelease()\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Sub DangerousRelease\n  seealso:\n  - type: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n    commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SafeHandle.DangerousRelease()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose\n  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose\n  id: Dispose\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n    startLine: 244\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.Runtime.InteropServices.SafeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public void Dispose()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Sub Dispose\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  implements:\n  - System.IDisposable.Dispose\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SafeHandle.Dispose()\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n    startLine: 250\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Runtime.InteropServices.SafeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class specifying whether to perform a normal dispose operation.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      protected virtual void Dispose(bool disposing)\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> for a normal dispose operation; <strong>false</strong> to finalize the handle.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: SafeHandle.Dispose(Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  commentId: M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  id: ReleaseHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: ReleaseHandle()\n  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReleaseHandle\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n    startLine: 281\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>When overridden in a derived class, executes the code required to free the handle.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      protected abstract bool ReleaseHandle()\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Protected MustOverride Function ReleaseHandle As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the handle is released successfully; otherwise, in the event of a catastrophic failure,<strong> false</strong>. In this case, it generates a releaseHandleFailed MDA Managed Debugging Assistant.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: SafeHandle.ReleaseHandle()\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  id: SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: SetHandle(IntPtr)\n  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetHandle\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n    startLine: 203\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Sets the handle to the specified pre-existing handle.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      protected void SetHandle(IntPtr handle)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Protected Sub SetHandle(handle As IntPtr)\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: \"\\n<p>The pre-existing handle to use. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SafeHandle.SetHandle(IntPtr)\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  id: SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: SetHandleAsInvalid()\n  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Marks a handle as no longer used.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public void SetHandleAsInvalid()\n    content.vb: >-\n      <SecurityCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Sub SetHandleAsInvalid\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SafeHandle.SetHandleAsInvalid()\n- uid: System.Runtime.InteropServices.SafeHandle.Finalize\n  commentId: M:System.Runtime.InteropServices.SafeHandle.Finalize\n  id: Finalize\n  parent: System.Runtime.InteropServices.SafeHandle\n  langs:\n  - csharp\n  - vb\n  name: Finalize()\n  fullName: System.Runtime.InteropServices.SafeHandle.Finalize()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Finalize\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeHandle.cs\n    startLine: 193\n  assemblies:\n  - System.Runtime.Handles\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Frees all resources associated with the handle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      protected void Finalize()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Protected Sub Finalize\n  seealso:\n  - type: System.Runtime.InteropServices.SafeHandle.Dispose\n    commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SafeHandle.Finalize()\nreferences:\n- uid: System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  nameWithType: IntPtr\n  commentId: T:System.IntPtr\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.TypeLoadException\n  parent: System\n  isExternal: false\n  name: TypeLoadException\n  fullName: System.TypeLoadException\n  nameWithType: TypeLoadException\n  commentId: T:System.TypeLoadException\n"}