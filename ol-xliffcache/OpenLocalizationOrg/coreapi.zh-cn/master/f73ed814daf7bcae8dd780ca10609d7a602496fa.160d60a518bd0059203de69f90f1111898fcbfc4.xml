{"nodes":[{"pos":[695,704],"content":"Tuple<T1>","needQuote":true,"nodes":[{"content":"Tuple&lt;T1&gt;","pos":[0,9],"source":"Tuple<T1>"}]},{"content":"\\n&lt;p&gt;The type of the tuple's only component.&lt;/p&gt;\\n","pos":[1431,1481],"source":"\\n<p>The type of the tuple's only component.</p>\\n"},{"pos":[2647,2656],"content":"Tuple(T1)","needQuote":true,"nodes":[{"content":"Tuple(T1)","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The value of the tuple's only component.&lt;/p&gt;\\n","pos":[3283,3334],"source":"\\n<p>The value of the tuple's only component.</p>\\n"},{"pos":[3653,3658],"content":"Item1","needQuote":true,"nodes":[{"content":"Item1","pos":[0,5]}]},{"pos":[4810,4824],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.&lt;/p&gt;\\n","pos":[5561,5613],"source":"\\n<p>The object to compare with this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance is equal to the specified object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5674,5801],"source":"\\n<p>\\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[6237,6250],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[6906,6951],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[7630,7680],"content":"IStructuralComparable.CompareTo(Object, IComparer)","needQuote":true,"nodes":[{"content":"IStructuralComparable.CompareTo(Object, IComparer)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;An object to compare with the current instance.&lt;/p&gt;\\n","pos":[8804,8862],"source":"\\n<p>An object to compare with the current instance.</p>\\n"},{"content":"\\n&lt;p&gt;An object that provides custom rules for comparison.&lt;/p&gt;\\n","pos":[8944,9007],"source":"\\n<p>An object that provides custom rules for comparison.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative position of this instance and &lt;em&gt;other&lt;/em&gt; in the sort order, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value&lt;/p&gt;\\n&lt;p&gt;Description&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A negative integer&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance precedes &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance and &lt;em&gt;other&lt;/em&gt; have the same position in the sort order.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A positive integer&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance follows &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[9066,9620],"source":"\\n<p>A signed integer that indicates the relative position of this instance and <em>other</em> in the sort order, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>A negative integer</p>\\n</td><td>\\n<p>This instance precedes <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>This instance and <em>other</em> have the same position in the sort order.</p>\\n</td></tr><tr><td>\\n<p>A positive integer</p>\\n</td><td>\\n<p>This instance follows <em>other</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[11051,11105],"content":"IStructuralEquatable.Equals(Object, IEqualityComparer)","needQuote":true,"nodes":[{"content":"IStructuralEquatable.Equals(Object, IEqualityComparer)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.&lt;/p&gt;\\n","pos":[12131,12183],"source":"\\n<p>The object to compare with this instance.</p>\\n"},{"content":"\\n&lt;p&gt;An object that defines the method to use to evaluate whether the two objects are equal.&lt;/p&gt;\\n","pos":[12273,12371],"source":"\\n<p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance is equal to the specified object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12432,12559],"source":"\\n<p>\\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[13599,13650],"content":"IStructuralEquatable.GetHashCode(IEqualityComparer)","needQuote":true,"nodes":[{"content":"IStructuralEquatable.GetHashCode(IEqualityComparer)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[14981,15026],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[15788,15817],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An object to compare with the current instance.&lt;/p&gt;\\n","pos":[16746,16804],"source":"\\n<p>An object to compare with the current instance.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative position of this instance and &lt;em&gt;obj&lt;/em&gt; in the sort order, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value&lt;/p&gt;\\n&lt;p&gt;Description&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A negative integer&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance precedes &lt;em&gt;obj&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance and &lt;em&gt;obj&lt;/em&gt; have the same position in the sort order.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A positive integer&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance follows &lt;em&gt;obj&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[16863,17409],"source":"\\n<p>A signed integer that indicates the relative position of this instance and <em>obj</em> in the sort order, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>A negative integer</p>\\n</td><td>\\n<p>This instance precedes <em>obj</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>This instance and <em>obj</em> have the same position in the sort order.</p>\\n</td></tr><tr><td>\\n<p>A positive integer</p>\\n</td><td>\\n<p>This instance follows <em>obj</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[18210,18220],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[19313,19319],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[19450,19456],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19640,19661],"content":"IStructuralComparable","needQuote":true,"nodes":[{"content":"IStructuralComparable","pos":[0,21]}]},{"pos":[19913,19933],"content":"IStructuralEquatable","needQuote":true,"nodes":[{"content":"IStructuralEquatable","pos":[0,20]}]},{"pos":[20149,20160],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[20362,20384],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[20532,20538],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20605,20606],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20656,20662],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20723,20724]},{"pos":[20779,20785],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20845,20846],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20943,20949],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21016,21017],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21067,21073],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21134,21135]},{"pos":[21190,21196],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21256,21257],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21502,21533],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21699,21714],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21790,21791],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21841,21847],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21908,21909]},{"pos":[21964,21970],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22030,22031],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22137,22152],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22228,22229],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22279,22285],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22346,22347]},{"pos":[22402,22408],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22468,22469],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22695,22704],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[22797,22804],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22872,22873],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22900,22901],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22970,22977],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23045,23046],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23073,23074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23249,23266],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[23375,23390],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23466,23467],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23494,23495],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23572,23587],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23663,23664],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23691,23692],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23849,23867],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[24007,24009],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"pos":[24102,24104],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"pos":[24233,24247],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24366,24372],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24439,24440],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24490,24496],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24556,24557],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24640,24646],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24713,24714],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24764,24770],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24830,24831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25004,25011],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25177,25190],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25291,25302],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25374,25375],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25402,25403],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25476,25487],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25559,25560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25587,25588],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25748,25753],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26009,26037],"content":"CompareTo(Object, IComparer)","needQuote":true,"nodes":[{"content":"CompareTo(Object, IComparer)","pos":[0,28]}]},{"pos":[26275,26284],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[26360,26361],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26411,26417],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26478,26479]},{"pos":[26549,26558],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[26612,26613],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26755,26764],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[26840,26841],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26891,26897],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26958,26959]},{"pos":[27029,27038],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[27092,27093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27380,27389],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[27684,27717],"content":"Equals(Object, IEqualityComparer)","needQuote":true,"nodes":[{"content":"Equals(Object, IEqualityComparer)","pos":[0,33]}]},{"pos":[27963,27969],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28041,28042],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28092,28098],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28159,28160]},{"pos":[28238,28255],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[28317,28318],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28464,28470],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28542,28543],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28593,28599],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28660,28661]},{"pos":[28739,28756],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[28818,28819],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29122,29139],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[29450,29480],"content":"GetHashCode(IEqualityComparer)","needQuote":true,"nodes":[{"content":"GetHashCode(IEqualityComparer)","pos":[0,30]}]},{"pos":[29707,29718],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29795,29796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29869,29886],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[29948,29949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30086,30097],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30174,30175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30248,30265],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[30327,30328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30625,30642],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[30777,30786],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[30840,30841],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30891,30897],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30957,30958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31049,31058],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[31112,31113],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31163,31169],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31229,31230],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31433,31443],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[31538,31546],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[31615,31616],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31643,31644],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31714,31722],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[31791,31792],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31819,31820],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31975,31981],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[32137,32154],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Tuple`1\n  commentId: T:System.Tuple`1\n  id: Tuple`1\n  parent: System\n  children:\n  - System.Tuple`1.#ctor(`0)\n  - System.Tuple`1.Equals(System.Object)\n  - System.Tuple`1.GetHashCode\n  - System.Tuple`1.Item1\n  - System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  - System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  - System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  - System.Tuple`1.System#IComparable#CompareTo(System.Object)\n  - System.Tuple`1.ToString\n  langs:\n  - csharp\n  - vb\n  name: Tuple<T1>\n  fullName: System.Tuple<T1>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Tuple\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 84\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a 1-tuple, or singleton. </p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      public class Tuple<T1> : IStructuralEquatable, IStructuralComparable, IComparable, ITuple\n    content.vb: >-\n      <Serializable>\n\n      Public Class Tuple(Of T1)\n          Implements IStructuralEquatable, IStructuralComparable, IComparable, ITuple\n    typeParameters:\n    - id: T1\n      description: \"\\n<p>The type of the tuple's only component.</p>\\n\"\n  seealso:\n  - type: System.Tuple\n    commentId: T:System.Tuple\n  - type: System.Tuple`2\n    commentId: T:System.Tuple`2\n  - type: System.Tuple`3\n    commentId: T:System.Tuple`3\n  - type: System.Tuple`4\n    commentId: T:System.Tuple`4\n  - type: System.Tuple`5\n    commentId: T:System.Tuple`5\n  - type: System.Tuple`6\n    commentId: T:System.Tuple`6\n  - type: System.Tuple`7\n    commentId: T:System.Tuple`7\n  - type: System.Tuple`8\n    commentId: T:System.Tuple`8\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IStructuralComparable\n  - System.Collections.IStructuralEquatable\n  - System.IComparable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  fullName.vb: System.Tuple(Of T1)\n  name.vb: Tuple(Of T1)\n  nameWithType: Tuple<T1>\n  nameWithType.vb: Tuple(Of T1)\n- uid: System.Tuple`1.#ctor(`0)\n  commentId: M:System.Tuple`1.#ctor(`0)\n  id: '#ctor(`0)'\n  parent: System.Tuple`1\n  langs:\n  - csharp\n  - vb\n  name: Tuple(T1)\n  fullName: System.Tuple<T1>.Tuple(T1)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 91\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public Tuple(T1 item1)\n    content.vb: Public Sub New(item1 As T1)\n    parameters:\n    - id: item1\n      type: '{T1}'\n      description: \"\\n<p>The value of the tuple's only component.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Tuple(Of T1).Tuple(T1)\n  nameWithType: Tuple<T1>.Tuple(T1)\n  nameWithType.vb: Tuple(Of T1).Tuple(T1)\n- uid: System.Tuple`1.Item1\n  commentId: P:System.Tuple`1.Item1\n  id: Item1\n  parent: System.Tuple`1\n  langs:\n  - csharp\n  - vb\n  name: Item1\n  fullName: System.Tuple<T1>.Item1\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Item1\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 89\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the value of the <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's single component. </p>\\n\"\n  syntax:\n    content: public T1 Item1 { get; }\n    content.vb: Public ReadOnly Property Item1 As T1\n    parameters: []\n    return:\n      type: '{T1}'\n      description: \"\\n<p>The value of the current <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's single component.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Tuple(Of T1).Item1\n  nameWithType: Tuple<T1>.Item1\n  nameWithType.vb: Tuple(Of T1).Item1\n- uid: System.Tuple`1.Equals(System.Object)\n  commentId: M:System.Tuple`1.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Tuple`1\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Tuple<T1>.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 95\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether the current <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Tuple(Of T1).Equals(System.Object)\n  nameWithType: Tuple<T1>.Equals(Object)\n  nameWithType.vb: Tuple(Of T1).Equals(Object)\n- uid: System.Tuple`1.GetHashCode\n  commentId: M:System.Tuple`1.GetHashCode\n  id: GetHashCode\n  parent: System.Tuple`1\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Tuple<T1>.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 127\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for the current <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Tuple(Of T1).GetHashCode()\n  nameWithType: Tuple<T1>.GetHashCode()\n  nameWithType.vb: Tuple(Of T1).GetHashCode()\n- uid: System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  commentId: M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  isEii: true\n  parent: System.Tuple`1\n  langs:\n  - csharp\n  - vb\n  name: IStructuralComparable.CompareTo(Object, IComparer)\n  fullName: System.Tuple<T1>.System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IStructuralComparable.CompareTo\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 115\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares the current <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\\n\"\n  syntax:\n    content: int IStructuralComparable.CompareTo(object other, IComparer comparer)\n    content.vb: Function System.Collections.IStructuralComparable.CompareTo(other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo\n    parameters:\n    - id: other\n      type: System.Object\n      description: \"\\n<p>An object to compare with the current instance.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>An object that provides custom rules for comparison.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative position of this instance and <em>other</em> in the sort order, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>A negative integer</p>\\n</td><td>\\n<p>This instance precedes <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>This instance and <em>other</em> have the same position in the sort order.</p>\\n</td></tr><tr><td>\\n<p>A positive integer</p>\\n</td><td>\\n<p>This instance follows <em>other</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>other</em> is not a <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n    commentId: M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  implements:\n  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n  fullName.vb: System.Tuple(Of T1).System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)\n  name.vb: System.Collections.IStructuralComparable.CompareTo(Object, IComparer)\n  nameWithType: Tuple<T1>.IStructuralComparable.CompareTo(Object, IComparer)\n  nameWithType.vb: Tuple(Of T1).System.Collections.IStructuralComparable.CompareTo(Object, IComparer)\n- uid: System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  commentId: M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  isEii: true\n  parent: System.Tuple`1\n  langs:\n  - csharp\n  - vb\n  name: IStructuralEquatable.Equals(Object, IEqualityComparer)\n  fullName: System.Tuple<T1>.System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IStructuralEquatable.Equals\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 99\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether the current <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to a specified object based on a specified comparison method.</p>\\n\"\n  syntax:\n    content: bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)\n    content.vb: Function System.Collections.IStructuralEquatable.Equals(other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals\n    parameters:\n    - id: other\n      type: System.Object\n      description: \"\\n<p>The object to compare with this instance.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  implements:\n  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n  fullName.vb: System.Tuple(Of T1).System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)\n  name.vb: System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)\n  nameWithType: Tuple<T1>.IStructuralEquatable.Equals(Object, IEqualityComparer)\n  nameWithType.vb: Tuple(Of T1).System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)\n- uid: System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  commentId: M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  isEii: true\n  parent: System.Tuple`1\n  langs:\n  - csharp\n  - vb\n  name: IStructuralEquatable.GetHashCode(IEqualityComparer)\n  fullName: System.Tuple<T1>.System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IStructuralEquatable.GetHashCode\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 131\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Calculates the hash code for the current <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object by using a specified computation method.</p>\\n\"\n  syntax:\n    content: int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)\n    content.vb: Function System.Collections.IStructuralEquatable.GetHashCode(comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode\n    parameters:\n    - id: comparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>An object whose <xref href=\\\"System.Collections.IEqualityComparer.GetHashCode(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  method calculates the hash code of the current <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  implements:\n  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  fullName.vb: System.Tuple(Of T1).System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  name.vb: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)\n  nameWithType: Tuple<T1>.IStructuralEquatable.GetHashCode(IEqualityComparer)\n  nameWithType.vb: Tuple(Of T1).System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)\n- uid: System.Tuple`1.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.Tuple`1.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.Tuple`1\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.Tuple<T1>.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IComparable.CompareTo\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 111\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares the current <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a specified object, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\\n\"\n  syntax:\n    content: int IComparable.CompareTo(object obj)\n    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with the current instance.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative position of this instance and <em>obj</em> in the sort order, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>A negative integer</p>\\n</td><td>\\n<p>This instance precedes <em>obj</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>This instance and <em>obj</em> have the same position in the sort order.</p>\\n</td></tr><tr><td>\\n<p>A positive integer</p>\\n</td><td>\\n<p>This instance follows <em>obj</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>obj</em> is not a <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Tuple`1.Equals(System.Object)\n    commentId: M:System.Tuple`1.Equals(System.Object)\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  fullName.vb: System.Tuple(Of T1).System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: Tuple<T1>.IComparable.CompareTo(Object)\n  nameWithType.vb: Tuple(Of T1).System.IComparable.CompareTo(Object)\n- uid: System.Tuple`1.ToString\n  commentId: M:System.Tuple`1.ToString\n  id: ToString\n  parent: System.Tuple`1\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Tuple<T1>.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 138\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a string that represents the value of this <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of this <xref href=\\\"System.Tuple`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Tuple(Of T1).ToString()\n  nameWithType: Tuple<T1>.ToString()\n  nameWithType.vb: Tuple(Of T1).ToString()\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IStructuralComparable\n  parent: System.Collections\n  isExternal: false\n  name: IStructuralComparable\n  fullName: System.Collections.IStructuralComparable\n  nameWithType: IStructuralComparable\n  commentId: T:System.Collections.IStructuralComparable\n- uid: System.Collections.IStructuralEquatable\n  parent: System.Collections\n  isExternal: false\n  name: IStructuralEquatable\n  fullName: System.Collections.IStructuralEquatable\n  nameWithType: IStructuralEquatable\n  commentId: T:System.Collections.IStructuralEquatable\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: '{T1}'\n  definition: T1\n  name: T1\n  fullName: T1\n  nameWithType: T1\n  commentId: '!:T1'\n- uid: T1\n  isExternal: false\n  name: T1\n  fullName: T1\n  nameWithType: T1\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n  parent: System.Collections.IStructuralComparable\n  isExternal: true\n  name: CompareTo(Object, IComparer)\n  fullName: System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)\n  spec.csharp:\n  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n    name: CompareTo\n    fullName: System.Collections.IStructuralComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IComparer\n    name: IComparer\n    fullName: System.Collections.IComparer\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n    name: CompareTo\n    fullName: System.Collections.IStructuralComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IComparer\n    name: IComparer\n    fullName: System.Collections.IComparer\n  - name: )\n    fullName: )\n  nameWithType: IStructuralComparable.CompareTo(Object, IComparer)\n  commentId: M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  nameWithType: IComparer\n  commentId: T:System.Collections.IComparer\n- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n  parent: System.Collections.IStructuralEquatable\n  isExternal: true\n  name: Equals(Object, IEqualityComparer)\n  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)\n  spec.csharp:\n  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n    name: Equals\n    fullName: System.Collections.IStructuralEquatable.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n    name: Equals\n    fullName: System.Collections.IStructuralEquatable.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  nameWithType: IStructuralEquatable.Equals(Object, IEqualityComparer)\n  commentId: M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n  nameWithType: IEqualityComparer\n  commentId: T:System.Collections.IEqualityComparer\n- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  parent: System.Collections.IStructuralEquatable\n  isExternal: false\n  name: GetHashCode(IEqualityComparer)\n  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  spec.csharp:\n  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n    name: GetHashCode\n    fullName: System.Collections.IStructuralEquatable.GetHashCode\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n    name: GetHashCode\n    fullName: System.Collections.IStructuralEquatable.GetHashCode\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  nameWithType: IStructuralEquatable.GetHashCode(IEqualityComparer)\n  commentId: M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}