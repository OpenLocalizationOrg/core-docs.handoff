{"nodes":[{"pos":[4804,4818],"content":"ObjectSecurity","needQuote":true,"nodes":[{"content":"ObjectSecurity","pos":[0,14]}]},{"pos":[6506,6522],"content":"ObjectSecurity()","needQuote":true,"nodes":[{"content":"ObjectSecurity()","pos":[0,16]}]},{"pos":[7684,7716],"content":"ObjectSecurity(Boolean, Boolean)","needQuote":true,"nodes":[{"content":"ObjectSecurity(Boolean, Boolean)","pos":[0,32]}]},{"pos":[9559,9599],"content":"ObjectSecurity(CommonSecurityDescriptor)","needQuote":true,"nodes":[{"content":"ObjectSecurity(CommonSecurityDescriptor)","pos":[0,40]}]},{"pos":[11259,11274],"content":"AccessRightType","needQuote":true,"nodes":[{"content":"AccessRightType","pos":[0,15]}]},{"pos":[12843,12862],"content":"AccessRulesModified","needQuote":true,"nodes":[{"content":"AccessRulesModified","pos":[0,19]}]},{"pos":[14441,14455],"content":"AccessRuleType","needQuote":true,"nodes":[{"content":"AccessRuleType","pos":[0,14]}]},{"pos":[16287,16310],"content":"AreAccessRulesCanonical","needQuote":true,"nodes":[{"content":"AreAccessRulesCanonical","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the access rules are in canonical order; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17271,17384],"source":"\\n<p>\\n<strong>true</strong> if the access rules are in canonical order; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[17800,17823],"content":"AreAccessRulesProtected","needQuote":true,"nodes":[{"content":"AreAccessRulesProtected","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the DACL is protected; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18802,18897],"source":"\\n<p>\\n<strong>true</strong> if the DACL is protected; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[19310,19332],"content":"AreAuditRulesCanonical","needQuote":true,"nodes":[{"content":"AreAuditRulesCanonical","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the audit rules are in canonical order; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20288,20400],"source":"\\n<p>\\n<strong>true</strong> if the audit rules are in canonical order; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[20812,20834],"content":"AreAuditRulesProtected","needQuote":true,"nodes":[{"content":"AreAuditRulesProtected","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the SACL is protected; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21802,21897],"source":"\\n<p>\\n<strong>true</strong> if the SACL is protected; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[22297,22315],"content":"AuditRulesModified","needQuote":true,"nodes":[{"content":"AuditRulesModified","pos":[0,18]}]},{"pos":[23884,23897],"content":"AuditRuleType","needQuote":true,"nodes":[{"content":"AuditRuleType","pos":[0,13]}]},{"pos":[25685,25698],"content":"GroupModified","needQuote":true,"nodes":[{"content":"GroupModified","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the group associated with the securable object has been modified; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26522,26660],"source":"\\n<p>\\n<strong>true</strong> if the group associated with the securable object has been modified; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[27031,27042],"content":"IsContainer","needQuote":true,"nodes":[{"content":"IsContainer","pos":[0,11]}]},{"pos":[28491,28495],"content":"IsDS","needQuote":true,"nodes":[{"content":"IsDS","pos":[0,4]}]},{"pos":[29936,29949],"content":"OwnerModified","needQuote":true,"nodes":[{"content":"OwnerModified","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the owner of the securable object has been modified; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30759,30884],"source":"\\n<p>\\n<strong>true</strong> if the owner of the securable object has been modified; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[31918,32025],"content":"AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)","needQuote":true,"nodes":[{"content":"AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)","pos":[0,107]}]},{"content":"\\n&lt;p&gt;The access mask of this rule.","pos":[33815,33849],"source":"\\n<p>The access mask of this rule."},{"content":"The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.&lt;/p&gt;\\n","pos":[33850,33976],"source":" The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\\n"},{"content":"\\n&lt;p&gt;true if this rule is inherited from a parent container.&lt;/p&gt;\\n","pos":[34047,34113],"source":"\\n<p>true if this rule is inherited from a parent container.</p>\\n"},{"content":"\\n&lt;p&gt;Specifies the inheritance properties of the access rule.&lt;/p&gt;\\n","pos":[34221,34288],"source":"\\n<p>Specifies the inheritance properties of the access rule.</p>\\n"},{"content":"\\n&lt;p&gt;Specifies the valid access control type.&lt;/p&gt;\\n","pos":[34760,34811],"source":"\\n<p>Specifies the valid access control type.</p>\\n"},{"pos":[36158,36257],"content":"AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)","needQuote":true,"nodes":[{"content":"AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)","pos":[0,99]}]},{"content":"\\n&lt;p&gt;The access mask of this rule.","pos":[38020,38054],"source":"\\n<p>The access mask of this rule."},{"content":"The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.&lt;/p&gt;\\n","pos":[38055,38181],"source":" The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this rule is inherited from a parent container.&lt;/p&gt;\\n","pos":[38252,38337],"source":"\\n<p>\\n<strong>true</strong> if this rule is inherited from a parent container.</p>\\n"},{"content":"\\n&lt;p&gt;Specifies the inheritance properties of the audit rule.&lt;/p&gt;\\n","pos":[38445,38511],"source":"\\n<p>Specifies the inheritance properties of the audit rule.</p>\\n"},{"content":"\\n&lt;p&gt;Specifies the conditions for which the rule is audited.&lt;/p&gt;\\n","pos":[38976,39042],"source":"\\n<p>Specifies the conditions for which the rule is audited.</p>\\n"},{"pos":[39770,39784],"content":"GetGroup(Type)","needQuote":true,"nodes":[{"content":"GetGroup(Type)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The owner for which to get the primary group.","pos":[40583,40633],"source":"\\n<p>The owner for which to get the primary group."},{"content":"&lt;/p&gt;\\n","pos":[40634,40640],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The primary group associated with the specified owner.&lt;/p&gt;\\n","pos":[40730,40795],"source":"\\n<p>The primary group associated with the specified owner.</p>\\n"},{"pos":[41175,41189],"content":"GetOwner(Type)","needQuote":true,"nodes":[{"content":"GetOwner(Type)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The primary group for which to get the owner.&lt;/p&gt;\\n","pos":[41988,42044],"source":"\\n<p>The primary group for which to get the owner.</p>\\n"},{"content":"\\n&lt;p&gt;The owner associated with the specified group.&lt;/p&gt;\\n","pos":[42134,42191],"source":"\\n<p>The owner associated with the specified group.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;targetType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[42310,42362],"source":"\\n<p>\\n<em>targetType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[42363,42369],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Some or all identity references could not be translated.","pos":[42772,42833],"source":"\\n<p>Some or all identity references could not be translated."},{"content":"&lt;/p&gt;\\n","pos":[42834,42840],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Win32 error code was returned.","pos":[42933,42970],"source":"\\n<p>A Win32 error code was returned."},{"content":"&lt;/p&gt;\\n","pos":[42971,42977],"source":" </p>\\n"},{"pos":[43387,43420],"content":"GetSecurityDescriptorBinaryForm()","needQuote":true,"nodes":[{"content":"GetSecurityDescriptorBinaryForm()","pos":[0,33]}]},{"pos":[45343,45395],"content":"GetSecurityDescriptorSddlForm(AccessControlSections)","needQuote":true,"nodes":[{"content":"GetSecurityDescriptorSddlForm(AccessControlSections)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;Specifies which sections (access rules, audit rules, primary group, owner) of the security descriptor to get.&lt;/p&gt;\\n","pos":[46586,46706],"source":"\\n<p>Specifies which sections (access rules, audit rules, primary group, owner) of the security descriptor to get.</p>\\n"},{"pos":[47417,47444],"content":"IsSddlConversionSupported()","needQuote":true,"nodes":[{"content":"IsSddlConversionSupported()","pos":[0,27]}]},{"pos":[49497,49561],"content":"ModifyAccess(AccessControlModification, AccessRule, out Boolean)","needQuote":true,"nodes":[{"content":"ModifyAccess(AccessControlModification, AccessRule, out Boolean)","pos":[0,64]}]},{"content":"\\n&lt;p&gt;The modification to apply to the DACL.&lt;/p&gt;\\n","pos":[50819,50868],"source":"\\n<p>The modification to apply to the DACL.</p>\\n"},{"content":"\\n&lt;p&gt;The access rule to modify.&lt;/p&gt;\\n","pos":[50958,50995],"source":"\\n<p>The access rule to modify.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the DACL is successfully modified; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51063,51170],"source":"\\n<p>\\n<strong>true</strong> if the DACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the DACL is successfully modified; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51231,51338],"source":"\\n<p>\\n<strong>true</strong> if the DACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[52504,52572],"content":"ModifyAccessRule(AccessControlModification, AccessRule, out Boolean)","needQuote":true,"nodes":[{"content":"ModifyAccessRule(AccessControlModification, AccessRule, out Boolean)","pos":[0,68]}]},{"content":"\\n&lt;p&gt;The modification to apply to the DACL.&lt;/p&gt;\\n","pos":[53838,53887],"source":"\\n<p>The modification to apply to the DACL.</p>\\n"},{"content":"\\n&lt;p&gt;The access rule to modify.&lt;/p&gt;\\n","pos":[53977,54014],"source":"\\n<p>The access rule to modify.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the DACL is successfully modified; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54082,54189],"source":"\\n<p>\\n<strong>true</strong> if the DACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the DACL is successfully modified; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54250,54357],"source":"\\n<p>\\n<strong>true</strong> if the DACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[55513,55575],"content":"ModifyAudit(AccessControlModification, AuditRule, out Boolean)","needQuote":true,"nodes":[{"content":"ModifyAudit(AccessControlModification, AuditRule, out Boolean)","pos":[0,62]}]},{"content":"\\n&lt;p&gt;The modification to apply to the SACL.&lt;/p&gt;\\n","pos":[56819,56868],"source":"\\n<p>The modification to apply to the SACL.</p>\\n"},{"content":"\\n&lt;p&gt;The audit rule to modify.&lt;/p&gt;\\n","pos":[56957,56993],"source":"\\n<p>The audit rule to modify.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the SACL is successfully modified; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57061,57168],"source":"\\n<p>\\n<strong>true</strong> if the SACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the SACL is successfully modified; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57229,57336],"source":"\\n<p>\\n<strong>true</strong> if the SACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[58488,58554],"content":"ModifyAuditRule(AccessControlModification, AuditRule, out Boolean)","needQuote":true,"nodes":[{"content":"ModifyAuditRule(AccessControlModification, AuditRule, out Boolean)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;The modification to apply to the SACL.&lt;/p&gt;\\n","pos":[59806,59855],"source":"\\n<p>The modification to apply to the SACL.</p>\\n"},{"content":"\\n&lt;p&gt;The audit rule to modify.&lt;/p&gt;\\n","pos":[59944,59980],"source":"\\n<p>The audit rule to modify.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the SACL is successfully modified; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60048,60155],"source":"\\n<p>\\n<strong>true</strong> if the SACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the SACL is successfully modified; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60216,60323],"source":"\\n<p>\\n<strong>true</strong> if the SACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[61366,61413],"content":"Persist(Boolean, String, AccessControlSections)","needQuote":true,"nodes":[{"content":"Persist(Boolean, String, AccessControlSections)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to enable the privilege that allows the caller to take ownership of the object.&lt;/p&gt;\\n","pos":[62742,62856],"source":"\\n<p>\\n<strong>true</strong> to enable the privilege that allows the caller to take ownership of the object.</p>\\n"},{"content":"\\n&lt;p&gt;The name used to retrieve the persisted information.&lt;/p&gt;\\n","pos":[62919,62982],"source":"\\n<p>The name used to retrieve the persisted information.</p>\\n"},{"pos":[64074,64116],"content":"Persist(SafeHandle, AccessControlSections)","needQuote":true,"nodes":[{"content":"Persist(SafeHandle, AccessControlSections)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The handle used to retrieve the persisted information.&lt;/p&gt;\\n","pos":[65410,65475],"source":"\\n<p>The handle used to retrieve the persisted information.</p>\\n"},{"pos":[66478,66516],"content":"Persist(String, AccessControlSections)","needQuote":true,"nodes":[{"content":"Persist(String, AccessControlSections)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The name used to retrieve the persisted information.&lt;/p&gt;\\n","pos":[67740,67803],"source":"\\n<p>The name used to retrieve the persisted information.</p>\\n"},{"pos":[68763,68798],"content":"PurgeAccessRules(IdentityReference)","needQuote":true,"nodes":[{"content":"PurgeAccessRules(IdentityReference)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;All access rules are not in canonical order.&lt;/p&gt;\\n","pos":[70077,70132],"source":"\\n<p>All access rules are not in canonical order.</p>\\n"},{"pos":[70678,70712],"content":"PurgeAuditRules(IdentityReference)","needQuote":true,"nodes":[{"content":"PurgeAuditRules(IdentityReference)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;All audit rules are not in canonical order.&lt;/p&gt;\\n","pos":[71985,72039],"source":"\\n<p>All audit rules are not in canonical order.</p>\\n"},{"pos":[72428,72438],"content":"ReadLock()","needQuote":true,"nodes":[{"content":"ReadLock()","pos":[0,10]}]},{"pos":[73504,73516],"content":"ReadUnlock()","needQuote":true,"nodes":[{"content":"ReadUnlock()","pos":[0,12]}]},{"pos":[74726,74767],"content":"SetAccessRuleProtection(Boolean, Boolean)","needQuote":true,"nodes":[{"content":"SetAccessRuleProtection(Boolean, Boolean)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to preserve inherited access rules; &lt;strong&gt;false&lt;/strong&gt; to remove inherited access rules.","pos":[76212,76333],"source":"\\n<p>\\n<strong>true</strong> to preserve inherited access rules; <strong>false</strong> to remove inherited access rules."},{"content":"This parameter is ignored if &lt;em&gt;isProtected&lt;/em&gt; is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[76334,76416],"source":" This parameter is ignored if <em>isProtected</em> is <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;This method attempts to remove inherited rules from a non-canonical Discretionary Access Control List (DACL).&lt;/p&gt;\\n","pos":[76543,76663],"source":"\\n<p>This method attempts to remove inherited rules from a non-canonical Discretionary Access Control List (DACL).</p>\\n"},{"pos":[77166,77206],"content":"SetAuditRuleProtection(Boolean, Boolean)","needQuote":true,"nodes":[{"content":"SetAuditRuleProtection(Boolean, Boolean)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to preserve inherited audit rules; &lt;strong&gt;false&lt;/strong&gt; to remove inherited audit rules.","pos":[78644,78763],"source":"\\n<p>\\n<strong>true</strong> to preserve inherited audit rules; <strong>false</strong> to remove inherited audit rules."},{"content":"This parameter is ignored if &lt;em&gt;isProtected&lt;/em&gt; is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[78764,78846],"source":" This parameter is ignored if <em>isProtected</em> is <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;This method attempts to remove inherited rules from a non-canonical System Access Control List (SACL).&lt;/p&gt;\\n","pos":[78973,79086],"source":"\\n<p>This method attempts to remove inherited rules from a non-canonical System Access Control List (SACL).</p>\\n"},{"pos":[79588,79615],"content":"SetGroup(IdentityReference)","needQuote":true,"nodes":[{"content":"SetGroup(IdentityReference)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The primary group to set.&lt;/p&gt;\\n","pos":[80584,80620],"source":"\\n<p>The primary group to set.</p>\\n"},{"pos":[81109,81136],"content":"SetOwner(IdentityReference)","needQuote":true,"nodes":[{"content":"SetOwner(IdentityReference)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The owner to set.&lt;/p&gt;\\n","pos":[82097,82125],"source":"\\n<p>The owner to set.</p>\\n"},{"pos":[82593,82632],"content":"SetSecurityDescriptorBinaryForm(Byte[])","needQuote":true,"nodes":[{"content":"SetSecurityDescriptorBinaryForm(Byte[])","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The array of bytes from which to set the security descriptor.&lt;/p&gt;\\n","pos":[83623,83695],"source":"\\n<p>The array of bytes from which to set the security descriptor.</p>\\n"},{"pos":[84563,84625],"content":"SetSecurityDescriptorBinaryForm(Byte[], AccessControlSections)","needQuote":true,"nodes":[{"content":"SetSecurityDescriptorBinaryForm(Byte[], AccessControlSections)","pos":[0,62]}]},{"content":"\\n&lt;p&gt;The array of bytes from which to set the security descriptor.&lt;/p&gt;\\n","pos":[85776,85848],"source":"\\n<p>The array of bytes from which to set the security descriptor.</p>\\n"},{"content":"\\n&lt;p&gt;The sections (access rules, audit rules, owner, primary group) of the security descriptor to set.&lt;/p&gt;\\n","pos":[85960,86068],"source":"\\n<p>The sections (access rules, audit rules, owner, primary group) of the security descriptor to set.</p>\\n"},{"pos":[86896,86933],"content":"SetSecurityDescriptorSddlForm(String)","needQuote":true,"nodes":[{"content":"SetSecurityDescriptorSddlForm(String)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The SDDL string from which to set the security descriptor.&lt;/p&gt;\\n","pos":[87943,88012],"source":"\\n<p>The SDDL string from which to set the security descriptor.</p>\\n"},{"pos":[88640,88700],"content":"SetSecurityDescriptorSddlForm(String, AccessControlSections)","needQuote":true,"nodes":[{"content":"SetSecurityDescriptorSddlForm(String, AccessControlSections)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;The SDDL string from which to set the security descriptor.&lt;/p&gt;\\n","pos":[89870,89939],"source":"\\n<p>The SDDL string from which to set the security descriptor.</p>\\n"},{"content":"\\n&lt;p&gt;The sections (access rules, audit rules, owner, primary group) of the security descriptor to set.&lt;/p&gt;\\n","pos":[90051,90159],"source":"\\n<p>The sections (access rules, audit rules, owner, primary group) of the security descriptor to set.</p>\\n"},{"pos":[90549,90560],"content":"WriteLock()","needQuote":true,"nodes":[{"content":"WriteLock()","pos":[0,11]}]},{"pos":[91635,91648],"content":"WriteUnlock()","needQuote":true,"nodes":[{"content":"WriteUnlock()","pos":[0,13]}]},{"pos":[92568,92597],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[92797,92803],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[92963,92973],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[93068,93076],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[93145,93146],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93173,93174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93244,93252],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[93321,93322],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93349,93350],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93533,93547],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[93666,93672],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[93739,93740],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93790,93796],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[93856,93857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93940,93946],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[94013,94014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94064,94070],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[94130,94131],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94345,94367],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[94515,94521],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[94588,94589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94639,94645],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[94706,94707]},{"pos":[94762,94768],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[94828,94829],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94926,94932],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[94999,95000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95050,95056],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[95117,95118]},{"pos":[95173,95179],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[95239,95240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95485,95516],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[95682,95697],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[95773,95774],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95824,95830],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[95891,95892]},{"pos":[95947,95953],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[96013,96014],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96120,96135],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[96211,96212],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96262,96268],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[96329,96330]},{"pos":[96385,96391],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[96451,96452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96682,96695],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[96796,96807],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[96879,96880],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96907,96908],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96981,96992],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[97064,97065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97092,97093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97268,97277],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[97370,97377],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[97445,97446],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97473,97474],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97543,97550],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[97618,97619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97646,97647],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97822,97839],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[97948,97963],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[98039,98040],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98067,98068],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98145,98160],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[98236,98237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98264,98265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98410,98416],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[98548,98555],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[98767,98791],"content":"CommonSecurityDescriptor","needQuote":true,"nodes":[{"content":"CommonSecurityDescriptor","pos":[0,24]}]},{"pos":[99034,99038],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[99226,99243],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[99458,99463],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[99661,99677],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[99954,99970],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[100248,100265],"content":"AccessControlType","needQuote":true,"nodes":[{"content":"AccessControlType","pos":[0,17]}]},{"pos":[100539,100549],"content":"AccessRule","needQuote":true,"nodes":[{"content":"AccessRule","pos":[0,10]}]},{"pos":[100747,100772],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[101010,101020],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[101272,101281],"content":"AuditRule","needQuote":true,"nodes":[{"content":"AuditRule","pos":[0,9]}]},{"pos":[101444,101450],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[101570,101574],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[101633,101635]},{"pos":[101698,101702],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[101760,101762],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[101956,101977],"content":"AccessControlSections","needQuote":true,"nodes":[{"content":"AccessControlSections","pos":[0,21]}]},{"pos":[102213,102219],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[102429,102454],"content":"AccessControlModification","needQuote":true,"nodes":[{"content":"AccessControlModification","pos":[0,25]}]},{"pos":[102754,102764],"content":"SafeHandle","needQuote":true,"nodes":[{"content":"SafeHandle","pos":[0,10]}]},{"pos":[102969,102999],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[103200,103221],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[103422,103439],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[103639,103665],"content":"IdentityNotMappedException","needQuote":true,"nodes":[{"content":"IdentityNotMappedException","pos":[0,26]}]},{"pos":[103916,103931],"content":"SystemException","needQuote":true,"nodes":[{"content":"SystemException","pos":[0,15]}]},{"pos":[104122,104147],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Security.AccessControl.ObjectSecurity\n  commentId: T:System.Security.AccessControl.ObjectSecurity\n  id: ObjectSecurity\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.ObjectSecurity.#ctor\n  - System.Security.AccessControl.ObjectSecurity.#ctor(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.#ctor(System.Security.AccessControl.CommonSecurityDescriptor)\n  - System.Security.AccessControl.ObjectSecurity.AccessRightType\n  - System.Security.AccessControl.ObjectSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified\n  - System.Security.AccessControl.ObjectSecurity.AccessRuleType\n  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical\n  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected\n  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical\n  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected\n  - System.Security.AccessControl.ObjectSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified\n  - System.Security.AccessControl.ObjectSecurity.AuditRuleType\n  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)\n  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)\n  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm\n  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.GroupModified\n  - System.Security.AccessControl.ObjectSecurity.IsContainer\n  - System.Security.AccessControl.ObjectSecurity.IsDS\n  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported\n  - System.Security.AccessControl.ObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.OwnerModified\n  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.ReadLock\n  - System.Security.AccessControl.ObjectSecurity.ReadUnlock\n  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.WriteLock\n  - System.Security.AccessControl.ObjectSecurity.WriteUnlock\n  langs:\n  - csharp\n  - vb\n  name: ObjectSecurity\n  fullName: System.Security.AccessControl.ObjectSecurity\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ObjectSecurity\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 368\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Provides the ability to control access to objects without direct manipulation of Access Control Lists (ACLs). This class is the abstract base class for the <xref href=\\\"System.Security.AccessControl.CommonObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Security.AccessControl.DirectoryObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> classes.</p>\\n\"\n  syntax:\n    content: public abstract class ObjectSecurity\n    content.vb: Public MustInherit Class ObjectSecurity\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: ObjectSecurity\n- uid: System.Security.AccessControl.ObjectSecurity.#ctor\n  commentId: M:System.Security.AccessControl.ObjectSecurity.#ctor\n  id: '#ctor'\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: ObjectSecurity()\n  fullName: System.Security.AccessControl.ObjectSecurity.ObjectSecurity()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 370\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected ObjectSecurity()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectSecurity.ObjectSecurity()\n- uid: System.Security.AccessControl.ObjectSecurity.#ctor(System.Boolean,System.Boolean)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.#ctor(System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean)'\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: ObjectSecurity(Boolean, Boolean)\n  fullName: System.Security.AccessControl.ObjectSecurity.ObjectSecurity(System.Boolean, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 371\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected ObjectSecurity(bool isContainer, bool isDS)\n    content.vb: Protected Sub New(isContainer As Boolean, isDS As Boolean)\n    parameters:\n    - id: isContainer\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a container object.</p>\\n\"\n    - id: isDS\n      type: System.Boolean\n      description: \"\\n<p>True if the new <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a directory object.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectSecurity.ObjectSecurity(Boolean, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.#ctor(System.Security.AccessControl.CommonSecurityDescriptor)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.#ctor(System.Security.AccessControl.CommonSecurityDescriptor)\n  id: '#ctor(System.Security.AccessControl.CommonSecurityDescriptor)'\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: ObjectSecurity(CommonSecurityDescriptor)\n  fullName: System.Security.AccessControl.ObjectSecurity.ObjectSecurity(System.Security.AccessControl.CommonSecurityDescriptor)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 372\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected ObjectSecurity(CommonSecurityDescriptor securityDescriptor)\n    content.vb: Protected Sub New(securityDescriptor As CommonSecurityDescriptor)\n    parameters:\n    - id: securityDescriptor\n      type: System.Security.AccessControl.CommonSecurityDescriptor\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.CommonSecurityDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>of the new <xref href=\\\"System.Security.AccessControl.CommonObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectSecurity.ObjectSecurity(CommonSecurityDescriptor)\n- uid: System.Security.AccessControl.ObjectSecurity.AccessRightType\n  commentId: P:System.Security.AccessControl.ObjectSecurity.AccessRightType\n  id: AccessRightType\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: AccessRightType\n  fullName: System.Security.AccessControl.ObjectSecurity.AccessRightType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AccessRightType\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 373\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the securable object associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract Type AccessRightType { get; }\n    content.vb: Public MustOverride ReadOnly Property AccessRightType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The type of the securable object associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: ObjectSecurity.AccessRightType\n- uid: System.Security.AccessControl.ObjectSecurity.AccessRulesModified\n  commentId: P:System.Security.AccessControl.ObjectSecurity.AccessRulesModified\n  id: AccessRulesModified\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: AccessRulesModified\n  fullName: System.Security.AccessControl.ObjectSecurity.AccessRulesModified\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AccessRulesModified\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 374\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets a Boolean value that specifies whether the access rules associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object have been modified.</p>\\n\"\n  syntax:\n    content: protected bool AccessRulesModified { get; set; }\n    content.vb: Protected Property AccessRulesModified As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the access rules associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object have been modified; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectSecurity.AccessRulesModified\n- uid: System.Security.AccessControl.ObjectSecurity.AccessRuleType\n  commentId: P:System.Security.AccessControl.ObjectSecurity.AccessRuleType\n  id: AccessRuleType\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: AccessRuleType\n  fullName: System.Security.AccessControl.ObjectSecurity.AccessRuleType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AccessRuleType\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 375\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the object associated with the access rules of this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object must be an object that can be cast as a <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract Type AccessRuleType { get; }\n    content.vb: Public MustOverride ReadOnly Property AccessRuleType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The type of the object associated with the access rules of this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: ObjectSecurity.AccessRuleType\n- uid: System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical\n  commentId: P:System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical\n  id: AreAccessRulesCanonical\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: AreAccessRulesCanonical\n  fullName: System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AreAccessRulesCanonical\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 376\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a Boolean value that specifies whether the access rules associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object are in canonical order.</p>\\n\"\n  syntax:\n    content: public bool AreAccessRulesCanonical { get; }\n    content.vb: Public ReadOnly Property AreAccessRulesCanonical As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the access rules are in canonical order; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ObjectSecurity.AreAccessRulesCanonical\n- uid: System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected\n  commentId: P:System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected\n  id: AreAccessRulesProtected\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: AreAccessRulesProtected\n  fullName: System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AreAccessRulesProtected\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 377\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a Boolean value that specifies whether the Discretionary Access Control List (DACL) associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is protected.</p>\\n\"\n  syntax:\n    content: public bool AreAccessRulesProtected { get; }\n    content.vb: Public ReadOnly Property AreAccessRulesProtected As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the DACL is protected; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ObjectSecurity.AreAccessRulesProtected\n- uid: System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical\n  commentId: P:System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical\n  id: AreAuditRulesCanonical\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: AreAuditRulesCanonical\n  fullName: System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AreAuditRulesCanonical\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 378\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a Boolean value that specifies whether the audit rules associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object are in canonical order.</p>\\n\"\n  syntax:\n    content: public bool AreAuditRulesCanonical { get; }\n    content.vb: Public ReadOnly Property AreAuditRulesCanonical As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the audit rules are in canonical order; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ObjectSecurity.AreAuditRulesCanonical\n- uid: System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected\n  commentId: P:System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected\n  id: AreAuditRulesProtected\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: AreAuditRulesProtected\n  fullName: System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AreAuditRulesProtected\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 379\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a Boolean value that specifies whether the System Access Control List (SACL) associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is protected.</p>\\n\"\n  syntax:\n    content: public bool AreAuditRulesProtected { get; }\n    content.vb: Public ReadOnly Property AreAuditRulesProtected As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the SACL is protected; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ObjectSecurity.AreAuditRulesProtected\n- uid: System.Security.AccessControl.ObjectSecurity.AuditRulesModified\n  commentId: P:System.Security.AccessControl.ObjectSecurity.AuditRulesModified\n  id: AuditRulesModified\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: AuditRulesModified\n  fullName: System.Security.AccessControl.ObjectSecurity.AuditRulesModified\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuditRulesModified\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 380\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets a Boolean value that specifies whether the audit rules associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object have been modified.</p>\\n\"\n  syntax:\n    content: protected bool AuditRulesModified { get; set; }\n    content.vb: Protected Property AuditRulesModified As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the audit rules associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object have been modified; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectSecurity.AuditRulesModified\n- uid: System.Security.AccessControl.ObjectSecurity.AuditRuleType\n  commentId: P:System.Security.AccessControl.ObjectSecurity.AuditRuleType\n  id: AuditRuleType\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: AuditRuleType\n  fullName: System.Security.AccessControl.ObjectSecurity.AuditRuleType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuditRuleType\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 381\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object associated with the audit rules of this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object must be an object that can be cast as a <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract Type AuditRuleType { get; }\n    content.vb: Public MustOverride ReadOnly Property AuditRuleType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The type of the object associated with the audit rules of this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: ObjectSecurity.AuditRuleType\n- uid: System.Security.AccessControl.ObjectSecurity.GroupModified\n  commentId: P:System.Security.AccessControl.ObjectSecurity.GroupModified\n  id: GroupModified\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: GroupModified\n  fullName: System.Security.AccessControl.ObjectSecurity.GroupModified\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupModified\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 382\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets a Boolean value that specifies whether the group associated with the securable object has been modified. </p>\\n\"\n  syntax:\n    content: protected bool GroupModified { get; set; }\n    content.vb: Protected Property GroupModified As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the group associated with the securable object has been modified; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectSecurity.GroupModified\n- uid: System.Security.AccessControl.ObjectSecurity.IsContainer\n  commentId: P:System.Security.AccessControl.ObjectSecurity.IsContainer\n  id: IsContainer\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: IsContainer\n  fullName: System.Security.AccessControl.ObjectSecurity.IsContainer\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsContainer\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 383\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a Boolean value that specifies whether this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a container object.</p>\\n\"\n  syntax:\n    content: protected bool IsContainer { get; }\n    content.vb: Protected ReadOnly Property IsContainer As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a container object; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  modifiers.vb:\n  - Protected\n  - ReadOnly\n  nameWithType: ObjectSecurity.IsContainer\n- uid: System.Security.AccessControl.ObjectSecurity.IsDS\n  commentId: P:System.Security.AccessControl.ObjectSecurity.IsDS\n  id: IsDS\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: IsDS\n  fullName: System.Security.AccessControl.ObjectSecurity.IsDS\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDS\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 384\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a Boolean value that specifies whether this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a directory object.</p>\\n\"\n  syntax:\n    content: protected bool IsDS { get; }\n    content.vb: Protected ReadOnly Property IsDS As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a directory object; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  modifiers.vb:\n  - Protected\n  - ReadOnly\n  nameWithType: ObjectSecurity.IsDS\n- uid: System.Security.AccessControl.ObjectSecurity.OwnerModified\n  commentId: P:System.Security.AccessControl.ObjectSecurity.OwnerModified\n  id: OwnerModified\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: OwnerModified\n  fullName: System.Security.AccessControl.ObjectSecurity.OwnerModified\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OwnerModified\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 385\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets a Boolean value that specifies whether the owner of the securable object has been modified.</p>\\n\"\n  syntax:\n    content: protected bool OwnerModified { get; set; }\n    content.vb: Protected Property OwnerModified As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the owner of the securable object has been modified; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectSecurity.OwnerModified\n- uid: System.Security.AccessControl.ObjectSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)\n  fullName: System.Security.AccessControl.ObjectSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AccessRuleFactory\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 386\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.AccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified values.</p>\\n\"\n  syntax:\n    content: public abstract AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)\n    content.vb: Public MustOverride Function AccessRuleFactory(identityReference As IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType) As AccessRule\n    parameters:\n    - id: identityReference\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The identity to which the access rule applies.  It must be an object that can be cast as a <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\\n\"\n    - id: isInherited\n      type: System.Boolean\n      description: \"\\n<p>true if this rule is inherited from a parent container.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Specifies the inheritance properties of the access rule.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\\\"System.Security.AccessControl.InheritanceFlags.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>Specifies the valid access control type.</p>\\n\"\n    return:\n      type: System.Security.AccessControl.AccessRule\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.AccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that this method creates.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: ObjectSecurity.AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)\n- uid: System.Security.AccessControl.ObjectSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n  fullName: System.Security.AccessControl.ObjectSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuditRuleFactory\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 387\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.AuditRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified values.</p>\\n\"\n  syntax:\n    content: public abstract AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags)\n    content.vb: Public MustOverride Function AuditRuleFactory(identityReference As IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, flags As AuditFlags) As AuditRule\n    parameters:\n    - id: identityReference\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The identity to which the audit rule applies.  It must be an object that can be cast as a <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\\n\"\n    - id: isInherited\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this rule is inherited from a parent container.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Specifies the inheritance properties of the audit rule.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Specifies whether inherited audit rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\\\"System.Security.AccessControl.InheritanceFlags.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: flags\n      type: System.Security.AccessControl.AuditFlags\n      description: \"\\n<p>Specifies the conditions for which the rule is audited.</p>\\n\"\n    return:\n      type: System.Security.AccessControl.AuditRule\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.AuditRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that this method creates.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: ObjectSecurity.AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n- uid: System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)\n  id: GetGroup(System.Type)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: GetGroup(Type)\n  fullName: System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGroup\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 388\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the primary group associated with the specified owner.</p>\\n\"\n  syntax:\n    content: public IdentityReference GetGroup(Type targetType)\n    content.vb: Public Function GetGroup(targetType As Type) As IdentityReference\n    parameters:\n    - id: targetType\n      type: System.Type\n      description: \"\\n<p>The owner for which to get the primary group. </p>\\n\"\n    return:\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The primary group associated with the specified owner.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectSecurity.GetGroup(Type)\n- uid: System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)\n  id: GetOwner(System.Type)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: GetOwner(Type)\n  fullName: System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetOwner\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 389\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the owner associated with the specified primary group.</p>\\n\"\n  syntax:\n    content: public IdentityReference GetOwner(Type targetType)\n    content.vb: Public Function GetOwner(targetType As Type) As IdentityReference\n    parameters:\n    - id: targetType\n      type: System.Type\n      description: \"\\n<p>The primary group for which to get the owner.</p>\\n\"\n    return:\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The owner associated with the specified group.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>targetType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>targetType</em> is not an <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type. </p>\\n\"\n  - type: System.Security.Principal.IdentityNotMappedException\n    commentId: T:System.Security.Principal.IdentityNotMappedException\n    description: \"\\n<p>Some or all identity references could not be translated. </p>\\n\"\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: \"\\n<p>A Win32 error code was returned. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectSecurity.GetOwner(Type)\n- uid: System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm\n  commentId: M:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm\n  id: GetSecurityDescriptorBinaryForm\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: GetSecurityDescriptorBinaryForm()\n  fullName: System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSecurityDescriptorBinaryForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 390\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Returns an array of byte values that represents the security descriptor information for this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public byte[] GetSecurityDescriptorBinaryForm()\n    content.vb: Public Function GetSecurityDescriptorBinaryForm As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values that represents the security descriptor for this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This method returns <strong>null</strong> if there is no security information in this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectSecurity.GetSecurityDescriptorBinaryForm()\n- uid: System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\n  id: GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: GetSecurityDescriptorSddlForm(AccessControlSections)\n  fullName: System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSecurityDescriptorSddlForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 391\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Returns the Security Descriptor Definition Language (SDDL) representation of the specified sections of the security descriptor associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public string GetSecurityDescriptorSddlForm(AccessControlSections includeSections)\n    content.vb: Public Function GetSecurityDescriptorSddlForm(includeSections As AccessControlSections) As String\n    parameters:\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: \"\\n<p>Specifies which sections (access rules, audit rules, primary group, owner) of the security descriptor to get.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The SDDL representation of the specified sections of the security descriptor associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectSecurity.GetSecurityDescriptorSddlForm(AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported\n  commentId: M:System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported\n  id: IsSddlConversionSupported\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: IsSddlConversionSupported()\n  fullName: System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSddlConversionSupported\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 392\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Returns a Boolean value that specifies whether the security descriptor associated with this  <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can be converted to the Security Descriptor Definition Language (SDDL) format.</p>\\n\"\n  syntax:\n    content: public static bool IsSddlConversionSupported()\n    content.vb: Public Shared Function IsSddlConversionSupported As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the security descriptor associated with this  <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can be converted to the Security Descriptor Definition Language (SDDL) format; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ObjectSecurity.IsSddlConversionSupported()\n- uid: System.Security.AccessControl.ObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  id: ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: ModifyAccess(AccessControlModification, AccessRule, out Boolean)\n  fullName: System.Security.AccessControl.ObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AccessRule, out System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ModifyAccess\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 393\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Applies the specified modification to the Discretionary Access Control List (DACL) associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: protected abstract bool ModifyAccess(AccessControlModification modification, AccessRule rule, out bool modified)\n    content.vb: Protected MustOverride Function ModifyAccess(modification As AccessControlModification, rule As AccessRule, ByRef modified As Boolean) As Boolean\n    parameters:\n    - id: modification\n      type: System.Security.AccessControl.AccessControlModification\n      description: \"\\n<p>The modification to apply to the DACL.</p>\\n\"\n    - id: rule\n      type: System.Security.AccessControl.AccessRule\n      description: \"\\n<p>The access rule to modify.</p>\\n\"\n    - id: modified\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the DACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the DACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  fullName.vb: System.Security.AccessControl.ObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AccessRule, ByRef System.Boolean)\n  name.vb: ModifyAccess(AccessControlModification, AccessRule, ByRef Boolean)\n  nameWithType: ObjectSecurity.ModifyAccess(AccessControlModification, AccessRule, out Boolean)\n  nameWithType.vb: ObjectSecurity.ModifyAccess(AccessControlModification, AccessRule, ByRef Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  id: ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: ModifyAccessRule(AccessControlModification, AccessRule, out Boolean)\n  fullName: System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AccessRule, out System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ModifyAccessRule\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 394\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Applies the specified modification to the Discretionary Access Control List (DACL) associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual bool ModifyAccessRule(AccessControlModification modification, AccessRule rule, out bool modified)\n    content.vb: Public Overridable Function ModifyAccessRule(modification As AccessControlModification, rule As AccessRule, ByRef modified As Boolean) As Boolean\n    parameters:\n    - id: modification\n      type: System.Security.AccessControl.AccessControlModification\n      description: \"\\n<p>The modification to apply to the DACL.</p>\\n\"\n    - id: rule\n      type: System.Security.AccessControl.AccessRule\n      description: \"\\n<p>The access rule to modify.</p>\\n\"\n    - id: modified\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the DACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the DACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AccessRule, ByRef System.Boolean)\n  name.vb: ModifyAccessRule(AccessControlModification, AccessRule, ByRef Boolean)\n  nameWithType: ObjectSecurity.ModifyAccessRule(AccessControlModification, AccessRule, out Boolean)\n  nameWithType.vb: ObjectSecurity.ModifyAccessRule(AccessControlModification, AccessRule, ByRef Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  id: ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: ModifyAudit(AccessControlModification, AuditRule, out Boolean)\n  fullName: System.Security.AccessControl.ObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AuditRule, out System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ModifyAudit\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 395\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Applies the specified modification to the System Access Control List (SACL) associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: protected abstract bool ModifyAudit(AccessControlModification modification, AuditRule rule, out bool modified)\n    content.vb: Protected MustOverride Function ModifyAudit(modification As AccessControlModification, rule As AuditRule, ByRef modified As Boolean) As Boolean\n    parameters:\n    - id: modification\n      type: System.Security.AccessControl.AccessControlModification\n      description: \"\\n<p>The modification to apply to the SACL.</p>\\n\"\n    - id: rule\n      type: System.Security.AccessControl.AuditRule\n      description: \"\\n<p>The audit rule to modify.</p>\\n\"\n    - id: modified\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the SACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the SACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  fullName.vb: System.Security.AccessControl.ObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AuditRule, ByRef System.Boolean)\n  name.vb: ModifyAudit(AccessControlModification, AuditRule, ByRef Boolean)\n  nameWithType: ObjectSecurity.ModifyAudit(AccessControlModification, AuditRule, out Boolean)\n  nameWithType.vb: ObjectSecurity.ModifyAudit(AccessControlModification, AuditRule, ByRef Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  id: ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: ModifyAuditRule(AccessControlModification, AuditRule, out Boolean)\n  fullName: System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AuditRule, out System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ModifyAuditRule\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 396\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Applies the specified modification to the System Access Control List (SACL) associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual bool ModifyAuditRule(AccessControlModification modification, AuditRule rule, out bool modified)\n    content.vb: Public Overridable Function ModifyAuditRule(modification As AccessControlModification, rule As AuditRule, ByRef modified As Boolean) As Boolean\n    parameters:\n    - id: modification\n      type: System.Security.AccessControl.AccessControlModification\n      description: \"\\n<p>The modification to apply to the SACL.</p>\\n\"\n    - id: rule\n      type: System.Security.AccessControl.AuditRule\n      description: \"\\n<p>The audit rule to modify.</p>\\n\"\n    - id: modified\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the SACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the SACL is successfully modified; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification, System.Security.AccessControl.AuditRule, ByRef System.Boolean)\n  name.vb: ModifyAuditRule(AccessControlModification, AuditRule, ByRef Boolean)\n  nameWithType: ObjectSecurity.ModifyAuditRule(AccessControlModification, AuditRule, out Boolean)\n  nameWithType.vb: ObjectSecurity.ModifyAuditRule(AccessControlModification, AuditRule, ByRef Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\n  id: Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: Persist(Boolean, String, AccessControlSections)\n  fullName: System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean, System.String, System.Security.AccessControl.AccessControlSections)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Persist\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 397\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Saves the specified sections of the security descriptor associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to permanent storage. We recommend that the values of the <em>includeSections</em> parameters passed to the constructor and persist methods be identical. For more information, see Remarks.</p>\\n\"\n  syntax:\n    content: protected virtual void Persist(bool enableOwnershipPrivilege, string name, AccessControlSections includeSections)\n    content.vb: Protected Overridable Sub Persist(enableOwnershipPrivilege As Boolean, name As String, includeSections As AccessControlSections)\n    parameters:\n    - id: enableOwnershipPrivilege\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to enable the privilege that allows the caller to take ownership of the object.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name used to retrieve the persisted information.</p>\\n\"\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: \"\\n<p>One of the <xref href=\\\"System.Security.AccessControl.AccessControlSections\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ObjectSecurity.Persist(Boolean, String, AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)\n  id: Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: Persist(SafeHandle, AccessControlSections)\n  fullName: System.Security.AccessControl.ObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle, System.Security.AccessControl.AccessControlSections)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Persist\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 398\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Saves the specified sections of the security descriptor associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to permanent storage. We recommend that the values of the <em>includeSections</em> parameters passed to the constructor and persist methods be identical. For more information, see Remarks.</p>\\n\"\n  syntax:\n    content: protected virtual void Persist(SafeHandle handle, AccessControlSections includeSections)\n    content.vb: Protected Overridable Sub Persist(handle As SafeHandle, includeSections As AccessControlSections)\n    parameters:\n    - id: handle\n      type: System.Runtime.InteropServices.SafeHandle\n      description: \"\\n<p>The handle used to retrieve the persisted information.</p>\\n\"\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: \"\\n<p>One of the <xref href=\\\"System.Security.AccessControl.AccessControlSections\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ObjectSecurity.Persist(SafeHandle, AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)\n  id: Persist(System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: Persist(String, AccessControlSections)\n  fullName: System.Security.AccessControl.ObjectSecurity.Persist(System.String, System.Security.AccessControl.AccessControlSections)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Persist\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 399\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Saves the specified sections of the security descriptor associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to permanent storage. We recommend that the values of the <em>includeSections</em> parameters passed to the constructor and persist methods be identical. For more information, see Remarks.</p>\\n\"\n  syntax:\n    content: protected virtual void Persist(string name, AccessControlSections includeSections)\n    content.vb: Protected Overridable Sub Persist(name As String, includeSections As AccessControlSections)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name used to retrieve the persisted information.</p>\\n\"\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: \"\\n<p>One of the <xref href=\\\"System.Security.AccessControl.AccessControlSections\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration values that specifies the sections of the security descriptor (access rules, audit rules, owner, primary group) of the securable object to save.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ObjectSecurity.Persist(String, AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)\n  id: PurgeAccessRules(System.Security.Principal.IdentityReference)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: PurgeAccessRules(IdentityReference)\n  fullName: System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PurgeAccessRules\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 400\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes all access rules associated with the specified <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void PurgeAccessRules(IdentityReference identity)\n    content.vb: Public Overridable Sub PurgeAccessRules(identity As IdentityReference)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to remove all access rules.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>All access rules are not in canonical order.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ObjectSecurity.PurgeAccessRules(IdentityReference)\n- uid: System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)\n  id: PurgeAuditRules(System.Security.Principal.IdentityReference)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: PurgeAuditRules(IdentityReference)\n  fullName: System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PurgeAuditRules\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 401\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes all audit rules associated with the specified <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void PurgeAuditRules(IdentityReference identity)\n    content.vb: Public Overridable Sub PurgeAuditRules(identity As IdentityReference)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to remove all audit rules.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>All audit rules are not in canonical order.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ObjectSecurity.PurgeAuditRules(IdentityReference)\n- uid: System.Security.AccessControl.ObjectSecurity.ReadLock\n  commentId: M:System.Security.AccessControl.ObjectSecurity.ReadLock\n  id: ReadLock\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: ReadLock()\n  fullName: System.Security.AccessControl.ObjectSecurity.ReadLock()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadLock\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 402\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Locks this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for read access.</p>\\n\"\n  syntax:\n    content: protected void ReadLock()\n    content.vb: Protected Sub ReadLock\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectSecurity.ReadLock()\n- uid: System.Security.AccessControl.ObjectSecurity.ReadUnlock\n  commentId: M:System.Security.AccessControl.ObjectSecurity.ReadUnlock\n  id: ReadUnlock\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: ReadUnlock()\n  fullName: System.Security.AccessControl.ObjectSecurity.ReadUnlock()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadUnlock\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 403\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Unlocks this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for read access.</p>\\n\"\n  syntax:\n    content: protected void ReadUnlock()\n    content.vb: Protected Sub ReadUnlock\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectSecurity.ReadUnlock()\n- uid: System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)\n  id: SetAccessRuleProtection(System.Boolean,System.Boolean)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: SetAccessRuleProtection(Boolean, Boolean)\n  fullName: System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetAccessRuleProtection\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 404\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets or removes protection of the access rules associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. Protected access rules cannot be modified by parent objects through inheritance.</p>\\n\"\n  syntax:\n    content: public void SetAccessRuleProtection(bool isProtected, bool preserveInheritance)\n    content.vb: Public Sub SetAccessRuleProtection(isProtected As Boolean, preserveInheritance As Boolean)\n    parameters:\n    - id: isProtected\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to protect the access rules associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from inheritance; <strong>false</strong> to allow inheritance.</p>\\n\"\n    - id: preserveInheritance\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to preserve inherited access rules; <strong>false</strong> to remove inherited access rules. This parameter is ignored if <em>isProtected</em> is <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This method attempts to remove inherited rules from a non-canonical Discretionary Access Control List (DACL).</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectSecurity.SetAccessRuleProtection(Boolean, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)\n  id: SetAuditRuleProtection(System.Boolean,System.Boolean)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: SetAuditRuleProtection(Boolean, Boolean)\n  fullName: System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetAuditRuleProtection\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 405\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets or removes protection of the audit rules associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. Protected audit rules cannot be modified by parent objects through inheritance.</p>\\n\"\n  syntax:\n    content: public void SetAuditRuleProtection(bool isProtected, bool preserveInheritance)\n    content.vb: Public Sub SetAuditRuleProtection(isProtected As Boolean, preserveInheritance As Boolean)\n    parameters:\n    - id: isProtected\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to protect the audit rules associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from inheritance; <strong>false</strong> to allow inheritance.</p>\\n\"\n    - id: preserveInheritance\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to preserve inherited audit rules; <strong>false</strong> to remove inherited audit rules. This parameter is ignored if <em>isProtected</em> is <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This method attempts to remove inherited rules from a non-canonical System Access Control List (SACL).</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectSecurity.SetAuditRuleProtection(Boolean, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)\n  id: SetGroup(System.Security.Principal.IdentityReference)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: SetGroup(IdentityReference)\n  fullName: System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetGroup\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 406\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the primary group for the security descriptor associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void SetGroup(IdentityReference identity)\n    content.vb: Public Sub SetGroup(identity As IdentityReference)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The primary group to set.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectSecurity.SetGroup(IdentityReference)\n- uid: System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)\n  id: SetOwner(System.Security.Principal.IdentityReference)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: SetOwner(IdentityReference)\n  fullName: System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetOwner\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 407\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the owner for the security descriptor associated with this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void SetOwner(IdentityReference identity)\n    content.vb: Public Sub SetOwner(identity As IdentityReference)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The owner to set.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectSecurity.SetOwner(IdentityReference)\n- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])\n  commentId: M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])\n  id: SetSecurityDescriptorBinaryForm(System.Byte[])\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: SetSecurityDescriptorBinaryForm(Byte[])\n  fullName: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetSecurityDescriptorBinaryForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 408\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the security descriptor for this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from the specified array of byte values.</p>\\n\"\n  syntax:\n    content: public void SetSecurityDescriptorBinaryForm(byte[] binaryForm)\n    content.vb: Public Sub SetSecurityDescriptorBinaryForm(binaryForm As Byte())\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The array of bytes from which to set the security descriptor.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte())\n  name.vb: SetSecurityDescriptorBinaryForm(Byte())\n  nameWithType: ObjectSecurity.SetSecurityDescriptorBinaryForm(Byte[])\n  nameWithType.vb: ObjectSecurity.SetSecurityDescriptorBinaryForm(Byte())\n- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)\n  id: SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: SetSecurityDescriptorBinaryForm(Byte[], AccessControlSections)\n  fullName: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[], System.Security.AccessControl.AccessControlSections)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetSecurityDescriptorBinaryForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 409\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the specified sections of the security descriptor for this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from the specified array of byte values.</p>\\n\"\n  syntax:\n    content: public void SetSecurityDescriptorBinaryForm(byte[] binaryForm, AccessControlSections includeSections)\n    content.vb: Public Sub SetSecurityDescriptorBinaryForm(binaryForm As Byte(), includeSections As AccessControlSections)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The array of bytes from which to set the security descriptor.</p>\\n\"\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: \"\\n<p>The sections (access rules, audit rules, owner, primary group) of the security descriptor to set.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte(), System.Security.AccessControl.AccessControlSections)\n  name.vb: SetSecurityDescriptorBinaryForm(Byte(), AccessControlSections)\n  nameWithType: ObjectSecurity.SetSecurityDescriptorBinaryForm(Byte[], AccessControlSections)\n  nameWithType.vb: ObjectSecurity.SetSecurityDescriptorBinaryForm(Byte(), AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\n  id: SetSecurityDescriptorSddlForm(System.String)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: SetSecurityDescriptorSddlForm(String)\n  fullName: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetSecurityDescriptorSddlForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 410\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the security descriptor for this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from the specified Security Descriptor Definition Language (SDDL) string.</p>\\n\"\n  syntax:\n    content: public void SetSecurityDescriptorSddlForm(string sddlForm)\n    content.vb: Public Sub SetSecurityDescriptorSddlForm(sddlForm As String)\n    parameters:\n    - id: sddlForm\n      type: System.String\n      description: \"\\n<p>The SDDL string from which to set the security descriptor.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectSecurity.SetSecurityDescriptorSddlForm(String)\n- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)\n  commentId: M:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)\n  id: SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: SetSecurityDescriptorSddlForm(String, AccessControlSections)\n  fullName: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String, System.Security.AccessControl.AccessControlSections)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetSecurityDescriptorSddlForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 411\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the specified sections of the security descriptor for this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from the specified Security Descriptor Definition Language (SDDL) string.</p>\\n\"\n  syntax:\n    content: public void SetSecurityDescriptorSddlForm(string sddlForm, AccessControlSections includeSections)\n    content.vb: Public Sub SetSecurityDescriptorSddlForm(sddlForm As String, includeSections As AccessControlSections)\n    parameters:\n    - id: sddlForm\n      type: System.String\n      description: \"\\n<p>The SDDL string from which to set the security descriptor.</p>\\n\"\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: \"\\n<p>The sections (access rules, audit rules, owner, primary group) of the security descriptor to set.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ObjectSecurity.SetSecurityDescriptorSddlForm(String, AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.WriteLock\n  commentId: M:System.Security.AccessControl.ObjectSecurity.WriteLock\n  id: WriteLock\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: WriteLock()\n  fullName: System.Security.AccessControl.ObjectSecurity.WriteLock()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteLock\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 412\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Locks this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for write access.</p>\\n\"\n  syntax:\n    content: protected void WriteLock()\n    content.vb: Protected Sub WriteLock\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectSecurity.WriteLock()\n- uid: System.Security.AccessControl.ObjectSecurity.WriteUnlock\n  commentId: M:System.Security.AccessControl.ObjectSecurity.WriteUnlock\n  id: WriteUnlock\n  parent: System.Security.AccessControl.ObjectSecurity\n  langs:\n  - csharp\n  - vb\n  name: WriteUnlock()\n  fullName: System.Security.AccessControl.ObjectSecurity.WriteUnlock()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteUnlock\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 413\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Unlocks this <xref href=\\\"System.Security.AccessControl.ObjectSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for write access.</p>\\n\"\n  syntax:\n    content: protected void WriteUnlock()\n    content.vb: Protected Sub WriteUnlock\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectSecurity.WriteUnlock()\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.AccessControl.CommonSecurityDescriptor\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: CommonSecurityDescriptor\n  fullName: System.Security.AccessControl.CommonSecurityDescriptor\n  commentId: T:System.Security.AccessControl.CommonSecurityDescriptor\n  nameWithType: CommonSecurityDescriptor\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  commentId: T:System.Type\n  nameWithType: Type\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n  commentId: T:System.Security.Principal.IdentityReference\n  nameWithType: IdentityReference\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n  commentId: T:System.Security.AccessControl.InheritanceFlags\n  nameWithType: InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n  commentId: T:System.Security.AccessControl.PropagationFlags\n  nameWithType: PropagationFlags\n- uid: System.Security.AccessControl.AccessControlType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlType\n  fullName: System.Security.AccessControl.AccessControlType\n  commentId: T:System.Security.AccessControl.AccessControlType\n  nameWithType: AccessControlType\n- uid: System.Security.AccessControl.AccessRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessRule\n  fullName: System.Security.AccessControl.AccessRule\n  commentId: T:System.Security.AccessControl.AccessRule\n  nameWithType: AccessRule\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n  commentId: T:System.Security.AccessControl.AuditFlags\n  nameWithType: AuditFlags\n- uid: System.Security.AccessControl.AuditRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditRule\n  fullName: System.Security.AccessControl.AuditRule\n  commentId: T:System.Security.AccessControl.AuditRule\n  nameWithType: AuditRule\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.AccessControl.AccessControlSections\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlSections\n  fullName: System.Security.AccessControl.AccessControlSections\n  commentId: T:System.Security.AccessControl.AccessControlSections\n  nameWithType: AccessControlSections\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.AccessControl.AccessControlModification\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlModification\n  fullName: System.Security.AccessControl.AccessControlModification\n  commentId: T:System.Security.AccessControl.AccessControlModification\n  nameWithType: AccessControlModification\n- uid: System.Runtime.InteropServices.SafeHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n  commentId: T:System.Runtime.InteropServices.SafeHandle\n  nameWithType: SafeHandle\n- uid: System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Security.Principal.IdentityNotMappedException\n  isExternal: false\n  name: IdentityNotMappedException\n  fullName: System.Security.Principal.IdentityNotMappedException\n  nameWithType: IdentityNotMappedException\n  commentId: T:System.Security.Principal.IdentityNotMappedException\n- uid: System.SystemException\n  parent: System\n  isExternal: true\n  name: SystemException\n  fullName: System.SystemException\n  commentId: T:System.SystemException\n  nameWithType: SystemException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}