{"nodes":[{"pos":[10622,10641],"content":"XmlDictionaryReader","needQuote":true,"nodes":[{"content":"XmlDictionaryReader","pos":[0,19]}]},{"pos":[11871,11892],"content":"XmlDictionaryReader()","needQuote":true,"nodes":[{"content":"XmlDictionaryReader()","pos":[0,21]}]},{"pos":[12876,12891],"content":"CanCanonicalize","needQuote":true,"nodes":[{"content":"CanCanonicalize","pos":[0,15]}]},{"content":"\\n&lt;p&gt;Returns &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13756,13798],"source":"\\n<p>Returns <strong>false</strong>.</p>\\n"},{"pos":[14146,14152],"content":"Quotas","needQuote":true,"nodes":[{"content":"Quotas","pos":[0,6]}]},{"pos":[15813,15896],"content":"CreateBinaryReader(Byte[], Int32, Int32, IXmlDictionary, XmlDictionaryReaderQuotas)","needQuote":true,"nodes":[{"content":"CreateBinaryReader(Byte[], Int32, Int32, IXmlDictionary, XmlDictionaryReaderQuotas)","pos":[0,83]}]},{"content":"\\n&lt;p&gt;The buffer from which to read.&lt;/p&gt;\\n","pos":[17104,17145],"source":"\\n<p>The buffer from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The starting position from which to read in &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[17209,17280],"source":"\\n<p>The starting position from which to read in <em>buffer</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes that can be read from &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[17343,17412],"source":"\\n<p>The number of bytes that can be read from <em>buffer</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The quotas that apply to this operation.&lt;/p&gt;\\n","pos":[17686,17737],"source":"\\n<p>The quotas that apply to this operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18050,18104],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is less than zero or greater than the buffer length.&lt;/p&gt;\\n","pos":[18221,18302],"source":"\\n<p>\\n<em>offset</em> is less than zero or greater than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero or greater than the buffer length minus the offset.&lt;/p&gt;\\n","pos":[18419,18516],"source":"\\n<p>\\n<em>count</em> is less than zero or greater than the buffer length minus the offset.</p>\\n"},{"pos":[19746,19853],"content":"CreateBinaryReader(Byte[], Int32, Int32, IXmlDictionary, XmlDictionaryReaderQuotas, XmlBinaryReaderSession)","needQuote":true,"nodes":[{"content":"CreateBinaryReader(Byte[], Int32, Int32, IXmlDictionary, XmlDictionaryReaderQuotas, XmlBinaryReaderSession)","pos":[0,107]}]},{"content":"\\n&lt;p&gt;The buffer from which to read.&lt;/p&gt;\\n","pos":[21163,21204],"source":"\\n<p>The buffer from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The starting position from which to read in &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[21268,21339],"source":"\\n<p>The starting position from which to read in <em>buffer</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes that can be read from &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[21402,21471],"source":"\\n<p>The number of bytes that can be read from <em>buffer</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22383,22437],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is less than zero or greater than the buffer length.&lt;/p&gt;\\n","pos":[22554,22635],"source":"\\n<p>\\n<em>offset</em> is less than zero or greater than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero or greater than the buffer length minus the offset.&lt;/p&gt;\\n","pos":[22752,22849],"source":"\\n<p>\\n<em>count</em> is less than zero or greater than the buffer length minus the offset.</p>\\n"},{"pos":[24006,24073],"content":"CreateBinaryReader(Byte[], Int32, Int32, XmlDictionaryReaderQuotas)","needQuote":true,"nodes":[{"content":"CreateBinaryReader(Byte[], Int32, Int32, XmlDictionaryReaderQuotas)","pos":[0,67]}]},{"content":"\\n&lt;p&gt;The buffer from which to read.&lt;/p&gt;\\n","pos":[25197,25238],"source":"\\n<p>The buffer from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The starting position from which to read in &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[25302,25373],"source":"\\n<p>The starting position from which to read in <em>buffer</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes that can be read from &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[25436,25505],"source":"\\n<p>The number of bytes that can be read from <em>buffer</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The quotas that apply to this operation.&lt;/p&gt;\\n","pos":[25593,25644],"source":"\\n<p>The quotas that apply to this operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25957,26011],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is less than zero or greater than the buffer length.&lt;/p&gt;\\n","pos":[26128,26209],"source":"\\n<p>\\n<em>offset</em> is less than zero or greater than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero or greater than the buffer length minus the offset.&lt;/p&gt;\\n","pos":[26326,26423],"source":"\\n<p>\\n<em>count</em> is less than zero or greater than the buffer length minus the offset.</p>\\n"},{"pos":[27320,27373],"content":"CreateBinaryReader(Byte[], XmlDictionaryReaderQuotas)","needQuote":true,"nodes":[{"content":"CreateBinaryReader(Byte[], XmlDictionaryReaderQuotas)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;The buffer from which to read.&lt;/p&gt;\\n","pos":[28409,28450],"source":"\\n<p>The buffer from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The quotas that apply to this operation.&lt;/p&gt;\\n","pos":[28538,28589],"source":"\\n<p>The quotas that apply to this operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28902,28956],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"pos":[29870,29939],"content":"CreateBinaryReader(Stream, IXmlDictionary, XmlDictionaryReaderQuotas)","needQuote":true,"nodes":[{"content":"CreateBinaryReader(Stream, IXmlDictionary, XmlDictionaryReaderQuotas)","pos":[0,69]}]},{"content":"\\n&lt;p&gt;The stream from which to read.&lt;/p&gt;\\n","pos":[31065,31106],"source":"\\n<p>The stream from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The quotas that apply to this operation.&lt;/p&gt;\\n","pos":[31380,31431],"source":"\\n<p>The quotas that apply to this operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; or &lt;em&gt;quotas&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[31744,31817],"source":"\\n<p>\\n<em>stream</em> or <em>quotas</em> is <strong>null</strong>.</p>\\n"},{"pos":[32573,32666],"content":"CreateBinaryReader(Stream, IXmlDictionary, XmlDictionaryReaderQuotas, XmlBinaryReaderSession)","needQuote":true,"nodes":[{"content":"CreateBinaryReader(Stream, IXmlDictionary, XmlDictionaryReaderQuotas, XmlBinaryReaderSession)","pos":[0,93]}]},{"content":"\\n&lt;p&gt;The stream from which to read.&lt;/p&gt;\\n","pos":[33894,33935],"source":"\\n<p>The stream from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The quotas that apply to this operation.&lt;/p&gt;\\n","pos":[34209,34260],"source":"\\n<p>The quotas that apply to this operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[34773,34827],"source":"\\n<p>\\n<em>stream</em> is <strong>null</strong>.</p>\\n"},{"pos":[35427,35480],"content":"CreateBinaryReader(Stream, XmlDictionaryReaderQuotas)","needQuote":true,"nodes":[{"content":"CreateBinaryReader(Stream, XmlDictionaryReaderQuotas)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;The stream from which to read.&lt;/p&gt;\\n","pos":[36522,36563],"source":"\\n<p>The stream from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The quotas that apply to this operation.&lt;/p&gt;\\n","pos":[36651,36702],"source":"\\n<p>The quotas that apply to this operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[37015,37069],"source":"\\n<p>\\n<em>stream</em> is <strong>null</strong>.</p>\\n"},{"pos":[37542,37575],"content":"CreateDictionaryReader(XmlReader)","needQuote":true,"nodes":[{"content":"CreateDictionaryReader(XmlReader)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;reader&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39019,39073],"source":"\\n<p>\\n<em>reader</em> is <strong>null</strong>.</p>\\n"},{"pos":[39676,39741],"content":"CreateTextReader(Byte[], Int32, Int32, XmlDictionaryReaderQuotas)","needQuote":true,"nodes":[{"content":"CreateTextReader(Byte[], Int32, Int32, XmlDictionaryReaderQuotas)","pos":[0,65]}]},{"content":"\\n&lt;p&gt;The buffer from which to read.&lt;/p&gt;\\n","pos":[40820,40861],"source":"\\n<p>The buffer from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The starting position from which to read in &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[40925,40996],"source":"\\n<p>The starting position from which to read in <em>buffer</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes that can be read from &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[41059,41128],"source":"\\n<p>The number of bytes that can be read from <em>buffer</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The quotas applied to the reader.&lt;/p&gt;\\n","pos":[41216,41260],"source":"\\n<p>The quotas applied to the reader.</p>\\n"},{"pos":[42337,42388],"content":"CreateTextReader(Byte[], XmlDictionaryReaderQuotas)","needQuote":true,"nodes":[{"content":"CreateTextReader(Byte[], XmlDictionaryReaderQuotas)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The buffer from which to read.&lt;/p&gt;\\n","pos":[43379,43420],"source":"\\n<p>The buffer from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The quotas applied to the reader.&lt;/p&gt;\\n","pos":[43508,43552],"source":"\\n<p>The quotas applied to the reader.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[43865,43919],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"pos":[44918,45007],"content":"CreateTextReader(Stream, Encoding, XmlDictionaryReaderQuotas, OnXmlDictionaryReaderClose)","needQuote":true,"nodes":[{"content":"CreateTextReader(Stream, Encoding, XmlDictionaryReaderQuotas, OnXmlDictionaryReaderClose)","pos":[0,89]}]},{"content":"\\n&lt;p&gt;The stream from which to read.&lt;/p&gt;\\n","pos":[46181,46222],"source":"\\n<p>The stream from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate to be called when the reader is closed.&lt;/p&gt;\\n","pos":[46746,46809],"source":"\\n<p>The delegate to be called when the reader is closed.</p>\\n"},{"pos":[47593,47644],"content":"CreateTextReader(Stream, XmlDictionaryReaderQuotas)","needQuote":true,"nodes":[{"content":"CreateTextReader(Stream, XmlDictionaryReaderQuotas)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The stream from which to read.&lt;/p&gt;\\n","pos":[48641,48682],"source":"\\n<p>The stream from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The quotas applied to the reader.&lt;/p&gt;\\n","pos":[48770,48814],"source":"\\n<p>The quotas applied to the reader.</p>\\n"},{"pos":[49404,49425],"content":"EndCanonicalization()","needQuote":true,"nodes":[{"content":"EndCanonicalization()","pos":[0,21]}]},{"content":"\\n&lt;p&gt;Always.&lt;/p&gt;\\n","pos":[50177,50195],"source":"\\n<p>Always.</p>\\n"},{"pos":[50735,50789],"content":"GetAttribute(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"GetAttribute(XmlDictionaryString, XmlDictionaryString)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The value of the attribute.&lt;/p&gt;\\n","pos":[52213,52251],"source":"\\n<p>The value of the attribute.</p>\\n"},{"pos":[52740,52774],"content":"IndexOfLocalName(String[], String)","needQuote":true,"nodes":[{"content":"IndexOfLocalName(String[], String)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The string array of local names to be searched.&lt;/p&gt;\\n","pos":[53678,53736],"source":"\\n<p>The string array of local names to be searched.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace of current node.&lt;/p&gt;\\n","pos":[53807,53848],"source":"\\n<p>The namespace of current node.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the local name of the current node within an array of names.&lt;/p&gt;\\n","pos":[53907,53991],"source":"\\n<p>The index of the local name of the current node within an array of names.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;localNames&lt;/em&gt; or any of the names in the array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54110,54201],"source":"\\n<p>\\n<em>localNames</em> or any of the names in the array is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;namespaceUri&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54306,54366],"source":"\\n<p>\\n<em>namespaceUri</em> is <strong>null</strong>.</p>\\n"},{"pos":[55152,55212],"content":"IndexOfLocalName(XmlDictionaryString[], XmlDictionaryString)","needQuote":true,"nodes":[{"content":"IndexOfLocalName(XmlDictionaryString[], XmlDictionaryString)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;The namespace of current node.&lt;/p&gt;\\n","pos":[56449,56490],"source":"\\n<p>The namespace of current node.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the local name of the current node within an array of names.&lt;/p&gt;\\n","pos":[56549,56633],"source":"\\n<p>The index of the local name of the current node within an array of names.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;localNames&lt;/em&gt; or any of the names in the array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[56752,56843],"source":"\\n<p>\\n<em>localNames</em> or any of the names in the array is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;namespaceUri&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[56948,57008],"source":"\\n<p>\\n<em>namespaceUri</em> is <strong>null</strong>.</p>\\n"},{"pos":[57741,57760],"content":"IsLocalName(String)","needQuote":true,"nodes":[{"content":"IsLocalName(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The local name of the current node.&lt;/p&gt;\\n","pos":[58584,58630],"source":"\\n<p>The local name of the current node.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;localName&lt;/em&gt; matches local name of the current node; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[58691,58821],"source":"\\n<p>\\n<strong>true</strong> if <em>localName</em> matches local name of the current node; otherwise <strong>false</strong>.</p>\\n"},{"pos":[59263,59295],"content":"IsLocalName(XmlDictionaryString)","needQuote":true,"nodes":[{"content":"IsLocalName(XmlDictionaryString)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;localName&lt;/em&gt; matches local name of the current node; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60396,60526],"source":"\\n<p>\\n<strong>true</strong> if <em>localName</em> matches local name of the current node; otherwise <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;localName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60645,60702],"source":"\\n<p>\\n<em>localName</em> is <strong>null</strong>.</p>\\n"},{"pos":[61115,61137],"content":"IsNamespaceUri(String)","needQuote":true,"nodes":[{"content":"IsNamespaceUri(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The namespace of current node.&lt;/p&gt;\\n","pos":[61984,62025],"source":"\\n<p>The namespace of current node.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;namespaceUri&lt;/em&gt; matches namespace of the current node; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[62086,62218],"source":"\\n<p>\\n<strong>true</strong> if <em>namespaceUri</em> matches namespace of the current node; otherwise <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;namespaceUri&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[62337,62397],"source":"\\n<p>\\n<em>namespaceUri</em> is <strong>null</strong>.</p>\\n"},{"pos":[62851,62886],"content":"IsNamespaceUri(XmlDictionaryString)","needQuote":true,"nodes":[{"content":"IsNamespaceUri(XmlDictionaryString)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;Namespace of current node.&lt;/p&gt;\\n","pos":[63793,63830],"source":"\\n<p>Namespace of current node.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;namespaceUri&lt;/em&gt; matches namespace of the current node; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[63891,64023],"source":"\\n<p>\\n<strong>true</strong> if <em>namespaceUri</em> matches namespace of the current node; otherwise <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;namespaceUri&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[64142,64202],"source":"\\n<p>\\n<em>namespaceUri</em> is <strong>null</strong>.</p>\\n"},{"pos":[64609,64631],"content":"IsStartArray(out Type)","needQuote":true,"nodes":[{"content":"IsStartArray(out Type)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;Type of the node, if a valid node; otherwise &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[65558,65636],"source":"\\n<p>Type of the node, if a valid node; otherwise <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the reader is positioned at the start of an array node; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[65697,65824],"source":"\\n<p>\\n<strong>true</strong> if the reader is positioned at the start of an array node; otherwise <strong>false</strong>.</p>\\n"},{"pos":[66549,66605],"content":"IsStartElement(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"IsStartElement(XmlDictionaryString, XmlDictionaryString)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the first tag in the array is a start tag or empty element tag and matches &lt;em&gt;localName&lt;/em&gt; and &lt;em&gt;namespaceUri&lt;/em&gt;; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[68106,68298],"source":"\\n<p>\\n<strong>true</strong> if the first tag in the array is a start tag or empty element tag and matches <em>localName</em> and <em>namespaceUri</em>; otherwise <strong>false</strong>.</p>\\n"},{"pos":[68750,68773],"content":"IsTextNode(XmlNodeType)","needQuote":true,"nodes":[{"content":"IsTextNode(XmlNodeType)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;Type of the node being tested.&lt;/p&gt;\\n","pos":[69562,69603],"source":"\\n<p>Type of the node being tested.</p>\\n"},{"pos":[70578,70598],"content":"MoveToStartElement()","needQuote":true,"nodes":[{"content":"MoveToStartElement()","pos":[0,20]}]},{"pos":[71703,71729],"content":"MoveToStartElement(String)","needQuote":true,"nodes":[{"content":"MoveToStartElement(String)","pos":[0,26]}]},{"pos":[73274,73308],"content":"MoveToStartElement(String, String)","needQuote":true,"nodes":[{"content":"MoveToStartElement(String, String)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[74448,74489],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[74560,74604],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[75175,75235],"content":"MoveToStartElement(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"MoveToStartElement(XmlDictionaryString, XmlDictionaryString)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[76477,76518],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[76606,76650],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[77247,77297],"content":"ReadArray(String, String, Boolean[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(String, String, Boolean[], Int32, Int32)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[78354,78395],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[78466,78507],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the nodes are put.&lt;/p&gt;\\n","pos":[78574,78624],"source":"\\n<p>The array into which the nodes are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[78688,78731],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to put in the array.&lt;/p&gt;\\n","pos":[78794,78845],"source":"\\n<p>The number of nodes to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes put in the array.&lt;/p&gt;\\n","pos":[78904,78952],"source":"\\n<p>The number of nodes put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[79071,79124],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[79241,79304],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[79421,79505],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[80379,80430],"content":"ReadArray(String, String, DateTime[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(String, String, DateTime[], Int32, Int32)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[81490,81531],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[81602,81646],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the nodes are put.&lt;/p&gt;\\n","pos":[81714,81764],"source":"\\n<p>The array into which the nodes are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[81828,81871],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to put in the array.&lt;/p&gt;\\n","pos":[81934,81985],"source":"\\n<p>The number of nodes to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes put in the array.&lt;/p&gt;\\n","pos":[82044,82092],"source":"\\n<p>The number of nodes put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[82211,82264],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[82381,82444],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[82561,82645],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[83520,83570],"content":"ReadArray(String, String, Decimal[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(String, String, Decimal[], Int32, Int32)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[84630,84671],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[84742,84786],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the nodes are put.&lt;/p&gt;\\n","pos":[84853,84903],"source":"\\n<p>The array into which the nodes are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[84967,85010],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to put in the array.&lt;/p&gt;\\n","pos":[85073,85124],"source":"\\n<p>The number of nodes to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes put in the array.&lt;/p&gt;\\n","pos":[85183,85231],"source":"\\n<p>The number of nodes put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[85350,85403],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[85520,85583],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[85700,85784],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[86652,86701],"content":"ReadArray(String, String, Double[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(String, String, Double[], Int32, Int32)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[87757,87798],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[87869,87913],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the nodes are put.&lt;/p&gt;\\n","pos":[87979,88029],"source":"\\n<p>The array into which the nodes are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[88093,88136],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to put in the array.&lt;/p&gt;\\n","pos":[88199,88250],"source":"\\n<p>The number of nodes to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes put in the array.&lt;/p&gt;\\n","pos":[88309,88357],"source":"\\n<p>The number of nodes put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[88476,88529],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[88646,88709],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[88826,88910],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[89768,89815],"content":"ReadArray(String, String, Guid[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(String, String, Guid[], Int32, Int32)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[90863,90904],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[90975,91019],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the nodes are put.&lt;/p&gt;\\n","pos":[91083,91133],"source":"\\n<p>The array into which the nodes are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[91197,91240],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to put in the array.&lt;/p&gt;\\n","pos":[91303,91354],"source":"\\n<p>The number of nodes to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes put in the array.&lt;/p&gt;\\n","pos":[91413,91461],"source":"\\n<p>The number of nodes put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[91580,91633],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[91750,91813],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[91930,92014],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[92867,92915],"content":"ReadArray(String, String, Int16[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(String, String, Int16[], Int32, Int32)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[93920,93961],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[94032,94076],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the integers are put.&lt;/p&gt;\\n","pos":[94141,94194],"source":"\\n<p>The array into which the integers are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[94258,94301],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of integers to put in the array.&lt;/p&gt;\\n","pos":[94364,94418],"source":"\\n<p>The number of integers to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of integers put in the array.&lt;/p&gt;\\n","pos":[94477,94528],"source":"\\n<p>The number of integers put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[94647,94700],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[94817,94880],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[94997,95081],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[95938,95986],"content":"ReadArray(String, String, Int32[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(String, String, Int32[], Int32, Int32)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[96968,97009],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[97080,97124],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the integers are put.&lt;/p&gt;\\n","pos":[97189,97242],"source":"\\n<p>The array into which the integers are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[97306,97349],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of integers to put in the array.&lt;/p&gt;\\n","pos":[97412,97466],"source":"\\n<p>The number of integers to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of integers put in the array.&lt;/p&gt;\\n","pos":[97525,97576],"source":"\\n<p>The number of integers put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[97695,97748],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[97865,97928],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[98045,98129],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[98986,99034],"content":"ReadArray(String, String, Int64[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(String, String, Int64[], Int32, Int32)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[100036,100077],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[100148,100192],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the integers are put.&lt;/p&gt;\\n","pos":[100257,100310],"source":"\\n<p>The array into which the integers are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[100374,100417],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of integers to put in the array.&lt;/p&gt;\\n","pos":[100480,100534],"source":"\\n<p>The number of integers to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of integers put in the array.&lt;/p&gt;\\n","pos":[100593,100644],"source":"\\n<p>The number of integers put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[100763,100816],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[100933,100996],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[101113,101197],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[102057,102106],"content":"ReadArray(String, String, Single[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(String, String, Single[], Int32, Int32)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[103112,103153],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[103224,103268],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the float numbers are put.&lt;/p&gt;\\n","pos":[103334,103392],"source":"\\n<p>The array into which the float numbers are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[103456,103499],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of float numbers to put in the array.&lt;/p&gt;\\n","pos":[103562,103621],"source":"\\n<p>The number of float numbers to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The umber of float numbers put in the array.&lt;/p&gt;\\n","pos":[103680,103735],"source":"\\n<p>The umber of float numbers put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[103854,103907],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[104024,104087],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[104204,104288],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[105158,105209],"content":"ReadArray(String, String, TimeSpan[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(String, String, TimeSpan[], Int32, Int32)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[106273,106314],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[106385,106429],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the nodes are put.&lt;/p&gt;\\n","pos":[106497,106547],"source":"\\n<p>The array into which the nodes are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[106611,106654],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to put in the array.&lt;/p&gt;\\n","pos":[106717,106768],"source":"\\n<p>The number of nodes to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes put in the array.&lt;/p&gt;\\n","pos":[106827,106875],"source":"\\n<p>The number of nodes put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[106994,107047],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[107164,107227],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[107344,107428],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[108405,108481],"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Boolean[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Boolean[], Int32, Int32)","pos":[0,76]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[109641,109682],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[109770,109814],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the nodes are put.&lt;/p&gt;\\n","pos":[109881,109931],"source":"\\n<p>The array into which the nodes are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[109995,110038],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to put in the array.&lt;/p&gt;\\n","pos":[110101,110152],"source":"\\n<p>The number of nodes to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes put in the array.&lt;/p&gt;\\n","pos":[110211,110259],"source":"\\n<p>The number of nodes put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[110378,110431],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[110548,110611],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[110728,110812],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[111900,111977],"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, DateTime[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, DateTime[], Int32, Int32)","pos":[0,77]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[113140,113181],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[113269,113313],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the nodes are put.&lt;/p&gt;\\n","pos":[113381,113431],"source":"\\n<p>The array into which the nodes are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[113495,113538],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to put in the array.&lt;/p&gt;\\n","pos":[113601,113652],"source":"\\n<p>The number of nodes to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes put in the array.&lt;/p&gt;\\n","pos":[113711,113759],"source":"\\n<p>The number of nodes put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[113878,113931],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[114048,114111],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[114228,114312],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[115401,115477],"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Decimal[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Decimal[], Int32, Int32)","pos":[0,76]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[116640,116681],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[116769,116813],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the nodes are put.&lt;/p&gt;\\n","pos":[116880,116930],"source":"\\n<p>The array into which the nodes are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[116994,117037],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to put in the array.&lt;/p&gt;\\n","pos":[117100,117151],"source":"\\n<p>The number of nodes to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes put in the array.&lt;/p&gt;\\n","pos":[117210,117258],"source":"\\n<p>The number of nodes put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[117377,117430],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[117547,117610],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[117727,117811],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[118893,118968],"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Double[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Double[], Int32, Int32)","pos":[0,75]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[120132,120173],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[120261,120305],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the nodes are put.&lt;/p&gt;\\n","pos":[120371,120421],"source":"\\n<p>The array into which the nodes are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[120485,120528],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to put in the array.&lt;/p&gt;\\n","pos":[120591,120642],"source":"\\n<p>The number of nodes to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes put in the array.&lt;/p&gt;\\n","pos":[120701,120749],"source":"\\n<p>The number of nodes put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[120868,120921],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[121038,121101],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[121218,121302],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[122374,122447],"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Guid[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Guid[], Int32, Int32)","pos":[0,73]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[123598,123639],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[123727,123771],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the nodes are put.&lt;/p&gt;\\n","pos":[123835,123885],"source":"\\n<p>The array into which the nodes are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[123949,123992],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to put in the array.&lt;/p&gt;\\n","pos":[124055,124106],"source":"\\n<p>The number of nodes to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes put in the array.&lt;/p&gt;\\n","pos":[124165,124213],"source":"\\n<p>The number of nodes put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[124332,124385],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[124502,124565],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[124682,124766],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[125833,125907],"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Int16[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Int16[], Int32, Int32)","pos":[0,74]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[127015,127056],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[127144,127188],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the integers are put.&lt;/p&gt;\\n","pos":[127253,127306],"source":"\\n<p>The array into which the integers are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[127370,127413],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of integers to put in the array.&lt;/p&gt;\\n","pos":[127476,127530],"source":"\\n<p>The number of integers to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of integers put in the array.&lt;/p&gt;\\n","pos":[127589,127640],"source":"\\n<p>The number of integers put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[127759,127812],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[127929,127992],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[128109,128193],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[129264,129338],"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Int32[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Int32[], Int32, Int32)","pos":[0,74]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[130423,130464],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[130552,130596],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the integers are put.&lt;/p&gt;\\n","pos":[130661,130714],"source":"\\n<p>The array into which the integers are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[130778,130821],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of integers to put in the array.&lt;/p&gt;\\n","pos":[130884,130938],"source":"\\n<p>The number of integers to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of integers put in the array.&lt;/p&gt;\\n","pos":[130997,131048],"source":"\\n<p>The number of integers put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[131167,131220],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[131337,131400],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[131517,131601],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[132672,132746],"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Int64[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Int64[], Int32, Int32)","pos":[0,74]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[133851,133892],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[133980,134024],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the integers are put.&lt;/p&gt;\\n","pos":[134089,134142],"source":"\\n<p>The array into which the integers are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[134206,134249],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of integers to put in the array.&lt;/p&gt;\\n","pos":[134312,134366],"source":"\\n<p>The number of integers to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of integers put in the array.&lt;/p&gt;\\n","pos":[134425,134476],"source":"\\n<p>The number of integers put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[134595,134648],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[134765,134828],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[134945,135029],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[136103,136178],"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Single[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, Single[], Int32, Int32)","pos":[0,75]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[137287,137328],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[137416,137460],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the float numbers are put.&lt;/p&gt;\\n","pos":[137526,137584],"source":"\\n<p>The array into which the float numbers are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[137648,137691],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of float numbers to put in the array.&lt;/p&gt;\\n","pos":[137754,137813],"source":"\\n<p>The number of float numbers to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of float numbers put in the array.&lt;/p&gt;\\n","pos":[137872,137928],"source":"\\n<p>The number of float numbers put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[138047,138100],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[138217,138280],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[138397,138481],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[139565,139642],"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, TimeSpan[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray(XmlDictionaryString, XmlDictionaryString, TimeSpan[], Int32, Int32)","pos":[0,77]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[140809,140850],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[140938,140982],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array into which the nodes are put.&lt;/p&gt;\\n","pos":[141050,141100],"source":"\\n<p>The array into which the nodes are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[141164,141207],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to put in the array.&lt;/p&gt;\\n","pos":[141270,141321],"source":"\\n<p>The number of nodes to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes put in the array.&lt;/p&gt;\\n","pos":[141380,141428],"source":"\\n<p>The number of nodes put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[141547,141600],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[141717,141780],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[141897,141981],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[142860,142892],"content":"ReadBooleanArray(String, String)","needQuote":true,"nodes":[{"content":"ReadBooleanArray(String, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[143842,143883],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[143954,143998],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[144806,144864],"content":"ReadBooleanArray(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"ReadBooleanArray(XmlDictionaryString, XmlDictionaryString)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[145917,145958],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[146046,146090],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[146864,146906],"content":"ReadContentAs(Type, IXmlNamespaceResolver)","needQuote":true,"nodes":[{"content":"ReadContentAs(Type, IXmlNamespaceResolver)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The concatenated text content or attribute value converted to the requested type.&lt;/p&gt;\\n","pos":[148460,148552],"source":"\\n<p>The concatenated text content or attribute value converted to the requested type.</p>\\n"},{"pos":[148944,148965],"content":"ReadContentAsBase64()","needQuote":true,"nodes":[{"content":"ReadContentAsBase64()","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A byte array that contains the Base64 decoded binary bytes.&lt;/p&gt;\\n","pos":[149722,149792],"source":"\\n<p>A byte array that contains the Base64 decoded binary bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The array size is greater than the MaxArrayLength quota for this reader.&lt;/p&gt;\\n","pos":[149901,149984],"source":"\\n<p>The array size is greater than the MaxArrayLength quota for this reader.</p>\\n"},{"pos":[150356,150377],"content":"ReadContentAsBinHex()","needQuote":true,"nodes":[{"content":"ReadContentAsBinHex()","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A byte array that contains the &lt;strong&gt;BinHex&lt;/strong&gt; decoded binary bytes.&lt;/p&gt;\\n","pos":[151151,151238],"source":"\\n<p>A byte array that contains the <strong>BinHex</strong> decoded binary bytes.</p>\\n"},{"pos":[151885,151911],"content":"ReadContentAsBinHex(Int32)","needQuote":true,"nodes":[{"content":"ReadContentAsBinHex(Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The maximum array length.&lt;/p&gt;\\n","pos":[152789,152825],"source":"\\n<p>The maximum array length.</p>\\n"},{"content":"\\n&lt;p&gt;A byte array that contains the &lt;strong&gt;BinHex&lt;/strong&gt; decoded binary bytes.&lt;/p&gt;\\n","pos":[152885,152972],"source":"\\n<p>A byte array that contains the <strong>BinHex</strong> decoded binary bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The array size is greater than &lt;em&gt;maxByteArrayContentLength&lt;/em&gt;.&lt;/p&gt;\\n","pos":[153081,153158],"source":"\\n<p>The array size is greater than <em>maxByteArrayContentLength</em>.</p>\\n"},{"pos":[153633,153673],"content":"ReadContentAsChars(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadContentAsChars(Char[], Int32, Int32)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The array into which the characters are put.&lt;/p&gt;\\n","pos":[154565,154620],"source":"\\n<p>The array into which the characters are put.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[154684,154727],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to put in the array.&lt;/p&gt;\\n","pos":[154790,154846],"source":"\\n<p>The number of characters to put in the array.</p>\\n"},{"content":"\\n&lt;p&gt;Number of characters read.&lt;/p&gt;\\n","pos":[154905,154942],"source":"\\n<p>Number of characters read.</p>\\n"},{"pos":[155576,155598],"content":"ReadContentAsDecimal()","needQuote":true,"nodes":[{"content":"ReadContentAsDecimal()","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;decimal&lt;/strong&gt; representation of node's content.&lt;/p&gt;\\n","pos":[156353,156426],"source":"\\n<p>The <strong>decimal</strong> representation of node's content.</p>\\n"},{"pos":[156795,156815],"content":"ReadContentAsFloat()","needQuote":true,"nodes":[{"content":"ReadContentAsFloat()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;float&lt;/strong&gt; representation of node's content.&lt;/p&gt;\\n","pos":[157556,157627],"source":"\\n<p>The <strong>float</strong> representation of node's content.</p>\\n"},{"pos":[157991,158010],"content":"ReadContentAsGuid()","needQuote":true,"nodes":[{"content":"ReadContentAsGuid()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;guid&lt;/strong&gt; representation of node's content.&lt;/p&gt;\\n","pos":[158742,158812],"source":"\\n<p>The <strong>guid</strong> representation of node's content.</p>\\n"},{"pos":[159296,159346],"content":"ReadContentAsQualifiedName(out String, out String)","needQuote":true,"nodes":[{"content":"ReadContentAsQualifiedName(out String, out String)","pos":[0,50]}]},{"pos":[161357,161378],"content":"ReadContentAsString()","needQuote":true,"nodes":[{"content":"ReadContentAsString()","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The node content in a string representation.&lt;/p&gt;\\n","pos":[162110,162165],"source":"\\n<p>The node content in a string representation.</p>\\n"},{"pos":[162578,162604],"content":"ReadContentAsString(Int32)","needQuote":true,"nodes":[{"content":"ReadContentAsString(Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The maximum string length.&lt;/p&gt;\\n","pos":[163432,163469],"source":"\\n<p>The maximum string length.</p>\\n"},{"content":"\\n&lt;p&gt;Node content in string representation.&lt;/p&gt;\\n","pos":[163529,163578],"source":"\\n<p>Node content in string representation.</p>\\n"},{"pos":[164026,164066],"content":"ReadContentAsString(String[], out Int32)","needQuote":true,"nodes":[{"content":"ReadContentAsString(String[], out Int32)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The array of strings to match content against.&lt;/p&gt;\\n","pos":[164932,164989],"source":"\\n<p>The array of strings to match content against.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the entry in &lt;em&gt;strings&lt;/em&gt; that matches the content.&lt;/p&gt;\\n","pos":[165052,165131],"source":"\\n<p>The index of the entry in <em>strings</em> that matches the content.</p>\\n"},{"content":"\\n&lt;p&gt;The node content in a string representation.&lt;/p&gt;\\n","pos":[165191,165246],"source":"\\n<p>The node content in a string representation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;strings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[165365,165420],"source":"\\n<p>\\n<em>strings</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An entry in&lt;em&gt; strings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[165525,165590],"source":"\\n<p>An entry in<em> strings</em> is <strong>null</strong>.</p>\\n"},{"pos":[166364,166417],"content":"ReadContentAsString(XmlDictionaryString[], out Int32)","needQuote":true,"nodes":[{"content":"ReadContentAsString(XmlDictionaryString[], out Int32)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;The index of the entry in &lt;em&gt;strings&lt;/em&gt; that matches the content.&lt;/p&gt;\\n","pos":[167554,167633],"source":"\\n<p>The index of the entry in <em>strings</em> that matches the content.</p>\\n"},{"content":"\\n&lt;p&gt;The node content in a string representation.&lt;/p&gt;\\n","pos":[167693,167748],"source":"\\n<p>The node content in a string representation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;strings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[167867,167922],"source":"\\n<p>\\n<em>strings</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An entry in&lt;em&gt; strings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[168027,168092],"source":"\\n<p>An entry in<em> strings</em> is <strong>null</strong>.</p>\\n"},{"pos":[168784,168807],"content":"ReadContentAsTimeSpan()","needQuote":true,"nodes":[{"content":"ReadContentAsTimeSpan()","pos":[0,23]}]},{"pos":[170123,170146],"content":"ReadContentAsUniqueId()","needQuote":true,"nodes":[{"content":"ReadContentAsUniqueId()","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The node's content represented as a unique identifier.&lt;/p&gt;\\n","pos":[170908,170973],"source":"\\n<p>The node's content represented as a unique identifier.</p>\\n"},{"pos":[171428,171461],"content":"ReadDateTimeArray(String, String)","needQuote":true,"nodes":[{"content":"ReadDateTimeArray(String, String)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[172399,172440],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[172511,172555],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[173315,173374],"content":"ReadDateTimeArray(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"ReadDateTimeArray(XmlDictionaryString, XmlDictionaryString)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[174415,174456],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[174544,174588],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[175269,175301],"content":"ReadDecimalArray(String, String)","needQuote":true,"nodes":[{"content":"ReadDecimalArray(String, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[176236,176277],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[176348,176392],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[177146,177204],"content":"ReadDecimalArray(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"ReadDecimalArray(XmlDictionaryString, XmlDictionaryString)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[178242,178283],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[178371,178415],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[179090,179121],"content":"ReadDoubleArray(String, String)","needQuote":true,"nodes":[{"content":"ReadDoubleArray(String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[180049,180090],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[180161,180205],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[180953,181010],"content":"ReadDoubleArray(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"ReadDoubleArray(XmlDictionaryString, XmlDictionaryString)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[182041,182082],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[182170,182214],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[182832,182860],"content":"ReadElementContentAsBase64()","needQuote":true,"nodes":[{"content":"ReadElementContentAsBase64()","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The node's content represented as an array of Base64 bytes.&lt;/p&gt;\\n","pos":[183636,183706],"source":"\\n<p>The node's content represented as an array of Base64 bytes.</p>\\n"},{"pos":[184106,184134],"content":"ReadElementContentAsBinHex()","needQuote":true,"nodes":[{"content":"ReadElementContentAsBinHex()","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The node's content represented as an array of &lt;strong&gt;BinHex&lt;/strong&gt; bytes.&lt;/p&gt;\\n","pos":[184928,185015],"source":"\\n<p>The node's content represented as an array of <strong>BinHex</strong> bytes.</p>\\n"},{"pos":[185418,185447],"content":"ReadElementContentAsBoolean()","needQuote":true,"nodes":[{"content":"ReadElementContentAsBoolean()","pos":[0,29]}]},{"pos":[186808,186837],"content":"ReadElementContentAsDecimal()","needQuote":true,"nodes":[{"content":"ReadElementContentAsDecimal()","pos":[0,29]}]},{"pos":[188198,188226],"content":"ReadElementContentAsDouble()","needQuote":true,"nodes":[{"content":"ReadElementContentAsDouble()","pos":[0,28]}]},{"pos":[189574,189601],"content":"ReadElementContentAsFloat()","needQuote":true,"nodes":[{"content":"ReadElementContentAsFloat()","pos":[0,27]}]},{"pos":[190988,191014],"content":"ReadElementContentAsGuid()","needQuote":true,"nodes":[{"content":"ReadElementContentAsGuid()","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The element is not in valid format.&lt;/p&gt;\\n","pos":[192060,192106],"source":"\\n<p>The element is not in valid format.</p>\\n"},{"content":"\\n&lt;p&gt;The element is not in valid format.&lt;/p&gt;\\n","pos":[192199,192245],"source":"\\n<p>The element is not in valid format.</p>\\n"},{"pos":[192634,192659],"content":"ReadElementContentAsInt()","needQuote":true,"nodes":[{"content":"ReadElementContentAsInt()","pos":[0,25]}]},{"pos":[194006,194032],"content":"ReadElementContentAsLong()","needQuote":true,"nodes":[{"content":"ReadElementContentAsLong()","pos":[0,26]}]},{"pos":[195396,195424],"content":"ReadElementContentAsString()","needQuote":true,"nodes":[{"content":"ReadElementContentAsString()","pos":[0,28]}]},{"pos":[196781,196811],"content":"ReadElementContentAsTimeSpan()","needQuote":true,"nodes":[{"content":"ReadElementContentAsTimeSpan()","pos":[0,30]}]},{"pos":[198190,198220],"content":"ReadElementContentAsUniqueId()","needQuote":true,"nodes":[{"content":"ReadElementContentAsUniqueId()","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The node's content represented as a unique identifier.&lt;/p&gt;\\n","pos":[199014,199079],"source":"\\n<p>The node's content represented as a unique identifier.</p>\\n"},{"content":"\\n&lt;p&gt;The element is not in valid format.&lt;/p&gt;\\n","pos":[199190,199236],"source":"\\n<p>The element is not in valid format.</p>\\n"},{"content":"\\n&lt;p&gt;The element is not in valid format.&lt;/p&gt;\\n","pos":[199329,199375],"source":"\\n<p>The element is not in valid format.</p>\\n"},{"pos":[199759,199781],"content":"ReadFullStartElement()","needQuote":true,"nodes":[{"content":"ReadFullStartElement()","pos":[0,22]}]},{"pos":[201233,201261],"content":"ReadFullStartElement(String)","needQuote":true,"nodes":[{"content":"ReadFullStartElement(String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The qualified name of the element.&lt;/p&gt;\\n","pos":[202118,202163],"source":"\\n<p>The qualified name of the element.</p>\\n"},{"pos":[202954,202990],"content":"ReadFullStartElement(String, String)","needQuote":true,"nodes":[{"content":"ReadFullStartElement(String, String)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[203953,203994],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[204065,204109],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[205010,205072],"content":"ReadFullStartElement(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"ReadFullStartElement(XmlDictionaryString, XmlDictionaryString)","pos":[0,62]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[206138,206179],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[206267,206311],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[207115,207144],"content":"ReadGuidArray(String, String)","needQuote":true,"nodes":[{"content":"ReadGuidArray(String, String)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[208138,208179],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[208250,208294],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[209000,209055],"content":"ReadGuidArray(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"ReadGuidArray(XmlDictionaryString, XmlDictionaryString)","pos":[0,55]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[210152,210193],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[210281,210325],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[210958,210988],"content":"ReadInt16Array(String, String)","needQuote":true,"nodes":[{"content":"ReadInt16Array(String, String)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[212023,212064],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[212135,212179],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[212925,212981],"content":"ReadInt16Array(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"ReadInt16Array(XmlDictionaryString, XmlDictionaryString)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[214119,214160],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[214248,214292],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[214962,214992],"content":"ReadInt32Array(String, String)","needQuote":true,"nodes":[{"content":"ReadInt32Array(String, String)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[216004,216045],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[216116,216160],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[216883,216939],"content":"ReadInt32Array(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"ReadInt32Array(XmlDictionaryString, XmlDictionaryString)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[218054,218095],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[218183,218227],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[218874,218904],"content":"ReadInt64Array(String, String)","needQuote":true,"nodes":[{"content":"ReadInt64Array(String, String)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[219936,219977],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[220048,220092],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[220837,220893],"content":"ReadInt64Array(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"ReadInt64Array(XmlDictionaryString, XmlDictionaryString)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[222028,222069],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[222157,222201],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[222873,222904],"content":"ReadSingleArray(String, String)","needQuote":true,"nodes":[{"content":"ReadSingleArray(String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[223944,223985],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[224056,224100],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[224851,224908],"content":"ReadSingleArray(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"ReadSingleArray(XmlDictionaryString, XmlDictionaryString)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[226051,226092],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[226180,226224],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[227004,227062],"content":"ReadStartElement(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"ReadStartElement(XmlDictionaryString, XmlDictionaryString)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[228112,228153],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[228241,228285],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[228775,228808],"content":"ReadTimeSpanArray(String, String)","needQuote":true,"nodes":[{"content":"ReadTimeSpanArray(String, String)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[229826,229867],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[229938,229982],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[230708,230767],"content":"ReadTimeSpanArray(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"ReadTimeSpanArray(XmlDictionaryString, XmlDictionaryString)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[231888,231929],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[232017,232061],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"pos":[232747,232786],"content":"ReadValueAsBase64(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadValueAsBase64(Byte[], Int32, Int32)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The buffer from which to read.&lt;/p&gt;\\n","pos":[233640,233681],"source":"\\n<p>The buffer from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;The starting position from which to read in &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[233745,233816],"source":"\\n<p>The starting position from which to read in <em>buffer</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes that can be read from &lt;em&gt;buffer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[233879,233948],"source":"\\n<p>The number of bytes that can be read from <em>buffer</em>.</p>\\n"},{"content":"\\n&lt;p&gt;Not implemented.&lt;/p&gt;\\n","pos":[234007,234034],"source":"\\n<p>Not implemented.</p>\\n"},{"content":"\\n&lt;p&gt;Always.&lt;/p&gt;\\n","pos":[234153,234171],"source":"\\n<p>Always.</p>\\n"},{"pos":[234951,234999],"content":"StartCanonicalization(Stream, Boolean, String[])","needQuote":true,"nodes":[{"content":"StartCanonicalization(Stream, Boolean, String[])","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The stream to read from.&lt;/p&gt;\\n","pos":[235933,235968],"source":"\\n<p>The stream to read from.</p>\\n"},{"content":"\\n&lt;p&gt;Determines whether comments are included.&lt;/p&gt;\\n","pos":[236043,236095],"source":"\\n<p>Determines whether comments are included.</p>\\n"},{"content":"\\n&lt;p&gt;The prefixes to be included.&lt;/p&gt;\\n","pos":[236173,236212],"source":"\\n<p>The prefixes to be included.</p>\\n"},{"content":"\\n&lt;p&gt;Always.&lt;/p&gt;\\n","pos":[236331,236349],"source":"\\n<p>Always.</p>\\n"},{"pos":[237054,237082],"content":"TryGetArrayLength(out Int32)","needQuote":true,"nodes":[{"content":"TryGetArrayLength(out Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;Returns 0, unless overridden in a derived class.&lt;/p&gt;\\n","pos":[237951,238010],"source":"\\n<p>Returns 0, unless overridden in a derived class.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;false&lt;/strong&gt;, unless overridden in a derived class.&lt;/p&gt;\\n","pos":[238071,238145],"source":"\\n<p>\\n<strong>false</strong>, unless overridden in a derived class.</p>\\n"},{"pos":[238783,238819],"content":"TryGetBase64ContentLength(out Int32)","needQuote":true,"nodes":[{"content":"TryGetBase64ContentLength(out Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;Returns 0, unless overridden in a derived class.&lt;/p&gt;\\n","pos":[239723,239782],"source":"\\n<p>Returns 0, unless overridden in a derived class.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;false&lt;/strong&gt;, unless overridden in a derived class.&lt;/p&gt;\\n","pos":[239843,239917],"source":"\\n<p>\\n<strong>false</strong>, unless overridden in a derived class.</p>\\n"},{"pos":[240665,240723],"content":"TryGetLocalNameAsDictionaryString(out XmlDictionaryString)","needQuote":true,"nodes":[{"content":"TryGetLocalNameAsDictionaryString(out XmlDictionaryString)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;Returns &lt;strong&gt;null&lt;/strong&gt;, unless overridden in a derived class.","pos":[241732,241805],"source":"\\n<p>Returns <strong>null</strong>, unless overridden in a derived class."},{"content":".&lt;/p&gt;\\n","pos":[241806,241813],"source":" .</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;false&lt;/strong&gt;, unless overridden in a derived class.&lt;/p&gt;\\n","pos":[241874,241948],"source":"\\n<p>\\n<strong>false</strong>, unless overridden in a derived class.</p>\\n"},{"pos":[242797,242858],"content":"TryGetNamespaceUriAsDictionaryString(out XmlDictionaryString)","needQuote":true,"nodes":[{"content":"TryGetNamespaceUriAsDictionaryString(out XmlDictionaryString)","pos":[0,61]}]},{"content":"\\n&lt;p&gt;Returns &lt;strong&gt;null&lt;/strong&gt;, unless overridden in a derived class.&lt;/p&gt;\\n","pos":[243888,243967],"source":"\\n<p>Returns <strong>null</strong>, unless overridden in a derived class.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;false&lt;/strong&gt;, unless overridden in a derived class.&lt;/p&gt;\\n","pos":[244028,244102],"source":"\\n<p>\\n<strong>false</strong>, unless overridden in a derived class.</p>\\n"},{"pos":[244942,244996],"content":"TryGetValueAsDictionaryString(out XmlDictionaryString)","needQuote":true,"nodes":[{"content":"TryGetValueAsDictionaryString(out XmlDictionaryString)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;Returns &lt;strong&gt;null&lt;/strong&gt;, unless overridden in a derived class.&lt;/p&gt;\\n","pos":[245977,246056],"source":"\\n<p>Returns <strong>null</strong>, unless overridden in a derived class.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;false&lt;/strong&gt;, unless overridden in a derived class.&lt;/p&gt;\\n","pos":[246117,246191],"source":"\\n<p>\\n<strong>false</strong>, unless overridden in a derived class.</p>\\n"},{"pos":[246706,246716],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[246859,246865],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[246986,246992],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[247124,247131],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[247306,247331],"content":"XmlDictionaryReaderQuotas","needQuote":true,"nodes":[{"content":"XmlDictionaryReaderQuotas","pos":[0,25]}]},{"pos":[247504,247510],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[247630,247634],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[247693,247695]},{"pos":[247758,247762],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[247820,247822],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[247954,247959],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[248117,248131],"content":"IXmlDictionary","needQuote":true,"nodes":[{"content":"IXmlDictionary","pos":[0,14]}]},{"pos":[248329,248348],"content":"XmlDictionaryReader","needQuote":true,"nodes":[{"content":"XmlDictionaryReader","pos":[0,19]}]},{"pos":[248564,248586],"content":"XmlBinaryReaderSession","needQuote":true,"nodes":[{"content":"XmlBinaryReaderSession","pos":[0,22]}]},{"pos":[248793,248799],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[248929,248938],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[249089,249098],"content":"XmlReader","needQuote":true,"nodes":[{"content":"XmlReader","pos":[0,9]}]},{"pos":[249272,249280],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[249469,249495],"content":"OnXmlDictionaryReaderClose","needQuote":true,"nodes":[{"content":"OnXmlDictionaryReaderClose","pos":[0,26]}]},{"pos":[249689,249700],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[249867,249886],"content":"XmlDictionaryString","needQuote":true,"nodes":[{"content":"XmlDictionaryString","pos":[0,19]}]},{"pos":[250078,250084],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[250194,250202],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[250330,250336],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[250397,250399]},{"pos":[250464,250470],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[250530,250532],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[250651,250672],"content":"XmlDictionaryString[]","needQuote":true,"nodes":[{"content":"XmlDictionaryString[]","pos":[0,21]}]},{"pos":[250864,250883],"content":"XmlDictionaryString","needQuote":true,"nodes":[{"content":"XmlDictionaryString","pos":[0,19]}]},{"content":"[]","pos":[250940,250942]},{"pos":[251024,251043],"content":"XmlDictionaryString","needQuote":true,"nodes":[{"content":"XmlDictionaryString","pos":[0,19]}]},{"pos":[251099,251101],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[251262,251266],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[251418,251429],"content":"XmlNodeType","needQuote":true,"nodes":[{"content":"XmlNodeType","pos":[0,11]}]},{"pos":[251563,251572],"content":"Boolean[]","needQuote":true,"nodes":[{"content":"Boolean[]","pos":[0,9]}]},{"pos":[251704,251711],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"content":"[]","pos":[251773,251775]},{"pos":[251841,251848],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[251909,251911],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[252017,252027],"content":"DateTime[]","needQuote":true,"nodes":[{"content":"DateTime[]","pos":[0,10]}]},{"pos":[252163,252171],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":"[]","pos":[252234,252236]},{"pos":[252303,252311],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[252373,252375],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[252482,252491],"content":"Decimal[]","needQuote":true,"nodes":[{"content":"Decimal[]","pos":[0,9]}]},{"pos":[252623,252630],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"content":"[]","pos":[252692,252694]},{"pos":[252760,252767],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[252828,252830],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[252934,252942],"content":"Double[]","needQuote":true,"nodes":[{"content":"Double[]","pos":[0,8]}]},{"pos":[253070,253076],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"content":"[]","pos":[253137,253139]},{"pos":[253204,253210],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[253270,253272],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[253372,253378],"content":"Guid[]","needQuote":true,"nodes":[{"content":"Guid[]","pos":[0,6]}]},{"pos":[253498,253502],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"content":"[]","pos":[253561,253563]},{"pos":[253626,253630],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[253688,253690],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[253787,253794],"content":"Int16[]","needQuote":true,"nodes":[{"content":"Int16[]","pos":[0,7]}]},{"pos":[253918,253923],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"content":"[]","pos":[253983,253985]},{"pos":[254049,254054],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[254113,254115],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[254214,254221],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[254345,254350],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[254410,254412]},{"pos":[254476,254481],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[254540,254542],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[254641,254648],"content":"Int64[]","needQuote":true,"nodes":[{"content":"Int64[]","pos":[0,7]}]},{"pos":[254772,254777],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":"[]","pos":[254837,254839]},{"pos":[254903,254908],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[254967,254969],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[255069,255077],"content":"Single[]","needQuote":true,"nodes":[{"content":"Single[]","pos":[0,8]}]},{"pos":[255205,255211],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"content":"[]","pos":[255272,255274]},{"pos":[255339,255345],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[255405,255407],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[255511,255521],"content":"TimeSpan[]","needQuote":true,"nodes":[{"content":"TimeSpan[]","pos":[0,10]}]},{"pos":[255657,255665],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":"[]","pos":[255707,255709]},{"pos":[255776,255784],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[255825,255827],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[255991,256012],"content":"IXmlNamespaceResolver","needQuote":true,"nodes":[{"content":"IXmlNamespaceResolver","pos":[0,21]}]},{"pos":[256173,256179],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[256299,256303],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[256362,256364]},{"pos":[256427,256431],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[256489,256491],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[256625,256632],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[256780,256786],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[256929,256933],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[257074,257082],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[257243,257251],"content":"UniqueId","needQuote":true,"nodes":[{"content":"UniqueId","pos":[0,8]}]},{"pos":[257410,257416],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[257560,257565],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[257705,257726],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[257920,257947],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[258170,258191],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[258374,258386],"content":"XmlException","needQuote":true,"nodes":[{"content":"XmlException","pos":[0,12]}]},{"pos":[258568,258585],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[258772,258787],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Xml.XmlDictionaryReader\n  commentId: T:System.Xml.XmlDictionaryReader\n  id: XmlDictionaryReader\n  parent: System.Xml\n  children:\n  - System.Xml.XmlDictionaryReader.#ctor\n  - System.Xml.XmlDictionaryReader.CanCanonicalize\n  - System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)\n  - System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)\n  - System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)\n  - System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)\n  - System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)\n  - System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)\n  - System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)\n  - System.Xml.XmlDictionaryReader.CreateDictionaryReader(System.Xml.XmlReader)\n  - System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)\n  - System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)\n  - System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)\n  - System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)\n  - System.Xml.XmlDictionaryReader.EndCanonicalization\n  - System.Xml.XmlDictionaryReader.GetAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.IndexOfLocalName(System.String[],System.String)\n  - System.Xml.XmlDictionaryReader.IndexOfLocalName(System.Xml.XmlDictionaryString[],System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.IsLocalName(System.String)\n  - System.Xml.XmlDictionaryReader.IsLocalName(System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.IsNamespaceUri(System.String)\n  - System.Xml.XmlDictionaryReader.IsNamespaceUri(System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.IsStartArray(System.Type@)\n  - System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.IsTextNode(System.Xml.XmlNodeType)\n  - System.Xml.XmlDictionaryReader.MoveToStartElement\n  - System.Xml.XmlDictionaryReader.MoveToStartElement(System.String)\n  - System.Xml.XmlDictionaryReader.MoveToStartElement(System.String,System.String)\n  - System.Xml.XmlDictionaryReader.MoveToStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.Quotas\n  - System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Boolean[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.DateTime[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Decimal[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Double[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Guid[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int16[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int32[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int64[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Single[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadBooleanArray(System.String,System.String)\n  - System.Xml.XmlDictionaryReader.ReadBooleanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)\n  - System.Xml.XmlDictionaryReader.ReadContentAsBase64\n  - System.Xml.XmlDictionaryReader.ReadContentAsBinHex\n  - System.Xml.XmlDictionaryReader.ReadContentAsBinHex(System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadContentAsChars(System.Char[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadContentAsDecimal\n  - System.Xml.XmlDictionaryReader.ReadContentAsFloat\n  - System.Xml.XmlDictionaryReader.ReadContentAsGuid\n  - System.Xml.XmlDictionaryReader.ReadContentAsQualifiedName(System.String@,System.String@)\n  - System.Xml.XmlDictionaryReader.ReadContentAsString\n  - System.Xml.XmlDictionaryReader.ReadContentAsString(System.Int32)\n  - System.Xml.XmlDictionaryReader.ReadContentAsString(System.String[],System.Int32@)\n  - System.Xml.XmlDictionaryReader.ReadContentAsString(System.Xml.XmlDictionaryString[],System.Int32@)\n  - System.Xml.XmlDictionaryReader.ReadContentAsTimeSpan\n  - System.Xml.XmlDictionaryReader.ReadContentAsUniqueId\n  - System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.String,System.String)\n  - System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.ReadDecimalArray(System.String,System.String)\n  - System.Xml.XmlDictionaryReader.ReadDecimalArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.ReadDoubleArray(System.String,System.String)\n  - System.Xml.XmlDictionaryReader.ReadDoubleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.ReadElementContentAsBase64\n  - System.Xml.XmlDictionaryReader.ReadElementContentAsBinHex\n  - System.Xml.XmlDictionaryReader.ReadElementContentAsBoolean\n  - System.Xml.XmlDictionaryReader.ReadElementContentAsDecimal\n  - System.Xml.XmlDictionaryReader.ReadElementContentAsDouble\n  - System.Xml.XmlDictionaryReader.ReadElementContentAsFloat\n  - System.Xml.XmlDictionaryReader.ReadElementContentAsGuid\n  - System.Xml.XmlDictionaryReader.ReadElementContentAsInt\n  - System.Xml.XmlDictionaryReader.ReadElementContentAsLong\n  - System.Xml.XmlDictionaryReader.ReadElementContentAsString\n  - System.Xml.XmlDictionaryReader.ReadElementContentAsTimeSpan\n  - System.Xml.XmlDictionaryReader.ReadElementContentAsUniqueId\n  - System.Xml.XmlDictionaryReader.ReadFullStartElement\n  - System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String)\n  - System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String,System.String)\n  - System.Xml.XmlDictionaryReader.ReadFullStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.ReadGuidArray(System.String,System.String)\n  - System.Xml.XmlDictionaryReader.ReadGuidArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.ReadInt16Array(System.String,System.String)\n  - System.Xml.XmlDictionaryReader.ReadInt16Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.ReadInt32Array(System.String,System.String)\n  - System.Xml.XmlDictionaryReader.ReadInt32Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.ReadInt64Array(System.String,System.String)\n  - System.Xml.XmlDictionaryReader.ReadInt64Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.ReadSingleArray(System.String,System.String)\n  - System.Xml.XmlDictionaryReader.ReadSingleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.ReadStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.String,System.String)\n  - System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryReader.ReadValueAsBase64(System.Byte[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryReader.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])\n  - System.Xml.XmlDictionaryReader.TryGetArrayLength(System.Int32@)\n  - System.Xml.XmlDictionaryReader.TryGetBase64ContentLength(System.Int32@)\n  - System.Xml.XmlDictionaryReader.TryGetLocalNameAsDictionaryString(System.Xml.XmlDictionaryString@)\n  - System.Xml.XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(System.Xml.XmlDictionaryString@)\n  - System.Xml.XmlDictionaryReader.TryGetValueAsDictionaryString(System.Xml.XmlDictionaryString@)\n  langs:\n  - csharp\n  - vb\n  name: XmlDictionaryReader\n  fullName: System.Xml.XmlDictionaryReader\n  type: Class\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlDictionaryReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 133\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>An <strong>abstract</strong> class that the Windows Communication Foundation (WCF) derives from <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to do serialization and deserialization.</p>\\n\"\n  syntax:\n    content: 'public abstract class XmlDictionaryReader : XmlReader'\n    content.vb: >-\n      Public MustInherit Class XmlDictionaryReader\n          Inherits XmlReader\n  inheritance:\n  - System.Object\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: XmlDictionaryReader\n- uid: System.Xml.XmlDictionaryReader.#ctor\n  commentId: M:System.Xml.XmlDictionaryReader.#ctor\n  id: '#ctor'\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: XmlDictionaryReader()\n  fullName: System.Xml.XmlDictionaryReader.XmlDictionaryReader()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 135\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of this class.  Invoked only by its derived classes.</p>\\n\"\n  syntax:\n    content: protected XmlDictionaryReader()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: XmlDictionaryReader.XmlDictionaryReader()\n- uid: System.Xml.XmlDictionaryReader.CanCanonicalize\n  commentId: P:System.Xml.XmlDictionaryReader.CanCanonicalize\n  id: CanCanonicalize\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CanCanonicalize\n  fullName: System.Xml.XmlDictionaryReader.CanCanonicalize\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanCanonicalize\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 136\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>This property always returns <strong>false</strong>. Its derived classes can override to return <strong>true</strong> if they support canonicalization.</p>\\n\"\n  syntax:\n    content: public virtual bool CanCanonicalize { get; }\n    content.vb: Public Overridable ReadOnly Property CanCanonicalize As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlDictionaryReader.CanCanonicalize\n- uid: System.Xml.XmlDictionaryReader.Quotas\n  commentId: P:System.Xml.XmlDictionaryReader.Quotas\n  id: Quotas\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: Quotas\n  fullName: System.Xml.XmlDictionaryReader.Quotas\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Quotas\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 137\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the quota values that apply to the current instance of this class.</p>\\n\"\n  syntax:\n    content: public virtual XmlDictionaryReaderQuotas Quotas { get; }\n    content.vb: Public Overridable ReadOnly Property Quotas As XmlDictionaryReaderQuotas\n    parameters: []\n    return:\n      type: System.Xml.XmlDictionaryReaderQuotas\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlDictionaryReaderQuotas\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that applies to the current instance of this class. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlDictionaryReader.Quotas\n- uid: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)\n  commentId: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)\n  id: CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CreateBinaryReader(Byte[], Int32, Int32, IXmlDictionary, XmlDictionaryReaderQuotas)\n  fullName: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[], System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateBinaryReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 138\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can read .NET Binary XML Format.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryReader CreateBinaryReader(byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas)\n    content.vb: Public Shared Function CreateBinaryReader(buffer As Byte(), offset As Integer, count As Integer, dictionary As IXmlDictionary, quotas As XmlDictionaryReaderQuotas) As XmlDictionaryReader\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer from which to read.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting position from which to read in <em>buffer</em>.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes that can be read from <em>buffer</em>.</p>\\n\"\n    - id: dictionary\n      type: System.Xml.IXmlDictionary\n      description: \"\\n<p>\\n<xref href=\\\"System.Xml.XmlDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use.</p>\\n\"\n    - id: quotas\n      type: System.Xml.XmlDictionaryReaderQuotas\n      description: \"\\n<p>The quotas that apply to this operation.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is less than zero or greater than the buffer length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero or greater than the buffer length minus the offset.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte(), System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas)\n  name.vb: CreateBinaryReader(Byte(), Int32, Int32, IXmlDictionary, XmlDictionaryReaderQuotas)\n  nameWithType: XmlDictionaryReader.CreateBinaryReader(Byte[], Int32, Int32, IXmlDictionary, XmlDictionaryReaderQuotas)\n  nameWithType.vb: XmlDictionaryReader.CreateBinaryReader(Byte(), Int32, Int32, IXmlDictionary, XmlDictionaryReaderQuotas)\n- uid: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)\n  commentId: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)\n  id: CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CreateBinaryReader(Byte[], Int32, Int32, IXmlDictionary, XmlDictionaryReaderQuotas, XmlBinaryReaderSession)\n  fullName: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[], System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateBinaryReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 139\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can read .NET Binary XML Format.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryReader CreateBinaryReader(byte[] buffer, int offset, int count, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session)\n    content.vb: Public Shared Function CreateBinaryReader(buffer As Byte(), offset As Integer, count As Integer, dictionary As IXmlDictionary, quotas As XmlDictionaryReaderQuotas, session As XmlBinaryReaderSession) As XmlDictionaryReader\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer from which to read.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting position from which to read in <em>buffer</em>.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes that can be read from <em>buffer</em>.</p>\\n\"\n    - id: dictionary\n      type: System.Xml.IXmlDictionary\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use.</p>\\n\"\n    - id: quotas\n      type: System.Xml.XmlDictionaryReaderQuotas\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlDictionaryReaderQuotas\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to apply.</p>\\n\"\n    - id: session\n      type: System.Xml.XmlBinaryReaderSession\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlBinaryReaderSession\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is less than zero or greater than the buffer length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero or greater than the buffer length minus the offset.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte(), System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession)\n  name.vb: CreateBinaryReader(Byte(), Int32, Int32, IXmlDictionary, XmlDictionaryReaderQuotas, XmlBinaryReaderSession)\n  nameWithType: XmlDictionaryReader.CreateBinaryReader(Byte[], Int32, Int32, IXmlDictionary, XmlDictionaryReaderQuotas, XmlBinaryReaderSession)\n  nameWithType.vb: XmlDictionaryReader.CreateBinaryReader(Byte(), Int32, Int32, IXmlDictionary, XmlDictionaryReaderQuotas, XmlBinaryReaderSession)\n- uid: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)\n  commentId: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)\n  id: CreateBinaryReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CreateBinaryReader(Byte[], Int32, Int32, XmlDictionaryReaderQuotas)\n  fullName: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[], System.Int32, System.Int32, System.Xml.XmlDictionaryReaderQuotas)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateBinaryReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 140\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can read .NET Binary XML Format.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryReader CreateBinaryReader(byte[] buffer, int offset, int count, XmlDictionaryReaderQuotas quotas)\n    content.vb: Public Shared Function CreateBinaryReader(buffer As Byte(), offset As Integer, count As Integer, quotas As XmlDictionaryReaderQuotas) As XmlDictionaryReader\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer from which to read.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting position from which to read in <em>buffer</em>.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes that can be read from <em>buffer</em>.</p>\\n\"\n    - id: quotas\n      type: System.Xml.XmlDictionaryReaderQuotas\n      description: \"\\n<p>The quotas that apply to this operation.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is less than zero or greater than the buffer length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero or greater than the buffer length minus the offset.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte(), System.Int32, System.Int32, System.Xml.XmlDictionaryReaderQuotas)\n  name.vb: CreateBinaryReader(Byte(), Int32, Int32, XmlDictionaryReaderQuotas)\n  nameWithType: XmlDictionaryReader.CreateBinaryReader(Byte[], Int32, Int32, XmlDictionaryReaderQuotas)\n  nameWithType.vb: XmlDictionaryReader.CreateBinaryReader(Byte(), Int32, Int32, XmlDictionaryReaderQuotas)\n- uid: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)\n  commentId: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)\n  id: CreateBinaryReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CreateBinaryReader(Byte[], XmlDictionaryReaderQuotas)\n  fullName: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte[], System.Xml.XmlDictionaryReaderQuotas)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateBinaryReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 141\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can read .NET Binary XML Format.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryReader CreateBinaryReader(byte[] buffer, XmlDictionaryReaderQuotas quotas)\n    content.vb: Public Shared Function CreateBinaryReader(buffer As Byte(), quotas As XmlDictionaryReaderQuotas) As XmlDictionaryReader\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer from which to read.</p>\\n\"\n    - id: quotas\n      type: System.Xml.XmlDictionaryReaderQuotas\n      description: \"\\n<p>The quotas that apply to this operation.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.Byte(), System.Xml.XmlDictionaryReaderQuotas)\n  name.vb: CreateBinaryReader(Byte(), XmlDictionaryReaderQuotas)\n  nameWithType: XmlDictionaryReader.CreateBinaryReader(Byte[], XmlDictionaryReaderQuotas)\n  nameWithType.vb: XmlDictionaryReader.CreateBinaryReader(Byte(), XmlDictionaryReaderQuotas)\n- uid: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)\n  commentId: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)\n  id: CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CreateBinaryReader(Stream, IXmlDictionary, XmlDictionaryReaderQuotas)\n  fullName: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateBinaryReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 142\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can read .NET Binary XML Format.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryReader CreateBinaryReader(Stream stream, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas)\n    content.vb: Public Shared Function CreateBinaryReader(stream As Stream, dictionary As IXmlDictionary, quotas As XmlDictionaryReaderQuotas) As XmlDictionaryReader\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream from which to read.</p>\\n\"\n    - id: dictionary\n      type: System.Xml.IXmlDictionary\n      description: \"\\n<p>\\n<xref href=\\\"System.Xml.XmlDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use.</p>\\n\"\n    - id: quotas\n      type: System.Xml.XmlDictionaryReaderQuotas\n      description: \"\\n<p>The quotas that apply to this operation.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> or <em>quotas</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryReader.CreateBinaryReader(Stream, IXmlDictionary, XmlDictionaryReaderQuotas)\n- uid: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)\n  commentId: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)\n  id: CreateBinaryReader(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlDictionaryReaderQuotas,System.Xml.XmlBinaryReaderSession)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CreateBinaryReader(Stream, IXmlDictionary, XmlDictionaryReaderQuotas, XmlBinaryReaderSession)\n  fullName: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateBinaryReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 143\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can read .NET Binary XML Format.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryReader CreateBinaryReader(Stream stream, IXmlDictionary dictionary, XmlDictionaryReaderQuotas quotas, XmlBinaryReaderSession session)\n    content.vb: Public Shared Function CreateBinaryReader(stream As Stream, dictionary As IXmlDictionary, quotas As XmlDictionaryReaderQuotas, session As XmlBinaryReaderSession) As XmlDictionaryReader\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream from which to read.</p>\\n\"\n    - id: dictionary\n      type: System.Xml.IXmlDictionary\n      description: \"\\n<p>\\n<xref href=\\\"System.Xml.XmlDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use.</p>\\n\"\n    - id: quotas\n      type: System.Xml.XmlDictionaryReaderQuotas\n      description: \"\\n<p>The quotas that apply to this operation.</p>\\n\"\n    - id: session\n      type: System.Xml.XmlBinaryReaderSession\n      description: \"\\n<p>\\n<xref href=\\\"System.Xml.XmlBinaryReaderSession\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryReader.CreateBinaryReader(Stream, IXmlDictionary, XmlDictionaryReaderQuotas, XmlBinaryReaderSession)\n- uid: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)\n  commentId: M:System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)\n  id: CreateBinaryReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CreateBinaryReader(Stream, XmlDictionaryReaderQuotas)\n  fullName: System.Xml.XmlDictionaryReader.CreateBinaryReader(System.IO.Stream, System.Xml.XmlDictionaryReaderQuotas)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateBinaryReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 144\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can read .NET Binary XML Format.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryReader CreateBinaryReader(Stream stream, XmlDictionaryReaderQuotas quotas)\n    content.vb: Public Shared Function CreateBinaryReader(stream As Stream, quotas As XmlDictionaryReaderQuotas) As XmlDictionaryReader\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream from which to read.</p>\\n\"\n    - id: quotas\n      type: System.Xml.XmlDictionaryReaderQuotas\n      description: \"\\n<p>The quotas that apply to this operation.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryReader.CreateBinaryReader(Stream, XmlDictionaryReaderQuotas)\n- uid: System.Xml.XmlDictionaryReader.CreateDictionaryReader(System.Xml.XmlReader)\n  commentId: M:System.Xml.XmlDictionaryReader.CreateDictionaryReader(System.Xml.XmlReader)\n  id: CreateDictionaryReader(System.Xml.XmlReader)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CreateDictionaryReader(XmlReader)\n  fullName: System.Xml.XmlDictionaryReader.CreateDictionaryReader(System.Xml.XmlReader)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDictionaryReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 145\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an existing <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryReader CreateDictionaryReader(XmlReader reader)\n    content.vb: Public Shared Function CreateDictionaryReader(reader As XmlReader) As XmlDictionaryReader\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>reader</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryReader.CreateDictionaryReader(XmlReader)\n- uid: System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)\n  commentId: M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)\n  id: CreateTextReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CreateTextReader(Byte[], Int32, Int32, XmlDictionaryReaderQuotas)\n  fullName: System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[], System.Int32, System.Int32, System.Xml.XmlDictionaryReaderQuotas)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateTextReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 146\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryReader CreateTextReader(byte[] buffer, int offset, int count, XmlDictionaryReaderQuotas quotas)\n    content.vb: Public Shared Function CreateTextReader(buffer As Byte(), offset As Integer, count As Integer, quotas As XmlDictionaryReaderQuotas) As XmlDictionaryReader\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer from which to read.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting position from which to read in <em>buffer</em>.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes that can be read from <em>buffer</em>.</p>\\n\"\n    - id: quotas\n      type: System.Xml.XmlDictionaryReaderQuotas\n      description: \"\\n<p>The quotas applied to the reader.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte(), System.Int32, System.Int32, System.Xml.XmlDictionaryReaderQuotas)\n  name.vb: CreateTextReader(Byte(), Int32, Int32, XmlDictionaryReaderQuotas)\n  nameWithType: XmlDictionaryReader.CreateTextReader(Byte[], Int32, Int32, XmlDictionaryReaderQuotas)\n  nameWithType.vb: XmlDictionaryReader.CreateTextReader(Byte(), Int32, Int32, XmlDictionaryReaderQuotas)\n- uid: System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)\n  commentId: M:System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)\n  id: CreateTextReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CreateTextReader(Byte[], XmlDictionaryReaderQuotas)\n  fullName: System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte[], System.Xml.XmlDictionaryReaderQuotas)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateTextReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 147\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryReader CreateTextReader(byte[] buffer, XmlDictionaryReaderQuotas quotas)\n    content.vb: Public Shared Function CreateTextReader(buffer As Byte(), quotas As XmlDictionaryReaderQuotas) As XmlDictionaryReader\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer from which to read.</p>\\n\"\n    - id: quotas\n      type: System.Xml.XmlDictionaryReaderQuotas\n      description: \"\\n<p>The quotas applied to the reader.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.XmlDictionaryReader.CreateTextReader(System.Byte(), System.Xml.XmlDictionaryReaderQuotas)\n  name.vb: CreateTextReader(Byte(), XmlDictionaryReaderQuotas)\n  nameWithType: XmlDictionaryReader.CreateTextReader(Byte[], XmlDictionaryReaderQuotas)\n  nameWithType.vb: XmlDictionaryReader.CreateTextReader(Byte(), XmlDictionaryReaderQuotas)\n- uid: System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)\n  commentId: M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)\n  id: CreateTextReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CreateTextReader(Stream, Encoding, XmlDictionaryReaderQuotas, OnXmlDictionaryReaderClose)\n  fullName: System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream, System.Text.Encoding, System.Xml.XmlDictionaryReaderQuotas, System.Xml.OnXmlDictionaryReaderClose)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateTextReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 148\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryReader CreateTextReader(Stream stream, Encoding encoding, XmlDictionaryReaderQuotas quotas, OnXmlDictionaryReaderClose onClose)\n    content.vb: Public Shared Function CreateTextReader(stream As Stream, encoding As Encoding, quotas As XmlDictionaryReaderQuotas, onClose As OnXmlDictionaryReaderClose) As XmlDictionaryReader\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream from which to read.</p>\\n\"\n    - id: encoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the encoding properties to apply.</p>\\n\"\n    - id: quotas\n      type: System.Xml.XmlDictionaryReaderQuotas\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlDictionaryReaderQuotas\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to apply.</p>\\n\"\n    - id: onClose\n      type: System.Xml.OnXmlDictionaryReaderClose\n      description: \"\\n<p>The delegate to be called when the reader is closed.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryReader.CreateTextReader(Stream, Encoding, XmlDictionaryReaderQuotas, OnXmlDictionaryReaderClose)\n- uid: System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)\n  commentId: M:System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)\n  id: CreateTextReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: CreateTextReader(Stream, XmlDictionaryReaderQuotas)\n  fullName: System.Xml.XmlDictionaryReader.CreateTextReader(System.IO.Stream, System.Xml.XmlDictionaryReaderQuotas)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateTextReader\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 149\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryReader CreateTextReader(Stream stream, XmlDictionaryReaderQuotas quotas)\n    content.vb: Public Shared Function CreateTextReader(stream As Stream, quotas As XmlDictionaryReaderQuotas) As XmlDictionaryReader\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream from which to read.</p>\\n\"\n    - id: quotas\n      type: System.Xml.XmlDictionaryReaderQuotas\n      description: \"\\n<p>The quotas applied to the reader.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryReader.CreateTextReader(Stream, XmlDictionaryReaderQuotas)\n- uid: System.Xml.XmlDictionaryReader.EndCanonicalization\n  commentId: M:System.Xml.XmlDictionaryReader.EndCanonicalization\n  id: EndCanonicalization\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: EndCanonicalization()\n  fullName: System.Xml.XmlDictionaryReader.EndCanonicalization()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EndCanonicalization\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 150\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>This method is not yet implemented.</p>\\n\"\n  syntax:\n    content: public virtual void EndCanonicalization()\n    content.vb: Public Overridable Sub\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.EndCanonicalization()\n- uid: System.Xml.XmlDictionaryReader.GetAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.GetAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: GetAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: GetAttribute(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.GetAttribute(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAttribute\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 151\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>When overridden in a derived class, gets the value of an attribute.</p>\\n\"\n  syntax:\n    content: public virtual string GetAttribute(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function GetAttribute(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString) As String\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlDictionaryString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the local name of the attribute.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlDictionaryString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the namespace of the attribute.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the attribute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.GetAttribute(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.IndexOfLocalName(System.String[],System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.String[],System.String)\n  id: IndexOfLocalName(System.String[],System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: IndexOfLocalName(String[], String)\n  fullName: System.Xml.XmlDictionaryReader.IndexOfLocalName(System.String[], System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndexOfLocalName\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 152\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the index of the local name of the current node within an array of names.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOfLocalName(string[] localNames, string namespaceUri)\n    content.vb: Public Overridable Function IndexOfLocalName(localNames As String(), namespaceUri As String) As Integer\n    parameters:\n    - id: localNames\n      type: System.String[]\n      description: \"\\n<p>The string array of local names to be searched.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace of current node.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the local name of the current node within an array of names.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>localNames</em> or any of the names in the array is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>namespaceUri</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.IndexOfLocalName(System.String(), System.String)\n  name.vb: IndexOfLocalName(String(), String)\n  nameWithType: XmlDictionaryReader.IndexOfLocalName(String[], String)\n  nameWithType.vb: XmlDictionaryReader.IndexOfLocalName(String(), String)\n- uid: System.Xml.XmlDictionaryReader.IndexOfLocalName(System.Xml.XmlDictionaryString[],System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.Xml.XmlDictionaryString[],System.Xml.XmlDictionaryString)\n  id: IndexOfLocalName(System.Xml.XmlDictionaryString[],System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: IndexOfLocalName(XmlDictionaryString[], XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.IndexOfLocalName(System.Xml.XmlDictionaryString[], System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndexOfLocalName\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 153\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Gets the index of the local name of the current node within an array of names.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOfLocalName(XmlDictionaryString[] localNames, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function IndexOfLocalName(localNames As XmlDictionaryString(), namespaceUri As XmlDictionaryString) As Integer\n    parameters:\n    - id: localNames\n      type: System.Xml.XmlDictionaryString[]\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlDictionaryString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array of local names to be searched.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace of current node.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the local name of the current node within an array of names.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>localNames</em> or any of the names in the array is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>namespaceUri</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.IndexOfLocalName(System.Xml.XmlDictionaryString(), System.Xml.XmlDictionaryString)\n  name.vb: IndexOfLocalName(XmlDictionaryString(), XmlDictionaryString)\n  nameWithType: XmlDictionaryReader.IndexOfLocalName(XmlDictionaryString[], XmlDictionaryString)\n  nameWithType.vb: XmlDictionaryReader.IndexOfLocalName(XmlDictionaryString(), XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.IsLocalName(System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.IsLocalName(System.String)\n  id: IsLocalName(System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: IsLocalName(String)\n  fullName: System.Xml.XmlDictionaryReader.IsLocalName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsLocalName\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 154\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Checks whether the parameter, <em>localName</em>, is the local name of the current node.</p>\\n\"\n  syntax:\n    content: public virtual bool IsLocalName(string localName)\n    content.vb: Public Overridable Function IsLocalName(localName As String) As Boolean\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the current node.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>localName</em> matches local name of the current node; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.IsLocalName(String)\n- uid: System.Xml.XmlDictionaryReader.IsLocalName(System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.IsLocalName(System.Xml.XmlDictionaryString)\n  id: IsLocalName(System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: IsLocalName(XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.IsLocalName(System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsLocalName\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 155\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Checks whether the parameter, <em>localName</em>, is the local name of the current node.</p>\\n\"\n  syntax:\n    content: public virtual bool IsLocalName(XmlDictionaryString localName)\n    content.vb: Public Overridable Function IsLocalName(localName As XmlDictionaryString) As Boolean\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlDictionaryString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the local name of the current node.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>localName</em> matches local name of the current node; otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>localName</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.IsLocalName(XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.IsNamespaceUri(System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.String)\n  id: IsNamespaceUri(System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: IsNamespaceUri(String)\n  fullName: System.Xml.XmlDictionaryReader.IsNamespaceUri(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNamespaceUri\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 156\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Checks whether the parameter, <em>namespaceUri</em>, is the namespace of the current node.</p>\\n\"\n  syntax:\n    content: public virtual bool IsNamespaceUri(string namespaceUri)\n    content.vb: Public Overridable Function IsNamespaceUri(namespaceUri As String) As Boolean\n    parameters:\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace of current node.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>namespaceUri</em> matches namespace of the current node; otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>namespaceUri</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.IsNamespaceUri(String)\n- uid: System.Xml.XmlDictionaryReader.IsNamespaceUri(System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.Xml.XmlDictionaryString)\n  id: IsNamespaceUri(System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: IsNamespaceUri(XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.IsNamespaceUri(System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNamespaceUri\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 157\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Checks whether the parameter, <em>namespaceUri</em>, is the namespace of the current node.</p>\\n\"\n  syntax:\n    content: public virtual bool IsNamespaceUri(XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function IsNamespaceUri(namespaceUri As XmlDictionaryString) As Boolean\n    parameters:\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>Namespace of current node.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>namespaceUri</em> matches namespace of the current node; otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>namespaceUri</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.IsNamespaceUri(XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.IsStartArray(System.Type@)\n  commentId: M:System.Xml.XmlDictionaryReader.IsStartArray(System.Type@)\n  id: IsStartArray(System.Type@)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: IsStartArray(out Type)\n  fullName: System.Xml.XmlDictionaryReader.IsStartArray(out System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsStartArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 158\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Checks whether the reader is positioned at the start of an array. This class returns <strong>false</strong>, but derived classes that have the concept of arrays might return <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: public virtual bool IsStartArray(out Type type)\n    content.vb: Public Overridable Function IsStartArray(ByRef type As Type) As Boolean\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>Type of the node, if a valid node; otherwise <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the reader is positioned at the start of an array node; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.IsStartArray(ByRef System.Type)\n  name.vb: IsStartArray(ByRef Type)\n  nameWithType: XmlDictionaryReader.IsStartArray(out Type)\n  nameWithType.vb: XmlDictionaryReader.IsStartArray(ByRef Type)\n- uid: System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: IsStartElement(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsStartElement\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 159\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Tests whether the first tag is a start tag or empty element tag and if the local name and namespace URI match those of the current node.</p>\\n\"\n  syntax:\n    content: public virtual bool IsStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function IsStartElement(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString) As Boolean\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlDictionaryString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the local name of the attribute.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlDictionaryString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the namespace of the attribute.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the first tag in the array is a start tag or empty element tag and matches <em>localName</em> and <em>namespaceUri</em>; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.IsStartElement(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.IsTextNode(System.Xml.XmlNodeType)\n  commentId: M:System.Xml.XmlDictionaryReader.IsTextNode(System.Xml.XmlNodeType)\n  id: IsTextNode(System.Xml.XmlNodeType)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: IsTextNode(XmlNodeType)\n  fullName: System.Xml.XmlDictionaryReader.IsTextNode(System.Xml.XmlNodeType)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsTextNode\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 160\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Tests whether the current node is a text node.</p>\\n\"\n  syntax:\n    content: protected bool IsTextNode(XmlNodeType nodeType)\n    content.vb: Protected Function IsTextNode(nodeType As XmlNodeType) As Boolean\n    parameters:\n    - id: nodeType\n      type: System.Xml.XmlNodeType\n      description: \"\\n<p>Type of the node being tested.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the node type is <xref href=\\\"System.Xml.XmlNodeType.Text\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Xml.XmlNodeType.Whitespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Xml.XmlNodeType.SignificantWhitespace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Xml.XmlNodeType.CDATA\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Xml.XmlNodeType.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: XmlDictionaryReader.IsTextNode(XmlNodeType)\n- uid: System.Xml.XmlDictionaryReader.MoveToStartElement\n  commentId: M:System.Xml.XmlDictionaryReader.MoveToStartElement\n  id: MoveToStartElement\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: MoveToStartElement()\n  fullName: System.Xml.XmlDictionaryReader.MoveToStartElement()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MoveToStartElement\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 161\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Tests whether the current content node is a start element or an empty element.</p>\\n\"\n  syntax:\n    content: public virtual void MoveToStartElement()\n    content.vb: Public Overridable Sub MoveToStartElement\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.MoveToStartElement()\n- uid: System.Xml.XmlDictionaryReader.MoveToStartElement(System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String)\n  id: MoveToStartElement(System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: MoveToStartElement(String)\n  fullName: System.Xml.XmlDictionaryReader.MoveToStartElement(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MoveToStartElement\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 162\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Tests whether the current content node is a start element or an empty element and if the <xref href=\\\"System.Xml.XmlReader.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the element matches the given argument.</p>\\n\"\n  syntax:\n    content: public virtual void MoveToStartElement(string name)\n    content.vb: Public Overridable Sub MoveToStartElement(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlReader.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the element.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.MoveToStartElement(String)\n- uid: System.Xml.XmlDictionaryReader.MoveToStartElement(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String,System.String)\n  id: MoveToStartElement(System.String,System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: MoveToStartElement(String, String)\n  fullName: System.Xml.XmlDictionaryReader.MoveToStartElement(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MoveToStartElement\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 163\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Tests whether the current content node is a start element or an empty element and if the <xref href=\\\"System.Xml.XmlReader.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlReader.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties of the element matches the given arguments.</p>\\n\"\n  syntax:\n    content: public virtual void MoveToStartElement(string localName, string namespaceUri)\n    content.vb: Public Overridable Sub MoveToStartElement(localName As String, namespaceUri As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.MoveToStartElement(String, String)\n- uid: System.Xml.XmlDictionaryReader.MoveToStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: MoveToStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: MoveToStartElement(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.MoveToStartElement(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MoveToStartElement\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 164\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Tests whether the current content node is a start element or an empty element and if the <xref href=\\\"System.Xml.XmlReader.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Xml.XmlReader.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties of the element matches the given argument.</p>\\n\"\n  syntax:\n    content: public virtual void MoveToStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Sub MoveToStartElement(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString)\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.MoveToStartElement(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Boolean[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Boolean[],System.Int32,System.Int32)\n  id: ReadArray(System.String,System.String,System.Boolean[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(String, String, Boolean[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Boolean[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 165\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(string localName, string namespaceUri, bool[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As String, namespaceUri As String, array As Boolean(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: array\n      type: System.Boolean[]\n      description: \"\\n<p>The array into which the nodes are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Boolean(), System.Int32, System.Int32)\n  name.vb: ReadArray(String, String, Boolean(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(String, String, Boolean[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(String, String, Boolean(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.DateTime[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.DateTime[],System.Int32,System.Int32)\n  id: ReadArray(System.String,System.String,System.DateTime[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(String, String, DateTime[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.DateTime[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 166\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(string localName, string namespaceUri, DateTime[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As String, namespaceUri As String, array As Date(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.DateTime[]\n      description: \"\\n<p>The array into which the nodes are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.DateTime(), System.Int32, System.Int32)\n  name.vb: ReadArray(String, String, DateTime(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(String, String, DateTime[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(String, String, DateTime(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Decimal[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Decimal[],System.Int32,System.Int32)\n  id: ReadArray(System.String,System.String,System.Decimal[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(String, String, Decimal[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Decimal[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 167\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(string localName, string namespaceUri, decimal[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As String, namespaceUri As String, array As Decimal(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Decimal[]\n      description: \"\\n<p>The array into which the nodes are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Decimal(), System.Int32, System.Int32)\n  name.vb: ReadArray(String, String, Decimal(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(String, String, Decimal[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(String, String, Decimal(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Double[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Double[],System.Int32,System.Int32)\n  id: ReadArray(System.String,System.String,System.Double[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(String, String, Double[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Double[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 168\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(string localName, string namespaceUri, double[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As String, namespaceUri As String, array As Double(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Double[]\n      description: \"\\n<p>The array into which the nodes are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Double(), System.Int32, System.Int32)\n  name.vb: ReadArray(String, String, Double(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(String, String, Double[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(String, String, Double(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Guid[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Guid[],System.Int32,System.Int32)\n  id: ReadArray(System.String,System.String,System.Guid[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(String, String, Guid[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Guid[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 169\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(string localName, string namespaceUri, Guid[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As String, namespaceUri As String, array As Guid(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Guid[]\n      description: \"\\n<p>The array into which the nodes are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Guid(), System.Int32, System.Int32)\n  name.vb: ReadArray(String, String, Guid(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(String, String, Guid[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(String, String, Guid(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int16[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int16[],System.Int32,System.Int32)\n  id: ReadArray(System.String,System.String,System.Int16[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(String, String, Int16[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Int16[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 170\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <strong>short</strong> integers into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(string localName, string namespaceUri, short[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As String, namespaceUri As String, array As Short(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Int16[]\n      description: \"\\n<p>The array into which the integers are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of integers to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of integers put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Int16(), System.Int32, System.Int32)\n  name.vb: ReadArray(String, String, Int16(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(String, String, Int16[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(String, String, Int16(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int32[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int32[],System.Int32,System.Int32)\n  id: ReadArray(System.String,System.String,System.Int32[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(String, String, Int32[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Int32[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 171\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of integers into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(string localName, string namespaceUri, int[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As String, namespaceUri As String, array As Integer(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Int32[]\n      description: \"\\n<p>The array into which the integers are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of integers to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of integers put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Int32(), System.Int32, System.Int32)\n  name.vb: ReadArray(String, String, Int32(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(String, String, Int32[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(String, String, Int32(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int64[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int64[],System.Int32,System.Int32)\n  id: ReadArray(System.String,System.String,System.Int64[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(String, String, Int64[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Int64[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 172\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <strong>long</strong> integers into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(string localName, string namespaceUri, long[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As String, namespaceUri As String, array As Long(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Int64[]\n      description: \"\\n<p>The array into which the integers are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of integers to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of integers put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Int64(), System.Int32, System.Int32)\n  name.vb: ReadArray(String, String, Int64(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(String, String, Int64[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(String, String, Int64(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Single[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Single[],System.Int32,System.Int32)\n  id: ReadArray(System.String,System.String,System.Single[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(String, String, Single[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Single[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 173\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <strong>float</strong> numbers into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(string localName, string namespaceUri, float[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As String, namespaceUri As String, array As Single(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Single[]\n      description: \"\\n<p>The array into which the float numbers are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of float numbers to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The umber of float numbers put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.Single(), System.Int32, System.Int32)\n  name.vb: ReadArray(String, String, Single(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(String, String, Single[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(String, String, Single(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)\n  id: ReadArray(System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(String, String, TimeSpan[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.TimeSpan[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 174\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(string localName, string namespaceUri, TimeSpan[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As String, namespaceUri As String, array As TimeSpan(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.TimeSpan[]\n      description: \"\\n<p>The array into which the nodes are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.String, System.String, System.TimeSpan(), System.Int32, System.Int32)\n  name.vb: ReadArray(String, String, TimeSpan(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(String, String, TimeSpan[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(String, String, TimeSpan(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)\n  id: ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(XmlDictionaryString, XmlDictionaryString, Boolean[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Boolean[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 175\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, bool[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Boolean(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Boolean[]\n      description: \"\\n<p>The array into which the nodes are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Boolean(), System.Int32, System.Int32)\n  name.vb: ReadArray(XmlDictionaryString, XmlDictionaryString, Boolean(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Boolean[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Boolean(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)\n  id: ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(XmlDictionaryString, XmlDictionaryString, DateTime[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.DateTime[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 176\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, DateTime[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Date(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.DateTime[]\n      description: \"\\n<p>The array into which the nodes are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.DateTime(), System.Int32, System.Int32)\n  name.vb: ReadArray(XmlDictionaryString, XmlDictionaryString, DateTime(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, DateTime[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, DateTime(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)\n  id: ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(XmlDictionaryString, XmlDictionaryString, Decimal[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Decimal[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 177\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, decimal[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Decimal(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Decimal[]\n      description: \"\\n<p>The array into which the nodes are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Decimal(), System.Int32, System.Int32)\n  name.vb: ReadArray(XmlDictionaryString, XmlDictionaryString, Decimal(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Decimal[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Decimal(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)\n  id: ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(XmlDictionaryString, XmlDictionaryString, Double[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Double[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 178\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes type into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, double[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Double(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Double[]\n      description: \"\\n<p>The array into which the nodes are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Double(), System.Int32, System.Int32)\n  name.vb: ReadArray(XmlDictionaryString, XmlDictionaryString, Double(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Double[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Double(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)\n  id: ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(XmlDictionaryString, XmlDictionaryString, Guid[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Guid[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 179\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, Guid[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Guid(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Guid[]\n      description: \"\\n<p>The array into which the nodes are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Guid(), System.Int32, System.Int32)\n  name.vb: ReadArray(XmlDictionaryString, XmlDictionaryString, Guid(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Guid[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Guid(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)\n  id: ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(XmlDictionaryString, XmlDictionaryString, Int16[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int16[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 180\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <strong>short</strong> integers into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, short[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Short(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Int16[]\n      description: \"\\n<p>The array into which the integers are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of integers to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of integers put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int16(), System.Int32, System.Int32)\n  name.vb: ReadArray(XmlDictionaryString, XmlDictionaryString, Int16(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Int16[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Int16(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)\n  id: ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(XmlDictionaryString, XmlDictionaryString, Int32[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int32[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 181\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of integers into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, int[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Integer(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Int32[]\n      description: \"\\n<p>The array into which the integers are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of integers to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of integers put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int32(), System.Int32, System.Int32)\n  name.vb: ReadArray(XmlDictionaryString, XmlDictionaryString, Int32(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Int32[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Int32(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)\n  id: ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(XmlDictionaryString, XmlDictionaryString, Int64[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int64[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 182\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <strong>long</strong> integers into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, long[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Long(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Int64[]\n      description: \"\\n<p>The array into which the integers are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of integers to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of integers put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int64(), System.Int32, System.Int32)\n  name.vb: ReadArray(XmlDictionaryString, XmlDictionaryString, Int64(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Int64[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Int64(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)\n  id: ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(XmlDictionaryString, XmlDictionaryString, Single[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Single[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 183\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <strong>float</strong> numbers into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, float[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Single(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Single[]\n      description: \"\\n<p>The array into which the float numbers are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of float numbers to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of float numbers put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Single(), System.Int32, System.Int32)\n  name.vb: ReadArray(XmlDictionaryString, XmlDictionaryString, Single(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Single[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, Single(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)\n  id: ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadArray(XmlDictionaryString, XmlDictionaryString, TimeSpan[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.TimeSpan[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 184\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri, TimeSpan[] array, int offset, int count)\n    content.vb: Public Overridable Function ReadArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As TimeSpan(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.TimeSpan[]\n      description: \"\\n<p>The array into which the nodes are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of nodes put in the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.TimeSpan(), System.Int32, System.Int32)\n  name.vb: ReadArray(XmlDictionaryString, XmlDictionaryString, TimeSpan(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, TimeSpan[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadArray(XmlDictionaryString, XmlDictionaryString, TimeSpan(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadBooleanArray(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.String,System.String)\n  id: ReadBooleanArray(System.String,System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadBooleanArray(String, String)\n  fullName: System.Xml.XmlDictionaryReader.ReadBooleanArray(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadBooleanArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 185\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual bool[] ReadBooleanArray(string localName, string namespaceUri)\n    content.vb: Public Overridable Function ReadBooleanArray(localName As String, namespaceUri As String) As Boolean()\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Boolean[]\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array of the <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadBooleanArray(String, String)\n- uid: System.Xml.XmlDictionaryReader.ReadBooleanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: ReadBooleanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadBooleanArray(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.ReadBooleanArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadBooleanArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 186\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads repeated occurrences of <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes into a typed array.</p>\\n\"\n  syntax:\n    content: public virtual bool[] ReadBooleanArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function ReadBooleanArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString) As Boolean()\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Boolean[]\n      description: \"\\n<p>A <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array of the <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nodes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadBooleanArray(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)\n  id: ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAs(Type, IXmlNamespaceResolver)\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAs(System.Type, System.Xml.IXmlNamespaceResolver)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAs\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 187\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a specified type.</p>\\n\"\n  syntax:\n    content: public override object ReadContentAs(Type type, IXmlNamespaceResolver namespaceResolver)\n    content.vb: Public Overrides Function ReadContentAs(type As Type, namespaceResolver As IXmlNamespaceResolver) As Object\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the value to be returned.</p>\\n\"\n    - id: namespaceResolver\n      type: System.Xml.IXmlNamespaceResolver\n      description: \"\\n<p>An <xref href=\\\"System.Xml.IXmlNamespaceResolver\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <xref href=\\\"System.Xml.XmlQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to an <code>xs:string</code>. This value can be a null reference.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The concatenated text content or attribute value converted to the requested type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDictionaryReader.ReadContentAs(Type, IXmlNamespaceResolver)\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsBase64\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsBase64\n  id: ReadContentAsBase64\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsBase64()\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsBase64()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsBase64\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 188\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the content and returns the Base64 decoded binary bytes.</p>\\n\"\n  syntax:\n    content: public virtual byte[] ReadContentAsBase64()\n    content.vb: Public Overridable Function ReadContentAsBase64 As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that contains the Base64 decoded binary bytes.</p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The array size is greater than the MaxArrayLength quota for this reader.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadContentAsBase64()\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsBinHex\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex\n  id: ReadContentAsBinHex\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsBinHex()\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsBinHex()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsBinHex\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 189\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the content and returns the <strong>BinHex</strong> decoded binary bytes.</p>\\n\"\n  syntax:\n    content: public virtual byte[] ReadContentAsBinHex()\n    content.vb: Public Overridable Function ReadContentAsBinHex As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that contains the <strong>BinHex</strong> decoded binary bytes.</p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The array size is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadContentAsBinHex()\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsBinHex(System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex(System.Int32)\n  id: ReadContentAsBinHex(System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsBinHex(Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsBinHex(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsBinHex\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 190\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the content and returns the <strong>BinHex</strong> decoded binary bytes.</p>\\n\"\n  syntax:\n    content: protected byte[] ReadContentAsBinHex(int maxByteArrayContentLength)\n    content.vb: Protected Function ReadContentAsBinHex(maxByteArrayContentLength As Integer) As Byte()\n    parameters:\n    - id: maxByteArrayContentLength\n      type: System.Int32\n      description: \"\\n<p>The maximum array length.</p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that contains the <strong>BinHex</strong> decoded binary bytes.</p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The array size is greater than <em>maxByteArrayContentLength</em>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: XmlDictionaryReader.ReadContentAsBinHex(Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsChars(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsChars(System.Char[],System.Int32,System.Int32)\n  id: ReadContentAsChars(System.Char[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsChars(Char[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsChars(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsChars\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 191\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the content into a <strong>char</strong> array.</p>\\n\"\n  syntax:\n    content: public virtual int ReadContentAsChars(char[] chars, int offset, int count)\n    content.vb: Public Overridable Function ReadContentAsChars(chars As Char(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The array into which the characters are put.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to put in the array.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>Number of characters read.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadContentAsChars(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadContentAsChars(Char(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadContentAsChars(Char[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadContentAsChars(Char(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsDecimal\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsDecimal\n  id: ReadContentAsDecimal\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsDecimal()\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsDecimal()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsDecimal\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 192\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to <strong>decimal</strong>.</p>\\n\"\n  syntax:\n    content: public override decimal ReadContentAsDecimal()\n    content.vb: Public Overrides Function ReadContentAsDecimal As Decimal\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The <strong>decimal</strong> representation of node's content.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDictionaryReader.ReadContentAsDecimal()\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsFloat\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsFloat\n  id: ReadContentAsFloat\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsFloat()\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsFloat()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsFloat\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 193\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to <strong>float</strong>.</p>\\n\"\n  syntax:\n    content: public override float ReadContentAsFloat()\n    content.vb: Public Overrides Function ReadContentAsFloat As Single\n    return:\n      type: System.Single\n      description: \"\\n<p>The <strong>float</strong> representation of node's content.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDictionaryReader.ReadContentAsFloat()\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsGuid\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsGuid\n  id: ReadContentAsGuid\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsGuid()\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsGuid()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsGuid\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 194\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to <strong>guid</strong>.</p>\\n\"\n  syntax:\n    content: public virtual Guid ReadContentAsGuid()\n    content.vb: Public Overridable Function ReadContentAsGuid As Guid\n    return:\n      type: System.Guid\n      description: \"\\n<p>The <strong>guid</strong> representation of node's content.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadContentAsGuid()\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsQualifiedName(System.String@,System.String@)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsQualifiedName(System.String@,System.String@)\n  id: ReadContentAsQualifiedName(System.String@,System.String@)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsQualifiedName(out String, out String)\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsQualifiedName(out System.String, out System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsQualifiedName\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 195\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a qualified name representation.</p>\\n\"\n  syntax:\n    content: public virtual void ReadContentAsQualifiedName(out string localName, out string namespaceUri)\n    content.vb: Public Overridable Sub ReadContentAsQualifiedName(ByRef localName As String, ByRef namespaceUri As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlReader.LocalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> part of the qualified name (<strong>out</strong> parameter).</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlReader.NamespaceURI\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> part of the qualified name (<strong>out</strong> parameter).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadContentAsQualifiedName(ByRef System.String, ByRef System.String)\n  name.vb: ReadContentAsQualifiedName(ByRef String, ByRef String)\n  nameWithType: XmlDictionaryReader.ReadContentAsQualifiedName(out String, out String)\n  nameWithType.vb: XmlDictionaryReader.ReadContentAsQualifiedName(ByRef String, ByRef String)\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsString\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsString\n  id: ReadContentAsString\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsString()\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 196\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a string.</p>\\n\"\n  syntax:\n    content: public override string ReadContentAsString()\n    content.vb: Public Overrides Function ReadContentAsString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The node content in a string representation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDictionaryReader.ReadContentAsString()\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsString(System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Int32)\n  id: ReadContentAsString(System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsString(Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsString(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 197\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a string.</p>\\n\"\n  syntax:\n    content: protected string ReadContentAsString(int maxStringContentLength)\n    content.vb: Protected Function ReadContentAsString(maxStringContentLength As Integer) As String\n    parameters:\n    - id: maxStringContentLength\n      type: System.Int32\n      description: \"\\n<p>The maximum string length.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>Node content in string representation.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: XmlDictionaryReader.ReadContentAsString(Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsString(System.String[],System.Int32@)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.String[],System.Int32@)\n  id: ReadContentAsString(System.String[],System.Int32@)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsString(String[], out Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsString(System.String[], out System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 198\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a string.</p>\\n\"\n  syntax:\n    content: public virtual string ReadContentAsString(string[] strings, out int index)\n    content.vb: Public Overridable Function ReadContentAsString(strings As String(), ByRef index As Integer) As String\n    parameters:\n    - id: strings\n      type: System.String[]\n      description: \"\\n<p>The array of strings to match content against.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the entry in <em>strings</em> that matches the content.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The node content in a string representation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>strings</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>An entry in<em> strings</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadContentAsString(System.String(), ByRef System.Int32)\n  name.vb: ReadContentAsString(String(), ByRef Int32)\n  nameWithType: XmlDictionaryReader.ReadContentAsString(String[], out Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadContentAsString(String(), ByRef Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsString(System.Xml.XmlDictionaryString[],System.Int32@)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Xml.XmlDictionaryString[],System.Int32@)\n  id: ReadContentAsString(System.Xml.XmlDictionaryString[],System.Int32@)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsString(XmlDictionaryString[], out Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsString(System.Xml.XmlDictionaryString[], out System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 199\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a string.</p>\\n\"\n  syntax:\n    content: public virtual string ReadContentAsString(XmlDictionaryString[] strings, out int index)\n    content.vb: Public Overridable Function ReadContentAsString(strings As XmlDictionaryString(), ByRef index As Integer) As String\n    parameters:\n    - id: strings\n      type: System.Xml.XmlDictionaryString[]\n      description: \"\\n<p>The array of <xref href=\\\"System.Xml.XmlDictionaryString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to match content against.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the entry in <em>strings</em> that matches the content.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The node content in a string representation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>strings</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>An entry in<em> strings</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadContentAsString(System.Xml.XmlDictionaryString(), ByRef System.Int32)\n  name.vb: ReadContentAsString(XmlDictionaryString(), ByRef Int32)\n  nameWithType: XmlDictionaryReader.ReadContentAsString(XmlDictionaryString[], out Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadContentAsString(XmlDictionaryString(), ByRef Int32)\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsTimeSpan\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsTimeSpan\n  id: ReadContentAsTimeSpan\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsTimeSpan()\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsTimeSpan()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsTimeSpan\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 200\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual TimeSpan ReadContentAsTimeSpan()\n    content.vb: Public Overridable Function ReadContentAsTimeSpan As TimeSpan\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>\\n<xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representation of node's content.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadContentAsTimeSpan()\n- uid: System.Xml.XmlDictionaryReader.ReadContentAsUniqueId\n  commentId: M:System.Xml.XmlDictionaryReader.ReadContentAsUniqueId\n  id: ReadContentAsUniqueId\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadContentAsUniqueId()\n  fullName: System.Xml.XmlDictionaryReader.ReadContentAsUniqueId()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadContentAsUniqueId\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 201\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a unique identifier.</p>\\n\"\n  syntax:\n    content: public virtual UniqueId ReadContentAsUniqueId()\n    content.vb: Public Overridable Function ReadContentAsUniqueId As UniqueId\n    return:\n      type: System.Xml.UniqueId\n      description: \"\\n<p>The node's content represented as a unique identifier.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadContentAsUniqueId()\n- uid: System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.String,System.String)\n  id: ReadDateTimeArray(System.String,System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadDateTimeArray(String, String)\n  fullName: System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadDateTimeArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 202\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual DateTime[] ReadDateTimeArray(string localName, string namespaceUri)\n    content.vb: Public Overridable Function ReadDateTimeArray(localName As String, namespaceUri As String) As Date()\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.DateTime[]\n      description: \"\\n<p>The node's content represented as a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadDateTimeArray(String, String)\n- uid: System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: ReadDateTimeArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadDateTimeArray(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadDateTimeArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 203\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual DateTime[] ReadDateTimeArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function ReadDateTimeArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString) As Date()\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.DateTime[]\n      description: \"\\n<p>The node's content represented as a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadDateTimeArray(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadDecimalArray(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.String,System.String)\n  id: ReadDecimalArray(System.String,System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadDecimalArray(String, String)\n  fullName: System.Xml.XmlDictionaryReader.ReadDecimalArray(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadDecimalArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 204\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual decimal[] ReadDecimalArray(string localName, string namespaceUri)\n    content.vb: Public Overridable Function ReadDecimalArray(localName As String, namespaceUri As String) As Decimal()\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Decimal[]\n      description: \"\\n<p>The node's content represented as a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadDecimalArray(String, String)\n- uid: System.Xml.XmlDictionaryReader.ReadDecimalArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: ReadDecimalArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadDecimalArray(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.ReadDecimalArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadDecimalArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 205\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual decimal[] ReadDecimalArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function ReadDecimalArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString) As Decimal()\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Decimal[]\n      description: \"\\n<p>The node's content represented as a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadDecimalArray(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadDoubleArray(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.String,System.String)\n  id: ReadDoubleArray(System.String,System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadDoubleArray(String, String)\n  fullName: System.Xml.XmlDictionaryReader.ReadDoubleArray(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadDoubleArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 206\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual double[] ReadDoubleArray(string localName, string namespaceUri)\n    content.vb: Public Overridable Function ReadDoubleArray(localName As String, namespaceUri As String) As Double()\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Double[]\n      description: \"\\n<p>The node's content represented as a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadDoubleArray(String, String)\n- uid: System.Xml.XmlDictionaryReader.ReadDoubleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: ReadDoubleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadDoubleArray(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.ReadDoubleArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadDoubleArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 207\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual double[] ReadDoubleArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function ReadDoubleArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString) As Double()\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Double[]\n      description: \"\\n<p>The node's content represented as a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadDoubleArray(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadElementContentAsBase64\n  commentId: M:System.Xml.XmlDictionaryReader.ReadElementContentAsBase64\n  id: ReadElementContentAsBase64\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadElementContentAsBase64()\n  fullName: System.Xml.XmlDictionaryReader.ReadElementContentAsBase64()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadElementContentAsBase64\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 208\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to a array of Base64 bytes.</p>\\n\"\n  syntax:\n    content: public virtual byte[] ReadElementContentAsBase64()\n    content.vb: Public Overridable Function ReadElementContentAsBase64 As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The node's content represented as an array of Base64 bytes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadElementContentAsBase64()\n- uid: System.Xml.XmlDictionaryReader.ReadElementContentAsBinHex\n  commentId: M:System.Xml.XmlDictionaryReader.ReadElementContentAsBinHex\n  id: ReadElementContentAsBinHex\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadElementContentAsBinHex()\n  fullName: System.Xml.XmlDictionaryReader.ReadElementContentAsBinHex()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadElementContentAsBinHex\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 209\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts a node's content to an array of <strong>BinHex</strong> bytes.</p>\\n\"\n  syntax:\n    content: public virtual byte[] ReadElementContentAsBinHex()\n    content.vb: Public Overridable Function ReadElementContentAsBinHex As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The node's content represented as an array of <strong>BinHex</strong> bytes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadElementContentAsBinHex()\n- uid: System.Xml.XmlDictionaryReader.ReadElementContentAsBoolean\n  commentId: M:System.Xml.XmlDictionaryReader.ReadElementContentAsBoolean\n  id: ReadElementContentAsBoolean\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadElementContentAsBoolean()\n  fullName: System.Xml.XmlDictionaryReader.ReadElementContentAsBoolean()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadElementContentAsBoolean\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 210\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts an element's content to a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override bool ReadElementContentAsBoolean()\n    content.vb: Public Overrides Function ReadElementContentAsBoolean As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The node's content represented as a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDictionaryReader.ReadElementContentAsBoolean()\n- uid: System.Xml.XmlDictionaryReader.ReadElementContentAsDecimal\n  commentId: M:System.Xml.XmlDictionaryReader.ReadElementContentAsDecimal\n  id: ReadElementContentAsDecimal\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadElementContentAsDecimal()\n  fullName: System.Xml.XmlDictionaryReader.ReadElementContentAsDecimal()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadElementContentAsDecimal\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 211\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts an element's content to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override decimal ReadElementContentAsDecimal()\n    content.vb: Public Overrides Function ReadElementContentAsDecimal As Decimal\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The node's content represented as a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDictionaryReader.ReadElementContentAsDecimal()\n- uid: System.Xml.XmlDictionaryReader.ReadElementContentAsDouble\n  commentId: M:System.Xml.XmlDictionaryReader.ReadElementContentAsDouble\n  id: ReadElementContentAsDouble\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadElementContentAsDouble()\n  fullName: System.Xml.XmlDictionaryReader.ReadElementContentAsDouble()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadElementContentAsDouble\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 212\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts an element's content to a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override double ReadElementContentAsDouble()\n    content.vb: Public Overrides Function ReadElementContentAsDouble As Double\n    return:\n      type: System.Double\n      description: \"\\n<p>The node's content represented as a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDictionaryReader.ReadElementContentAsDouble()\n- uid: System.Xml.XmlDictionaryReader.ReadElementContentAsFloat\n  commentId: M:System.Xml.XmlDictionaryReader.ReadElementContentAsFloat\n  id: ReadElementContentAsFloat\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadElementContentAsFloat()\n  fullName: System.Xml.XmlDictionaryReader.ReadElementContentAsFloat()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadElementContentAsFloat\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 213\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts an element's content to a floating point number (<xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public override float ReadElementContentAsFloat()\n    content.vb: Public Overrides Function ReadElementContentAsFloat As Single\n    return:\n      type: System.Single\n      description: \"\\n<p>The node's content represented as a floating point number (<xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDictionaryReader.ReadElementContentAsFloat()\n- uid: System.Xml.XmlDictionaryReader.ReadElementContentAsGuid\n  commentId: M:System.Xml.XmlDictionaryReader.ReadElementContentAsGuid\n  id: ReadElementContentAsGuid\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadElementContentAsGuid()\n  fullName: System.Xml.XmlDictionaryReader.ReadElementContentAsGuid()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadElementContentAsGuid\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 214\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts an element's content to a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual Guid ReadElementContentAsGuid()\n    content.vb: Public Overridable Function ReadElementContentAsGuid As Guid\n    return:\n      type: System.Guid\n      description: \"\\n<p>The node's content represented as a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The element is not in valid format.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The element is not in valid format.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadElementContentAsGuid()\n- uid: System.Xml.XmlDictionaryReader.ReadElementContentAsInt\n  commentId: M:System.Xml.XmlDictionaryReader.ReadElementContentAsInt\n  id: ReadElementContentAsInt\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadElementContentAsInt()\n  fullName: System.Xml.XmlDictionaryReader.ReadElementContentAsInt()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadElementContentAsInt\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 215\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts an element's content to an integer (<xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public override int ReadElementContentAsInt()\n    content.vb: Public Overrides Function ReadElementContentAsInt As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The node's content represented as an integer (<xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDictionaryReader.ReadElementContentAsInt()\n- uid: System.Xml.XmlDictionaryReader.ReadElementContentAsLong\n  commentId: M:System.Xml.XmlDictionaryReader.ReadElementContentAsLong\n  id: ReadElementContentAsLong\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadElementContentAsLong()\n  fullName: System.Xml.XmlDictionaryReader.ReadElementContentAsLong()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadElementContentAsLong\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 216\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts an element's content to a long integer (<xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public override long ReadElementContentAsLong()\n    content.vb: Public Overrides Function ReadElementContentAsLong As Long\n    return:\n      type: System.Int64\n      description: \"\\n<p>The node's content represented as a long integer (<xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDictionaryReader.ReadElementContentAsLong()\n- uid: System.Xml.XmlDictionaryReader.ReadElementContentAsString\n  commentId: M:System.Xml.XmlDictionaryReader.ReadElementContentAsString\n  id: ReadElementContentAsString\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadElementContentAsString()\n  fullName: System.Xml.XmlDictionaryReader.ReadElementContentAsString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadElementContentAsString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 217\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts an element's content to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ReadElementContentAsString()\n    content.vb: Public Overrides Function ReadElementContentAsString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The node's content represented as a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDictionaryReader.ReadElementContentAsString()\n- uid: System.Xml.XmlDictionaryReader.ReadElementContentAsTimeSpan\n  commentId: M:System.Xml.XmlDictionaryReader.ReadElementContentAsTimeSpan\n  id: ReadElementContentAsTimeSpan\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadElementContentAsTimeSpan()\n  fullName: System.Xml.XmlDictionaryReader.ReadElementContentAsTimeSpan()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadElementContentAsTimeSpan\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 218\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts an element's content to a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual TimeSpan ReadElementContentAsTimeSpan()\n    content.vb: Public Overridable Function ReadElementContentAsTimeSpan As TimeSpan\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>The node's content represented as a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadElementContentAsTimeSpan()\n- uid: System.Xml.XmlDictionaryReader.ReadElementContentAsUniqueId\n  commentId: M:System.Xml.XmlDictionaryReader.ReadElementContentAsUniqueId\n  id: ReadElementContentAsUniqueId\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadElementContentAsUniqueId()\n  fullName: System.Xml.XmlDictionaryReader.ReadElementContentAsUniqueId()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadElementContentAsUniqueId\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 219\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Converts an element's content to a unique identifier.</p>\\n\"\n  syntax:\n    content: public virtual UniqueId ReadElementContentAsUniqueId()\n    content.vb: Public Overridable Function ReadElementContentAsUniqueId As UniqueId\n    return:\n      type: System.Xml.UniqueId\n      description: \"\\n<p>The node's content represented as a unique identifier.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The element is not in valid format.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The element is not in valid format.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadElementContentAsUniqueId()\n- uid: System.Xml.XmlDictionaryReader.ReadFullStartElement\n  commentId: M:System.Xml.XmlDictionaryReader.ReadFullStartElement\n  id: ReadFullStartElement\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadFullStartElement()\n  fullName: System.Xml.XmlDictionaryReader.ReadFullStartElement()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadFullStartElement\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 220\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Checks whether the current node is an element and advances the reader to the next node.</p>\\n\"\n  syntax:\n    content: public virtual void ReadFullStartElement()\n    content.vb: Public Overridable Sub ReadFullStartElement\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>\\n<xref href=\\\"System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadFullStartElement()\n- uid: System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String)\n  id: ReadFullStartElement(System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadFullStartElement(String)\n  fullName: System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadFullStartElement\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 221\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Checks whether the current node is an element with the given <em>name</em> and advances the reader to the next node.</p>\\n\"\n  syntax:\n    content: public virtual void ReadFullStartElement(string name)\n    content.vb: Public Overridable Sub ReadFullStartElement(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The qualified name of the element.</p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>\\n<xref href=\\\"System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadFullStartElement(String)\n- uid: System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String,System.String)\n  id: ReadFullStartElement(System.String,System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadFullStartElement(String, String)\n  fullName: System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadFullStartElement\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 222\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Checks whether the current node is an element with the given <em>localName</em> and <em>namespaceUri</em> and advances the reader to the next node.</p>\\n\"\n  syntax:\n    content: public virtual void ReadFullStartElement(string localName, string namespaceUri)\n    content.vb: Public Overridable Sub ReadFullStartElement(localName As String, namespaceUri As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>\\n<xref href=\\\"System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadFullStartElement(String, String)\n- uid: System.Xml.XmlDictionaryReader.ReadFullStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: ReadFullStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadFullStartElement(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.ReadFullStartElement(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadFullStartElement\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 223\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Checks whether the current node is an element with the given <em>localName</em> and <em>namespaceUri</em> and advances the reader to the next node.</p>\\n\"\n  syntax:\n    content: public virtual void ReadFullStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Sub ReadFullStartElement(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString)\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n  exceptions:\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>\\n<xref href=\\\"System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadFullStartElement(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadGuidArray(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.String,System.String)\n  id: ReadGuidArray(System.String,System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadGuidArray(String, String)\n  fullName: System.Xml.XmlDictionaryReader.ReadGuidArray(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadGuidArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 224\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the contents of a series of nodes with the given <em>localName</em> and <em>namespaceUri</em> into an array of <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual Guid[] ReadGuidArray(string localName, string namespaceUri)\n    content.vb: Public Overridable Function ReadGuidArray(localName As String, namespaceUri As String) As Guid()\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Guid[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadGuidArray(String, String)\n- uid: System.Xml.XmlDictionaryReader.ReadGuidArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: ReadGuidArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadGuidArray(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.ReadGuidArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadGuidArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 225\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the contents of a series of nodes with the given <em>localName</em> and <em>namespaceUri</em> into an array of <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual Guid[] ReadGuidArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function ReadGuidArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString) As Guid()\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Guid[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadGuidArray(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadInt16Array(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.String,System.String)\n  id: ReadInt16Array(System.String,System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadInt16Array(String, String)\n  fullName: System.Xml.XmlDictionaryReader.ReadInt16Array(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadInt16Array\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 226\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the contents of a series of nodes with the given <em>localName</em> and <em>namespaceUri</em> into an array of <strong>short</strong> integers (<xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public virtual short[] ReadInt16Array(string localName, string namespaceUri)\n    content.vb: Public Overridable Function ReadInt16Array(localName As String, namespaceUri As String) As Short()\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Int16[]\n      description: \"\\n<p>An array of <strong>short</strong> integers (<xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadInt16Array(String, String)\n- uid: System.Xml.XmlDictionaryReader.ReadInt16Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: ReadInt16Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadInt16Array(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.ReadInt16Array(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadInt16Array\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 227\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the contents of a series of nodes with the given <em>localName</em> and <em>namespaceUri</em> into an array of <strong>short</strong> integers (<xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public virtual short[] ReadInt16Array(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function ReadInt16Array(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString) As Short()\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Int16[]\n      description: \"\\n<p>An array of <strong>short</strong> integers (<xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadInt16Array(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadInt32Array(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.String,System.String)\n  id: ReadInt32Array(System.String,System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadInt32Array(String, String)\n  fullName: System.Xml.XmlDictionaryReader.ReadInt32Array(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadInt32Array\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 228\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the contents of a series of nodes with the given <em>localName</em> and <em>namespaceUri</em> into an array of integers (<xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public virtual int[] ReadInt32Array(string localName, string namespaceUri)\n    content.vb: Public Overridable Function ReadInt32Array(localName As String, namespaceUri As String) As Integer()\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Int32[]\n      description: \"\\n<p>An array of integers (<xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadInt32Array(String, String)\n- uid: System.Xml.XmlDictionaryReader.ReadInt32Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: ReadInt32Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadInt32Array(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.ReadInt32Array(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadInt32Array\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 229\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the contents of a series of nodes with the given <em>localName</em> and <em>namespaceUri</em> into an array of integers (<xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public virtual int[] ReadInt32Array(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function ReadInt32Array(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString) As Integer()\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Int32[]\n      description: \"\\n<p>An array of integers (<xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadInt32Array(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadInt64Array(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.String,System.String)\n  id: ReadInt64Array(System.String,System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadInt64Array(String, String)\n  fullName: System.Xml.XmlDictionaryReader.ReadInt64Array(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadInt64Array\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 230\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the contents of a series of nodes with the given <em>localName</em> and <em>namespaceUri</em> into an array of <strong>long</strong> integers (<xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public virtual long[] ReadInt64Array(string localName, string namespaceUri)\n    content.vb: Public Overridable Function ReadInt64Array(localName As String, namespaceUri As String) As Long()\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Int64[]\n      description: \"\\n<p>An array of <strong>long</strong> integers (<xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadInt64Array(String, String)\n- uid: System.Xml.XmlDictionaryReader.ReadInt64Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: ReadInt64Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadInt64Array(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.ReadInt64Array(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadInt64Array\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 231\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the contents of a series of nodes with the given <em>localName</em> and <em>namespaceUri</em> into an array of <strong>long</strong> integers (<xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public virtual long[] ReadInt64Array(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function ReadInt64Array(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString) As Long()\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Int64[]\n      description: \"\\n<p>An array of <strong>long</strong> integers (<xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadInt64Array(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadSingleArray(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.String,System.String)\n  id: ReadSingleArray(System.String,System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadSingleArray(String, String)\n  fullName: System.Xml.XmlDictionaryReader.ReadSingleArray(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadSingleArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 232\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the contents of a series of nodes with the given <em>localName</em> and <em>namespaceUri</em> into an array of <strong>float</strong> numbers (<xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public virtual float[] ReadSingleArray(string localName, string namespaceUri)\n    content.vb: Public Overridable Function ReadSingleArray(localName As String, namespaceUri As String) As Single()\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Single[]\n      description: \"\\n<p>An array of <strong>float</strong> numbers (<xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadSingleArray(String, String)\n- uid: System.Xml.XmlDictionaryReader.ReadSingleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: ReadSingleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadSingleArray(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.ReadSingleArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadSingleArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 233\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the contents of a series of nodes with the given <em>localName</em> and <em>namespaceUri</em> into an array of <strong>float</strong> numbers (<xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public virtual float[] ReadSingleArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function ReadSingleArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString) As Single()\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.Single[]\n      description: \"\\n<p>An array of <strong>float</strong> numbers (<xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadSingleArray(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: ReadStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadStartElement(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.ReadStartElement(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadStartElement\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 234\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Checks whether the current node is an element with the given <em>localName</em> and <em>namespaceUri</em> and advances the reader to the next node.</p>\\n\"\n  syntax:\n    content: public virtual void ReadStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Sub ReadStartElement(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString)\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadStartElement(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.String,System.String)\n  id: ReadTimeSpanArray(System.String,System.String)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadTimeSpanArray(String, String)\n  fullName: System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadTimeSpanArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 235\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the contents of a series of nodes with the given <em>localName</em> and <em>namespaceUri</em> into a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual TimeSpan[] ReadTimeSpanArray(string localName, string namespaceUri)\n    content.vb: Public Overridable Function ReadTimeSpanArray(localName As String, namespaceUri As String) As TimeSpan()\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.TimeSpan[]\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadTimeSpanArray(String, String)\n- uid: System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: ReadTimeSpanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadTimeSpanArray(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadTimeSpanArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 236\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Reads the contents of a series of nodes with the given <em>localName</em> and <em>namespaceUri</em> into a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual TimeSpan[] ReadTimeSpanArray(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function ReadTimeSpanArray(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString) As TimeSpan()\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    return:\n      type: System.TimeSpan[]\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryReader.ReadTimeSpanArray(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.ReadValueAsBase64(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryReader.ReadValueAsBase64(System.Byte[],System.Int32,System.Int32)\n  id: ReadValueAsBase64(System.Byte[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: ReadValueAsBase64(Byte[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryReader.ReadValueAsBase64(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadValueAsBase64\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 237\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Not implemented.</p>\\n\"\n  syntax:\n    content: public virtual int ReadValueAsBase64(byte[] buffer, int offset, int count)\n    content.vb: Public Overridable Function ReadValueAsBase64(buffer As Byte(), offset As Integer, count As Integer) As Integer\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer from which to read.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting position from which to read in <em>buffer</em>.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes that can be read from <em>buffer</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>Not implemented.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.ReadValueAsBase64(System.Byte(), System.Int32, System.Int32)\n  name.vb: ReadValueAsBase64(Byte(), Int32, Int32)\n  nameWithType: XmlDictionaryReader.ReadValueAsBase64(Byte[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryReader.ReadValueAsBase64(Byte(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryReader.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])\n  commentId: M:System.Xml.XmlDictionaryReader.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])\n  id: StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: StartCanonicalization(Stream, Boolean, String[])\n  fullName: System.Xml.XmlDictionaryReader.StartCanonicalization(System.IO.Stream, System.Boolean, System.String[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StartCanonicalization\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 238\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>This method is not yet implemented.</p>\\n\"\n  syntax:\n    content: public virtual void StartCanonicalization(Stream stream, bool includeComments, string[] inclusivePrefixes)\n    content.vb: Public Overridable Sub StartCanonicalization(stream As Stream, includeComments As Boolean, inclusivePrefixes As String())\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to read from.</p>\\n\"\n    - id: includeComments\n      type: System.Boolean\n      description: \"\\n<p>Determines whether comments are included.</p>\\n\"\n    - id: inclusivePrefixes\n      type: System.String[]\n      description: \"\\n<p>The prefixes to be included.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.StartCanonicalization(System.IO.Stream, System.Boolean, System.String())\n  name.vb: StartCanonicalization(Stream, Boolean, String())\n  nameWithType: XmlDictionaryReader.StartCanonicalization(Stream, Boolean, String[])\n  nameWithType.vb: XmlDictionaryReader.StartCanonicalization(Stream, Boolean, String())\n- uid: System.Xml.XmlDictionaryReader.TryGetArrayLength(System.Int32@)\n  commentId: M:System.Xml.XmlDictionaryReader.TryGetArrayLength(System.Int32@)\n  id: TryGetArrayLength(System.Int32@)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: TryGetArrayLength(out Int32)\n  fullName: System.Xml.XmlDictionaryReader.TryGetArrayLength(out System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetArrayLength\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 239\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Not implemented in this class (it always returns <strong>false</strong>). May be overridden in derived classes.</p>\\n\"\n  syntax:\n    content: public virtual bool TryGetArrayLength(out int count)\n    content.vb: Public Overridable Function TryGetArrayLength(ByRef count As Integer) As Boolean\n    parameters:\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>Returns 0, unless overridden in a derived class.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>false</strong>, unless overridden in a derived class.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.TryGetArrayLength(ByRef System.Int32)\n  name.vb: TryGetArrayLength(ByRef Int32)\n  nameWithType: XmlDictionaryReader.TryGetArrayLength(out Int32)\n  nameWithType.vb: XmlDictionaryReader.TryGetArrayLength(ByRef Int32)\n- uid: System.Xml.XmlDictionaryReader.TryGetBase64ContentLength(System.Int32@)\n  commentId: M:System.Xml.XmlDictionaryReader.TryGetBase64ContentLength(System.Int32@)\n  id: TryGetBase64ContentLength(System.Int32@)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: TryGetBase64ContentLength(out Int32)\n  fullName: System.Xml.XmlDictionaryReader.TryGetBase64ContentLength(out System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetBase64ContentLength\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 240\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Not implemented in this class (it always returns <strong>false</strong>). May be overridden in derived classes.</p>\\n\"\n  syntax:\n    content: public virtual bool TryGetBase64ContentLength(out int length)\n    content.vb: Public Overridable Function TryGetBase64ContentLength(ByRef length As Integer) As Boolean\n    parameters:\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>Returns 0, unless overridden in a derived class.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>false</strong>, unless overridden in a derived class.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.TryGetBase64ContentLength(ByRef System.Int32)\n  name.vb: TryGetBase64ContentLength(ByRef Int32)\n  nameWithType: XmlDictionaryReader.TryGetBase64ContentLength(out Int32)\n  nameWithType.vb: XmlDictionaryReader.TryGetBase64ContentLength(ByRef Int32)\n- uid: System.Xml.XmlDictionaryReader.TryGetLocalNameAsDictionaryString(System.Xml.XmlDictionaryString@)\n  commentId: M:System.Xml.XmlDictionaryReader.TryGetLocalNameAsDictionaryString(System.Xml.XmlDictionaryString@)\n  id: TryGetLocalNameAsDictionaryString(System.Xml.XmlDictionaryString@)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: TryGetLocalNameAsDictionaryString(out XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.TryGetLocalNameAsDictionaryString(out System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetLocalNameAsDictionaryString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 241\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Not implemented in this class (it always returns <strong>false</strong>). May be overridden in derived classes.</p>\\n\"\n  syntax:\n    content: public virtual bool TryGetLocalNameAsDictionaryString(out XmlDictionaryString localName)\n    content.vb: Public Overridable Function TryGetLocalNameAsDictionaryString(ByRef localName As XmlDictionaryString) As Boolean\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>Returns <strong>null</strong>, unless overridden in a derived class. .</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>false</strong>, unless overridden in a derived class.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.TryGetLocalNameAsDictionaryString(ByRef System.Xml.XmlDictionaryString)\n  name.vb: TryGetLocalNameAsDictionaryString(ByRef XmlDictionaryString)\n  nameWithType: XmlDictionaryReader.TryGetLocalNameAsDictionaryString(out XmlDictionaryString)\n  nameWithType.vb: XmlDictionaryReader.TryGetLocalNameAsDictionaryString(ByRef XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(System.Xml.XmlDictionaryString@)\n  commentId: M:System.Xml.XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(System.Xml.XmlDictionaryString@)\n  id: TryGetNamespaceUriAsDictionaryString(System.Xml.XmlDictionaryString@)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: TryGetNamespaceUriAsDictionaryString(out XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(out System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetNamespaceUriAsDictionaryString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 242\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Not implemented in this class (it always returns <strong>false</strong>). May be overridden in derived classes.</p>\\n\"\n  syntax:\n    content: public virtual bool TryGetNamespaceUriAsDictionaryString(out XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Function TryGetNamespaceUriAsDictionaryString(ByRef namespaceUri As XmlDictionaryString) As Boolean\n    parameters:\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>Returns <strong>null</strong>, unless overridden in a derived class.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>false</strong>, unless overridden in a derived class.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(ByRef System.Xml.XmlDictionaryString)\n  name.vb: TryGetNamespaceUriAsDictionaryString(ByRef XmlDictionaryString)\n  nameWithType: XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(out XmlDictionaryString)\n  nameWithType.vb: XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(ByRef XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryReader.TryGetValueAsDictionaryString(System.Xml.XmlDictionaryString@)\n  commentId: M:System.Xml.XmlDictionaryReader.TryGetValueAsDictionaryString(System.Xml.XmlDictionaryString@)\n  id: TryGetValueAsDictionaryString(System.Xml.XmlDictionaryString@)\n  parent: System.Xml.XmlDictionaryReader\n  langs:\n  - csharp\n  - vb\n  name: TryGetValueAsDictionaryString(out XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryReader.TryGetValueAsDictionaryString(out System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetValueAsDictionaryString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 243\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Not implemented in this class (it always returns <strong>false</strong>). May be overridden in derived classes.</p>\\n\"\n  syntax:\n    content: public virtual bool TryGetValueAsDictionaryString(out XmlDictionaryString value)\n    content.vb: Public Overridable Function TryGetValueAsDictionaryString(ByRef value As XmlDictionaryString) As Boolean\n    parameters:\n    - id: value\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>Returns <strong>null</strong>, unless overridden in a derived class.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>false</strong>, unless overridden in a derived class.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryReader.TryGetValueAsDictionaryString(ByRef System.Xml.XmlDictionaryString)\n  name.vb: TryGetValueAsDictionaryString(ByRef XmlDictionaryString)\n  nameWithType: XmlDictionaryReader.TryGetValueAsDictionaryString(out XmlDictionaryString)\n  nameWithType.vb: XmlDictionaryReader.TryGetValueAsDictionaryString(ByRef XmlDictionaryString)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Xml.XmlDictionaryReaderQuotas\n  parent: System.Xml\n  isExternal: false\n  name: XmlDictionaryReaderQuotas\n  fullName: System.Xml.XmlDictionaryReaderQuotas\n  commentId: T:System.Xml.XmlDictionaryReaderQuotas\n  nameWithType: XmlDictionaryReaderQuotas\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Xml.IXmlDictionary\n  parent: System.Xml\n  isExternal: false\n  name: IXmlDictionary\n  fullName: System.Xml.IXmlDictionary\n  commentId: T:System.Xml.IXmlDictionary\n  nameWithType: IXmlDictionary\n- uid: System.Xml.XmlDictionaryReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlDictionaryReader\n  fullName: System.Xml.XmlDictionaryReader\n  commentId: T:System.Xml.XmlDictionaryReader\n  nameWithType: XmlDictionaryReader\n- uid: System.Xml.XmlBinaryReaderSession\n  parent: System.Xml\n  isExternal: false\n  name: XmlBinaryReaderSession\n  fullName: System.Xml.XmlBinaryReaderSession\n  commentId: T:System.Xml.XmlBinaryReaderSession\n  nameWithType: XmlBinaryReaderSession\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlReader\n  fullName: System.Xml.XmlReader\n  commentId: T:System.Xml.XmlReader\n  nameWithType: XmlReader\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  commentId: T:System.Text.Encoding\n  nameWithType: Encoding\n- uid: System.Xml.OnXmlDictionaryReaderClose\n  parent: System.Xml\n  isExternal: false\n  name: OnXmlDictionaryReaderClose\n  fullName: System.Xml.OnXmlDictionaryReaderClose\n  commentId: T:System.Xml.OnXmlDictionaryReaderClose\n  nameWithType: OnXmlDictionaryReaderClose\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  commentId: N:System.Text\n  nameWithType: System.Text\n- uid: System.Xml.XmlDictionaryString\n  parent: System.Xml\n  isExternal: false\n  name: XmlDictionaryString\n  fullName: System.Xml.XmlDictionaryString\n  commentId: T:System.Xml.XmlDictionaryString\n  nameWithType: XmlDictionaryString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.Xml.XmlDictionaryString[]\n  name: XmlDictionaryString[]\n  fullName: System.Xml.XmlDictionaryString[]\n  fullname.vb: System.Xml.XmlDictionaryString()\n  name.vb: XmlDictionaryString()\n  spec.csharp:\n  - uid: System.Xml.XmlDictionaryString\n    name: XmlDictionaryString\n    fullName: System.Xml.XmlDictionaryString\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Xml.XmlDictionaryString\n    name: XmlDictionaryString\n    fullName: System.Xml.XmlDictionaryString\n  - name: ()\n    fullName: ()\n  nameWithType: XmlDictionaryString[]\n  nameWithType.vb: XmlDictionaryString()\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  commentId: T:System.Type\n  nameWithType: Type\n- uid: System.Xml.XmlNodeType\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeType\n  fullName: System.Xml.XmlNodeType\n  commentId: T:System.Xml.XmlNodeType\n  nameWithType: XmlNodeType\n- uid: System.Boolean[]\n  name: Boolean[]\n  fullName: System.Boolean[]\n  fullname.vb: System.Boolean()\n  name.vb: Boolean()\n  spec.csharp:\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Boolean[]\n  nameWithType.vb: Boolean()\n- uid: System.DateTime[]\n  name: DateTime[]\n  fullName: System.DateTime[]\n  fullname.vb: System.DateTime()\n  name.vb: DateTime()\n  spec.csharp:\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: DateTime[]\n  nameWithType.vb: DateTime()\n- uid: System.Decimal[]\n  name: Decimal[]\n  fullName: System.Decimal[]\n  fullname.vb: System.Decimal()\n  name.vb: Decimal()\n  spec.csharp:\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Decimal[]\n  nameWithType.vb: Decimal()\n- uid: System.Double[]\n  name: Double[]\n  fullName: System.Double[]\n  fullname.vb: System.Double()\n  name.vb: Double()\n  spec.csharp:\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Double[]\n  nameWithType.vb: Double()\n- uid: System.Guid[]\n  name: Guid[]\n  fullName: System.Guid[]\n  fullname.vb: System.Guid()\n  name.vb: Guid()\n  spec.csharp:\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Guid[]\n  nameWithType.vb: Guid()\n- uid: System.Int16[]\n  name: Int16[]\n  fullName: System.Int16[]\n  fullname.vb: System.Int16()\n  name.vb: Int16()\n  spec.csharp:\n  - uid: System.Int16\n    name: Int16\n    fullName: System.Int16\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int16\n    name: Int16\n    fullName: System.Int16\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int16[]\n  nameWithType.vb: Int16()\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.Int64[]\n  name: Int64[]\n  fullName: System.Int64[]\n  fullname.vb: System.Int64()\n  name.vb: Int64()\n  spec.csharp:\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int64[]\n  nameWithType.vb: Int64()\n- uid: System.Single[]\n  name: Single[]\n  fullName: System.Single[]\n  fullname.vb: System.Single()\n  name.vb: Single()\n  spec.csharp:\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Single[]\n  nameWithType.vb: Single()\n- uid: System.TimeSpan[]\n  name: TimeSpan[]\n  fullName: System.TimeSpan[]\n  fullname.vb: System.TimeSpan()\n  name.vb: TimeSpan()\n  spec.csharp:\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n  - name: ()\n    fullName: ()\n  nameWithType: TimeSpan[]\n  nameWithType.vb: TimeSpan()\n- uid: System.Xml.IXmlNamespaceResolver\n  parent: System.Xml\n  isExternal: false\n  name: IXmlNamespaceResolver\n  fullName: System.Xml.IXmlNamespaceResolver\n  commentId: T:System.Xml.IXmlNamespaceResolver\n  nameWithType: IXmlNamespaceResolver\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  commentId: T:System.Decimal\n  nameWithType: Decimal\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  commentId: T:System.Guid\n  nameWithType: Guid\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  commentId: T:System.TimeSpan\n  nameWithType: TimeSpan\n- uid: System.Xml.UniqueId\n  parent: System.Xml\n  isExternal: false\n  name: UniqueId\n  fullName: System.Xml.UniqueId\n  commentId: T:System.Xml.UniqueId\n  nameWithType: UniqueId\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  commentId: T:System.Double\n  nameWithType: Double\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.Xml.XmlException\n  isExternal: false\n  name: XmlException\n  fullName: System.Xml.XmlException\n  commentId: T:System.Xml.XmlException\n  nameWithType: XmlException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}