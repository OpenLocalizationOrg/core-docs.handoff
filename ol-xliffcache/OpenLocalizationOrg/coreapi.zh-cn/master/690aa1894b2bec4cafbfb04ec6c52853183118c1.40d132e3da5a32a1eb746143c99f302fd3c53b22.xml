{"nodes":[{"pos":[568,585],"content":"ParallelLoopState","needQuote":true,"nodes":[{"content":"ParallelLoopState","pos":[0,17]}]},{"pos":[2431,2444],"content":"IsExceptional","needQuote":true,"nodes":[{"content":"IsExceptional","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if an unhandled exception was thrown; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[3221,3322],"source":"\\n<p>\\n<strong>true</strong> if an unhandled exception was thrown; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3324,3330],"source":"  </p>\\n"},{"pos":[3685,3694],"content":"IsStopped","needQuote":true,"nodes":[{"content":"IsStopped","pos":[0,9]}]},{"pos":[5142,5162],"content":"LowestBreakIteration","needQuote":true,"nodes":[{"content":"LowestBreakIteration","pos":[0,20]}]},{"pos":[7165,7191],"content":"ShouldExitCurrentIteration","needQuote":true,"nodes":[{"content":"ShouldExitCurrentIteration","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current iteration should exit; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[8028,8129],"source":"\\n<p>\\n<strong>true</strong> if the current iteration should exit; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8130,8136],"source":" </p>\\n"},{"pos":[8894,8901],"content":"Break()","needQuote":true,"nodes":[{"content":"Break()","pos":[0,7]}]},{"pos":[10851,10857],"content":"Stop()","needQuote":true,"nodes":[{"content":"Stop()","pos":[0,6]}]},{"pos":[12433,12455],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[12634,12640],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12800,12810],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12905,12913],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12982,12983],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13010,13011],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13081,13089],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13158,13159],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13186,13187],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13370,13384],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[13503,13509],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13576,13577],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13627,13633],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13693,13694],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13777,13783],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13850,13851],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13901,13907],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13967,13968],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14182,14204],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[14352,14358],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14425,14426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14476,14482],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14543,14544]},{"pos":[14599,14605],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14665,14666],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14763,14769],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14836,14837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14887,14893],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14954,14955]},{"pos":[15010,15016],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15076,15077],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15322,15353],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[15519,15534],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15610,15611],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15661,15667],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15728,15729]},{"pos":[15784,15790],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15850,15851],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15957,15972],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16048,16049],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16099,16105],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16166,16167]},{"pos":[16222,16228],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16288,16289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16519,16532],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16633,16644],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16716,16717],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16744,16745],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16818,16829],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16901,16902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16929,16930],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17105,17114],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17207,17214],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17282,17283],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17310,17311],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17380,17387],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17455,17456],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17483,17484],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17659,17676],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[17785,17800],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17876,17877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17904,17905],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17982,17997],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18073,18074],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18101,18102],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18247,18253],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[18385,18392],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18568,18583],"content":"Nullable<Int64>","needQuote":true,"nodes":[{"content":"Nullable&lt;Int64&gt;","pos":[0,15],"source":"Nullable<Int64>"}]},{"pos":[18756,18764],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[18826,18827],"content":"<","needQuote":true,"nodes":[]},{"pos":[18876,18881],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[19010,19018],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[19081,19084]},{"pos":[19140,19145],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[19204,19205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19407,19418],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[19565,19573],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[19614,19615],"content":"<","needQuote":true,"nodes":[]},{"pos":[19642,19643],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19740,19748],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[19790,19793]},{"pos":[19827,19828],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19855,19856],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20053,20078],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Threading.Tasks.ParallelLoopState\n  commentId: T:System.Threading.Tasks.ParallelLoopState\n  id: ParallelLoopState\n  parent: System.Threading.Tasks\n  children:\n  - System.Threading.Tasks.ParallelLoopState.Break\n  - System.Threading.Tasks.ParallelLoopState.IsExceptional\n  - System.Threading.Tasks.ParallelLoopState.IsStopped\n  - System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  - System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  - System.Threading.Tasks.ParallelLoopState.Stop\n  langs:\n  - csharp\n  - vb\n  name: ParallelLoopState\n  fullName: System.Threading.Tasks.ParallelLoopState\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ParallelLoopState\n    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n    startLine: 28\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Enables iterations of parallel loops to interact with other iterations. An instance of this class is provided by the <xref href=\\\"System.Threading.Tasks.Parallel\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class to each loop; you can not create instances in your code. </p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      [DebuggerDisplay(\"ShouldExitCurrentIteration = {ShouldExitCurrentIteration}\")]\n\n      public class ParallelLoopState\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      <DebuggerDisplay(\"ShouldExitCurrentIteration = {ShouldExitCurrentIteration}\")>\n\n      Public Class ParallelLoopState\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ParallelLoopState\n- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional\n  commentId: P:System.Threading.Tasks.ParallelLoopState.IsExceptional\n  id: IsExceptional\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  - vb\n  name: IsExceptional\n  fullName: System.Threading.Tasks.ParallelLoopState.IsExceptional\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsExceptional\n    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n    startLine: 91\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration. </p>\\n\"\n  syntax:\n    content: public bool IsExceptional { get; }\n    content.vb: Public ReadOnly Property IsExceptional As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if an unhandled exception was thrown; otherwise, <strong>false</strong>.  </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ParallelLoopState.IsExceptional\n- uid: System.Threading.Tasks.ParallelLoopState.IsStopped\n  commentId: P:System.Threading.Tasks.ParallelLoopState.IsStopped\n  id: IsStopped\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  - vb\n  name: IsStopped\n  fullName: System.Threading.Tasks.ParallelLoopState.IsStopped\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsStopped\n    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n    startLine: 79\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets whether any iteration of the loop has called the <xref href=\\\"System.Threading.Tasks.ParallelLoopState.Stop\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: public bool IsStopped { get; }\n    content.vb: Public ReadOnly Property IsStopped As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if any iteration has stopped the loop by calling the <xref href=\\\"System.Threading.Tasks.ParallelLoopState.Stop\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ParallelLoopState.IsStopped\n- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  commentId: P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  id: LowestBreakIteration\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  - vb\n  name: LowestBreakIteration\n  fullName: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LowestBreakIteration\n    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n    startLine: 118\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the lowest iteration of the loop from which <xref href=\\\"System.Threading.Tasks.ParallelLoopState.Break\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was called. </p>\\n\"\n  syntax:\n    content: public long ? LowestBreakIteration { get; }\n    content.vb: Public ReadOnly Property LowestBreakIteration As Long?\n    parameters: []\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The lowest iteration from which <xref href=\\\"System.Threading.Tasks.ParallelLoopState.Break\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was called. In the case of a <xref href=\\\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> loop, the value is based on an internally-generated index. </p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n    commentId: P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  - type: System.Threading.Tasks.ParallelLoopState.Break\n    commentId: M:System.Threading.Tasks.ParallelLoopState.Break\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ParallelLoopState.LowestBreakIteration\n- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  commentId: P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  id: ShouldExitCurrentIteration\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  - vb\n  name: ShouldExitCurrentIteration\n  fullName: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ShouldExitCurrentIteration\n    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n    startLine: 68\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</p>\\n\"\n  syntax:\n    content: public bool ShouldExitCurrentIteration { get; }\n    content.vb: Public ReadOnly Property ShouldExitCurrentIteration As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current iteration should exit; otherwise, <strong>false</strong>. </p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n    commentId: P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  - type: System.Threading.Tasks.ParallelLoopState.Break\n    commentId: M:System.Threading.Tasks.ParallelLoopState.Break\n  - type: System.Threading.Tasks.ParallelLoopState.Stop\n    commentId: M:System.Threading.Tasks.ParallelLoopState.Stop\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ParallelLoopState.ShouldExitCurrentIteration\n- uid: System.Threading.Tasks.ParallelLoopState.Break\n  commentId: M:System.Threading.Tasks.ParallelLoopState.Break\n  id: Break\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  - vb\n  name: Break()\n  fullName: System.Threading.Tasks.ParallelLoopState.Break()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Break\n    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n    startLine: 185\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Communicates that the <xref href=\\\"System.Threading.Tasks.Parallel\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience. </p>\\n\"\n  syntax:\n    content: public void Break()\n    content.vb: Public Sub Break\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.ParallelLoopState.Stop\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was previously called. <xref href=\\\"System.Threading.Tasks.ParallelLoopState.Break\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Threading.Tasks.ParallelLoopState.Stop\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> may not be used in combination by iterations of the same loop.</p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n    commentId: P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\n  - type: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n    commentId: P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ParallelLoopState.Break()\n- uid: System.Threading.Tasks.ParallelLoopState.Stop\n  commentId: M:System.Threading.Tasks.ParallelLoopState.Stop\n  id: Stop\n  parent: System.Threading.Tasks.ParallelLoopState\n  langs:\n  - csharp\n  - vb\n  name: Stop()\n  fullName: System.Threading.Tasks.ParallelLoopState.Stop()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stop\n    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs\n    startLine: 146\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Communicates that the <xref href=\\\"System.Threading.Tasks.Parallel\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> loop should cease execution at the system's earliest convenience.</p>\\n\"\n  syntax:\n    content: public void Stop()\n    content.vb: Public Sub Stop\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.ParallelLoopState.Break\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called previously. <xref href=\\\"System.Threading.Tasks.ParallelLoopState.Break\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Threading.Tasks.ParallelLoopState.Stop\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> may not be used in combination by iterations of the same loop.</p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.ParallelLoopState.IsStopped\n    commentId: P:System.Threading.Tasks.ParallelLoopState.IsStopped\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ParallelLoopState.Stop()\nreferences:\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Nullable{System.Int64}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n  fullname.vb: System.Nullable(Of System.Int64)\n  name.vb: Nullable(Of Int64)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Nullable<Int64>\n  nameWithType.vb: Nullable(Of Int64)\n  commentId: T:System.Nullable{System.Int64}\n- uid: System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n  commentId: T:System.Nullable`1\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}