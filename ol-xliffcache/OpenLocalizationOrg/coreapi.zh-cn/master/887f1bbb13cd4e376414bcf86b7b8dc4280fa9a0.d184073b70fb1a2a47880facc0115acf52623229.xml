{"nodes":[{"pos":[12828,12835],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[14871,14895],"content":"ChangeType(Object, Type)","needQuote":true,"nodes":[{"content":"ChangeType(Object, Type)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The type of object to return.","pos":[15855,15889],"source":"\\n<p>The type of object to return."},{"content":"&lt;/p&gt;\\n","pos":[15890,15896],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object whose type is &lt;em&gt;conversionType&lt;/em&gt; and whose value is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;A null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic), if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;conversionType&lt;/em&gt; is not a value type.","pos":[15956,16231],"source":"\\n<p>An object whose type is <em>conversionType</em> and whose value is equivalent to <em>value</em>.</p>\\n<p>-or-</p>\\n<p>A null reference (<strong>Nothing</strong> in Visual Basic), if <em>value</em> is <strong>null</strong> and <em>conversionType</em> is not a value type."},{"content":"&lt;/p&gt;\\n","pos":[16232,16238],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in a format recognized by &lt;em&gt;conversionType&lt;/em&gt;.&lt;/p&gt;\\n","pos":[16754,16839],"source":"\\n<p>\\n<em>value</em> is not in a format recognized by <em>conversionType</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; represents a number that is out of the range of &lt;em&gt;conversionType&lt;/em&gt;.&lt;/p&gt;\\n","pos":[16936,17036],"source":"\\n<p>\\n<em>value</em> represents a number that is out of the range of <em>conversionType</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;conversionType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17141,17203],"source":"\\n<p>\\n<em>conversionType</em> is <strong>null</strong>.</p>\\n"},{"pos":[17635,17676],"content":"ChangeType(Object, Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"ChangeType(Object, Type, IFormatProvider)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The type of object to return.","pos":[18773,18807],"source":"\\n<p>The type of object to return."},{"content":"&lt;/p&gt;\\n","pos":[18808,18814],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[18890,18959],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[18960,18966],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in a format for &lt;em&gt;conversionType&lt;/em&gt; recognized by &lt;em&gt;provider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[19999,20106],"source":"\\n<p>\\n<em>value</em> is not in a format for <em>conversionType</em> recognized by <em>provider</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; represents a number that is out of the range of &lt;em&gt;conversionType&lt;/em&gt;.&lt;/p&gt;\\n","pos":[20203,20303],"source":"\\n<p>\\n<em>value</em> represents a number that is out of the range of <em>conversionType</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;conversionType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20408,20470],"source":"\\n<p>\\n<em>conversionType</em> is <strong>null</strong>.</p>\\n"},{"pos":[20931,20976],"content":"ChangeType(Object, TypeCode, IFormatProvider)","needQuote":true,"nodes":[{"content":"ChangeType(Object, TypeCode, IFormatProvider)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The type of object to return.","pos":[22071,22105],"source":"\\n<p>The type of object to return."},{"content":"&lt;/p&gt;\\n","pos":[22106,22112],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[22188,22257],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[22258,22264],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in a format for the &lt;em&gt;typeCode&lt;/em&gt; type recognized by &lt;em&gt;provider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[23358,23468],"source":"\\n<p>\\n<em>value</em> is not in a format for the <em>typeCode</em> type recognized by <em>provider</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; represents a number that is out of the range of the &lt;em&gt;typeCode&lt;/em&gt; type.&lt;/p&gt;\\n","pos":[23565,23668],"source":"\\n<p>\\n<em>value</em> represents a number that is out of the range of the <em>typeCode</em> type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeCode&lt;/em&gt; is invalid.","pos":[23765,23801],"source":"\\n<p>\\n<em>typeCode</em> is invalid."},{"content":"&lt;/p&gt;\\n","pos":[23802,23808],"source":" </p>\\n"},{"pos":[24261,24302],"content":"FromBase64CharArray(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"FromBase64CharArray(Char[], Int32, Int32)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;A Unicode character array.","pos":[25345,25376],"source":"\\n<p>A Unicode character array."},{"content":"&lt;/p&gt;\\n","pos":[25377,25383],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A position within &lt;em&gt;inArray&lt;/em&gt;.","pos":[25447,25487],"source":"\\n<p>A position within <em>inArray</em>."},{"content":"&lt;/p&gt;\\n","pos":[25488,25494],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in &lt;em&gt;inArray&lt;/em&gt; to convert.","pos":[25558,25617],"source":"\\n<p>The number of elements in <em>inArray</em> to convert."},{"content":"&lt;/p&gt;\\n","pos":[25618,25624],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of 8-bit unsigned integers equivalent to &lt;em&gt;length&lt;/em&gt; elements at position &lt;em&gt;offset&lt;/em&gt; in &lt;em&gt;inArray&lt;/em&gt;.&lt;/p&gt;\\n","pos":[25684,25818],"source":"\\n<p>An array of 8-bit unsigned integers equivalent to <em>length</em> elements at position <em>offset</em> in <em>inArray</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;inArray&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[25937,25986],"source":"\\n<p>\\n<em>inArray</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[25987,25993],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;length&lt;/em&gt; is less than 0.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; plus &lt;em&gt;length&lt;/em&gt; indicates a position not within &lt;em&gt;inArray&lt;/em&gt;.","pos":[26110,26278],"source":"\\n<p>\\n<em>offset</em> or <em>length</em> is less than 0.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset</em> plus <em>length</em> indicates a position not within <em>inArray</em>."},{"content":"&lt;/p&gt;\\n","pos":[26279,26285],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of &lt;em&gt;inArray&lt;/em&gt;, ignoring white-space characters, is not zero or a multiple of 4.","pos":[26378,26479],"source":"\\n<p>The length of <em>inArray</em>, ignoring white-space characters, is not zero or a multiple of 4."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The format of &lt;em&gt;inArray&lt;/em&gt; is invalid.","pos":[26480,26544],"source":" </p>\\n<p>-or-</p>\\n<p>The format of <em>inArray</em> is invalid."},{"content":"&lt;em&gt;inArray&lt;/em&gt; contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters.","pos":[26545,26690],"source":" <em>inArray</em> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters."},{"content":"&lt;/p&gt;\\n","pos":[26691,26697],"source":" </p>\\n"},{"pos":[27639,27663],"content":"FromBase64String(String)","needQuote":true,"nodes":[{"content":"FromBase64String(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The string to convert.","pos":[28481,28508],"source":"\\n<p>The string to convert."},{"content":"&lt;/p&gt;\\n","pos":[28509,28515],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of 8-bit unsigned integers that is equivalent to &lt;em&gt;s&lt;/em&gt;.&lt;/p&gt;\\n","pos":[28575,28655],"source":"\\n<p>An array of 8-bit unsigned integers that is equivalent to <em>s</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28774,28817],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28818,28824],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of &lt;em&gt;s&lt;/em&gt;, ignoring white-space characters, is not zero or a multiple of 4.","pos":[28917,29012],"source":"\\n<p>The length of <em>s</em>, ignoring white-space characters, is not zero or a multiple of 4."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The format of &lt;em&gt;s&lt;/em&gt; is invalid.","pos":[29013,29071],"source":" </p>\\n<p>-or-</p>\\n<p>The format of <em>s</em> is invalid."},{"content":"&lt;em&gt;s&lt;/em&gt; contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.&lt;/p&gt;\\n","pos":[29072,29217],"source":" <em>s</em> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.</p>\\n"},{"pos":[29800,29819],"content":"GetTypeCode(Object)","needQuote":true,"nodes":[{"content":"GetTypeCode(Object)","pos":[0,19]}]},{"pos":[31480,31534],"content":"ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;An input array of 8-bit unsigned integers.","pos":[32635,32682],"source":"\\n<p>An input array of 8-bit unsigned integers."},{"content":"&lt;/p&gt;\\n","pos":[32683,32689],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A position within &lt;em&gt;inArray&lt;/em&gt;.","pos":[32755,32795],"source":"\\n<p>A position within <em>inArray</em>."},{"content":"&lt;/p&gt;\\n","pos":[32796,32802],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements of &lt;em&gt;inArray&lt;/em&gt; to convert.","pos":[32866,32925],"source":"\\n<p>The number of elements of <em>inArray</em> to convert."},{"content":"&lt;/p&gt;\\n","pos":[32926,32932],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An output array of Unicode characters.","pos":[32999,33042],"source":"\\n<p>An output array of Unicode characters."},{"content":"&lt;/p&gt;\\n","pos":[33043,33049],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A position within &lt;em&gt;outArray&lt;/em&gt;.","pos":[33116,33157],"source":"\\n<p>A position within <em>outArray</em>."},{"content":"&lt;/p&gt;\\n","pos":[33158,33164],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer containing the number of bytes in &lt;em&gt;outArray&lt;/em&gt;.&lt;/p&gt;\\n","pos":[33223,33310],"source":"\\n<p>A 32-bit signed integer containing the number of bytes in <em>outArray</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;inArray&lt;/em&gt; or &lt;em&gt;outArray&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[33429,33499],"source":"\\n<p>\\n<em>inArray</em> or <em>outArray</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[33500,33506],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offsetIn&lt;/em&gt;, &lt;em&gt;offsetOut&lt;/em&gt;, or &lt;em&gt;length&lt;/em&gt; is negative.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offsetIn&lt;/em&gt; plus &lt;em&gt;length&lt;/em&gt; is greater than the length of &lt;em&gt;inArray&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offsetOut&lt;/em&gt; plus the number of elements to return is greater than the length of &lt;em&gt;outArray&lt;/em&gt;.","pos":[33623,33941],"source":"\\n<p>\\n<em>offsetIn</em>, <em>offsetOut</em>, or <em>length</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>offsetIn</em> plus <em>length</em> is greater than the length of <em>inArray</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>offsetOut</em> plus the number of elements to return is greater than the length of <em>outArray</em>."},{"content":"&lt;/p&gt;\\n","pos":[33942,33948],"source":" </p>\\n"},{"pos":[34896,34918],"content":"ToBase64String(Byte[])","needQuote":true,"nodes":[{"content":"ToBase64String(Byte[])","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An array of 8-bit unsigned integers.","pos":[35667,35708],"source":"\\n<p>An array of 8-bit unsigned integers."},{"content":"&lt;/p&gt;\\n","pos":[35709,35715],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation, in base 64, of the contents of &lt;em&gt;inArray&lt;/em&gt;.&lt;/p&gt;\\n","pos":[35775,35861],"source":"\\n<p>The string representation, in base 64, of the contents of <em>inArray</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;inArray&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[35980,36029],"source":"\\n<p>\\n<em>inArray</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[36030,36036],"source":" </p>\\n"},{"pos":[36848,36884],"content":"ToBase64String(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ToBase64String(Byte[], Int32, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;An array of 8-bit unsigned integers.","pos":[37850,37891],"source":"\\n<p>An array of 8-bit unsigned integers."},{"content":"&lt;/p&gt;\\n","pos":[37892,37898],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An offset in &lt;em&gt;inArray&lt;/em&gt;.","pos":[37962,37997],"source":"\\n<p>An offset in <em>inArray</em>."},{"content":"&lt;/p&gt;\\n","pos":[37998,38004],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements of &lt;em&gt;inArray&lt;/em&gt; to convert.","pos":[38068,38127],"source":"\\n<p>The number of elements of <em>inArray</em> to convert."},{"content":"&lt;/p&gt;\\n","pos":[38128,38134],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation in base 64 of &lt;em&gt;length&lt;/em&gt; elements of &lt;em&gt;inArray&lt;/em&gt;, starting at position &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[38194,38328],"source":"\\n<p>The string representation in base 64 of <em>length</em> elements of <em>inArray</em>, starting at position <em>offset</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;inArray&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[38447,38496],"source":"\\n<p>\\n<em>inArray</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[38497,38503],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;length&lt;/em&gt; is negative.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; plus &lt;em&gt;length&lt;/em&gt; is greater than the length of &lt;em&gt;inArray&lt;/em&gt;.","pos":[38620,38783],"source":"\\n<p>\\n<em>offset</em> or <em>length</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset</em> plus <em>length</em> is greater than the length of <em>inArray</em>."},{"content":"&lt;/p&gt;\\n","pos":[38784,38790],"source":" </p>\\n"},{"pos":[39582,39600],"content":"ToBoolean(Boolean)","needQuote":true,"nodes":[{"content":"ToBoolean(Boolean)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The Boolean value to return.","pos":[40272,40305],"source":"\\n<p>The Boolean value to return."},{"content":"&lt;/p&gt;\\n","pos":[40306,40312],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[40373,40423],"source":"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n"},{"pos":[40803,40818],"content":"ToBoolean(Byte)","needQuote":true,"nodes":[{"content":"ToBoolean(Byte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[41500,41543],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[41544,41550],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[41611,41711],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[42091,42109],"content":"ToBoolean(Decimal)","needQuote":true,"nodes":[{"content":"ToBoolean(Decimal)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The number to convert.","pos":[42795,42822],"source":"\\n<p>The number to convert."},{"content":"&lt;/p&gt;\\n","pos":[42823,42829],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42890,42990],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[43376,43393],"content":"ToBoolean(Double)","needQuote":true,"nodes":[{"content":"ToBoolean(Double)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[44099,44158],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[44159,44165],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44226,44326],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[44706,44722],"content":"ToBoolean(Int16)","needQuote":true,"nodes":[{"content":"ToBoolean(Int16)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[45407,45449],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[45450,45456],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[45517,45617],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[45994,46010],"content":"ToBoolean(Int32)","needQuote":true,"nodes":[{"content":"ToBoolean(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[46695,46737],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[46738,46744],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[46805,46905],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[47282,47298],"content":"ToBoolean(Int64)","needQuote":true,"nodes":[{"content":"ToBoolean(Int64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[47981,48023],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[48024,48030],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[48091,48191],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[48571,48588],"content":"ToBoolean(Object)","needQuote":true,"nodes":[{"content":"ToBoolean(Object)","pos":[0,17]}]},{"pos":[51033,51067],"content":"ToBoolean(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToBoolean(Object, IFormatProvider)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[52115,52184],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[52185,52191],"source":" </p>\\n"},{"pos":[53751,53767],"content":"ToBoolean(SByte)","needQuote":true,"nodes":[{"content":"ToBoolean(SByte)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[54527,54568],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[54569,54575],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54636,54736],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[55291,55308],"content":"ToBoolean(Single)","needQuote":true,"nodes":[{"content":"ToBoolean(Single)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to convert.","pos":[56013,56072],"source":"\\n<p>The single-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[56073,56079],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[56140,56240],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[56623,56640],"content":"ToBoolean(String)","needQuote":true,"nodes":[{"content":"ToBoolean(String)","pos":[0,17]}]},{"pos":[58712,58746],"content":"ToBoolean(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToBoolean(String, IFormatProvider)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[59883,59952],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"This parameter is ignored.&lt;/p&gt;\\n","pos":[59953,59985],"source":" This parameter is ignored.</p>\\n"},{"pos":[61084,61101],"content":"ToBoolean(UInt16)","needQuote":true,"nodes":[{"content":"ToBoolean(UInt16)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[61868,61912],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[61913,61919],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[61980,62080],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[62638,62655],"content":"ToBoolean(UInt32)","needQuote":true,"nodes":[{"content":"ToBoolean(UInt32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[63422,63466],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[63467,63473],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[63534,63634],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[64192,64209],"content":"ToBoolean(UInt64)","needQuote":true,"nodes":[{"content":"ToBoolean(UInt64)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[64974,65018],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[65019,65025],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value&lt;/em&gt; is not zero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[65086,65186],"source":"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[65738,65753],"content":"ToByte(Boolean)","needQuote":true,"nodes":[{"content":"ToByte(Boolean)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[66417,66451],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[66452,66458],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number 1 if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;; otherwise, 0.&lt;/p&gt;\\n","pos":[66516,66597],"source":"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n"},{"pos":[66897,66909],"content":"ToByte(Byte)","needQuote":true,"nodes":[{"content":"ToByte(Byte)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to return.","pos":[67566,67608],"source":"\\n<p>The 8-bit unsigned integer to return."},{"content":"&lt;/p&gt;\\n","pos":[67609,67615],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[67673,67723],"source":"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n"},{"pos":[68020,68032],"content":"ToByte(Char)","needQuote":true,"nodes":[{"content":"ToByte(Char)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[68704,68742],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[68743,68749],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[68807,68881],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[69449,69464],"content":"ToByte(Decimal)","needQuote":true,"nodes":[{"content":"ToByte(Decimal)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The number to convert.","pos":[70144,70171],"source":"\\n<p>The number to convert."},{"content":"&lt;/p&gt;\\n","pos":[70172,70178],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 8-bit unsigned integer.","pos":[70236,70305],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 8-bit unsigned integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[70306,70455],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[71092,71106],"content":"ToByte(Double)","needQuote":true,"nodes":[{"content":"ToByte(Double)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[71806,71865],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[71866,71872],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 8-bit unsigned integer.","pos":[71930,71999],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 8-bit unsigned integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[72000,72149],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[72782,72795],"content":"ToByte(Int16)","needQuote":true,"nodes":[{"content":"ToByte(Int16)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[73474,73516],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[73517,73523],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[73581,73655],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[74287,74300],"content":"ToByte(Int32)","needQuote":true,"nodes":[{"content":"ToByte(Int32)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[74979,75021],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[75022,75028],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[75086,75160],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[75792,75805],"content":"ToByte(Int64)","needQuote":true,"nodes":[{"content":"ToByte(Int64)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[76482,76524],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[76525,76531],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[76589,76663],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[77298,77312],"content":"ToByte(Object)","needQuote":true,"nodes":[{"content":"ToByte(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[78185,78311],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[79660,79691],"content":"ToByte(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToByte(Object, IFormatProvider)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[80696,80765],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[80766,80772],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[80830,80956],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[82250,82263],"content":"ToByte(SByte)","needQuote":true,"nodes":[{"content":"ToByte(SByte)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to be converted.","pos":[83017,83063],"source":"\\n<p>The 8-bit signed integer to be converted."},{"content":"&lt;/p&gt;\\n","pos":[83064,83070],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[83128,83202],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[83915,83929],"content":"ToByte(Single)","needQuote":true,"nodes":[{"content":"ToByte(Single)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A single-precision floating-point number.","pos":[84628,84674],"source":"\\n<p>A single-precision floating-point number."},{"content":"&lt;/p&gt;\\n","pos":[84675,84681],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 8-bit unsigned integer.","pos":[84739,84808],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 8-bit unsigned integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[84809,84958],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[85700,85714],"content":"ToByte(String)","needQuote":true,"nodes":[{"content":"ToByte(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[86396,86446],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[86447,86453],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[86511,86637],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[86744,86850],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[86851,86857],"source":" </p>\\n"},{"pos":[87677,87708],"content":"ToByte(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToByte(String, IFormatProvider)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[88526,88576],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[88577,88583],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[88659,88728],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[88729,88735],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[88793,88919],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[89026,89132],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[89133,89139],"source":" </p>\\n"},{"pos":[89946,89967],"content":"ToByte(String, Int32)","needQuote":true,"nodes":[{"content":"ToByte(String, Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[90709,90759],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[90760,90766],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the number in &lt;em&gt;value&lt;/em&gt;, which must be 2, 8, 10, or 16.","pos":[90832,90909],"source":"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[90910,90916],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[90974,91118],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fromBase&lt;/em&gt; is not 2, 8, 10, or 16.","pos":[91229,91277],"source":"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","pos":[91278,91399],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."},{"content":"&lt;/p&gt;\\n","pos":[91400,91406],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; contains a character that is not a valid digit in the base specified by &lt;em&gt;fromBase&lt;/em&gt;.","pos":[91728,91840],"source":"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>."},{"content":"The exception message indicates that there are no digits to convert if the first character in &lt;em&gt;value&lt;/em&gt; is invalid; otherwise, the message indicates that &lt;em&gt;value&lt;/em&gt; contains invalid trailing characters.&lt;/p&gt;\\n","pos":[91841,92058],"source":" The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n"},{"pos":[92828,92842],"content":"ToByte(UInt16)","needQuote":true,"nodes":[{"content":"ToByte(UInt16)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[93603,93647],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[93648,93654],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[93712,93786],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[94503,94517],"content":"ToByte(UInt32)","needQuote":true,"nodes":[{"content":"ToByte(UInt32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[95278,95322],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[95323,95329],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[95387,95461],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[96178,96192],"content":"ToByte(UInt64)","needQuote":true,"nodes":[{"content":"ToByte(UInt64)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[96951,96995],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[96996,97002],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[97060,97134],"source":"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[97845,97857],"content":"ToChar(Byte)","needQuote":true,"nodes":[{"content":"ToChar(Byte)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[98529,98572],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[98573,98579],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode character that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[98637,98705],"source":"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n"},{"pos":[99005,99018],"content":"ToChar(Int16)","needQuote":true,"nodes":[{"content":"ToChar(Int16)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[99693,99735],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[99736,99742],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode character that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[99800,99868],"source":"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n"},{"pos":[100403,100416],"content":"ToChar(Int32)","needQuote":true,"nodes":[{"content":"ToChar(Int32)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[101091,101133],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[101134,101140],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode character that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[101198,101266],"source":"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n"},{"pos":[101898,101911],"content":"ToChar(Int64)","needQuote":true,"nodes":[{"content":"ToChar(Int64)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[102584,102626],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[102627,102633],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode character that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[102691,102759],"source":"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n"},{"pos":[103394,103408],"content":"ToChar(Object)","needQuote":true,"nodes":[{"content":"ToChar(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is a null string.&lt;/p&gt;\\n","pos":[104555,104600],"source":"\\n<p>\\n<em>value</em> is a null string.</p>\\n"},{"pos":[105684,105715],"content":"ToChar(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToChar(Object, IFormatProvider)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[106727,106796],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[106797,106803],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is a null string.&lt;/p&gt;\\n","pos":[107176,107221],"source":"\\n<p>\\n<em>value</em> is a null string.</p>\\n"},{"pos":[108250,108263],"content":"ToChar(SByte)","needQuote":true,"nodes":[{"content":"ToChar(SByte)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[109013,109054],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[109055,109061],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode character that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[109119,109187],"source":"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n"},{"pos":[109900,109914],"content":"ToChar(String)","needQuote":true,"nodes":[{"content":"ToChar(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A string of length 1.","pos":[110573,110599],"source":"\\n<p>A string of length 1."},{"content":"&lt;/p&gt;\\n","pos":[110600,110606],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode character that is equivalent to the first and only character in &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[110664,110764],"source":"\\n<p>A Unicode character that is equivalent to the first and only character in <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[110883,110930],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[110931,110937],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of &lt;em&gt;value&lt;/em&gt; is not 1.","pos":[111030,111073],"source":"\\n<p>The length of <em>value</em> is not 1."},{"content":"&lt;/p&gt;\\n","pos":[111074,111080],"source":" </p>\\n"},{"pos":[111454,111485],"content":"ToChar(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToChar(String, IFormatProvider)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;A string of length 1 or &lt;strong&gt;null&lt;/strong&gt;.","pos":[112280,112331],"source":"\\n<p>A string of length 1 or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[112332,112338],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[112414,112483],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"This parameter is ignored.&lt;/p&gt;\\n","pos":[112484,112516],"source":" This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;A Unicode character that is equivalent to the first and only character in &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[112574,112674],"source":"\\n<p>A Unicode character that is equivalent to the first and only character in <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[112793,112840],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[112841,112847],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of &lt;em&gt;value&lt;/em&gt; is not 1.","pos":[112940,112983],"source":"\\n<p>The length of <em>value</em> is not 1."},{"content":"&lt;/p&gt;\\n","pos":[112984,112990],"source":" </p>\\n"},{"pos":[113312,113326],"content":"ToChar(UInt16)","needQuote":true,"nodes":[{"content":"ToChar(UInt16)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[114083,114127],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[114128,114134],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode character that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[114192,114260],"source":"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n"},{"pos":[114740,114754],"content":"ToChar(UInt32)","needQuote":true,"nodes":[{"content":"ToChar(UInt32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[115511,115555],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[115556,115562],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode character that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[115620,115688],"source":"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n"},{"pos":[116405,116419],"content":"ToChar(UInt64)","needQuote":true,"nodes":[{"content":"ToChar(UInt64)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[117174,117218],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[117219,117225],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A Unicode character that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[117283,117351],"source":"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n"},{"pos":[118080,118098],"content":"ToDateTime(Object)","needQuote":true,"nodes":[{"content":"ToDateTime(Object)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not a valid date and time value.&lt;/p&gt;\\n","pos":[119395,119458],"source":"\\n<p>\\n<em>value</em> is not a valid date and time value.</p>\\n"},{"pos":[120147,120182],"content":"ToDateTime(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDateTime(Object, IFormatProvider)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[121267,121336],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[121337,121343],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not a valid date and time value.&lt;/p&gt;\\n","pos":[121747,121810],"source":"\\n<p>\\n<em>value</em> is not a valid date and time value.</p>\\n"},{"pos":[122447,122465],"content":"ToDateTime(String)","needQuote":true,"nodes":[{"content":"ToDateTime(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The string representation of a date and time.&lt;/p&gt;\\n","pos":[123172,123228],"source":"\\n<p>The string representation of a date and time.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not a properly formatted date and time string.","pos":[123632,123703],"source":"\\n<p>\\n<em>value</em> is not a properly formatted date and time string."},{"content":"&lt;/p&gt;\\n","pos":[123704,123710],"source":" </p>\\n"},{"pos":[124234,124269],"content":"ToDateTime(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDateTime(String, IFormatProvider)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;A string that contains a date and time to convert.","pos":[125103,125158],"source":"\\n<p>A string that contains a date and time to convert."},{"content":"&lt;/p&gt;\\n","pos":[125159,125165],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[125241,125310],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[125311,125317],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not a properly formatted date and time string.","pos":[125721,125792],"source":"\\n<p>\\n<em>value</em> is not a properly formatted date and time string."},{"content":"&lt;/p&gt;\\n","pos":[125793,125799],"source":" </p>\\n"},{"pos":[126137,126155],"content":"ToDecimal(Boolean)","needQuote":true,"nodes":[{"content":"ToDecimal(Boolean)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[126830,126864],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[126865,126871],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number 1 if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;; otherwise, 0.&lt;/p&gt;\\n","pos":[126932,127013],"source":"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n"},{"pos":[127393,127408],"content":"ToDecimal(Byte)","needQuote":true,"nodes":[{"content":"ToDecimal(Byte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[128096,128139],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[128140,128146],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The decimal number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[128207,128274],"source":"\\n<p>The decimal number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[128660,128678],"content":"ToDecimal(Decimal)","needQuote":true,"nodes":[{"content":"ToDecimal(Decimal)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A decimal number.","pos":[129358,129380],"source":"\\n<p>A decimal number."},{"content":"&lt;/p&gt;\\n","pos":[129381,129387],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[129448,129498],"source":"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n"},{"pos":[129816,129833],"content":"ToDecimal(Double)","needQuote":true,"nodes":[{"content":"ToDecimal(Double)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[130544,130603],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[130604,130610],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A decimal number that is equivalent to &lt;em&gt;value&lt;/em&gt;.","pos":[130671,130730],"source":"\\n<p>A decimal number that is equivalent to <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[130731,130737],"source":" </p>\\n"},{"pos":[131549,131565],"content":"ToDecimal(Int16)","needQuote":true,"nodes":[{"content":"ToDecimal(Int16)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[132255,132297],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[132298,132304],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A decimal number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[132365,132430],"source":"\\n<p>A decimal number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[132811,132827],"content":"ToDecimal(Int32)","needQuote":true,"nodes":[{"content":"ToDecimal(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[133517,133559],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[133560,133566],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A decimal number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[133627,133692],"source":"\\n<p>A decimal number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[134073,134089],"content":"ToDecimal(Int64)","needQuote":true,"nodes":[{"content":"ToDecimal(Int64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[134777,134819],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[134820,134826],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A decimal number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[134887,134952],"source":"\\n<p>A decimal number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[135336,135353],"content":"ToDecimal(Object)","needQuote":true,"nodes":[{"content":"ToDecimal(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A decimal number that is equivalent to &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[136251,136372],"source":"\\n<p>A decimal number that is equivalent to <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[137725,137759],"content":"ToDecimal(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDecimal(Object, IFormatProvider)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[138786,138855],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[138856,138862],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A decimal number that is equivalent to &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[138923,139044],"source":"\\n<p>A decimal number that is equivalent to <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[140342,140358],"content":"ToDecimal(SByte)","needQuote":true,"nodes":[{"content":"ToDecimal(SByte)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[141124,141165],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[141166,141172],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A decimal number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[141233,141298],"source":"\\n<p>A decimal number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[141857,141874],"content":"ToDecimal(Single)","needQuote":true,"nodes":[{"content":"ToDecimal(Single)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to convert.","pos":[142585,142644],"source":"\\n<p>The single-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[142645,142651],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A decimal number that is equivalent to &lt;em&gt;value&lt;/em&gt;.","pos":[142712,142771],"source":"\\n<p>A decimal number that is equivalent to <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[142772,142778],"source":" </p>\\n"},{"pos":[143497,143514],"content":"ToDecimal(String)","needQuote":true,"nodes":[{"content":"ToDecimal(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.","pos":[144207,144255],"source":"\\n<p>A string that contains a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[144256,144262],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A decimal number that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[144323,144458],"source":"\\n<p>A decimal number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not a number in a valid format.&lt;/p&gt;\\n","pos":[144565,144627],"source":"\\n<p>\\n<em>value</em> is not a number in a valid format.</p>\\n"},{"pos":[145361,145395],"content":"ToDecimal(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDecimal(String, IFormatProvider)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.","pos":[146228,146276],"source":"\\n<p>A string that contains a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[146277,146283],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[146359,146428],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[146429,146435],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A decimal number that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[146496,146631],"source":"\\n<p>A decimal number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not a number in a valid format.&lt;/p&gt;\\n","pos":[146738,146800],"source":"\\n<p>\\n<em>value</em> is not a number in a valid format.</p>\\n"},{"pos":[147482,147499],"content":"ToDecimal(UInt16)","needQuote":true,"nodes":[{"content":"ToDecimal(UInt16)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[148271,148315],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[148316,148322],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The decimal number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[148383,148450],"source":"\\n<p>The decimal number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[149010,149027],"content":"ToDecimal(UInt32)","needQuote":true,"nodes":[{"content":"ToDecimal(UInt32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[149799,149843],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[149844,149850],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A decimal number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[149911,149976],"source":"\\n<p>A decimal number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[150536,150553],"content":"ToDecimal(UInt64)","needQuote":true,"nodes":[{"content":"ToDecimal(UInt64)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[151323,151367],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[151368,151374],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A decimal number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[151435,151500],"source":"\\n<p>A decimal number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[152060,152077],"content":"ToDouble(Boolean)","needQuote":true,"nodes":[{"content":"ToDouble(Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[152770,152804],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[152805,152811],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number 1 if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;; otherwise, 0.&lt;/p&gt;\\n","pos":[152871,152952],"source":"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n"},{"pos":[153260,153274],"content":"ToDouble(Byte)","needQuote":true,"nodes":[{"content":"ToDouble(Byte)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[153980,154023],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[154024,154030],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The double-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[154090,154181],"source":"\\n<p>The double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[154495,154512],"content":"ToDouble(Decimal)","needQuote":true,"nodes":[{"content":"ToDouble(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[155221,155256],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[155257,155263],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[155323,155412],"source":"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[155726,155742],"content":"ToDouble(Double)","needQuote":true,"nodes":[{"content":"ToDouble(Double)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to return.","pos":[156436,156494],"source":"\\n<p>The double-precision floating-point number to return."},{"content":"&lt;/p&gt;\\n","pos":[156495,156501],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[156561,156611],"source":"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n"},{"pos":[156987,157002],"content":"ToDouble(Int16)","needQuote":true,"nodes":[{"content":"ToDouble(Int16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[157710,157752],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[157753,157759],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[157819,157900],"source":"\\n<p>A double-precision floating-point number equivalent to <em>value</em>.</p>\\n"},{"pos":[158209,158224],"content":"ToDouble(Int32)","needQuote":true,"nodes":[{"content":"ToDouble(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[158932,158974],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[158975,158981],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[159041,159130],"source":"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[159439,159454],"content":"ToDouble(Int64)","needQuote":true,"nodes":[{"content":"ToDouble(Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[160160,160202],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[160203,160209],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[160269,160358],"source":"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[160670,160686],"content":"ToDouble(Object)","needQuote":true,"nodes":[{"content":"ToDouble(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[161589,161730],"source":"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[163009,163042],"content":"ToDouble(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDouble(Object, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[164076,164145],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[164146,164152],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[164212,164353],"source":"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[165523,165538],"content":"ToDouble(SByte)","needQuote":true,"nodes":[{"content":"ToDouble(SByte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[166322,166363],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[166364,166370],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[166430,166503],"source":"\\n<p>The 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[166990,167006],"content":"ToDouble(Single)","needQuote":true,"nodes":[{"content":"ToDouble(Single)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number.","pos":[167734,167782],"source":"\\n<p>The single-precision floating-point number."},{"content":"&lt;/p&gt;\\n","pos":[167783,167789],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[167849,167938],"source":"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[168317,168333],"content":"ToDouble(String)","needQuote":true,"nodes":[{"content":"ToDouble(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[169044,169094],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[169095,169101],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[169161,169320],"source":"\\n<p>A double-precision floating-point number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not a number in a valid format.&lt;/p&gt;\\n","pos":[169427,169489],"source":"\\n<p>\\n<em>value</em> is not a number in a valid format.</p>\\n"},{"pos":[170217,170250],"content":"ToDouble(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDouble(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[171101,171151],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[171152,171158],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[171234,171303],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[171304,171310],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[171370,171529],"source":"\\n<p>A double-precision floating-point number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not a number in a valid format.&lt;/p&gt;\\n","pos":[171636,171698],"source":"\\n<p>\\n<em>value</em> is not a number in a valid format.</p>\\n"},{"pos":[172374,172390],"content":"ToDouble(UInt16)","needQuote":true,"nodes":[{"content":"ToDouble(UInt16)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[173181,173225],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[173226,173232],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[173292,173381],"source":"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[173869,173885],"content":"ToDouble(UInt32)","needQuote":true,"nodes":[{"content":"ToDouble(UInt32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[174675,174719],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[174720,174726],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[174786,174875],"source":"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[175363,175379],"content":"ToDouble(UInt64)","needQuote":true,"nodes":[{"content":"ToDouble(UInt64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[176167,176211],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[176212,176218],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[176278,176367],"source":"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[176855,176871],"content":"ToInt16(Boolean)","needQuote":true,"nodes":[{"content":"ToInt16(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[177540,177574],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[177575,177581],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number 1 if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;; otherwise, 0.&lt;/p&gt;\\n","pos":[177640,177721],"source":"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n"},{"pos":[178025,178038],"content":"ToInt16(Byte)","needQuote":true,"nodes":[{"content":"ToInt16(Byte)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[178720,178763],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[178764,178770],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[178829,178901],"source":"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[179202,179215],"content":"ToInt16(Char)","needQuote":true,"nodes":[{"content":"ToInt16(Char)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[179892,179930],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[179931,179937],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.","pos":[179996,180062],"source":"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[180063,180069],"source":" </p>\\n"},{"pos":[180617,180633],"content":"ToInt16(Decimal)","needQuote":true,"nodes":[{"content":"ToInt16(Decimal)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[181318,181353],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[181354,181360],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 16-bit signed integer.","pos":[181419,181487],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 16-bit signed integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[181488,181637],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[182386,182401],"content":"ToInt16(Double)","needQuote":true,"nodes":[{"content":"ToInt16(Double)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[183106,183165],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[183166,183172],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 16-bit signed integer.","pos":[183231,183299],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 16-bit signed integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[183300,183449],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[184249,184263],"content":"ToInt16(Int16)","needQuote":true,"nodes":[{"content":"ToInt16(Int16)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to return.","pos":[184929,184970],"source":"\\n<p>The 16-bit signed integer to return."},{"content":"&lt;/p&gt;\\n","pos":[184971,184977],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[185036,185086],"source":"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n"},{"pos":[185391,185405],"content":"ToInt16(Int32)","needQuote":true,"nodes":[{"content":"ToInt16(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[186089,186131],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[186132,186138],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The 16-bit signed integer equivalent of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[186197,186263],"source":"\\n<p>The 16-bit signed integer equivalent of <em>value</em>.</p>\\n"},{"pos":[186901,186915],"content":"ToInt16(Int64)","needQuote":true,"nodes":[{"content":"ToInt16(Int64)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[187597,187639],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[187640,187646],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[187705,187777],"source":"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[188418,188433],"content":"ToInt16(Object)","needQuote":true,"nodes":[{"content":"ToInt16(Object)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A 16-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[189311,189435],"source":"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[190707,190739],"content":"ToInt16(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt16(Object, IFormatProvider)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[191748,191817],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[191818,191824],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[191883,192007],"source":"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[193156,193170],"content":"ToInt16(SByte)","needQuote":true,"nodes":[{"content":"ToInt16(SByte)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[193930,193971],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[193972,193978],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[194037,194108],"source":"\\n<p>A 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[194591,194606],"content":"ToInt16(Single)","needQuote":true,"nodes":[{"content":"ToInt16(Single)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to convert.","pos":[195310,195369],"source":"\\n<p>The single-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[195370,195376],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 16-bit signed integer.","pos":[195435,195503],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 16-bit signed integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[195504,195653],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[196456,196471],"content":"ToInt16(String)","needQuote":true,"nodes":[{"content":"ToInt16(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[197158,197208],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[197209,197215],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit signed integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[197274,197416],"source":"\\n<p>A 16-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[197523,197629],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[197630,197636],"source":" </p>\\n"},{"pos":[198464,198496],"content":"ToInt16(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt16(String, IFormatProvider)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[199323,199373],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[199374,199380],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[199456,199525],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[199526,199532],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit signed integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[199591,199733],"source":"\\n<p>A 16-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[199840,199946],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[199947,199953],"source":" </p>\\n"},{"pos":[200768,200790],"content":"ToInt16(String, Int32)","needQuote":true,"nodes":[{"content":"ToInt16(String, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[201537,201587],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[201588,201594],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the number in &lt;em&gt;value&lt;/em&gt;, which must be 2, 8, 10, or 16.","pos":[201660,201737],"source":"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[201738,201744],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit signed integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[201803,201945],"source":"\\n<p>A 16-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fromBase&lt;/em&gt; is not 2, 8, 10, or 16.","pos":[202056,202104],"source":"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, which represents a non-base 10 signed number, is prefixed with a negative sign.","pos":[202105,202224],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign."},{"content":"&lt;/p&gt;\\n","pos":[202225,202231],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; contains a character that is not a valid digit in the base specified by &lt;em&gt;fromBase&lt;/em&gt;.","pos":[202553,202665],"source":"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>."},{"content":"The exception message indicates that there are no digits to convert if the first character in &lt;em&gt;value&lt;/em&gt; is invalid; otherwise, the message indicates that &lt;em&gt;value&lt;/em&gt; contains invalid trailing characters.&lt;/p&gt;\\n","pos":[202666,202883],"source":" The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n"},{"pos":[203661,203676],"content":"ToInt16(UInt16)","needQuote":true,"nodes":[{"content":"ToInt16(UInt16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[204443,204487],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[204488,204494],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[204553,204625],"source":"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[205347,205362],"content":"ToInt16(UInt32)","needQuote":true,"nodes":[{"content":"ToInt16(UInt32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[206128,206172],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[206173,206179],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[206238,206310],"source":"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[207032,207047],"content":"ToInt16(UInt64)","needQuote":true,"nodes":[{"content":"ToInt16(UInt64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[207811,207855],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[207856,207862],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[207921,207993],"source":"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[208718,208734],"content":"ToInt32(Boolean)","needQuote":true,"nodes":[{"content":"ToInt32(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[209404,209438],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[209439,209445],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number 1 if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;; otherwise, 0.&lt;/p&gt;\\n","pos":[209504,209585],"source":"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n"},{"pos":[209889,209902],"content":"ToInt32(Byte)","needQuote":true,"nodes":[{"content":"ToInt32(Byte)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[210585,210628],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[210629,210635],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[210694,210766],"source":"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[211067,211080],"content":"ToInt32(Char)","needQuote":true,"nodes":[{"content":"ToInt32(Char)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[211758,211796],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[211797,211803],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[211862,211934],"source":"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[212244,212260],"content":"ToInt32(Decimal)","needQuote":true,"nodes":[{"content":"ToInt32(Decimal)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[213024,213059],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[213060,213066],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 32-bit signed integer.","pos":[213125,213193],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 32-bit signed integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[213194,213343],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[214092,214107],"content":"ToInt32(Double)","needQuote":true,"nodes":[{"content":"ToInt32(Double)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[214813,214872],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[214873,214879],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 32-bit signed integer.","pos":[214938,215006],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 32-bit signed integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[215007,215156],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[215956,215970],"content":"ToInt32(Int16)","needQuote":true,"nodes":[{"content":"ToInt32(Int16)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[216655,216697],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[216698,216704],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[216763,216835],"source":"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[217140,217154],"content":"ToInt32(Int32)","needQuote":true,"nodes":[{"content":"ToInt32(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to return.","pos":[217821,217862],"source":"\\n<p>The 32-bit signed integer to return."},{"content":"&lt;/p&gt;\\n","pos":[217863,217869],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[217928,217978],"source":"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n"},{"pos":[218283,218297],"content":"ToInt32(Int64)","needQuote":true,"nodes":[{"content":"ToInt32(Int64)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[218980,219022],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[219023,219029],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[219088,219160],"source":"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[219801,219816],"content":"ToInt32(Object)","needQuote":true,"nodes":[{"content":"ToInt32(Object)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[220695,220811],"source":"\\n<p>A 32-bit signed integer equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.&lt;/p&gt;\\n","pos":[220918,220978],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n"},{"pos":[221999,222031],"content":"ToInt32(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt32(Object, IFormatProvider)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[223041,223110],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[223111,223117],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[223176,223300],"source":"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.&lt;/p&gt;\\n","pos":[223407,223467],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n"},{"pos":[224364,224378],"content":"ToInt32(SByte)","needQuote":true,"nodes":[{"content":"ToInt32(SByte)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[225139,225180],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[225181,225187],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[225246,225317],"source":"\\n<p>A 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[225800,225815],"content":"ToInt32(Single)","needQuote":true,"nodes":[{"content":"ToInt32(Single)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to convert.","pos":[226520,226579],"source":"\\n<p>The single-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[226580,226586],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 32-bit signed integer.","pos":[226645,226713],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 32-bit signed integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[226714,226863],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[227666,227681],"content":"ToInt32(String)","needQuote":true,"nodes":[{"content":"ToInt32(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[228369,228419],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[228420,228426],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[228485,228627],"source":"\\n<p>A 32-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[228734,228840],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[228841,228847],"source":" </p>\\n"},{"pos":[229569,229601],"content":"ToInt32(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt32(String, IFormatProvider)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[230429,230479],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[230480,230486],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[230562,230631],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[230632,230638],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[230697,230839],"source":"\\n<p>A 32-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[230946,231052],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[231053,231059],"source":" </p>\\n"},{"pos":[231768,231790],"content":"ToInt32(String, Int32)","needQuote":true,"nodes":[{"content":"ToInt32(String, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[232537,232587],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[232588,232594],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the number in &lt;em&gt;value&lt;/em&gt;, which must be 2, 8, 10, or 16.","pos":[232660,232737],"source":"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[232738,232744],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[232803,232945],"source":"\\n<p>A 32-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fromBase&lt;/em&gt; is not 2, 8, 10, or 16.","pos":[233056,233104],"source":"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, which represents a non-base 10 signed number, is prefixed with a negative sign.","pos":[233105,233224],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign."},{"content":"&lt;/p&gt;\\n","pos":[233225,233231],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; contains a character that is not a valid digit in the base specified by &lt;em&gt;fromBase&lt;/em&gt;.","pos":[233553,233665],"source":"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>."},{"content":"The exception message indicates that there are no digits to convert if the first character in &lt;em&gt;value&lt;/em&gt; is invalid; otherwise, the message indicates that &lt;em&gt;value&lt;/em&gt; contains invalid trailing characters.&lt;/p&gt;\\n","pos":[233666,233883],"source":" The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n"},{"pos":[234661,234676],"content":"ToInt32(UInt16)","needQuote":true,"nodes":[{"content":"ToInt32(UInt16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[235444,235488],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[235489,235495],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[235554,235626],"source":"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[236110,236125],"content":"ToInt32(UInt32)","needQuote":true,"nodes":[{"content":"ToInt32(UInt32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[236892,236936],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[236937,236943],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[237002,237074],"source":"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[237796,237811],"content":"ToInt32(UInt64)","needQuote":true,"nodes":[{"content":"ToInt32(UInt64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[238576,238620],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[238621,238627],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[238686,238758],"source":"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[239483,239499],"content":"ToInt64(Boolean)","needQuote":true,"nodes":[{"content":"ToInt64(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[240167,240201],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[240202,240208],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number 1 if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;; otherwise, 0.&lt;/p&gt;\\n","pos":[240267,240348],"source":"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n"},{"pos":[240652,240665],"content":"ToInt64(Byte)","needQuote":true,"nodes":[{"content":"ToInt64(Byte)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[241346,241389],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[241390,241396],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[241455,241527],"source":"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[241828,241841],"content":"ToInt64(Char)","needQuote":true,"nodes":[{"content":"ToInt64(Char)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[242517,242555],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[242556,242562],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[242621,242693],"source":"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[243003,243019],"content":"ToInt64(Decimal)","needQuote":true,"nodes":[{"content":"ToInt64(Decimal)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[243703,243738],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[243739,243745],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 64-bit signed integer.","pos":[243804,243872],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 64-bit signed integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[243873,244022],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[244771,244786],"content":"ToInt64(Double)","needQuote":true,"nodes":[{"content":"ToInt64(Double)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[245490,245549],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[245550,245556],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 64-bit signed integer.","pos":[245615,245683],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 64-bit signed integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[245684,245833],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[246633,246647],"content":"ToInt64(Int16)","needQuote":true,"nodes":[{"content":"ToInt64(Int16)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[247330,247372],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[247373,247379],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[247438,247510],"source":"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[247815,247829],"content":"ToInt64(Int32)","needQuote":true,"nodes":[{"content":"ToInt64(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[248512,248554],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[248555,248561],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[248620,248692],"source":"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[248997,249011],"content":"ToInt64(Int64)","needQuote":true,"nodes":[{"content":"ToInt64(Int64)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A 64-bit signed integer.","pos":[249674,249703],"source":"\\n<p>A 64-bit signed integer."},{"content":"&lt;/p&gt;\\n","pos":[249704,249710],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[249769,249819],"source":"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n"},{"pos":[250127,250142],"content":"ToInt64(Object)","needQuote":true,"nodes":[{"content":"ToInt64(Object)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[251019,251143],"source":"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.&lt;/p&gt;\\n","pos":[251250,251310],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n"},{"pos":[252330,252362],"content":"ToInt64(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt64(Object, IFormatProvider)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[253370,253439],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[253440,253446],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[253505,253629],"source":"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.&lt;/p&gt;\\n","pos":[253736,253796],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n"},{"pos":[254761,254775],"content":"ToInt64(SByte)","needQuote":true,"nodes":[{"content":"ToInt64(SByte)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[255534,255575],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[255576,255582],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[255641,255713],"source":"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[256196,256211],"content":"ToInt64(Single)","needQuote":true,"nodes":[{"content":"ToInt64(Single)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to convert.","pos":[256914,256973],"source":"\\n<p>The single-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[256974,256980],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 64-bit signed integer.","pos":[257039,257107],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 64-bit signed integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[257108,257257],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[258060,258075],"content":"ToInt64(String)","needQuote":true,"nodes":[{"content":"ToInt64(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A string that contains a number to convert.","pos":[258761,258809],"source":"\\n<p>A string that contains a number to convert."},{"content":"&lt;/p&gt;\\n","pos":[258810,258816],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[258875,259017],"source":"\\n<p>A 64-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[259124,259230],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[259231,259237],"source":" </p>\\n"},{"pos":[259959,259991],"content":"ToInt64(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt64(String, IFormatProvider)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[260817,260867],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[260868,260874],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[260950,261019],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[261020,261026],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[261085,261227],"source":"\\n<p>A 64-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[261334,261440],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[261441,261447],"source":" </p>\\n"},{"pos":[262156,262178],"content":"ToInt64(String, Int32)","needQuote":true,"nodes":[{"content":"ToInt64(String, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[262923,262973],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[262974,262980],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the number in &lt;em&gt;value&lt;/em&gt;, which must be 2, 8, 10, or 16.","pos":[263046,263123],"source":"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[263124,263130],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[263189,263331],"source":"\\n<p>A 64-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fromBase&lt;/em&gt; is not 2, 8, 10, or 16.","pos":[263442,263490],"source":"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, which represents a non-base 10 signed number, is prefixed with a negative sign.","pos":[263491,263610],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign."},{"content":"&lt;/p&gt;\\n","pos":[263611,263617],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; contains a character that is not a valid digit in the base specified by &lt;em&gt;fromBase&lt;/em&gt;.","pos":[263939,264051],"source":"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>."},{"content":"The exception message indicates that there are no digits to convert if the first character in &lt;em&gt;value&lt;/em&gt; is invalid; otherwise, the message indicates that &lt;em&gt;value&lt;/em&gt; contains invalid trailing characters.&lt;/p&gt;\\n","pos":[264052,264269],"source":" The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n"},{"pos":[265047,265062],"content":"ToInt64(UInt16)","needQuote":true,"nodes":[{"content":"ToInt64(UInt16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[265828,265872],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[265873,265879],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[265938,266010],"source":"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[266494,266509],"content":"ToInt64(UInt32)","needQuote":true,"nodes":[{"content":"ToInt64(UInt32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[267274,267318],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[267319,267325],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[267384,267456],"source":"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[267940,267955],"content":"ToInt64(UInt64)","needQuote":true,"nodes":[{"content":"ToInt64(UInt64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[268718,268762],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[268763,268769],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[268828,268900],"source":"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[269625,269641],"content":"ToSByte(Boolean)","needQuote":true,"nodes":[{"content":"ToSByte(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[270385,270419],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[270420,270426],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number 1 if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;; otherwise, 0.&lt;/p&gt;\\n","pos":[270485,270566],"source":"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n"},{"pos":[271045,271058],"content":"ToSByte(Byte)","needQuote":true,"nodes":[{"content":"ToSByte(Byte)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[271815,271858],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[271859,271865],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[271924,271996],"source":"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[272710,272723],"content":"ToSByte(Char)","needQuote":true,"nodes":[{"content":"ToSByte(Char)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[273475,273513],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[273514,273520],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[273579,273651],"source":"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[274374,274390],"content":"ToSByte(Decimal)","needQuote":true,"nodes":[{"content":"ToSByte(Decimal)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[275150,275185],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[275186,275192],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 8-bit signed integer.","pos":[275251,275318],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 8-bit signed integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[275319,275468],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[276392,276407],"content":"ToSByte(Double)","needQuote":true,"nodes":[{"content":"ToSByte(Double)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[277187,277246],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[277247,277253],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 8-bit signed integer.","pos":[277312,277379],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 8-bit signed integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[277380,277529],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[278504,278518],"content":"ToSByte(Int16)","needQuote":true,"nodes":[{"content":"ToSByte(Int16)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[279278,279320],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[279321,279327],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[279386,279458],"source":"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[280271,280285],"content":"ToSByte(Int32)","needQuote":true,"nodes":[{"content":"ToSByte(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[281044,281086],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[281087,281093],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[281152,281224],"source":"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[282037,282051],"content":"ToSByte(Int64)","needQuote":true,"nodes":[{"content":"ToSByte(Int64)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[282808,282850],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[282851,282857],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[282916,282988],"source":"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[283804,283819],"content":"ToSByte(Object)","needQuote":true,"nodes":[{"content":"ToSByte(Object)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[284773,284897],"source":"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.","pos":[285004,285058],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format."},{"content":"&lt;/p&gt;\\n","pos":[285059,285065],"source":" </p>\\n"},{"pos":[286260,286292],"content":"ToSByte(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSByte(Object, IFormatProvider)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[287377,287446],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[287447,287453],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[287512,287636],"source":"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.","pos":[287743,287797],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format."},{"content":"&lt;/p&gt;\\n","pos":[287798,287804],"source":" </p>\\n"},{"pos":[288944,288958],"content":"ToSByte(SByte)","needQuote":true,"nodes":[{"content":"ToSByte(SByte)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to return.","pos":[289699,289739],"source":"\\n<p>The 8-bit signed integer to return."},{"content":"&lt;/p&gt;\\n","pos":[289740,289746],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[289805,289855],"source":"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n"},{"pos":[290338,290353],"content":"ToSByte(Single)","needQuote":true,"nodes":[{"content":"ToSByte(Single)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to convert.","pos":[291132,291191],"source":"\\n<p>The single-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[291192,291198],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 8-bit signed integer.","pos":[291257,291324],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 8-bit signed integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[291325,291474],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[292452,292467],"content":"ToSByte(String)","needQuote":true,"nodes":[{"content":"ToSByte(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[293229,293279],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[293280,293286],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[293345,293478],"source":"\\n<p>An 8-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if value is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[293585,293691],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[293692,293698],"source":" </p>\\n"},{"pos":[294701,294733],"content":"ToSByte(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSByte(String, IFormatProvider)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[295635,295685],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[295686,295692],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[295768,295837],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[295838,295844],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[295903,295975],"source":"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[296094,296141],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[296142,296148],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[296241,296347],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[296348,296354],"source":" </p>\\n"},{"pos":[297344,297366],"content":"ToSByte(String, Int32)","needQuote":true,"nodes":[{"content":"ToSByte(String, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[298188,298238],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[298239,298245],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the number in &lt;em&gt;value&lt;/em&gt;, which must be 2, 8, 10, or 16.","pos":[298311,298388],"source":"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[298389,298395],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[298454,298596],"source":"\\n<p>An 8-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fromBase&lt;/em&gt; is not 2, 8, 10, or 16.","pos":[298707,298755],"source":"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, which represents a non-base 10 signed number, is prefixed with a negative sign.","pos":[298756,298875],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign."},{"content":"&lt;/p&gt;\\n","pos":[298876,298882],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; contains a character that is not a valid digit in the base specified by &lt;em&gt;fromBase&lt;/em&gt;.","pos":[299204,299316],"source":"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>."},{"content":"The exception message indicates that there are no digits to convert if the first character in &lt;em&gt;value&lt;/em&gt; is invalid; otherwise, the message indicates that &lt;em&gt;value&lt;/em&gt; contains invalid trailing characters.&lt;/p&gt;\\n","pos":[299317,299534],"source":" The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n"},{"pos":[300487,300502],"content":"ToSByte(UInt16)","needQuote":true,"nodes":[{"content":"ToSByte(UInt16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[301268,301312],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[301313,301319],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[301378,301450],"source":"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[302172,302187],"content":"ToSByte(UInt32)","needQuote":true,"nodes":[{"content":"ToSByte(UInt32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[302952,302996],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[302997,303003],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[303062,303134],"source":"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[303951,303966],"content":"ToSByte(UInt64)","needQuote":true,"nodes":[{"content":"ToSByte(UInt64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[304729,304773],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[304774,304780],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[304839,304911],"source":"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[305734,305751],"content":"ToSingle(Boolean)","needQuote":true,"nodes":[{"content":"ToSingle(Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[306443,306477],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[306478,306484],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number 1 if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;; otherwise, 0.&lt;/p&gt;\\n","pos":[306544,306625],"source":"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n"},{"pos":[306933,306947],"content":"ToSingle(Byte)","needQuote":true,"nodes":[{"content":"ToSingle(Byte)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[307652,307695],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[307696,307702],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[307762,307851],"source":"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[308165,308182],"content":"ToSingle(Decimal)","needQuote":true,"nodes":[{"content":"ToSingle(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[308890,308925],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[308926,308932],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is rounded using rounding to nearest.","pos":[308992,309138],"source":"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n<p>\\n<em>value</em> is rounded using rounding to nearest."},{"content":"For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.&lt;/p&gt;\\n","pos":[309139,309250],"source":" For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</p>\\n"},{"pos":[309670,309686],"content":"ToSingle(Double)","needQuote":true,"nodes":[{"content":"ToSingle(Double)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[310414,310473],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[310474,310480],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is rounded using rounding to nearest.","pos":[310540,310686],"source":"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n<p>\\n<em>value</em> is rounded using rounding to nearest."},{"content":"For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.&lt;/p&gt;\\n","pos":[310687,310798],"source":" For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</p>\\n"},{"pos":[311269,311284],"content":"ToSingle(Int16)","needQuote":true,"nodes":[{"content":"ToSingle(Int16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[311991,312033],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[312034,312040],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[312100,312189],"source":"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[312498,312513],"content":"ToSingle(Int32)","needQuote":true,"nodes":[{"content":"ToSingle(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[313220,313262],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[313263,313269],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[313329,313418],"source":"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[313727,313742],"content":"ToSingle(Int64)","needQuote":true,"nodes":[{"content":"ToSingle(Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[314447,314489],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[314490,314496],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[314556,314645],"source":"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[314957,314973],"content":"ToSingle(Object)","needQuote":true,"nodes":[{"content":"ToSingle(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[315875,316016],"source":"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.&lt;/p&gt;\\n","pos":[316123,316183],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n"},{"pos":[317209,317242],"content":"ToSingle(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSingle(Object, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[318275,318344],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[318345,318351],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[318411,318552],"source":"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.&lt;/p&gt;\\n","pos":[318659,318719],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n"},{"pos":[319622,319637],"content":"ToSingle(SByte)","needQuote":true,"nodes":[{"content":"ToSingle(SByte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[320420,320461],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[320462,320468],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An 8-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[320528,320600],"source":"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[321087,321103],"content":"ToSingle(Single)","needQuote":true,"nodes":[{"content":"ToSingle(Single)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to return.","pos":[321795,321853],"source":"\\n<p>The single-precision floating-point number to return."},{"content":"&lt;/p&gt;\\n","pos":[321854,321860],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[321920,321970],"source":"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n"},{"pos":[322349,322365],"content":"ToSingle(String)","needQuote":true,"nodes":[{"content":"ToSingle(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[323075,323125],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[323126,323132],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[323192,323351],"source":"\\n<p>A single-precision floating-point number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not a number in a valid format.&lt;/p&gt;\\n","pos":[323458,323520],"source":"\\n<p>\\n<em>value</em> is not a number in a valid format.</p>\\n"},{"pos":[324248,324281],"content":"ToSingle(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSingle(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[325131,325181],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[325182,325188],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[325264,325333],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[325334,325340],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[325400,325559],"source":"\\n<p>A single-precision floating-point number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not a number in a valid format.&lt;/p&gt;\\n","pos":[325666,325728],"source":"\\n<p>\\n<em>value</em> is not a number in a valid format.</p>\\n"},{"pos":[326404,326420],"content":"ToSingle(UInt16)","needQuote":true,"nodes":[{"content":"ToSingle(UInt16)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[327210,327254],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[327255,327261],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[327321,327410],"source":"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[327898,327914],"content":"ToSingle(UInt32)","needQuote":true,"nodes":[{"content":"ToSingle(UInt32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[328703,328747],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[328748,328754],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[328814,328903],"source":"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[329391,329407],"content":"ToSingle(UInt64)","needQuote":true,"nodes":[{"content":"ToSingle(UInt64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[330194,330238],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[330239,330245],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating-point number that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[330305,330394],"source":"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n"},{"pos":[330885,330902],"content":"ToString(Boolean)","needQuote":true,"nodes":[{"content":"ToString(Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[331578,331612],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[331613,331619],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[331679,331734],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[332120,332154],"content":"ToString(Boolean, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(Boolean, IFormatProvider)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[332909,332943],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[332944,332950],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An instance of an object.","pos":[333026,333056],"source":"\\n<p>An instance of an object."},{"content":"This parameter is ignored.&lt;/p&gt;\\n","pos":[333057,333089],"source":" This parameter is ignored.</p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[333149,333204],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[333529,333543],"content":"ToString(Byte)","needQuote":true,"nodes":[{"content":"ToString(Byte)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[334232,334275],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[334276,334282],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[334342,334397],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[334771,334802],"content":"ToString(Byte, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(Byte, IFormatProvider)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[335631,335674],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[335675,335681],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[335757,335826],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[335827,335833],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[335893,335948],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[336309,336330],"content":"ToString(Byte, Int32)","needQuote":true,"nodes":[{"content":"ToString(Byte, Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[337151,337194],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[337195,337201],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the return value, which must be 2, 8, 10, or 16.","pos":[337265,337330],"source":"\\n<p>The base of the return value, which must be 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[337331,337337],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt; in base &lt;em&gt;toBase&lt;/em&gt;.&lt;/p&gt;\\n","pos":[337397,337476],"source":"\\n<p>The string representation of <em>value</em> in base <em>toBase</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;toBase&lt;/em&gt; is not 2, 8, 10, or 16.","pos":[337587,337633],"source":"\\n<p>\\n<em>toBase</em> is not 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[337634,337640],"source":" </p>\\n"},{"pos":[337952,337966],"content":"ToString(Char)","needQuote":true,"nodes":[{"content":"ToString(Char)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[338650,338688],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[338689,338695],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[338755,338810],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[339184,339215],"content":"ToString(Char, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(Char, IFormatProvider)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[340039,340077],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[340078,340084],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[340160,340229],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"This parameter is ignored.","pos":[340230,340256]},{"content":"&lt;/p&gt;\\n","pos":[340257,340263],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[340323,340378],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[340712,340730],"content":"ToString(DateTime)","needQuote":true,"nodes":[{"content":"ToString(DateTime)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The date and time value to convert.","pos":[341484,341524],"source":"\\n<p>The date and time value to convert."},{"content":"&lt;/p&gt;\\n","pos":[341525,341531],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[341591,341646],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[342036,342071],"content":"ToString(DateTime, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(DateTime, IFormatProvider)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The date and time value to convert.","pos":[342965,343005],"source":"\\n<p>The date and time value to convert."},{"content":"&lt;/p&gt;\\n","pos":[343006,343012],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[343088,343157],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[343158,343164],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[343224,343279],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[343614,343631],"content":"ToString(Decimal)","needQuote":true,"nodes":[{"content":"ToString(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[344324,344359],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[344360,344366],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[344426,344481],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[344867,344901],"content":"ToString(Decimal, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(Decimal, IFormatProvider)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[345734,345769],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[345770,345776],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[345852,345921],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[345922,345928],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[345988,346043],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[346374,346390],"content":"ToString(Double)","needQuote":true,"nodes":[{"content":"ToString(Double)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[347103,347162],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[347163,347169],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[347229,347284],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[347666,347699],"content":"ToString(Double, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(Double, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[348491,348550],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[348551,348557],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[348633,348702],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[348703,348709],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[348769,348824],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[349151,349166],"content":"ToString(Int16)","needQuote":true,"nodes":[{"content":"ToString(Int16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[349858,349900],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[349901,349907],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[349967,350022],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[350400,350432],"content":"ToString(Int16, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(Int16, IFormatProvider)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[351264,351306],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[351307,351313],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[351389,351458],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[351459,351465],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[351525,351580],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[351945,351967],"content":"ToString(Int16, Int32)","needQuote":true,"nodes":[{"content":"ToString(Int16, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[352790,352832],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[352833,352839],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the return value, which must be 2, 8, 10, or 16.","pos":[352903,352968],"source":"\\n<p>The base of the return value, which must be 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[352969,352975],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt; in base &lt;em&gt;toBase&lt;/em&gt;.&lt;/p&gt;\\n","pos":[353035,353114],"source":"\\n<p>The string representation of <em>value</em> in base <em>toBase</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;toBase&lt;/em&gt; is not 2, 8, 10, or 16.","pos":[353225,353271],"source":"\\n<p>\\n<em>toBase</em> is not 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[353272,353278],"source":" </p>\\n"},{"pos":[353594,353609],"content":"ToString(Int32)","needQuote":true,"nodes":[{"content":"ToString(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[354301,354343],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[354344,354350],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[354410,354465],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[354843,354875],"content":"ToString(Int32, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(Int32, IFormatProvider)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[355707,355749],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[355750,355756],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[355832,355901],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[355902,355908],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[355968,356023],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[356388,356410],"content":"ToString(Int32, Int32)","needQuote":true,"nodes":[{"content":"ToString(Int32, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[357233,357275],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[357276,357282],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the return value, which must be 2, 8, 10, or 16.","pos":[357346,357411],"source":"\\n<p>The base of the return value, which must be 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[357412,357418],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt; in base &lt;em&gt;toBase&lt;/em&gt;.&lt;/p&gt;\\n","pos":[357478,357557],"source":"\\n<p>The string representation of <em>value</em> in base <em>toBase</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;toBase&lt;/em&gt; is not 2, 8, 10, or 16.","pos":[357668,357714],"source":"\\n<p>\\n<em>toBase</em> is not 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[357715,357721],"source":" </p>\\n"},{"pos":[358037,358052],"content":"ToString(Int64)","needQuote":true,"nodes":[{"content":"ToString(Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[358742,358784],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[358785,358791],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[358851,358906],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[359284,359316],"content":"ToString(Int64, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(Int64, IFormatProvider)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[360146,360188],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[360189,360195],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[360271,360340],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[360341,360347],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[360407,360462],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[360827,360849],"content":"ToString(Int64, Int32)","needQuote":true,"nodes":[{"content":"ToString(Int64, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[361670,361712],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[361713,361719],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the return value, which must be 2, 8, 10, or 16.","pos":[361783,361848],"source":"\\n<p>The base of the return value, which must be 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[361849,361855],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt; in base &lt;em&gt;toBase&lt;/em&gt;.&lt;/p&gt;\\n","pos":[361915,361994],"source":"\\n<p>The string representation of <em>value</em> in base <em>toBase</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;toBase&lt;/em&gt; is not 2, 8, 10, or 16.","pos":[362105,362151],"source":"\\n<p>\\n<em>toBase</em> is not 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[362152,362158],"source":" </p>\\n"},{"pos":[362477,362493],"content":"ToString(Object)","needQuote":true,"nodes":[{"content":"ToString(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An object that supplies the value to convert, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[363174,363250],"source":"\\n<p>An object that supplies the value to convert, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[363251,363257],"source":" </p>\\n"},{"pos":[363992,364025],"content":"ToString(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(Object, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;An object that supplies the value to convert, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[364845,364921],"source":"\\n<p>An object that supplies the value to convert, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[364922,364928],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[365004,365073],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[365074,365080],"source":" </p>\\n"},{"pos":[365761,365776],"content":"ToString(SByte)","needQuote":true,"nodes":[{"content":"ToString(SByte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[366543,366584],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[366585,366591],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[366651,366706],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[367259,367291],"content":"ToString(SByte, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(SByte, IFormatProvider)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[368198,368239],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[368240,368246],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[368322,368391],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[368392,368398],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[368458,368513],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[369017,369033],"content":"ToString(Single)","needQuote":true,"nodes":[{"content":"ToString(Single)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to convert.","pos":[369745,369804],"source":"\\n<p>The single-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[369805,369811],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[369871,369926],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[370308,370341],"content":"ToString(Single, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(Single, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to convert.","pos":[371193,371252],"source":"\\n<p>The single-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[371253,371259],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[371335,371404],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[371405,371411],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[371471,371526],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[371856,371872],"content":"ToString(UInt16)","needQuote":true,"nodes":[{"content":"ToString(UInt16)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[372646,372690],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[372691,372697],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[372757,372812],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[373369,373402],"content":"ToString(UInt16, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(UInt16, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[374316,374360],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[374361,374367],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[374443,374512],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[374513,374519],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[374579,374634],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[375139,375155],"content":"ToString(UInt32)","needQuote":true,"nodes":[{"content":"ToString(UInt32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[375929,375973],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[375974,375980],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[376040,376095],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[376652,376685],"content":"ToString(UInt32, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(UInt32, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[377599,377643],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[377644,377650],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[377726,377795],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[377796,377802],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[377862,377917],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[378422,378438],"content":"ToString(UInt64)","needQuote":true,"nodes":[{"content":"ToString(UInt64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[379210,379254],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[379255,379261],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[379321,379376],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[379933,379966],"content":"ToString(UInt64, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(UInt64, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[380878,380922],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[380923,380929],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[381005,381074],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[381075,381081],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[381141,381196],"source":"\\n<p>The string representation of <em>value</em>.</p>\\n"},{"pos":[381704,381721],"content":"ToUInt16(Boolean)","needQuote":true,"nodes":[{"content":"ToUInt16(Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[382474,382508],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[382509,382515],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number 1 if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;; otherwise, 0.&lt;/p&gt;\\n","pos":[382575,382656],"source":"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n"},{"pos":[383139,383153],"content":"ToUInt16(Byte)","needQuote":true,"nodes":[{"content":"ToUInt16(Byte)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[383919,383962],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[383963,383969],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[384029,384103],"source":"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[384583,384597],"content":"ToUInt16(Char)","needQuote":true,"nodes":[{"content":"ToUInt16(Char)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[385358,385396],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[385397,385403],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[385463,385531],"source":"\\n<p>The 16-bit unsigned integer equivalent to <em>value</em>.</p>\\n"},{"pos":[386020,386037],"content":"ToUInt16(Decimal)","needQuote":true,"nodes":[{"content":"ToUInt16(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[386807,386842],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[386843,386849],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 16-bit unsigned integer.","pos":[386909,386979],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 16-bit unsigned integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[386980,387129],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[387981,387997],"content":"ToUInt16(Double)","needQuote":true,"nodes":[{"content":"ToUInt16(Double)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[388787,388846],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[388847,388853],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 16-bit unsigned integer.","pos":[388913,388983],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 16-bit unsigned integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[388984,389133],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[390036,390051],"content":"ToUInt16(Int16)","needQuote":true,"nodes":[{"content":"ToUInt16(Int16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[390820,390862],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[390863,390869],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[390929,391003],"source":"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[391114,391154],"source":"\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[391155,391161],"source":" </p>\\n"},{"pos":[391645,391660],"content":"ToUInt16(Int32)","needQuote":true,"nodes":[{"content":"ToUInt16(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[392428,392470],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[392471,392477],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[392537,392611],"source":"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[393352,393367],"content":"ToUInt16(Int64)","needQuote":true,"nodes":[{"content":"ToUInt16(Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[394133,394175],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[394176,394182],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[394242,394316],"source":"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[395060,395076],"content":"ToUInt16(Object)","needQuote":true,"nodes":[{"content":"ToUInt16(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[396039,396165],"source":"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.&lt;/p&gt;\\n","pos":[396272,396332],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n"},{"pos":[397534,397567],"content":"ToUInt16(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt16(Object, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[398660,398729],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[398730,398736],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[398796,398922],"source":"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.&lt;/p&gt;\\n","pos":[399029,399089],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n"},{"pos":[400236,400251],"content":"ToUInt16(SByte)","needQuote":true,"nodes":[{"content":"ToUInt16(SByte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[401019,401060],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[401061,401067],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[401127,401201],"source":"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[401312,401352],"source":"\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[401353,401359],"source":" </p>\\n"},{"pos":[401846,401862],"content":"ToUInt16(Single)","needQuote":true,"nodes":[{"content":"ToUInt16(Single)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to convert.","pos":[402651,402710],"source":"\\n<p>The single-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[402711,402717],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 16-bit unsigned integer.","pos":[402777,402847],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 16-bit unsigned integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[402848,402997],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[403903,403919],"content":"ToUInt16(String)","needQuote":true,"nodes":[{"content":"ToUInt16(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[404691,404741],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[404742,404748],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[404808,404952],"source":"\\n<p>A 16-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[405059,405165],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[405166,405172],"source":" </p>\\n"},{"pos":[406075,406108],"content":"ToUInt16(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt16(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[407020,407070],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[407071,407077],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[407153,407222],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[407223,407229],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[407289,407433],"source":"\\n<p>A 16-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[407540,407646],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[407647,407653],"source":" </p>\\n"},{"pos":[408543,408566],"content":"ToUInt16(String, Int32)","needQuote":true,"nodes":[{"content":"ToUInt16(String, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[409397,409447],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[409448,409454],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the number in &lt;em&gt;value&lt;/em&gt;, which must be 2, 8, 10, or 16.","pos":[409520,409597],"source":"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[409598,409604],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[409664,409808],"source":"\\n<p>A 16-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fromBase&lt;/em&gt; is not 2, 8, 10, or 16.","pos":[409919,409967],"source":"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","pos":[409968,410089],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."},{"content":"&lt;/p&gt;\\n","pos":[410090,410096],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; contains a character that is not a valid digit in the base specified by &lt;em&gt;fromBase&lt;/em&gt;.","pos":[410418,410530],"source":"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>."},{"content":"The exception message indicates that there are no digits to convert if the first character in &lt;em&gt;value&lt;/em&gt; is invalid; otherwise, the message indicates that &lt;em&gt;value&lt;/em&gt; contains invalid trailing characters.&lt;/p&gt;\\n","pos":[410531,410748],"source":" The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n"},{"pos":[411709,411725],"content":"ToUInt16(UInt16)","needQuote":true,"nodes":[{"content":"ToUInt16(UInt16)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to return.","pos":[412479,412522],"source":"\\n<p>The 16-bit unsigned integer to return."},{"content":"&lt;/p&gt;\\n","pos":[412523,412529],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[412589,412639],"source":"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n"},{"pos":[413127,413143],"content":"ToUInt16(UInt32)","needQuote":true,"nodes":[{"content":"ToUInt16(UInt32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[413917,413961],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[413962,413968],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[414028,414102],"source":"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[414829,414845],"content":"ToUInt16(UInt64)","needQuote":true,"nodes":[{"content":"ToUInt16(UInt64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[415618,415662],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[415663,415669],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[415729,415803],"source":"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[416533,416550],"content":"ToUInt32(Boolean)","needQuote":true,"nodes":[{"content":"ToUInt32(Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[417304,417338],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[417339,417345],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number 1 if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;; otherwise, 0.&lt;/p&gt;\\n","pos":[417405,417486],"source":"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n"},{"pos":[417969,417983],"content":"ToUInt32(Byte)","needQuote":true,"nodes":[{"content":"ToUInt32(Byte)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[418750,418793],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[418794,418800],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[418860,418934],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[419414,419428],"content":"ToUInt32(Char)","needQuote":true,"nodes":[{"content":"ToUInt32(Char)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[420190,420228],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[420229,420235],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[420295,420369],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[420858,420875],"content":"ToUInt32(Decimal)","needQuote":true,"nodes":[{"content":"ToUInt32(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[421645,421680],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[421681,421687],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 32-bit unsigned integer.","pos":[421747,421817],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 32-bit unsigned integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[421818,421967],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[422819,422835],"content":"ToUInt32(Double)","needQuote":true,"nodes":[{"content":"ToUInt32(Double)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[423625,423684],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[423685,423691],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 32-bit unsigned integer.","pos":[423751,423821],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 32-bit unsigned integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[423822,423971],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[424874,424889],"content":"ToUInt32(Int16)","needQuote":true,"nodes":[{"content":"ToUInt32(Int16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[425659,425701],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[425702,425708],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[425768,425842],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[425953,425993],"source":"\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[425994,426000],"source":" </p>\\n"},{"pos":[426484,426499],"content":"ToUInt32(Int32)","needQuote":true,"nodes":[{"content":"ToUInt32(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[427268,427310],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[427311,427317],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[427377,427451],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[427562,427602],"source":"\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[427603,427609],"source":" </p>\\n"},{"pos":[428093,428108],"content":"ToUInt32(Int64)","needQuote":true,"nodes":[{"content":"ToUInt32(Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[428875,428917],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[428918,428924],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[428984,429058],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[429802,429818],"content":"ToUInt32(Object)","needQuote":true,"nodes":[{"content":"ToUInt32(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[430782,430912],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.&lt;/p&gt;\\n","pos":[431019,431079],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n"},{"pos":[432280,432313],"content":"ToUInt32(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt32(Object, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[433407,433476],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[433477,433483],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[433543,433669],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.&lt;/p&gt;\\n","pos":[433776,433836],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n"},{"pos":[434982,434997],"content":"ToUInt32(SByte)","needQuote":true,"nodes":[{"content":"ToUInt32(SByte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[435766,435807],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[435808,435814],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[435874,435948],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[436059,436099],"source":"\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[436100,436106],"source":" </p>\\n"},{"pos":[436593,436609],"content":"ToUInt32(Single)","needQuote":true,"nodes":[{"content":"ToUInt32(Single)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to convert.","pos":[437398,437457],"source":"\\n<p>The single-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[437458,437464],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 32-bit unsigned integer.","pos":[437524,437594],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 32-bit unsigned integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[437595,437744],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[438650,438666],"content":"ToUInt32(String)","needQuote":true,"nodes":[{"content":"ToUInt32(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[439438,439488],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[439489,439495],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[439555,439699],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[439806,439912],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[439913,439919],"source":" </p>\\n"},{"pos":[440822,440855],"content":"ToUInt32(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt32(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[441767,441817],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[441818,441824],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[441900,441969],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[441970,441976],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[442036,442180],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[442287,442393],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[442394,442400],"source":" </p>\\n"},{"pos":[443290,443313],"content":"ToUInt32(String, Int32)","needQuote":true,"nodes":[{"content":"ToUInt32(String, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[444144,444194],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[444195,444201],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the number in &lt;em&gt;value&lt;/em&gt;, which must be 2, 8, 10, or 16.","pos":[444267,444344],"source":"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[444345,444351],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[444411,444555],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fromBase&lt;/em&gt; is not 2, 8, 10, or 16.","pos":[444666,444714],"source":"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","pos":[444715,444836],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."},{"content":"&lt;/p&gt;\\n","pos":[444837,444843],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; contains a character that is not a valid digit in the base specified by &lt;em&gt;fromBase&lt;/em&gt;.","pos":[445165,445277],"source":"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>."},{"content":"The exception message indicates that there are no digits to convert if the first character in &lt;em&gt;value&lt;/em&gt; is invalid; otherwise, the message indicates that &lt;em&gt;value&lt;/em&gt; contains invalid trailing characters.&lt;/p&gt;\\n","pos":[445278,445495],"source":" The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n"},{"pos":[446456,446472],"content":"ToUInt32(UInt16)","needQuote":true,"nodes":[{"content":"ToUInt32(UInt16)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[447248,447292],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[447293,447299],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[447359,447433],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[447921,447937],"content":"ToUInt32(UInt32)","needQuote":true,"nodes":[{"content":"ToUInt32(UInt32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to return.","pos":[448692,448735],"source":"\\n<p>The 32-bit unsigned integer to return."},{"content":"&lt;/p&gt;\\n","pos":[448736,448742],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[448802,448852],"source":"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n"},{"pos":[449340,449356],"content":"ToUInt32(UInt64)","needQuote":true,"nodes":[{"content":"ToUInt32(UInt64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to convert.","pos":[450129,450173],"source":"\\n<p>The 64-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[450174,450180],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[450240,450314],"source":"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[451044,451061],"content":"ToUInt64(Boolean)","needQuote":true,"nodes":[{"content":"ToUInt64(Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The Boolean value to convert.","pos":[451813,451847],"source":"\\n<p>The Boolean value to convert."},{"content":"&lt;/p&gt;\\n","pos":[451848,451854],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number 1 if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;; otherwise, 0.&lt;/p&gt;\\n","pos":[451914,451995],"source":"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n"},{"pos":[452478,452492],"content":"ToUInt64(Byte)","needQuote":true,"nodes":[{"content":"ToUInt64(Byte)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer to convert.","pos":[453257,453300],"source":"\\n<p>The 8-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[453301,453307],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[453367,453439],"source":"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[453919,453933],"content":"ToUInt64(Char)","needQuote":true,"nodes":[{"content":"ToUInt64(Char)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The Unicode character to convert.","pos":[454693,454731],"source":"\\n<p>The Unicode character to convert."},{"content":"&lt;/p&gt;\\n","pos":[454732,454738],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[454798,454872],"source":"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[455361,455378],"content":"ToUInt64(Decimal)","needQuote":true,"nodes":[{"content":"ToUInt64(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The decimal number to convert.","pos":[456146,456181],"source":"\\n<p>The decimal number to convert."},{"content":"&lt;/p&gt;\\n","pos":[456182,456188],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 64-bit unsigned integer.","pos":[456248,456318],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 64-bit unsigned integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[456319,456468],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[457320,457336],"content":"ToUInt64(Double)","needQuote":true,"nodes":[{"content":"ToUInt64(Double)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The double-precision floating-point number to convert.","pos":[458124,458183],"source":"\\n<p>The double-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[458184,458190],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 64-bit unsigned integer.","pos":[458250,458320],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 64-bit unsigned integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[458321,458470],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[459373,459388],"content":"ToUInt64(Int16)","needQuote":true,"nodes":[{"content":"ToUInt64(Int16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 16-bit signed integer to convert.","pos":[460156,460198],"source":"\\n<p>The 16-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[460199,460205],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[460265,460339],"source":"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[460450,460490],"source":"\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[460491,460497],"source":" </p>\\n"},{"pos":[460981,460996],"content":"ToUInt64(Int32)","needQuote":true,"nodes":[{"content":"ToUInt64(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer to convert.","pos":[461763,461805],"source":"\\n<p>The 32-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[461806,461812],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[461872,461946],"source":"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[462057,462097],"source":"\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[462098,462104],"source":" </p>\\n"},{"pos":[462588,462603],"content":"ToUInt64(Int64)","needQuote":true,"nodes":[{"content":"ToUInt64(Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 64-bit signed integer to convert.","pos":[463368,463410],"source":"\\n<p>The 64-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[463411,463417],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[463477,463551],"source":"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[463662,463702],"source":"\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[463703,463709],"source":" </p>\\n"},{"pos":[464196,464212],"content":"ToUInt64(Object)","needQuote":true,"nodes":[{"content":"ToUInt64(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[465174,465300],"source":"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.&lt;/p&gt;\\n","pos":[465407,465467],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n"},{"pos":[466668,466701],"content":"ToUInt64(Object, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt64(Object, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[467793,467862],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[467863,467869],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;, or zero if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[467929,468055],"source":"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not in an appropriate format.&lt;/p&gt;\\n","pos":[468162,468222],"source":"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n"},{"pos":[469368,469383],"content":"ToUInt64(SByte)","needQuote":true,"nodes":[{"content":"ToUInt64(SByte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The 8-bit signed integer to convert.","pos":[470150,470191],"source":"\\n<p>The 8-bit signed integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[470192,470198],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[470258,470332],"source":"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[470443,470483],"source":"\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[470484,470490],"source":" </p>\\n"},{"pos":[470977,470993],"content":"ToUInt64(Single)","needQuote":true,"nodes":[{"content":"ToUInt64(Single)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The single-precision floating-point number to convert.","pos":[471780,471839],"source":"\\n<p>The single-precision floating-point number to convert."},{"content":"&lt;/p&gt;\\n","pos":[471840,471846],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, rounded to the nearest 64-bit unsigned integer.","pos":[471906,471976],"source":"\\n<p>\\n<em>value</em>, rounded to the nearest 64-bit unsigned integer."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.&lt;/p&gt;\\n","pos":[471977,472126],"source":" If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n"},{"pos":[473032,473048],"content":"ToUInt64(String)","needQuote":true,"nodes":[{"content":"ToUInt64(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[473818,473868],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[473869,473875],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[473935,474077],"source":"\\n<p>A 64-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[474184,474290],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[474291,474297],"source":" </p>\\n"},{"pos":[475200,475233],"content":"ToUInt64(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt64(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[476143,476193],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[476194,476200],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[476276,476345],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[476346,476352],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[476412,476556],"source":"\\n<p>A 64-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; does not consist of an optional sign followed by a sequence of digits (0 through 9).","pos":[476663,476769],"source":"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9)."},{"content":"&lt;/p&gt;\\n","pos":[476770,476776],"source":" </p>\\n"},{"pos":[477666,477689],"content":"ToUInt64(String, Int32)","needQuote":true,"nodes":[{"content":"ToUInt64(String, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A string that contains the number to convert.","pos":[478518,478568],"source":"\\n<p>A string that contains the number to convert."},{"content":"&lt;/p&gt;\\n","pos":[478569,478575],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the number in &lt;em&gt;value&lt;/em&gt;, which must be 2, 8, 10, or 16.","pos":[478641,478718],"source":"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n","pos":[478719,478725],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer that is equivalent to the number in &lt;em&gt;value&lt;/em&gt;, or 0 (zero) if &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[478785,478929],"source":"\\n<p>A 64-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fromBase&lt;/em&gt; is not 2, 8, 10, or 16.","pos":[479040,479088],"source":"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt;, which represents a non-base 10 unsigned number, is prefixed with a negative sign.","pos":[479089,479210],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign."},{"content":"&lt;/p&gt;\\n","pos":[479211,479217],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; contains a character that is not a valid digit in the base specified by &lt;em&gt;fromBase&lt;/em&gt;.","pos":[479539,479651],"source":"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>."},{"content":"The exception message indicates that there are no digits to convert if the first character in &lt;em&gt;value&lt;/em&gt; is invalid; otherwise, the message indicates that &lt;em&gt;value&lt;/em&gt; contains invalid trailing characters.&lt;/p&gt;\\n","pos":[479652,479869],"source":" The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n"},{"pos":[480830,480846],"content":"ToUInt64(UInt16)","needQuote":true,"nodes":[{"content":"ToUInt64(UInt16)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 16-bit unsigned integer to convert.","pos":[481620,481664],"source":"\\n<p>The 16-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[481665,481671],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[481731,481805],"source":"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[482293,482309],"content":"ToUInt64(UInt32)","needQuote":true,"nodes":[{"content":"ToUInt64(UInt32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 32-bit unsigned integer to convert.","pos":[483082,483126],"source":"\\n<p>The 32-bit unsigned integer to convert."},{"content":"&lt;/p&gt;\\n","pos":[483127,483133],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer that is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[483193,483267],"source":"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n"},{"pos":[483755,483771],"content":"ToUInt64(UInt64)","needQuote":true,"nodes":[{"content":"ToUInt64(UInt64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The 64-bit unsigned integer to return.","pos":[484522,484565],"source":"\\n<p>The 64-bit unsigned integer to return."},{"content":"&lt;/p&gt;\\n","pos":[484566,484572],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[484632,484682],"source":"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n"},{"pos":[485034,485040],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[485171,485177],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[485337,485347],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[485442,485450],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[485519,485520],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[485547,485548],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[485618,485626],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[485695,485696],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[485723,485724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[485907,485921],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[486040,486046],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[486113,486114],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[486164,486170],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[486230,486231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[486314,486320],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[486387,486388],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[486438,486444],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[486504,486505],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[486719,486741],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[486889,486895],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[486962,486963],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[487013,487019],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[487080,487081]},{"pos":[487136,487142],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[487202,487203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[487300,487306],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[487373,487374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[487424,487430],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[487491,487492]},{"pos":[487547,487553],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[487613,487614],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[487859,487890],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[488056,488071],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[488147,488148],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[488198,488204],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[488265,488266]},{"pos":[488321,488327],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[488387,488388],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[488494,488509],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[488585,488586],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[488636,488642],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[488703,488704]},{"pos":[488759,488765],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[488825,488826],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[489056,489069],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[489170,489181],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[489253,489254],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[489281,489282],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[489355,489366],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[489438,489439],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[489466,489467],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[489642,489651],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[489744,489751],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[489819,489820],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[489847,489848],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[489917,489924],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[489992,489993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[490020,490021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[490196,490213],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[490322,490337],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[490413,490414],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[490441,490442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[490519,490534],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[490610,490611],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[490638,490639],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[490806,490810],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[490958,490973],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[491147,491155],"content":"TypeCode","needQuote":true,"nodes":[{"content":"TypeCode","pos":[0,8]}]},{"pos":[491269,491275],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[491395,491399],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[491458,491460]},{"pos":[491523,491527],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[491585,491587],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[491719,491724],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[491829,491835],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[491955,491959],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[492018,492020]},{"pos":[492083,492087],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[492145,492147],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[492280,492286],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[492432,492439],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[492585,492589],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[492729,492736],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[492884,492890],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[493034,493039],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[493180,493185],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[493326,493331],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[493473,493479],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[493624,493630],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[493775,493781],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[493926,493932],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[494075,494079],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[494220,494228],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[494376,494396],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[494592,494607],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[494773,494790],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[494966,494987],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[495188,495205],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[495387,495414],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Convert\n  commentId: T:System.Convert\n  id: Convert\n  parent: System\n  children:\n  - System.Convert.ChangeType(System.Object,System.Type)\n  - System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\n  - System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\n  - System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)\n  - System.Convert.FromBase64String(System.String)\n  - System.Convert.GetTypeCode(System.Object)\n  - System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Convert.ToBase64String(System.Byte[])\n  - System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)\n  - System.Convert.ToBoolean(System.Boolean)\n  - System.Convert.ToBoolean(System.Byte)\n  - System.Convert.ToBoolean(System.Decimal)\n  - System.Convert.ToBoolean(System.Double)\n  - System.Convert.ToBoolean(System.Int16)\n  - System.Convert.ToBoolean(System.Int32)\n  - System.Convert.ToBoolean(System.Int64)\n  - System.Convert.ToBoolean(System.Object)\n  - System.Convert.ToBoolean(System.Object,System.IFormatProvider)\n  - System.Convert.ToBoolean(System.SByte)\n  - System.Convert.ToBoolean(System.Single)\n  - System.Convert.ToBoolean(System.String)\n  - System.Convert.ToBoolean(System.String,System.IFormatProvider)\n  - System.Convert.ToBoolean(System.UInt16)\n  - System.Convert.ToBoolean(System.UInt32)\n  - System.Convert.ToBoolean(System.UInt64)\n  - System.Convert.ToByte(System.Boolean)\n  - System.Convert.ToByte(System.Byte)\n  - System.Convert.ToByte(System.Char)\n  - System.Convert.ToByte(System.Decimal)\n  - System.Convert.ToByte(System.Double)\n  - System.Convert.ToByte(System.Int16)\n  - System.Convert.ToByte(System.Int32)\n  - System.Convert.ToByte(System.Int64)\n  - System.Convert.ToByte(System.Object)\n  - System.Convert.ToByte(System.Object,System.IFormatProvider)\n  - System.Convert.ToByte(System.SByte)\n  - System.Convert.ToByte(System.Single)\n  - System.Convert.ToByte(System.String)\n  - System.Convert.ToByte(System.String,System.IFormatProvider)\n  - System.Convert.ToByte(System.String,System.Int32)\n  - System.Convert.ToByte(System.UInt16)\n  - System.Convert.ToByte(System.UInt32)\n  - System.Convert.ToByte(System.UInt64)\n  - System.Convert.ToChar(System.Byte)\n  - System.Convert.ToChar(System.Int16)\n  - System.Convert.ToChar(System.Int32)\n  - System.Convert.ToChar(System.Int64)\n  - System.Convert.ToChar(System.Object)\n  - System.Convert.ToChar(System.Object,System.IFormatProvider)\n  - System.Convert.ToChar(System.SByte)\n  - System.Convert.ToChar(System.String)\n  - System.Convert.ToChar(System.String,System.IFormatProvider)\n  - System.Convert.ToChar(System.UInt16)\n  - System.Convert.ToChar(System.UInt32)\n  - System.Convert.ToChar(System.UInt64)\n  - System.Convert.ToDateTime(System.Object)\n  - System.Convert.ToDateTime(System.Object,System.IFormatProvider)\n  - System.Convert.ToDateTime(System.String)\n  - System.Convert.ToDateTime(System.String,System.IFormatProvider)\n  - System.Convert.ToDecimal(System.Boolean)\n  - System.Convert.ToDecimal(System.Byte)\n  - System.Convert.ToDecimal(System.Decimal)\n  - System.Convert.ToDecimal(System.Double)\n  - System.Convert.ToDecimal(System.Int16)\n  - System.Convert.ToDecimal(System.Int32)\n  - System.Convert.ToDecimal(System.Int64)\n  - System.Convert.ToDecimal(System.Object)\n  - System.Convert.ToDecimal(System.Object,System.IFormatProvider)\n  - System.Convert.ToDecimal(System.SByte)\n  - System.Convert.ToDecimal(System.Single)\n  - System.Convert.ToDecimal(System.String)\n  - System.Convert.ToDecimal(System.String,System.IFormatProvider)\n  - System.Convert.ToDecimal(System.UInt16)\n  - System.Convert.ToDecimal(System.UInt32)\n  - System.Convert.ToDecimal(System.UInt64)\n  - System.Convert.ToDouble(System.Boolean)\n  - System.Convert.ToDouble(System.Byte)\n  - System.Convert.ToDouble(System.Decimal)\n  - System.Convert.ToDouble(System.Double)\n  - System.Convert.ToDouble(System.Int16)\n  - System.Convert.ToDouble(System.Int32)\n  - System.Convert.ToDouble(System.Int64)\n  - System.Convert.ToDouble(System.Object)\n  - System.Convert.ToDouble(System.Object,System.IFormatProvider)\n  - System.Convert.ToDouble(System.SByte)\n  - System.Convert.ToDouble(System.Single)\n  - System.Convert.ToDouble(System.String)\n  - System.Convert.ToDouble(System.String,System.IFormatProvider)\n  - System.Convert.ToDouble(System.UInt16)\n  - System.Convert.ToDouble(System.UInt32)\n  - System.Convert.ToDouble(System.UInt64)\n  - System.Convert.ToInt16(System.Boolean)\n  - System.Convert.ToInt16(System.Byte)\n  - System.Convert.ToInt16(System.Char)\n  - System.Convert.ToInt16(System.Decimal)\n  - System.Convert.ToInt16(System.Double)\n  - System.Convert.ToInt16(System.Int16)\n  - System.Convert.ToInt16(System.Int32)\n  - System.Convert.ToInt16(System.Int64)\n  - System.Convert.ToInt16(System.Object)\n  - System.Convert.ToInt16(System.Object,System.IFormatProvider)\n  - System.Convert.ToInt16(System.SByte)\n  - System.Convert.ToInt16(System.Single)\n  - System.Convert.ToInt16(System.String)\n  - System.Convert.ToInt16(System.String,System.IFormatProvider)\n  - System.Convert.ToInt16(System.String,System.Int32)\n  - System.Convert.ToInt16(System.UInt16)\n  - System.Convert.ToInt16(System.UInt32)\n  - System.Convert.ToInt16(System.UInt64)\n  - System.Convert.ToInt32(System.Boolean)\n  - System.Convert.ToInt32(System.Byte)\n  - System.Convert.ToInt32(System.Char)\n  - System.Convert.ToInt32(System.Decimal)\n  - System.Convert.ToInt32(System.Double)\n  - System.Convert.ToInt32(System.Int16)\n  - System.Convert.ToInt32(System.Int32)\n  - System.Convert.ToInt32(System.Int64)\n  - System.Convert.ToInt32(System.Object)\n  - System.Convert.ToInt32(System.Object,System.IFormatProvider)\n  - System.Convert.ToInt32(System.SByte)\n  - System.Convert.ToInt32(System.Single)\n  - System.Convert.ToInt32(System.String)\n  - System.Convert.ToInt32(System.String,System.IFormatProvider)\n  - System.Convert.ToInt32(System.String,System.Int32)\n  - System.Convert.ToInt32(System.UInt16)\n  - System.Convert.ToInt32(System.UInt32)\n  - System.Convert.ToInt32(System.UInt64)\n  - System.Convert.ToInt64(System.Boolean)\n  - System.Convert.ToInt64(System.Byte)\n  - System.Convert.ToInt64(System.Char)\n  - System.Convert.ToInt64(System.Decimal)\n  - System.Convert.ToInt64(System.Double)\n  - System.Convert.ToInt64(System.Int16)\n  - System.Convert.ToInt64(System.Int32)\n  - System.Convert.ToInt64(System.Int64)\n  - System.Convert.ToInt64(System.Object)\n  - System.Convert.ToInt64(System.Object,System.IFormatProvider)\n  - System.Convert.ToInt64(System.SByte)\n  - System.Convert.ToInt64(System.Single)\n  - System.Convert.ToInt64(System.String)\n  - System.Convert.ToInt64(System.String,System.IFormatProvider)\n  - System.Convert.ToInt64(System.String,System.Int32)\n  - System.Convert.ToInt64(System.UInt16)\n  - System.Convert.ToInt64(System.UInt32)\n  - System.Convert.ToInt64(System.UInt64)\n  - System.Convert.ToSByte(System.Boolean)\n  - System.Convert.ToSByte(System.Byte)\n  - System.Convert.ToSByte(System.Char)\n  - System.Convert.ToSByte(System.Decimal)\n  - System.Convert.ToSByte(System.Double)\n  - System.Convert.ToSByte(System.Int16)\n  - System.Convert.ToSByte(System.Int32)\n  - System.Convert.ToSByte(System.Int64)\n  - System.Convert.ToSByte(System.Object)\n  - System.Convert.ToSByte(System.Object,System.IFormatProvider)\n  - System.Convert.ToSByte(System.SByte)\n  - System.Convert.ToSByte(System.Single)\n  - System.Convert.ToSByte(System.String)\n  - System.Convert.ToSByte(System.String,System.IFormatProvider)\n  - System.Convert.ToSByte(System.String,System.Int32)\n  - System.Convert.ToSByte(System.UInt16)\n  - System.Convert.ToSByte(System.UInt32)\n  - System.Convert.ToSByte(System.UInt64)\n  - System.Convert.ToSingle(System.Boolean)\n  - System.Convert.ToSingle(System.Byte)\n  - System.Convert.ToSingle(System.Decimal)\n  - System.Convert.ToSingle(System.Double)\n  - System.Convert.ToSingle(System.Int16)\n  - System.Convert.ToSingle(System.Int32)\n  - System.Convert.ToSingle(System.Int64)\n  - System.Convert.ToSingle(System.Object)\n  - System.Convert.ToSingle(System.Object,System.IFormatProvider)\n  - System.Convert.ToSingle(System.SByte)\n  - System.Convert.ToSingle(System.Single)\n  - System.Convert.ToSingle(System.String)\n  - System.Convert.ToSingle(System.String,System.IFormatProvider)\n  - System.Convert.ToSingle(System.UInt16)\n  - System.Convert.ToSingle(System.UInt32)\n  - System.Convert.ToSingle(System.UInt64)\n  - System.Convert.ToString(System.Boolean)\n  - System.Convert.ToString(System.Boolean,System.IFormatProvider)\n  - System.Convert.ToString(System.Byte)\n  - System.Convert.ToString(System.Byte,System.IFormatProvider)\n  - System.Convert.ToString(System.Byte,System.Int32)\n  - System.Convert.ToString(System.Char)\n  - System.Convert.ToString(System.Char,System.IFormatProvider)\n  - System.Convert.ToString(System.DateTime)\n  - System.Convert.ToString(System.DateTime,System.IFormatProvider)\n  - System.Convert.ToString(System.Decimal)\n  - System.Convert.ToString(System.Decimal,System.IFormatProvider)\n  - System.Convert.ToString(System.Double)\n  - System.Convert.ToString(System.Double,System.IFormatProvider)\n  - System.Convert.ToString(System.Int16)\n  - System.Convert.ToString(System.Int16,System.IFormatProvider)\n  - System.Convert.ToString(System.Int16,System.Int32)\n  - System.Convert.ToString(System.Int32)\n  - System.Convert.ToString(System.Int32,System.IFormatProvider)\n  - System.Convert.ToString(System.Int32,System.Int32)\n  - System.Convert.ToString(System.Int64)\n  - System.Convert.ToString(System.Int64,System.IFormatProvider)\n  - System.Convert.ToString(System.Int64,System.Int32)\n  - System.Convert.ToString(System.Object)\n  - System.Convert.ToString(System.Object,System.IFormatProvider)\n  - System.Convert.ToString(System.SByte)\n  - System.Convert.ToString(System.SByte,System.IFormatProvider)\n  - System.Convert.ToString(System.Single)\n  - System.Convert.ToString(System.Single,System.IFormatProvider)\n  - System.Convert.ToString(System.UInt16)\n  - System.Convert.ToString(System.UInt16,System.IFormatProvider)\n  - System.Convert.ToString(System.UInt32)\n  - System.Convert.ToString(System.UInt32,System.IFormatProvider)\n  - System.Convert.ToString(System.UInt64)\n  - System.Convert.ToString(System.UInt64,System.IFormatProvider)\n  - System.Convert.ToUInt16(System.Boolean)\n  - System.Convert.ToUInt16(System.Byte)\n  - System.Convert.ToUInt16(System.Char)\n  - System.Convert.ToUInt16(System.Decimal)\n  - System.Convert.ToUInt16(System.Double)\n  - System.Convert.ToUInt16(System.Int16)\n  - System.Convert.ToUInt16(System.Int32)\n  - System.Convert.ToUInt16(System.Int64)\n  - System.Convert.ToUInt16(System.Object)\n  - System.Convert.ToUInt16(System.Object,System.IFormatProvider)\n  - System.Convert.ToUInt16(System.SByte)\n  - System.Convert.ToUInt16(System.Single)\n  - System.Convert.ToUInt16(System.String)\n  - System.Convert.ToUInt16(System.String,System.IFormatProvider)\n  - System.Convert.ToUInt16(System.String,System.Int32)\n  - System.Convert.ToUInt16(System.UInt16)\n  - System.Convert.ToUInt16(System.UInt32)\n  - System.Convert.ToUInt16(System.UInt64)\n  - System.Convert.ToUInt32(System.Boolean)\n  - System.Convert.ToUInt32(System.Byte)\n  - System.Convert.ToUInt32(System.Char)\n  - System.Convert.ToUInt32(System.Decimal)\n  - System.Convert.ToUInt32(System.Double)\n  - System.Convert.ToUInt32(System.Int16)\n  - System.Convert.ToUInt32(System.Int32)\n  - System.Convert.ToUInt32(System.Int64)\n  - System.Convert.ToUInt32(System.Object)\n  - System.Convert.ToUInt32(System.Object,System.IFormatProvider)\n  - System.Convert.ToUInt32(System.SByte)\n  - System.Convert.ToUInt32(System.Single)\n  - System.Convert.ToUInt32(System.String)\n  - System.Convert.ToUInt32(System.String,System.IFormatProvider)\n  - System.Convert.ToUInt32(System.String,System.Int32)\n  - System.Convert.ToUInt32(System.UInt16)\n  - System.Convert.ToUInt32(System.UInt32)\n  - System.Convert.ToUInt32(System.UInt64)\n  - System.Convert.ToUInt64(System.Boolean)\n  - System.Convert.ToUInt64(System.Byte)\n  - System.Convert.ToUInt64(System.Char)\n  - System.Convert.ToUInt64(System.Decimal)\n  - System.Convert.ToUInt64(System.Double)\n  - System.Convert.ToUInt64(System.Int16)\n  - System.Convert.ToUInt64(System.Int32)\n  - System.Convert.ToUInt64(System.Int64)\n  - System.Convert.ToUInt64(System.Object)\n  - System.Convert.ToUInt64(System.Object,System.IFormatProvider)\n  - System.Convert.ToUInt64(System.SByte)\n  - System.Convert.ToUInt64(System.Single)\n  - System.Convert.ToUInt64(System.String)\n  - System.Convert.ToUInt64(System.String,System.IFormatProvider)\n  - System.Convert.ToUInt64(System.String,System.Int32)\n  - System.Convert.ToUInt64(System.UInt16)\n  - System.Convert.ToUInt64(System.UInt32)\n  - System.Convert.ToUInt64(System.UInt64)\n  langs:\n  - csharp\n  - vb\n  name: Convert\n  fullName: System.Convert\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Convert\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 107\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts a base data type to another base data type.</p>\\n\"\n  syntax:\n    content: public class Convert\n    content.vb: Public Class Convert\n  seealso:\n  - type: System.IConvertible\n    commentId: T:System.IConvertible\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.SByte\n    commentId: T:System.SByte\n  - type: System.Int16\n    commentId: T:System.Int16\n  - type: System.Int32\n    commentId: T:System.Int32\n  - type: System.Int64\n    commentId: T:System.Int64\n  - type: System.Byte\n    commentId: T:System.Byte\n  - type: System.UInt16\n    commentId: T:System.UInt16\n  - type: System.UInt32\n    commentId: T:System.UInt32\n  - type: System.UInt64\n    commentId: T:System.UInt64\n  - type: System.Single\n    commentId: T:System.Single\n  - type: System.Double\n    commentId: T:System.Double\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.Char\n    commentId: T:System.Char\n  - type: System.String\n    commentId: T:System.String\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Convert\n- uid: System.Convert.ChangeType(System.Object,System.Type)\n  commentId: M:System.Convert.ChangeType(System.Object,System.Type)\n  id: ChangeType(System.Object,System.Type)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ChangeType(Object, Type)\n  fullName: System.Convert.ChangeType(System.Object, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ChangeType\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 318\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns an object of the specified type and whose value is equivalent to the specified object.</p>\\n\"\n  syntax:\n    content: public static object ChangeType(object value, Type conversionType)\n    content.vb: Public Shared Function ChangeType(value As Object, conversionType As Type) As Object\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: conversionType\n      type: System.Type\n      description: \"\\n<p>The type of object to return. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object whose type is <em>conversionType</em> and whose value is equivalent to <em>value</em>.</p>\\n<p>-or-</p>\\n<p>A null reference (<strong>Nothing</strong> in Visual Basic), if <em>value</em> is <strong>null</strong> and <em>conversionType</em> is not a value type. </p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>This conversion is not supported.  </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is <strong>null</strong> and <em>conversionType</em> is a value type.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in a format recognized by <em>conversionType</em>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is out of the range of <em>conversionType</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>conversionType</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ChangeType(Object, Type)\n- uid: System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\n  commentId: M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\n  id: ChangeType(System.Object,System.Type,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ChangeType(Object, Type, IFormatProvider)\n  fullName: System.Convert.ChangeType(System.Object, System.Type, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ChangeType\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 322\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static object ChangeType(object value, Type conversionType, IFormatProvider provider)\n    content.vb: Public Shared Function ChangeType(value As Object, conversionType As Type, provider As IFormatProvider) As Object\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: conversionType\n      type: System.Type\n      description: \"\\n<p>The type of object to return. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object whose type is <em>conversionType</em> and whose value is equivalent to <em>value</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em>, if the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <em>value</em> and <em>conversionType</em> are equal.</p>\\n<p>-or- </p>\\n<p>A null reference (<strong>Nothing</strong> in Visual Basic), if <em>value</em> is <strong>null</strong> and <em>conversionType</em> is not a value type.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>This conversion is not supported. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is <strong>null</strong> and <em>conversionType</em> is a value type.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in a format for <em>conversionType</em> recognized by <em>provider</em>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is out of the range of <em>conversionType</em>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>conversionType</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ChangeType(Object, Type, IFormatProvider)\n- uid: System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\n  commentId: M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\n  id: ChangeType(System.Object,System.TypeCode,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ChangeType(Object, TypeCode, IFormatProvider)\n  fullName: System.Convert.ChangeType(System.Object, System.TypeCode, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ChangeType\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 203\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static object ChangeType(object value, TypeCode typeCode, IFormatProvider provider)\n    content.vb: Public Shared Function ChangeType(value As Object, typeCode As TypeCode, provider As IFormatProvider) As Object\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: typeCode\n      type: System.TypeCode\n      description: \"\\n<p>The type of object to return. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object whose underlying type is <em>typeCode</em> and whose value is equivalent to <em>value</em>.</p>\\n<p>-or- </p>\\n<p>A null reference (<strong>Nothing</strong> in Visual Basic), if <em>value</em> is <strong>null</strong> and <em>typeCode</em> is <xref href=\\\"System.TypeCode.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.TypeCode.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.TypeCode.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>This conversion is not supported.  </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is <strong>null</strong> and <em>typeCode</em> specifies a value type.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in a format for the <em>typeCode</em> type recognized by <em>provider</em>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is out of the range of the <em>typeCode</em> type.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>typeCode</em> is invalid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ChangeType(Object, TypeCode, IFormatProvider)\n- uid: System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)\n  id: FromBase64CharArray(System.Char[],System.Int32,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: FromBase64CharArray(Char[], Int32, Int32)\n  fullName: System.Convert.FromBase64CharArray(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromBase64CharArray\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2394\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static byte[] FromBase64CharArray(char[] inArray, int offset, int length)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function FromBase64CharArray(inArray As Char(), offset As Integer, length As Integer) As Byte()\n    parameters:\n    - id: inArray\n      type: System.Char[]\n      description: \"\\n<p>A Unicode character array. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>A position within <em>inArray</em>. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements in <em>inArray</em> to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of 8-bit unsigned integers equivalent to <em>length</em> elements at position <em>offset</em> in <em>inArray</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>inArray</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>length</em> is less than 0.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset</em> plus <em>length</em> indicates a position not within <em>inArray</em>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The length of <em>inArray</em>, ignoring white-space characters, is not zero or a multiple of 4. </p>\\n<p>-or-</p>\\n<p>The format of <em>inArray</em> is invalid. <em>inArray</em> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters. </p>\\n\"\n  seealso:\n  - type: System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Security.Cryptography.FromBase64Transform\n    commentId: T:System.Security.Cryptography.FromBase64Transform\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Convert.FromBase64CharArray(System.Char(), System.Int32, System.Int32)\n  name.vb: FromBase64CharArray(Char(), Int32, Int32)\n  nameWithType: Convert.FromBase64CharArray(Char[], Int32, Int32)\n  nameWithType.vb: Convert.FromBase64CharArray(Char(), Int32, Int32)\n- uid: System.Convert.FromBase64String(System.String)\n  commentId: M:System.Convert.FromBase64String(System.String)\n  id: FromBase64String(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: FromBase64String(String)\n  fullName: System.Convert.FromBase64String(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromBase64String\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2368\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static byte[] FromBase64String(string s)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function FromBase64String(s As String) As Byte()\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of 8-bit unsigned integers that is equivalent to <em>s</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The length of <em>s</em>, ignoring white-space characters, is not zero or a multiple of 4. </p>\\n<p>-or-</p>\\n<p>The format of <em>s</em> is invalid. <em>s</em> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.</p>\\n\"\n  seealso:\n  - type: System.Convert.ToBase64String(System.Byte[])\n    commentId: M:System.Convert.ToBase64String(System.Byte[])\n  - type: System.Security.Cryptography.FromBase64Transform\n    commentId: T:System.Security.Cryptography.FromBase64Transform\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.FromBase64String(String)\n- uid: System.Convert.GetTypeCode(System.Object)\n  commentId: M:System.Convert.GetTypeCode(System.Object)\n  id: GetTypeCode(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: GetTypeCode(Object)\n  fullName: System.Convert.GetTypeCode(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTypeCode\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 167\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the <xref href=\\\"System.TypeCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the specified object.</p>\\n\"\n  syntax:\n    content: public static TypeCode GetTypeCode(object value)\n    content.vb: Public Shared Function GetTypeCode(value As Object) As TypeCode\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    return:\n      type: System.TypeCode\n      description: \"\\n<p>The <xref href=\\\"System.TypeCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for <em>value</em>, or <xref href=\\\"System.TypeCode.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.GetTypeCode(Object)\n- uid: System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Convert.ToBase64CharArray(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBase64CharArray\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2217\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</p>\\n\"\n  syntax:\n    content: public static int ToBase64CharArray(byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut)\n    content.vb: Public Shared Function ToBase64CharArray(inArray As Byte(), offsetIn As Integer, length As Integer, outArray As Char(), offsetOut As Integer) As Integer\n    parameters:\n    - id: inArray\n      type: System.Byte[]\n      description: \"\\n<p>An input array of 8-bit unsigned integers. </p>\\n\"\n    - id: offsetIn\n      type: System.Int32\n      description: \"\\n<p>A position within <em>inArray</em>. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements of <em>inArray</em> to convert. </p>\\n\"\n    - id: outArray\n      type: System.Char[]\n      description: \"\\n<p>An output array of Unicode characters. </p>\\n\"\n    - id: offsetOut\n      type: System.Int32\n      description: \"\\n<p>A position within <em>outArray</em>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer containing the number of bytes in <em>outArray</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>inArray</em> or <em>outArray</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offsetIn</em>, <em>offsetOut</em>, or <em>length</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>offsetIn</em> plus <em>length</em> is greater than the length of <em>inArray</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>offsetOut</em> plus the number of elements to return is greater than the length of <em>outArray</em>. </p>\\n\"\n  seealso:\n  - type: System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)\n  - type: System.Security.Cryptography.ToBase64Transform\n    commentId: T:System.Security.Cryptography.ToBase64Transform\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Convert.ToBase64CharArray(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: ToBase64CharArray(Byte(), Int32, Int32, Char(), Int32)\n  nameWithType: Convert.ToBase64CharArray(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: Convert.ToBase64CharArray(Byte(), Int32, Int32, Char(), Int32)\n- uid: System.Convert.ToBase64String(System.Byte[])\n  commentId: M:System.Convert.ToBase64String(System.Byte[])\n  id: ToBase64String(System.Byte[])\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBase64String(Byte[])\n  fullName: System.Convert.ToBase64String(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBase64String\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2155\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</p>\\n\"\n  syntax:\n    content: public static string ToBase64String(byte[] inArray)\n    content.vb: Public Shared Function ToBase64String(inArray As Byte()) As String\n    parameters:\n    - id: inArray\n      type: System.Byte[]\n      description: \"\\n<p>An array of 8-bit unsigned integers. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation, in base 64, of the contents of <em>inArray</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>inArray</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Convert.FromBase64String(System.String)\n    commentId: M:System.Convert.FromBase64String(System.String)\n  - type: System.Security.Cryptography.ToBase64Transform\n    commentId: T:System.Security.Cryptography.ToBase64Transform\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Convert.ToBase64String(System.Byte())\n  name.vb: ToBase64String(Byte())\n  nameWithType: Convert.ToBase64String(Byte[])\n  nameWithType.vb: Convert.ToBase64String(Byte())\n- uid: System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)\n  id: ToBase64String(System.Byte[],System.Int32,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBase64String(Byte[], Int32, Int32)\n  fullName: System.Convert.ToBase64String(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBase64String\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2174\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</p>\\n\"\n  syntax:\n    content: public static string ToBase64String(byte[] inArray, int offset, int length)\n    content.vb: Public Shared Function ToBase64String(inArray As Byte(), offset As Integer, length As Integer) As String\n    parameters:\n    - id: inArray\n      type: System.Byte[]\n      description: \"\\n<p>An array of 8-bit unsigned integers. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>An offset in <em>inArray</em>. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of elements of <em>inArray</em> to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation in base 64 of <em>length</em> elements of <em>inArray</em>, starting at position <em>offset</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>inArray</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>length</em> is negative.</p>\\n<p>-or- </p>\\n<p>\\n<em>offset</em> plus <em>length</em> is greater than the length of <em>inArray</em>. </p>\\n\"\n  seealso:\n  - type: System.Convert.FromBase64String(System.String)\n    commentId: M:System.Convert.FromBase64String(System.String)\n  - type: System.Security.Cryptography.ToBase64Transform\n    commentId: T:System.Security.Cryptography.ToBase64Transform\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Convert.ToBase64String(System.Byte(), System.Int32, System.Int32)\n  name.vb: ToBase64String(Byte(), Int32, Int32)\n  nameWithType: Convert.ToBase64String(Byte[], Int32, Int32)\n  nameWithType.vb: Convert.ToBase64String(Byte(), Int32, Int32)\n- uid: System.Convert.ToBoolean(System.Boolean)\n  commentId: M:System.Convert.ToBoolean(System.Boolean)\n  id: ToBoolean(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(Boolean)\n  fullName: System.Convert.ToBoolean(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 418\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified Boolean value; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(bool value)\n    content.vb: Public Shared Function ToBoolean(value As Boolean) As Boolean\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to return. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(Boolean)\n- uid: System.Convert.ToBoolean(System.Byte)\n  commentId: M:System.Convert.ToBoolean(System.Byte)\n  id: ToBoolean(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(Byte)\n  fullName: System.Convert.ToBoolean(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 433\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(byte value)\n    content.vb: Public Shared Function ToBoolean(value As Byte) As Boolean\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Byte\n    commentId: T:System.Byte\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(Byte)\n- uid: System.Convert.ToBoolean(System.Decimal)\n  commentId: M:System.Convert.ToBoolean(System.Decimal)\n  id: ToBoolean(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(Decimal)\n  fullName: System.Convert.ToBoolean(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 487\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to an equivalent Boolean value.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(decimal value)\n    content.vb: Public Shared Function ToBoolean(value As Decimal) As Boolean\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The number to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(Decimal)\n- uid: System.Convert.ToBoolean(System.Double)\n  commentId: M:System.Convert.ToBoolean(System.Double)\n  id: ToBoolean(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(Double)\n  fullName: System.Convert.ToBoolean(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 482\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(double value)\n    content.vb: Public Shared Function ToBoolean(value As Double) As Boolean\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(Double)\n- uid: System.Convert.ToBoolean(System.Int16)\n  commentId: M:System.Convert.ToBoolean(System.Int16)\n  id: ToBoolean(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(Int16)\n  fullName: System.Convert.ToBoolean(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 438\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(short value)\n    content.vb: Public Shared Function ToBoolean(value As Short) As Boolean\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Int16\n    commentId: T:System.Int16\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(Int16)\n- uid: System.Convert.ToBoolean(System.Int32)\n  commentId: M:System.Convert.ToBoolean(System.Int32)\n  id: ToBoolean(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(Int32)\n  fullName: System.Convert.ToBoolean(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 447\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(int value)\n    content.vb: Public Shared Function ToBoolean(value As Integer) As Boolean\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(Int32)\n- uid: System.Convert.ToBoolean(System.Int64)\n  commentId: M:System.Convert.ToBoolean(System.Int64)\n  id: ToBoolean(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(Int64)\n  fullName: System.Convert.ToBoolean(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 456\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(long value)\n    content.vb: Public Shared Function ToBoolean(value As Long) As Boolean\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Int64\n    commentId: T:System.Int64\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(Int64)\n- uid: System.Convert.ToBoolean(System.Object)\n  commentId: M:System.Convert.ToBoolean(System.Object)\n  id: ToBoolean(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(Object)\n  fullName: System.Convert.ToBoolean(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 409\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of a specified object to an equivalent Boolean value.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(object value)\n    content.vb: Public Shared Function ToBoolean(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> or <strong>false</strong>, which reflects the value returned by invoking the <xref href=\\\"System.IConvertible.ToBoolean(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method for the underlying type of <em>value</em>. If <em>value</em> is <strong>null</strong>, the method returns <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is a string that does not equal <xref href=\\\"System.Boolean.TrueString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Boolean.FalseString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n<p>-or-</p>\\n<p>The conversion of <em>value</em> to a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not supported.</p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(Object)\n- uid: System.Convert.ToBoolean(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)\n  id: ToBoolean(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(Object, IFormatProvider)\n  fullName: System.Convert.ToBoolean(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 413\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(object value, IFormatProvider provider)\n    content.vb: Public Shared Function ToBoolean(value As Object, provider As IFormatProvider) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> or <strong>false</strong>, which reflects the value returned by invoking the <xref href=\\\"System.IConvertible.ToBoolean(System.IFormatProvider)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method for the underlying type of <em>value</em>. If <em>value</em> is <strong>null</strong>, the method returns <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is a string that does not equal <xref href=\\\"System.Boolean.TrueString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Boolean.FalseString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n<p>-or-</p>\\n<p>The conversion of <em>value</em> to a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not supported. </p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(Object, IFormatProvider)\n- uid: System.Convert.ToBoolean(System.SByte)\n  commentId: M:System.Convert.ToBoolean(System.SByte)\n  id: ToBoolean(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(SByte)\n  fullName: System.Convert.ToBoolean(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 422\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool ToBoolean(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToBoolean(value As SByte) As Boolean\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.SByte\n    commentId: T:System.SByte\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(SByte)\n- uid: System.Convert.ToBoolean(System.Single)\n  commentId: M:System.Convert.ToBoolean(System.Single)\n  id: ToBoolean(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(Single)\n  fullName: System.Convert.ToBoolean(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 477\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(float value)\n    content.vb: Public Shared Function ToBoolean(value As Single) As Boolean\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(Single)\n- uid: System.Convert.ToBoolean(System.String)\n  commentId: M:System.Convert.ToBoolean(System.String)\n  id: ToBoolean(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(String)\n  fullName: System.Convert.ToBoolean(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 465\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a logical value to its Boolean equivalent.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(string value)\n    content.vb: Public Shared Function ToBoolean(value As String) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the value of either <xref href=\\\"System.Boolean.TrueString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Boolean.FalseString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> equals <xref href=\\\"System.Boolean.TrueString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <strong>false</strong> if <em>value</em> equals <xref href=\\\"System.Boolean.FalseString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not equal to <xref href=\\\"System.Boolean.TrueString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Boolean.FalseString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(String)\n- uid: System.Convert.ToBoolean(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToBoolean(System.String,System.IFormatProvider)\n  id: ToBoolean(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(String, IFormatProvider)\n  fullName: System.Convert.ToBoolean(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 471\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(string value, IFormatProvider provider)\n    content.vb: Public Shared Function ToBoolean(value As String, provider As IFormatProvider) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the value of either <xref href=\\\"System.Boolean.TrueString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Boolean.FalseString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> equals <xref href=\\\"System.Boolean.TrueString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <strong>false</strong> if <em>value</em> equals <xref href=\\\"System.Boolean.FalseString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not equal to <xref href=\\\"System.Boolean.TrueString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Boolean.FalseString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(String, IFormatProvider)\n- uid: System.Convert.ToBoolean(System.UInt16)\n  commentId: M:System.Convert.ToBoolean(System.UInt16)\n  id: ToBoolean(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(UInt16)\n  fullName: System.Convert.ToBoolean(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 442\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool ToBoolean(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToBoolean(value As UShort) As Boolean\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.UInt16\n    commentId: T:System.UInt16\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(UInt16)\n- uid: System.Convert.ToBoolean(System.UInt32)\n  commentId: M:System.Convert.ToBoolean(System.UInt32)\n  id: ToBoolean(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(UInt32)\n  fullName: System.Convert.ToBoolean(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 451\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool ToBoolean(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToBoolean(value As UInteger) As Boolean\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.UInt32\n    commentId: T:System.UInt32\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(UInt32)\n- uid: System.Convert.ToBoolean(System.UInt64)\n  commentId: M:System.Convert.ToBoolean(System.UInt64)\n  id: ToBoolean(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(UInt64)\n  fullName: System.Convert.ToBoolean(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 460\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static bool ToBoolean(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToBoolean(value As ULong) As Boolean\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is not zero; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.UInt64\n    commentId: T:System.UInt64\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToBoolean(UInt64)\n- uid: System.Convert.ToByte(System.Boolean)\n  commentId: M:System.Convert.ToByte(System.Boolean)\n  id: ToByte(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(Boolean)\n  fullName: System.Convert.ToByte(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 740\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to the equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(bool value)\n    content.vb: Public Shared Function ToByte(value As Boolean) As Byte\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(Boolean)\n- uid: System.Convert.ToByte(System.Byte)\n  commentId: M:System.Convert.ToByte(System.Byte)\n  id: ToByte(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(Byte)\n  fullName: System.Convert.ToByte(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 744\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(byte value)\n    content.vb: Public Shared Function ToByte(value As Byte) As Byte\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to return. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(Byte)\n- uid: System.Convert.ToByte(System.Char)\n  commentId: M:System.Convert.ToByte(System.Char)\n  id: ToByte(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(Char)\n  fullName: System.Convert.ToByte(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 748\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(char value)\n    content.vb: Public Shared Function ToByte(value As Char) As Byte\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(Char)\n- uid: System.Convert.ToByte(System.Decimal)\n  commentId: M:System.Convert.ToByte(System.Decimal)\n  id: ToByte(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(Decimal)\n  fullName: System.Convert.ToByte(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 808\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(decimal value)\n    content.vb: Public Shared Function ToByte(value As Decimal) As Byte\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The number to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 8-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(Decimal)\n- uid: System.Convert.ToByte(System.Double)\n  commentId: M:System.Convert.ToByte(System.Double)\n  id: ToByte(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(Double)\n  fullName: System.Convert.ToByte(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 804\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(double value)\n    content.vb: Public Shared Function ToByte(value As Double) As Byte\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 8-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(Double)\n- uid: System.Convert.ToByte(System.Int16)\n  commentId: M:System.Convert.ToByte(System.Int16)\n  id: ToByte(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(Int16)\n  fullName: System.Convert.ToByte(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 761\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(short value)\n    content.vb: Public Shared Function ToByte(value As Short) As Byte\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(Int16)\n- uid: System.Convert.ToByte(System.Int32)\n  commentId: M:System.Convert.ToByte(System.Int32)\n  id: ToByte(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(Int32)\n  fullName: System.Convert.ToByte(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 774\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(int value)\n    content.vb: Public Shared Function ToByte(value As Integer) As Byte\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(Int32)\n- uid: System.Convert.ToByte(System.Int64)\n  commentId: M:System.Convert.ToByte(System.Int64)\n  id: ToByte(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(Int64)\n  fullName: System.Convert.ToByte(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 787\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(long value)\n    content.vb: Public Shared Function ToByte(value As Long) As Byte\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(Int64)\n- uid: System.Convert.ToByte(System.Object)\n  commentId: M:System.Convert.ToByte(System.Object)\n  id: ToByte(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(Object)\n  fullName: System.Convert.ToByte(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 732\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to an 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(object value)\n    content.vb: Public Shared Function ToByte(value As Object) As Byte\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in the property format for a <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n<p>-or-</p>\\n<p>Conversion from <em>value</em> to the <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(Object)\n- uid: System.Convert.ToByte(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToByte(System.Object,System.IFormatProvider)\n  id: ToByte(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(Object, IFormatProvider)\n  fullName: System.Convert.ToByte(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 736\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(object value, IFormatProvider provider)\n    content.vb: Public Shared Function ToByte(value As Object, provider As IFormatProvider) As Byte\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in the property format for a <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n<p>-or-</p>\\n<p>Conversion from <em>value</em> to the <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(Object, IFormatProvider)\n- uid: System.Convert.ToByte(System.SByte)\n  commentId: M:System.Convert.ToByte(System.SByte)\n  id: ToByte(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(SByte)\n  fullName: System.Convert.ToByte(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 754\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static byte ToByte(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToByte(value As SByte) As Byte\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to be converted. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(SByte)\n- uid: System.Convert.ToByte(System.Single)\n  commentId: M:System.Convert.ToByte(System.Single)\n  id: ToByte(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(Single)\n  fullName: System.Convert.ToByte(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 800\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(float value)\n    content.vb: Public Shared Function ToByte(value As Single) As Byte\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 8-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(Single)\n- uid: System.Convert.ToByte(System.String)\n  commentId: M:System.Convert.ToByte(System.String)\n  id: ToByte(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(String)\n  fullName: System.Convert.ToByte(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 812\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(string value)\n    content.vb: Public Shared Function ToByte(value As String) As Byte\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Byte.Parse(System.String)\n    commentId: M:System.Byte.Parse(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(String)\n- uid: System.Convert.ToByte(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToByte(System.String,System.IFormatProvider)\n  id: ToByte(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(String, IFormatProvider)\n  fullName: System.Convert.ToByte(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 818\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(string value, IFormatProvider provider)\n    content.vb: Public Shared Function ToByte(value As String, provider As IFormatProvider) As Byte\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Byte.Parse(System.String)\n    commentId: M:System.Byte.Parse(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(String, IFormatProvider)\n- uid: System.Convert.ToByte(System.String,System.Int32)\n  commentId: M:System.Convert.ToByte(System.String,System.Int32)\n  id: ToByte(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(String, Int32)\n  fullName: System.Convert.ToByte(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2001\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: public static byte ToByte(string value, int fromBase)\n    content.vb: Public Shared Function ToByte(value As String, fromBase As Integer) As Byte\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: fromBase\n      type: System.Int32\n      description: \"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em>, which represents a base 10 unsigned number, is prefixed with a negative sign.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Byte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(String, Int32)\n- uid: System.Convert.ToByte(System.UInt16)\n  commentId: M:System.Convert.ToByte(System.UInt16)\n  id: ToByte(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(UInt16)\n  fullName: System.Convert.ToByte(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 767\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static byte ToByte(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToByte(value As UShort) As Byte\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(UInt16)\n- uid: System.Convert.ToByte(System.UInt32)\n  commentId: M:System.Convert.ToByte(System.UInt32)\n  id: ToByte(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(UInt32)\n  fullName: System.Convert.ToByte(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 780\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static byte ToByte(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToByte(value As UInteger) As Byte\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(UInt32)\n- uid: System.Convert.ToByte(System.UInt64)\n  commentId: M:System.Convert.ToByte(System.UInt64)\n  id: ToByte(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToByte(UInt64)\n  fullName: System.Convert.ToByte(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 793\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static byte ToByte(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToByte(value As ULong) As Byte\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>An 8-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Byte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToByte(UInt64)\n- uid: System.Convert.ToChar(System.Byte)\n  commentId: M:System.Convert.ToChar(System.Byte)\n  id: ToChar(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(Byte)\n  fullName: System.Convert.ToChar(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 526\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</p>\\n\"\n  syntax:\n    content: public static char ToChar(byte value)\n    content.vb: Public Shared Function ToChar(value As Byte) As Char\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToChar(Byte)\n- uid: System.Convert.ToChar(System.Int16)\n  commentId: M:System.Convert.ToChar(System.Int16)\n  id: ToChar(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(Int16)\n  fullName: System.Convert.ToChar(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 530\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</p>\\n\"\n  syntax:\n    content: public static char ToChar(short value)\n    content.vb: Public Shared Function ToChar(value As Short) As Char\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Char.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToChar(Int16)\n- uid: System.Convert.ToChar(System.Int32)\n  commentId: M:System.Convert.ToChar(System.Int32)\n  id: ToChar(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(Int32)\n  fullName: System.Convert.ToChar(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 541\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</p>\\n\"\n  syntax:\n    content: public static char ToChar(int value)\n    content.vb: Public Shared Function ToChar(value As Integer) As Char\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Char.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Char.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToChar(Int32)\n- uid: System.Convert.ToChar(System.Int64)\n  commentId: M:System.Convert.ToChar(System.Int64)\n  id: ToChar(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(Int64)\n  fullName: System.Convert.ToChar(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 554\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</p>\\n\"\n  syntax:\n    content: public static char ToChar(long value)\n    content.vb: Public Shared Function ToChar(value As Long) As Char\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Char.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Char.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToChar(Int64)\n- uid: System.Convert.ToChar(System.Object)\n  commentId: M:System.Convert.ToChar(System.Object)\n  id: ToChar(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(Object)\n  fullName: System.Convert.ToChar(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 503\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a Unicode character.</p>\\n\"\n  syntax:\n    content: public static char ToChar(object value)\n    content.vb: Public Shared Function ToChar(value As Object) As Char\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that is equivalent to value, or <xref href=\\\"System.Char.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is a null string.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n<p>-or-</p>\\n<p>The conversion of <em>value</em> to a <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not supported. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Char.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Char.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToChar(Object)\n- uid: System.Convert.ToChar(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToChar(System.Object,System.IFormatProvider)\n  id: ToChar(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(Object, IFormatProvider)\n  fullName: System.Convert.ToChar(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 507\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static char ToChar(object value, IFormatProvider provider)\n    content.vb: Public Shared Function ToChar(value As Object, provider As IFormatProvider) As Char\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that is equivalent to <em>value</em>, or <xref href=\\\"System.Char.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is a null string.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion of <em>value</em> to a <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Char.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Char.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToChar(Object, IFormatProvider)\n- uid: System.Convert.ToChar(System.SByte)\n  commentId: M:System.Convert.ToChar(System.SByte)\n  id: ToChar(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(SByte)\n  fullName: System.Convert.ToChar(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 519\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static char ToChar(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToChar(value As SByte) As Char\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than <xref href=\\\"System.Char.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToChar(SByte)\n- uid: System.Convert.ToChar(System.String)\n  commentId: M:System.Convert.ToChar(System.String)\n  id: ToChar(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(String)\n  fullName: System.Convert.ToChar(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 571\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the first character of a specified string to a Unicode character.</p>\\n\"\n  syntax:\n    content: public static char ToChar(string value)\n    content.vb: Public Shared Function ToChar(value As String) As Char\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string of length 1. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that is equivalent to the first and only character in <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The length of <em>value</em> is not 1. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToChar(String)\n- uid: System.Convert.ToChar(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToChar(System.String,System.IFormatProvider)\n  id: ToChar(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(String, IFormatProvider)\n  fullName: System.Convert.ToChar(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 575\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static char ToChar(string value, IFormatProvider provider)\n    content.vb: Public Shared Function ToChar(value As String, provider As IFormatProvider) As Char\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string of length 1 or <strong>null</strong>. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. This parameter is ignored.</p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that is equivalent to the first and only character in <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The length of <em>value</em> is not 1. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToChar(String, IFormatProvider)\n- uid: System.Convert.ToChar(System.UInt16)\n  commentId: M:System.Convert.ToChar(System.UInt16)\n  id: ToChar(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(UInt16)\n  fullName: System.Convert.ToChar(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 536\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static char ToChar(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToChar(value As UShort) As Char\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToChar(UInt16)\n- uid: System.Convert.ToChar(System.UInt32)\n  commentId: M:System.Convert.ToChar(System.UInt32)\n  id: ToChar(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(UInt32)\n  fullName: System.Convert.ToChar(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 547\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static char ToChar(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToChar(value As UInteger) As Char\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Char.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToChar(UInt32)\n- uid: System.Convert.ToChar(System.UInt64)\n  commentId: M:System.Convert.ToChar(System.UInt64)\n  id: ToChar(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToChar(UInt64)\n  fullName: System.Convert.ToChar(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 560\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static char ToChar(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToChar(value As ULong) As Char\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A Unicode character that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Char.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToChar(UInt64)\n- uid: System.Convert.ToDateTime(System.Object)\n  commentId: M:System.Convert.ToDateTime(System.Object)\n  id: ToDateTime(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDateTime(Object)\n  fullName: System.Convert.ToDateTime(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDateTime\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1740\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static DateTime ToDateTime(object value)\n    content.vb: Public Shared Function ToDateTime(value As Object) As Date\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The date and time equivalent of the value of <em>value</em>, or a date and time equivalent of <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not a valid date and time value.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDateTime(Object)\n- uid: System.Convert.ToDateTime(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)\n  id: ToDateTime(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDateTime(Object, IFormatProvider)\n  fullName: System.Convert.ToDateTime(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDateTime\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1744\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static DateTime ToDateTime(object value, IFormatProvider provider)\n    content.vb: Public Shared Function ToDateTime(value As Object, provider As IFormatProvider) As Date\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The date and time equivalent of the value of <em>value</em>, or the date and time equivalent of <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not a valid date and time value.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDateTime(Object, IFormatProvider)\n- uid: System.Convert.ToDateTime(System.String)\n  commentId: M:System.Convert.ToDateTime(System.String)\n  id: ToDateTime(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDateTime(String)\n  fullName: System.Convert.ToDateTime(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDateTime\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1748\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a date and time to an equivalent date and time value.</p>\\n\"\n  syntax:\n    content: public static DateTime ToDateTime(string value)\n    content.vb: Public Shared Function ToDateTime(value As String) As Date\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string representation of a date and time.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The date and time equivalent of the value of <em>value</em>, or the date and time equivalent of <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not a properly formatted date and time string. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CultureInfo.CurrentCulture\n    commentId: P:System.Globalization.CultureInfo.CurrentCulture\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDateTime(String)\n- uid: System.Convert.ToDateTime(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToDateTime(System.String,System.IFormatProvider)\n  id: ToDateTime(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDateTime(String, IFormatProvider)\n  fullName: System.Convert.ToDateTime(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDateTime\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1754\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static DateTime ToDateTime(string value, IFormatProvider provider)\n    content.vb: Public Shared Function ToDateTime(value As String, provider As IFormatProvider) As Date\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains a date and time to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The date and time equivalent of the value of <em>value</em>, or the date and time equivalent of <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not a properly formatted date and time string. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDateTime(String, IFormatProvider)\n- uid: System.Convert.ToDecimal(System.Boolean)\n  commentId: M:System.Convert.ToDecimal(System.Boolean)\n  id: ToDecimal(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(Boolean)\n  fullName: System.Convert.ToDecimal(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1722\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to the equivalent decimal number.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(bool value)\n    content.vb: Public Shared Function ToDecimal(value As Boolean) As Decimal\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(Boolean)\n- uid: System.Convert.ToDecimal(System.Byte)\n  commentId: M:System.Convert.ToDecimal(System.Byte)\n  id: ToDecimal(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(Byte)\n  fullName: System.Convert.ToDecimal(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1663\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(byte value)\n    content.vb: Public Shared Function ToDecimal(value As Byte) As Decimal\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The decimal number that is equivalent to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(Byte)\n- uid: System.Convert.ToDecimal(System.Decimal)\n  commentId: M:System.Convert.ToDecimal(System.Decimal)\n  id: ToDecimal(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(Decimal)\n  fullName: System.Convert.ToDecimal(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1718\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified decimal number; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(decimal value)\n    content.vb: Public Shared Function ToDecimal(value As Decimal) As Decimal\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>A decimal number. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(Decimal)\n- uid: System.Convert.ToDecimal(System.Double)\n  commentId: M:System.Convert.ToDecimal(System.Double)\n  id: ToDecimal(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(Double)\n  fullName: System.Convert.ToDecimal(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1702\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to an equivalent decimal number.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(double value)\n    content.vb: Public Shared Function ToDecimal(value As Double) As Decimal\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number that is equivalent to <em>value</em>. </p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(Double)\n- uid: System.Convert.ToDecimal(System.Int16)\n  commentId: M:System.Convert.ToDecimal(System.Int16)\n  id: ToDecimal(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(Int16)\n  fullName: System.Convert.ToDecimal(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1671\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to an equivalent decimal number.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(short value)\n    content.vb: Public Shared Function ToDecimal(value As Short) As Decimal\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number that is equivalent to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(Int16)\n- uid: System.Convert.ToDecimal(System.Int32)\n  commentId: M:System.Convert.ToDecimal(System.Int32)\n  id: ToDecimal(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(Int32)\n  fullName: System.Convert.ToDecimal(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1680\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to an equivalent decimal number.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(int value)\n    content.vb: Public Shared Function ToDecimal(value As Integer) As Decimal\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number that is equivalent to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(Int32)\n- uid: System.Convert.ToDecimal(System.Int64)\n  commentId: M:System.Convert.ToDecimal(System.Int64)\n  id: ToDecimal(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(Int64)\n  fullName: System.Convert.ToDecimal(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1689\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to an equivalent decimal number.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(long value)\n    content.vb: Public Shared Function ToDecimal(value As Long) As Decimal\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number that is equivalent to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(Int64)\n- uid: System.Convert.ToDecimal(System.Object)\n  commentId: M:System.Convert.ToDecimal(System.Object)\n  id: ToDecimal(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(Object)\n  fullName: System.Convert.ToDecimal(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1650\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to an equivalent decimal number.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(object value)\n    content.vb: Public Shared Function ToDecimal(value As Object) As Decimal\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number that is equivalent to <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format for a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(Object)\n- uid: System.Convert.ToDecimal(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)\n  id: ToDecimal(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(Object, IFormatProvider)\n  fullName: System.Convert.ToDecimal(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1654\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(object value, IFormatProvider provider)\n    content.vb: Public Shared Function ToDecimal(value As Object, provider As IFormatProvider) As Decimal\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number that is equivalent to <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format for a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n<p>-or-</p>\\n<p>The conversion is not supported. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(Object, IFormatProvider)\n- uid: System.Convert.ToDecimal(System.SByte)\n  commentId: M:System.Convert.ToDecimal(System.SByte)\n  id: ToDecimal(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(SByte)\n  fullName: System.Convert.ToDecimal(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1658\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to the equivalent decimal number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static decimal ToDecimal(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToDecimal(value As SByte) As Decimal\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number that is equivalent to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(SByte)\n- uid: System.Convert.ToDecimal(System.Single)\n  commentId: M:System.Convert.ToDecimal(System.Single)\n  id: ToDecimal(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(Single)\n  fullName: System.Convert.ToDecimal(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1698\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to the equivalent decimal number.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(float value)\n    content.vb: Public Shared Function ToDecimal(value As Single) As Decimal\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number that is equivalent to <em>value</em>. </p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(Single)\n- uid: System.Convert.ToDecimal(System.String)\n  commentId: M:System.Convert.ToDecimal(System.String)\n  id: ToDecimal(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(String)\n  fullName: System.Convert.ToDecimal(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1706\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent decimal number.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(string value)\n    content.vb: Public Shared Function ToDecimal(value As String) As Decimal\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not a number in a valid format.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(String)\n- uid: System.Convert.ToDecimal(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToDecimal(System.String,System.IFormatProvider)\n  id: ToDecimal(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(String, IFormatProvider)\n  fullName: System.Convert.ToDecimal(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1712\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static decimal ToDecimal(string value, IFormatProvider provider)\n    content.vb: Public Shared Function ToDecimal(value As String, provider As IFormatProvider) As Decimal\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not a number in a valid format.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(String, IFormatProvider)\n- uid: System.Convert.ToDecimal(System.UInt16)\n  commentId: M:System.Convert.ToDecimal(System.UInt16)\n  id: ToDecimal(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(UInt16)\n  fullName: System.Convert.ToDecimal(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1675\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static decimal ToDecimal(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToDecimal(value As UShort) As Decimal\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The decimal number that is equivalent to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(UInt16)\n- uid: System.Convert.ToDecimal(System.UInt32)\n  commentId: M:System.Convert.ToDecimal(System.UInt32)\n  id: ToDecimal(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(UInt32)\n  fullName: System.Convert.ToDecimal(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1684\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static decimal ToDecimal(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToDecimal(value As UInteger) As Decimal\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number that is equivalent to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(UInt32)\n- uid: System.Convert.ToDecimal(System.UInt64)\n  commentId: M:System.Convert.ToDecimal(System.UInt64)\n  id: ToDecimal(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDecimal(UInt64)\n  fullName: System.Convert.ToDecimal(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDecimal\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1693\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static decimal ToDecimal(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToDecimal(value As ULong) As Decimal\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number that is equivalent to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDecimal(UInt64)\n- uid: System.Convert.ToDouble(System.Boolean)\n  commentId: M:System.Convert.ToDouble(System.Boolean)\n  id: ToDouble(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(Boolean)\n  fullName: System.Convert.ToDouble(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1636\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to the equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(bool value)\n    content.vb: Public Shared Function ToDouble(value As Boolean) As Double\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(Boolean)\n- uid: System.Convert.ToDouble(System.Byte)\n  commentId: M:System.Convert.ToDouble(System.Byte)\n  id: ToDouble(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(Byte)\n  fullName: System.Convert.ToDouble(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1577\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(byte value)\n    content.vb: Public Shared Function ToDouble(value As Byte) As Double\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(Byte)\n- uid: System.Convert.ToDouble(System.Decimal)\n  commentId: M:System.Convert.ToDouble(System.Decimal)\n  id: ToDouble(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(Decimal)\n  fullName: System.Convert.ToDouble(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1620\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to an equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(decimal value)\n    content.vb: Public Shared Function ToDouble(value As Decimal) As Double\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(Decimal)\n- uid: System.Convert.ToDouble(System.Double)\n  commentId: M:System.Convert.ToDouble(System.Double)\n  id: ToDouble(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(Double)\n  fullName: System.Convert.ToDouble(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1616\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified double-precision floating-point number; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(double value)\n    content.vb: Public Shared Function ToDouble(value As Double) As Double\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to return. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(Double)\n- uid: System.Convert.ToDouble(System.Int16)\n  commentId: M:System.Convert.ToDouble(System.Int16)\n  id: ToDouble(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(Int16)\n  fullName: System.Convert.ToDouble(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1581\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(short value)\n    content.vb: Public Shared Function ToDouble(value As Short) As Double\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(Int16)\n- uid: System.Convert.ToDouble(System.Int32)\n  commentId: M:System.Convert.ToDouble(System.Int32)\n  id: ToDouble(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(Int32)\n  fullName: System.Convert.ToDouble(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1594\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(int value)\n    content.vb: Public Shared Function ToDouble(value As Integer) As Double\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(Int32)\n- uid: System.Convert.ToDouble(System.Int64)\n  commentId: M:System.Convert.ToDouble(System.Int64)\n  id: ToDouble(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(Int64)\n  fullName: System.Convert.ToDouble(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1603\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(long value)\n    content.vb: Public Shared Function ToDouble(value As Long) As Double\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(Int64)\n- uid: System.Convert.ToDouble(System.Object)\n  commentId: M:System.Convert.ToDouble(System.Object)\n  id: ToDouble(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(Object)\n  fullName: System.Convert.ToDouble(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1563\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(object value)\n    content.vb: Public Shared Function ToDouble(value As Object) As Double\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format for a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Double.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(Object)\n- uid: System.Convert.ToDouble(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToDouble(System.Object,System.IFormatProvider)\n  id: ToDouble(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(Object, IFormatProvider)\n  fullName: System.Convert.ToDouble(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1567\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(object value, IFormatProvider provider)\n    content.vb: Public Shared Function ToDouble(value As Object, provider As IFormatProvider) As Double\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format for a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Double.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(Object, IFormatProvider)\n- uid: System.Convert.ToDouble(System.SByte)\n  commentId: M:System.Convert.ToDouble(System.SByte)\n  id: ToDouble(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(SByte)\n  fullName: System.Convert.ToDouble(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1572\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static double ToDouble(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToDouble(value As SByte) As Double\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(SByte)\n- uid: System.Convert.ToDouble(System.Single)\n  commentId: M:System.Convert.ToDouble(System.Single)\n  id: ToDouble(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(Single)\n  fullName: System.Convert.ToDouble(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1612\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(float value)\n    content.vb: Public Shared Function ToDouble(value As Single) As Double\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(Single)\n- uid: System.Convert.ToDouble(System.String)\n  commentId: M:System.Convert.ToDouble(System.String)\n  id: ToDouble(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(String)\n  fullName: System.Convert.ToDouble(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1624\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(string value)\n    content.vb: Public Shared Function ToDouble(value As String) As Double\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not a number in a valid format.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Double.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(String)\n- uid: System.Convert.ToDouble(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToDouble(System.String,System.IFormatProvider)\n  id: ToDouble(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(String, IFormatProvider)\n  fullName: System.Convert.ToDouble(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1630\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static double ToDouble(string value, IFormatProvider provider)\n    content.vb: Public Shared Function ToDouble(value As String, provider As IFormatProvider) As Double\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not a number in a valid format.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Double.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(String, IFormatProvider)\n- uid: System.Convert.ToDouble(System.UInt16)\n  commentId: M:System.Convert.ToDouble(System.UInt16)\n  id: ToDouble(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(UInt16)\n  fullName: System.Convert.ToDouble(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1589\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static double ToDouble(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToDouble(value As UShort) As Double\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(UInt16)\n- uid: System.Convert.ToDouble(System.UInt32)\n  commentId: M:System.Convert.ToDouble(System.UInt32)\n  id: ToDouble(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(UInt32)\n  fullName: System.Convert.ToDouble(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1598\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static double ToDouble(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToDouble(value As UInteger) As Double\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(UInt32)\n- uid: System.Convert.ToDouble(System.UInt64)\n  commentId: M:System.Convert.ToDouble(System.UInt64)\n  id: ToDouble(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(UInt64)\n  fullName: System.Convert.ToDouble(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1607\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static double ToDouble(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToDouble(value As ULong) As Double\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToDouble(UInt64)\n- uid: System.Convert.ToInt16(System.Boolean)\n  commentId: M:System.Convert.ToInt16(System.Boolean)\n  id: ToInt16(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Boolean)\n  fullName: System.Convert.ToInt16(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 843\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to the equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(bool value)\n    content.vb: Public Shared Function ToInt16(value As Boolean) As Short\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(Boolean)\n- uid: System.Convert.ToInt16(System.Byte)\n  commentId: M:System.Convert.ToInt16(System.Byte)\n  id: ToInt16(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Byte)\n  fullName: System.Convert.ToInt16(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 858\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(byte value)\n    content.vb: Public Shared Function ToInt16(value As Byte) As Short\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(Byte)\n- uid: System.Convert.ToInt16(System.Char)\n  commentId: M:System.Convert.ToInt16(System.Char)\n  id: ToInt16(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Char)\n  fullName: System.Convert.ToInt16(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 847\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(char value)\n    content.vb: Public Shared Function ToInt16(value As Char) As Short\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>. </p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(Char)\n- uid: System.Convert.ToInt16(System.Decimal)\n  commentId: M:System.Convert.ToInt16(System.Decimal)\n  id: ToInt16(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Decimal)\n  fullName: System.Convert.ToInt16(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 907\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to an equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(decimal value)\n    content.vb: Public Shared Function ToInt16(value As Decimal) As Short\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 16-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(Decimal)\n- uid: System.Convert.ToInt16(System.Double)\n  commentId: M:System.Convert.ToInt16(System.Double)\n  id: ToInt16(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Double)\n  fullName: System.Convert.ToInt16(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 903\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(double value)\n    content.vb: Public Shared Function ToInt16(value As Double) As Short\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 16-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(Double)\n- uid: System.Convert.ToInt16(System.Int16)\n  commentId: M:System.Convert.ToInt16(System.Int16)\n  id: ToInt16(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Int16)\n  fullName: System.Convert.ToInt16(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 882\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 16-bit signed integer; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(short value)\n    content.vb: Public Shared Function ToInt16(value As Short) As Short\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to return. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(Int16)\n- uid: System.Convert.ToInt16(System.Int32)\n  commentId: M:System.Convert.ToInt16(System.Int32)\n  id: ToInt16(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Int32)\n  fullName: System.Convert.ToInt16(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 869\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(int value)\n    content.vb: Public Shared Function ToInt16(value As Integer) As Short\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer equivalent of <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(Int32)\n- uid: System.Convert.ToInt16(System.Int64)\n  commentId: M:System.Convert.ToInt16(System.Int64)\n  id: ToInt16(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Int64)\n  fullName: System.Convert.ToInt16(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 886\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(long value)\n    content.vb: Public Shared Function ToInt16(value As Long) As Short\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(Int64)\n- uid: System.Convert.ToInt16(System.Object)\n  commentId: M:System.Convert.ToInt16(System.Object)\n  id: ToInt16(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Object)\n  fullName: System.Convert.ToInt16(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 835\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(object value)\n    content.vb: Public Shared Function ToInt16(value As Object) As Short\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format for an <xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(Object)\n- uid: System.Convert.ToInt16(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToInt16(System.Object,System.IFormatProvider)\n  id: ToInt16(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Object, IFormatProvider)\n  fullName: System.Convert.ToInt16(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 839\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(object value, IFormatProvider provider)\n    content.vb: Public Shared Function ToInt16(value As Object, provider As IFormatProvider) As Short\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format for an <xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(Object, IFormatProvider)\n- uid: System.Convert.ToInt16(System.SByte)\n  commentId: M:System.Convert.ToInt16(System.SByte)\n  id: ToInt16(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(SByte)\n  fullName: System.Convert.ToInt16(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 853\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static short ToInt16(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToInt16(value As SByte) As Short\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(SByte)\n- uid: System.Convert.ToInt16(System.Single)\n  commentId: M:System.Convert.ToInt16(System.Single)\n  id: ToInt16(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Single)\n  fullName: System.Convert.ToInt16(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 899\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(float value)\n    content.vb: Public Shared Function ToInt16(value As Single) As Short\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 16-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(Single)\n- uid: System.Convert.ToInt16(System.String)\n  commentId: M:System.Convert.ToInt16(System.String)\n  id: ToInt16(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(String)\n  fullName: System.Convert.ToInt16(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 911\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(string value)\n    content.vb: Public Shared Function ToInt16(value As String) As Short\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Int16.Parse(System.String)\n    commentId: M:System.Int16.Parse(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(String)\n- uid: System.Convert.ToInt16(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToInt16(System.String,System.IFormatProvider)\n  id: ToInt16(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(String, IFormatProvider)\n  fullName: System.Convert.ToInt16(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 917\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(string value, IFormatProvider provider)\n    content.vb: Public Shared Function ToInt16(value As String, provider As IFormatProvider) As Short\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Int16.Parse(System.String)\n    commentId: M:System.Int16.Parse(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(String, IFormatProvider)\n- uid: System.Convert.ToInt16(System.String,System.Int32)\n  commentId: M:System.Convert.ToInt16(System.String,System.Int32)\n  id: ToInt16(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(String, Int32)\n  fullName: System.Convert.ToInt16(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2035\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short ToInt16(string value, int fromBase)\n    content.vb: Public Shared Function ToInt16(value As String, fromBase As Integer) As Short\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: fromBase\n      type: System.Int32\n      description: \"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(String, Int32)\n- uid: System.Convert.ToInt16(System.UInt16)\n  commentId: M:System.Convert.ToInt16(System.UInt16)\n  id: ToInt16(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(UInt16)\n  fullName: System.Convert.ToInt16(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 862\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static short ToInt16(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToInt16(value As UShort) As Short\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(UInt16)\n- uid: System.Convert.ToInt16(System.UInt32)\n  commentId: M:System.Convert.ToInt16(System.UInt32)\n  id: ToInt16(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(UInt32)\n  fullName: System.Convert.ToInt16(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 875\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static short ToInt16(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToInt16(value As UInteger) As Short\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(UInt32)\n- uid: System.Convert.ToInt16(System.UInt64)\n  commentId: M:System.Convert.ToInt16(System.UInt64)\n  id: ToInt16(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(UInt64)\n  fullName: System.Convert.ToInt16(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 892\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static short ToInt16(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToInt16(value As ULong) As Short\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt16(UInt64)\n- uid: System.Convert.ToInt32(System.Boolean)\n  commentId: M:System.Convert.ToInt32(System.Boolean)\n  id: ToInt32(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Boolean)\n  fullName: System.Convert.ToInt32(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1057\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to the equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(bool value)\n    content.vb: Public Shared Function ToInt32(value As Boolean) As Integer\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(Boolean)\n- uid: System.Convert.ToInt32(System.Byte)\n  commentId: M:System.Convert.ToInt32(System.Byte)\n  id: ToInt32(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Byte)\n  fullName: System.Convert.ToInt32(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1070\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(byte value)\n    content.vb: Public Shared Function ToInt32(value As Byte) As Integer\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(Byte)\n- uid: System.Convert.ToInt32(System.Char)\n  commentId: M:System.Convert.ToInt32(System.Char)\n  id: ToInt32(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Char)\n  fullName: System.Convert.ToInt32(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1061\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(char value)\n    content.vb: Public Shared Function ToInt32(value As Char) As Integer\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(Char)\n- uid: System.Convert.ToInt32(System.Decimal)\n  commentId: M:System.Convert.ToInt32(System.Decimal)\n  id: ToInt32(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Decimal)\n  fullName: System.Convert.ToInt32(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1131\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to an equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static int ToInt32(decimal value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ToInt32(value As Decimal) As Integer\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 32-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(Decimal)\n- uid: System.Convert.ToInt32(System.Double)\n  commentId: M:System.Convert.ToInt32(System.Double)\n  id: ToInt32(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Double)\n  fullName: System.Convert.ToInt32(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1111\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(double value)\n    content.vb: Public Shared Function ToInt32(value As Double) As Integer\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 32-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(Double)\n- uid: System.Convert.ToInt32(System.Int16)\n  commentId: M:System.Convert.ToInt32(System.Int16)\n  id: ToInt32(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Int16)\n  fullName: System.Convert.ToInt32(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1074\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(short value)\n    content.vb: Public Shared Function ToInt32(value As Short) As Integer\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(Int16)\n- uid: System.Convert.ToInt32(System.Int32)\n  commentId: M:System.Convert.ToInt32(System.Int32)\n  id: ToInt32(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Int32)\n  fullName: System.Convert.ToInt32(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1090\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 32-bit signed integer; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(int value)\n    content.vb: Public Shared Function ToInt32(value As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to return. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(Int32)\n- uid: System.Convert.ToInt32(System.Int64)\n  commentId: M:System.Convert.ToInt32(System.Int64)\n  id: ToInt32(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Int64)\n  fullName: System.Convert.ToInt32(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1094\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(long value)\n    content.vb: Public Shared Function ToInt32(value As Long) As Integer\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(Int64)\n- uid: System.Convert.ToInt32(System.Object)\n  commentId: M:System.Convert.ToInt32(System.Object)\n  id: ToInt32(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Object)\n  fullName: System.Convert.ToInt32(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1048\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(object value)\n    content.vb: Public Shared Function ToInt32(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the  <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(Object)\n- uid: System.Convert.ToInt32(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToInt32(System.Object,System.IFormatProvider)\n  id: ToInt32(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Object, IFormatProvider)\n  fullName: System.Convert.ToInt32(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1052\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(object value, IFormatProvider provider)\n    content.vb: Public Shared Function ToInt32(value As Object, provider As IFormatProvider) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(Object, IFormatProvider)\n- uid: System.Convert.ToInt32(System.SByte)\n  commentId: M:System.Convert.ToInt32(System.SByte)\n  id: ToInt32(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(SByte)\n  fullName: System.Convert.ToInt32(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1065\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static int ToInt32(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToInt32(value As SByte) As Integer\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(SByte)\n- uid: System.Convert.ToInt32(System.Single)\n  commentId: M:System.Convert.ToInt32(System.Single)\n  id: ToInt32(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Single)\n  fullName: System.Convert.ToInt32(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1107\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(float value)\n    content.vb: Public Shared Function ToInt32(value As Single) As Integer\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 32-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(Single)\n- uid: System.Convert.ToInt32(System.String)\n  commentId: M:System.Convert.ToInt32(System.String)\n  id: ToInt32(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(String)\n  fullName: System.Convert.ToInt32(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1136\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(string value)\n    content.vb: Public Shared Function ToInt32(value As String) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(String)\n- uid: System.Convert.ToInt32(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToInt32(System.String,System.IFormatProvider)\n  id: ToInt32(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(String, IFormatProvider)\n  fullName: System.Convert.ToInt32(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1142\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(string value, IFormatProvider provider)\n    content.vb: Public Shared Function ToInt32(value As String, provider As IFormatProvider) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(String, IFormatProvider)\n- uid: System.Convert.ToInt32(System.String,System.Int32)\n  commentId: M:System.Convert.ToInt32(System.String,System.Int32)\n  id: ToInt32(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(String, Int32)\n  fullName: System.Convert.ToInt32(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2069\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int ToInt32(string value, int fromBase)\n    content.vb: Public Shared Function ToInt32(value As String, fromBase As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: fromBase\n      type: System.Int32\n      description: \"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(String, Int32)\n- uid: System.Convert.ToInt32(System.UInt16)\n  commentId: M:System.Convert.ToInt32(System.UInt16)\n  id: ToInt32(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(UInt16)\n  fullName: System.Convert.ToInt32(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1078\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static int ToInt32(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToInt32(value As UShort) As Integer\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(UInt16)\n- uid: System.Convert.ToInt32(System.UInt32)\n  commentId: M:System.Convert.ToInt32(System.UInt32)\n  id: ToInt32(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(UInt32)\n  fullName: System.Convert.ToInt32(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1083\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static int ToInt32(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToInt32(value As UInteger) As Integer\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(UInt32)\n- uid: System.Convert.ToInt32(System.UInt64)\n  commentId: M:System.Convert.ToInt32(System.UInt64)\n  id: ToInt32(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(UInt64)\n  fullName: System.Convert.ToInt32(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1100\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static int ToInt32(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToInt32(value As ULong) As Integer\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt32(UInt64)\n- uid: System.Convert.ToInt64(System.Boolean)\n  commentId: M:System.Convert.ToInt64(System.Boolean)\n  id: ToInt64(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Boolean)\n  fullName: System.Convert.ToInt64(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1285\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to the equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(bool value)\n    content.vb: Public Shared Function ToInt64(value As Boolean) As Long\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(Boolean)\n- uid: System.Convert.ToInt64(System.Byte)\n  commentId: M:System.Convert.ToInt64(System.Byte)\n  id: ToInt64(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Byte)\n  fullName: System.Convert.ToInt64(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1298\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(byte value)\n    content.vb: Public Shared Function ToInt64(value As Byte) As Long\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(Byte)\n- uid: System.Convert.ToInt64(System.Char)\n  commentId: M:System.Convert.ToInt64(System.Char)\n  id: ToInt64(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Char)\n  fullName: System.Convert.ToInt64(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1289\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(char value)\n    content.vb: Public Shared Function ToInt64(value As Char) As Long\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(Char)\n- uid: System.Convert.ToInt64(System.Decimal)\n  commentId: M:System.Convert.ToInt64(System.Decimal)\n  id: ToInt64(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Decimal)\n  fullName: System.Convert.ToInt64(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1340\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to an equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(decimal value)\n    content.vb: Public Shared Function ToInt64(value As Decimal) As Long\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 64-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(Decimal)\n- uid: System.Convert.ToInt64(System.Double)\n  commentId: M:System.Convert.ToInt64(System.Double)\n  id: ToInt64(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Double)\n  fullName: System.Convert.ToInt64(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1336\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(double value)\n    content.vb: Public Shared Function ToInt64(value As Double) As Long\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 64-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(Double)\n- uid: System.Convert.ToInt64(System.Int16)\n  commentId: M:System.Convert.ToInt64(System.Int16)\n  id: ToInt64(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Int16)\n  fullName: System.Convert.ToInt64(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1302\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(short value)\n    content.vb: Public Shared Function ToInt64(value As Short) As Long\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(Int16)\n- uid: System.Convert.ToInt64(System.Int32)\n  commentId: M:System.Convert.ToInt64(System.Int32)\n  id: ToInt64(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Int32)\n  fullName: System.Convert.ToInt64(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1311\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(int value)\n    content.vb: Public Shared Function ToInt64(value As Integer) As Long\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(Int32)\n- uid: System.Convert.ToInt64(System.Int64)\n  commentId: M:System.Convert.ToInt64(System.Int64)\n  id: ToInt64(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Int64)\n  fullName: System.Convert.ToInt64(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1327\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 64-bit signed integer; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(long value)\n    content.vb: Public Shared Function ToInt64(value As Long) As Long\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(Int64)\n- uid: System.Convert.ToInt64(System.Object)\n  commentId: M:System.Convert.ToInt64(System.Object)\n  id: ToInt64(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Object)\n  fullName: System.Convert.ToInt64(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1276\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(object value)\n    content.vb: Public Shared Function ToInt64(value As Object) As Long\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(Object)\n- uid: System.Convert.ToInt64(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToInt64(System.Object,System.IFormatProvider)\n  id: ToInt64(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Object, IFormatProvider)\n  fullName: System.Convert.ToInt64(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1280\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(object value, IFormatProvider provider)\n    content.vb: Public Shared Function ToInt64(value As Object, provider As IFormatProvider) As Long\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n<p>-or-</p>\\n<p>The conversion is not supported. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(Object, IFormatProvider)\n- uid: System.Convert.ToInt64(System.SByte)\n  commentId: M:System.Convert.ToInt64(System.SByte)\n  id: ToInt64(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(SByte)\n  fullName: System.Convert.ToInt64(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1293\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static long ToInt64(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToInt64(value As SByte) As Long\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(SByte)\n- uid: System.Convert.ToInt64(System.Single)\n  commentId: M:System.Convert.ToInt64(System.Single)\n  id: ToInt64(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Single)\n  fullName: System.Convert.ToInt64(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1332\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(float value)\n    content.vb: Public Shared Function ToInt64(value As Single) As Long\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 64-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(Single)\n- uid: System.Convert.ToInt64(System.String)\n  commentId: M:System.Convert.ToInt64(System.String)\n  id: ToInt64(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(String)\n  fullName: System.Convert.ToInt64(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1344\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(string value)\n    content.vb: Public Shared Function ToInt64(value As String) As Long\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains a number to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(String)\n- uid: System.Convert.ToInt64(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToInt64(System.String,System.IFormatProvider)\n  id: ToInt64(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(String, IFormatProvider)\n  fullName: System.Convert.ToInt64(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1350\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(string value, IFormatProvider provider)\n    content.vb: Public Shared Function ToInt64(value As String, provider As IFormatProvider) As Long\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(String, IFormatProvider)\n- uid: System.Convert.ToInt64(System.String,System.Int32)\n  commentId: M:System.Convert.ToInt64(System.String,System.Int32)\n  id: ToInt64(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(String, Int32)\n  fullName: System.Convert.ToInt64(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2094\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static long ToInt64(string value, int fromBase)\n    content.vb: Public Shared Function ToInt64(value As String, fromBase As Integer) As Long\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: fromBase\n      type: System.Int32\n      description: \"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(String, Int32)\n- uid: System.Convert.ToInt64(System.UInt16)\n  commentId: M:System.Convert.ToInt64(System.UInt16)\n  id: ToInt64(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(UInt16)\n  fullName: System.Convert.ToInt64(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1306\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static long ToInt64(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToInt64(value As UShort) As Long\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(UInt16)\n- uid: System.Convert.ToInt64(System.UInt32)\n  commentId: M:System.Convert.ToInt64(System.UInt32)\n  id: ToInt64(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(UInt32)\n  fullName: System.Convert.ToInt64(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1315\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static long ToInt64(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToInt64(value As UInteger) As Long\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(UInt32)\n- uid: System.Convert.ToInt64(System.UInt64)\n  commentId: M:System.Convert.ToInt64(System.UInt64)\n  id: ToInt64(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(UInt64)\n  fullName: System.Convert.ToInt64(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1320\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static long ToInt64(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToInt64(value As ULong) As Long\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToInt64(UInt64)\n- uid: System.Convert.ToSByte(System.Boolean)\n  commentId: M:System.Convert.ToSByte(System.Boolean)\n  id: ToSByte(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(Boolean)\n  fullName: System.Convert.ToSByte(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 628\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to the equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(bool value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As Boolean) As SByte\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(Boolean)\n- uid: System.Convert.ToSByte(System.Byte)\n  commentId: M:System.Convert.ToSByte(System.Byte)\n  id: ToSByte(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(Byte)\n  fullName: System.Convert.ToSByte(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 645\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(byte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As Byte) As SByte\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(Byte)\n- uid: System.Convert.ToSByte(System.Char)\n  commentId: M:System.Convert.ToSByte(System.Char)\n  id: ToSByte(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(Char)\n  fullName: System.Convert.ToSByte(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 638\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(char value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As Char) As SByte\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(Char)\n- uid: System.Convert.ToSByte(System.Decimal)\n  commentId: M:System.Convert.ToSByte(System.Decimal)\n  id: ToSByte(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(Decimal)\n  fullName: System.Convert.ToSByte(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 704\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to an equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(decimal value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As Decimal) As SByte\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 8-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(Decimal)\n- uid: System.Convert.ToSByte(System.Double)\n  commentId: M:System.Convert.ToSByte(System.Double)\n  id: ToSByte(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(Double)\n  fullName: System.Convert.ToSByte(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 699\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(double value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As Double) As SByte\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 8-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(Double)\n- uid: System.Convert.ToSByte(System.Int16)\n  commentId: M:System.Convert.ToSByte(System.Int16)\n  id: ToSByte(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(Int16)\n  fullName: System.Convert.ToSByte(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 652\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(short value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As Short) As SByte\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(Int16)\n- uid: System.Convert.ToSByte(System.Int32)\n  commentId: M:System.Convert.ToSByte(System.Int32)\n  id: ToSByte(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(Int32)\n  fullName: System.Convert.ToSByte(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 666\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(int value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As Integer) As SByte\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(Int32)\n- uid: System.Convert.ToSByte(System.Int64)\n  commentId: M:System.Convert.ToSByte(System.Int64)\n  id: ToSByte(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(Int64)\n  fullName: System.Convert.ToSByte(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 680\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(long value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As Long) As SByte\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(Int64)\n- uid: System.Convert.ToSByte(System.Object)\n  commentId: M:System.Convert.ToSByte(System.Object)\n  id: ToSByte(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(Object)\n  fullName: System.Convert.ToSByte(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 618\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to an 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(object value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As Object) As SByte\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(Object)\n- uid: System.Convert.ToSByte(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToSByte(System.Object,System.IFormatProvider)\n  id: ToSByte(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(Object, IFormatProvider)\n  fullName: System.Convert.ToSByte(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 623\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(object value, IFormatProvider provider)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As Object, provider As IFormatProvider) As SByte\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(Object, IFormatProvider)\n- uid: System.Convert.ToSByte(System.SByte)\n  commentId: M:System.Convert.ToSByte(System.SByte)\n  id: ToSByte(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(SByte)\n  fullName: System.Convert.ToSByte(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 633\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 8-bit signed integer; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As SByte) As SByte\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to return. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(SByte)\n- uid: System.Convert.ToSByte(System.Single)\n  commentId: M:System.Convert.ToSByte(System.Single)\n  id: ToSByte(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(Single)\n  fullName: System.Convert.ToSByte(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 694\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(float value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As Single) As SByte\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 8-bit signed integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(Single)\n- uid: System.Convert.ToSByte(System.String)\n  commentId: M:System.Convert.ToSByte(System.String)\n  id: ToSByte(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(String)\n  fullName: System.Convert.ToSByte(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 709\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(string value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As String) As SByte\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if value is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.SByte.Parse(System.String)\n    commentId: M:System.SByte.Parse(System.String)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(String)\n- uid: System.Convert.ToSByte(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToSByte(System.String,System.IFormatProvider)\n  id: ToSByte(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(String, IFormatProvider)\n  fullName: System.Convert.ToSByte(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 716\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(string value, IFormatProvider provider)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As String, provider As IFormatProvider) As SByte\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.SByte.Parse(System.String)\n    commentId: M:System.SByte.Parse(System.String)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(String, IFormatProvider)\n- uid: System.Convert.ToSByte(System.String,System.Int32)\n  commentId: M:System.Convert.ToSByte(System.String,System.Int32)\n  id: ToSByte(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(String, Int32)\n  fullName: System.Convert.ToSByte(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2016\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(string value, int fromBase)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As String, fromBase As Integer) As SByte\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: fromBase\n      type: System.Int32\n      description: \"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em>, which represents a non-base 10 signed number, is prefixed with a negative sign.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(String, Int32)\n- uid: System.Convert.ToSByte(System.UInt16)\n  commentId: M:System.Convert.ToSByte(System.UInt16)\n  id: ToSByte(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(UInt16)\n  fullName: System.Convert.ToSByte(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 659\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As UShort) As SByte\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(UInt16)\n- uid: System.Convert.ToSByte(System.UInt32)\n  commentId: M:System.Convert.ToSByte(System.UInt32)\n  id: ToSByte(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(UInt32)\n  fullName: System.Convert.ToSByte(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 673\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As UInteger) As SByte\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(UInt32)\n- uid: System.Convert.ToSByte(System.UInt64)\n  commentId: M:System.Convert.ToSByte(System.UInt64)\n  id: ToSByte(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSByte(UInt64)\n  fullName: System.Convert.ToSByte(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSByte\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 687\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte ToSByte(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSByte(value As ULong) As SByte\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or less than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSByte(UInt64)\n- uid: System.Convert.ToSingle(System.Boolean)\n  commentId: M:System.Convert.ToSingle(System.Boolean)\n  id: ToSingle(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(Boolean)\n  fullName: System.Convert.ToSingle(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1548\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to the equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(bool value)\n    content.vb: Public Shared Function ToSingle(value As Boolean) As Single\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(Boolean)\n- uid: System.Convert.ToSingle(System.Byte)\n  commentId: M:System.Convert.ToSingle(System.Byte)\n  id: ToSingle(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(Byte)\n  fullName: System.Convert.ToSingle(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1488\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(byte value)\n    content.vb: Public Shared Function ToSingle(value As Byte) As Single\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(Byte)\n- uid: System.Convert.ToSingle(System.Decimal)\n  commentId: M:System.Convert.ToSingle(System.Decimal)\n  id: ToSingle(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(Decimal)\n  fullName: System.Convert.ToSingle(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1531\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to an equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(decimal value)\n    content.vb: Public Shared Function ToSingle(value As Decimal) As Single\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n<p>\\n<em>value</em> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(Decimal)\n- uid: System.Convert.ToSingle(System.Double)\n  commentId: M:System.Convert.ToSingle(System.Double)\n  id: ToSingle(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(Double)\n  fullName: System.Convert.ToSingle(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1527\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(double value)\n    content.vb: Public Shared Function ToSingle(value As Double) As Single\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n<p>\\n<em>value</em> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(Double)\n- uid: System.Convert.ToSingle(System.Int16)\n  commentId: M:System.Convert.ToSingle(System.Int16)\n  id: ToSingle(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(Int16)\n  fullName: System.Convert.ToSingle(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1496\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(short value)\n    content.vb: Public Shared Function ToSingle(value As Short) As Single\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(Int16)\n- uid: System.Convert.ToSingle(System.Int32)\n  commentId: M:System.Convert.ToSingle(System.Int32)\n  id: ToSingle(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(Int32)\n  fullName: System.Convert.ToSingle(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1505\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(int value)\n    content.vb: Public Shared Function ToSingle(value As Integer) As Single\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(Int32)\n- uid: System.Convert.ToSingle(System.Int64)\n  commentId: M:System.Convert.ToSingle(System.Int64)\n  id: ToSingle(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(Int64)\n  fullName: System.Convert.ToSingle(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1514\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(long value)\n    content.vb: Public Shared Function ToSingle(value As Long) As Single\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(Int64)\n- uid: System.Convert.ToSingle(System.Object)\n  commentId: M:System.Convert.ToSingle(System.Object)\n  id: ToSingle(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(Object)\n  fullName: System.Convert.ToSingle(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1475\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(object value)\n    content.vb: Public Shared Function ToSingle(value As Object) As Single\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Single.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(Object)\n- uid: System.Convert.ToSingle(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToSingle(System.Object,System.IFormatProvider)\n  id: ToSingle(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(Object, IFormatProvider)\n  fullName: System.Convert.ToSingle(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1479\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(object value, IFormatProvider provider)\n    content.vb: Public Shared Function ToSingle(value As Object, provider As IFormatProvider) As Single\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Single.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(Object, IFormatProvider)\n- uid: System.Convert.ToSingle(System.SByte)\n  commentId: M:System.Convert.ToSingle(System.SByte)\n  id: ToSingle(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(SByte)\n  fullName: System.Convert.ToSingle(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1483\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static float ToSingle(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSingle(value As SByte) As Single\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>An 8-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(SByte)\n- uid: System.Convert.ToSingle(System.Single)\n  commentId: M:System.Convert.ToSingle(System.Single)\n  id: ToSingle(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(Single)\n  fullName: System.Convert.ToSingle(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1523\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified single-precision floating-point number; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(float value)\n    content.vb: Public Shared Function ToSingle(value As Single) As Single\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to return. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(Single)\n- uid: System.Convert.ToSingle(System.String)\n  commentId: M:System.Convert.ToSingle(System.String)\n  id: ToSingle(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(String)\n  fullName: System.Convert.ToSingle(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1535\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(string value)\n    content.vb: Public Shared Function ToSingle(value As String) As Single\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not a number in a valid format.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Single.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(String)\n- uid: System.Convert.ToSingle(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToSingle(System.String,System.IFormatProvider)\n  id: ToSingle(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(String, IFormatProvider)\n  fullName: System.Convert.ToSingle(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1541\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static float ToSingle(string value, IFormatProvider provider)\n    content.vb: Public Shared Function ToSingle(value As String, provider As IFormatProvider) As Single\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not a number in a valid format.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.Single.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(String, IFormatProvider)\n- uid: System.Convert.ToSingle(System.UInt16)\n  commentId: M:System.Convert.ToSingle(System.UInt16)\n  id: ToSingle(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(UInt16)\n  fullName: System.Convert.ToSingle(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1500\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static float ToSingle(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSingle(value As UShort) As Single\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(UInt16)\n- uid: System.Convert.ToSingle(System.UInt32)\n  commentId: M:System.Convert.ToSingle(System.UInt32)\n  id: ToSingle(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(UInt32)\n  fullName: System.Convert.ToSingle(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1509\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static float ToSingle(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSingle(value As UInteger) As Single\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(UInt32)\n- uid: System.Convert.ToSingle(System.UInt64)\n  commentId: M:System.Convert.ToSingle(System.UInt64)\n  id: ToSingle(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(UInt64)\n  fullName: System.Convert.ToSingle(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1518\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static float ToSingle(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToSingle(value As ULong) As Single\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToSingle(UInt64)\n- uid: System.Convert.ToString(System.Boolean)\n  commentId: M:System.Convert.ToString(System.Boolean)\n  id: ToString(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Boolean)\n  fullName: System.Convert.ToString(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1835\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(bool value)\n    content.vb: Public Shared Function ToString(value As Boolean) As String\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Boolean)\n- uid: System.Convert.ToString(System.Boolean,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Boolean,System.IFormatProvider)\n  id: ToString(System.Boolean,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Boolean, IFormatProvider)\n  fullName: System.Convert.ToString(System.Boolean, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1840\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(bool value, IFormatProvider provider)\n    content.vb: Public Shared Function ToString(value As Boolean, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An instance of an object. This parameter is ignored.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Boolean, IFormatProvider)\n- uid: System.Convert.ToString(System.Byte)\n  commentId: M:System.Convert.ToString(System.Byte)\n  id: ToString(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Byte)\n  fullName: System.Convert.ToString(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1867\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(byte value)\n    content.vb: Public Shared Function ToString(value As Byte) As String\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Byte)\n- uid: System.Convert.ToString(System.Byte,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Byte,System.IFormatProvider)\n  id: ToString(System.Byte,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Byte, IFormatProvider)\n  fullName: System.Convert.ToString(System.Byte, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1872\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static string ToString(byte value, IFormatProvider provider)\n    content.vb: Public Shared Function ToString(value As Byte, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Byte, IFormatProvider)\n- uid: System.Convert.ToString(System.Byte,System.Int32)\n  commentId: M:System.Convert.ToString(System.Byte,System.Int32)\n  id: ToString(System.Byte,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Byte, Int32)\n  fullName: System.Convert.ToString(System.Byte, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2116\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string ToString(byte value, int toBase)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ToString(value As Byte, toBase As Integer) As String\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    - id: toBase\n      type: System.Int32\n      description: \"\\n<p>The base of the return value, which must be 2, 8, 10, or 16. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em> in base <em>toBase</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>toBase</em> is not 2, 8, 10, or 16. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Byte, Int32)\n- uid: System.Convert.ToString(System.Char)\n  commentId: M:System.Convert.ToString(System.Char)\n  id: ToString(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Char)\n  fullName: System.Convert.ToString(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1845\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified Unicode character to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(char value)\n    content.vb: Public Shared Function ToString(value As Char) As String\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Char)\n- uid: System.Convert.ToString(System.Char,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Char,System.IFormatProvider)\n  id: ToString(System.Char,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Char, IFormatProvider)\n  fullName: System.Convert.ToString(System.Char, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1850\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static string ToString(char value, IFormatProvider provider)\n    content.vb: Public Shared Function ToString(value As Char, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. This parameter is ignored. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Char, IFormatProvider)\n- uid: System.Convert.ToString(System.DateTime)\n  commentId: M:System.Convert.ToString(System.DateTime)\n  id: ToString(System.DateTime)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(DateTime)\n  fullName: System.Convert.ToString(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1973\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(DateTime value)\n    content.vb: Public Shared Function ToString(value As Date) As String\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: \"\\n<p>The date and time value to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(DateTime)\n- uid: System.Convert.ToString(System.DateTime,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.DateTime,System.IFormatProvider)\n  id: ToString(System.DateTime,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(DateTime, IFormatProvider)\n  fullName: System.Convert.ToString(System.DateTime, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1978\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to its equivalent string representation, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static string ToString(DateTime value, IFormatProvider provider)\n    content.vb: Public Shared Function ToString(value As Date, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.DateTime\n      description: \"\\n<p>The date and time value to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(DateTime, IFormatProvider)\n- uid: System.Convert.ToString(System.Decimal)\n  commentId: M:System.Convert.ToString(System.Decimal)\n  id: ToString(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Decimal)\n  fullName: System.Convert.ToString(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1963\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(decimal value)\n    content.vb: Public Shared Function ToString(value As Decimal) As String\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Decimal)\n- uid: System.Convert.ToString(System.Decimal,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Decimal,System.IFormatProvider)\n  id: ToString(System.Decimal,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Decimal, IFormatProvider)\n  fullName: System.Convert.ToString(System.Decimal, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1968\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static string ToString(decimal value, IFormatProvider provider)\n    content.vb: Public Shared Function ToString(value As Decimal, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Decimal, IFormatProvider)\n- uid: System.Convert.ToString(System.Double)\n  commentId: M:System.Convert.ToString(System.Double)\n  id: ToString(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Double)\n  fullName: System.Convert.ToString(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1953\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(double value)\n    content.vb: Public Shared Function ToString(value As Double) As String\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Double)\n- uid: System.Convert.ToString(System.Double,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Double,System.IFormatProvider)\n  id: ToString(System.Double,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Double, IFormatProvider)\n  fullName: System.Convert.ToString(System.Double, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1958\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(double value, IFormatProvider provider)\n    content.vb: Public Shared Function ToString(value As Double, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Double, IFormatProvider)\n- uid: System.Convert.ToString(System.Int16)\n  commentId: M:System.Convert.ToString(System.Int16)\n  id: ToString(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int16)\n  fullName: System.Convert.ToString(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1877\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(short value)\n    content.vb: Public Shared Function ToString(value As Short) As String\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Int16)\n- uid: System.Convert.ToString(System.Int16,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Int16,System.IFormatProvider)\n  id: ToString(System.Int16,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int16, IFormatProvider)\n  fullName: System.Convert.ToString(System.Int16, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1882\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static string ToString(short value, IFormatProvider provider)\n    content.vb: Public Shared Function ToString(value As Short, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Int16, IFormatProvider)\n- uid: System.Convert.ToString(System.Int16,System.Int32)\n  commentId: M:System.Convert.ToString(System.Int16,System.Int32)\n  id: ToString(System.Int16,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int16, Int32)\n  fullName: System.Convert.ToString(System.Int16, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2126\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string ToString(short value, int toBase)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ToString(value As Short, toBase As Integer) As String\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    - id: toBase\n      type: System.Int32\n      description: \"\\n<p>The base of the return value, which must be 2, 8, 10, or 16. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em> in base <em>toBase</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>toBase</em> is not 2, 8, 10, or 16. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Int16, Int32)\n- uid: System.Convert.ToString(System.Int32)\n  commentId: M:System.Convert.ToString(System.Int32)\n  id: ToString(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int32)\n  fullName: System.Convert.ToString(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1899\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(int value)\n    content.vb: Public Shared Function ToString(value As Integer) As String\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Int32)\n- uid: System.Convert.ToString(System.Int32,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Int32,System.IFormatProvider)\n  id: ToString(System.Int32,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int32, IFormatProvider)\n  fullName: System.Convert.ToString(System.Int32, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1904\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static string ToString(int value, IFormatProvider provider)\n    content.vb: Public Shared Function ToString(value As Integer, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Int32, IFormatProvider)\n- uid: System.Convert.ToString(System.Int32,System.Int32)\n  commentId: M:System.Convert.ToString(System.Int32,System.Int32)\n  id: ToString(System.Int32,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int32, Int32)\n  fullName: System.Convert.ToString(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2136\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string ToString(int value, int toBase)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ToString(value As Integer, toBase As Integer) As String\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    - id: toBase\n      type: System.Int32\n      description: \"\\n<p>The base of the return value, which must be 2, 8, 10, or 16. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em> in base <em>toBase</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>toBase</em> is not 2, 8, 10, or 16. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Int32, Int32)\n- uid: System.Convert.ToString(System.Int64)\n  commentId: M:System.Convert.ToString(System.Int64)\n  id: ToString(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int64)\n  fullName: System.Convert.ToString(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1921\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(long value)\n    content.vb: Public Shared Function ToString(value As Long) As String\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Int64)\n- uid: System.Convert.ToString(System.Int64,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Int64,System.IFormatProvider)\n  id: ToString(System.Int64,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int64, IFormatProvider)\n  fullName: System.Convert.ToString(System.Int64, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1926\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static string ToString(long value, IFormatProvider provider)\n    content.vb: Public Shared Function ToString(value As Long, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Int64, IFormatProvider)\n- uid: System.Convert.ToString(System.Int64,System.Int32)\n  commentId: M:System.Convert.ToString(System.Int64,System.Int32)\n  id: ToString(System.Int64,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int64, Int32)\n  fullName: System.Convert.ToString(System.Int64, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2146\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string ToString(long value, int toBase)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ToString(value As Long, toBase As Integer) As String\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    - id: toBase\n      type: System.Int32\n      description: \"\\n<p>The base of the return value, which must be 2, 8, 10, or 16. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em> in base <em>toBase</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>toBase</em> is not 2, 8, 10, or 16. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Int64, Int32)\n- uid: System.Convert.ToString(System.Object)\n  commentId: M:System.Convert.ToString(System.Object)\n  id: ToString(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Object)\n  fullName: System.Convert.ToString(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1821\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(object value)\n    content.vb: Public Shared Function ToString(value As Object) As String\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that supplies the value to convert, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>, or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>value</em> is an object whose value is <strong>null</strong>. If <em>value</em> is <strong>null</strong>, the method returns <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Object)\n- uid: System.Convert.ToString(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Object,System.IFormatProvider)\n  id: ToString(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Object, IFormatProvider)\n  fullName: System.Convert.ToString(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1825\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static string ToString(object value, IFormatProvider provider)\n    content.vb: Public Shared Function ToString(value As Object, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that supplies the value to convert, or <strong>null</strong>. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>, or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>value</em> is an object whose value is <strong>null</strong>. If <em>value</em> is <strong>null</strong>, the method returns <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Object, IFormatProvider)\n- uid: System.Convert.ToString(System.SByte)\n  commentId: M:System.Convert.ToString(System.SByte)\n  id: ToString(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(SByte)\n  fullName: System.Convert.ToString(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1855\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static string ToString(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToString(value As SByte) As String\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(SByte)\n- uid: System.Convert.ToString(System.SByte,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.SByte,System.IFormatProvider)\n  id: ToString(System.SByte,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(SByte, IFormatProvider)\n  fullName: System.Convert.ToString(System.SByte, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1861\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static string ToString(sbyte value, IFormatProvider provider)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToString(value As SByte, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(SByte, IFormatProvider)\n- uid: System.Convert.ToString(System.Single)\n  commentId: M:System.Convert.ToString(System.Single)\n  id: ToString(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Single)\n  fullName: System.Convert.ToString(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1943\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(float value)\n    content.vb: Public Shared Function ToString(value As Single) As String\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Single)\n- uid: System.Convert.ToString(System.Single,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.Single,System.IFormatProvider)\n  id: ToString(System.Single,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(Single, IFormatProvider)\n  fullName: System.Convert.ToString(System.Single, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1948\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public static string ToString(float value, IFormatProvider provider)\n    content.vb: Public Shared Function ToString(value As Single, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(Single, IFormatProvider)\n- uid: System.Convert.ToString(System.UInt16)\n  commentId: M:System.Convert.ToString(System.UInt16)\n  id: ToString(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(UInt16)\n  fullName: System.Convert.ToString(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1887\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static string ToString(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToString(value As UShort) As String\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(UInt16)\n- uid: System.Convert.ToString(System.UInt16,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.UInt16,System.IFormatProvider)\n  id: ToString(System.UInt16,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(UInt16, IFormatProvider)\n  fullName: System.Convert.ToString(System.UInt16, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1893\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static string ToString(ushort value, IFormatProvider provider)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToString(value As UShort, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(UInt16, IFormatProvider)\n- uid: System.Convert.ToString(System.UInt32)\n  commentId: M:System.Convert.ToString(System.UInt32)\n  id: ToString(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(UInt32)\n  fullName: System.Convert.ToString(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1909\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static string ToString(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToString(value As UInteger) As String\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(UInt32)\n- uid: System.Convert.ToString(System.UInt32,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.UInt32,System.IFormatProvider)\n  id: ToString(System.UInt32,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(UInt32, IFormatProvider)\n  fullName: System.Convert.ToString(System.UInt32, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1915\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static string ToString(uint value, IFormatProvider provider)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToString(value As UInteger, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(UInt32, IFormatProvider)\n- uid: System.Convert.ToString(System.UInt64)\n  commentId: M:System.Convert.ToString(System.UInt64)\n  id: ToString(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(UInt64)\n  fullName: System.Convert.ToString(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1931\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static string ToString(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToString(value As ULong) As String\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(UInt64)\n- uid: System.Convert.ToString(System.UInt64,System.IFormatProvider)\n  commentId: M:System.Convert.ToString(System.UInt64,System.IFormatProvider)\n  id: ToString(System.UInt64,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToString(UInt64, IFormatProvider)\n  fullName: System.Convert.ToString(System.UInt64, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1937\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static string ToString(ulong value, IFormatProvider provider)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToString(value As ULong, provider As IFormatProvider) As String\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToString(UInt64, IFormatProvider)\n- uid: System.Convert.ToUInt16(System.Boolean)\n  commentId: M:System.Convert.ToUInt16(System.Boolean)\n  id: ToUInt16(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Boolean)\n  fullName: System.Convert.ToUInt16(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 945\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to the equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(bool value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Boolean) As UShort\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(Boolean)\n- uid: System.Convert.ToUInt16(System.Byte)\n  commentId: M:System.Convert.ToUInt16(System.Byte)\n  id: ToUInt16(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Byte)\n  fullName: System.Convert.ToUInt16(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 962\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(byte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Byte) As UShort\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(Byte)\n- uid: System.Convert.ToUInt16(System.Char)\n  commentId: M:System.Convert.ToUInt16(System.Char)\n  id: ToUInt16(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Char)\n  fullName: System.Convert.ToUInt16(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 950\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(char value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Char) As UShort\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(Char)\n- uid: System.Convert.ToUInt16(System.Decimal)\n  commentId: M:System.Convert.ToUInt16(System.Decimal)\n  id: ToUInt16(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Decimal)\n  fullName: System.Convert.ToUInt16(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1018\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(decimal value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Decimal) As UShort\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 16-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero or greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(Decimal)\n- uid: System.Convert.ToUInt16(System.Double)\n  commentId: M:System.Convert.ToUInt16(System.Double)\n  id: ToUInt16(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Double)\n  fullName: System.Convert.ToUInt16(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1013\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(double value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Double) As UShort\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 16-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero or greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(Double)\n- uid: System.Convert.ToUInt16(System.Int16)\n  commentId: M:System.Convert.ToUInt16(System.Int16)\n  id: ToUInt16(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Int16)\n  fullName: System.Convert.ToUInt16(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 967\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(short value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Short) As UShort\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(Int16)\n- uid: System.Convert.ToUInt16(System.Int32)\n  commentId: M:System.Convert.ToUInt16(System.Int32)\n  id: ToUInt16(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Int32)\n  fullName: System.Convert.ToUInt16(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 974\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(int value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Integer) As UShort\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero or greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(Int32)\n- uid: System.Convert.ToUInt16(System.Int64)\n  commentId: M:System.Convert.ToUInt16(System.Int64)\n  id: ToUInt16(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Int64)\n  fullName: System.Convert.ToUInt16(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 994\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(long value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Long) As UShort\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero or greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(Int64)\n- uid: System.Convert.ToUInt16(System.Object)\n  commentId: M:System.Convert.ToUInt16(System.Object)\n  id: ToUInt16(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Object)\n  fullName: System.Convert.ToUInt16(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 934\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(object value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Object) As UShort\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the  <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(Object)\n- uid: System.Convert.ToUInt16(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)\n  id: ToUInt16(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Object, IFormatProvider)\n  fullName: System.Convert.ToUInt16(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 939\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(object value, IFormatProvider provider)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Object, provider As IFormatProvider) As UShort\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the  <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(Object, IFormatProvider)\n- uid: System.Convert.ToUInt16(System.SByte)\n  commentId: M:System.Convert.ToUInt16(System.SByte)\n  id: ToUInt16(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(SByte)\n  fullName: System.Convert.ToUInt16(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 955\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As SByte) As UShort\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(SByte)\n- uid: System.Convert.ToUInt16(System.Single)\n  commentId: M:System.Convert.ToUInt16(System.Single)\n  id: ToUInt16(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Single)\n  fullName: System.Convert.ToUInt16(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1008\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(float value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Single) As UShort\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 16-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero or greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(Single)\n- uid: System.Convert.ToUInt16(System.String)\n  commentId: M:System.Convert.ToUInt16(System.String)\n  id: ToUInt16(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(String)\n  fullName: System.Convert.ToUInt16(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1023\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(string value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As String) As UShort\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(String)\n- uid: System.Convert.ToUInt16(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToUInt16(System.String,System.IFormatProvider)\n  id: ToUInt16(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(String, IFormatProvider)\n  fullName: System.Convert.ToUInt16(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1030\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(string value, IFormatProvider provider)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As String, provider As IFormatProvider) As UShort\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(String, IFormatProvider)\n- uid: System.Convert.ToUInt16(System.String,System.Int32)\n  commentId: M:System.Convert.ToUInt16(System.String,System.Int32)\n  id: ToUInt16(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(String, Int32)\n  fullName: System.Convert.ToUInt16(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2053\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(string value, int fromBase)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As String, fromBase As Integer) As UShort\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: fromBase\n      type: System.Int32\n      description: \"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(String, Int32)\n- uid: System.Convert.ToUInt16(System.UInt16)\n  commentId: M:System.Convert.ToUInt16(System.UInt16)\n  id: ToUInt16(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(UInt16)\n  fullName: System.Convert.ToUInt16(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 981\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As UShort) As UShort\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to return. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(UInt16)\n- uid: System.Convert.ToUInt16(System.UInt32)\n  commentId: M:System.Convert.ToUInt16(System.UInt32)\n  id: ToUInt16(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(UInt32)\n  fullName: System.Convert.ToUInt16(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 986\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As UInteger) As UShort\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(UInt32)\n- uid: System.Convert.ToUInt16(System.UInt64)\n  commentId: M:System.Convert.ToUInt16(System.UInt64)\n  id: ToUInt16(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(UInt64)\n  fullName: System.Convert.ToUInt16(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1001\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As ULong) As UShort\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.UInt16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt16(UInt64)\n- uid: System.Convert.ToUInt32(System.Boolean)\n  commentId: M:System.Convert.ToUInt32(System.Boolean)\n  id: ToUInt32(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Boolean)\n  fullName: System.Convert.ToUInt32(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1170\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to the equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(bool value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As Boolean) As UInteger\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(Boolean)\n- uid: System.Convert.ToUInt32(System.Byte)\n  commentId: M:System.Convert.ToUInt32(System.Byte)\n  id: ToUInt32(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Byte)\n  fullName: System.Convert.ToUInt32(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1187\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(byte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As Byte) As UInteger\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(Byte)\n- uid: System.Convert.ToUInt32(System.Char)\n  commentId: M:System.Convert.ToUInt32(System.Char)\n  id: ToUInt32(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Char)\n  fullName: System.Convert.ToUInt32(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1175\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(char value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As Char) As UInteger\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(Char)\n- uid: System.Convert.ToUInt32(System.Decimal)\n  commentId: M:System.Convert.ToUInt32(System.Decimal)\n  id: ToUInt32(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Decimal)\n  fullName: System.Convert.ToUInt32(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1246\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(decimal value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As Decimal) As UInteger\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 32-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(Decimal)\n- uid: System.Convert.ToUInt32(System.Double)\n  commentId: M:System.Convert.ToUInt32(System.Double)\n  id: ToUInt32(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Double)\n  fullName: System.Convert.ToUInt32(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1235\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(double value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As Double) As UInteger\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 32-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(Double)\n- uid: System.Convert.ToUInt32(System.Int16)\n  commentId: M:System.Convert.ToUInt32(System.Int16)\n  id: ToUInt32(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Int16)\n  fullName: System.Convert.ToUInt32(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1192\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(short value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As Short) As UInteger\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(Int16)\n- uid: System.Convert.ToUInt32(System.Int32)\n  commentId: M:System.Convert.ToUInt32(System.Int32)\n  id: ToUInt32(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Int32)\n  fullName: System.Convert.ToUInt32(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1204\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(int value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As Integer) As UInteger\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(Int32)\n- uid: System.Convert.ToUInt32(System.Int64)\n  commentId: M:System.Convert.ToUInt32(System.Int64)\n  id: ToUInt32(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Int64)\n  fullName: System.Convert.ToUInt32(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1216\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(long value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As Long) As UInteger\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(Int64)\n- uid: System.Convert.ToUInt32(System.Object)\n  commentId: M:System.Convert.ToUInt32(System.Object)\n  id: ToUInt32(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Object)\n  fullName: System.Convert.ToUInt32(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1159\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(object value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As Object) As UInteger\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(Object)\n- uid: System.Convert.ToUInt32(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)\n  id: ToUInt32(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Object, IFormatProvider)\n  fullName: System.Convert.ToUInt32(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1164\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(object value, IFormatProvider provider)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As Object, provider As IFormatProvider) As UInteger\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(Object, IFormatProvider)\n- uid: System.Convert.ToUInt32(System.SByte)\n  commentId: M:System.Convert.ToUInt32(System.SByte)\n  id: ToUInt32(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(SByte)\n  fullName: System.Convert.ToUInt32(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1180\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As SByte) As UInteger\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(SByte)\n- uid: System.Convert.ToUInt32(System.Single)\n  commentId: M:System.Convert.ToUInt32(System.Single)\n  id: ToUInt32(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Single)\n  fullName: System.Convert.ToUInt32(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1230\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(float value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As Single) As UInteger\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 32-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(Single)\n- uid: System.Convert.ToUInt32(System.String)\n  commentId: M:System.Convert.ToUInt32(System.String)\n  id: ToUInt32(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(String)\n  fullName: System.Convert.ToUInt32(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1251\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(string value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As String) As UInteger\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(String)\n- uid: System.Convert.ToUInt32(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToUInt32(System.String,System.IFormatProvider)\n  id: ToUInt32(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(String, IFormatProvider)\n  fullName: System.Convert.ToUInt32(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1258\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(string value, IFormatProvider provider)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As String, provider As IFormatProvider) As UInteger\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(String, IFormatProvider)\n- uid: System.Convert.ToUInt32(System.String,System.Int32)\n  commentId: M:System.Convert.ToUInt32(System.String,System.Int32)\n  id: ToUInt32(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(String, Int32)\n  fullName: System.Convert.ToUInt32(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2081\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(string value, int fromBase)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As String, fromBase As Integer) As UInteger\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: fromBase\n      type: System.Int32\n      description: \"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(String, Int32)\n- uid: System.Convert.ToUInt32(System.UInt16)\n  commentId: M:System.Convert.ToUInt32(System.UInt16)\n  id: ToUInt32(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(UInt16)\n  fullName: System.Convert.ToUInt32(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1199\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As UShort) As UInteger\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(UInt16)\n- uid: System.Convert.ToUInt32(System.UInt32)\n  commentId: M:System.Convert.ToUInt32(System.UInt32)\n  id: ToUInt32(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(UInt32)\n  fullName: System.Convert.ToUInt32(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1211\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As UInteger) As UInteger\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to return. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(UInt32)\n- uid: System.Convert.ToUInt32(System.UInt64)\n  commentId: M:System.Convert.ToUInt32(System.UInt64)\n  id: ToUInt32(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(UInt64)\n  fullName: System.Convert.ToUInt32(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1223\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As ULong) As UInteger\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is greater than <xref href=\\\"System.UInt32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt32(UInt64)\n- uid: System.Convert.ToUInt64(System.Boolean)\n  commentId: M:System.Convert.ToUInt64(System.Boolean)\n  id: ToUInt64(System.Boolean)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Boolean)\n  fullName: System.Convert.ToUInt64(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1376\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified Boolean value to the equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(bool value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As Boolean) As ULong\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>The number 1 if <em>value</em> is <strong>true</strong>; otherwise, 0.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(Boolean)\n- uid: System.Convert.ToUInt64(System.Byte)\n  commentId: M:System.Convert.ToUInt64(System.Byte)\n  id: ToUInt64(System.Byte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Byte)\n  fullName: System.Convert.ToUInt64(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1394\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(byte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As Byte) As ULong\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(Byte)\n- uid: System.Convert.ToUInt64(System.Char)\n  commentId: M:System.Convert.ToUInt64(System.Char)\n  id: ToUInt64(System.Char)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Char)\n  fullName: System.Convert.ToUInt64(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1381\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(char value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As Char) As ULong\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The Unicode character to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(Char)\n- uid: System.Convert.ToUInt64(System.Decimal)\n  commentId: M:System.Convert.ToUInt64(System.Decimal)\n  id: ToUInt64(System.Decimal)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Decimal)\n  fullName: System.Convert.ToUInt64(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1445\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(decimal value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As Decimal) As ULong\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The decimal number to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 64-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero or greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(Decimal)\n- uid: System.Convert.ToUInt64(System.Double)\n  commentId: M:System.Convert.ToUInt64(System.Double)\n  id: ToUInt64(System.Double)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Double)\n  fullName: System.Convert.ToUInt64(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1440\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(double value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As Double) As ULong\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The double-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 64-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero or greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(Double)\n- uid: System.Convert.ToUInt64(System.Int16)\n  commentId: M:System.Convert.ToUInt64(System.Int16)\n  id: ToUInt64(System.Int16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Int16)\n  fullName: System.Convert.ToUInt64(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1399\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(short value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As Short) As ULong\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(Int16)\n- uid: System.Convert.ToUInt64(System.Int32)\n  commentId: M:System.Convert.ToUInt64(System.Int32)\n  id: ToUInt64(System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Int32)\n  fullName: System.Convert.ToUInt64(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1411\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(int value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As Integer) As ULong\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(Int32)\n- uid: System.Convert.ToUInt64(System.Int64)\n  commentId: M:System.Convert.ToUInt64(System.Int64)\n  id: ToUInt64(System.Int64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Int64)\n  fullName: System.Convert.ToUInt64(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1423\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(long value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As Long) As ULong\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(Int64)\n- uid: System.Convert.ToUInt64(System.Object)\n  commentId: M:System.Convert.ToUInt64(System.Object)\n  id: ToUInt64(System.Object)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Object)\n  fullName: System.Convert.ToUInt64(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1366\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(object value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As Object) As ULong\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(Object)\n- uid: System.Convert.ToUInt64(System.Object,System.IFormatProvider)\n  commentId: M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)\n  id: ToUInt64(System.Object,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Object, IFormatProvider)\n  fullName: System.Convert.ToUInt64(System.Object, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1371\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(object value, IFormatProvider provider)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As Object, provider As IFormatProvider) As ULong\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object that implements the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>, or zero if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> is not in an appropriate format.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>value</em> does not implement the <xref href=\\\"System.IConvertible\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n<p>-or-</p>\\n<p>The conversion is not supported.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(Object, IFormatProvider)\n- uid: System.Convert.ToUInt64(System.SByte)\n  commentId: M:System.Convert.ToUInt64(System.SByte)\n  id: ToUInt64(System.SByte)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(SByte)\n  fullName: System.Convert.ToUInt64(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1387\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As SByte) As ULong\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The 8-bit signed integer to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(SByte)\n- uid: System.Convert.ToUInt64(System.Single)\n  commentId: M:System.Convert.ToUInt64(System.Single)\n  id: ToUInt64(System.Single)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Single)\n  fullName: System.Convert.ToUInt64(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1435\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(float value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As Single) As ULong\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The single-precision floating-point number to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>\\n<em>value</em>, rounded to the nearest 64-bit unsigned integer. If <em>value</em> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is less than zero or greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(Single)\n- uid: System.Convert.ToUInt64(System.String)\n  commentId: M:System.Convert.ToUInt64(System.String)\n  id: ToUInt64(System.String)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(String)\n  fullName: System.Convert.ToUInt64(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1450\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(string value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As String) As ULong\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit signed integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(String)\n- uid: System.Convert.ToUInt64(System.String,System.IFormatProvider)\n  commentId: M:System.Convert.ToUInt64(System.String,System.IFormatProvider)\n  id: ToUInt64(System.String,System.IFormatProvider)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(String, IFormatProvider)\n  fullName: System.Convert.ToUInt64(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1457\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(string value, IFormatProvider provider)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As String, provider As IFormatProvider) As ULong\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> does not consist of an optional sign followed by a sequence of digits (0 through 9). </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(String, IFormatProvider)\n- uid: System.Convert.ToUInt64(System.String,System.Int32)\n  commentId: M:System.Convert.ToUInt64(System.String,System.Int32)\n  id: ToUInt64(System.String,System.Int32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(String, Int32)\n  fullName: System.Convert.ToUInt64(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 2106\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(string value, int fromBase)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As String, fromBase As Integer) As ULong\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string that contains the number to convert. </p>\\n\"\n    - id: fromBase\n      type: System.Int32\n      description: \"\\n<p>The base of the number in <em>value</em>, which must be 2, 8, 10, or 16. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer that is equivalent to the number in <em>value</em>, or 0 (zero) if <em>value</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>fromBase</em> is not 2, 8, 10, or 16. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>value</em> is <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>value</em> contains a character that is not a valid digit in the base specified by <em>fromBase</em>. The exception message indicates that there are no digits to convert if the first character in <em>value</em> is invalid; otherwise, the message indicates that <em>value</em> contains invalid trailing characters.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em>, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> represents a number that is less than <xref href=\\\"System.UInt64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.UInt64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(String, Int32)\n- uid: System.Convert.ToUInt64(System.UInt16)\n  commentId: M:System.Convert.ToUInt64(System.UInt16)\n  id: ToUInt64(System.UInt16)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(UInt16)\n  fullName: System.Convert.ToUInt64(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1406\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As UShort) As ULong\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The 16-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(UInt16)\n- uid: System.Convert.ToUInt64(System.UInt32)\n  commentId: M:System.Convert.ToUInt64(System.UInt32)\n  id: ToUInt64(System.UInt32)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(UInt32)\n  fullName: System.Convert.ToUInt64(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1418\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As UInteger) As ULong\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The 32-bit unsigned integer to convert. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer that is equivalent to <em>value</em>.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(UInt32)\n- uid: System.Convert.ToUInt64(System.UInt64)\n  commentId: M:System.Convert.ToUInt64(System.UInt64)\n  id: ToUInt64(System.UInt64)\n  parent: System.Convert\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(UInt64)\n  fullName: System.Convert.ToUInt64(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Convert.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/Convert.cs\n    startLine: 1430\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As ULong) As ULong\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The 64-bit unsigned integer to return. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>\\n<em>value</em> is returned unchanged.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Convert.ToUInt64(UInt64)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.TypeCode\n  parent: System\n  isExternal: false\n  name: TypeCode\n  fullName: System.TypeCode\n  nameWithType: TypeCode\n  commentId: T:System.TypeCode\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}