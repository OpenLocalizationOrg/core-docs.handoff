{"nodes":[{"pos":[767,793],"content":"GenericParameterAttributes","needQuote":true,"nodes":[{"content":"GenericParameterAttributes","pos":[0,26]}]},{"pos":[1982,1995],"content":"Contravariant","needQuote":true,"nodes":[{"content":"Contravariant","pos":[0,13]}]},{"pos":[3081,3090],"content":"Covariant","needQuote":true,"nodes":[{"content":"Covariant","pos":[0,9]}]},{"pos":[4280,4308],"content":"DefaultConstructorConstraint","needQuote":true,"nodes":[{"content":"DefaultConstructorConstraint","pos":[0,28]}]},{"pos":[5411,5415],"content":"None","needQuote":true,"nodes":[{"content":"None","pos":[0,4]}]},{"pos":[6426,6456],"content":"NotNullableValueTypeConstraint","needQuote":true,"nodes":[{"content":"NotNullableValueTypeConstraint","pos":[0,30]}]},{"pos":[7627,7650],"content":"ReferenceTypeConstraint","needQuote":true,"nodes":[{"content":"ReferenceTypeConstraint","pos":[0,23]}]},{"pos":[8771,8792],"content":"SpecialConstraintMask","needQuote":true,"nodes":[{"content":"SpecialConstraintMask","pos":[0,21]}]},{"pos":[10330,10342],"content":"VarianceMask","needQuote":true,"nodes":[{"content":"VarianceMask","pos":[0,12]}]},{"pos":[11484,11501],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[11707,11733],"content":"GenericParameterAttributes","needQuote":true,"nodes":[{"content":"GenericParameterAttributes","pos":[0,26]}]}],"content":"items:\n- uid: System.Reflection.GenericParameterAttributes\n  commentId: T:System.Reflection.GenericParameterAttributes\n  id: GenericParameterAttributes\n  parent: System.Reflection\n  children:\n  - System.Reflection.GenericParameterAttributes.Contravariant\n  - System.Reflection.GenericParameterAttributes.Covariant\n  - System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint\n  - System.Reflection.GenericParameterAttributes.None\n  - System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint\n  - System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint\n  - System.Reflection.GenericParameterAttributes.SpecialConstraintMask\n  - System.Reflection.GenericParameterAttributes.VarianceMask\n  langs:\n  - csharp\n  - vb\n  name: GenericParameterAttributes\n  fullName: System.Reflection.GenericParameterAttributes\n  type: Enum\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GenericParameterAttributes\n    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n    startLine: 8\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Describes the constraints on a generic type parameter of a generic type or method.</p>\\n\"\n  syntax:\n    content: >-\n      [Flags]\n\n      public enum GenericParameterAttributes\n    content.vb: >-\n      <Flags>\n\n      Public Enum GenericParameterAttributes\n  attributes:\n  - type: System.FlagsAttribute\n    ctor: System.FlagsAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - enum\n  modifiers.vb:\n  - Public\n  - Enum\n  nameWithType: GenericParameterAttributes\n- uid: System.Reflection.GenericParameterAttributes.Contravariant\n  commentId: F:System.Reflection.GenericParameterAttributes.Contravariant\n  id: Contravariant\n  parent: System.Reflection.GenericParameterAttributes\n  langs:\n  - csharp\n  - vb\n  name: Contravariant\n  fullName: System.Reflection.GenericParameterAttributes.Contravariant\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Contravariant\n    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n    startLine: 14\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>The generic type parameter is contravariant. A contravariant type parameter can appear as a parameter type in method signatures. </p>\\n\"\n  syntax:\n    content: Contravariant = 2\n    return:\n      type: System.Reflection.GenericParameterAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: GenericParameterAttributes.Contravariant\n- uid: System.Reflection.GenericParameterAttributes.Covariant\n  commentId: F:System.Reflection.GenericParameterAttributes.Covariant\n  id: Covariant\n  parent: System.Reflection.GenericParameterAttributes\n  langs:\n  - csharp\n  - vb\n  name: Covariant\n  fullName: System.Reflection.GenericParameterAttributes.Covariant\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Covariant\n    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n    startLine: 13\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>The generic type parameter is covariant. A covariant type parameter can appear as the result type of a method, the type of a read-only field, a declared base type, or an implemented interface.</p>\\n\"\n  syntax:\n    content: Covariant = 1\n    return:\n      type: System.Reflection.GenericParameterAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: GenericParameterAttributes.Covariant\n- uid: System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint\n  commentId: F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint\n  id: DefaultConstructorConstraint\n  parent: System.Reflection.GenericParameterAttributes\n  langs:\n  - csharp\n  - vb\n  name: DefaultConstructorConstraint\n  fullName: System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DefaultConstructorConstraint\n    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n    startLine: 18\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>A type can be substituted for the generic type parameter only if it has a parameterless constructor.</p>\\n\"\n  syntax:\n    content: DefaultConstructorConstraint = 16\n    return:\n      type: System.Reflection.GenericParameterAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: GenericParameterAttributes.DefaultConstructorConstraint\n- uid: System.Reflection.GenericParameterAttributes.None\n  commentId: F:System.Reflection.GenericParameterAttributes.None\n  id: None\n  parent: System.Reflection.GenericParameterAttributes\n  langs:\n  - csharp\n  - vb\n  name: None\n  fullName: System.Reflection.GenericParameterAttributes.None\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: None\n    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n    startLine: 11\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>There are no special flags.</p>\\n\"\n  syntax:\n    content: None = 0\n    return:\n      type: System.Reflection.GenericParameterAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: GenericParameterAttributes.None\n- uid: System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint\n  commentId: F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint\n  id: NotNullableValueTypeConstraint\n  parent: System.Reflection.GenericParameterAttributes\n  langs:\n  - csharp\n  - vb\n  name: NotNullableValueTypeConstraint\n  fullName: System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NotNullableValueTypeConstraint\n    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n    startLine: 17\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>A type can be substituted for the generic type parameter only if it is a value type and is not nullable.</p>\\n\"\n  syntax:\n    content: NotNullableValueTypeConstraint = 8\n    return:\n      type: System.Reflection.GenericParameterAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: GenericParameterAttributes.NotNullableValueTypeConstraint\n- uid: System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint\n  commentId: F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint\n  id: ReferenceTypeConstraint\n  parent: System.Reflection.GenericParameterAttributes\n  langs:\n  - csharp\n  - vb\n  name: ReferenceTypeConstraint\n  fullName: System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReferenceTypeConstraint\n    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n    startLine: 16\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>A type can be substituted for the generic type parameter only if it is a reference type.</p>\\n\"\n  syntax:\n    content: ReferenceTypeConstraint = 4\n    return:\n      type: System.Reflection.GenericParameterAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: GenericParameterAttributes.ReferenceTypeConstraint\n- uid: System.Reflection.GenericParameterAttributes.SpecialConstraintMask\n  commentId: F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask\n  id: SpecialConstraintMask\n  parent: System.Reflection.GenericParameterAttributes\n  langs:\n  - csharp\n  - vb\n  name: SpecialConstraintMask\n  fullName: System.Reflection.GenericParameterAttributes.SpecialConstraintMask\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SpecialConstraintMask\n    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n    startLine: 15\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Selects the combination of all special constraint flags. This value is the result of using logical OR to combine the following flags: <xref href=\\\"System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: SpecialConstraintMask = 28\n    return:\n      type: System.Reflection.GenericParameterAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: GenericParameterAttributes.SpecialConstraintMask\n- uid: System.Reflection.GenericParameterAttributes.VarianceMask\n  commentId: F:System.Reflection.GenericParameterAttributes.VarianceMask\n  id: VarianceMask\n  parent: System.Reflection.GenericParameterAttributes\n  langs:\n  - csharp\n  - vb\n  name: VarianceMask\n  fullName: System.Reflection.GenericParameterAttributes.VarianceMask\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: VarianceMask\n    path: src/mscorlib/src/System/Reflection/GenericParameterAttributes.cs\n    startLine: 12\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Selects the combination of all variance flags. This value is the result of using logical OR to combine the following flags: <xref href=\\\"System.Reflection.GenericParameterAttributes.Contravariant\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Reflection.GenericParameterAttributes.Covariant\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: VarianceMask = 3\n    return:\n      type: System.Reflection.GenericParameterAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: GenericParameterAttributes.VarianceMask\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Reflection.GenericParameterAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: GenericParameterAttributes\n  fullName: System.Reflection.GenericParameterAttributes\n  nameWithType: GenericParameterAttributes\n  commentId: T:System.Reflection.GenericParameterAttributes\n"}