{"nodes":[{"pos":[4715,4724],"content":"SqlDouble","needQuote":true,"nodes":[{"content":"SqlDouble","pos":[0,9]}]},{"pos":[6368,6376],"content":"MaxValue","needQuote":true,"nodes":[{"content":"MaxValue","pos":[0,8]}]},{"pos":[7484,7492],"content":"MinValue","needQuote":true,"nodes":[{"content":"MinValue","pos":[0,8]}]},{"pos":[9711,9715],"content":"Zero","needQuote":true,"nodes":[{"content":"Zero","pos":[0,4]}]},{"pos":[10973,10990],"content":"SqlDouble(Double)","needQuote":true,"nodes":[{"content":"SqlDouble(Double)","pos":[0,17]}]},{"pos":[12467,12473],"content":"IsNull","needQuote":true,"nodes":[{"content":"IsNull","pos":[0,6]}]},{"pos":[13795,13800],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[15186,15211],"content":"Add(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"Add(SqlDouble, SqlDouble)","pos":[0,25]}]},{"pos":[17056,17076],"content":"CompareTo(SqlDouble)","needQuote":true,"nodes":[{"content":"CompareTo(SqlDouble)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A signed number that indicates the relative values of the instance and the object.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than the object.","pos":[18237,18471],"source":"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is the same as the object.","pos":[18472,18566],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than the object &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The object is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic) &lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[18567,18806],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic) </p>\\n</td></tr></tbody></table>\\n"},{"pos":[19154,19171],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A signed number that indicates the relative values of the instance and the object.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than the object.","pos":[20254,20488],"source":"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is the same as the object.","pos":[20489,20583],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than the object &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The object is a null reference (&lt;strong&gt;Nothing &lt;/strong&gt;in Visual Basic).","pos":[20584,20789],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing </strong>in Visual Basic)."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[20790,20824],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[21366,21394],"content":"Divide(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"Divide(SqlDouble, SqlDouble)","pos":[0,28]}]},{"pos":[23377,23405],"content":"Equals(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"Equals(SqlDouble, SqlDouble)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two values are equal.","pos":[24736,24793],"source":"\\n<p>\\n<strong>true</strong> if the two values are equal."},{"content":"Otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24794,24834],"source":" Otherwise, <strong>false</strong>.</p>\\n"},{"pos":[25203,25217],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to be compared.","pos":[26152,26183],"source":"\\n<p>The object to be compared."},{"content":"&lt;/p&gt;\\n","pos":[26184,26190],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two values are equal.","pos":[26251,26308],"source":"\\n<p>\\n<strong>true</strong> if the two values are equal."},{"content":"Otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26309,26349],"source":" Otherwise, <strong>false</strong>.</p>\\n"},{"pos":[26732,26745],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[27508,27553],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[28114,28147],"content":"GreaterThan(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"GreaterThan(SqlDouble, SqlDouble)","pos":[0,33]}]},{"pos":[30857,30897],"content":"GreaterThanOrEqual(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(SqlDouble, SqlDouble)","pos":[0,40]}]},{"pos":[33636,33666],"content":"LessThan(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"LessThan(SqlDouble, SqlDouble)","pos":[0,30]}]},{"pos":[36346,36383],"content":"LessThanOrEqual(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(SqlDouble, SqlDouble)","pos":[0,37]}]},{"pos":[39101,39131],"content":"Multiply(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"Multiply(SqlDouble, SqlDouble)","pos":[0,30]}]},{"pos":[41108,41139],"content":"NotEquals(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"NotEquals(SqlDouble, SqlDouble)","pos":[0,31]}]},{"pos":[43798,43828],"content":"Addition(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"Addition(SqlDouble, SqlDouble)","pos":[0,30]}]},{"pos":[45797,45827],"content":"Division(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"Division(SqlDouble, SqlDouble)","pos":[0,30]}]},{"pos":[47835,47865],"content":"Equality(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"Equality(SqlDouble, SqlDouble)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two values are equal.","pos":[49205,49262],"source":"\\n<p>\\n<strong>true</strong> if the two values are equal."},{"content":"Otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[49263,49303],"source":" Otherwise, <strong>false</strong>.</p>\\n"},{"pos":[49836,49869],"content":"Explicit(SqlBoolean to SqlDouble)","needQuote":true,"nodes":[{"content":"Explicit(SqlBoolean to SqlDouble)","pos":[0,33]}]},{"pos":[52662,52691],"content":"Explicit(SqlDouble to Double)","needQuote":true,"nodes":[{"content":"Explicit(SqlDouble to Double)","pos":[0,29]}]},{"pos":[54638,54670],"content":"Explicit(SqlString to SqlDouble)","needQuote":true,"nodes":[{"content":"Explicit(SqlString to SqlDouble)","pos":[0,32]}]},{"pos":[57381,57414],"content":"GreaterThan(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"GreaterThan(SqlDouble, SqlDouble)","pos":[0,33]}]},{"pos":[60125,60165],"content":"GreaterThanOrEqual(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(SqlDouble, SqlDouble)","pos":[0,40]}]},{"pos":[62889,62919],"content":"Implicit(SqlByte to SqlDouble)","needQuote":true,"nodes":[{"content":"Implicit(SqlByte to SqlDouble)","pos":[0,30]}]},{"pos":[65678,65711],"content":"Implicit(SqlDecimal to SqlDouble)","needQuote":true,"nodes":[{"content":"Implicit(SqlDecimal to SqlDouble)","pos":[0,33]}]},{"pos":[68508,68539],"content":"Implicit(SqlInt16 to SqlDouble)","needQuote":true,"nodes":[{"content":"Implicit(SqlInt16 to SqlDouble)","pos":[0,31]}]},{"pos":[71308,71339],"content":"Implicit(SqlInt32 to SqlDouble)","needQuote":true,"nodes":[{"content":"Implicit(SqlInt32 to SqlDouble)","pos":[0,31]}]},{"pos":[74098,74129],"content":"Implicit(SqlInt64 to SqlDouble)","needQuote":true,"nodes":[{"content":"Implicit(SqlInt64 to SqlDouble)","pos":[0,31]}]},{"pos":[76888,76919],"content":"Implicit(SqlMoney to SqlDouble)","needQuote":true,"nodes":[{"content":"Implicit(SqlMoney to SqlDouble)","pos":[0,31]}]},{"pos":[79681,79713],"content":"Implicit(SqlSingle to SqlDouble)","needQuote":true,"nodes":[{"content":"Implicit(SqlSingle to SqlDouble)","pos":[0,32]}]},{"pos":[82448,82477],"content":"Implicit(Double to SqlDouble)","needQuote":true,"nodes":[{"content":"Implicit(Double to SqlDouble)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The double value to convert.","pos":[83335,83368],"source":"\\n<p>The double value to convert."},{"content":"&lt;/p&gt;\\n","pos":[83369,83375],"source":" </p>\\n"},{"pos":[84349,84381],"content":"Inequality(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"Inequality(SqlDouble, SqlDouble)","pos":[0,32]}]},{"pos":[87044,87074],"content":"LessThan(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"LessThan(SqlDouble, SqlDouble)","pos":[0,30]}]},{"pos":[89763,89800],"content":"LessThanOrEqual(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(SqlDouble, SqlDouble)","pos":[0,37]}]},{"pos":[92515,92545],"content":"Multiply(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"Multiply(SqlDouble, SqlDouble)","pos":[0,30]}]},{"pos":[94537,94570],"content":"Subtraction(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"Subtraction(SqlDouble, SqlDouble)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The results of the subtraction operation.&lt;/p&gt;\\n","pos":[95885,95937],"source":"\\n<p>The results of the subtraction operation.</p>\\n"},{"pos":[96392,96416],"content":"UnaryNegation(SqlDouble)","needQuote":true,"nodes":[{"content":"UnaryNegation(SqlDouble)","pos":[0,24]}]},{"pos":[97984,97997],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;String&lt;/strong&gt; to be parsed.","pos":[98830,98876],"source":"\\n<p>The <strong>String</strong> to be parsed."},{"content":"&lt;/p&gt;\\n","pos":[98877,98883],"source":" </p>\\n"},{"pos":[99635,99665],"content":"Subtract(SqlDouble, SqlDouble)","needQuote":true,"nodes":[{"content":"Subtract(SqlDouble, SqlDouble)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The results of the subtraction operation.&lt;/p&gt;\\n","pos":[100974,101026],"source":"\\n<p>The results of the subtraction operation.</p>\\n"},{"pos":[101370,101384],"content":"ToSqlBoolean()","needQuote":true,"nodes":[{"content":"ToSqlBoolean()","pos":[0,14]}]},{"pos":[103529,103540],"content":"ToSqlByte()","needQuote":true,"nodes":[{"content":"ToSqlByte()","pos":[0,11]}]},{"pos":[104895,104909],"content":"ToSqlDecimal()","needQuote":true,"nodes":[{"content":"ToSqlDecimal()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A new &lt;strong&gt;SqlDecimal&lt;/strong&gt; structure whose converted value equals the rounded value of this &lt;strong&gt;SqlDouble&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[105765,105902],"source":"\\n<p>A new <strong>SqlDecimal</strong> structure whose converted value equals the rounded value of this <strong>SqlDouble</strong>.</p>\\n"},{"pos":[106202,106214],"content":"ToSqlInt16()","needQuote":true,"nodes":[{"content":"ToSqlInt16()","pos":[0,12]}]},{"pos":[107638,107650],"content":"ToSqlInt32()","needQuote":true,"nodes":[{"content":"ToSqlInt32()","pos":[0,12]}]},{"pos":[109074,109086],"content":"ToSqlInt64()","needQuote":true,"nodes":[{"content":"ToSqlInt64()","pos":[0,12]}]},{"pos":[110510,110522],"content":"ToSqlMoney()","needQuote":true,"nodes":[{"content":"ToSqlMoney()","pos":[0,12]}]},{"pos":[111939,111952],"content":"ToSqlSingle()","needQuote":true,"nodes":[{"content":"ToSqlSingle()","pos":[0,13]}]},{"pos":[113471,113484],"content":"ToSqlString()","needQuote":true,"nodes":[{"content":"ToSqlString()","pos":[0,13]}]},{"pos":[114878,114888],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[116102,116122],"content":"System.Data.SqlTypes","needQuote":true,"nodes":[{"content":"System.Data.SqlTypes","pos":[0,20]}]},{"pos":[116326,116335],"content":"INullable","needQuote":true,"nodes":[{"content":"INullable","pos":[0,9]}]},{"pos":[116522,116533],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[116735,116757],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[116905,116911],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[116978,116979],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117029,117035],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[117096,117097]},{"pos":[117152,117158],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[117218,117219],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117316,117322],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[117389,117390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117440,117446],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[117507,117508]},{"pos":[117563,117569],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[117629,117630],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117875,117906],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[118072,118087],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[118163,118164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118214,118220],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[118281,118282]},{"pos":[118337,118343],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[118403,118404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118510,118525],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[118601,118602],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118652,118658],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[118719,118720]},{"pos":[118775,118781],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[118841,118842],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119068,119077],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[119170,119177],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[119245,119246],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119273,119274],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119343,119350],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[119418,119419],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119446,119447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119576,119582],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[119713,119719],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[119895,119904],"content":"SqlDouble","needQuote":true,"nodes":[{"content":"SqlDouble","pos":[0,9]}]},{"pos":[120086,120092],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[120285,120291],"content":"IsNull","needQuote":true,"nodes":[{"content":"IsNull","pos":[0,6]}]},{"pos":[120495,120502],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[120649,120654],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[120837,120854],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[120989,120998],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[121052,121053],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121103,121109],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[121169,121170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121261,121270],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[121324,121325],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121375,121381],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[121441,121442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121662,121672],"content":"SqlBoolean","needQuote":true,"nodes":[{"content":"SqlBoolean","pos":[0,10]}]},{"pos":[121891,121905],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[122030,122036],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[122085,122086],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122136,122142],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[122202,122203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122289,122295],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[122344,122345],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122395,122401],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[122461,122462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122643,122652],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[122831,122844],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[122951,122962],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[123016,123017],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123044,123045],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123121,123132],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[123186,123187],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123214,123215],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123413,123422],"content":"SqlString","needQuote":true,"nodes":[{"content":"SqlString","pos":[0,9]}]},{"pos":[123633,123640],"content":"SqlByte","needQuote":true,"nodes":[{"content":"SqlByte","pos":[0,7]}]},{"pos":[123848,123858],"content":"SqlDecimal","needQuote":true,"nodes":[{"content":"SqlDecimal","pos":[0,10]}]},{"pos":[124073,124081],"content":"SqlInt16","needQuote":true,"nodes":[{"content":"SqlInt16","pos":[0,8]}]},{"pos":[124290,124298],"content":"SqlInt32","needQuote":true,"nodes":[{"content":"SqlInt32","pos":[0,8]}]},{"pos":[124507,124515],"content":"SqlInt64","needQuote":true,"nodes":[{"content":"SqlInt64","pos":[0,8]}]},{"pos":[124724,124732],"content":"SqlMoney","needQuote":true,"nodes":[{"content":"SqlMoney","pos":[0,8]}]},{"pos":[124942,124951],"content":"SqlSingle","needQuote":true,"nodes":[{"content":"SqlSingle","pos":[0,9]}]},{"pos":[125133,125139],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[125306,125316],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[125417,125425],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[125476,125477],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125504,125505],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125578,125586],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[125637,125638],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125665,125666],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Data.SqlTypes.SqlDouble\n  commentId: T:System.Data.SqlTypes.SqlDouble\n  id: SqlDouble\n  parent: System.Data.SqlTypes\n  children:\n  - System.Data.SqlTypes.SqlDouble.#ctor(System.Double)\n  - System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)\n  - System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.Equals(System.Object)\n  - System.Data.SqlTypes.SqlDouble.GetHashCode\n  - System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.IsNull\n  - System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.MaxValue\n  - System.Data.SqlTypes.SqlDouble.MinValue\n  - System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.Null\n  - System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble\n  - System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double\n  - System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble\n  - System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble\n  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble\n  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble\n  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble\n  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble\n  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble\n  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble\n  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble\n  - System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.Parse(System.String)\n  - System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  - System.Data.SqlTypes.SqlDouble.ToSqlBoolean\n  - System.Data.SqlTypes.SqlDouble.ToSqlByte\n  - System.Data.SqlTypes.SqlDouble.ToSqlDecimal\n  - System.Data.SqlTypes.SqlDouble.ToSqlInt16\n  - System.Data.SqlTypes.SqlDouble.ToSqlInt32\n  - System.Data.SqlTypes.SqlDouble.ToSqlInt64\n  - System.Data.SqlTypes.SqlDouble.ToSqlMoney\n  - System.Data.SqlTypes.SqlDouble.ToSqlSingle\n  - System.Data.SqlTypes.SqlDouble.ToSqlString\n  - System.Data.SqlTypes.SqlDouble.ToString\n  - System.Data.SqlTypes.SqlDouble.Value\n  - System.Data.SqlTypes.SqlDouble.Zero\n  langs:\n  - csharp\n  - vb\n  name: SqlDouble\n  fullName: System.Data.SqlTypes.SqlDouble\n  type: Struct\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SqlDouble\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 23\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a floating-point number within the range of -1.79E +308 through 1.79E +308 to be stored in or retrieved from a database.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct SqlDouble : INullable, IComparable\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure SqlDouble\n          Implements INullable, IComparable\n  implements:\n  - System.Data.SqlTypes.INullable\n  - System.IComparable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: SqlDouble\n- uid: System.Data.SqlTypes.SqlDouble.MaxValue\n  commentId: F:System.Data.SqlTypes.SqlDouble.MaxValue\n  id: MaxValue\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: MaxValue\n  fullName: System.Data.SqlTypes.SqlDouble.MaxValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxValue\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 527\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>A constant representing the maximum value for a <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlDouble MaxValue\n    content.vb: Public Shared ReadOnly MaxValue As SqlDouble\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlDouble.MaxValue\n- uid: System.Data.SqlTypes.SqlDouble.MinValue\n  commentId: F:System.Data.SqlTypes.SqlDouble.MinValue\n  id: MinValue\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: MinValue\n  fullName: System.Data.SqlTypes.SqlDouble.MinValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MinValue\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 523\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>A constant representing the minimum possible value of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static readonly SqlDouble MinValue\n    content.vb: Public Shared ReadOnly MinValue As SqlDouble\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlDouble.MinValue\n- uid: System.Data.SqlTypes.SqlDouble.Null\n  commentId: F:System.Data.SqlTypes.SqlDouble.Null\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  fullName: System.Data.SqlTypes.SqlDouble.Null\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 515\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a <xref href=\\\"System.DBNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be assigned to this instance of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlDouble Null\n    content.vb: Public Shared ReadOnly Null As SqlDouble\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlDouble.Null\n- uid: System.Data.SqlTypes.SqlDouble.Zero\n  commentId: F:System.Data.SqlTypes.SqlDouble.Zero\n  id: Zero\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Zero\n  fullName: System.Data.SqlTypes.SqlDouble.Zero\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zero\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 519\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a zero value that can be assigned to the <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an instance of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlDouble Zero\n    content.vb: Public Shared ReadOnly Zero As SqlDouble\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlDouble.Zero\n- uid: System.Data.SqlTypes.SqlDouble.#ctor(System.Double)\n  commentId: M:System.Data.SqlTypes.SqlDouble.#ctor(System.Double)\n  id: '#ctor(System.Double)'\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: SqlDouble(Double)\n  fullName: System.Data.SqlTypes.SqlDouble.SqlDouble(System.Double)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 40\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the supplied double parameter to set the new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  syntax:\n    content: public SqlDouble(double value)\n    content.vb: Public Sub New(value As Double)\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A double whose value will be used for the new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlDouble.SqlDouble(Double)\n- uid: System.Data.SqlTypes.SqlDouble.IsNull\n  commentId: P:System.Data.SqlTypes.SqlDouble.IsNull\n  id: IsNull\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: IsNull\n  fullName: System.Data.SqlTypes.SqlDouble.IsNull\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNull\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 55\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Returns a Boolean value that indicates whether this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance is null.</p>\\n\"\n  syntax:\n    content: public bool IsNull { get; }\n    content.vb: Public ReadOnly Property IsNull As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null. Otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Data.SqlTypes.INullable.IsNull\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlDouble.IsNull\n- uid: System.Data.SqlTypes.SqlDouble.Value\n  commentId: P:System.Data.SqlTypes.SqlDouble.Value\n  id: Value\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Data.SqlTypes.SqlDouble.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 64\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the value of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. This property is read-only.</p>\\n\"\n  syntax:\n    content: public double Value { get; }\n    content.vb: Public ReadOnly Property Value As Double\n    parameters: []\n    return:\n      type: System.Double\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlDouble.Value\n- uid: System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Add(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 341\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The addition operator computes the sum of the two <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlDouble Add(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Function Add(x As SqlDouble, y As SqlDouble) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>The sum of the two <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.Add(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)\n  id: CompareTo(System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 469\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance to the supplied <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(SqlDouble value)\n    content.vb: Public Function CompareTo(value As SqlDouble) As Integer\n    parameters:\n    - id: value\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be compared. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic) </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlDouble.CompareTo(SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)\n  commentId: M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)\n  id: CompareTo(System.Object)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Object)\n  fullName: System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 458\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance to the supplied <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(object value)\n    content.vb: Public Function CompareTo(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing </strong>in Visual Basic). </p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlDouble.CompareTo(Object)\n- uid: System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Divide(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 358\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The division operator divides the first <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand by the second.</p>\\n\"\n  syntax:\n    content: public static SqlDouble Divide(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Function Divide(x As SqlDouble, y As SqlDouble) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the results of the division operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.Divide(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Equals(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 364\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison on two instances of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether they are equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean Equals(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Function Equals(x As SqlDouble, y As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two values are equal. Otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.Equals(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.Equals(System.Object)\n  commentId: M:System.Data.SqlTypes.SqlDouble.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Data.SqlTypes.SqlDouble.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 487\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares the supplied object parameter to the <xref href=\\\"System.Data.SqlTypes.SqlDateTime.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to be compared. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two values are equal. Otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDouble.Equals(Object)\n- uid: System.Data.SqlTypes.SqlDouble.GetHashCode\n  commentId: M:System.Data.SqlTypes.SqlDouble.GetHashCode\n  id: GetHashCode\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Data.SqlTypes.SqlDouble.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 506\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Returns the hash code for this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structre.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDouble.GetHashCode()\n- uid: System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 382\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is greater than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean GreaterThan(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Function GreaterThan(x As SqlDouble, y As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.GreaterThan(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 394\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is greater than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean GreaterThanOrEqual(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Function GreaterThanOrEqual(x As SqlDouble, y As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.GreaterThanOrEqual(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: LessThan(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 376\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is less than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean LessThan(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Function LessThan(x As SqlDouble, y As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.LessThan(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 388\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is less than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean LessThanOrEqual(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Function LessThanOrEqual(x As SqlDouble, y As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.LessThanOrEqual(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Multiply(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 352\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The multiplication operator computes the product of the two <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlDouble Multiply(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Function Multiply(x As SqlDouble, y As SqlDouble) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>The product of the two <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.Multiply(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: NotEquals(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotEquals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 370\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether they are notequal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean NotEquals(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Function NotEquals(x As SqlDouble, y As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.NotEquals(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Addition(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Addition(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 129\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The addition operator computes the sum of the two <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlDouble operator +(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Operator +(x As SqlDouble, y As SqlDouble) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>The sum of the two <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.Addition(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Division(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Division(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Division\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 177\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The division operator divides the first <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand by the second.</p>\\n\"\n  syntax:\n    content: public static SqlDouble operator /(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Operator /(x As SqlDouble, y As SqlDouble) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the results of the division operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.Division(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Equality(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Equality(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 291\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison on two instances of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether they are equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator ==(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Operator =(x As SqlDouble, y As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two values are equal. Otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.Equality(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble\n  id: op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlBoolean to SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Explicit(System.Data.SqlTypes.SqlBoolean to System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 201\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlDouble(SqlBoolean x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlBoolean) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is either 0 or 1, depending on the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.ByteValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter. If the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure will be <xref href=\\\"System.Data.SqlTypes.SqlDouble.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlDouble.Narrowing(System.Data.SqlTypes.SqlBoolean to System.Data.SqlTypes.SqlDouble)\n  name.vb: Narrowing(SqlBoolean to SqlDouble)\n  nameWithType: SqlDouble.Explicit(SqlBoolean to SqlDouble)\n  nameWithType.vb: SqlDouble.Narrowing(SqlBoolean to SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double\n  id: op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlDouble to Double)\n  fullName: System.Data.SqlTypes.SqlDouble.Explicit(System.Data.SqlTypes.SqlDouble to System.Double)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 88\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to double.</p>\\n\"\n  syntax:\n    content: public static explicit operator double (SqlDouble x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlDouble) As Double\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double equivalent to the specified <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlDouble.Narrowing(System.Data.SqlTypes.SqlDouble to System.Double)\n  name.vb: Narrowing(SqlDouble to Double)\n  nameWithType: SqlDouble.Explicit(SqlDouble to Double)\n  nameWithType.vb: SqlDouble.Narrowing(SqlDouble to Double)\n- uid: System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble\n  id: op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlString to SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Explicit(System.Data.SqlTypes.SqlString to System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 279\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlDouble(SqlString x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlString) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the value of the number represented by the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlString.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure will be <xref href=\\\"System.Data.SqlTypes.SqlDouble.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlDouble.Narrowing(System.Data.SqlTypes.SqlString to System.Data.SqlTypes.SqlDouble)\n  name.vb: Narrowing(SqlString to SqlDouble)\n  nameWithType: SqlDouble.Explicit(SqlString to SqlDouble)\n  nameWithType.vb: SqlDouble.Narrowing(SqlString to SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 315\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is greater than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator>(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Operator>(x As SqlDouble, y As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.GreaterThan(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 331\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is greater than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator >=(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Operator >=(x As SqlDouble, y As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.GreaterThanOrEqual(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble\n  id: op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SqlByte to SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlByte to System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 210\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlDouble(SqlByte x)\n    content.vb: Public Shared Widening Operator CType(x As SqlByte) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter. If the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlByte.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure will be <xref href=\\\"System.Data.SqlTypes.SqlDouble.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlByte to System.Data.SqlTypes.SqlDouble)\n  name.vb: Widening(SqlByte to SqlDouble)\n  nameWithType: SqlDouble.Implicit(SqlByte to SqlDouble)\n  nameWithType.vb: SqlDouble.Widening(SqlByte to SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble\n  id: op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SqlDecimal to SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlDecimal to System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 264\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlDouble(SqlDecimal x)\n    content.vb: Public Shared Widening Operator CType(x As SqlDecimal) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDecimal\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the <xref href=\\\"System.Data.SqlTypes.SqlDecimal.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter. If the <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlDecimal.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure will be <xref href=\\\"System.Data.SqlTypes.SqlDouble.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlDecimal to System.Data.SqlTypes.SqlDouble)\n  name.vb: Widening(SqlDecimal to SqlDouble)\n  nameWithType: SqlDouble.Implicit(SqlDecimal to SqlDouble)\n  nameWithType.vb: SqlDouble.Widening(SqlDecimal to SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble\n  id: op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SqlInt16 to SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlInt16 to System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 219\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlDouble(SqlInt16 x)\n    content.vb: Public Shared Widening Operator CType(x As SqlInt16) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt16\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the <xref href=\\\"System.Data.SqlTypes.SqlInt16.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter. If the <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlInt16.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure will be <xref href=\\\"System.Data.SqlTypes.SqlDouble.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlInt16 to System.Data.SqlTypes.SqlDouble)\n  name.vb: Widening(SqlInt16 to SqlDouble)\n  nameWithType: SqlDouble.Implicit(SqlInt16 to SqlDouble)\n  nameWithType.vb: SqlDouble.Widening(SqlInt16 to SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble\n  id: op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SqlInt32 to SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlInt32 to System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 228\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlDouble(SqlInt32 x)\n    content.vb: Public Shared Widening Operator CType(x As SqlInt32) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt32\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the <xref href=\\\"System.Data.SqlTypes.SqlInt32.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter. If the <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlInt32.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure will be <xref href=\\\"System.Data.SqlTypes.SqlDouble.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlInt32 to System.Data.SqlTypes.SqlDouble)\n  name.vb: Widening(SqlInt32 to SqlDouble)\n  nameWithType: SqlDouble.Implicit(SqlInt32 to SqlDouble)\n  nameWithType.vb: SqlDouble.Widening(SqlInt32 to SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble\n  id: op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SqlInt64 to SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlInt64 to System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 237\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlDouble(SqlInt64 x)\n    content.vb: Public Shared Widening Operator CType(x As SqlInt64) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter. If the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlInt64.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure will be <xref href=\\\"System.Data.SqlTypes.SqlDouble.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlInt64 to System.Data.SqlTypes.SqlDouble)\n  name.vb: Widening(SqlInt64 to SqlDouble)\n  nameWithType: SqlDouble.Implicit(SqlInt64 to SqlDouble)\n  nameWithType.vb: SqlDouble.Widening(SqlInt64 to SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble\n  id: op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SqlMoney to SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlMoney to System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 255\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlDouble(SqlMoney x)\n    content.vb: Public Shared Widening Operator CType(x As SqlMoney) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlMoney\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the <xref href=\\\"System.Data.SqlTypes.SqlMoney.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter. If the <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlMoney.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure will be <xref href=\\\"System.Data.SqlTypes.SqlDouble.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlMoney to System.Data.SqlTypes.SqlDouble)\n  name.vb: Widening(SqlMoney to SqlDouble)\n  nameWithType: SqlDouble.Implicit(SqlMoney to SqlDouble)\n  nameWithType.vb: SqlDouble.Widening(SqlMoney to SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble\n  id: op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SqlSingle to SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlSingle to System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 246\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlDouble(SqlSingle x)\n    content.vb: Public Shared Widening Operator CType(x As SqlSingle) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlSingle\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the <xref href=\\\"System.Data.SqlTypes.SqlSingle.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter. If the <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlSingle.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure will be <xref href=\\\"System.Data.SqlTypes.SqlDouble.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlSingle to System.Data.SqlTypes.SqlDouble)\n  name.vb: Widening(SqlSingle to SqlDouble)\n  nameWithType: SqlDouble.Implicit(SqlSingle to SqlDouble)\n  nameWithType.vb: SqlDouble.Widening(SqlSingle to SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble\n  id: op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Double to SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Double to System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 79\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied double value to a <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlDouble(double x)\n    content.vb: Public Shared Widening Operator CType(x As Double) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Double\n      description: \"\\n<p>The double value to convert. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the same value as the specified double parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Double to System.Data.SqlTypes.SqlDouble)\n  name.vb: Widening(Double to SqlDouble)\n  nameWithType: SqlDouble.Implicit(Double to SqlDouble)\n  nameWithType.vb: SqlDouble.Widening(Double to SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Inequality(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Inequality(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 299\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether they are not equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator !=(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Operator <>(x As SqlDouble, y As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.Inequality(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: LessThan(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 307\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is less than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator <(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Operator <(x As SqlDouble, y As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.LessThan(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 323\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is less than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator <=(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Operator <=(x As SqlDouble, y As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.LessThanOrEqual(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Multiply(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 161\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The multiplication operator computes the product of the two <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlDouble operator *(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Operator *(x As SqlDouble, y As SqlDouble) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>The product of the two <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.Multiply(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Subtraction(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Subtraction\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 145\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The subtraction operator the second <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand from the first.</p>\\n\"\n  syntax:\n    content: public static SqlDouble operator -(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Operator -(x As SqlDouble, y As SqlDouble) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>The results of the subtraction operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.Subtraction(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)\n  id: op_UnaryNegation(System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: UnaryNegation(SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.UnaryNegation(System.Data.SqlTypes.SqlDouble)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_UnaryNegation\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 117\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Returns the negated value of the specified <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static SqlDouble operator -(SqlDouble x)\n    content.vb: Public Shared Operator -(x As SqlDouble) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the negated value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.UnaryNegation(SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.Parse(System.String)\n  commentId: M:System.Data.SqlTypes.SqlDouble.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Data.SqlTypes.SqlDouble.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 104\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representation of a number to its double-precision floating point number equivalent.</p>\\n\"\n  syntax:\n    content: public static SqlDouble Parse(string s)\n    content.vb: Public Shared Function Parse(s As String) As SqlDouble\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The <strong>String</strong> to be parsed. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the value represented by the <strong>String</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.Parse(String)\n- uid: System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  commentId: M:System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  id: Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: Subtract(SqlDouble, SqlDouble)\n  fullName: System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 346\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The subtraction operator the second <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand from the first.</p>\\n\"\n  syntax:\n    content: public static SqlDouble Subtract(SqlDouble x, SqlDouble y)\n    content.vb: Public Shared Function Subtract(x As SqlDouble, y As SqlDouble) As SqlDouble\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>The results of the subtraction operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlDouble.Subtract(SqlDouble, SqlDouble)\n- uid: System.Data.SqlTypes.SqlDouble.ToSqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlBoolean\n  id: ToSqlBoolean\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: ToSqlBoolean()\n  fullName: System.Data.SqlTypes.SqlDouble.ToSqlBoolean()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlBoolean\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 401\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlBoolean ToSqlBoolean()\n    content.vb: Public Function ToSqlBoolean As SqlBoolean\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <strong>SqlBoolean</strong> structure whose <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is non-zero, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is zero and <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is <xref href=\\\"System.Data.SqlTypes.SqlDouble.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlDouble.ToSqlBoolean()\n- uid: System.Data.SqlTypes.SqlDouble.ToSqlByte\n  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlByte\n  id: ToSqlByte\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: ToSqlByte()\n  fullName: System.Data.SqlTypes.SqlDouble.ToSqlByte()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlByte\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 406\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlByte ToSqlByte()\n    content.vb: Public Function ToSqlByte As SqlByte\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <strong>SqlByte</strong> structure whose <strong>Value</strong> equals the <strong>Value</strong> of this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlDouble.ToSqlByte()\n- uid: System.Data.SqlTypes.SqlDouble.ToSqlDecimal\n  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlDecimal\n  id: ToSqlDecimal\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: ToSqlDecimal()\n  fullName: System.Data.SqlTypes.SqlDouble.ToSqlDecimal()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlDecimal\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 431\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlDecimal ToSqlDecimal()\n    content.vb: Public Function ToSqlDecimal As SqlDecimal\n    return:\n      type: System.Data.SqlTypes.SqlDecimal\n      description: \"\\n<p>A new <strong>SqlDecimal</strong> structure whose converted value equals the rounded value of this <strong>SqlDouble</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlDouble.ToSqlDecimal()\n- uid: System.Data.SqlTypes.SqlDouble.ToSqlInt16\n  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlInt16\n  id: ToSqlInt16\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt16()\n  fullName: System.Data.SqlTypes.SqlDouble.ToSqlInt16()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt16\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 411\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt16 ToSqlInt16()\n    content.vb: Public Function ToSqlInt16 As SqlInt16\n    return:\n      type: System.Data.SqlTypes.SqlInt16\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <strong>Value</strong> equals the integer part of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlDouble.ToSqlInt16()\n- uid: System.Data.SqlTypes.SqlDouble.ToSqlInt32\n  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlInt32\n  id: ToSqlInt32\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt32()\n  fullName: System.Data.SqlTypes.SqlDouble.ToSqlInt32()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt32\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 416\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt32 ToSqlInt32()\n    content.vb: Public Function ToSqlInt32 As SqlInt32\n    return:\n      type: System.Data.SqlTypes.SqlInt32\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <strong>Value</strong> equals the integer part of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlDouble.ToSqlInt32()\n- uid: System.Data.SqlTypes.SqlDouble.ToSqlInt64\n  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlInt64\n  id: ToSqlInt64\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt64()\n  fullName: System.Data.SqlTypes.SqlDouble.ToSqlInt64()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt64\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 421\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt64 ToSqlInt64()\n    content.vb: Public Function ToSqlInt64 As SqlInt64\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <strong>Value</strong> equals the integer part of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlDouble.ToSqlInt64()\n- uid: System.Data.SqlTypes.SqlDouble.ToSqlMoney\n  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlMoney\n  id: ToSqlMoney\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: ToSqlMoney()\n  fullName: System.Data.SqlTypes.SqlDouble.ToSqlMoney()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlMoney\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 426\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlMoney ToSqlMoney()\n    content.vb: Public Function ToSqlMoney As SqlMoney\n    return:\n      type: System.Data.SqlTypes.SqlMoney\n      description: \"\\n<p>A new <strong>SqlMoney</strong> structure whose <xref href=\\\"System.Data.SqlTypes.SqlMoney.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the value of this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlDouble.ToSqlMoney()\n- uid: System.Data.SqlTypes.SqlDouble.ToSqlSingle\n  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlSingle\n  id: ToSqlSingle\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: ToSqlSingle()\n  fullName: System.Data.SqlTypes.SqlDouble.ToSqlSingle()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlSingle\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 436\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlSingle ToSqlSingle()\n    content.vb: Public Function ToSqlSingle As SqlSingle\n    return:\n      type: System.Data.SqlTypes.SqlSingle\n      description: \"\\n<p>A new <strong>SqlSingle</strong> structure whose <xref href=\\\"System.Data.SqlTypes.SqlSingle.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlDouble.ToSqlSingle()\n- uid: System.Data.SqlTypes.SqlDouble.ToSqlString\n  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlString\n  id: ToSqlString\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: ToSqlString()\n  fullName: System.Data.SqlTypes.SqlDouble.ToSqlString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlString\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 441\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlString ToSqlString()\n    content.vb: Public Function ToSqlString As SqlString\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <strong>SqlString</strong> representing the <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlDouble.ToSqlString()\n- uid: System.Data.SqlTypes.SqlDouble.ToString\n  commentId: M:System.Data.SqlTypes.SqlDouble.ToString\n  id: ToString\n  parent: System.Data.SqlTypes.SqlDouble\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Data.SqlTypes.SqlDouble.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs\n    startLine: 96\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a string.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string representing the <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of this <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDouble.ToString()\nreferences:\n- uid: System.Data.SqlTypes\n  isExternal: false\n  name: System.Data.SqlTypes\n  fullName: System.Data.SqlTypes\n  nameWithType: System.Data.SqlTypes\n  commentId: N:System.Data.SqlTypes\n- uid: System.Data.SqlTypes.INullable\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: INullable\n  fullName: System.Data.SqlTypes.INullable\n  nameWithType: INullable\n  commentId: T:System.Data.SqlTypes.INullable\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDouble\n  fullName: System.Data.SqlTypes.SqlDouble\n  nameWithType: SqlDouble\n  commentId: T:System.Data.SqlTypes.SqlDouble\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Data.SqlTypes.INullable.IsNull\n  parent: System.Data.SqlTypes.INullable\n  isExternal: false\n  name: IsNull\n  fullName: System.Data.SqlTypes.INullable.IsNull\n  nameWithType: INullable.IsNull\n  commentId: P:System.Data.SqlTypes.INullable.IsNull\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlBoolean\n  fullName: System.Data.SqlTypes.SqlBoolean\n  nameWithType: SqlBoolean\n  commentId: T:System.Data.SqlTypes.SqlBoolean\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlString\n  fullName: System.Data.SqlTypes.SqlString\n  nameWithType: SqlString\n  commentId: T:System.Data.SqlTypes.SqlString\n- uid: System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlByte\n  fullName: System.Data.SqlTypes.SqlByte\n  nameWithType: SqlByte\n  commentId: T:System.Data.SqlTypes.SqlByte\n- uid: System.Data.SqlTypes.SqlDecimal\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDecimal\n  fullName: System.Data.SqlTypes.SqlDecimal\n  nameWithType: SqlDecimal\n  commentId: T:System.Data.SqlTypes.SqlDecimal\n- uid: System.Data.SqlTypes.SqlInt16\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt16\n  fullName: System.Data.SqlTypes.SqlInt16\n  nameWithType: SqlInt16\n  commentId: T:System.Data.SqlTypes.SqlInt16\n- uid: System.Data.SqlTypes.SqlInt32\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt32\n  fullName: System.Data.SqlTypes.SqlInt32\n  nameWithType: SqlInt32\n  commentId: T:System.Data.SqlTypes.SqlInt32\n- uid: System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt64\n  fullName: System.Data.SqlTypes.SqlInt64\n  nameWithType: SqlInt64\n  commentId: T:System.Data.SqlTypes.SqlInt64\n- uid: System.Data.SqlTypes.SqlMoney\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlMoney\n  fullName: System.Data.SqlTypes.SqlMoney\n  nameWithType: SqlMoney\n  commentId: T:System.Data.SqlTypes.SqlMoney\n- uid: System.Data.SqlTypes.SqlSingle\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlSingle\n  fullName: System.Data.SqlTypes.SqlSingle\n  nameWithType: SqlSingle\n  commentId: T:System.Data.SqlTypes.SqlSingle\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n"}