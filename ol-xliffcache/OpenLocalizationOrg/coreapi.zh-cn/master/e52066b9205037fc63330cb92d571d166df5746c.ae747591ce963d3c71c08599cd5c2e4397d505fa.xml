{"nodes":[{"pos":[525,534],"content":"AuditRule","needQuote":true,"nodes":[{"content":"AuditRule","pos":[0,9]}]},{"pos":[3194,3286],"content":"AuditRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)","needQuote":true,"nodes":[{"content":"AuditRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)","pos":[0,92]}]},{"content":"\\n&lt;p&gt;The access mask of this rule.","pos":[4953,4987],"source":"\\n<p>The access mask of this rule."},{"content":"The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.&lt;/p&gt;\\n","pos":[4988,5114],"source":" The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to inherit this rule from a parent container.&lt;/p&gt;\\n","pos":[5185,5265],"source":"\\n<p>\\n<strong>true</strong> to inherit this rule from a parent container.</p>\\n"},{"content":"\\n&lt;p&gt;The inheritance properties of the audit rule.&lt;/p&gt;\\n","pos":[5373,5429],"source":"\\n<p>The inheritance properties of the audit rule.</p>\\n"},{"content":"\\n&lt;p&gt;The conditions for which the rule is audited.&lt;/p&gt;\\n","pos":[5889,5945],"source":"\\n<p>The conditions for which the rule is audited.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;em&gt;accessMask&lt;/em&gt; parameter is zero, or the &lt;em&gt;inheritanceFlags&lt;/em&gt; or &lt;em&gt;propagationFlags&lt;/em&gt; parameters contain unrecognized flag values.&lt;/p&gt;\\n","pos":[6418,6591],"source":"\\n<p>The value of the <em>accessMask</em> parameter is zero, or the <em>inheritanceFlags</em> or <em>propagationFlags</em> parameters contain unrecognized flag values.</p>\\n"},{"pos":[7002,7012],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values.","pos":[7775,7828],"source":"\\n<p>A bitwise combination of the enumeration values."},{"content":"This combination specifies the audit conditions for this audit rule.&lt;/p&gt;\\n","pos":[7829,7903],"source":" This combination specifies the audit conditions for this audit rule.</p>\\n"},{"pos":[8098,8127],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[8327,8333],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8535,8552],"content":"AuthorizationRule","needQuote":true,"nodes":[{"content":"AuthorizationRule","pos":[0,17]}]},{"pos":[8862,8872],"content":"AccessMask","needQuote":true,"nodes":[{"content":"AccessMask","pos":[0,10]}]},{"pos":[9222,9239],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[9609,9625],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[9987,9998],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[10350,10366],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[10656,10666],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10761,10769],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10838,10839],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10866,10867],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10937,10945],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11014,11015],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11042,11043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11226,11240],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11359,11365],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11432,11433],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11483,11489],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11549,11550],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11633,11639],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11706,11707],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11757,11763],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11823,11824],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12038,12060],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12208,12214],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12281,12282],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12332,12338],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12399,12400]},{"pos":[12455,12461],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12521,12522],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12619,12625],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12692,12693],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12743,12749],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12810,12811]},{"pos":[12866,12872],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12932,12933],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13178,13209],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[13375,13390],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13466,13467],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13517,13523],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13584,13585]},{"pos":[13640,13646],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13706,13707],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13813,13828],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13904,13905],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13955,13961],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14022,14023]},{"pos":[14078,14084],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14144,14145],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14375,14388],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14489,14500],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14572,14573],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14600,14601],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14674,14685],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14757,14758],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14785,14786],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14961,14970],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15063,15070],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15138,15139],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15166,15167],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15236,15243],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15311,15312],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15339,15340],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15515,15532],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[15641,15656],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15732,15733],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15760,15761],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15838,15853],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15929,15930],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15957,15958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16103,16109],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[16289,16306],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[16521,16526],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16669,16676],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[16880,16896],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[17173,17189],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[17460,17470],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[17668,17693],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[17892,17909],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[18091,18118],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.AccessControl.AuditRule\n  commentId: T:System.Security.AccessControl.AuditRule\n  id: AuditRule\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.AuditRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.AuditRule.AuditFlags\n  langs:\n  - csharp\n  - vb\n  name: AuditRule\n  fullName: System.Security.AccessControl.AuditRule\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuditRule\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 111\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents a combination of a user's identity and an access mask. An <xref href=\\\"System.Security.AccessControl.AuditRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object also contains information about how the rule is inherited by child objects, how that inheritance is propagated, and for what conditions it is audited.</p>\\n\"\n  syntax:\n    content: 'public abstract class AuditRule : AuthorizationRule'\n    content.vb: >-\n      Public MustInherit Class AuditRule\n          Inherits AuthorizationRule\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.AuthorizationRule\n  inheritedMembers:\n  - System.Security.AccessControl.AuthorizationRule.AccessMask\n  - System.Security.AccessControl.AuthorizationRule.IdentityReference\n  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  - System.Security.AccessControl.AuthorizationRule.IsInherited\n  - System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: AuditRule\n- uid: System.Security.AccessControl.AuditRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  commentId: M:System.Security.AccessControl.AuditRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  id: '#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)'\n  parent: System.Security.AccessControl.AuditRule\n  langs:\n  - csharp\n  - vb\n  name: AuditRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n  fullName: System.Security.AccessControl.AuditRule.AuditRule(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 113\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.AuditRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified values.</p>\\n\"\n  syntax:\n    content: protected AuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags auditFlags)\n    content.vb: Protected Sub New(identity As IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, auditFlags As AuditFlags)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The identity to which the audit rule applies. It must be an object that can be cast as a <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\\n\"\n    - id: isInherited\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to inherit this rule from a parent container.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>The inheritance properties of the audit rule.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Whether inherited audit rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\\\"System.Security.AccessControl.InheritanceFlags.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: auditFlags\n      type: System.Security.AccessControl.AuditFlags\n      description: \"\\n<p>The conditions for which the rule is audited.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The value of the <em>identity</em> parameter cannot be cast as a <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or the <em>auditFlags</em> parameter contains an invalid value.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value of the <em>accessMask</em> parameter is zero, or the <em>inheritanceFlags</em> or <em>propagationFlags</em> parameters contain unrecognized flag values.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: AuditRule.AuditRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n- uid: System.Security.AccessControl.AuditRule.AuditFlags\n  commentId: P:System.Security.AccessControl.AuditRule.AuditFlags\n  id: AuditFlags\n  parent: System.Security.AccessControl.AuditRule\n  langs:\n  - csharp\n  - vb\n  name: AuditFlags\n  fullName: System.Security.AccessControl.AuditRule.AuditFlags\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuditFlags\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 114\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the audit flags for this audit rule.</p>\\n\"\n  syntax:\n    content: public AuditFlags AuditFlags { get; }\n    content.vb: Public ReadOnly Property AuditFlags As AuditFlags\n    parameters: []\n    return:\n      type: System.Security.AccessControl.AuditFlags\n      description: \"\\n<p>A bitwise combination of the enumeration values. This combination specifies the audit conditions for this audit rule.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: AuditRule.AuditFlags\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.AuthorizationRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuthorizationRule\n  fullName: System.Security.AccessControl.AuthorizationRule\n  commentId: T:System.Security.AccessControl.AuthorizationRule\n  nameWithType: AuthorizationRule\n- uid: System.Security.AccessControl.AuthorizationRule.AccessMask\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: AccessMask\n  fullName: System.Security.AccessControl.AuthorizationRule.AccessMask\n  commentId: P:System.Security.AccessControl.AuthorizationRule.AccessMask\n  nameWithType: AuthorizationRule.AccessMask\n- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IdentityReference\n  nameWithType: AuthorizationRule.IdentityReference\n- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  nameWithType: AuthorizationRule.InheritanceFlags\n- uid: System.Security.AccessControl.AuthorizationRule.IsInherited\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IsInherited\n  fullName: System.Security.AccessControl.AuthorizationRule.IsInherited\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IsInherited\n  nameWithType: AuthorizationRule.IsInherited\n- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  nameWithType: AuthorizationRule.PropagationFlags\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n  commentId: T:System.Security.Principal.IdentityReference\n  nameWithType: IdentityReference\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n  commentId: T:System.Security.AccessControl.InheritanceFlags\n  nameWithType: InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n  commentId: T:System.Security.AccessControl.PropagationFlags\n  nameWithType: PropagationFlags\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n  commentId: T:System.Security.AccessControl.AuditFlags\n  nameWithType: AuditFlags\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}