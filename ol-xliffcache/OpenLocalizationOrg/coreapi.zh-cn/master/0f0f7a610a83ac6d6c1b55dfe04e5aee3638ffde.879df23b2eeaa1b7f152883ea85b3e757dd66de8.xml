{"nodes":[{"pos":[1645,1658],"content":"UTF32Encoding","needQuote":true,"nodes":[{"content":"UTF32Encoding","pos":[0,13]}]},{"pos":[5716,5731],"content":"UTF32Encoding()","needQuote":true,"nodes":[{"content":"UTF32Encoding()","pos":[0,15]}]},{"pos":[6716,6747],"content":"UTF32Encoding(Boolean, Boolean)","needQuote":true,"nodes":[{"content":"UTF32Encoding(Boolean, Boolean)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to use the big endian byte order (most significant byte first), or &lt;strong&gt;false&lt;/strong&gt; to use the little endian byte order (least significant byte first).","pos":[7783,7969],"source":"\\n<p>\\n<strong>true</strong> to use the big endian byte order (most significant byte first), or <strong>false</strong> to use the little endian byte order (least significant byte first)."},{"content":"&lt;/p&gt;\\n","pos":[7970,7976],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to specify that a Unicode byte order mark is provided; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[8049,8167],"source":"\\n<p>\\n<strong>true</strong> to specify that a Unicode byte order mark is provided; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8168,8174],"source":" </p>\\n"},{"pos":[8719,8759],"content":"UTF32Encoding(Boolean, Boolean, Boolean)","needQuote":true,"nodes":[{"content":"UTF32Encoding(Boolean, Boolean, Boolean)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to use the big endian byte order (most significant byte first), or &lt;strong&gt;false&lt;/strong&gt; to use the little endian byte order (least significant byte first).","pos":[9834,10020],"source":"\\n<p>\\n<strong>true</strong> to use the big endian byte order (most significant byte first), or <strong>false</strong> to use the little endian byte order (least significant byte first)."},{"content":"&lt;/p&gt;\\n","pos":[10021,10027],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to specify that a Unicode byte order mark is provided; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[10100,10218],"source":"\\n<p>\\n<strong>true</strong> to specify that a Unicode byte order mark is provided; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10219,10225],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to specify that an exception should be thrown when an invalid encoding is detected; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[10309,10456],"source":"\\n<p>\\n<strong>true</strong> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10457,10463],"source":" </p>\\n"},{"pos":[10925,10939],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[12875,12901],"content":"GetByteCount(Char*, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char*, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A pointer to the first character to encode.","pos":[13845,13893],"source":"\\n<p>A pointer to the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[13894,13900],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[13963,14003],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[14004,14010],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[14069,14146],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14340,14387],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14388,14394],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[14511,14674],"source":"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[14675,14681],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;chars&lt;/em&gt; contains an invalid sequence of characters.","pos":[14778,14873],"source":"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters."},{"content":"&lt;/p&gt;\\n","pos":[14874,14880],"source":" </p>\\n"},{"pos":[16694,16728],"content":"GetByteCount(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[17658,17726],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[17727,17733],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[17796,17844],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[17845,17851],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[17914,17954],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[17955,17961],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[18020,18097],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[18305,18352],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[18353,18359],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[18476,18762],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[18763,18769],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;chars&lt;/em&gt; contains an invalid sequence of characters.","pos":[18866,18961],"source":"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters."},{"content":"&lt;/p&gt;\\n","pos":[18962,18968],"source":" </p>\\n"},{"pos":[20502,20522],"content":"GetByteCount(String)","needQuote":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[21598,21675],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[21857,21900],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[21901,21907],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[22024,22129],"source":"\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[22130,22136],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;s&lt;/em&gt; contains an invalid sequence of characters.","pos":[22233,22324],"source":"\\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters."},{"content":"&lt;/p&gt;\\n","pos":[22325,22331],"source":" </p>\\n"},{"pos":[23742,23778],"content":"GetBytes(Char*, Int32, Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char*, Int32, Byte*, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A pointer to the first character to encode.","pos":[24845,24893],"source":"\\n<p>A pointer to the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[24894,24900],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[24967,25007],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[25008,25014],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A pointer to the location at which to start writing the resulting sequence of bytes.","pos":[25077,25166],"source":"\\n<p>A pointer to the location at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[25167,25173],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to write.","pos":[25240,25282],"source":"\\n<p>The maximum number of bytes to write."},{"content":"&lt;/p&gt;\\n","pos":[25283,25289],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written at the location indicated by the &lt;em&gt;bytes&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[25348,25452],"source":"\\n<p>The actual number of bytes written at the location indicated by the <em>bytes</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[25668,25780],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[25781,25787],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; is less than zero.","pos":[25904,25970],"source":"\\n<p>\\n<em>charCount</em> or <em>byteCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[25971,25977],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;chars&lt;/em&gt; contains an invalid sequence of characters.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; is less than the resulting number of bytes.","pos":[26074,26256],"source":"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteCount</em> is less than the resulting number of bytes."},{"content":"&lt;/p&gt;\\n","pos":[26257,26263],"source":" </p>\\n"},{"pos":[28110,28155],"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[29169,29237],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[29238,29244],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[29311,29359],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[29360,29366],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[29433,29473],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[29474,29480],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.","pos":[29544,29607],"source":"\\n<p>The byte array to contain the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[29608,29614],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.","pos":[29681,29754],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[29755,29761],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[29820,29886],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[30117,30229],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[30230,30236],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[30353,30637],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[30638,30644],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;chars&lt;/em&gt; contains an invalid sequence of characters.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[30741,30989],"source":"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[30990,30996],"source":" </p>\\n"},{"pos":[32689,32734],"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[33994,34042],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[34043,34049],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[34116,34156],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[34157,34163],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.","pos":[34227,34290],"source":"\\n<p>The byte array to contain the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[34291,34297],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.","pos":[34364,34437],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[34438,34444],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[34503,34569],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[34800,34908],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[34909,34915],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[35032,35316],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[35317,35323],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;s&lt;/em&gt; contains an invalid sequence of characters.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[35420,35664],"source":"\\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[35665,35671],"source":" </p>\\n"},{"pos":[37253,37279],"content":"GetCharCount(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte*, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A pointer to the first byte to decode.","pos":[38223,38266],"source":"\\n<p>A pointer to the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[38267,38273],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[38336,38371],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[38372,38378],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[38437,38526],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[38720,38767],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[38768,38774],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[38891,39054],"source":"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[39055,39061],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.","pos":[39158,39248],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[39249,39255],"source":" </p>\\n"},{"pos":[41039,41073],"content":"GetCharCount(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[42004,42067],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[42068,42074],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[42137,42180],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[42181,42187],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[42250,42285],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[42286,42292],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[42351,42440],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[42648,42695],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[42696,42702],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[42819,43105],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[43106,43112],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.","pos":[43209,43299],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[43300,43306],"source":" </p>\\n"},{"pos":[44912,44948],"content":"GetChars(Byte*, Int32, Char*, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte*, Int32, Char*, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A pointer to the first byte to decode.","pos":[46015,46058],"source":"\\n<p>A pointer to the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[46059,46065],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[46132,46167],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[46168,46174],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A pointer to the location at which to start writing the resulting set of characters.","pos":[46237,46326],"source":"\\n<p>A pointer to the location at which to start writing the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[46327,46333],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to write.","pos":[46400,46447],"source":"\\n<p>The maximum number of characters to write."},{"content":"&lt;/p&gt;\\n","pos":[46448,46454],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written at the location indicated by &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n","pos":[46513,46608],"source":"\\n<p>The actual number of characters written at the location indicated by <em>chars</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[46824,46936],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[46937,46943],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; is less than zero.","pos":[47060,47126],"source":"\\n<p>\\n<em>byteCount</em> or <em>charCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[47127,47133],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; is less than the resulting number of characters.","pos":[47230,47412],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\\n<p>-or- </p>\\n<p>\\n<em>charCount</em> is less than the resulting number of characters."},{"content":"&lt;/p&gt;\\n","pos":[47413,47419],"source":" </p>\\n"},{"pos":[49447,49492],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[50506,50569],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[50570,50576],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[50643,50686],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[50687,50693],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[50760,50795],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[50796,50802],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character array to contain the resulting set of characters.","pos":[50866,50934],"source":"\\n<p>The character array to contain the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[50935,50941],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting set of characters.","pos":[51008,51081],"source":"\\n<p>The index at which to start writing the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[51082,51088],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written into &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n","pos":[51147,51218],"source":"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[51449,51561],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[51562,51568],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteindex&lt;/em&gt; and &lt;em&gt;byteCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; is not a valid index in &lt;em&gt;chars&lt;/em&gt;.","pos":[51685,51969],"source":"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>."},{"content":"&lt;/p&gt;\\n","pos":[51970,51976],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; does not have enough capacity from &lt;em&gt;charIndex&lt;/em&gt; to the end of the array to accommodate the resulting characters.","pos":[52073,52321],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters."},{"content":"&lt;/p&gt;\\n","pos":[52322,52328],"source":" </p>\\n"},{"pos":[54004,54016],"content":"GetDecoder()","needQuote":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[56042,56054],"content":"GetEncoder()","needQuote":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[57903,57916],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[59200,59222],"content":"GetMaxByteCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[59998,60038],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[60039,60045],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes produced by encoding the specified number of characters.&lt;/p&gt;\\n","pos":[60104,60199],"source":"\\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[60395,60562],"source":"\\n<p>\\n<em>charCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[60563,60569],"source":" </p>\\n"},{"pos":[61934,61956],"content":"GetMaxCharCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[62732,62767],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[62768,62774],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters produced by decoding the specified number of bytes.","pos":[62833,62922],"source":"\\n<p>The maximum number of characters produced by decoding the specified number of bytes."},{"content":"&lt;/p&gt;\\n","pos":[62923,62929],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[63125,63292],"source":"\\n<p>\\n<em>byteCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[63293,63299],"source":" </p>\\n"},{"pos":[64791,64804],"content":"GetPreamble()","needQuote":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"pos":[66322,66353],"content":"GetString(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[67224,67287],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[67288,67294],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[67357,67400],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[67401,67407],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[67470,67505],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[67506,67512],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string that contains the results of decoding the specified sequence of bytes.","pos":[67572,67656],"source":"\\n<p>A string that contains the results of decoding the specified sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[67657,67663],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[67868,67915],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[67916,67922],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.","pos":[68039,68202],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[68203,68209],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.","pos":[68306,68396],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[68397,68403],"source":" </p>\\n"},{"pos":[69938,69949],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[70095,70101],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70258,70266],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[70430,70440],"content":"ICloneable","needQuote":true,"nodes":[{"content":"ICloneable","pos":[0,10]}]},{"pos":[70682,70717],"content":"Convert(Encoding, Encoding, Byte[])","needQuote":true,"nodes":[{"content":"Convert(Encoding, Encoding, Byte[])","pos":[0,35]}]},{"pos":[71088,71095],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[71170,71171],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71228,71236],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[71304,71305]},{"pos":[71367,71375],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[71443,71444]},{"pos":[71497,71501],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[71560,71562]},{"pos":[71593,71594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71727,71734],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[71809,71810],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71867,71875],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[71943,71944]},{"pos":[72006,72014],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[72082,72083]},{"pos":[72136,72140],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[72198,72200],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[72228,72229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72649,72698],"content":"Convert(Encoding, Encoding, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Convert(Encoding, Encoding, Byte[], Int32, Int32)","pos":[0,49]}]},{"pos":[73165,73172],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[73247,73248],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73305,73313],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[73381,73382]},{"pos":[73444,73452],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[73520,73521]},{"pos":[73574,73578],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[73637,73639]},{"content":",","pos":[73671,73672]},{"pos":[73726,73731],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[73791,73792]},{"pos":[73846,73851],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73910,73911],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74070,74077],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[74152,74153],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74210,74218],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[74286,74287]},{"pos":[74349,74357],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[74425,74426]},{"pos":[74479,74483],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[74541,74543],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[74572,74573]},{"pos":[74627,74632],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[74692,74693]},{"pos":[74747,74752],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74811,74812],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75242,75276],"content":"RegisterProvider(EncodingProvider)","needQuote":true,"nodes":[{"content":"RegisterProvider(EncodingProvider)","pos":[0,34]}]},{"pos":[75459,75475],"content":"RegisterProvider","needQuote":true,"nodes":[{"content":"RegisterProvider","pos":[0,16]}]},{"pos":[75559,75560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75625,75641],"content":"EncodingProvider","needQuote":true,"nodes":[{"content":"EncodingProvider","pos":[0,16]}]},{"pos":[75716,75717],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75832,75848],"content":"RegisterProvider","needQuote":true,"nodes":[{"content":"RegisterProvider","pos":[0,16]}]},{"pos":[75932,75933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75998,76014],"content":"EncodingProvider","needQuote":true,"nodes":[{"content":"EncodingProvider","pos":[0,16]}]},{"pos":[76089,76090],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76362,76380],"content":"GetEncoding(Int32)","needQuote":true,"nodes":[{"content":"GetEncoding(Int32)","pos":[0,18]}]},{"pos":[76521,76532],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[76611,76612],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76661,76666],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76725,76726],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76820,76831],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[76910,76911],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76960,76965],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[77024,77025],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77316,77368],"content":"GetEncoding(Int32, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"GetEncoding(Int32, EncoderFallback, DecoderFallback)","pos":[0,52]}]},{"pos":[77623,77634],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[77713,77714],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77763,77768],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[77828,77829]},{"pos":[77898,77913],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[77988,77989]},{"pos":[78058,78073],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[78147,78148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78298,78309],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[78388,78389],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78438,78443],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[78503,78504]},{"pos":[78573,78588],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[78663,78664]},{"pos":[78733,78748],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[78822,78823],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79149,79168],"content":"GetEncoding(String)","needQuote":true,"nodes":[{"content":"GetEncoding(String)","pos":[0,19]}]},{"pos":[79311,79322],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[79401,79402],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79452,79458],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[79518,79519],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79614,79625],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[79704,79705],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79755,79761],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[79821,79822],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80116,80169],"content":"GetEncoding(String, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"GetEncoding(String, EncoderFallback, DecoderFallback)","pos":[0,53]}]},{"pos":[80426,80437],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[80516,80517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80567,80573],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[80634,80635]},{"pos":[80704,80719],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[80794,80795]},{"pos":[80864,80879],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[80953,80954],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81105,81116],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[81195,81196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81246,81252],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[81313,81314]},{"pos":[81383,81398],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[81473,81474]},{"pos":[81543,81558],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[81632,81633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81947,81961],"content":"GetEncodings()","needQuote":true,"nodes":[{"content":"GetEncodings()","pos":[0,14]}]},{"pos":[82078,82090],"content":"GetEncodings","needQuote":true,"nodes":[{"content":"GetEncodings","pos":[0,12]}]},{"pos":[82170,82171],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82198,82199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82280,82292],"content":"GetEncodings","needQuote":true,"nodes":[{"content":"GetEncodings","pos":[0,12]}]},{"pos":[82372,82373],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82400,82401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82599,82606],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[82709,82714],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[82787,82788],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82815,82816],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82890,82895],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[82968,82969],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82996,82997],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83203,83223],"content":"GetByteCount(Char[])","needQuote":true,"nodes":[{"content":"GetByteCount(Char[])","pos":[0,20]}]},{"pos":[83464,83476],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[83556,83557],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83605,83609],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[83668,83670]},{"pos":[83701,83702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83798,83810],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[83890,83891],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83939,83943],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[84001,84003],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[84031,84032],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84318,84334],"content":"GetBytes(Char[])","needQuote":true,"nodes":[{"content":"GetBytes(Char[])","pos":[0,16]}]},{"pos":[84559,84567],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[84643,84644],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84692,84696],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[84755,84757]},{"pos":[84788,84789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84881,84889],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[84965,84966],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85014,85018],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[85076,85078],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[85106,85107],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85407,85437],"content":"GetBytes(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32)","pos":[0,30]}]},{"pos":[85758,85766],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[85842,85843],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85891,85895],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[85954,85956]},{"content":",","pos":[85988,85989]},{"pos":[86043,86048],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[86108,86109]},{"pos":[86163,86168],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[86227,86228],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86346,86354],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[86430,86431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86479,86483],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[86541,86543],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[86572,86573]},{"pos":[86627,86632],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[86692,86693]},{"pos":[86747,86752],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[86811,86812],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87140,87156],"content":"GetBytes(String)","needQuote":true,"nodes":[{"content":"GetBytes(String)","pos":[0,16]}]},{"pos":[87293,87301],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[87377,87378],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87428,87434],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[87494,87495],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87587,87595],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[87671,87672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87722,87728],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[87788,87789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88022,88042],"content":"GetCharCount(Byte[])","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[])","pos":[0,20]}]},{"pos":[88283,88295],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[88375,88376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88424,88428],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[88487,88489]},{"pos":[88520,88521],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88617,88629],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[88709,88710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88758,88762],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[88820,88822],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[88850,88851],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89137,89153],"content":"GetChars(Byte[])","needQuote":true,"nodes":[{"content":"GetChars(Byte[])","pos":[0,16]}]},{"pos":[89378,89386],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[89462,89463],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89511,89515],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[89574,89576]},{"pos":[89607,89608],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89700,89708],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[89784,89785],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89833,89837],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[89895,89897],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[89925,89926],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90226,90256],"content":"GetChars(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32)","pos":[0,30]}]},{"pos":[90577,90585],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[90661,90662],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90710,90714],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[90773,90775]},{"content":",","pos":[90807,90808]},{"pos":[90862,90867],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[90927,90928]},{"pos":[90982,90987],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[91046,91047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91165,91173],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[91249,91250],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91298,91302],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[91360,91362],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[91391,91392]},{"pos":[91446,91451],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[91511,91512]},{"pos":[91566,91571],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[91630,91631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91972,91995],"content":"GetString(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte*, Int32)","pos":[0,23]}]},{"pos":[92159,92168],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[92245,92246],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92294,92298],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[92389,92390]},{"pos":[92444,92449],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92508,92509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92614,92623],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[92700,92701],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92749,92753],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[92844,92845]},{"pos":[92899,92904],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92963,92964],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93208,93228],"content":"IsAlwaysNormalized()","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized()","pos":[0,20]}]},{"pos":[93357,93375],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[93461,93462],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93489,93490],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93577,93595],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[93681,93682],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93709,93710],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93964,94001],"content":"IsAlwaysNormalized(NormalizationForm)","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized(NormalizationForm)","pos":[0,37]}]},{"pos":[94190,94208],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[94294,94295],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94361,94378],"content":"NormalizationForm","needQuote":true,"nodes":[{"content":"NormalizationForm","pos":[0,17]}]},{"pos":[94454,94455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94573,94591],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[94677,94678],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94744,94761],"content":"NormalizationForm","needQuote":true,"nodes":[{"content":"NormalizationForm","pos":[0,17]}]},{"pos":[94837,94838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95115,95132],"content":"GetString(Byte[])","needQuote":true,"nodes":[{"content":"GetString(Byte[])","pos":[0,17]}]},{"pos":[95361,95370],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[95447,95448],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95496,95500],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[95559,95561]},{"pos":[95592,95593],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95686,95695],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[95772,95773],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95821,95825],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[95883,95885],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[95913,95914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96176,96184],"content":"BodyName","needQuote":true,"nodes":[{"content":"BodyName","pos":[0,8]}]},{"pos":[96405,96417],"content":"EncodingName","needQuote":true,"nodes":[{"content":"EncodingName","pos":[0,12]}]},{"pos":[96648,96658],"content":"HeaderName","needQuote":true,"nodes":[{"content":"HeaderName","pos":[0,10]}]},{"pos":[96880,96887],"content":"WebName","needQuote":true,"nodes":[{"content":"WebName","pos":[0,7]}]},{"pos":[97108,97123],"content":"WindowsCodePage","needQuote":true,"nodes":[{"content":"WindowsCodePage","pos":[0,15]}]},{"pos":[97369,97385],"content":"IsBrowserDisplay","needQuote":true,"nodes":[{"content":"IsBrowserDisplay","pos":[0,16]}]},{"pos":[97631,97644],"content":"IsBrowserSave","needQuote":true,"nodes":[{"content":"IsBrowserSave","pos":[0,13]}]},{"pos":[97885,97902],"content":"IsMailNewsDisplay","needQuote":true,"nodes":[{"content":"IsMailNewsDisplay","pos":[0,17]}]},{"pos":[98152,98166],"content":"IsMailNewsSave","needQuote":true,"nodes":[{"content":"IsMailNewsSave","pos":[0,14]}]},{"pos":[98405,98417],"content":"IsSingleByte","needQuote":true,"nodes":[{"content":"IsSingleByte","pos":[0,12]}]},{"pos":[98653,98668],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"pos":[98913,98928],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[99168,99178],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[99398,99403],"content":"ASCII","needQuote":true,"nodes":[{"content":"ASCII","pos":[0,5]}]},{"pos":[99611,99619],"content":"CodePage","needQuote":true,"nodes":[{"content":"CodePage","pos":[0,8]}]},{"pos":[99835,99842],"content":"Default","needQuote":true,"nodes":[{"content":"Default","pos":[0,7]}]},{"pos":[100055,100062],"content":"Unicode","needQuote":true,"nodes":[{"content":"Unicode","pos":[0,7]}]},{"pos":[100284,100300],"content":"BigEndianUnicode","needQuote":true,"nodes":[{"content":"BigEndianUnicode","pos":[0,16]}]},{"pos":[100537,100541],"content":"UTF7","needQuote":true,"nodes":[{"content":"UTF7","pos":[0,4]}]},{"pos":[100742,100746],"content":"UTF8","needQuote":true,"nodes":[{"content":"UTF8","pos":[0,4]}]},{"pos":[100948,100953],"content":"UTF32","needQuote":true,"nodes":[{"content":"UTF32","pos":[0,5]}]},{"pos":[101147,101157],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[101252,101260],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[101329,101330],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101357,101358],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101428,101436],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[101505,101506],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101533,101534],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101731,101753],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[101901,101907],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[101974,101975],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102025,102031],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[102092,102093]},{"pos":[102148,102154],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[102214,102215],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102312,102318],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[102385,102386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102436,102442],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[102503,102504]},{"pos":[102559,102565],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[102625,102626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102871,102902],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[103068,103083],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[103159,103160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103210,103216],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[103277,103278]},{"pos":[103333,103339],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[103399,103400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103506,103521],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[103597,103598],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103648,103654],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[103715,103716]},{"pos":[103771,103777],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[103837,103838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104064,104073],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[104166,104173],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[104241,104242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104269,104270],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104339,104346],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[104414,104415],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104442,104443],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104618,104635],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[104744,104759],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[104835,104836],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104863,104864],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104941,104956],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[105032,105033],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105060,105061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105206,105212],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[105344,105351],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[105541,105555],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[105688,105694],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[105768,105769],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105819,105825],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[105885,105886],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105976,105982],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[106056,106057],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106107,106113],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[106173,106174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106415,106441],"content":"GetByteCount(Char*, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char*, Int32)","pos":[0,26]}]},{"pos":[106611,106623],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[106703,106704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106752,106756],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[106847,106848]},{"pos":[106902,106907],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[106966,106967],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107075,107087],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[107167,107168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107216,107220],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[107311,107312]},{"pos":[107366,107371],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[107430,107431],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107604,107609],"content":"Char*","needQuote":true,"nodes":[{"content":"Char*","pos":[0,5]}]},{"pos":[107681,107685],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[107807,107811],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[107978,107983],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[108199,108233],"content":"GetByteCount(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char[], Int32, Int32)","pos":[0,34]}]},{"pos":[108570,108582],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[108662,108663],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108711,108715],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[108774,108776]},{"content":",","pos":[108808,108809]},{"pos":[108863,108868],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[108928,108929]},{"pos":[108983,108988],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[109047,109048],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109170,109182],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[109262,109263],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109311,109315],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[109373,109375],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[109404,109405]},{"pos":[109459,109464],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[109524,109525]},{"pos":[109579,109584],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[109643,109644],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109903,109909],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[110029,110033],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[110092,110094]},{"pos":[110157,110161],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[110219,110221],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[110402,110422],"content":"GetByteCount(String)","needQuote":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"pos":[110567,110579],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[110659,110660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110710,110716],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[110776,110777],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110873,110885],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[110965,110966],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111016,111022],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[111082,111083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111276,111282],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[111509,111545],"content":"GetBytes(Char*, Int32, Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char*, Int32, Byte*, Int32)","pos":[0,36]}]},{"pos":[111761,111769],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[111845,111846],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111894,111898],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[111989,111990]},{"pos":[112044,112049],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112109,112110]},{"pos":[112163,112167],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[112258,112259]},{"pos":[112313,112318],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[112377,112378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112508,112516],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[112592,112593],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112641,112645],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[112736,112737]},{"pos":[112791,112796],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112856,112857]},{"pos":[112910,112914],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[113005,113006]},{"pos":[113060,113065],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[113124,113125],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113330,113335],"content":"Byte*","needQuote":true,"nodes":[{"content":"Byte*","pos":[0,5]}]},{"pos":[113407,113411],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[113533,113537],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[113802,113847],"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"pos":[114268,114276],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[114352,114353],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114401,114405],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[114464,114466]},{"content":",","pos":[114498,114499]},{"pos":[114553,114558],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114618,114619]},{"pos":[114673,114678],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114738,114739]},{"pos":[114792,114796],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[114855,114857]},{"content":",","pos":[114889,114890]},{"pos":[114944,114949],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[115008,115009],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115154,115162],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[115238,115239],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115287,115291],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[115349,115351],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[115380,115381]},{"pos":[115435,115440],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[115500,115501]},{"pos":[115555,115560],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[115620,115621]},{"pos":[115674,115678],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[115736,115738],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[115767,115768]},{"pos":[115822,115827],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[115886,115887],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116191,116197],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[116317,116321],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[116380,116382]},{"pos":[116445,116449],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[116507,116509],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[116739,116784],"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"pos":[117205,117213],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[117289,117290],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117340,117346],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[117407,117408]},{"pos":[117462,117467],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117527,117528]},{"pos":[117582,117587],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117647,117648]},{"pos":[117701,117705],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[117764,117766]},{"content":",","pos":[117798,117799]},{"pos":[117853,117858],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[117917,117918],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118063,118071],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[118147,118148],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118198,118204],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[118265,118266]},{"pos":[118320,118325],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[118385,118386]},{"pos":[118440,118445],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[118505,118506]},{"pos":[118559,118563],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[118621,118623],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[118652,118653]},{"pos":[118707,118712],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[118771,118772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119173,119199],"content":"GetCharCount(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte*, Int32)","pos":[0,26]}]},{"pos":[119369,119381],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[119461,119462],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119510,119514],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[119605,119606]},{"pos":[119660,119665],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[119724,119725],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119833,119845],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[119925,119926],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119974,119978],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[120069,120070]},{"pos":[120124,120129],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[120188,120189],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120474,120508],"content":"GetCharCount(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32)","pos":[0,34]}]},{"pos":[120845,120857],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[120937,120938],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120986,120990],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[121049,121051]},{"content":",","pos":[121083,121084]},{"pos":[121138,121143],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[121203,121204]},{"pos":[121258,121263],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[121322,121323],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121445,121457],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[121537,121538],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121586,121590],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[121648,121650],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[121679,121680]},{"pos":[121734,121739],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[121799,121800]},{"pos":[121854,121859],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[121918,121919],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122297,122333],"content":"GetChars(Byte*, Int32, Char*, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte*, Int32, Char*, Int32)","pos":[0,36]}]},{"pos":[122549,122557],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[122633,122634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122682,122686],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[122777,122778]},{"pos":[122832,122837],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[122897,122898]},{"pos":[122951,122955],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[123046,123047]},{"pos":[123101,123106],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[123165,123166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123296,123304],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[123380,123381],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123429,123433],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[123524,123525]},{"pos":[123579,123584],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[123644,123645]},{"pos":[123698,123702],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[123793,123794]},{"pos":[123848,123853],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[123912,123913],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124253,124298],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","pos":[0,45]}]},{"pos":[124719,124727],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[124803,124804],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124852,124856],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[124915,124917]},{"content":",","pos":[124949,124950]},{"pos":[125004,125009],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[125069,125070]},{"pos":[125124,125129],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[125189,125190]},{"pos":[125243,125247],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[125306,125308]},{"content":",","pos":[125340,125341]},{"pos":[125395,125400],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[125459,125460],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125605,125613],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[125689,125690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125738,125742],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[125800,125802],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[125831,125832]},{"pos":[125886,125891],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[125951,125952]},{"pos":[126006,126011],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126071,126072]},{"pos":[126125,126129],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[126187,126189],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[126218,126219]},{"pos":[126273,126278],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[126337,126338],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126710,126722],"content":"GetDecoder()","needQuote":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[126835,126845],"content":"GetDecoder","needQuote":true,"nodes":[{"content":"GetDecoder","pos":[0,10]}]},{"pos":[126923,126924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126951,126952],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127031,127041],"content":"GetDecoder","needQuote":true,"nodes":[{"content":"GetDecoder","pos":[0,10]}]},{"pos":[127119,127120],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127147,127148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127327,127334],"content":"Decoder","needQuote":true,"nodes":[{"content":"Decoder","pos":[0,7]}]},{"pos":[127523,127535],"content":"GetEncoder()","needQuote":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[127648,127658],"content":"GetEncoder","needQuote":true,"nodes":[{"content":"GetEncoder","pos":[0,10]}]},{"pos":[127736,127737],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127764,127765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127844,127854],"content":"GetEncoder","needQuote":true,"nodes":[{"content":"GetEncoder","pos":[0,10]}]},{"pos":[127932,127933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127960,127961],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128140,128147],"content":"Encoder","needQuote":true,"nodes":[{"content":"Encoder","pos":[0,7]}]},{"pos":[128337,128350],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[128465,128476],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[128555,128556],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128583,128584],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128664,128675],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[128754,128755],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128782,128783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129003,129025],"content":"GetMaxByteCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"pos":[129174,129189],"content":"GetMaxByteCount","needQuote":true,"nodes":[{"content":"GetMaxByteCount","pos":[0,15]}]},{"pos":[129272,129273],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129322,129327],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[129386,129387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129485,129500],"content":"GetMaxByteCount","needQuote":true,"nodes":[{"content":"GetMaxByteCount","pos":[0,15]}]},{"pos":[129583,129584],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129633,129638],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[129697,129698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129945,129967],"content":"GetMaxCharCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"pos":[130116,130131],"content":"GetMaxCharCount","needQuote":true,"nodes":[{"content":"GetMaxCharCount","pos":[0,15]}]},{"pos":[130214,130215],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130264,130269],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[130328,130329],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130427,130442],"content":"GetMaxCharCount","needQuote":true,"nodes":[{"content":"GetMaxCharCount","pos":[0,15]}]},{"pos":[130525,130526],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130575,130580],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[130639,130640],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130869,130882],"content":"GetPreamble()","needQuote":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"pos":[130997,131008],"content":"GetPreamble","needQuote":true,"nodes":[{"content":"GetPreamble","pos":[0,11]}]},{"pos":[131087,131088],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131115,131116],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131196,131207],"content":"GetPreamble","needQuote":true,"nodes":[{"content":"GetPreamble","pos":[0,11]}]},{"pos":[131286,131287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131314,131315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131556,131587],"content":"GetString(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte[], Int32, Int32)","pos":[0,31]}]},{"pos":[131912,131921],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[131998,131999],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[132047,132051],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[132110,132112]},{"content":",","pos":[132144,132145]},{"pos":[132199,132204],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[132264,132265]},{"pos":[132319,132324],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[132383,132384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132503,132512],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[132589,132590],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[132638,132642],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[132700,132702],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[132731,132732]},{"pos":[132786,132791],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[132851,132852]},{"pos":[132906,132911],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[132970,132971],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[133256,133277],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[133471,133498],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[133717,133734],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[133918,133942],"content":"EncoderFallbackException","needQuote":true,"nodes":[{"content":"EncoderFallbackException","pos":[0,24]}]},{"pos":[134157,134181],"content":"DecoderFallbackException","needQuote":true,"nodes":[{"content":"DecoderFallbackException","pos":[0,24]}]}],"content":"items:\n- uid: System.Text.UTF32Encoding\n  commentId: T:System.Text.UTF32Encoding\n  id: UTF32Encoding\n  parent: System.Text\n  children:\n  - System.Text.UTF32Encoding.#ctor\n  - System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)\n  - System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  - System.Text.UTF32Encoding.Equals(System.Object)\n  - System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)\n  - System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - System.Text.UTF32Encoding.GetByteCount(System.String)\n  - System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  - System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)\n  - System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.UTF32Encoding.GetDecoder\n  - System.Text.UTF32Encoding.GetEncoder\n  - System.Text.UTF32Encoding.GetHashCode\n  - System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  - System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n  - System.Text.UTF32Encoding.GetPreamble\n  - System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: UTF32Encoding\n  fullName: System.Text.UTF32Encoding\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UTF32Encoding\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 22\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Represents a UTF-32 encoding of Unicode characters.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      public sealed class UTF32Encoding : Encoding, ICloneable\n    content.vb: >-\n      <Serializable>\n\n      Public NotInheritable Class UTF32Encoding\n          Inherits Encoding\n          Implements ICloneable\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  - type: System.Text.Encoder\n    commentId: T:System.Text.Encoder\n  - type: System.Text.Decoder\n    commentId: T:System.Text.Decoder\n  - type: System.Text.UTF8Encoding\n    commentId: T:System.Text.UTF8Encoding\n  - type: System.Text.ASCIIEncoding\n    commentId: T:System.Text.ASCIIEncoding\n  - type: System.Text.UnicodeEncoding\n    commentId: T:System.Text.UnicodeEncoding\n  - type: System.Globalization.UnicodeCategory\n    commentId: T:System.Globalization.UnicodeCategory\n  - type: System.Globalization.CharUnicodeInfo\n    commentId: T:System.Globalization.CharUnicodeInfo\n  inheritance:\n  - System.Object\n  - System.Text.Encoding\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  - System.Text.Encoding.GetEncoding(System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncoding(System.String)\n  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncodings\n  - System.Text.Encoding.Clone\n  - System.Text.Encoding.GetByteCount(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.String)\n  - System.Text.Encoding.GetCharCount(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  - System.Text.Encoding.IsAlwaysNormalized\n  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  - System.Text.Encoding.GetString(System.Byte[])\n  - System.Text.Encoding.BodyName\n  - System.Text.Encoding.EncodingName\n  - System.Text.Encoding.HeaderName\n  - System.Text.Encoding.WebName\n  - System.Text.Encoding.WindowsCodePage\n  - System.Text.Encoding.IsBrowserDisplay\n  - System.Text.Encoding.IsBrowserSave\n  - System.Text.Encoding.IsMailNewsDisplay\n  - System.Text.Encoding.IsMailNewsSave\n  - System.Text.Encoding.IsSingleByte\n  - System.Text.Encoding.EncoderFallback\n  - System.Text.Encoding.DecoderFallback\n  - System.Text.Encoding.IsReadOnly\n  - System.Text.Encoding.ASCII\n  - System.Text.Encoding.CodePage\n  - System.Text.Encoding.Default\n  - System.Text.Encoding.Unicode\n  - System.Text.Encoding.BigEndianUnicode\n  - System.Text.Encoding.UTF7\n  - System.Text.Encoding.UTF8\n  - System.Text.Encoding.UTF32\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: UTF32Encoding\n- uid: System.Text.UTF32Encoding.#ctor\n  commentId: M:System.Text.UTF32Encoding.#ctor\n  id: '#ctor'\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: UTF32Encoding()\n  fullName: System.Text.UTF32Encoding.UTF32Encoding()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 42\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.UTF32Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public UTF32Encoding()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UTF32Encoding.UTF32Encoding()\n- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)\n  commentId: M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean)'\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: UTF32Encoding(Boolean, Boolean)\n  fullName: System.Text.UTF32Encoding.UTF32Encoding(System.Boolean, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 47\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.UTF32Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. Parameters specify whether to use the big endian byte order and whether the <xref href=\\\"System.Text.UTF32Encoding.GetPreamble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method returns a Unicode Unicode byte order mark.</p>\\n\"\n  syntax:\n    content: public UTF32Encoding(bool bigEndian, bool byteOrderMark)\n    content.vb: Public Sub New(bigEndian As Boolean, byteOrderMark As Boolean)\n    parameters:\n    - id: bigEndian\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to use the big endian byte order (most significant byte first), or <strong>false</strong> to use the little endian byte order (least significant byte first). </p>\\n\"\n    - id: byteOrderMark\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to specify that a Unicode byte order mark is provided; otherwise, <strong>false</strong>. </p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetPreamble\n    commentId: M:System.Text.UTF32Encoding.GetPreamble\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UTF32Encoding.UTF32Encoding(Boolean, Boolean)\n- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  commentId: M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: UTF32Encoding(Boolean, Boolean, Boolean)\n  fullName: System.Text.UTF32Encoding.UTF32Encoding(System.Boolean, System.Boolean, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 53\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.UTF32Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</p>\\n\"\n  syntax:\n    content: public UTF32Encoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters)\n    content.vb: Public Sub New(bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidCharacters As Boolean)\n    parameters:\n    - id: bigEndian\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to use the big endian byte order (most significant byte first), or <strong>false</strong> to use the little endian byte order (least significant byte first). </p>\\n\"\n    - id: byteOrderMark\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to specify that a Unicode byte order mark is provided; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: throwOnInvalidCharacters\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <strong>false</strong>. </p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetPreamble\n    commentId: M:System.Text.UTF32Encoding.GetPreamble\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UTF32Encoding.UTF32Encoding(Boolean, Boolean, Boolean)\n- uid: System.Text.UTF32Encoding.Equals(System.Object)\n  commentId: M:System.Text.UTF32Encoding.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Text.UTF32Encoding.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 1204\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current <xref href=\\\"System.Text.UTF32Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare with the current object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is an instance of <xref href=\\\"System.Text.UTF32Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and is equal to the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Text.Encoding.Equals(System.Object)\n  seealso:\n  - type: System.Text.UTF32Encoding.#ctor\n    commentId: M:System.Text.UTF32Encoding.#ctor\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF32Encoding.Equals(Object)\n- uid: System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)\n  commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)\n  id: GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char*, Int32)\n  fullName: System.Text.UTF32Encoding.GetByteCount(System.Char*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 143\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      public override int GetByteCount(char *chars, int count)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      Public Overrides Function GetByteCount(chars As Char *, count As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the first character to encode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.UTF32Encoding.GetEncoder\n    commentId: M:System.Text.UTF32Encoding.GetEncoder\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF32Encoding.GetByteCount(Char*, Int32)\n- uid: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char[], Int32, Int32)\n  fullName: System.Text.UTF32Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 96\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetByteCount(char[] chars, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetByteCount(chars As Char(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.UTF32Encoding.GetEncoder\n    commentId: M:System.Text.UTF32Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF32Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)\n  name.vb: GetByteCount(Char(), Int32, Int32)\n  nameWithType: UTF32Encoding.GetByteCount(Char[], Int32, Int32)\n  nameWithType.vb: UTF32Encoding.GetByteCount(Char(), Int32, Int32)\n- uid: System.Text.UTF32Encoding.GetByteCount(System.String)\n  commentId: M:System.Text.UTF32Encoding.GetByteCount(System.String)\n  id: GetByteCount(System.String)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(String)\n  fullName: System.Text.UTF32Encoding.GetByteCount(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 127\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding the characters in the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetByteCount(string s)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetByteCount(s As String) As Integer\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the set of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.String)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.UTF32Encoding.GetEncoder\n    commentId: M:System.Text.UTF32Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF32Encoding.GetByteCount(String)\n- uid: System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  commentId: M:System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: System.Text.UTF32Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 257\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      public override int GetBytes(char *chars, int charCount, byte *bytes, int byteCount)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      Public Overrides Function GetBytes(chars As Char *, charCount As Integer, bytes As Byte *, byteCount As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the location at which to start writing the resulting sequence of bytes. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to write. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written at the location indicated by the <em>bytes</em> parameter.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charCount</em> or <em>byteCount</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteCount</em> is less than the resulting number of bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetEncoder\n    commentId: M:System.Text.UTF32Encoding.GetEncoder\n  - type: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF32Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n- uid: System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: System.Text.UTF32Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 213\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters from the specified character array into the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetEncoder\n    commentId: M:System.Text.UTF32Encoding.GetEncoder\n  - type: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF32Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  nameWithType: UTF32Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: UTF32Encoding.GetBytes(Char(), Int32, Int32, Byte(), Int32)\n- uid: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: System.Text.UTF32Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 166\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters from the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetBytes(s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the set of characters to encode. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetEncoder\n    commentId: M:System.Text.UTF32Encoding.GetEncoder\n  - type: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF32Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)\n  nameWithType: UTF32Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType.vb: UTF32Encoding.GetBytes(String, Int32, Int32, Byte(), Int32)\n- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)\n  commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)\n  id: GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte*, Int32)\n  fullName: System.Text.UTF32Encoding.GetCharCount(System.Byte*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 312\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      public override int GetCharCount(byte *bytes, int count)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      Public Overrides Function GetCharCount(bytes As Byte *, count As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - type: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UTF32Encoding.GetDecoder\n    commentId: M:System.Text.UTF32Encoding.GetDecoder\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF32Encoding.GetCharCount(Byte*, Int32)\n- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte[], Int32, Int32)\n  fullName: System.Text.UTF32Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 282\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetCharCount(byte[] bytes, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - type: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UTF32Encoding.GetDecoder\n    commentId: M:System.Text.UTF32Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF32Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetCharCount(Byte(), Int32, Int32)\n  nameWithType: UTF32Encoding.GetCharCount(Byte[], Int32, Int32)\n  nameWithType.vb: UTF32Encoding.GetCharCount(Byte(), Int32, Int32)\n- uid: System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  fullName: System.Text.UTF32Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 378\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      public override int GetChars(byte *bytes, int byteCount, char *chars, int charCount)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      Public Overrides Function GetChars(bytes As Byte *, byteCount As Integer, chars As Char *, charCount As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the first byte to decode. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the location at which to start writing the resulting set of characters. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to write. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written at the location indicated by <em>chars</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteCount</em> or <em>charCount</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\\n<p>-or- </p>\\n<p>\\n<em>charCount</em> is less than the resulting number of characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UTF32Encoding.GetDecoder\n    commentId: M:System.Text.UTF32Encoding.GetDecoder\n  - type: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF32Encoding.GetChars(Byte*, Int32, Char*, Int32)\n- uid: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Text.UTF32Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 334\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array to contain the resulting set of characters. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting set of characters. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UTF32Encoding.GetDecoder\n    commentId: M:System.Text.UTF32Encoding.GetDecoder\n  - type: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF32Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)\n  nameWithType: UTF32Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: UTF32Encoding.GetChars(Byte(), Int32, Int32, Char(), Int32)\n- uid: System.Text.UTF32Encoding.GetDecoder\n  commentId: M:System.Text.UTF32Encoding.GetDecoder\n  id: GetDecoder\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetDecoder()\n  fullName: System.Text.UTF32Encoding.GetDecoder()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDecoder\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 1120\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</p>\\n\"\n  syntax:\n    content: public override Decoder GetDecoder()\n    content.vb: Public Overrides Function GetDecoder As Decoder\n    return:\n      type: System.Text.Decoder\n      description: \"\\n<p>A <xref href=\\\"System.Text.Decoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetDecoder\n  seealso:\n  - type: System.Text.Decoder\n    commentId: T:System.Text.Decoder\n  - type: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF32Encoding.GetEncoder\n    commentId: M:System.Text.UTF32Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF32Encoding.GetDecoder()\n- uid: System.Text.UTF32Encoding.GetEncoder\n  commentId: M:System.Text.UTF32Encoding.GetEncoder\n  id: GetEncoder\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetEncoder()\n  fullName: System.Text.UTF32Encoding.GetEncoder()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEncoder\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 1126\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</p>\\n\"\n  syntax:\n    content: public override Encoder GetEncoder()\n    content.vb: Public Overrides Function GetEncoder As Encoder\n    return:\n      type: System.Text.Encoder\n      description: \"\\n<p>A <xref href=\\\"System.Text.Encoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetEncoder\n  seealso:\n  - type: System.Text.Encoder\n    commentId: T:System.Text.Encoder\n  - type: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF32Encoding.GetDecoder\n    commentId: M:System.Text.UTF32Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF32Encoding.GetEncoder()\n- uid: System.Text.UTF32Encoding.GetHashCode\n  commentId: M:System.Text.UTF32Encoding.GetHashCode\n  id: GetHashCode\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Text.UTF32Encoding.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 1219\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Returns the hash code for the current instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for the current <xref href=\\\"System.Text.UTF32Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Text.Encoding.GetHashCode\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF32Encoding.GetHashCode()\n- uid: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  id: GetMaxByteCount(System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetMaxByteCount(Int32)\n  fullName: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMaxByteCount\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 1132\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\\n\"\n  syntax:\n    content: public override int GetMaxByteCount(int charCount)\n    content.vb: Public Overrides Function GetMaxByteCount(charCount As Integer) As Integer\n    parameters:\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UTF32Encoding.GetEncoder\n    commentId: M:System.Text.UTF32Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF32Encoding.GetMaxByteCount(Int32)\n- uid: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n  commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n  id: GetMaxCharCount(System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetMaxCharCount(Int32)\n  fullName: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMaxCharCount\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 1155\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\\n\"\n  syntax:\n    content: public override int GetMaxCharCount(int byteCount)\n    content.vb: Public Overrides Function GetMaxCharCount(byteCount As Integer) As Integer\n    parameters:\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters produced by decoding the specified number of bytes. </p>\\n\"\n  overridden: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF32Encoding.GetDecoder\n    commentId: M:System.Text.UTF32Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF32Encoding.GetMaxCharCount(Int32)\n- uid: System.Text.UTF32Encoding.GetPreamble\n  commentId: M:System.Text.UTF32Encoding.GetPreamble\n  id: GetPreamble\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetPreamble()\n  fullName: System.Text.UTF32Encoding.GetPreamble()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetPreamble\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 1185\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Returns a Unicode byte order mark encoded in UTF-32 format, if the <xref href=\\\"System.Text.UTF32Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is configured to supply one. </p>\\n\"\n  syntax:\n    content: public override byte[] GetPreamble()\n    content.vb: Public Overrides Function GetPreamble As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing the Unicode byte order mark, if the <xref href=\\\"System.Text.UTF32Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is configured to supply one. Otherwise, this method returns a zero-length byte array. </p>\\n\"\n  overridden: System.Text.Encoding.GetPreamble\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UTF32Encoding.GetPreamble()\n- uid: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  id: GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UTF32Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetString(Byte[], Int32, Int32)\n  fullName: System.Text.UTF32Encoding.GetString(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetString\n    path: src/mscorlib/src/System/Text/UTF32Encoding.cs\n    startLine: 403\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a range of bytes from a byte array into a string.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override string GetString(byte[] bytes, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetString(bytes As Byte(), index As Integer, count As Integer) As String\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains the results of decoding the specified sequence of bytes. </p>\\n\"\n  overridden: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for a complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UTF32Encoding.GetDecoder\n    commentId: M:System.Text.UTF32Encoding.GetDecoder\n  - type: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UTF32Encoding.GetString(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetString(Byte(), Int32, Int32)\n  nameWithType: UTF32Encoding.GetString(Byte[], Int32, Int32)\n  nameWithType.vb: UTF32Encoding.GetString(Byte(), Int32, Int32)\nreferences:\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  nameWithType: Encoding\n  commentId: T:System.Text.Encoding\n- uid: System.ICloneable\n  parent: System\n  isExternal: true\n  name: ICloneable\n  fullName: System.ICloneable\n  nameWithType: ICloneable\n  commentId: T:System.ICloneable\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Convert(Encoding, Encoding, Byte[])\n  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[])\n  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte())\n  name.vb: Convert(Encoding, Encoding, Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])\n  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte())\n  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte(), System.Int32, System.Int32)\n  name.vb: Convert(Encoding, Encoding, Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: RegisterProvider(EncodingProvider)\n  fullName: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  spec.csharp:\n  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n    name: RegisterProvider\n    fullName: System.Text.Encoding.RegisterProvider\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.EncodingProvider\n    name: EncodingProvider\n    fullName: System.Text.EncodingProvider\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n    name: RegisterProvider\n    fullName: System.Text.Encoding.RegisterProvider\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.EncodingProvider\n    name: EncodingProvider\n    fullName: System.Text.EncodingProvider\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.RegisterProvider(EncodingProvider)\n  commentId: M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n- uid: System.Text.Encoding.GetEncoding(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(Int32)\n  fullName: System.Text.Encoding.GetEncoding(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(Int32)\n  commentId: M:System.Text.Encoding.GetEncoding(System.Int32)\n- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.GetEncoding(System.Int32, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  commentId: M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n- uid: System.Text.Encoding.GetEncoding(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(String)\n  fullName: System.Text.Encoding.GetEncoding(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.String)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.String)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(String)\n  commentId: M:System.Text.Encoding.GetEncoding(System.String)\n- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(String, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.GetEncoding(System.String, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)\n  commentId: M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n- uid: System.Text.Encoding.GetEncodings\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncodings()\n  fullName: System.Text.Encoding.GetEncodings()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncodings\n    name: GetEncodings\n    fullName: System.Text.Encoding.GetEncodings\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncodings\n    name: GetEncodings\n    fullName: System.Text.Encoding.GetEncodings\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncodings()\n  commentId: M:System.Text.Encoding.GetEncodings\n- uid: System.Text.Encoding.Clone\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Clone()\n  fullName: System.Text.Encoding.Clone()\n  spec.csharp:\n  - uid: System.Text.Encoding.Clone\n    name: Clone\n    fullName: System.Text.Encoding.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Clone\n    name: Clone\n    fullName: System.Text.Encoding.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Clone()\n  commentId: M:System.Text.Encoding.Clone\n- uid: System.Text.Encoding.GetByteCount(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char[])\n  fullName: System.Text.Encoding.GetByteCount(System.Char[])\n  fullname.vb: System.Text.Encoding.GetByteCount(System.Char())\n  name.vb: GetByteCount(Char())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[])\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[])\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char[])\n  nameWithType.vb: Encoding.GetByteCount(Char())\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n- uid: System.Text.Encoding.GetBytes(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[])\n  fullName: System.Text.Encoding.GetBytes(System.Char[])\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char())\n  name.vb: GetBytes(Char())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[])\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[])\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[])\n  nameWithType.vb: Encoding.GetBytes(Char())\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[])\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[], Int32, Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)\n  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetBytes(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(String)\n  fullName: System.Text.Encoding.GetBytes(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.String)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.String)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(String)\n  commentId: M:System.Text.Encoding.GetBytes(System.String)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte[])\n  fullName: System.Text.Encoding.GetCharCount(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte())\n  name.vb: GetCharCount(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[])\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[])\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte[])\n  nameWithType.vb: Encoding.GetCharCount(Byte())\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n- uid: System.Text.Encoding.GetChars(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[])\n  fullName: System.Text.Encoding.GetChars(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte())\n  name.vb: GetChars(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[])\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[])\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[])\n  nameWithType.vb: Encoding.GetChars(Byte())\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[])\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte*, Int32)\n  fullName: System.Text.Encoding.GetString(System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetString(System.Byte*,System.Int32)\n- uid: System.Text.Encoding.IsAlwaysNormalized\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsAlwaysNormalized()\n  fullName: System.Text.Encoding.IsAlwaysNormalized()\n  spec.csharp:\n  - uid: System.Text.Encoding.IsAlwaysNormalized\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.IsAlwaysNormalized\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.IsAlwaysNormalized()\n  commentId: M:System.Text.Encoding.IsAlwaysNormalized\n- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsAlwaysNormalized(NormalizationForm)\n  fullName: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  spec.csharp:\n  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.NormalizationForm\n    name: NormalizationForm\n    fullName: System.Text.NormalizationForm\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.NormalizationForm\n    name: NormalizationForm\n    fullName: System.Text.NormalizationForm\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.IsAlwaysNormalized(NormalizationForm)\n  commentId: M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n- uid: System.Text.Encoding.GetString(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte[])\n  fullName: System.Text.Encoding.GetString(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetString(System.Byte())\n  name.vb: GetString(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte[])\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte[])\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte[])\n  nameWithType.vb: Encoding.GetString(Byte())\n  commentId: M:System.Text.Encoding.GetString(System.Byte[])\n- uid: System.Text.Encoding.BodyName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: BodyName\n  fullName: System.Text.Encoding.BodyName\n  nameWithType: Encoding.BodyName\n  commentId: P:System.Text.Encoding.BodyName\n- uid: System.Text.Encoding.EncodingName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: EncodingName\n  fullName: System.Text.Encoding.EncodingName\n  nameWithType: Encoding.EncodingName\n  commentId: P:System.Text.Encoding.EncodingName\n- uid: System.Text.Encoding.HeaderName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: HeaderName\n  fullName: System.Text.Encoding.HeaderName\n  nameWithType: Encoding.HeaderName\n  commentId: P:System.Text.Encoding.HeaderName\n- uid: System.Text.Encoding.WebName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: WebName\n  fullName: System.Text.Encoding.WebName\n  nameWithType: Encoding.WebName\n  commentId: P:System.Text.Encoding.WebName\n- uid: System.Text.Encoding.WindowsCodePage\n  parent: System.Text.Encoding\n  isExternal: true\n  name: WindowsCodePage\n  fullName: System.Text.Encoding.WindowsCodePage\n  nameWithType: Encoding.WindowsCodePage\n  commentId: P:System.Text.Encoding.WindowsCodePage\n- uid: System.Text.Encoding.IsBrowserDisplay\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsBrowserDisplay\n  fullName: System.Text.Encoding.IsBrowserDisplay\n  nameWithType: Encoding.IsBrowserDisplay\n  commentId: P:System.Text.Encoding.IsBrowserDisplay\n- uid: System.Text.Encoding.IsBrowserSave\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsBrowserSave\n  fullName: System.Text.Encoding.IsBrowserSave\n  nameWithType: Encoding.IsBrowserSave\n  commentId: P:System.Text.Encoding.IsBrowserSave\n- uid: System.Text.Encoding.IsMailNewsDisplay\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsMailNewsDisplay\n  fullName: System.Text.Encoding.IsMailNewsDisplay\n  nameWithType: Encoding.IsMailNewsDisplay\n  commentId: P:System.Text.Encoding.IsMailNewsDisplay\n- uid: System.Text.Encoding.IsMailNewsSave\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsMailNewsSave\n  fullName: System.Text.Encoding.IsMailNewsSave\n  nameWithType: Encoding.IsMailNewsSave\n  commentId: P:System.Text.Encoding.IsMailNewsSave\n- uid: System.Text.Encoding.IsSingleByte\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsSingleByte\n  fullName: System.Text.Encoding.IsSingleByte\n  nameWithType: Encoding.IsSingleByte\n  commentId: P:System.Text.Encoding.IsSingleByte\n- uid: System.Text.Encoding.EncoderFallback\n  parent: System.Text.Encoding\n  isExternal: true\n  name: EncoderFallback\n  fullName: System.Text.Encoding.EncoderFallback\n  nameWithType: Encoding.EncoderFallback\n  commentId: P:System.Text.Encoding.EncoderFallback\n- uid: System.Text.Encoding.DecoderFallback\n  parent: System.Text.Encoding\n  isExternal: true\n  name: DecoderFallback\n  fullName: System.Text.Encoding.DecoderFallback\n  nameWithType: Encoding.DecoderFallback\n  commentId: P:System.Text.Encoding.DecoderFallback\n- uid: System.Text.Encoding.IsReadOnly\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Text.Encoding.IsReadOnly\n  nameWithType: Encoding.IsReadOnly\n  commentId: P:System.Text.Encoding.IsReadOnly\n- uid: System.Text.Encoding.ASCII\n  parent: System.Text.Encoding\n  isExternal: true\n  name: ASCII\n  fullName: System.Text.Encoding.ASCII\n  nameWithType: Encoding.ASCII\n  commentId: P:System.Text.Encoding.ASCII\n- uid: System.Text.Encoding.CodePage\n  parent: System.Text.Encoding\n  isExternal: true\n  name: CodePage\n  fullName: System.Text.Encoding.CodePage\n  nameWithType: Encoding.CodePage\n  commentId: P:System.Text.Encoding.CodePage\n- uid: System.Text.Encoding.Default\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Default\n  fullName: System.Text.Encoding.Default\n  nameWithType: Encoding.Default\n  commentId: P:System.Text.Encoding.Default\n- uid: System.Text.Encoding.Unicode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Unicode\n  fullName: System.Text.Encoding.Unicode\n  nameWithType: Encoding.Unicode\n  commentId: P:System.Text.Encoding.Unicode\n- uid: System.Text.Encoding.BigEndianUnicode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: BigEndianUnicode\n  fullName: System.Text.Encoding.BigEndianUnicode\n  nameWithType: Encoding.BigEndianUnicode\n  commentId: P:System.Text.Encoding.BigEndianUnicode\n- uid: System.Text.Encoding.UTF7\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF7\n  fullName: System.Text.Encoding.UTF7\n  nameWithType: Encoding.UTF7\n  commentId: P:System.Text.Encoding.UTF7\n- uid: System.Text.Encoding.UTF8\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF8\n  fullName: System.Text.Encoding.UTF8\n  nameWithType: Encoding.UTF8\n  commentId: P:System.Text.Encoding.UTF8\n- uid: System.Text.Encoding.UTF32\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF32\n  fullName: System.Text.Encoding.UTF32\n  nameWithType: Encoding.UTF32\n  commentId: P:System.Text.Encoding.UTF32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Text.Encoding.Equals(System.Object)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Text.Encoding.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Text.Encoding.Equals(System.Object)\n    name: Equals\n    fullName: System.Text.Encoding.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Equals(System.Object)\n    name: Equals\n    fullName: System.Text.Encoding.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Equals(Object)\n  commentId: M:System.Text.Encoding.Equals(System.Object)\n- uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char*, Int32)\n  fullName: System.Text.Encoding.GetByteCount(System.Char*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char*, Int32)\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n- uid: System.Char*\n  name: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Char*\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char[], Int32, Int32)\n  fullName: System.Text.Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)\n  name.vb: GetByteCount(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char[], Int32, Int32)\n  nameWithType.vb: Encoding.GetByteCount(Char(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Text.Encoding.GetByteCount(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(String)\n  fullName: System.Text.Encoding.GetByteCount(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.String)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.String)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(String)\n  commentId: M:System.Text.Encoding.GetByteCount(System.String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n- uid: System.Byte*\n  name: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Byte*\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType.vb: Encoding.GetBytes(String, Int32, Int32, Byte(), Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte*, Int32)\n  fullName: System.Text.Encoding.GetCharCount(System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetCharCount(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetCharCount(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte*, Int32, Char*, Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32, Char(), Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n- uid: System.Text.Encoding.GetDecoder\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetDecoder()\n  fullName: System.Text.Encoding.GetDecoder()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetDecoder\n    name: GetDecoder\n    fullName: System.Text.Encoding.GetDecoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetDecoder\n    name: GetDecoder\n    fullName: System.Text.Encoding.GetDecoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetDecoder()\n  commentId: M:System.Text.Encoding.GetDecoder\n- uid: System.Text.Decoder\n  parent: System.Text\n  isExternal: false\n  name: Decoder\n  fullName: System.Text.Decoder\n  nameWithType: Decoder\n  commentId: T:System.Text.Decoder\n- uid: System.Text.Encoding.GetEncoder\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoder()\n  fullName: System.Text.Encoding.GetEncoder()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoder\n    name: GetEncoder\n    fullName: System.Text.Encoding.GetEncoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoder\n    name: GetEncoder\n    fullName: System.Text.Encoding.GetEncoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoder()\n  commentId: M:System.Text.Encoding.GetEncoder\n- uid: System.Text.Encoder\n  parent: System.Text\n  isExternal: false\n  name: Encoder\n  fullName: System.Text.Encoder\n  nameWithType: Encoder\n  commentId: T:System.Text.Encoder\n- uid: System.Text.Encoding.GetHashCode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Text.Encoding.GetHashCode()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetHashCode\n    name: GetHashCode\n    fullName: System.Text.Encoding.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetHashCode\n    name: GetHashCode\n    fullName: System.Text.Encoding.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetHashCode()\n  commentId: M:System.Text.Encoding.GetHashCode\n- uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetMaxByteCount(Int32)\n  fullName: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    name: GetMaxByteCount\n    fullName: System.Text.Encoding.GetMaxByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    name: GetMaxByteCount\n    fullName: System.Text.Encoding.GetMaxByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetMaxByteCount(Int32)\n  commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n- uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetMaxCharCount(Int32)\n  fullName: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    name: GetMaxCharCount\n    fullName: System.Text.Encoding.GetMaxCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    name: GetMaxCharCount\n    fullName: System.Text.Encoding.GetMaxCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetMaxCharCount(Int32)\n  commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n- uid: System.Text.Encoding.GetPreamble\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetPreamble()\n  fullName: System.Text.Encoding.GetPreamble()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetPreamble\n    name: GetPreamble\n    fullName: System.Text.Encoding.GetPreamble\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetPreamble\n    name: GetPreamble\n    fullName: System.Text.Encoding.GetPreamble\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetPreamble()\n  commentId: M:System.Text.Encoding.GetPreamble\n- uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetString(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetString(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetString(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetString(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Text.EncoderFallbackException\n  isExternal: false\n  name: EncoderFallbackException\n  fullName: System.Text.EncoderFallbackException\n  nameWithType: EncoderFallbackException\n  commentId: T:System.Text.EncoderFallbackException\n- uid: System.Text.DecoderFallbackException\n  isExternal: false\n  name: DecoderFallbackException\n  fullName: System.Text.DecoderFallbackException\n  nameWithType: DecoderFallbackException\n  commentId: T:System.Text.DecoderFallbackException\n"}