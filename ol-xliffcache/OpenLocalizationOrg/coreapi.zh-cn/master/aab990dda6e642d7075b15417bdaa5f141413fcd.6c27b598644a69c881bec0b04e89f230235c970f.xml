{"nodes":[{"pos":[585,594],"content":"DriveInfo","needQuote":true,"nodes":[{"content":"DriveInfo","pos":[0,9]}]},{"pos":[2039,2056],"content":"DriveInfo(String)","needQuote":true,"nodes":[{"content":"DriveInfo(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A valid drive path or drive letter.","pos":[2782,2822],"source":"\\n<p>A valid drive path or drive letter."},{"content":"This can be either uppercase or lowercase, 'a' to 'z'.","pos":[2823,2877]},{"content":"A null value is not valid.","pos":[2878,2904]},{"content":"&lt;/p&gt;\\n","pos":[2905,2911],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The drive letter cannot be &lt;strong&gt;null&lt;/strong&gt;.","pos":[3030,3084],"source":"\\n<p>The drive letter cannot be <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3085,3091],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The first letter of &lt;em&gt;driveName&lt;/em&gt; is not an uppercase or lowercase letter from 'a' to 'z'.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;driveName&lt;/em&gt; does not refer to a valid drive.&lt;/p&gt;\\n","pos":[3188,3369],"source":"\\n<p>The first letter of <em>driveName</em> is not an uppercase or lowercase letter from 'a' to 'z'.</p>\\n<p>-or-</p>\\n<p>\\n<em>driveName</em> does not refer to a valid drive.</p>\\n"},{"pos":[3787,3805],"content":"AvailableFreeSpace","needQuote":true,"nodes":[{"content":"AvailableFreeSpace","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The amount of free space available on the drive, in bytes.&lt;/p&gt;\\n","pos":[4550,4619],"source":"\\n<p>The amount of free space available on the drive, in bytes.</p>\\n"},{"content":"\\n&lt;p&gt;Access to the drive information is denied.&lt;/p&gt;\\n","pos":[4750,4803],"source":"\\n<p>Access to the drive information is denied.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred (for example, a disk error or a drive was not ready).","pos":[4894,4974],"source":"\\n<p>An I/O error occurred (for example, a disk error or a drive was not ready)."},{"content":"&lt;/p&gt;\\n","pos":[4975,4981],"source":" </p>\\n"},{"pos":[5276,5287],"content":"DriveFormat","needQuote":true,"nodes":[{"content":"DriveFormat","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The name of the file system on the specified drive.&lt;/p&gt;\\n","pos":[5999,6061],"source":"\\n<p>The name of the file system on the specified drive.</p>\\n"},{"content":"\\n&lt;p&gt;Access to the drive information is denied.&lt;/p&gt;\\n","pos":[6192,6245],"source":"\\n<p>Access to the drive information is denied.</p>\\n"},{"content":"\\n&lt;p&gt;The drive does not exist or is not mapped.&lt;/p&gt;\\n","pos":[6358,6411],"source":"\\n<p>The drive does not exist or is not mapped.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred (for example, a disk error or a drive was not ready).","pos":[6502,6582],"source":"\\n<p>An I/O error occurred (for example, a disk error or a drive was not ready)."},{"content":"&lt;/p&gt;\\n","pos":[6583,6589],"source":" </p>\\n"},{"pos":[6871,6880],"content":"DriveType","needQuote":true,"nodes":[{"content":"DriveType","pos":[0,9]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies a drive type.","pos":[7606,7669],"source":"\\n<p>One of the enumeration values that specifies a drive type."},{"content":"&lt;/p&gt;\\n","pos":[7670,7676],"source":" </p>\\n"},{"pos":[7950,7957],"content":"IsReady","needQuote":true,"nodes":[{"content":"IsReady","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the drive is ready; &lt;strong&gt;false&lt;/strong&gt; if the drive is not ready.&lt;/p&gt;\\n","pos":[8650,8757],"source":"\\n<p>\\n<strong>true</strong> if the drive is ready; <strong>false</strong> if the drive is not ready.</p>\\n"},{"pos":[9020,9024],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The name of the drive.&lt;/p&gt;\\n","pos":[9625,9658],"source":"\\n<p>The name of the drive.</p>\\n"},{"pos":[9945,9958],"content":"RootDirectory","needQuote":true,"nodes":[{"content":"RootDirectory","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An object that contains the root directory of the drive.&lt;/p&gt;\\n","pos":[10616,10683],"source":"\\n<p>An object that contains the root directory of the drive.</p>\\n"},{"pos":[10982,10996],"content":"TotalFreeSpace","needQuote":true,"nodes":[{"content":"TotalFreeSpace","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The total free space available on a drive, in bytes.&lt;/p&gt;\\n","pos":[11726,11789],"source":"\\n<p>The total free space available on a drive, in bytes.</p>\\n"},{"content":"\\n&lt;p&gt;Access to the drive information is denied.&lt;/p&gt;\\n","pos":[11920,11973],"source":"\\n<p>Access to the drive information is denied.</p>\\n"},{"content":"\\n&lt;p&gt;The drive is not mapped or does not exist.&lt;/p&gt;\\n","pos":[12086,12139],"source":"\\n<p>The drive is not mapped or does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred (for example, a disk error or a drive was not ready).","pos":[12230,12310],"source":"\\n<p>An I/O error occurred (for example, a disk error or a drive was not ready)."},{"content":"&lt;/p&gt;\\n","pos":[12311,12317],"source":" </p>\\n"},{"pos":[12602,12611],"content":"TotalSize","needQuote":true,"nodes":[{"content":"TotalSize","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The total size of the drive, in bytes.&lt;/p&gt;\\n","pos":[13312,13361],"source":"\\n<p>The total size of the drive, in bytes.</p>\\n"},{"content":"\\n&lt;p&gt;Access to the drive information is denied.&lt;/p&gt;\\n","pos":[13492,13545],"source":"\\n<p>Access to the drive information is denied.</p>\\n"},{"content":"\\n&lt;p&gt;The drive is not mapped or does not exist.","pos":[13658,13705],"source":"\\n<p>The drive is not mapped or does not exist."},{"content":"&lt;/p&gt;\\n","pos":[13706,13712],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred (for example, a disk error or a drive was not ready).","pos":[13803,13883],"source":"\\n<p>An I/O error occurred (for example, a disk error or a drive was not ready)."},{"content":"&lt;/p&gt;\\n","pos":[13884,13890],"source":" </p>\\n"},{"pos":[14176,14187],"content":"VolumeLabel","needQuote":true,"nodes":[{"content":"VolumeLabel","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The volume label.&lt;/p&gt;\\n","pos":[14923,14951],"source":"\\n<p>The volume label.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred (for example, a disk error or a drive was not ready).","pos":[15056,15136],"source":"\\n<p>An I/O error occurred (for example, a disk error or a drive was not ready)."},{"content":"&lt;/p&gt;\\n","pos":[15137,15143],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The drive is not mapped or does not exist.&lt;/p&gt;\\n","pos":[15256,15309],"source":"\\n<p>The drive is not mapped or does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[15424,15478],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[15479,15485],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The volume label is being set on a network or CD-ROM drive.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;Access to the drive information is denied.&lt;/p&gt;\\n","pos":[15602,15736],"source":"\\n<p>The volume label is being set on a network or CD-ROM drive.</p>\\n<p>-or-</p>\\n<p>Access to the drive information is denied.</p>\\n"},{"pos":[16137,16148],"content":"GetDrives()","needQuote":true,"nodes":[{"content":"GetDrives()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;An I/O error occurred (for example, a disk error or a drive was not ready).","pos":[17052,17132],"source":"\\n<p>An I/O error occurred (for example, a disk error or a drive was not ready)."},{"content":"&lt;/p&gt;\\n","pos":[17133,17139],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission.","pos":[17256,17310],"source":"\\n<p>The caller does not have the required permission."},{"content":"&lt;/p&gt;\\n","pos":[17311,17317],"source":" </p>\\n"},{"pos":[17725,17735],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The name of the drive.&lt;/p&gt;\\n","pos":[18331,18364],"source":"\\n<p>The name of the drive.</p>\\n"},{"pos":[18582,18591],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[18731,18737],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18910,18924],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19043,19049],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19116,19117],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19167,19173],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19233,19234],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19317,19323],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19390,19391],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19441,19447],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19507,19508],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19722,19744],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[19892,19898],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19965,19966],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20016,20022],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20083,20084]},{"pos":[20139,20145],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20205,20206],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20303,20309],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20376,20377],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20427,20433],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20494,20495]},{"pos":[20550,20556],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20616,20617],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20862,20893],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21059,21074],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21150,21151],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21201,21207],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21268,21269]},{"pos":[21324,21330],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21390,21391],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21497,21512],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21588,21589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21639,21645],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21706,21707]},{"pos":[21762,21768],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21828,21829],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22059,22072],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[22173,22184],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22256,22257],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22284,22285],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22358,22369],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22441,22442],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22469,22470],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22645,22654],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[22747,22754],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22822,22823],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22850,22851],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22920,22927],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22995,22996],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23023,23024],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23199,23216],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[23325,23340],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23416,23417],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23444,23445],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23522,23537],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23613,23614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23641,23642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23787,23793],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[23924,23930],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[24074,24079],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[24230,24239],"content":"DriveType","needQuote":true,"nodes":[{"content":"DriveType","pos":[0,9]}]},{"pos":[24400,24407],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24568,24581],"content":"DirectoryInfo","needQuote":true,"nodes":[{"content":"DirectoryInfo","pos":[0,13]}]},{"pos":[24724,24735],"content":"DriveInfo[]","needQuote":true,"nodes":[{"content":"DriveInfo[]","pos":[0,11]}]},{"pos":[24884,24893],"content":"DriveInfo","needQuote":true,"nodes":[{"content":"DriveInfo","pos":[0,9]}]},{"content":"[]","pos":[24939,24941]},{"pos":[25012,25021],"content":"DriveInfo","needQuote":true,"nodes":[{"content":"DriveInfo","pos":[0,9]}]},{"pos":[25066,25068],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[25226,25236],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25331,25339],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25408,25409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25436,25437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25507,25515],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25584,25585],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25612,25613],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25766,25787],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[25988,26005],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[26204,26231],"content":"UnauthorizedAccessException","needQuote":true,"nodes":[{"content":"UnauthorizedAccessException","pos":[0,27]}]},{"pos":[26450,26461],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]},{"pos":[26629,26651],"content":"DriveNotFoundException","needQuote":true,"nodes":[{"content":"DriveNotFoundException","pos":[0,22]}]},{"pos":[26853,26870],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]}],"content":"items:\n- uid: System.IO.DriveInfo\n  commentId: T:System.IO.DriveInfo\n  id: DriveInfo\n  parent: System.IO\n  children:\n  - System.IO.DriveInfo.#ctor(System.String)\n  - System.IO.DriveInfo.AvailableFreeSpace\n  - System.IO.DriveInfo.DriveFormat\n  - System.IO.DriveInfo.DriveType\n  - System.IO.DriveInfo.GetDrives\n  - System.IO.DriveInfo.IsReady\n  - System.IO.DriveInfo.Name\n  - System.IO.DriveInfo.RootDirectory\n  - System.IO.DriveInfo.ToString\n  - System.IO.DriveInfo.TotalFreeSpace\n  - System.IO.DriveInfo.TotalSize\n  - System.IO.DriveInfo.VolumeLabel\n  langs:\n  - csharp\n  - vb\n  name: DriveInfo\n  fullName: System.IO.DriveInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DriveInfo\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 42\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Provides access to information on a drive.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public sealed class DriveInfo : ISerializable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class DriveInfo\n          Implements ISerializable\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: DriveInfo\n- uid: System.IO.DriveInfo.#ctor(System.String)\n  commentId: M:System.IO.DriveInfo.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.IO.DriveInfo\n  langs:\n  - csharp\n  - vb\n  name: DriveInfo(String)\n  fullName: System.IO.DriveInfo.DriveInfo(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 50\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Provides access to information on the specified drive.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public DriveInfo(string driveName)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub New(driveName As String)\n    parameters:\n    - id: driveName\n      type: System.String\n      description: \"\\n<p>A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z'. A null value is not valid. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The drive letter cannot be <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The first letter of <em>driveName</em> is not an uppercase or lowercase letter from 'a' to 'z'.</p>\\n<p>-or-</p>\\n<p>\\n<em>driveName</em> does not refer to a valid drive.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DriveInfo.DriveInfo(String)\n- uid: System.IO.DriveInfo.AvailableFreeSpace\n  commentId: P:System.IO.DriveInfo.AvailableFreeSpace\n  id: AvailableFreeSpace\n  parent: System.IO.DriveInfo\n  langs:\n  - csharp\n  - vb\n  name: AvailableFreeSpace\n  fullName: System.IO.DriveInfo.AvailableFreeSpace\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AvailableFreeSpace\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 139\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Indicates the amount of available free space on a drive, in bytes.</p>\\n\"\n  syntax:\n    content: >-\n      public long AvailableFreeSpace\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property AvailableFreeSpace As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The amount of free space available on the drive, in bytes.</p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>Access to the drive information is denied.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DriveInfo.AvailableFreeSpace\n- uid: System.IO.DriveInfo.DriveFormat\n  commentId: P:System.IO.DriveInfo.DriveFormat\n  id: DriveFormat\n  parent: System.IO.DriveInfo\n  langs:\n  - csharp\n  - vb\n  name: DriveFormat\n  fullName: System.IO.DriveInfo.DriveFormat\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DriveFormat\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 108\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Gets the name of the file system, such as NTFS or FAT32.</p>\\n\"\n  syntax:\n    content: >-\n      public string DriveFormat\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property DriveFormat As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the file system on the specified drive.</p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>Access to the drive information is denied.</p>\\n\"\n  - type: System.IO.DriveNotFoundException\n    commentId: T:System.IO.DriveNotFoundException\n    description: \"\\n<p>The drive does not exist or is not mapped.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DriveInfo.DriveFormat\n- uid: System.IO.DriveInfo.DriveType\n  commentId: P:System.IO.DriveInfo.DriveType\n  id: DriveType\n  parent: System.IO.DriveInfo\n  langs:\n  - csharp\n  - vb\n  name: DriveType\n  fullName: System.IO.DriveInfo.DriveType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DriveType\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 100\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Gets the drive type, such as CD-ROM, removable, network, or fixed.</p>\\n\"\n  syntax:\n    content: >-\n      public DriveType DriveType\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property DriveType As DriveType\n    parameters: []\n    return:\n      type: System.IO.DriveType\n      description: \"\\n<p>One of the enumeration values that specifies a drive type. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DriveInfo.DriveType\n- uid: System.IO.DriveInfo.IsReady\n  commentId: P:System.IO.DriveInfo.IsReady\n  id: IsReady\n  parent: System.IO.DriveInfo\n  langs:\n  - csharp\n  - vb\n  name: IsReady\n  fullName: System.IO.DriveInfo.IsReady\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsReady\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 132\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Gets a value that indicates whether a drive is ready.</p>\\n\"\n  syntax:\n    content: >-\n      public bool IsReady\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property IsReady As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the drive is ready; <strong>false</strong> if the drive is not ready.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DriveInfo.IsReady\n- uid: System.IO.DriveInfo.Name\n  commentId: P:System.IO.DriveInfo.Name\n  id: Name\n  parent: System.IO.DriveInfo\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.IO.DriveInfo.Name\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Name\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 96\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Gets the name of a drive, such as C:\\\\.</p>\\n\"\n  syntax:\n    content: public string Name { get; }\n    content.vb: Public ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the drive.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DriveInfo.Name\n- uid: System.IO.DriveInfo.RootDirectory\n  commentId: P:System.IO.DriveInfo.RootDirectory\n  id: RootDirectory\n  parent: System.IO.DriveInfo\n  langs:\n  - csharp\n  - vb\n  name: RootDirectory\n  fullName: System.IO.DriveInfo.RootDirectory\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RootDirectory\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 202\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Gets the root directory of a drive.</p>\\n\"\n  syntax:\n    content: public DirectoryInfo RootDirectory { get; }\n    content.vb: Public ReadOnly Property RootDirectory As DirectoryInfo\n    parameters: []\n    return:\n      type: System.IO.DirectoryInfo\n      description: \"\\n<p>An object that contains the root directory of the drive.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DriveInfo.RootDirectory\n- uid: System.IO.DriveInfo.TotalFreeSpace\n  commentId: P:System.IO.DriveInfo.TotalFreeSpace\n  id: TotalFreeSpace\n  parent: System.IO.DriveInfo\n  langs:\n  - csharp\n  - vb\n  name: TotalFreeSpace\n  fullName: System.IO.DriveInfo.TotalFreeSpace\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TotalFreeSpace\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 156\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Gets the total amount of free space available on a drive, in bytes.</p>\\n\"\n  syntax:\n    content: >-\n      public long TotalFreeSpace\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property TotalFreeSpace As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The total free space available on a drive, in bytes.</p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>Access to the drive information is denied.</p>\\n\"\n  - type: System.IO.DriveNotFoundException\n    commentId: T:System.IO.DriveNotFoundException\n    description: \"\\n<p>The drive is not mapped or does not exist.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DriveInfo.TotalFreeSpace\n- uid: System.IO.DriveInfo.TotalSize\n  commentId: P:System.IO.DriveInfo.TotalSize\n  id: TotalSize\n  parent: System.IO.DriveInfo\n  langs:\n  - csharp\n  - vb\n  name: TotalSize\n  fullName: System.IO.DriveInfo.TotalSize\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TotalSize\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 173\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Gets the total size of storage space on a drive, in bytes.</p>\\n\"\n  syntax:\n    content: >-\n      public long TotalSize\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property TotalSize As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>The total size of the drive, in bytes.</p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>Access to the drive information is denied.</p>\\n\"\n  - type: System.IO.DriveNotFoundException\n    commentId: T:System.IO.DriveNotFoundException\n    description: \"\\n<p>The drive is not mapped or does not exist. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DriveInfo.TotalSize\n- uid: System.IO.DriveInfo.VolumeLabel\n  commentId: P:System.IO.DriveInfo.VolumeLabel\n  id: VolumeLabel\n  parent: System.IO.DriveInfo\n  langs:\n  - csharp\n  - vb\n  name: VolumeLabel\n  fullName: System.IO.DriveInfo.VolumeLabel\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: VolumeLabel\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 209\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Gets or sets the volume label of a drive.</p>\\n\"\n  syntax:\n    content: >-\n      public string VolumeLabel\n\n      {\n          [SecuritySafeCritical]\n          get;\n          [SecuritySafeCritical]\n          set;\n      }\n    content.vb: Public Property VolumeLabel As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The volume label.</p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\\n\"\n  - type: System.IO.DriveNotFoundException\n    commentId: T:System.IO.DriveNotFoundException\n    description: \"\\n<p>The drive is not mapped or does not exist.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The volume label is being set on a network or CD-ROM drive.</p>\\n<p>-or-</p>\\n<p>Access to the drive information is denied.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: DriveInfo.VolumeLabel\n- uid: System.IO.DriveInfo.GetDrives\n  commentId: M:System.IO.DriveInfo.GetDrives\n  id: GetDrives\n  parent: System.IO.DriveInfo\n  langs:\n  - csharp\n  - vb\n  name: GetDrives()\n  fullName: System.IO.DriveInfo.GetDrives()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDrives\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 192\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Retrieves the drive names of all logical drives on a computer.</p>\\n\"\n  syntax:\n    content: public static DriveInfo[] GetDrives()\n    content.vb: Public Shared Function GetDrives As DriveInfo()\n    return:\n      type: System.IO.DriveInfo[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.IO.DriveInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the logical drives on a computer.</p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The caller does not have the required permission. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DriveInfo.GetDrives()\n- uid: System.IO.DriveInfo.ToString\n  commentId: M:System.IO.DriveInfo.ToString\n  id: ToString\n  parent: System.IO.DriveInfo\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.IO.DriveInfo.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/DriveInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/IO/DriveInfo.cs\n    startLine: 259\n  assemblies:\n  - System.IO.FileSystem.DriveInfo\n  namespace: System.IO\n  summary: \"\\n<p>Returns a drive name as a string.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the drive.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DriveInfo.ToString()\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.IO.DriveType\n  parent: System.IO\n  isExternal: false\n  name: DriveType\n  fullName: System.IO.DriveType\n  nameWithType: DriveType\n  commentId: T:System.IO.DriveType\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IO.DirectoryInfo\n  parent: System.IO\n  isExternal: false\n  name: DirectoryInfo\n  fullName: System.IO.DirectoryInfo\n  nameWithType: DirectoryInfo\n  commentId: T:System.IO.DirectoryInfo\n- uid: System.IO.DriveInfo[]\n  name: DriveInfo[]\n  fullName: System.IO.DriveInfo[]\n  fullname.vb: System.IO.DriveInfo()\n  name.vb: DriveInfo()\n  spec.csharp:\n  - uid: System.IO.DriveInfo\n    name: DriveInfo\n    fullName: System.IO.DriveInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.IO.DriveInfo\n    name: DriveInfo\n    fullName: System.IO.DriveInfo\n  - name: ()\n    fullName: ()\n  nameWithType: DriveInfo[]\n  nameWithType.vb: DriveInfo()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  commentId: T:System.UnauthorizedAccessException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n- uid: System.IO.DriveNotFoundException\n  isExternal: false\n  name: DriveNotFoundException\n  fullName: System.IO.DriveNotFoundException\n  nameWithType: DriveNotFoundException\n  commentId: T:System.IO.DriveNotFoundException\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n"}