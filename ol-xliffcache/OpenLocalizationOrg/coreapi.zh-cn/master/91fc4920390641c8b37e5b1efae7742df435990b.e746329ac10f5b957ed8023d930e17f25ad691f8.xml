{"nodes":[{"pos":[1403,1416],"content":"ASCIIEncoding","needQuote":true,"nodes":[{"content":"ASCIIEncoding","pos":[0,13]}]},{"pos":[5057,5072],"content":"ASCIIEncoding()","needQuote":true,"nodes":[{"content":"ASCIIEncoding()","pos":[0,15]}]},{"pos":[5983,5995],"content":"IsSingleByte","needQuote":true,"nodes":[{"content":"IsSingleByte","pos":[0,12]}]},{"content":"\\n&lt;p&gt;This property is always &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6784,6841],"source":"\\n<p>This property is always <strong>true</strong>.</p>\\n"},{"pos":[7600,7626],"content":"GetByteCount(Char*, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char*, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A pointer to the first character to encode.&lt;/p&gt;\\n","pos":[8624,8678],"source":"\\n<p>A pointer to the first character to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.&lt;/p&gt;\\n","pos":[8741,8787],"source":"\\n<p>The number of characters to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[8846,8923],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9117,9164],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9165,9171],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[9288,9451],"source":"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[9452,9458],"source":" </p>\\n"},{"pos":[11272,11306],"content":"GetByteCount(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.&lt;/p&gt;\\n","pos":[12236,12310],"source":"\\n<p>The character array containing the set of characters to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.&lt;/p&gt;\\n","pos":[12373,12427],"source":"\\n<p>The index of the first character to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.&lt;/p&gt;\\n","pos":[12490,12536],"source":"\\n<p>The number of characters to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[12595,12672],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12880,12927],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12928,12934],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[13051,13337],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[13338,13344],"source":" </p>\\n"},{"pos":[14878,14898],"content":"GetByteCount(String)","needQuote":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[15984,16061],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[16243,16290],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[16291,16297],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[16414,16519],"source":"\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[16520,16526],"source":" </p>\\n"},{"pos":[17937,17973],"content":"GetBytes(Char*, Int32, Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char*, Int32, Byte*, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A pointer to the first character to encode.&lt;/p&gt;\\n","pos":[19094,19148],"source":"\\n<p>A pointer to the first character to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.&lt;/p&gt;\\n","pos":[19215,19261],"source":"\\n<p>The number of characters to encode.</p>\\n"},{"content":"\\n&lt;p&gt;A pointer to the location at which to start writing the resulting sequence of bytes.&lt;/p&gt;\\n","pos":[19324,19419],"source":"\\n<p>A pointer to the location at which to start writing the resulting sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to write.&lt;/p&gt;\\n","pos":[19486,19534],"source":"\\n<p>The maximum number of bytes to write.</p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written at the location indicated by &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[19593,19683],"source":"\\n<p>The actual number of bytes written at the location indicated by <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[19899,20011],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[20012,20018],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; is less than zero.","pos":[20135,20201],"source":"\\n<p>\\n<em>charCount</em> or <em>byteCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[20202,20208],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; is less than the resulting number of bytes.","pos":[20305,20374],"source":"\\n<p>\\n<em>byteCount</em> is less than the resulting number of bytes."},{"content":"&lt;/p&gt;\\n","pos":[20375,20381],"source":" </p>\\n"},{"pos":[22228,22273],"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.&lt;/p&gt;\\n","pos":[23287,23361],"source":"\\n<p>The character array containing the set of characters to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.&lt;/p&gt;\\n","pos":[23428,23482],"source":"\\n<p>The index of the first character to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.&lt;/p&gt;\\n","pos":[23549,23595],"source":"\\n<p>The number of characters to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.&lt;/p&gt;\\n","pos":[23659,23728],"source":"\\n<p>The byte array to contain the resulting sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.&lt;/p&gt;\\n","pos":[23795,23874],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[23933,23999],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[24230,24342],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24343,24349],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[24466,24750],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[24751,24757],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[24854,24989],"source":"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[24990,24996],"source":" </p>\\n"},{"pos":[26689,26734],"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The index of the first character to encode.&lt;/p&gt;\\n","pos":[28005,28059],"source":"\\n<p>The index of the first character to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.&lt;/p&gt;\\n","pos":[28126,28172],"source":"\\n<p>The number of characters to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.&lt;/p&gt;\\n","pos":[28236,28305],"source":"\\n<p>The byte array to contain the resulting sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.&lt;/p&gt;\\n","pos":[28372,28451],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[28510,28576],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28807,28915],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28916,28922],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[29039,29323],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[29324,29330],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[29427,29562],"source":"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[29563,29569],"source":" </p>\\n"},{"pos":[31151,31177],"content":"GetCharCount(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte*, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A pointer to the first byte to decode.&lt;/p&gt;\\n","pos":[32175,32224],"source":"\\n<p>A pointer to the first byte to decode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.&lt;/p&gt;\\n","pos":[32287,32328],"source":"\\n<p>The number of bytes to decode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[32387,32476],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[32670,32717],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[32718,32724],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[32841,33004],"source":"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[33005,33011],"source":" </p>\\n"},{"pos":[34795,34829],"content":"GetCharCount(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.&lt;/p&gt;\\n","pos":[35760,35829],"source":"\\n<p>The byte array containing the sequence of bytes to decode.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.&lt;/p&gt;\\n","pos":[35892,35941],"source":"\\n<p>The index of the first byte to decode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.&lt;/p&gt;\\n","pos":[36004,36045],"source":"\\n<p>The number of bytes to decode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[36104,36193],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[36401,36448],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[36449,36455],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[36572,36858],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[36859,36865],"source":" </p>\\n"},{"pos":[38471,38507],"content":"GetChars(Byte*, Int32, Char*, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte*, Int32, Char*, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A pointer to the first byte to decode.&lt;/p&gt;\\n","pos":[39628,39677],"source":"\\n<p>A pointer to the first byte to decode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.&lt;/p&gt;\\n","pos":[39744,39785],"source":"\\n<p>The number of bytes to decode.</p>\\n"},{"content":"\\n&lt;p&gt;A pointer to the location at which to start writing the resulting set of characters.&lt;/p&gt;\\n","pos":[39848,39943],"source":"\\n<p>A pointer to the location at which to start writing the resulting set of characters.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to write.&lt;/p&gt;\\n","pos":[40010,40063],"source":"\\n<p>The maximum number of characters to write.</p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written at the location indicated by &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n","pos":[40122,40217],"source":"\\n<p>The actual number of characters written at the location indicated by <em>chars</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[40433,40545],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[40546,40552],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; is less than zero.","pos":[40669,40735],"source":"\\n<p>\\n<em>byteCount</em> or <em>charCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[40736,40742],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; is less than the resulting number of characters.","pos":[40839,40913],"source":"\\n<p>\\n<em>charCount</em> is less than the resulting number of characters."},{"content":"&lt;/p&gt;\\n","pos":[40914,40920],"source":" </p>\\n"},{"pos":[42948,42993],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.&lt;/p&gt;\\n","pos":[44007,44076],"source":"\\n<p>The byte array containing the sequence of bytes to decode.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.&lt;/p&gt;\\n","pos":[44143,44192],"source":"\\n<p>The index of the first byte to decode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.&lt;/p&gt;\\n","pos":[44259,44300],"source":"\\n<p>The number of bytes to decode.</p>\\n"},{"content":"\\n&lt;p&gt;The character array to contain the resulting set of characters.&lt;/p&gt;\\n","pos":[44364,44438],"source":"\\n<p>The character array to contain the resulting set of characters.</p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting set of characters.&lt;/p&gt;\\n","pos":[44505,44584],"source":"\\n<p>The index at which to start writing the resulting set of characters.</p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written into &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n","pos":[44643,44714],"source":"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[44945,45057],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[45058,45064],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteindex&lt;/em&gt; and &lt;em&gt;byteCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; is not a valid index in &lt;em&gt;chars&lt;/em&gt;.","pos":[45181,45465],"source":"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>."},{"content":"&lt;/p&gt;\\n","pos":[45466,45472],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; does not have enough capacity from &lt;em&gt;charIndex&lt;/em&gt; to the end of the array to accommodate the resulting characters.","pos":[45569,45709],"source":"\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters."},{"content":"&lt;/p&gt;\\n","pos":[45710,45716],"source":" </p>\\n"},{"pos":[47392,47404],"content":"GetDecoder()","needQuote":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[49502,49514],"content":"GetEncoder()","needQuote":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[51490,51512],"content":"GetMaxByteCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of characters to encode.&lt;/p&gt;\\n","pos":[52287,52333],"source":"\\n<p>The number of characters to encode.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes produced by encoding the specified number of characters.&lt;/p&gt;\\n","pos":[52392,52487],"source":"\\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[52683,52850],"source":"\\n<p>\\n<em>charCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[52851,52857],"source":" </p>\\n"},{"pos":[53770,53792],"content":"GetMaxCharCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of bytes to decode.&lt;/p&gt;\\n","pos":[54567,54608],"source":"\\n<p>The number of bytes to decode.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters produced by decoding the specified number of bytes.&lt;/p&gt;\\n","pos":[54667,54762],"source":"\\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[54958,55125],"source":"\\n<p>\\n<em>byteCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[55126,55132],"source":" </p>\\n"},{"pos":[56289,56320],"content":"GetString(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.&lt;/p&gt;\\n","pos":[57207,57276],"source":"\\n<p>The byte array containing the sequence of bytes to decode.</p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.&lt;/p&gt;\\n","pos":[57343,57392],"source":"\\n<p>The index of the first byte to decode.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.&lt;/p&gt;\\n","pos":[57459,57500],"source":"\\n<p>The number of bytes to decode.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[57919,57966],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[57967,57973],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.","pos":[58090,58253],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[58254,58260],"source":" </p>\\n"},{"pos":[59793,59804],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[59950,59956],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60113,60121],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[60285,60295],"content":"ICloneable","needQuote":true,"nodes":[{"content":"ICloneable","pos":[0,10]}]},{"pos":[60537,60572],"content":"Convert(Encoding, Encoding, Byte[])","needQuote":true,"nodes":[{"content":"Convert(Encoding, Encoding, Byte[])","pos":[0,35]}]},{"pos":[60943,60950],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[61025,61026],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61083,61091],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[61159,61160]},{"pos":[61222,61230],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[61298,61299]},{"pos":[61352,61356],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[61415,61417]},{"pos":[61448,61449],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61582,61589],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[61664,61665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61722,61730],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[61798,61799]},{"pos":[61861,61869],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[61937,61938]},{"pos":[61991,61995],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[62053,62055],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[62083,62084],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62504,62553],"content":"Convert(Encoding, Encoding, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Convert(Encoding, Encoding, Byte[], Int32, Int32)","pos":[0,49]}]},{"pos":[63020,63027],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[63102,63103],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63160,63168],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[63236,63237]},{"pos":[63299,63307],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[63375,63376]},{"pos":[63429,63433],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[63492,63494]},{"content":",","pos":[63526,63527]},{"pos":[63581,63586],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[63646,63647]},{"pos":[63701,63706],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63765,63766],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63925,63932],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[64007,64008],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64065,64073],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[64141,64142]},{"pos":[64204,64212],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[64280,64281]},{"pos":[64334,64338],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[64396,64398],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[64427,64428]},{"pos":[64482,64487],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[64547,64548]},{"pos":[64602,64607],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64666,64667],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65097,65131],"content":"RegisterProvider(EncodingProvider)","needQuote":true,"nodes":[{"content":"RegisterProvider(EncodingProvider)","pos":[0,34]}]},{"pos":[65314,65330],"content":"RegisterProvider","needQuote":true,"nodes":[{"content":"RegisterProvider","pos":[0,16]}]},{"pos":[65414,65415],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65480,65496],"content":"EncodingProvider","needQuote":true,"nodes":[{"content":"EncodingProvider","pos":[0,16]}]},{"pos":[65571,65572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65687,65703],"content":"RegisterProvider","needQuote":true,"nodes":[{"content":"RegisterProvider","pos":[0,16]}]},{"pos":[65787,65788],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65853,65869],"content":"EncodingProvider","needQuote":true,"nodes":[{"content":"EncodingProvider","pos":[0,16]}]},{"pos":[65944,65945],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66217,66235],"content":"GetEncoding(Int32)","needQuote":true,"nodes":[{"content":"GetEncoding(Int32)","pos":[0,18]}]},{"pos":[66376,66387],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[66466,66467],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66516,66521],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66580,66581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66675,66686],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[66765,66766],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66815,66820],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66879,66880],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67171,67223],"content":"GetEncoding(Int32, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"GetEncoding(Int32, EncoderFallback, DecoderFallback)","pos":[0,52]}]},{"pos":[67478,67489],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[67568,67569],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67618,67623],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[67683,67684]},{"pos":[67753,67768],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[67843,67844]},{"pos":[67913,67928],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[68002,68003],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68153,68164],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[68243,68244],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68293,68298],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[68358,68359]},{"pos":[68428,68443],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[68518,68519]},{"pos":[68588,68603],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[68677,68678],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69004,69023],"content":"GetEncoding(String)","needQuote":true,"nodes":[{"content":"GetEncoding(String)","pos":[0,19]}]},{"pos":[69166,69177],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[69256,69257],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69307,69313],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[69373,69374],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69469,69480],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[69559,69560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69610,69616],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[69676,69677],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69971,70024],"content":"GetEncoding(String, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"GetEncoding(String, EncoderFallback, DecoderFallback)","pos":[0,53]}]},{"pos":[70281,70292],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[70371,70372],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70422,70428],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[70489,70490]},{"pos":[70559,70574],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[70649,70650]},{"pos":[70719,70734],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[70808,70809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70960,70971],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[71050,71051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71101,71107],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[71168,71169]},{"pos":[71238,71253],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[71328,71329]},{"pos":[71398,71413],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[71487,71488],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71802,71816],"content":"GetEncodings()","needQuote":true,"nodes":[{"content":"GetEncodings()","pos":[0,14]}]},{"pos":[71933,71945],"content":"GetEncodings","needQuote":true,"nodes":[{"content":"GetEncodings","pos":[0,12]}]},{"pos":[72025,72026],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72053,72054],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72135,72147],"content":"GetEncodings","needQuote":true,"nodes":[{"content":"GetEncodings","pos":[0,12]}]},{"pos":[72227,72228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72255,72256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72460,72473],"content":"GetPreamble()","needQuote":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"pos":[72588,72599],"content":"GetPreamble","needQuote":true,"nodes":[{"content":"GetPreamble","pos":[0,11]}]},{"pos":[72678,72679],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72706,72707],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72787,72798],"content":"GetPreamble","needQuote":true,"nodes":[{"content":"GetPreamble","pos":[0,11]}]},{"pos":[72877,72878],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72905,72906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73102,73109],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[73212,73217],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[73290,73291],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73318,73319],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73393,73398],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[73471,73472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73499,73500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73706,73726],"content":"GetByteCount(Char[])","needQuote":true,"nodes":[{"content":"GetByteCount(Char[])","pos":[0,20]}]},{"pos":[73967,73979],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[74059,74060],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74108,74112],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[74171,74173]},{"pos":[74204,74205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74301,74313],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[74393,74394],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74442,74446],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[74504,74506],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[74534,74535],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74821,74837],"content":"GetBytes(Char[])","needQuote":true,"nodes":[{"content":"GetBytes(Char[])","pos":[0,16]}]},{"pos":[75062,75070],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[75146,75147],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75195,75199],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[75258,75260]},{"pos":[75291,75292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75384,75392],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[75468,75469],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75517,75521],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[75579,75581],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[75609,75610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75910,75940],"content":"GetBytes(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32)","pos":[0,30]}]},{"pos":[76261,76269],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[76345,76346],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76394,76398],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[76457,76459]},{"content":",","pos":[76491,76492]},{"pos":[76546,76551],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[76611,76612]},{"pos":[76666,76671],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76730,76731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76849,76857],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[76933,76934],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76982,76986],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[77044,77046],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[77075,77076]},{"pos":[77130,77135],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[77195,77196]},{"pos":[77250,77255],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[77314,77315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77643,77659],"content":"GetBytes(String)","needQuote":true,"nodes":[{"content":"GetBytes(String)","pos":[0,16]}]},{"pos":[77796,77804],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[77880,77881],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77931,77937],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[77997,77998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78090,78098],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[78174,78175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78225,78231],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[78291,78292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78525,78545],"content":"GetCharCount(Byte[])","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[])","pos":[0,20]}]},{"pos":[78786,78798],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[78878,78879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78927,78931],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[78990,78992]},{"pos":[79023,79024],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79120,79132],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[79212,79213],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79261,79265],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[79323,79325],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[79353,79354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79640,79656],"content":"GetChars(Byte[])","needQuote":true,"nodes":[{"content":"GetChars(Byte[])","pos":[0,16]}]},{"pos":[79881,79889],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[79965,79966],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80014,80018],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[80077,80079]},{"pos":[80110,80111],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80203,80211],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[80287,80288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80336,80340],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[80398,80400],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[80428,80429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80729,80759],"content":"GetChars(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32)","pos":[0,30]}]},{"pos":[81080,81088],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[81164,81165],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81213,81217],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[81276,81278]},{"content":",","pos":[81310,81311]},{"pos":[81365,81370],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[81430,81431]},{"pos":[81485,81490],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81549,81550],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81668,81676],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[81752,81753],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81801,81805],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[81863,81865],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[81894,81895]},{"pos":[81949,81954],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[82014,82015]},{"pos":[82069,82074],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[82133,82134],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82475,82498],"content":"GetString(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte*, Int32)","pos":[0,23]}]},{"pos":[82662,82671],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[82748,82749],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82797,82801],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[82892,82893]},{"pos":[82947,82952],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[83011,83012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83117,83126],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[83203,83204],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83252,83256],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[83347,83348]},{"pos":[83402,83407],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[83466,83467],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83711,83731],"content":"IsAlwaysNormalized()","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized()","pos":[0,20]}]},{"pos":[83860,83878],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[83964,83965],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83992,83993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84080,84098],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[84184,84185],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84212,84213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84467,84504],"content":"IsAlwaysNormalized(NormalizationForm)","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized(NormalizationForm)","pos":[0,37]}]},{"pos":[84693,84711],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[84797,84798],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84864,84881],"content":"NormalizationForm","needQuote":true,"nodes":[{"content":"NormalizationForm","pos":[0,17]}]},{"pos":[84957,84958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85076,85094],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[85180,85181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85247,85264],"content":"NormalizationForm","needQuote":true,"nodes":[{"content":"NormalizationForm","pos":[0,17]}]},{"pos":[85340,85341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85618,85635],"content":"GetString(Byte[])","needQuote":true,"nodes":[{"content":"GetString(Byte[])","pos":[0,17]}]},{"pos":[85864,85873],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[85950,85951],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85999,86003],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[86062,86064]},{"pos":[86095,86096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86189,86198],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[86275,86276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86324,86328],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[86386,86388],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[86416,86417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86692,86706],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[86839,86845],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[86919,86920],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86970,86976],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87036,87037],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87127,87133],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[87207,87208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87258,87264],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87324,87325],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87538,87551],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[87666,87677],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[87756,87757],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87784,87785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87865,87876],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[87955,87956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87983,87984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88183,88191],"content":"BodyName","needQuote":true,"nodes":[{"content":"BodyName","pos":[0,8]}]},{"pos":[88412,88424],"content":"EncodingName","needQuote":true,"nodes":[{"content":"EncodingName","pos":[0,12]}]},{"pos":[88655,88665],"content":"HeaderName","needQuote":true,"nodes":[{"content":"HeaderName","pos":[0,10]}]},{"pos":[88887,88894],"content":"WebName","needQuote":true,"nodes":[{"content":"WebName","pos":[0,7]}]},{"pos":[89115,89130],"content":"WindowsCodePage","needQuote":true,"nodes":[{"content":"WindowsCodePage","pos":[0,15]}]},{"pos":[89376,89392],"content":"IsBrowserDisplay","needQuote":true,"nodes":[{"content":"IsBrowserDisplay","pos":[0,16]}]},{"pos":[89638,89651],"content":"IsBrowserSave","needQuote":true,"nodes":[{"content":"IsBrowserSave","pos":[0,13]}]},{"pos":[89892,89909],"content":"IsMailNewsDisplay","needQuote":true,"nodes":[{"content":"IsMailNewsDisplay","pos":[0,17]}]},{"pos":[90159,90173],"content":"IsMailNewsSave","needQuote":true,"nodes":[{"content":"IsMailNewsSave","pos":[0,14]}]},{"pos":[90415,90430],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"pos":[90675,90690],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[90930,90940],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[91160,91165],"content":"ASCII","needQuote":true,"nodes":[{"content":"ASCII","pos":[0,5]}]},{"pos":[91373,91381],"content":"CodePage","needQuote":true,"nodes":[{"content":"CodePage","pos":[0,8]}]},{"pos":[91597,91604],"content":"Default","needQuote":true,"nodes":[{"content":"Default","pos":[0,7]}]},{"pos":[91817,91824],"content":"Unicode","needQuote":true,"nodes":[{"content":"Unicode","pos":[0,7]}]},{"pos":[92046,92062],"content":"BigEndianUnicode","needQuote":true,"nodes":[{"content":"BigEndianUnicode","pos":[0,16]}]},{"pos":[92299,92303],"content":"UTF7","needQuote":true,"nodes":[{"content":"UTF7","pos":[0,4]}]},{"pos":[92504,92508],"content":"UTF8","needQuote":true,"nodes":[{"content":"UTF8","pos":[0,4]}]},{"pos":[92710,92715],"content":"UTF32","needQuote":true,"nodes":[{"content":"UTF32","pos":[0,5]}]},{"pos":[92909,92919],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[93014,93022],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[93091,93092],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93119,93120],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93190,93198],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[93267,93268],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93295,93296],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93493,93515],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[93663,93669],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[93736,93737],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93787,93793],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[93854,93855]},{"pos":[93910,93916],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[93976,93977],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94074,94080],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[94147,94148],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94198,94204],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[94265,94266]},{"pos":[94321,94327],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[94387,94388],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94633,94664],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[94830,94845],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[94921,94922],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94972,94978],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[95039,95040]},{"pos":[95095,95101],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[95161,95162],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95268,95283],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[95359,95360],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95410,95416],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[95477,95478]},{"pos":[95533,95539],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[95599,95600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95826,95835],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[95928,95935],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[96003,96004],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96031,96032],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96101,96108],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[96176,96177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96204,96205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96380,96397],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[96506,96521],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[96597,96598],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96625,96626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96703,96718],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[96794,96795],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96822,96823],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96968,96974],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[97138,97150],"content":"IsSingleByte","needQuote":true,"nodes":[{"content":"IsSingleByte","pos":[0,12]}]},{"pos":[97351,97358],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[97566,97592],"content":"GetByteCount(Char*, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char*, Int32)","pos":[0,26]}]},{"pos":[97762,97774],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[97854,97855],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97903,97907],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[97998,97999]},{"pos":[98053,98058],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[98117,98118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98226,98238],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[98318,98319],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98367,98371],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[98462,98463]},{"pos":[98517,98522],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[98581,98582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98755,98760],"content":"Char*","needQuote":true,"nodes":[{"content":"Char*","pos":[0,5]}]},{"pos":[98832,98836],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[98958,98962],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[99129,99134],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[99350,99384],"content":"GetByteCount(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char[], Int32, Int32)","pos":[0,34]}]},{"pos":[99721,99733],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[99813,99814],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99862,99866],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[99925,99927]},{"content":",","pos":[99959,99960]},{"pos":[100014,100019],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[100079,100080]},{"pos":[100134,100139],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[100198,100199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100321,100333],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[100413,100414],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100462,100466],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[100524,100526],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[100555,100556]},{"pos":[100610,100615],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[100675,100676]},{"pos":[100730,100735],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[100794,100795],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101054,101060],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[101180,101184],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[101243,101245]},{"pos":[101308,101312],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[101370,101372],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[101553,101573],"content":"GetByteCount(String)","needQuote":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"pos":[101718,101730],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[101810,101811],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101861,101867],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[101927,101928],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102024,102036],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[102116,102117],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102167,102173],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[102233,102234],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102427,102433],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[102660,102696],"content":"GetBytes(Char*, Int32, Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char*, Int32, Byte*, Int32)","pos":[0,36]}]},{"pos":[102912,102920],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[102996,102997],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103045,103049],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[103140,103141]},{"pos":[103195,103200],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[103260,103261]},{"pos":[103314,103318],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[103409,103410]},{"pos":[103464,103469],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[103528,103529],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103659,103667],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[103743,103744],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103792,103796],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[103887,103888]},{"pos":[103942,103947],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[104007,104008]},{"pos":[104061,104065],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[104156,104157]},{"pos":[104211,104216],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[104275,104276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104481,104486],"content":"Byte*","needQuote":true,"nodes":[{"content":"Byte*","pos":[0,5]}]},{"pos":[104558,104562],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[104684,104688],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[104953,104998],"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"pos":[105419,105427],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[105503,105504],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105552,105556],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[105615,105617]},{"content":",","pos":[105649,105650]},{"pos":[105704,105709],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[105769,105770]},{"pos":[105824,105829],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[105889,105890]},{"pos":[105943,105947],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[106006,106008]},{"content":",","pos":[106040,106041]},{"pos":[106095,106100],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[106159,106160],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106305,106313],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[106389,106390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106438,106442],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[106500,106502],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[106531,106532]},{"pos":[106586,106591],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[106651,106652]},{"pos":[106706,106711],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[106771,106772]},{"pos":[106825,106829],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[106887,106889],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[106918,106919]},{"pos":[106973,106978],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[107037,107038],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107342,107348],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[107468,107472],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[107531,107533]},{"pos":[107596,107600],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[107658,107660],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[107890,107935],"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"pos":[108356,108364],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[108440,108441],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108491,108497],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[108558,108559]},{"pos":[108613,108618],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[108678,108679]},{"pos":[108733,108738],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[108798,108799]},{"pos":[108852,108856],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[108915,108917]},{"content":",","pos":[108949,108950]},{"pos":[109004,109009],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[109068,109069],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109214,109222],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[109298,109299],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109349,109355],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[109416,109417]},{"pos":[109471,109476],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[109536,109537]},{"pos":[109591,109596],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[109656,109657]},{"pos":[109710,109714],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[109772,109774],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[109803,109804]},{"pos":[109858,109863],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[109922,109923],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110324,110350],"content":"GetCharCount(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte*, Int32)","pos":[0,26]}]},{"pos":[110520,110532],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[110612,110613],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110661,110665],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[110756,110757]},{"pos":[110811,110816],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[110875,110876],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110984,110996],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[111076,111077],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111125,111129],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[111220,111221]},{"pos":[111275,111280],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[111339,111340],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111625,111659],"content":"GetCharCount(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32)","pos":[0,34]}]},{"pos":[111996,112008],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[112088,112089],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112137,112141],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[112200,112202]},{"content":",","pos":[112234,112235]},{"pos":[112289,112294],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112354,112355]},{"pos":[112409,112414],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[112473,112474],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112596,112608],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[112688,112689],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112737,112741],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[112799,112801],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[112830,112831]},{"pos":[112885,112890],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112950,112951]},{"pos":[113005,113010],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[113069,113070],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113448,113484],"content":"GetChars(Byte*, Int32, Char*, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte*, Int32, Char*, Int32)","pos":[0,36]}]},{"pos":[113700,113708],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[113784,113785],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113833,113837],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[113928,113929]},{"pos":[113983,113988],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114048,114049]},{"pos":[114102,114106],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[114197,114198]},{"pos":[114252,114257],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114316,114317],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114447,114455],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[114531,114532],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114580,114584],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[114675,114676]},{"pos":[114730,114735],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114795,114796]},{"pos":[114849,114853],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[114944,114945]},{"pos":[114999,115004],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[115063,115064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115404,115449],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","pos":[0,45]}]},{"pos":[115870,115878],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[115954,115955],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116003,116007],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[116066,116068]},{"content":",","pos":[116100,116101]},{"pos":[116155,116160],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116220,116221]},{"pos":[116275,116280],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116340,116341]},{"pos":[116394,116398],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[116457,116459]},{"content":",","pos":[116491,116492]},{"pos":[116546,116551],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[116610,116611],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116756,116764],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[116840,116841],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116889,116893],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[116951,116953],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[116982,116983]},{"pos":[117037,117042],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117102,117103]},{"pos":[117157,117162],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117222,117223]},{"pos":[117276,117280],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[117338,117340],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[117369,117370]},{"pos":[117424,117429],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[117488,117489],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117861,117873],"content":"GetDecoder()","needQuote":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[117986,117996],"content":"GetDecoder","needQuote":true,"nodes":[{"content":"GetDecoder","pos":[0,10]}]},{"pos":[118074,118075],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118102,118103],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118182,118192],"content":"GetDecoder","needQuote":true,"nodes":[{"content":"GetDecoder","pos":[0,10]}]},{"pos":[118270,118271],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118298,118299],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118478,118485],"content":"Decoder","needQuote":true,"nodes":[{"content":"Decoder","pos":[0,7]}]},{"pos":[118674,118686],"content":"GetEncoder()","needQuote":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[118799,118809],"content":"GetEncoder","needQuote":true,"nodes":[{"content":"GetEncoder","pos":[0,10]}]},{"pos":[118887,118888],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118915,118916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118995,119005],"content":"GetEncoder","needQuote":true,"nodes":[{"content":"GetEncoder","pos":[0,10]}]},{"pos":[119083,119084],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119111,119112],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119291,119298],"content":"Encoder","needQuote":true,"nodes":[{"content":"Encoder","pos":[0,7]}]},{"pos":[119506,119528],"content":"GetMaxByteCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"pos":[119677,119692],"content":"GetMaxByteCount","needQuote":true,"nodes":[{"content":"GetMaxByteCount","pos":[0,15]}]},{"pos":[119775,119776],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119825,119830],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[119889,119890],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119988,120003],"content":"GetMaxByteCount","needQuote":true,"nodes":[{"content":"GetMaxByteCount","pos":[0,15]}]},{"pos":[120086,120087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120136,120141],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[120200,120201],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120448,120470],"content":"GetMaxCharCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"pos":[120619,120634],"content":"GetMaxCharCount","needQuote":true,"nodes":[{"content":"GetMaxCharCount","pos":[0,15]}]},{"pos":[120717,120718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120767,120772],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[120831,120832],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120930,120945],"content":"GetMaxCharCount","needQuote":true,"nodes":[{"content":"GetMaxCharCount","pos":[0,15]}]},{"pos":[121028,121029],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121078,121083],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[121142,121143],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121411,121442],"content":"GetString(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte[], Int32, Int32)","pos":[0,31]}]},{"pos":[121767,121776],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[121853,121854],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121902,121906],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[121965,121967]},{"content":",","pos":[121999,122000]},{"pos":[122054,122059],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[122119,122120]},{"pos":[122174,122179],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[122238,122239],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122358,122367],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[122444,122445],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122493,122497],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[122555,122557],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[122586,122587]},{"pos":[122641,122646],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[122706,122707]},{"pos":[122761,122766],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[122825,122826],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123111,123132],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[123326,123353],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[123567,123591],"content":"EncoderFallbackException","needQuote":true,"nodes":[{"content":"EncoderFallbackException","pos":[0,24]}]},{"pos":[123811,123828],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[124012,124036],"content":"DecoderFallbackException","needQuote":true,"nodes":[{"content":"DecoderFallbackException","pos":[0,24]}]}],"content":"items:\n- uid: System.Text.ASCIIEncoding\n  commentId: T:System.Text.ASCIIEncoding\n  id: ASCIIEncoding\n  parent: System.Text\n  children:\n  - System.Text.ASCIIEncoding.#ctor\n  - System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)\n  - System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - System.Text.ASCIIEncoding.GetByteCount(System.String)\n  - System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  - System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)\n  - System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.ASCIIEncoding.GetDecoder\n  - System.Text.ASCIIEncoding.GetEncoder\n  - System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  - System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  - System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - System.Text.ASCIIEncoding.IsSingleByte\n  langs:\n  - csharp\n  - vb\n  name: ASCIIEncoding\n  fullName: System.Text.ASCIIEncoding\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ASCIIEncoding\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 22\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Represents an ASCII character encoding of Unicode characters.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class ASCIIEncoding : Encoding, ICloneable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class ASCIIEncoding\n          Inherits Encoding\n          Implements ICloneable\n  seealso:\n  - type: System.Text.Decoder\n    commentId: T:System.Text.Decoder\n  - type: System.Text.Encoder\n    commentId: T:System.Text.Encoder\n  inheritance:\n  - System.Object\n  - System.Text.Encoding\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  - System.Text.Encoding.GetEncoding(System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncoding(System.String)\n  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncodings\n  - System.Text.Encoding.GetPreamble\n  - System.Text.Encoding.Clone\n  - System.Text.Encoding.GetByteCount(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.String)\n  - System.Text.Encoding.GetCharCount(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  - System.Text.Encoding.IsAlwaysNormalized\n  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  - System.Text.Encoding.GetString(System.Byte[])\n  - System.Text.Encoding.Equals(System.Object)\n  - System.Text.Encoding.GetHashCode\n  - System.Text.Encoding.BodyName\n  - System.Text.Encoding.EncodingName\n  - System.Text.Encoding.HeaderName\n  - System.Text.Encoding.WebName\n  - System.Text.Encoding.WindowsCodePage\n  - System.Text.Encoding.IsBrowserDisplay\n  - System.Text.Encoding.IsBrowserSave\n  - System.Text.Encoding.IsMailNewsDisplay\n  - System.Text.Encoding.IsMailNewsSave\n  - System.Text.Encoding.EncoderFallback\n  - System.Text.Encoding.DecoderFallback\n  - System.Text.Encoding.IsReadOnly\n  - System.Text.Encoding.ASCII\n  - System.Text.Encoding.CodePage\n  - System.Text.Encoding.Default\n  - System.Text.Encoding.Unicode\n  - System.Text.Encoding.BigEndianUnicode\n  - System.Text.Encoding.UTF7\n  - System.Text.Encoding.UTF8\n  - System.Text.Encoding.UTF32\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ASCIIEncoding\n- uid: System.Text.ASCIIEncoding.#ctor\n  commentId: M:System.Text.ASCIIEncoding.#ctor\n  id: '#ctor'\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: ASCIIEncoding()\n  fullName: System.Text.ASCIIEncoding.ASCIIEncoding()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 27\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.ASCIIEncoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public ASCIIEncoding()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ASCIIEncoding.ASCIIEncoding()\n- uid: System.Text.ASCIIEncoding.IsSingleByte\n  commentId: P:System.Text.ASCIIEncoding.IsSingleByte\n  id: IsSingleByte\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: IsSingleByte\n  fullName: System.Text.ASCIIEncoding.IsSingleByte\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSingleByte\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 999\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Gets a value indicating whether the current encoding uses single-byte code points.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override bool IsSingleByte { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides ReadOnly Property IsSingleByte As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This property is always <strong>true</strong>.</p>\\n\"\n  overridden: System.Text.Encoding.IsSingleByte\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: ASCIIEncoding.IsSingleByte\n- uid: System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)\n  id: GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char*, Int32)\n  fullName: System.Text.ASCIIEncoding.GetByteCount(System.Char*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 104\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public override int GetByteCount(char *chars, int count)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetByteCount(chars As Char *, count As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the first character to encode.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.ASCIIEncoding.GetEncoder\n    commentId: M:System.Text.ASCIIEncoding.GetEncoder\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ASCIIEncoding.GetByteCount(Char*, Int32)\n- uid: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char[], Int32, Int32)\n  fullName: System.Text.ASCIIEncoding.GetByteCount(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 57\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetByteCount(char[] chars, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetByteCount(chars As Char(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.ASCIIEncoding.GetEncoder\n    commentId: M:System.Text.ASCIIEncoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.ASCIIEncoding.GetByteCount(System.Char(), System.Int32, System.Int32)\n  name.vb: GetByteCount(Char(), Int32, Int32)\n  nameWithType: ASCIIEncoding.GetByteCount(Char[], Int32, Int32)\n  nameWithType.vb: ASCIIEncoding.GetByteCount(Char(), Int32, Int32)\n- uid: System.Text.ASCIIEncoding.GetByteCount(System.String)\n  commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.String)\n  id: GetByteCount(System.String)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(String)\n  fullName: System.Text.ASCIIEncoding.GetByteCount(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 88\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding the characters in the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetByteCount(string chars)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetByteCount(chars As String) As Integer\n    parameters:\n    - id: chars\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the set of characters to encode.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.String)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.ASCIIEncoding.GetEncoder\n    commentId: M:System.Text.ASCIIEncoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ASCIIEncoding.GetByteCount(String)\n- uid: System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: System.Text.ASCIIEncoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 219\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public override int GetBytes(char *chars, int charCount, byte *bytes, int byteCount)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetBytes(chars As Char *, charCount As Integer, bytes As Byte *, byteCount As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the first character to encode.</p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode.</p>\\n\"\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the location at which to start writing the resulting sequence of bytes.</p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to write.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written at the location indicated by <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charCount</em> or <em>byteCount</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>byteCount</em> is less than the resulting number of bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetEncoder\n    commentId: M:System.Text.ASCIIEncoding.GetEncoder\n  - type: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ASCIIEncoding.GetBytes(Char*, Int32, Byte*, Int32)\n- uid: System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: System.Text.ASCIIEncoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 175\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters from the specified character array into the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode.</p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode.</p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode.</p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes.</p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetEncoder\n    commentId: M:System.Text.ASCIIEncoding.GetEncoder\n  - type: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.ASCIIEncoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  nameWithType: ASCIIEncoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: ASCIIEncoding.GetBytes(Char(), Int32, Int32, Byte(), Int32)\n- uid: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: System.Text.ASCIIEncoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 128\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters from the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetBytes(chars As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the set of characters to encode.</p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode.</p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode.</p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes.</p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetEncoder\n    commentId: M:System.Text.ASCIIEncoding.GetEncoder\n  - type: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.ASCIIEncoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)\n  nameWithType: ASCIIEncoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType.vb: ASCIIEncoding.GetBytes(String, Int32, Int32, Byte(), Int32)\n- uid: System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)\n  id: GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte*, Int32)\n  fullName: System.Text.ASCIIEncoding.GetCharCount(System.Byte*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 275\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public override int GetCharCount(byte *bytes, int count)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetCharCount(bytes As Byte *, count As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the first byte to decode.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.ASCIIEncoding.GetDecoder\n    commentId: M:System.Text.ASCIIEncoding.GetDecoder\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ASCIIEncoding.GetCharCount(Byte*, Int32)\n- uid: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte[], Int32, Int32)\n  fullName: System.Text.ASCIIEncoding.GetCharCount(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 245\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetCharCount(byte[] bytes, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.ASCIIEncoding.GetDecoder\n    commentId: M:System.Text.ASCIIEncoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.ASCIIEncoding.GetCharCount(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetCharCount(Byte(), Int32, Int32)\n  nameWithType: ASCIIEncoding.GetCharCount(Byte[], Int32, Int32)\n  nameWithType.vb: ASCIIEncoding.GetCharCount(Byte(), Int32, Int32)\n- uid: System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  fullName: System.Text.ASCIIEncoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 342\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public override int GetChars(byte *bytes, int byteCount, char *chars, int charCount)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetChars(bytes As Byte *, byteCount As Integer, chars As Char *, charCount As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the first byte to decode.</p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode.</p>\\n\"\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the location at which to start writing the resulting set of characters.</p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to write.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written at the location indicated by <em>chars</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteCount</em> or <em>charCount</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>charCount</em> is less than the resulting number of characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.ASCIIEncoding.GetDecoder\n    commentId: M:System.Text.ASCIIEncoding.GetDecoder\n  - type: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ASCIIEncoding.GetChars(Byte*, Int32, Char*, Int32)\n- uid: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Text.ASCIIEncoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 298\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode.</p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode.</p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode.</p>\\n\"\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array to contain the resulting set of characters.</p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting set of characters.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.ASCIIEncoding.GetDecoder\n    commentId: M:System.Text.ASCIIEncoding.GetDecoder\n  - type: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.ASCIIEncoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)\n  nameWithType: ASCIIEncoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: ASCIIEncoding.GetChars(Byte(), Int32, Int32, Char(), Int32)\n- uid: System.Text.ASCIIEncoding.GetDecoder\n  commentId: M:System.Text.ASCIIEncoding.GetDecoder\n  id: GetDecoder\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetDecoder()\n  fullName: System.Text.ASCIIEncoding.GetDecoder()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDecoder\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 1008\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Obtains a decoder that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override Decoder GetDecoder()\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function GetDecoder As Decoder\n    return:\n      type: System.Text.Decoder\n      description: \"\\n<p>A <xref href=\\\"System.Text.Decoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetDecoder\n  seealso:\n  - type: System.Text.Decoder\n    commentId: T:System.Text.Decoder\n  - type: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetEncoder\n    commentId: M:System.Text.ASCIIEncoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ASCIIEncoding.GetDecoder()\n- uid: System.Text.ASCIIEncoding.GetEncoder\n  commentId: M:System.Text.ASCIIEncoding.GetEncoder\n  id: GetEncoder\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetEncoder()\n  fullName: System.Text.ASCIIEncoding.GetEncoder()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEncoder\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 1015\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Obtains an encoder that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override Encoder GetEncoder()\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function GetEncoder As Encoder\n    return:\n      type: System.Text.Encoder\n      description: \"\\n<p>An <xref href=\\\"System.Text.Encoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetEncoder\n  seealso:\n  - type: System.Text.Encoder\n    commentId: T:System.Text.Encoder\n  - type: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetDecoder\n    commentId: M:System.Text.ASCIIEncoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ASCIIEncoding.GetEncoder()\n- uid: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  id: GetMaxByteCount(System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetMaxByteCount(Int32)\n  fullName: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMaxByteCount\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 956\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\\n\"\n  syntax:\n    content: public override int GetMaxByteCount(int charCount)\n    content.vb: Public Overrides Function GetMaxByteCount(charCount As Integer) As Integer\n    parameters:\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetEncoder\n    commentId: M:System.Text.ASCIIEncoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ASCIIEncoding.GetMaxByteCount(Int32)\n- uid: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  id: GetMaxCharCount(System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetMaxCharCount(Int32)\n  fullName: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMaxCharCount\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 977\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\\n\"\n  syntax:\n    content: public override int GetMaxCharCount(int byteCount)\n    content.vb: Public Overrides Function GetMaxCharCount(byteCount As Integer) As Integer\n    parameters:\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetDecoder\n    commentId: M:System.Text.ASCIIEncoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ASCIIEncoding.GetMaxCharCount(Int32)\n- uid: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  id: GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.ASCIIEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetString(Byte[], Int32, Int32)\n  fullName: System.Text.ASCIIEncoding.GetString(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetString\n    path: src/mscorlib/src/System/Text/ASCIIEncoding.cs\n    startLine: 368\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a range of bytes from a byte array into a string.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override string GetString(byte[] bytes, int byteIndex, int byteCount)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetString(bytes As Byte(), byteIndex As Integer, byteCount As Integer) As String\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode.</p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode.</p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the results of decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.ASCIIEncoding.GetDecoder\n    commentId: M:System.Text.ASCIIEncoding.GetDecoder\n  - type: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.ASCIIEncoding.GetString(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetString(Byte(), Int32, Int32)\n  nameWithType: ASCIIEncoding.GetString(Byte[], Int32, Int32)\n  nameWithType.vb: ASCIIEncoding.GetString(Byte(), Int32, Int32)\nreferences:\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  nameWithType: Encoding\n  commentId: T:System.Text.Encoding\n- uid: System.ICloneable\n  parent: System\n  isExternal: true\n  name: ICloneable\n  fullName: System.ICloneable\n  nameWithType: ICloneable\n  commentId: T:System.ICloneable\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Convert(Encoding, Encoding, Byte[])\n  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[])\n  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte())\n  name.vb: Convert(Encoding, Encoding, Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])\n  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte())\n  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte(), System.Int32, System.Int32)\n  name.vb: Convert(Encoding, Encoding, Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: RegisterProvider(EncodingProvider)\n  fullName: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  spec.csharp:\n  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n    name: RegisterProvider\n    fullName: System.Text.Encoding.RegisterProvider\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.EncodingProvider\n    name: EncodingProvider\n    fullName: System.Text.EncodingProvider\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n    name: RegisterProvider\n    fullName: System.Text.Encoding.RegisterProvider\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.EncodingProvider\n    name: EncodingProvider\n    fullName: System.Text.EncodingProvider\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.RegisterProvider(EncodingProvider)\n  commentId: M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n- uid: System.Text.Encoding.GetEncoding(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(Int32)\n  fullName: System.Text.Encoding.GetEncoding(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(Int32)\n  commentId: M:System.Text.Encoding.GetEncoding(System.Int32)\n- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.GetEncoding(System.Int32, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  commentId: M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n- uid: System.Text.Encoding.GetEncoding(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(String)\n  fullName: System.Text.Encoding.GetEncoding(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.String)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.String)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(String)\n  commentId: M:System.Text.Encoding.GetEncoding(System.String)\n- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(String, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.GetEncoding(System.String, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)\n  commentId: M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n- uid: System.Text.Encoding.GetEncodings\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncodings()\n  fullName: System.Text.Encoding.GetEncodings()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncodings\n    name: GetEncodings\n    fullName: System.Text.Encoding.GetEncodings\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncodings\n    name: GetEncodings\n    fullName: System.Text.Encoding.GetEncodings\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncodings()\n  commentId: M:System.Text.Encoding.GetEncodings\n- uid: System.Text.Encoding.GetPreamble\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetPreamble()\n  fullName: System.Text.Encoding.GetPreamble()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetPreamble\n    name: GetPreamble\n    fullName: System.Text.Encoding.GetPreamble\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetPreamble\n    name: GetPreamble\n    fullName: System.Text.Encoding.GetPreamble\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetPreamble()\n  commentId: M:System.Text.Encoding.GetPreamble\n- uid: System.Text.Encoding.Clone\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Clone()\n  fullName: System.Text.Encoding.Clone()\n  spec.csharp:\n  - uid: System.Text.Encoding.Clone\n    name: Clone\n    fullName: System.Text.Encoding.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Clone\n    name: Clone\n    fullName: System.Text.Encoding.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Clone()\n  commentId: M:System.Text.Encoding.Clone\n- uid: System.Text.Encoding.GetByteCount(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char[])\n  fullName: System.Text.Encoding.GetByteCount(System.Char[])\n  fullname.vb: System.Text.Encoding.GetByteCount(System.Char())\n  name.vb: GetByteCount(Char())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[])\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[])\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char[])\n  nameWithType.vb: Encoding.GetByteCount(Char())\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n- uid: System.Text.Encoding.GetBytes(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[])\n  fullName: System.Text.Encoding.GetBytes(System.Char[])\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char())\n  name.vb: GetBytes(Char())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[])\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[])\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[])\n  nameWithType.vb: Encoding.GetBytes(Char())\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[])\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[], Int32, Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)\n  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetBytes(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(String)\n  fullName: System.Text.Encoding.GetBytes(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.String)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.String)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(String)\n  commentId: M:System.Text.Encoding.GetBytes(System.String)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte[])\n  fullName: System.Text.Encoding.GetCharCount(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte())\n  name.vb: GetCharCount(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[])\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[])\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte[])\n  nameWithType.vb: Encoding.GetCharCount(Byte())\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n- uid: System.Text.Encoding.GetChars(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[])\n  fullName: System.Text.Encoding.GetChars(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte())\n  name.vb: GetChars(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[])\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[])\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[])\n  nameWithType.vb: Encoding.GetChars(Byte())\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[])\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte*, Int32)\n  fullName: System.Text.Encoding.GetString(System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetString(System.Byte*,System.Int32)\n- uid: System.Text.Encoding.IsAlwaysNormalized\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsAlwaysNormalized()\n  fullName: System.Text.Encoding.IsAlwaysNormalized()\n  spec.csharp:\n  - uid: System.Text.Encoding.IsAlwaysNormalized\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.IsAlwaysNormalized\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.IsAlwaysNormalized()\n  commentId: M:System.Text.Encoding.IsAlwaysNormalized\n- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsAlwaysNormalized(NormalizationForm)\n  fullName: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  spec.csharp:\n  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.NormalizationForm\n    name: NormalizationForm\n    fullName: System.Text.NormalizationForm\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.NormalizationForm\n    name: NormalizationForm\n    fullName: System.Text.NormalizationForm\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.IsAlwaysNormalized(NormalizationForm)\n  commentId: M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n- uid: System.Text.Encoding.GetString(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte[])\n  fullName: System.Text.Encoding.GetString(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetString(System.Byte())\n  name.vb: GetString(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte[])\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte[])\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte[])\n  nameWithType.vb: Encoding.GetString(Byte())\n  commentId: M:System.Text.Encoding.GetString(System.Byte[])\n- uid: System.Text.Encoding.Equals(System.Object)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Text.Encoding.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Text.Encoding.Equals(System.Object)\n    name: Equals\n    fullName: System.Text.Encoding.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Equals(System.Object)\n    name: Equals\n    fullName: System.Text.Encoding.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Equals(Object)\n  commentId: M:System.Text.Encoding.Equals(System.Object)\n- uid: System.Text.Encoding.GetHashCode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Text.Encoding.GetHashCode()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetHashCode\n    name: GetHashCode\n    fullName: System.Text.Encoding.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetHashCode\n    name: GetHashCode\n    fullName: System.Text.Encoding.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetHashCode()\n  commentId: M:System.Text.Encoding.GetHashCode\n- uid: System.Text.Encoding.BodyName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: BodyName\n  fullName: System.Text.Encoding.BodyName\n  nameWithType: Encoding.BodyName\n  commentId: P:System.Text.Encoding.BodyName\n- uid: System.Text.Encoding.EncodingName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: EncodingName\n  fullName: System.Text.Encoding.EncodingName\n  nameWithType: Encoding.EncodingName\n  commentId: P:System.Text.Encoding.EncodingName\n- uid: System.Text.Encoding.HeaderName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: HeaderName\n  fullName: System.Text.Encoding.HeaderName\n  nameWithType: Encoding.HeaderName\n  commentId: P:System.Text.Encoding.HeaderName\n- uid: System.Text.Encoding.WebName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: WebName\n  fullName: System.Text.Encoding.WebName\n  nameWithType: Encoding.WebName\n  commentId: P:System.Text.Encoding.WebName\n- uid: System.Text.Encoding.WindowsCodePage\n  parent: System.Text.Encoding\n  isExternal: true\n  name: WindowsCodePage\n  fullName: System.Text.Encoding.WindowsCodePage\n  nameWithType: Encoding.WindowsCodePage\n  commentId: P:System.Text.Encoding.WindowsCodePage\n- uid: System.Text.Encoding.IsBrowserDisplay\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsBrowserDisplay\n  fullName: System.Text.Encoding.IsBrowserDisplay\n  nameWithType: Encoding.IsBrowserDisplay\n  commentId: P:System.Text.Encoding.IsBrowserDisplay\n- uid: System.Text.Encoding.IsBrowserSave\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsBrowserSave\n  fullName: System.Text.Encoding.IsBrowserSave\n  nameWithType: Encoding.IsBrowserSave\n  commentId: P:System.Text.Encoding.IsBrowserSave\n- uid: System.Text.Encoding.IsMailNewsDisplay\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsMailNewsDisplay\n  fullName: System.Text.Encoding.IsMailNewsDisplay\n  nameWithType: Encoding.IsMailNewsDisplay\n  commentId: P:System.Text.Encoding.IsMailNewsDisplay\n- uid: System.Text.Encoding.IsMailNewsSave\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsMailNewsSave\n  fullName: System.Text.Encoding.IsMailNewsSave\n  nameWithType: Encoding.IsMailNewsSave\n  commentId: P:System.Text.Encoding.IsMailNewsSave\n- uid: System.Text.Encoding.EncoderFallback\n  parent: System.Text.Encoding\n  isExternal: true\n  name: EncoderFallback\n  fullName: System.Text.Encoding.EncoderFallback\n  nameWithType: Encoding.EncoderFallback\n  commentId: P:System.Text.Encoding.EncoderFallback\n- uid: System.Text.Encoding.DecoderFallback\n  parent: System.Text.Encoding\n  isExternal: true\n  name: DecoderFallback\n  fullName: System.Text.Encoding.DecoderFallback\n  nameWithType: Encoding.DecoderFallback\n  commentId: P:System.Text.Encoding.DecoderFallback\n- uid: System.Text.Encoding.IsReadOnly\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Text.Encoding.IsReadOnly\n  nameWithType: Encoding.IsReadOnly\n  commentId: P:System.Text.Encoding.IsReadOnly\n- uid: System.Text.Encoding.ASCII\n  parent: System.Text.Encoding\n  isExternal: true\n  name: ASCII\n  fullName: System.Text.Encoding.ASCII\n  nameWithType: Encoding.ASCII\n  commentId: P:System.Text.Encoding.ASCII\n- uid: System.Text.Encoding.CodePage\n  parent: System.Text.Encoding\n  isExternal: true\n  name: CodePage\n  fullName: System.Text.Encoding.CodePage\n  nameWithType: Encoding.CodePage\n  commentId: P:System.Text.Encoding.CodePage\n- uid: System.Text.Encoding.Default\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Default\n  fullName: System.Text.Encoding.Default\n  nameWithType: Encoding.Default\n  commentId: P:System.Text.Encoding.Default\n- uid: System.Text.Encoding.Unicode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Unicode\n  fullName: System.Text.Encoding.Unicode\n  nameWithType: Encoding.Unicode\n  commentId: P:System.Text.Encoding.Unicode\n- uid: System.Text.Encoding.BigEndianUnicode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: BigEndianUnicode\n  fullName: System.Text.Encoding.BigEndianUnicode\n  nameWithType: Encoding.BigEndianUnicode\n  commentId: P:System.Text.Encoding.BigEndianUnicode\n- uid: System.Text.Encoding.UTF7\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF7\n  fullName: System.Text.Encoding.UTF7\n  nameWithType: Encoding.UTF7\n  commentId: P:System.Text.Encoding.UTF7\n- uid: System.Text.Encoding.UTF8\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF8\n  fullName: System.Text.Encoding.UTF8\n  nameWithType: Encoding.UTF8\n  commentId: P:System.Text.Encoding.UTF8\n- uid: System.Text.Encoding.UTF32\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF32\n  fullName: System.Text.Encoding.UTF32\n  nameWithType: Encoding.UTF32\n  commentId: P:System.Text.Encoding.UTF32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Text.Encoding.IsSingleByte\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsSingleByte\n  fullName: System.Text.Encoding.IsSingleByte\n  nameWithType: Encoding.IsSingleByte\n  commentId: P:System.Text.Encoding.IsSingleByte\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char*, Int32)\n  fullName: System.Text.Encoding.GetByteCount(System.Char*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char*, Int32)\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n- uid: System.Char*\n  name: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Char*\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char[], Int32, Int32)\n  fullName: System.Text.Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)\n  name.vb: GetByteCount(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char[], Int32, Int32)\n  nameWithType.vb: Encoding.GetByteCount(Char(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Text.Encoding.GetByteCount(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(String)\n  fullName: System.Text.Encoding.GetByteCount(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.String)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.String)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(String)\n  commentId: M:System.Text.Encoding.GetByteCount(System.String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n- uid: System.Byte*\n  name: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Byte*\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType.vb: Encoding.GetBytes(String, Int32, Int32, Byte(), Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte*, Int32)\n  fullName: System.Text.Encoding.GetCharCount(System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetCharCount(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetCharCount(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte*, Int32, Char*, Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32, Char(), Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n- uid: System.Text.Encoding.GetDecoder\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetDecoder()\n  fullName: System.Text.Encoding.GetDecoder()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetDecoder\n    name: GetDecoder\n    fullName: System.Text.Encoding.GetDecoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetDecoder\n    name: GetDecoder\n    fullName: System.Text.Encoding.GetDecoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetDecoder()\n  commentId: M:System.Text.Encoding.GetDecoder\n- uid: System.Text.Decoder\n  parent: System.Text\n  isExternal: false\n  name: Decoder\n  fullName: System.Text.Decoder\n  nameWithType: Decoder\n  commentId: T:System.Text.Decoder\n- uid: System.Text.Encoding.GetEncoder\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoder()\n  fullName: System.Text.Encoding.GetEncoder()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoder\n    name: GetEncoder\n    fullName: System.Text.Encoding.GetEncoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoder\n    name: GetEncoder\n    fullName: System.Text.Encoding.GetEncoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoder()\n  commentId: M:System.Text.Encoding.GetEncoder\n- uid: System.Text.Encoder\n  parent: System.Text\n  isExternal: false\n  name: Encoder\n  fullName: System.Text.Encoder\n  nameWithType: Encoder\n  commentId: T:System.Text.Encoder\n- uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetMaxByteCount(Int32)\n  fullName: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    name: GetMaxByteCount\n    fullName: System.Text.Encoding.GetMaxByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    name: GetMaxByteCount\n    fullName: System.Text.Encoding.GetMaxByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetMaxByteCount(Int32)\n  commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n- uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetMaxCharCount(Int32)\n  fullName: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    name: GetMaxCharCount\n    fullName: System.Text.Encoding.GetMaxCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    name: GetMaxCharCount\n    fullName: System.Text.Encoding.GetMaxCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetMaxCharCount(Int32)\n  commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n- uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetString(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetString(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetString(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetString(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.Text.EncoderFallbackException\n  isExternal: false\n  name: EncoderFallbackException\n  fullName: System.Text.EncoderFallbackException\n  nameWithType: EncoderFallbackException\n  commentId: T:System.Text.EncoderFallbackException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Text.DecoderFallbackException\n  isExternal: false\n  name: DecoderFallbackException\n  fullName: System.Text.DecoderFallbackException\n  nameWithType: DecoderFallbackException\n  commentId: T:System.Text.DecoderFallbackException\n"}