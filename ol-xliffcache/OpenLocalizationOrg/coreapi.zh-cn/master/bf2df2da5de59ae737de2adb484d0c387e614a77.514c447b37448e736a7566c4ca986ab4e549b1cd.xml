{"nodes":[{"pos":[2744,2753],"content":"SqlBinary","needQuote":true,"nodes":[{"content":"SqlBinary","pos":[0,9]}]},{"pos":[5545,5562],"content":"SqlBinary(Byte[])","needQuote":true,"nodes":[{"content":"SqlBinary(Byte[])","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The byte array to be stored or retrieved.","pos":[6501,6547],"source":"\\n<p>The byte array to be stored or retrieved."},{"content":"&lt;/p&gt;\\n","pos":[6548,6554],"source":" </p>\\n"},{"pos":[6992,6998],"content":"IsNull","needQuote":true,"nodes":[{"content":"IsNull","pos":[0,6]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;strong&gt;null&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7788,7883],"source":"\\n<p>\\n<strong>true</strong> if <strong>null</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8276,8287],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The position of the byte to be retrieved.","pos":[9383,9429],"source":"\\n<p>The position of the byte to be retrieved."},{"content":"&lt;/p&gt;\\n","pos":[9430,9436],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The byte located at the position indicated by the integer parameter.&lt;/p&gt;\\n","pos":[9494,9573],"source":"\\n<p>The byte located at the position indicated by the integer parameter.</p>\\n"},{"pos":[10644,10650],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"pos":[12394,12399],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[14185,14210],"content":"Add(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"Add(SqlBinary, SqlBinary)","pos":[0,25]}]},{"pos":[16143,16163],"content":"CompareTo(SqlBinary)","needQuote":true,"nodes":[{"content":"CompareTo(SqlBinary)","pos":[0,20]}]},{"pos":[18685,18702],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[21196,21224],"content":"Concat(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"Concat(SqlBinary, SqlBinary)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The concatenated values of the &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; parameters.&lt;/p&gt;\\n","pos":[22611,22690],"source":"\\n<p>The concatenated values of the <em>x</em> and <em>y</em> parameters.</p>\\n"},{"pos":[23203,23231],"content":"Equals(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"Equals(SqlBinary, SqlBinary)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two values are equal.","pos":[24536,24593],"source":"\\n<p>\\n<strong>true</strong> if the two values are equal."},{"content":"Otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[24594,24628],"source":" Otherwise, <strong>false</strong>."},{"content":"If either instance is null, then the &lt;strong&gt;SqlBinary&lt;/strong&gt; will be null.&lt;/p&gt;\\n","pos":[24629,24712],"source":" If either instance is null, then the <strong>SqlBinary</strong> will be null.</p>\\n"},{"pos":[25081,25095],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to be compared.","pos":[26028,26059],"source":"\\n<p>The object to be compared."},{"content":"&lt;/p&gt;\\n","pos":[26060,26066],"source":" </p>\\n"},{"pos":[26720,26733],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[27497,27542],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[28103,28136],"content":"GreaterThan(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"GreaterThan(SqlBinary, SqlBinary)","pos":[0,33]}]},{"pos":[30843,30883],"content":"GreaterThanOrEqual(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(SqlBinary, SqlBinary)","pos":[0,40]}]},{"pos":[33619,33649],"content":"LessThan(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"LessThan(SqlBinary, SqlBinary)","pos":[0,30]}]},{"pos":[36326,36363],"content":"LessThanOrEqual(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(SqlBinary, SqlBinary)","pos":[0,37]}]},{"pos":[39081,39112],"content":"NotEquals(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"NotEquals(SqlBinary, SqlBinary)","pos":[0,31]}]},{"pos":[41770,41800],"content":"Addition(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"Addition(SqlBinary, SqlBinary)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The concatenated values of the &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; parameters.&lt;/p&gt;\\n","pos":[43193,43272],"source":"\\n<p>The concatenated values of the <em>x</em> and <em>y</em> parameters.</p>\\n"},{"pos":[43802,43832],"content":"Equality(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"Equality(SqlBinary, SqlBinary)","pos":[0,30]}]},{"pos":[46425,46454],"content":"Explicit(SqlBinary to Byte[])","needQuote":true,"nodes":[{"content":"Explicit(SqlBinary to Byte[])","pos":[0,29]}]},{"pos":[48409,48439],"content":"Explicit(SqlGuid to SqlBinary)","needQuote":true,"nodes":[{"content":"Explicit(SqlGuid to SqlBinary)","pos":[0,30]}]},{"pos":[50518,50551],"content":"GreaterThan(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"GreaterThan(SqlBinary, SqlBinary)","pos":[0,33]}]},{"pos":[53253,53293],"content":"GreaterThanOrEqual(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(SqlBinary, SqlBinary)","pos":[0,40]}]},{"pos":[55962,55991],"content":"Implicit(Byte[] to SqlBinary)","needQuote":true,"nodes":[{"content":"Implicit(Byte[] to SqlBinary)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The array of bytes to be converted.","pos":[56852,56892],"source":"\\n<p>The array of bytes to be converted."},{"content":"&lt;/p&gt;\\n","pos":[56893,56899],"source":" </p>\\n"},{"pos":[57874,57906],"content":"Inequality(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"Inequality(SqlBinary, SqlBinary)","pos":[0,32]}]},{"pos":[60561,60591],"content":"LessThan(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"LessThan(SqlBinary, SqlBinary)","pos":[0,30]}]},{"pos":[63271,63308],"content":"LessThanOrEqual(SqlBinary, SqlBinary)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(SqlBinary, SqlBinary)","pos":[0,37]}]},{"pos":[65819,65830],"content":"ToSqlGuid()","needQuote":true,"nodes":[{"content":"ToSqlGuid()","pos":[0,11]}]},{"pos":[67067,67077],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[68435,68455],"content":"System.Data.SqlTypes","needQuote":true,"nodes":[{"content":"System.Data.SqlTypes","pos":[0,20]}]},{"pos":[68659,68668],"content":"INullable","needQuote":true,"nodes":[{"content":"INullable","pos":[0,9]}]},{"pos":[68855,68866],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[69068,69090],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[69238,69244],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[69311,69312],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69362,69368],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69429,69430]},{"pos":[69485,69491],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69551,69552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69649,69655],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[69722,69723],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69773,69779],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69840,69841]},{"pos":[69896,69902],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69962,69963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70208,70239],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[70405,70420],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[70496,70497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70547,70553],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[70614,70615]},{"pos":[70670,70676],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70736,70737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70843,70858],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[70934,70935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70985,70991],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71052,71053]},{"pos":[71108,71114],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71174,71175],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71401,71410],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[71503,71510],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[71578,71579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71606,71607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71676,71683],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[71751,71752],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71779,71780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71909,71915],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[72046,72052],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72228,72237],"content":"SqlBinary","needQuote":true,"nodes":[{"content":"SqlBinary","pos":[0,9]}]},{"pos":[72382,72388],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[72508,72512],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[72571,72573]},{"pos":[72636,72640],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[72698,72700],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[72881,72887],"content":"IsNull","needQuote":true,"nodes":[{"content":"IsNull","pos":[0,6]}]},{"pos":[73091,73098],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[73245,73250],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73390,73394],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[73574,73591],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[73726,73735],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[73789,73790],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73840,73846],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73906,73907],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73998,74007],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[74061,74062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74112,74118],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74178,74179],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74399,74409],"content":"SqlBoolean","needQuote":true,"nodes":[{"content":"SqlBoolean","pos":[0,10]}]},{"pos":[74628,74642],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[74767,74773],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[74822,74823],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74873,74879],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74939,74940],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75026,75032],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[75081,75082],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75132,75138],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75198,75199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75380,75389],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[75568,75581],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[75688,75699],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[75753,75754],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75781,75782],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75858,75869],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[75923,75924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75951,75952],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76148,76155],"content":"SqlGuid","needQuote":true,"nodes":[{"content":"SqlGuid","pos":[0,7]}]},{"pos":[76353,76363],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[76464,76472],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[76523,76524],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76551,76552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76625,76633],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[76684,76685],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76712,76713],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76874,76880],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[77037,77058],"content":"SqlNullValueException","needQuote":true,"nodes":[{"content":"SqlNullValueException","pos":[0,21]}]}],"content":"items:\n- uid: System.Data.SqlTypes.SqlBinary\n  commentId: T:System.Data.SqlTypes.SqlBinary\n  id: SqlBinary\n  parent: System.Data.SqlTypes\n  children:\n  - System.Data.SqlTypes.SqlBinary.#ctor(System.Byte[])\n  - System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)\n  - System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.Equals(System.Object)\n  - System.Data.SqlTypes.SqlBinary.GetHashCode\n  - System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.IsNull\n  - System.Data.SqlTypes.SqlBinary.Item(System.Int32)\n  - System.Data.SqlTypes.SqlBinary.Length\n  - System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.Null\n  - System.Data.SqlTypes.SqlBinary.op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Byte[]\n  - System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlBinary\n  - System.Data.SqlTypes.SqlBinary.op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.op_Implicit(System.Byte[])~System.Data.SqlTypes.SqlBinary\n  - System.Data.SqlTypes.SqlBinary.op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  - System.Data.SqlTypes.SqlBinary.ToSqlGuid\n  - System.Data.SqlTypes.SqlBinary.ToString\n  - System.Data.SqlTypes.SqlBinary.Value\n  langs:\n  - csharp\n  - vb\n  name: SqlBinary\n  fullName: System.Data.SqlTypes.SqlBinary\n  type: Struct\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SqlBinary\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 17\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a variable-length stream of binary data to be stored in or retrieved from a database. </p>\\n\"\n  syntax:\n    content: 'public struct SqlBinary : INullable, IComparable'\n    content.vb: >-\n      Public Structure SqlBinary\n          Implements INullable, IComparable\n  implements:\n  - System.Data.SqlTypes.INullable\n  - System.IComparable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: SqlBinary\n- uid: System.Data.SqlTypes.SqlBinary.Null\n  commentId: F:System.Data.SqlTypes.SqlBinary.Null\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  fullName: System.Data.SqlTypes.SqlBinary.Null\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 499\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a <xref href=\\\"System.DBNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be assigned to this instance of the <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlBinary Null\n    content.vb: Public Shared ReadOnly Null As SqlBinary\n    return:\n      type: System.Data.SqlTypes.SqlBinary\n  seealso:\n  - type: System.Data.SqlTypes.SqlBinary.IsNull\n    commentId: P:System.Data.SqlTypes.SqlBinary.IsNull\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlBinary.Null\n- uid: System.Data.SqlTypes.SqlBinary.#ctor(System.Byte[])\n  commentId: M:System.Data.SqlTypes.SqlBinary.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: SqlBinary(Byte[])\n  fullName: System.Data.SqlTypes.SqlBinary.SqlBinary(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 33\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure, setting the <xref href=\\\"System.Data.SqlTypes.SqlBinary.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to the contents of the supplied byte array.</p>\\n\"\n  syntax:\n    content: public SqlBinary(byte[] value)\n    content.vb: Public Sub New(value As Byte())\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to be stored or retrieved. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Data.SqlTypes.SqlBinary.SqlBinary(System.Byte())\n  name.vb: SqlBinary(Byte())\n  nameWithType: SqlBinary.SqlBinary(Byte[])\n  nameWithType.vb: SqlBinary.SqlBinary(Byte())\n- uid: System.Data.SqlTypes.SqlBinary.IsNull\n  commentId: P:System.Data.SqlTypes.SqlBinary.IsNull\n  id: IsNull\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: IsNull\n  fullName: System.Data.SqlTypes.SqlBinary.IsNull\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNull\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 67\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Indicates whether this <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is null. This property is read-only.</p>\\n\"\n  syntax:\n    content: public bool IsNull { get; }\n    content.vb: Public ReadOnly Property IsNull As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <strong>null</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Data.SqlTypes.INullable.IsNull\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlBinary.IsNull\n- uid: System.Data.SqlTypes.SqlBinary.Item(System.Int32)\n  commentId: P:System.Data.SqlTypes.SqlBinary.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Data.SqlTypes.SqlBinary.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 96\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the single byte from the <xref href=\\\"System.Data.SqlTypes.SqlBinary.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property located at the position indicated by the integer parameter, <em>index</em>. If <em>index</em> indicates a position beyond the end of the byte array, a <xref href=\\\"System.Data.SqlTypes.SqlNullValueException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be raised. This property is read-only.</p>\\n\"\n  syntax:\n    content: public byte this[int index] { get; }\n    content.vb: Public ReadOnly Property Item(index As Integer) As Byte\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the byte to be retrieved. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The byte located at the position indicated by the integer parameter.</p>\\n\"\n  exceptions:\n  - type: System.Data.SqlTypes.SqlNullValueException\n    commentId: T:System.Data.SqlTypes.SqlNullValueException\n    description: \"\\n<p>The property is read when the <xref href=\\\"System.Data.SqlTypes.SqlBinary.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains <xref href=\\\"System.Data.SqlTypes.SqlBinary.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>- or - </p>\\n<p>The <em>index</em> parameter indicates a position byond the length of the byte array as indicated by the <xref href=\\\"System.Data.SqlTypes.SqlBinary.Length\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Data.SqlTypes.SqlBinary.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: SqlBinary.Item[Int32]\n  nameWithType.vb: SqlBinary.Item(Int32)\n- uid: System.Data.SqlTypes.SqlBinary.Length\n  commentId: P:System.Data.SqlTypes.SqlBinary.Length\n  id: Length\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Length\n  fullName: System.Data.SqlTypes.SqlBinary.Length\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Length\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 113\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the length in bytes of the <xref href=\\\"System.Data.SqlTypes.SqlBinary.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property. This property is read-only.</p>\\n\"\n  syntax:\n    content: public int Length { get; }\n    content.vb: Public ReadOnly Property Length As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length of the binary data in the <xref href=\\\"System.Data.SqlTypes.SqlBinary.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  exceptions:\n  - type: System.Data.SqlTypes.SqlNullValueException\n    commentId: T:System.Data.SqlTypes.SqlNullValueException\n    description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlBinary.Length\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is read when the <xref href=\\\"System.Data.SqlTypes.SqlBinary.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains <xref href=\\\"System.Data.SqlTypes.SqlBinary.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlBinary.Length\n- uid: System.Data.SqlTypes.SqlBinary.Value\n  commentId: P:System.Data.SqlTypes.SqlBinary.Value\n  id: Value\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Data.SqlTypes.SqlBinary.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 80\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the value of the <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. This property is read-only.</p>\\n\"\n  syntax:\n    content: public byte[] Value { get; }\n    content.vb: Public ReadOnly Property Value As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  exceptions:\n  - type: System.Data.SqlTypes.SqlNullValueException\n    commentId: T:System.Data.SqlTypes.SqlNullValueException\n    description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlBinary.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is read when the property contains <xref href=\\\"System.Data.SqlTypes.SqlBinary.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlBinary.Value\n- uid: System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Add(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 339\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Concatenates two specified <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to create a new <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static SqlBinary Add(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Function Add(x As SqlBinary, y As SqlBinary) As SqlBinary\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the concatenated value of x and y.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.Add(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)\n  id: CompareTo(System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 412\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares this <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to the supplied <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(SqlBinary value)\n    content.vb: Public Function CompareTo(value As SqlBinary) As Integer\n    parameters:\n    - id: value\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to be compared to this <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of this <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure and the object.</p>\\n<p>Return value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>The value of this <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is less than the object. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is the same as object. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is greater than object.</p>\\n<p>-or- </p>\\n<p>The object is a null reference. </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBinary.CompareTo(SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)\n  commentId: M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)\n  id: CompareTo(System.Object)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Object)\n  fullName: System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 401\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares this <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to the supplied object and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(object value)\n    content.vb: Public Function CompareTo(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to be compared to this <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of this <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure and the object.</p>\\n<p>Return value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>The value of this <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is less than the object. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is the same as object. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is greater than object.</p>\\n<p>-or- </p>\\n<p>The object is a null reference. </p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBinary.CompareTo(Object)\n- uid: System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Concat(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Concat\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 344\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Concatenates two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to create a new <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static SqlBinary Concat(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Function Concat(x As SqlBinary, y As SqlBinary) As SqlBinary\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>The concatenated values of the <em>x</em> and <em>y</em> parameters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.Concat(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Equals(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 350\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether they are equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean Equals(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Function Equals(x As SqlBinary, y As SqlBinary) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two values are equal. Otherwise, <strong>false</strong>. If either instance is null, then the <strong>SqlBinary</strong> will be null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.Equals(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.Equals(System.Object)\n  commentId: M:System.Data.SqlTypes.SqlBinary.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Data.SqlTypes.SqlBinary.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 430\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares the supplied object parameter to the <xref href=\\\"System.Data.SqlTypes.SqlBinary.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to be compared. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if object is an instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the two are equal; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlBinary.Equals(Object)\n- uid: System.Data.SqlTypes.SqlBinary.GetHashCode\n  commentId: M:System.Data.SqlTypes.SqlBinary.GetHashCode\n  id: GetHashCode\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Data.SqlTypes.SqlBinary.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 478\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Returns the hash code for this <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlBinary.GetHashCode()\n- uid: System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 368\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether the first is greater than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean GreaterThan(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Function GreaterThan(x As SqlBinary, y As SqlBinary) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than the second instance. Otherwise <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.GreaterThan(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 380\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether the first is greater than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean GreaterThanOrEqual(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Function GreaterThanOrEqual(x As SqlBinary, y As SqlBinary) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than or equal to the second instance. Otherwise <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.GreaterThanOrEqual(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: LessThan(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 362\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether the first is less than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean LessThan(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Function LessThan(x As SqlBinary, y As SqlBinary) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than the second instance. Otherwise <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.LessThan(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 374\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether the first is less than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean LessThanOrEqual(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Function LessThanOrEqual(x As SqlBinary, y As SqlBinary) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than or equal to the second instance. Otherwise <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.LessThanOrEqual(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: NotEquals(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotEquals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 356\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether they are not equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean NotEquals(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Function NotEquals(x As SqlBinary, y As SqlBinary) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.NotEquals(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Addition(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.Addition(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 170\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Concatenates the two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters to create a new <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static SqlBinary operator +(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Operator +(x As SqlBinary, y As SqlBinary) As SqlBinary\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>The concatenated values of the <em>x</em> and <em>y</em> parameters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.Addition(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Equality(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.Equality(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 260\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether they are equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator ==(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Operator =(x As SqlBinary, y As SqlBinary) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.Equality(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Byte[]\n  commentId: M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Byte[]\n  id: op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Byte[]\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlBinary to Byte[])\n  fullName: System.Data.SqlTypes.SqlBinary.Explicit(System.Data.SqlTypes.SqlBinary to System.Byte[])\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 143\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts a <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public static explicit operator byte[](SqlBinary x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlBinary) As Byte()\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBinary.Narrowing(System.Data.SqlTypes.SqlBinary to System.Byte())\n  name.vb: Narrowing(SqlBinary to Byte())\n  nameWithType: SqlBinary.Explicit(SqlBinary to Byte[])\n  nameWithType.vb: SqlBinary.Narrowing(SqlBinary to Byte())\n- uid: System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlBinary\n  commentId: M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlBinary\n  id: op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlBinary\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlGuid to SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.Explicit(System.Data.SqlTypes.SqlGuid to System.Data.SqlTypes.SqlBinary)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 246\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts a <xref href=\\\"System.Data.SqlTypes.SqlGuid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlBinary(SqlGuid x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlGuid) As SqlBinary\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlGuid\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlGuid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlGuid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBinary.Narrowing(System.Data.SqlTypes.SqlGuid to System.Data.SqlTypes.SqlBinary)\n  name.vb: Narrowing(SqlGuid to SqlBinary)\n  nameWithType: SqlBinary.Explicit(SqlGuid to SqlBinary)\n  nameWithType.vb: SqlBinary.Narrowing(SqlGuid to SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 298\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether the first is greater than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator>(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Operator>(x As SqlBinary, y As SqlBinary) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than the second instance. Otherwise <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.GreaterThan(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 325\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structues to determine whether the first is greater than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator >=(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Operator >=(x As SqlBinary, y As SqlBinary) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than or equal to the second instance. Otherwise <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.GreaterThanOrEqual(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.op_Implicit(System.Byte[])~System.Data.SqlTypes.SqlBinary\n  commentId: M:System.Data.SqlTypes.SqlBinary.op_Implicit(System.Byte[])~System.Data.SqlTypes.SqlBinary\n  id: op_Implicit(System.Byte[])~System.Data.SqlTypes.SqlBinary\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Byte[] to SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.Implicit(System.Byte[] to System.Data.SqlTypes.SqlBinary)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 131\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts an array of bytes to a <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlBinary(byte[] x)\n    content.vb: Public Shared Widening Operator CType(x As Byte()) As SqlBinary\n    parameters:\n    - id: x\n      type: System.Byte[]\n      description: \"\\n<p>The array of bytes to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that represents the converted array of bytes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBinary.Widening(System.Byte() to System.Data.SqlTypes.SqlBinary)\n  name.vb: Widening(Byte() to SqlBinary)\n  nameWithType: SqlBinary.Implicit(Byte[] to SqlBinary)\n  nameWithType.vb: SqlBinary.Widening(Byte() to SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: Inequality(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.Inequality(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 274\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether they are not equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator !=(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Operator <>(x As SqlBinary, y As SqlBinary) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.Inequality(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: LessThan(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 285\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether the first is less than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator <(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Operator <(x As SqlBinary, y As SqlBinary) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than the second instance. Otherwise <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.LessThan(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  commentId: M:System.Data.SqlTypes.SqlBinary.op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  id: op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(SqlBinary, SqlBinary)\n  fullName: System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary, System.Data.SqlTypes.SqlBinary)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 311\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether the first is less than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator <=(SqlBinary x, SqlBinary y)\n    content.vb: Public Shared Operator <=(x As SqlBinary, y As SqlBinary) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than or equal to the second instance. Otherwise <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBinary.LessThanOrEqual(SqlBinary, SqlBinary)\n- uid: System.Data.SqlTypes.SqlBinary.ToSqlGuid\n  commentId: M:System.Data.SqlTypes.SqlBinary.ToSqlGuid\n  id: ToSqlGuid\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: ToSqlGuid()\n  fullName: System.Data.SqlTypes.SqlBinary.ToSqlGuid()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlGuid\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 386\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this instance of <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <xref href=\\\"System.Data.SqlTypes.SqlGuid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlGuid ToSqlGuid()\n    content.vb: Public Function ToSqlGuid As SqlGuid\n    return:\n      type: System.Data.SqlTypes.SqlGuid\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlGuid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBinary.ToSqlGuid()\n- uid: System.Data.SqlTypes.SqlBinary.ToString\n  commentId: M:System.Data.SqlTypes.SqlBinary.ToString\n  id: ToString\n  parent: System.Data.SqlTypes.SqlBinary\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Data.SqlTypes.SqlBinary.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBinary.cs\n    startLine: 153\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a string.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains the <xref href=\\\"System.Data.SqlTypes.SqlBinary.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the <xref href=\\\"System.Data.SqlTypes.SqlBinary.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null the string will contain \\\"null\\\".</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlBinary.ToString()\nreferences:\n- uid: System.Data.SqlTypes\n  isExternal: false\n  name: System.Data.SqlTypes\n  fullName: System.Data.SqlTypes\n  nameWithType: System.Data.SqlTypes\n  commentId: N:System.Data.SqlTypes\n- uid: System.Data.SqlTypes.INullable\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: INullable\n  fullName: System.Data.SqlTypes.INullable\n  nameWithType: INullable\n  commentId: T:System.Data.SqlTypes.INullable\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Data.SqlTypes.SqlBinary\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlBinary\n  fullName: System.Data.SqlTypes.SqlBinary\n  nameWithType: SqlBinary\n  commentId: T:System.Data.SqlTypes.SqlBinary\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Data.SqlTypes.INullable.IsNull\n  parent: System.Data.SqlTypes.INullable\n  isExternal: false\n  name: IsNull\n  fullName: System.Data.SqlTypes.INullable.IsNull\n  nameWithType: INullable.IsNull\n  commentId: P:System.Data.SqlTypes.INullable.IsNull\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlBoolean\n  fullName: System.Data.SqlTypes.SqlBoolean\n  nameWithType: SqlBoolean\n  commentId: T:System.Data.SqlTypes.SqlBoolean\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Data.SqlTypes.SqlGuid\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlGuid\n  fullName: System.Data.SqlTypes.SqlGuid\n  nameWithType: SqlGuid\n  commentId: T:System.Data.SqlTypes.SqlGuid\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Data.SqlTypes.SqlNullValueException\n  isExternal: false\n  name: SqlNullValueException\n  fullName: System.Data.SqlTypes.SqlNullValueException\n  nameWithType: SqlNullValueException\n  commentId: T:System.Data.SqlTypes.SqlNullValueException\n"}