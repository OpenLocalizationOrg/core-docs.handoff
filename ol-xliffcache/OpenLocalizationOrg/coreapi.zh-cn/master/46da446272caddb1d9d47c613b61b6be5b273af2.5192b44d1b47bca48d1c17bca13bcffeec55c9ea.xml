{"nodes":[{"pos":[751,768],"content":"Tuple<T1, T2, T3>","needQuote":true,"nodes":[{"content":"Tuple&lt;T1, T2, T3&gt;","pos":[0,17],"source":"Tuple<T1, T2, T3>"}]},{"content":"\\n&lt;p&gt;The type of the tuple's first component.&lt;/p&gt;\\n","pos":[1517,1568],"source":"\\n<p>The type of the tuple's first component.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the tuple's second component.&lt;/p&gt;\\n","pos":[1603,1655],"source":"\\n<p>The type of the tuple's second component.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the tuple's third component.&lt;/p&gt;\\n","pos":[1690,1741],"source":"\\n<p>The type of the tuple's third component.</p>\\n"},{"pos":[2957,2974],"content":"Tuple(T1, T2, T3)","needQuote":true,"nodes":[{"content":"Tuple(T1, T2, T3)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The value of the tuple's first component.&lt;/p&gt;\\n","pos":[3664,3716],"source":"\\n<p>The value of the tuple's first component.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the tuple's second component.&lt;/p&gt;\\n","pos":[3773,3826],"source":"\\n<p>The value of the tuple's second component.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the tuple's third component.&lt;/p&gt;\\n","pos":[3883,3935],"source":"\\n<p>The value of the tuple's third component.</p>\\n"},{"pos":[4302,4307],"content":"Item1","needQuote":true,"nodes":[{"content":"Item1","pos":[0,5]}]},{"pos":[5449,5454],"content":"Item2","needQuote":true,"nodes":[{"content":"Item2","pos":[0,5]}]},{"pos":[6598,6603],"content":"Item3","needQuote":true,"nodes":[{"content":"Item3","pos":[0,5]}]},{"pos":[7793,7807],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.&lt;/p&gt;\\n","pos":[8553,8605],"source":"\\n<p>The object to compare with this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance is equal to the specified object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8666,8793],"source":"\\n<p>\\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9253,9266],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[9930,9975],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[10678,10728],"content":"IStructuralComparable.CompareTo(Object, IComparer)","needQuote":true,"nodes":[{"content":"IStructuralComparable.CompareTo(Object, IComparer)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;An object to compare with the current instance.&lt;/p&gt;\\n","pos":[11860,11918],"source":"\\n<p>An object to compare with the current instance.</p>\\n"},{"content":"\\n&lt;p&gt;An object that provides custom rules for comparison.&lt;/p&gt;\\n","pos":[12000,12063],"source":"\\n<p>An object that provides custom rules for comparison.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative position of this instance and &lt;em&gt;other&lt;/em&gt; in the sort order, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value&lt;/p&gt;\\n&lt;p&gt;Description&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A negative integer&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance precedes &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance and &lt;em&gt;other&lt;/em&gt; have the same position in the sort order.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A positive integer&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance follows &lt;em&gt;other&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[12122,12676],"source":"\\n<p>A signed integer that indicates the relative position of this instance and <em>other</em> in the sort order, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>A negative integer</p>\\n</td><td>\\n<p>This instance precedes <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>This instance and <em>other</em> have the same position in the sort order.</p>\\n</td></tr><tr><td>\\n<p>A positive integer</p>\\n</td><td>\\n<p>This instance follows <em>other</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[14131,14185],"content":"IStructuralEquatable.Equals(Object, IEqualityComparer)","needQuote":true,"nodes":[{"content":"IStructuralEquatable.Equals(Object, IEqualityComparer)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The object to compare with this instance.&lt;/p&gt;\\n","pos":[15220,15272],"source":"\\n<p>The object to compare with this instance.</p>\\n"},{"content":"\\n&lt;p&gt;An object that defines the method to use to evaluate whether the two objects are equal.&lt;/p&gt;\\n","pos":[15362,15460],"source":"\\n<p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current instance is equal to the specified object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15521,15648],"source":"\\n<p>\\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[16600,16651],"content":"IStructuralEquatable.GetHashCode(IEqualityComparer)","needQuote":true,"nodes":[{"content":"IStructuralEquatable.GetHashCode(IEqualityComparer)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[17990,18035],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[18821,18850],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An object to compare with the current instance.&lt;/p&gt;\\n","pos":[19786,19844],"source":"\\n<p>An object to compare with the current instance.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative position of this instance and &lt;em&gt;obj&lt;/em&gt; in the sort order, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value&lt;/p&gt;\\n&lt;p&gt;Description&lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A negative integer&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance precedes &lt;em&gt;obj&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance and &lt;em&gt;obj&lt;/em&gt; have the same position in the sort order.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A positive integer&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance follows &lt;em&gt;obj&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[19903,20449],"source":"\\n<p>A signed integer that indicates the relative position of this instance and <em>obj</em> in the sort order, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>A negative integer</p>\\n</td><td>\\n<p>This instance precedes <em>obj</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>This instance and <em>obj</em> have the same position in the sort order.</p>\\n</td></tr><tr><td>\\n<p>A positive integer</p>\\n</td><td>\\n<p>This instance follows <em>obj</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[21274,21284],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[22409,22415],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[22546,22552],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22736,22757],"content":"IStructuralComparable","needQuote":true,"nodes":[{"content":"IStructuralComparable","pos":[0,21]}]},{"pos":[23009,23029],"content":"IStructuralEquatable","needQuote":true,"nodes":[{"content":"IStructuralEquatable","pos":[0,20]}]},{"pos":[23245,23256],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[23458,23480],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[23628,23634],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23701,23702],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23752,23758],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23819,23820]},{"pos":[23875,23881],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23941,23942],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24039,24045],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24112,24113],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24163,24169],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24230,24231]},{"pos":[24286,24292],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24352,24353],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24598,24629],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[24795,24810],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24886,24887],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24937,24943],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25004,25005]},{"pos":[25060,25066],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25126,25127],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25233,25248],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[25324,25325],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25375,25381],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25442,25443]},{"pos":[25498,25504],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25564,25565],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25791,25800],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[25893,25900],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25968,25969],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25996,25997],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26066,26073],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26141,26142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26169,26170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26345,26362],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[26471,26486],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26562,26563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26590,26591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26668,26683],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26759,26760],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26787,26788],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26945,26963],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[27103,27105],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"pos":[27199,27201],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"pos":[27295,27297],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"pos":[27390,27392],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"pos":[27465,27467],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"pos":[27540,27542],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"pos":[27671,27685],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[27804,27810],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27877,27878],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27928,27934],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27994,27995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28078,28084],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28151,28152],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28202,28208],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28268,28269],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28442,28449],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28615,28628],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[28729,28740],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28812,28813],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28840,28841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28914,28925],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[28997,28998],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29025,29026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29186,29191],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29447,29475],"content":"CompareTo(Object, IComparer)","needQuote":true,"nodes":[{"content":"CompareTo(Object, IComparer)","pos":[0,28]}]},{"pos":[29713,29722],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[29798,29799],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29849,29855],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29916,29917]},{"pos":[29987,29996],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[30050,30051],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30193,30202],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[30278,30279],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30329,30335],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30396,30397]},{"pos":[30467,30476],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[30530,30531],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30818,30827],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[31122,31155],"content":"Equals(Object, IEqualityComparer)","needQuote":true,"nodes":[{"content":"Equals(Object, IEqualityComparer)","pos":[0,33]}]},{"pos":[31401,31407],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31479,31480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31530,31536],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31597,31598]},{"pos":[31676,31693],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[31755,31756],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31902,31908],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31980,31981],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32031,32037],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32098,32099]},{"pos":[32177,32194],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[32256,32257],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32560,32577],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[32888,32918],"content":"GetHashCode(IEqualityComparer)","needQuote":true,"nodes":[{"content":"GetHashCode(IEqualityComparer)","pos":[0,30]}]},{"pos":[33145,33156],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[33233,33234],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33307,33324],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[33386,33387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33524,33535],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[33612,33613],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33686,33703],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[33765,33766],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34063,34080],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[34215,34224],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[34278,34279],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34329,34335],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34395,34396],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34487,34496],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[34550,34551],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34601,34607],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34667,34668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34871,34881],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[34976,34984],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[35053,35054],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35081,35082],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35152,35160],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[35229,35230],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35257,35258],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35413,35419],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[35575,35592],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Tuple`3\n  commentId: T:System.Tuple`3\n  id: Tuple`3\n  parent: System\n  children:\n  - System.Tuple`3.#ctor(`0,`1,`2)\n  - System.Tuple`3.Equals(System.Object)\n  - System.Tuple`3.GetHashCode\n  - System.Tuple`3.Item1\n  - System.Tuple`3.Item2\n  - System.Tuple`3.Item3\n  - System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  - System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  - System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  - System.Tuple`3.System#IComparable#CompareTo(System.Object)\n  - System.Tuple`3.ToString\n  langs:\n  - csharp\n  - vb\n  name: Tuple<T1, T2, T3>\n  fullName: System.Tuple<T1, T2, T3>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Tuple\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 241\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a 3-tuple, or triple. </p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      public class Tuple<T1, T2, T3> : IStructuralEquatable, IStructuralComparable, IComparable, ITuple\n    content.vb: >-\n      <Serializable>\n\n      Public Class Tuple(Of T1, T2, T3)\n          Implements IStructuralEquatable, IStructuralComparable, IComparable, ITuple\n    typeParameters:\n    - id: T1\n      description: \"\\n<p>The type of the tuple's first component.</p>\\n\"\n    - id: T2\n      description: \"\\n<p>The type of the tuple's second component.</p>\\n\"\n    - id: T3\n      description: \"\\n<p>The type of the tuple's third component.</p>\\n\"\n  seealso:\n  - type: System.Tuple\n    commentId: T:System.Tuple\n  - type: System.Tuple`1\n    commentId: T:System.Tuple`1\n  - type: System.Tuple`2\n    commentId: T:System.Tuple`2\n  - type: System.Tuple`4\n    commentId: T:System.Tuple`4\n  - type: System.Tuple`5\n    commentId: T:System.Tuple`5\n  - type: System.Tuple`6\n    commentId: T:System.Tuple`6\n  - type: System.Tuple`7\n    commentId: T:System.Tuple`7\n  - type: System.Tuple`8\n    commentId: T:System.Tuple`8\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IStructuralComparable\n  - System.Collections.IStructuralEquatable\n  - System.IComparable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  fullName.vb: System.Tuple(Of T1, T2, T3)\n  name.vb: Tuple(Of T1, T2, T3)\n  nameWithType: Tuple<T1, T2, T3>\n  nameWithType.vb: Tuple(Of T1, T2, T3)\n- uid: System.Tuple`3.#ctor(`0,`1,`2)\n  commentId: M:System.Tuple`3.#ctor(`0,`1,`2)\n  id: '#ctor(`0,`1,`2)'\n  parent: System.Tuple`3\n  langs:\n  - csharp\n  - vb\n  name: Tuple(T1, T2, T3)\n  fullName: System.Tuple<T1, T2, T3>.Tuple(T1, T2, T3)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 252\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public Tuple(T1 item1, T2 item2, T3 item3)\n    content.vb: Public Sub New(item1 As T1, item2 As T2, item3 As T3)\n    parameters:\n    - id: item1\n      type: '{T1}'\n      description: \"\\n<p>The value of the tuple's first component.</p>\\n\"\n    - id: item2\n      type: '{T2}'\n      description: \"\\n<p>The value of the tuple's second component.</p>\\n\"\n    - id: item3\n      type: '{T3}'\n      description: \"\\n<p>The value of the tuple's third component.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Tuple(Of T1, T2, T3).Tuple(T1, T2, T3)\n  nameWithType: Tuple<T1, T2, T3>.Tuple(T1, T2, T3)\n  nameWithType.vb: Tuple(Of T1, T2, T3).Tuple(T1, T2, T3)\n- uid: System.Tuple`3.Item1\n  commentId: P:System.Tuple`3.Item1\n  id: Item1\n  parent: System.Tuple`3\n  langs:\n  - csharp\n  - vb\n  name: Item1\n  fullName: System.Tuple<T1, T2, T3>.Item1\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Item1\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 248\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the value of the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's first component.</p>\\n\"\n  syntax:\n    content: public T1 Item1 { get; }\n    content.vb: Public ReadOnly Property Item1 As T1\n    parameters: []\n    return:\n      type: '{T1}'\n      description: \"\\n<p>The value of the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's first component.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Tuple(Of T1, T2, T3).Item1\n  nameWithType: Tuple<T1, T2, T3>.Item1\n  nameWithType.vb: Tuple(Of T1, T2, T3).Item1\n- uid: System.Tuple`3.Item2\n  commentId: P:System.Tuple`3.Item2\n  id: Item2\n  parent: System.Tuple`3\n  langs:\n  - csharp\n  - vb\n  name: Item2\n  fullName: System.Tuple<T1, T2, T3>.Item2\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Item2\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 249\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the value of the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's second component.</p>\\n\"\n  syntax:\n    content: public T2 Item2 { get; }\n    content.vb: Public ReadOnly Property Item2 As T2\n    parameters: []\n    return:\n      type: '{T2}'\n      description: \"\\n<p>The value of the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's second component.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Tuple(Of T1, T2, T3).Item2\n  nameWithType: Tuple<T1, T2, T3>.Item2\n  nameWithType.vb: Tuple(Of T1, T2, T3).Item2\n- uid: System.Tuple`3.Item3\n  commentId: P:System.Tuple`3.Item3\n  id: Item3\n  parent: System.Tuple`3\n  langs:\n  - csharp\n  - vb\n  name: Item3\n  fullName: System.Tuple<T1, T2, T3>.Item3\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Item3\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 250\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the value of the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's third component.</p>\\n\"\n  syntax:\n    content: public T3 Item3 { get; }\n    content.vb: Public ReadOnly Property Item3 As T3\n    parameters: []\n    return:\n      type: '{T3}'\n      description: \"\\n<p>The value of the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object's third component.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Tuple(Of T1, T2, T3).Item3\n  nameWithType: Tuple<T1, T2, T3>.Item3\n  nameWithType.vb: Tuple(Of T1, T2, T3).Item3\n- uid: System.Tuple`3.Equals(System.Object)\n  commentId: M:System.Tuple`3.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Tuple`3\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Tuple<T1, T2, T3>.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 258\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Tuple(Of T1, T2, T3).Equals(System.Object)\n  nameWithType: Tuple<T1, T2, T3>.Equals(Object)\n  nameWithType.vb: Tuple(Of T1, T2, T3).Equals(Object)\n- uid: System.Tuple`3.GetHashCode\n  commentId: M:System.Tuple`3.GetHashCode\n  id: GetHashCode\n  parent: System.Tuple`3\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Tuple<T1, T2, T3>.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 300\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Tuple(Of T1, T2, T3).GetHashCode()\n  nameWithType: Tuple<T1, T2, T3>.GetHashCode()\n  nameWithType.vb: Tuple(Of T1, T2, T3).GetHashCode()\n- uid: System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  commentId: M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\n  isEii: true\n  parent: System.Tuple`3\n  langs:\n  - csharp\n  - vb\n  name: IStructuralComparable.CompareTo(Object, IComparer)\n  fullName: System.Tuple<T1, T2, T3>.System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IStructuralComparable.CompareTo\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 278\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\\n\"\n  syntax:\n    content: int IStructuralComparable.CompareTo(object other, IComparer comparer)\n    content.vb: Function System.Collections.IStructuralComparable.CompareTo(other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo\n    parameters:\n    - id: other\n      type: System.Object\n      description: \"\\n<p>An object to compare with the current instance.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>An object that provides custom rules for comparison.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative position of this instance and <em>other</em> in the sort order, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>A negative integer</p>\\n</td><td>\\n<p>This instance precedes <em>other</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>This instance and <em>other</em> have the same position in the sort order.</p>\\n</td></tr><tr><td>\\n<p>A positive integer</p>\\n</td><td>\\n<p>This instance follows <em>other</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>other</em> is not a <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n    commentId: M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  implements:\n  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n  fullName.vb: System.Tuple(Of T1, T2, T3).System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)\n  name.vb: System.Collections.IStructuralComparable.CompareTo(Object, IComparer)\n  nameWithType: Tuple<T1, T2, T3>.IStructuralComparable.CompareTo(Object, IComparer)\n  nameWithType.vb: Tuple(Of T1, T2, T3).System.Collections.IStructuralComparable.CompareTo(Object, IComparer)\n- uid: System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  commentId: M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\n  isEii: true\n  parent: System.Tuple`3\n  langs:\n  - csharp\n  - vb\n  name: IStructuralEquatable.Equals(Object, IEqualityComparer)\n  fullName: System.Tuple<T1, T2, T3>.System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IStructuralEquatable.Equals\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 262\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value that indicates whether the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to a specified object based on a specified comparison method.</p>\\n\"\n  syntax:\n    content: bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)\n    content.vb: Function System.Collections.IStructuralEquatable.Equals(other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals\n    parameters:\n    - id: other\n      type: System.Object\n      description: \"\\n<p>The object to compare with this instance.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n  fullName.vb: System.Tuple(Of T1, T2, T3).System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)\n  name.vb: System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)\n  nameWithType: Tuple<T1, T2, T3>.IStructuralEquatable.Equals(Object, IEqualityComparer)\n  nameWithType.vb: Tuple(Of T1, T2, T3).System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)\n- uid: System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  commentId: M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)\n  isEii: true\n  parent: System.Tuple`3\n  langs:\n  - csharp\n  - vb\n  name: IStructuralEquatable.GetHashCode(IEqualityComparer)\n  fullName: System.Tuple<T1, T2, T3>.System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IStructuralEquatable.GetHashCode\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 304\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Calculates the hash code for the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object by using a specified computation method.</p>\\n\"\n  syntax:\n    content: int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)\n    content.vb: Function System.Collections.IStructuralEquatable.GetHashCode(comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode\n    parameters:\n    - id: comparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>An object whose <xref href=\\\"System.Collections.IEqualityComparer.GetHashCode(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  method calculates the hash code of the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  implements:\n  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  fullName.vb: System.Tuple(Of T1, T2, T3).System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  name.vb: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)\n  nameWithType: Tuple<T1, T2, T3>.IStructuralEquatable.GetHashCode(IEqualityComparer)\n  nameWithType.vb: Tuple(Of T1, T2, T3).System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)\n- uid: System.Tuple`3.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.Tuple`3.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.Tuple`3\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.Tuple<T1, T2, T3>.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IComparable.CompareTo\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 274\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares the current <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\\n\"\n  syntax:\n    content: int IComparable.CompareTo(object obj)\n    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with the current instance.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative position of this instance and <em>obj</em> in the sort order, as shown in the following table.</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>A negative integer</p>\\n</td><td>\\n<p>This instance precedes <em>obj</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>This instance and <em>obj</em> have the same position in the sort order.</p>\\n</td></tr><tr><td>\\n<p>A positive integer</p>\\n</td><td>\\n<p>This instance follows <em>obj</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>obj</em> is not a <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Tuple`3.Equals(System.Object)\n    commentId: M:System.Tuple`3.Equals(System.Object)\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  fullName.vb: System.Tuple(Of T1, T2, T3).System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: Tuple<T1, T2, T3>.IComparable.CompareTo(Object)\n  nameWithType.vb: Tuple(Of T1, T2, T3).System.IComparable.CompareTo(Object)\n- uid: System.Tuple`3.ToString\n  commentId: M:System.Tuple`3.ToString\n  id: ToString\n  parent: System.Tuple`3\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Tuple<T1, T2, T3>.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Tuple.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Tuple.cs\n    startLine: 311\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a string that represents the value of this <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of this <xref href=\\\"System.Tuple`3\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Tuple(Of T1, T2, T3).ToString()\n  nameWithType: Tuple<T1, T2, T3>.ToString()\n  nameWithType.vb: Tuple(Of T1, T2, T3).ToString()\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IStructuralComparable\n  parent: System.Collections\n  isExternal: false\n  name: IStructuralComparable\n  fullName: System.Collections.IStructuralComparable\n  nameWithType: IStructuralComparable\n  commentId: T:System.Collections.IStructuralComparable\n- uid: System.Collections.IStructuralEquatable\n  parent: System.Collections\n  isExternal: false\n  name: IStructuralEquatable\n  fullName: System.Collections.IStructuralEquatable\n  nameWithType: IStructuralEquatable\n  commentId: T:System.Collections.IStructuralEquatable\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: '{T1}'\n  definition: T1\n  name: T1\n  fullName: T1\n  nameWithType: T1\n  commentId: '!:T1'\n- uid: '{T2}'\n  definition: T2\n  name: T2\n  fullName: T2\n  nameWithType: T2\n  commentId: '!:T2'\n- uid: '{T3}'\n  definition: T3\n  name: T3\n  fullName: T3\n  nameWithType: T3\n  commentId: '!:T3'\n- uid: T1\n  isExternal: false\n  name: T1\n  fullName: T1\n  nameWithType: T1\n- uid: T2\n  isExternal: false\n  name: T2\n  fullName: T2\n  nameWithType: T2\n- uid: T3\n  isExternal: false\n  name: T3\n  fullName: T3\n  nameWithType: T3\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n  parent: System.Collections.IStructuralComparable\n  isExternal: true\n  name: CompareTo(Object, IComparer)\n  fullName: System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)\n  spec.csharp:\n  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n    name: CompareTo\n    fullName: System.Collections.IStructuralComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IComparer\n    name: IComparer\n    fullName: System.Collections.IComparer\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n    name: CompareTo\n    fullName: System.Collections.IStructuralComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IComparer\n    name: IComparer\n    fullName: System.Collections.IComparer\n  - name: )\n    fullName: )\n  nameWithType: IStructuralComparable.CompareTo(Object, IComparer)\n  commentId: M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  nameWithType: IComparer\n  commentId: T:System.Collections.IComparer\n- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n  parent: System.Collections.IStructuralEquatable\n  isExternal: true\n  name: Equals(Object, IEqualityComparer)\n  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)\n  spec.csharp:\n  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n    name: Equals\n    fullName: System.Collections.IStructuralEquatable.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n    name: Equals\n    fullName: System.Collections.IStructuralEquatable.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  nameWithType: IStructuralEquatable.Equals(Object, IEqualityComparer)\n  commentId: M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n  nameWithType: IEqualityComparer\n  commentId: T:System.Collections.IEqualityComparer\n- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  parent: System.Collections.IStructuralEquatable\n  isExternal: false\n  name: GetHashCode(IEqualityComparer)\n  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  spec.csharp:\n  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n    name: GetHashCode\n    fullName: System.Collections.IStructuralEquatable.GetHashCode\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n    name: GetHashCode\n    fullName: System.Collections.IStructuralEquatable.GetHashCode\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEqualityComparer\n    name: IEqualityComparer\n    fullName: System.Collections.IEqualityComparer\n  - name: )\n    fullName: )\n  nameWithType: IStructuralEquatable.GetHashCode(IEqualityComparer)\n  commentId: M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}