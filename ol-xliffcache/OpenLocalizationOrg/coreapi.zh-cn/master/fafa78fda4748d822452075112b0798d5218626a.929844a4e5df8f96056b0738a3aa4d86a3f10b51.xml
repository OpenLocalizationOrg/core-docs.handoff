{"nodes":[{"pos":[386,402],"content":"DiagnosticSource","needQuote":true,"nodes":[{"content":"DiagnosticSource","pos":[0,16]}]},{"pos":[1662,1680],"content":"DiagnosticSource()","needQuote":true,"nodes":[{"content":"DiagnosticSource()","pos":[0,18]}]},{"pos":[2624,2641],"content":"IsEnabled(String)","needQuote":true,"nodes":[{"content":"IsEnabled(String)","pos":[0,17]}]},{"pos":[3408,3444],"content":"The name of the event being written.","needQuote":true,"nodes":[{"content":"The name of the event being written.","pos":[0,36]}]},{"pos":[3858,3879],"content":"Write(String, Object)","needQuote":true,"nodes":[{"content":"Write(String, Object)","pos":[0,21]}]},{"pos":[4664,4700],"content":"The name of the event being written.","needQuote":true,"nodes":[{"content":"The name of the event being written.","pos":[0,36]}]},{"pos":[5078,5096],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[5263,5269],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5429,5439],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[5568,5576],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[5679,5680],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5727,5728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5818,5826],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[5929,5930],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5977,5978],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6147,6161],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6318,6324],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6423,6424],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6494,6500],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6585,6586],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6689,6695],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6794,6795],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6865,6871],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6956,6957],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7153,7175],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7369,7375],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7474,7475],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7545,7551],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7637,7638]},{"pos":[7716,7722],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7807,7808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7925,7931],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8030,8031],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8101,8107],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8193,8194]},{"pos":[8272,8278],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8363,8364],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8583,8614],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8835,8850],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8967,8968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9038,9044],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9130,9131]},{"pos":[9209,9215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9300,9301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9427,9442],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9559,9560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9630,9636],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9722,9723]},{"pos":[9801,9807],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9892,9893],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10088,10101],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10239,10250],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10359,10360],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10407,10408],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10501,10512],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10621,10622],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10669,10670],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10828,10837],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[10963,10970],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11071,11072],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11119,11120],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11209,11216],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11317,11318],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11365,11366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11528,11545],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11695,11710],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11827,11828],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11875,11876],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11973,11988],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12105,12106],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12153,12154],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12278,12284],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12415,12421],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[12567,12574],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Diagnostics.DiagnosticSource\n  commentId: T:System.Diagnostics.DiagnosticSource\n  id: DiagnosticSource\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.DiagnosticSource.#ctor\n  - System.Diagnostics.DiagnosticSource.IsEnabled(System.String)\n  - System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)\n  langs:\n  - csharp\n  - vb\n  name: DiagnosticSource\n  nameWithType: DiagnosticSource\n  fullName: System.Diagnostics.DiagnosticSource\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DiagnosticSource\n    path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSource.cs\n    startLine: 16\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: public abstract class DiagnosticSource\n    content.vb: Public MustInherit Class DiagnosticSource\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n- uid: System.Diagnostics.DiagnosticSource.#ctor\n  commentId: M:System.Diagnostics.DiagnosticSource.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.DiagnosticSource\n  langs:\n  - csharp\n  - vb\n  name: DiagnosticSource()\n  nameWithType: DiagnosticSource.DiagnosticSource()\n  fullName: System.Diagnostics.DiagnosticSource.DiagnosticSource()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/ref/System.Diagnostics.DiagnosticSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.DiagnosticSource/ref/System.Diagnostics.DiagnosticSource.cs\n    startLine: 19\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: protected DiagnosticSource()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n- uid: System.Diagnostics.DiagnosticSource.IsEnabled(System.String)\n  commentId: M:System.Diagnostics.DiagnosticSource.IsEnabled(System.String)\n  id: IsEnabled(System.String)\n  parent: System.Diagnostics.DiagnosticSource\n  langs:\n  - csharp\n  - vb\n  name: IsEnabled(String)\n  nameWithType: DiagnosticSource.IsEnabled(String)\n  fullName: System.Diagnostics.DiagnosticSource.IsEnabled(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEnabled\n    path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSource.cs\n    startLine: 43\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: public abstract bool IsEnabled(string name)\n    content.vb: Public MustOverride Function IsEnabled(name As String) As Boolean\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the event being written.\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n- uid: System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)\n  commentId: M:System.Diagnostics.DiagnosticSource.Write(System.String,System.Object)\n  id: Write(System.String,System.Object)\n  parent: System.Diagnostics.DiagnosticSource\n  langs:\n  - csharp\n  - vb\n  name: Write(String, Object)\n  nameWithType: DiagnosticSource.Write(String, Object)\n  fullName: System.Diagnostics.DiagnosticSource.Write(System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Write\n    path: src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSource.cs\n    startLine: 34\n  assemblies:\n  - System.Diagnostics.DiagnosticSource\n  namespace: System.Diagnostics\n  syntax:\n    content: public abstract void Write(string name, object value)\n    content.vb: Public MustOverride Sub Write(name As String, value As Object)\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the event being written.\n    - id: value\n      type: System.Object\n      description: >-\n        An object that represent the value being passed as a payload for the event.\n\n        This is often a anonymous type which contains several sub-values.\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  nameWithType: System.Diagnostics\n  fullName: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n  commentId: T:System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n"}