{"nodes":[{"pos":[999,1010],"content":"HttpContent","needQuote":true,"nodes":[{"content":"HttpContent","pos":[0,11]}]},{"pos":[2302,2315],"content":"HttpContent()","needQuote":true,"nodes":[{"content":"HttpContent()","pos":[0,13]}]},{"pos":[3207,3214],"content":"Headers","needQuote":true,"nodes":[{"content":"Headers","pos":[0,7]}]},{"pos":[4437,4456],"content":"CopyToAsync(Stream)","needQuote":true,"nodes":[{"content":"CopyToAsync(Stream)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The target stream.&lt;/p&gt;\\n","pos":[5210,5239],"source":"\\n<p>The target stream.</p>\\n"},{"pos":[5924,5961],"content":"CopyToAsync(Stream, TransportContext)","needQuote":true,"nodes":[{"content":"CopyToAsync(Stream, TransportContext)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The target stream.&lt;/p&gt;\\n","pos":[6799,6828],"source":"\\n<p>The target stream.</p>\\n"},{"content":"\\n&lt;p&gt;Information about the transport (channel binding token, for example).","pos":[6908,6982],"source":"\\n<p>Information about the transport (channel binding token, for example)."},{"content":"This parameter may be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6983,7033],"source":" This parameter may be <strong>null</strong>.</p>\\n"},{"pos":[7649,7679],"content":"CreateContentReadStreamAsync()","needQuote":true,"nodes":[{"content":"CreateContentReadStreamAsync()","pos":[0,30]}]},{"pos":[8963,8972],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[9982,9998],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to releases only unmanaged resources.&lt;/p&gt;\\n","pos":[10808,10952],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources.</p>\\n"},{"pos":[11308,11329],"content":"LoadIntoBufferAsync()","needQuote":true,"nodes":[{"content":"LoadIntoBufferAsync()","pos":[0,21]}]},{"pos":[12547,12573],"content":"LoadIntoBufferAsync(Int64)","needQuote":true,"nodes":[{"content":"LoadIntoBufferAsync(Int64)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The maximum size, in bytes, of the buffer to use.&lt;/p&gt;\\n","pos":[13316,13376],"source":"\\n<p>The maximum size, in bytes, of the buffer to use.</p>\\n"},{"pos":[13957,13979],"content":"ReadAsByteArrayAsync()","needQuote":true,"nodes":[{"content":"ReadAsByteArrayAsync()","pos":[0,22]}]},{"pos":[15187,15206],"content":"ReadAsStreamAsync()","needQuote":true,"nodes":[{"content":"ReadAsStreamAsync()","pos":[0,19]}]},{"pos":[16435,16454],"content":"ReadAsStringAsync()","needQuote":true,"nodes":[{"content":"ReadAsStringAsync()","pos":[0,19]}]},{"pos":[17796,17844],"content":"SerializeToStreamAsync(Stream, TransportContext)","needQuote":true,"nodes":[{"content":"SerializeToStreamAsync(Stream, TransportContext)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The target stream.&lt;/p&gt;\\n","pos":[18695,18724],"source":"\\n<p>The target stream.</p>\\n"},{"content":"\\n&lt;p&gt;Information about the transport (channel binding token, for example).","pos":[18804,18878],"source":"\\n<p>Information about the transport (channel binding token, for example)."},{"content":"This parameter may be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18879,18929],"source":" This parameter may be <strong>null</strong>.</p>\\n"},{"pos":[19601,19628],"content":"TryComputeLength(out Int64)","needQuote":true,"nodes":[{"content":"TryComputeLength(out Int64)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The length in bytes of the HTTP content.&lt;/p&gt;\\n","pos":[20372,20423],"source":"\\n<p>The length in bytes of the HTTP content.</p>\\n"},{"pos":[21080,21095],"content":"System.Net.Http","needQuote":true,"nodes":[{"content":"System.Net.Http","pos":[0,15]}]},{"pos":[21253,21259],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21409,21420],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[21595,21605],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[21700,21708],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21777,21778],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21805,21806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21876,21884],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21953,21954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21981,21982],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22165,22179],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22298,22304],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22371,22372],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22422,22428],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22488,22489],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22572,22578],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22645,22646],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22696,22702],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22762,22763],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22977,22999],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[23147,23153],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23220,23221],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23271,23277],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23338,23339]},{"pos":[23394,23400],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23460,23461],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23558,23564],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23631,23632],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23682,23688],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23749,23750]},{"pos":[23805,23811],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23871,23872],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24117,24148],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[24314,24329],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24405,24406],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24456,24462],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24523,24524]},{"pos":[24579,24585],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24645,24646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24752,24767],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24843,24844],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24894,24900],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24961,24962]},{"pos":[25017,25023],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25083,25084],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25314,25327],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25428,25439],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25511,25512],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25539,25540],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25613,25624],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25696,25697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25724,25725],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25900,25909],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[26002,26009],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26077,26078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26105,26106],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26175,26182],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26250,26251],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26278,26279],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26454,26471],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[26580,26595],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26671,26672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26699,26700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26777,26792],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26868,26869],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26896,26897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27042,27048],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[27225,27243],"content":"HttpContentHeaders","needQuote":true,"nodes":[{"content":"HttpContentHeaders","pos":[0,18]}]},{"pos":[27451,27474],"content":"System.Net.Http.Headers","needQuote":true,"nodes":[{"content":"System.Net.Http.Headers","pos":[0,23]}]},{"pos":[27662,27668],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[27849,27853],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[28003,28012],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[28144,28166],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[28342,28358],"content":"TransportContext","needQuote":true,"nodes":[{"content":"TransportContext","pos":[0,16]}]},{"pos":[28613,28625],"content":"Task<Stream>","needQuote":true,"nodes":[{"content":"Task&lt;Stream&gt;","pos":[0,12],"source":"Task<Stream>"}]},{"pos":[28839,28843],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[28917,28918],"content":"<","needQuote":true,"nodes":[]},{"pos":[28971,28977],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[29122,29126],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[29201,29204]},{"pos":[29264,29270],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[29333,29334],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29541,29554],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[29751,29755],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[29808,29809],"content":"<","needQuote":true,"nodes":[]},{"pos":[29836,29843],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[29958,29962],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[30016,30019]},{"pos":[30053,30060],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[30093,30094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30313,30322],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[30425,30432],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[30484,30485],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30512,30513],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30587,30594],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[30646,30647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30674,30675],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30839,30846],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[30993,30998],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[31209,31221],"content":"Task<Byte[]>","needQuote":true,"nodes":[{"content":"Task&lt;Byte[]&gt;","pos":[0,12],"source":"Task<Byte[]>"}]},{"pos":[31429,31433],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[31507,31508],"content":"<","needQuote":true,"nodes":[]},{"pos":[31556,31560],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[31619,31621]},{"pos":[31734,31738],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[31813,31816]},{"pos":[31871,31875],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[31933,31935],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[31963,31964],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32238,32250],"content":"Task<String>","needQuote":true,"nodes":[{"content":"Task&lt;String&gt;","pos":[0,12],"source":"Task<String>"}]},{"pos":[32458,32462],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[32536,32537],"content":"<","needQuote":true,"nodes":[]},{"pos":[32587,32593],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[32735,32739],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[32814,32817]},{"pos":[32874,32880],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[32940,32941],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Net.Http.HttpContent\n  commentId: T:System.Net.Http.HttpContent\n  id: HttpContent\n  parent: System.Net.Http\n  children:\n  - System.Net.Http.HttpContent.#ctor\n  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)\n  - System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)\n  - System.Net.Http.HttpContent.CreateContentReadStreamAsync\n  - System.Net.Http.HttpContent.Dispose\n  - System.Net.Http.HttpContent.Dispose(System.Boolean)\n  - System.Net.Http.HttpContent.Headers\n  - System.Net.Http.HttpContent.LoadIntoBufferAsync\n  - System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)\n  - System.Net.Http.HttpContent.ReadAsByteArrayAsync\n  - System.Net.Http.HttpContent.ReadAsStreamAsync\n  - System.Net.Http.HttpContent.ReadAsStringAsync\n  - System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)\n  - System.Net.Http.HttpContent.TryComputeLength(System.Int64@)\n  langs:\n  - csharp\n  - vb\n  name: HttpContent\n  fullName: System.Net.Http.HttpContent\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HttpContent\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 111\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>A base class representing an HTTP entity body and content headers.</p>\\n\"\n  syntax:\n    content: 'public abstract class HttpContent : IDisposable'\n    content.vb: >-\n      Public MustInherit Class HttpContent\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: HttpContent\n- uid: System.Net.Http.HttpContent.#ctor\n  commentId: M:System.Net.Http.HttpContent.#ctor\n  id: '#ctor'\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: HttpContent()\n  fullName: System.Net.Http.HttpContent.HttpContent()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 113\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.HttpContent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected HttpContent()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: HttpContent.HttpContent()\n- uid: System.Net.Http.HttpContent.Headers\n  commentId: P:System.Net.Http.HttpContent.Headers\n  id: Headers\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: Headers\n  fullName: System.Net.Http.HttpContent.Headers\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Headers\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 114\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets the HTTP content headers as defined in RFC 2616.</p>\\n\"\n  syntax:\n    content: public HttpContentHeaders Headers { get; }\n    content.vb: Public ReadOnly Property Headers As HttpContentHeaders\n    parameters: []\n    return:\n      type: System.Net.Http.Headers.HttpContentHeaders\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Http.Headers.HttpContentHeaders\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The content headers as defined in RFC 2616.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: HttpContent.Headers\n- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)\n  commentId: M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)\n  id: CopyToAsync(System.IO.Stream)\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: CopyToAsync(Stream)\n  fullName: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyToAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 115\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <em>stream</em> parameter.</p>\\n\"\n  syntax:\n    content: public Task CopyToAsync(Stream stream)\n    content.vb: Public Function CopyToAsync(stream As Stream) As Task\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The target stream.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpContent.CopyToAsync(Stream)\n- uid: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)\n  commentId: M:System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream,System.Net.TransportContext)\n  id: CopyToAsync(System.IO.Stream,System.Net.TransportContext)\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: CopyToAsync(Stream, TransportContext)\n  fullName: System.Net.Http.HttpContent.CopyToAsync(System.IO.Stream, System.Net.TransportContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyToAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 116\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Serialize the HTTP content into a stream of bytes and copies it to the stream object provided as the <em>stream</em> parameter.</p>\\n\"\n  syntax:\n    content: public Task CopyToAsync(Stream stream, TransportContext context)\n    content.vb: Public Function CopyToAsync(stream As Stream, context As TransportContext) As Task\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The target stream.</p>\\n\"\n    - id: context\n      type: System.Net.TransportContext\n      description: \"\\n<p>Information about the transport (channel binding token, for example). This parameter may be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpContent.CopyToAsync(Stream, TransportContext)\n- uid: System.Net.Http.HttpContent.CreateContentReadStreamAsync\n  commentId: M:System.Net.Http.HttpContent.CreateContentReadStreamAsync\n  id: CreateContentReadStreamAsync\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: CreateContentReadStreamAsync()\n  fullName: System.Net.Http.HttpContent.CreateContentReadStreamAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateContentReadStreamAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 117\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Serialize the HTTP content to a memory stream as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: protected virtual Task<Stream> CreateContentReadStreamAsync()\n    content.vb: Protected Overridable Function CreateContentReadStreamAsync As Task(Of Stream)\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: HttpContent.CreateContentReadStreamAsync()\n- uid: System.Net.Http.HttpContent.Dispose\n  commentId: M:System.Net.Http.HttpContent.Dispose\n  id: Dispose\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Net.Http.HttpContent.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 118\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Releases the unmanaged resources and disposes of the managed resources used by the <xref href=\\\"System.Net.Http.HttpContent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpContent.Dispose()\n- uid: System.Net.Http.HttpContent.Dispose(System.Boolean)\n  commentId: M:System.Net.Http.HttpContent.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Net.Http.HttpContent.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 119\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Net.Http.HttpContent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally disposes of the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: HttpContent.Dispose(Boolean)\n- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync\n  commentId: M:System.Net.Http.HttpContent.LoadIntoBufferAsync\n  id: LoadIntoBufferAsync\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: LoadIntoBufferAsync()\n  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LoadIntoBufferAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 120\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Serialize the HTTP content to a memory buffer as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task LoadIntoBufferAsync()\n    content.vb: Public Function LoadIntoBufferAsync As Task\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpContent.LoadIntoBufferAsync()\n- uid: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)\n  commentId: M:System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)\n  id: LoadIntoBufferAsync(System.Int64)\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: LoadIntoBufferAsync(Int64)\n  fullName: System.Net.Http.HttpContent.LoadIntoBufferAsync(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LoadIntoBufferAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 121\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Serialize the HTTP content to a memory buffer as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task LoadIntoBufferAsync(long maxBufferSize)\n    content.vb: Public Function LoadIntoBufferAsync(maxBufferSize As Long) As Task\n    parameters:\n    - id: maxBufferSize\n      type: System.Int64\n      description: \"\\n<p>The maximum size, in bytes, of the buffer to use.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpContent.LoadIntoBufferAsync(Int64)\n- uid: System.Net.Http.HttpContent.ReadAsByteArrayAsync\n  commentId: M:System.Net.Http.HttpContent.ReadAsByteArrayAsync\n  id: ReadAsByteArrayAsync\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: ReadAsByteArrayAsync()\n  fullName: System.Net.Http.HttpContent.ReadAsByteArrayAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadAsByteArrayAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 122\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Serialize the HTTP content to a byte array as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<byte[]> ReadAsByteArrayAsync()\n    content.vb: Public Function ReadAsByteArrayAsync As Task(Of Byte())\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpContent.ReadAsByteArrayAsync()\n- uid: System.Net.Http.HttpContent.ReadAsStreamAsync\n  commentId: M:System.Net.Http.HttpContent.ReadAsStreamAsync\n  id: ReadAsStreamAsync\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: ReadAsStreamAsync()\n  fullName: System.Net.Http.HttpContent.ReadAsStreamAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadAsStreamAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 123\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Serialize the HTTP content and return a stream that represents the content as an asynchronous operation. </p>\\n\"\n  syntax:\n    content: public Task<Stream> ReadAsStreamAsync()\n    content.vb: Public Function ReadAsStreamAsync As Task(Of Stream)\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpContent.ReadAsStreamAsync()\n- uid: System.Net.Http.HttpContent.ReadAsStringAsync\n  commentId: M:System.Net.Http.HttpContent.ReadAsStringAsync\n  id: ReadAsStringAsync\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: ReadAsStringAsync()\n  fullName: System.Net.Http.HttpContent.ReadAsStringAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadAsStringAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 124\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Serialize the HTTP content to a string as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<string> ReadAsStringAsync()\n    content.vb: Public Function ReadAsStringAsync As Task(Of String)\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpContent.ReadAsStringAsync()\n- uid: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)\n  commentId: M:System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)\n  id: SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: SerializeToStreamAsync(Stream, TransportContext)\n  fullName: System.Net.Http.HttpContent.SerializeToStreamAsync(System.IO.Stream, System.Net.TransportContext)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SerializeToStreamAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 125\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Serialize the HTTP content to a stream as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: protected abstract Task SerializeToStreamAsync(Stream stream, TransportContext context)\n    content.vb: Protected MustOverride Function SerializeToStreamAsync(stream As Stream, context As TransportContext) As Task\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The target stream.</p>\\n\"\n    - id: context\n      type: System.Net.TransportContext\n      description: \"\\n<p>Information about the transport (channel binding token, for example). This parameter may be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: HttpContent.SerializeToStreamAsync(Stream, TransportContext)\n- uid: System.Net.Http.HttpContent.TryComputeLength(System.Int64@)\n  commentId: M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)\n  id: TryComputeLength(System.Int64@)\n  parent: System.Net.Http.HttpContent\n  langs:\n  - csharp\n  - vb\n  name: TryComputeLength(out Int64)\n  fullName: System.Net.Http.HttpContent.TryComputeLength(out System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryComputeLength\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 126\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Determines whether the HTTP content has a valid length in bytes.</p>\\n\"\n  syntax:\n    content: protected abstract bool TryComputeLength(out long length)\n    content.vb: Protected MustOverride Function TryComputeLength(ByRef length As Long) As Boolean\n    parameters:\n    - id: length\n      type: System.Int64\n      description: \"\\n<p>The length in bytes of the HTTP content.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>length</em> is a valid length; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  fullName.vb: System.Net.Http.HttpContent.TryComputeLength(ByRef System.Int64)\n  name.vb: TryComputeLength(ByRef Int64)\n  nameWithType: HttpContent.TryComputeLength(out Int64)\n  nameWithType.vb: HttpContent.TryComputeLength(ByRef Int64)\nreferences:\n- uid: System.Net.Http\n  isExternal: false\n  name: System.Net.Http\n  fullName: System.Net.Http\n  commentId: N:System.Net.Http\n  nameWithType: System.Net.Http\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.Http.Headers.HttpContentHeaders\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: HttpContentHeaders\n  fullName: System.Net.Http.Headers.HttpContentHeaders\n  commentId: T:System.Net.Http.Headers.HttpContentHeaders\n  nameWithType: HttpContentHeaders\n- uid: System.Net.Http.Headers\n  isExternal: false\n  name: System.Net.Http.Headers\n  fullName: System.Net.Http.Headers\n  commentId: N:System.Net.Http.Headers\n  nameWithType: System.Net.Http.Headers\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  commentId: T:System.Threading.Tasks.Task\n  nameWithType: Task\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n- uid: System.Net.TransportContext\n  isExternal: false\n  name: TransportContext\n  fullName: System.Net.TransportContext\n  commentId: T:System.Net.TransportContext\n  nameWithType: TransportContext\n- uid: System.Threading.Tasks.Task{System.IO.Stream}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Stream>\n  fullName: System.Threading.Tasks.Task<System.IO.Stream>\n  fullname.vb: System.Threading.Tasks.Task(Of System.IO.Stream)\n  name.vb: Task(Of Stream)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}\n  nameWithType: Task<Stream>\n  nameWithType.vb: Task(Of Stream)\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task`1\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Threading.Tasks.Task{System.Byte[]}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Byte[]>\n  fullName: System.Threading.Tasks.Task<System.Byte[]>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Byte())\n  name.vb: Task(Of Byte())\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Byte[]}\n  nameWithType: Task<Byte[]>\n  nameWithType.vb: Task(Of Byte())\n- uid: System.Threading.Tasks.Task{System.String}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<String>\n  fullName: System.Threading.Tasks.Task<System.String>\n  fullname.vb: System.Threading.Tasks.Task(Of System.String)\n  name.vb: Task(Of String)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.String}\n  nameWithType: Task<String>\n  nameWithType.vb: Task(Of String)\n"}