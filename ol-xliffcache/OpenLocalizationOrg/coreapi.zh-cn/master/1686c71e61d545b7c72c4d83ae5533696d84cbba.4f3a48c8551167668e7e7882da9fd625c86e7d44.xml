{"nodes":[{"pos":[1772,1780],"content":"Volatile","needQuote":true,"nodes":[{"content":"Volatile","pos":[0,8]}]},{"pos":[2954,2971],"content":"Read(ref Boolean)","needQuote":true,"nodes":[{"content":"Read(ref Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[4098,4127],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[4188,4217],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.","pos":[4218,4356]},{"content":"&lt;/p&gt;\\n","pos":[4357,4363],"source":" </p>\\n"},{"pos":[4843,4857],"content":"Read(ref Byte)","needQuote":true,"nodes":[{"content":"Read(ref Byte)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[5971,6000],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[6058,6087],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.","pos":[6088,6226]},{"content":"&lt;/p&gt;\\n","pos":[6227,6233],"source":" </p>\\n"},{"pos":[6707,6723],"content":"Read(ref Double)","needQuote":true,"nodes":[{"content":"Read(ref Double)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[7850,7879],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[7939,7968],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.","pos":[7969,8107]},{"content":"&lt;/p&gt;\\n","pos":[8108,8114],"source":" </p>\\n"},{"pos":[8593,8608],"content":"Read(ref Int16)","needQuote":true,"nodes":[{"content":"Read(ref Int16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[9728,9757],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[9816,9845],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.","pos":[9846,9984]},{"content":"&lt;/p&gt;\\n","pos":[9985,9991],"source":" </p>\\n"},{"pos":[10466,10481],"content":"Read(ref Int32)","needQuote":true,"nodes":[{"content":"Read(ref Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[11601,11630],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[11689,11718],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.","pos":[11719,11857]},{"content":"&lt;/p&gt;\\n","pos":[11858,11864],"source":" </p>\\n"},{"pos":[12339,12354],"content":"Read(ref Int64)","needQuote":true,"nodes":[{"content":"Read(ref Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[13471,13500],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[13559,13588],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.","pos":[13589,13727]},{"content":"&lt;/p&gt;\\n","pos":[13728,13734],"source":" </p>\\n"},{"pos":[14212,14228],"content":"Read(ref IntPtr)","needQuote":true,"nodes":[{"content":"Read(ref IntPtr)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[15355,15384],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[15444,15473],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.","pos":[15474,15612]},{"content":"&lt;/p&gt;\\n","pos":[15613,15619],"source":" </p>\\n"},{"pos":[16098,16113],"content":"Read(ref SByte)","needQuote":true,"nodes":[{"content":"Read(ref SByte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[17291,17320],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[17379,17408],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.","pos":[17409,17547]},{"content":"&lt;/p&gt;\\n","pos":[17548,17554],"source":" </p>\\n"},{"pos":[18207,18223],"content":"Read(ref Single)","needQuote":true,"nodes":[{"content":"Read(ref Single)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[19348,19377],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[19437,19466],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.","pos":[19467,19605]},{"content":"&lt;/p&gt;\\n","pos":[19606,19612],"source":" </p>\\n"},{"pos":[20094,20110],"content":"Read(ref UInt16)","needQuote":true,"nodes":[{"content":"Read(ref UInt16)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[21294,21323],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[21383,21412],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.&lt;/p&gt;\\n","pos":[21413,21557],"source":" This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</p>\\n"},{"pos":[22214,22230],"content":"Read(ref UInt32)","needQuote":true,"nodes":[{"content":"Read(ref UInt32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[23415,23444],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[23504,23533],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.&lt;/p&gt;\\n","pos":[23534,23678],"source":" This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</p>\\n"},{"pos":[24335,24351],"content":"Read(ref UInt64)","needQuote":true,"nodes":[{"content":"Read(ref UInt64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[25592,25621],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[25681,25710],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.","pos":[25711,25849]},{"content":"&lt;/p&gt;\\n","pos":[25850,25856],"source":" </p>\\n"},{"pos":[26516,26533],"content":"Read(ref UIntPtr)","needQuote":true,"nodes":[{"content":"Read(ref UIntPtr)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[27724,27753],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value that was read.","pos":[27814,27843],"source":"\\n<p>The value that was read."},{"content":"This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.","pos":[27844,27982]},{"content":"&lt;/p&gt;\\n","pos":[27983,27989],"source":" </p>\\n"},{"pos":[28629,28643],"content":"Read<T>(ref T)","needQuote":true,"nodes":[{"content":"Read&lt;T&gt;(ref T)","pos":[0,14],"source":"Read<T>(ref T)"}]},{"content":"\\n&lt;p&gt;The field to read.&lt;/p&gt;\\n","pos":[29839,29868],"source":"\\n<p>The field to read.</p>\\n"},{"content":"\\n&lt;p&gt;The type of field to read.","pos":[29922,29953],"source":"\\n<p>The type of field to read."},{"content":"This must be a reference type, not a value type.&lt;/p&gt;\\n","pos":[29954,30008],"source":" This must be a reference type, not a value type.</p>\\n"},{"content":"\\n&lt;p&gt;The reference to &lt;em&gt;T&lt;/em&gt; that was read.","pos":[30060,30107],"source":"\\n<p>The reference to <em>T</em> that was read."},{"content":"This reference is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.","pos":[30108,30250]},{"content":"&lt;/p&gt;\\n","pos":[30251,30257],"source":" </p>\\n"},{"pos":[30784,30811],"content":"Write(ref Boolean, Boolean)","needQuote":true,"nodes":[{"content":"Write(ref Boolean, Boolean)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[31983,32031],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[32096,32120],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.","pos":[32121,32210]},{"content":"&lt;/p&gt;\\n","pos":[32211,32217],"source":" </p>\\n"},{"pos":[32783,32804],"content":"Write(ref Byte, Byte)","needQuote":true,"nodes":[{"content":"Write(ref Byte, Byte)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[33961,34009],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[34071,34095],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[34096,34191],"source":" The value is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"pos":[34745,34770],"content":"Write(ref Double, Double)","needQuote":true,"nodes":[{"content":"Write(ref Double, Double)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[35941,35989],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[36053,36077],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[36078,36173],"source":" The value is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"pos":[36737,36760],"content":"Write(ref Int16, Int16)","needQuote":true,"nodes":[{"content":"Write(ref Int16, Int16)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[37924,37972],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[38035,38059],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[38060,38155],"source":" The value is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"pos":[38711,38734],"content":"Write(ref Int32, Int32)","needQuote":true,"nodes":[{"content":"Write(ref Int32, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[39898,39946],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[40009,40033],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[40034,40129],"source":" The value is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"pos":[40685,40708],"content":"Write(ref Int64, Int64)","needQuote":true,"nodes":[{"content":"Write(ref Int64, Int64)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[41871,41919],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[41982,42006],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[42007,42102],"source":" The value is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"pos":[42664,42689],"content":"Write(ref IntPtr, IntPtr)","needQuote":true,"nodes":[{"content":"Write(ref IntPtr, IntPtr)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[43860,43908],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[43972,43996],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[43997,44092],"source":" The value is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"pos":[44656,44679],"content":"Write(ref SByte, SByte)","needQuote":true,"nodes":[{"content":"Write(ref SByte, SByte)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[45901,45949],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[46012,46036],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[46037,46132],"source":" The value is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"pos":[46869,46894],"content":"Write(ref Single, Single)","needQuote":true,"nodes":[{"content":"Write(ref Single, Single)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[48063,48111],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[48175,48199],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[48200,48295],"source":" The value is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"pos":[48865,48890],"content":"Write(ref UInt16, UInt16)","needQuote":true,"nodes":[{"content":"Write(ref UInt16, UInt16)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[50119,50167],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[50231,50255],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[50256,50351],"source":" The value is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"pos":[51096,51121],"content":"Write(ref UInt32, UInt32)","needQuote":true,"nodes":[{"content":"Write(ref UInt32, UInt32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[52350,52398],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[52462,52486],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[52487,52582],"source":" The value is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"pos":[53327,53352],"content":"Write(ref UInt64, UInt64)","needQuote":true,"nodes":[{"content":"Write(ref UInt64, UInt64)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[54637,54685],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[54749,54773],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[54774,54869],"source":" The value is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"pos":[55620,55647],"content":"Write(ref UIntPtr, UIntPtr)","needQuote":true,"nodes":[{"content":"Write(ref UIntPtr, UIntPtr)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The field where the value is written.&lt;/p&gt;\\n","pos":[56883,56931],"source":"\\n<p>The field where the value is written.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.","pos":[56996,57020],"source":"\\n<p>The value to write."},{"content":"The value is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[57021,57116],"source":" The value is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"pos":[57818,57836],"content":"Write<T>(ref T, T)","needQuote":true,"nodes":[{"content":"Write&lt;T&gt;(ref T, T)","pos":[0,18],"source":"Write<T>(ref T, T)"}]},{"content":"\\n&lt;p&gt;The field where the object reference is written.&lt;/p&gt;\\n","pos":[59063,59122],"source":"\\n<p>The field where the object reference is written.</p>\\n"},{"content":"\\n&lt;p&gt;The object reference to write.","pos":[59178,59213],"source":"\\n<p>The object reference to write."},{"content":"The reference is written immediately so that it is visible to all processors in the computer.&lt;/p&gt;\\n","pos":[59214,59313],"source":" The reference is written immediately so that it is visible to all processors in the computer.</p>\\n"},{"content":"\\n&lt;p&gt;The type of field to write.","pos":[59367,59399],"source":"\\n<p>The type of field to write."},{"content":"This must be a reference type, not a value type.","pos":[59400,59448]},{"content":"&lt;/p&gt;\\n","pos":[59449,59455],"source":" </p>\\n"},{"pos":[59797,59813],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[59974,59980],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60140,60150],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[60245,60253],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[60322,60323],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60350,60351],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60421,60429],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[60498,60499],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60526,60527],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60710,60724],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[60843,60849],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[60916,60917],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60967,60973],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61033,61034],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61117,61123],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61190,61191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61241,61247],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61307,61308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61522,61544],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[61692,61698],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61765,61766],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61816,61822],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[61883,61884]},{"pos":[61939,61945],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62005,62006],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62103,62109],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[62176,62177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62227,62233],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62294,62295]},{"pos":[62350,62356],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62416,62417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62662,62693],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[62859,62874],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[62950,62951],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63001,63007],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63068,63069]},{"pos":[63124,63130],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63190,63191],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63297,63312],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[63388,63389],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63439,63445],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63506,63507]},{"pos":[63562,63568],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63628,63629],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63859,63872],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[63973,63984],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[64056,64057],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64084,64085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64158,64169],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[64241,64242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64269,64270],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64445,64454],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[64547,64554],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[64622,64623],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64650,64651],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64720,64727],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[64795,64796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64823,64824],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64999,65016],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[65125,65140],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[65216,65217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65244,65245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65322,65337],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[65413,65414],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65441,65442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65587,65593],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[65725,65732],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[65878,65882],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[66021,66027],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[66171,66176],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[66317,66322],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66463,66468],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[66610,66616],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[66760,66765],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[66907,66913],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[67058,67064],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[67209,67215],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[67360,67366],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[67512,67519],"content":"UIntPtr","needQuote":true,"nodes":[{"content":"UIntPtr","pos":[0,7]}]},{"pos":[67638,67639],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[67728,67729],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]}],"content":"items:\n- uid: System.Threading.Volatile\n  commentId: T:System.Threading.Volatile\n  id: Volatile\n  parent: System.Threading\n  children:\n  - System.Threading.Volatile.Read(System.Boolean@)\n  - System.Threading.Volatile.Read(System.Byte@)\n  - System.Threading.Volatile.Read(System.Double@)\n  - System.Threading.Volatile.Read(System.Int16@)\n  - System.Threading.Volatile.Read(System.Int32@)\n  - System.Threading.Volatile.Read(System.Int64@)\n  - System.Threading.Volatile.Read(System.IntPtr@)\n  - System.Threading.Volatile.Read(System.SByte@)\n  - System.Threading.Volatile.Read(System.Single@)\n  - System.Threading.Volatile.Read(System.UInt16@)\n  - System.Threading.Volatile.Read(System.UInt32@)\n  - System.Threading.Volatile.Read(System.UInt64@)\n  - System.Threading.Volatile.Read(System.UIntPtr@)\n  - System.Threading.Volatile.Read``1(``0@)\n  - System.Threading.Volatile.Write(System.Boolean@,System.Boolean)\n  - System.Threading.Volatile.Write(System.Byte@,System.Byte)\n  - System.Threading.Volatile.Write(System.Double@,System.Double)\n  - System.Threading.Volatile.Write(System.Int16@,System.Int16)\n  - System.Threading.Volatile.Write(System.Int32@,System.Int32)\n  - System.Threading.Volatile.Write(System.Int64@,System.Int64)\n  - System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)\n  - System.Threading.Volatile.Write(System.SByte@,System.SByte)\n  - System.Threading.Volatile.Write(System.Single@,System.Single)\n  - System.Threading.Volatile.Write(System.UInt16@,System.UInt16)\n  - System.Threading.Volatile.Write(System.UInt32@,System.UInt32)\n  - System.Threading.Volatile.Write(System.UInt64@,System.UInt64)\n  - System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)\n  - System.Threading.Volatile.Write``1(``0@,``0)\n  langs:\n  - csharp\n  - vb\n  name: Volatile\n  fullName: System.Threading.Volatile\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Volatile\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 26\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Contains methods for performing volatile memory operations.</p>\\n\"\n  syntax:\n    content: public class Volatile\n    content.vb: Public Class Volatile\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Volatile\n- uid: System.Threading.Volatile.Read(System.Boolean@)\n  commentId: M:System.Threading.Volatile.Read(System.Boolean@)\n  id: Read(System.Boolean@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref Boolean)\n  fullName: System.Threading.Volatile.Read(ref System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 28\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method. </p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static bool Read(ref bool location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Read(ByRef location As Boolean) As Boolean\n    parameters:\n    - id: location\n      type: System.Boolean\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.Boolean)\n  name.vb: Read(ByRef Boolean)\n  nameWithType: Volatile.Read(ref Boolean)\n  nameWithType.vb: Volatile.Read(ByRef Boolean)\n- uid: System.Threading.Volatile.Read(System.Byte@)\n  commentId: M:System.Threading.Volatile.Read(System.Byte@)\n  id: Read(System.Byte@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref Byte)\n  fullName: System.Threading.Volatile.Read(ref System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 53\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static byte Read(ref byte location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Read(ByRef location As Byte) As Byte\n    parameters:\n    - id: location\n      type: System.Byte\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.Byte)\n  name.vb: Read(ByRef Byte)\n  nameWithType: Volatile.Read(ref Byte)\n  nameWithType.vb: Volatile.Read(ByRef Byte)\n- uid: System.Threading.Volatile.Read(System.Double@)\n  commentId: M:System.Threading.Volatile.Read(System.Double@)\n  id: Read(System.Double@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref Double)\n  fullName: System.Threading.Volatile.Read(ref System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 210\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static double Read(ref double location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Read(ByRef location As Double) As Double\n    parameters:\n    - id: location\n      type: System.Double\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.Double)\n  name.vb: Read(ByRef Double)\n  nameWithType: Volatile.Read(ref Double)\n  nameWithType.vb: Volatile.Read(ByRef Double)\n- uid: System.Threading.Volatile.Read(System.Int16@)\n  commentId: M:System.Threading.Volatile.Read(System.Int16@)\n  id: Read(System.Int16@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref Int16)\n  fullName: System.Threading.Volatile.Read(ref System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 65\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static short Read(ref short location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Read(ByRef location As Short) As Short\n    parameters:\n    - id: location\n      type: System.Int16\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.Int16)\n  name.vb: Read(ByRef Int16)\n  nameWithType: Volatile.Read(ref Int16)\n  nameWithType.vb: Volatile.Read(ByRef Int16)\n- uid: System.Threading.Volatile.Read(System.Int32@)\n  commentId: M:System.Threading.Volatile.Read(System.Int32@)\n  id: Read(System.Int32@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref Int32)\n  fullName: System.Threading.Volatile.Read(ref System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 90\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static int Read(ref int location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Read(ByRef location As Integer) As Integer\n    parameters:\n    - id: location\n      type: System.Int32\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.Int32)\n  name.vb: Read(ByRef Int32)\n  nameWithType: Volatile.Read(ref Int32)\n  nameWithType.vb: Volatile.Read(ByRef Int32)\n- uid: System.Threading.Volatile.Read(System.Int64@)\n  commentId: M:System.Threading.Volatile.Read(System.Int64@)\n  id: Read(System.Int64@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref Int64)\n  fullName: System.Threading.Volatile.Read(ref System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 116\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static long Read(ref long location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Read(ByRef location As Long) As Long\n    parameters:\n    - id: location\n      type: System.Int64\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.Int64)\n  name.vb: Read(ByRef Int64)\n  nameWithType: Volatile.Read(ref Int64)\n  nameWithType.vb: Volatile.Read(ByRef Int64)\n- uid: System.Threading.Volatile.Read(System.IntPtr@)\n  commentId: M:System.Threading.Volatile.Read(System.IntPtr@)\n  id: Read(System.IntPtr@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref IntPtr)\n  fullName: System.Threading.Volatile.Read(ref System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 173\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static IntPtr Read(ref IntPtr location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Read(ByRef location As IntPtr) As IntPtr\n    parameters:\n    - id: location\n      type: System.IntPtr\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.IntPtr)\n  name.vb: Read(ByRef IntPtr)\n  nameWithType: Volatile.Read(ref IntPtr)\n  nameWithType.vb: Volatile.Read(ByRef IntPtr)\n- uid: System.Threading.Volatile.Read(System.SByte@)\n  commentId: M:System.Threading.Volatile.Read(System.SByte@)\n  id: Read(System.SByte@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref SByte)\n  fullName: System.Threading.Volatile.Read(ref System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 40\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public static sbyte Read(ref sbyte location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <CLSCompliant(False)>\n\n      <NonVersionable>\n\n      Public Shared Function Read(ByRef location As SByte) As SByte\n    parameters:\n    - id: location\n      type: System.SByte\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.SByte)\n  name.vb: Read(ByRef SByte)\n  nameWithType: Volatile.Read(ref SByte)\n  nameWithType.vb: Volatile.Read(ByRef SByte)\n- uid: System.Threading.Volatile.Read(System.Single@)\n  commentId: M:System.Threading.Volatile.Read(System.Single@)\n  id: Read(System.Single@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref Single)\n  fullName: System.Threading.Volatile.Read(ref System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 198\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static float Read(ref float location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Read(ByRef location As Single) As Single\n    parameters:\n    - id: location\n      type: System.Single\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.Single)\n  name.vb: Read(ByRef Single)\n  nameWithType: Volatile.Read(ref Single)\n  nameWithType.vb: Volatile.Read(ByRef Single)\n- uid: System.Threading.Volatile.Read(System.UInt16@)\n  commentId: M:System.Threading.Volatile.Read(System.UInt16@)\n  id: Read(System.UInt16@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref UInt16)\n  fullName: System.Threading.Volatile.Read(ref System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 77\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public static ushort Read(ref ushort location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <CLSCompliant(False)>\n\n      <NonVersionable>\n\n      Public Shared Function Read(ByRef location As UShort) As UShort\n    parameters:\n    - id: location\n      type: System.UInt16\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.UInt16)\n  name.vb: Read(ByRef UInt16)\n  nameWithType: Volatile.Read(ref UInt16)\n  nameWithType.vb: Volatile.Read(ByRef UInt16)\n- uid: System.Threading.Volatile.Read(System.UInt32@)\n  commentId: M:System.Threading.Volatile.Read(System.UInt32@)\n  id: Read(System.UInt32@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref UInt32)\n  fullName: System.Threading.Volatile.Read(ref System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 102\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public static uint Read(ref uint location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <CLSCompliant(False)>\n\n      <NonVersionable>\n\n      Public Shared Function Read(ByRef location As UInteger) As UInteger\n    parameters:\n    - id: location\n      type: System.UInt32\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.UInt32)\n  name.vb: Read(ByRef UInt32)\n  nameWithType: Volatile.Read(ref UInt32)\n  nameWithType.vb: Volatile.Read(ByRef UInt32)\n- uid: System.Threading.Volatile.Read(System.UInt64@)\n  commentId: M:System.Threading.Volatile.Read(System.UInt64@)\n  id: Read(System.UInt64@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref UInt64)\n  fullName: System.Threading.Volatile.Read(ref System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 128\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      [SecuritySafeCritical]\n\n      public static ulong Read(ref ulong location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <CLSCompliant(False)>\n\n      <NonVersionable>\n\n      <SecuritySafeCritical>\n\n      Public Shared Function Read(ByRef location As ULong) As ULong\n    parameters:\n    - id: location\n      type: System.UInt64\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.UInt64)\n  name.vb: Read(ByRef UInt64)\n  nameWithType: Volatile.Read(ref UInt64)\n  nameWithType.vb: Volatile.Read(ByRef UInt64)\n- uid: System.Threading.Volatile.Read(System.UIntPtr@)\n  commentId: M:System.Threading.Volatile.Read(System.UIntPtr@)\n  id: Read(System.UIntPtr@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read(ref UIntPtr)\n  fullName: System.Threading.Volatile.Read(ref System.UIntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 185\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public static UIntPtr Read(ref UIntPtr location)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <CLSCompliant(False)>\n\n      <NonVersionable>\n\n      Public Shared Function Read(ByRef location As UIntPtr) As UIntPtr\n    parameters:\n    - id: location\n      type: System.UIntPtr\n      description: \"\\n<p>The field to read.</p>\\n\"\n    return:\n      type: System.UIntPtr\n      description: \"\\n<p>The value that was read. This value is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(ByRef System.UIntPtr)\n  name.vb: Read(ByRef UIntPtr)\n  nameWithType: Volatile.Read(ref UIntPtr)\n  nameWithType.vb: Volatile.Read(ByRef UIntPtr)\n- uid: System.Threading.Volatile.Read``1(``0@)\n  commentId: M:System.Threading.Volatile.Read``1(``0@)\n  id: Read``1(``0@)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Read<T>(ref T)\n  fullName: System.Threading.Volatile.Read<T>(ref T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 223\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Reads the object reference from the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears after this method in the code, the processor cannot move it before this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static T Read<T>(ref T location)where T : class\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Function Read(Of T As Class)(ByRef location As T) As T\n    parameters:\n    - id: location\n      type: '{T}'\n      description: \"\\n<p>The field to read.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of field to read. This must be a reference type, not a value type.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The reference to <em>T</em> that was read. This reference is the latest written by any processor in the computer, regardless of the number of processors or the state of processor cache. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Read(Of T)(ByRef T)\n  name.vb: Read(Of T)(ByRef T)\n  nameWithType: Volatile.Read<T>(ref T)\n  nameWithType.vb: Volatile.Read(Of T)(ByRef T)\n- uid: System.Threading.Volatile.Write(System.Boolean@,System.Boolean)\n  commentId: M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)\n  id: Write(System.Boolean@,System.Boolean)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref Boolean, Boolean)\n  fullName: System.Threading.Volatile.Write(ref System.Boolean, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 239\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static void Write(ref bool location, bool value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(ByRef location As Boolean, value As Boolean)\n    parameters:\n    - id: location\n      type: System.Boolean\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.Boolean, System.Boolean)\n  name.vb: Write(ByRef Boolean, Boolean)\n  nameWithType: Volatile.Write(ref Boolean, Boolean)\n  nameWithType.vb: Volatile.Write(ByRef Boolean, Boolean)\n- uid: System.Threading.Volatile.Write(System.Byte@,System.Byte)\n  commentId: M:System.Threading.Volatile.Write(System.Byte@,System.Byte)\n  id: Write(System.Byte@,System.Byte)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref Byte, Byte)\n  fullName: System.Threading.Volatile.Write(ref System.Byte, System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 262\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static void Write(ref byte location, byte value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(ByRef location As Byte, value As Byte)\n    parameters:\n    - id: location\n      type: System.Byte\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.Byte, System.Byte)\n  name.vb: Write(ByRef Byte, Byte)\n  nameWithType: Volatile.Write(ref Byte, Byte)\n  nameWithType.vb: Volatile.Write(ByRef Byte, Byte)\n- uid: System.Threading.Volatile.Write(System.Double@,System.Double)\n  commentId: M:System.Threading.Volatile.Write(System.Double@,System.Double)\n  id: Write(System.Double@,System.Double)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref Double, Double)\n  fullName: System.Threading.Volatile.Write(ref System.Double, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 415\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static void Write(ref double location, double value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(ByRef location As Double, value As Double)\n    parameters:\n    - id: location\n      type: System.Double\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.Double, System.Double)\n  name.vb: Write(ByRef Double, Double)\n  nameWithType: Volatile.Write(ref Double, Double)\n  nameWithType.vb: Volatile.Write(ByRef Double, Double)\n- uid: System.Threading.Volatile.Write(System.Int16@,System.Int16)\n  commentId: M:System.Threading.Volatile.Write(System.Int16@,System.Int16)\n  id: Write(System.Int16@,System.Int16)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref Int16, Int16)\n  fullName: System.Threading.Volatile.Write(ref System.Int16, System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 273\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static void Write(ref short location, short value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(ByRef location As Short, value As Short)\n    parameters:\n    - id: location\n      type: System.Int16\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.Int16, System.Int16)\n  name.vb: Write(ByRef Int16, Int16)\n  nameWithType: Volatile.Write(ref Int16, Int16)\n  nameWithType.vb: Volatile.Write(ByRef Int16, Int16)\n- uid: System.Threading.Volatile.Write(System.Int32@,System.Int32)\n  commentId: M:System.Threading.Volatile.Write(System.Int32@,System.Int32)\n  id: Write(System.Int32@,System.Int32)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref Int32, Int32)\n  fullName: System.Threading.Volatile.Write(ref System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 296\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static void Write(ref int location, int value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(ByRef location As Integer, value As Integer)\n    parameters:\n    - id: location\n      type: System.Int32\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.Int32, System.Int32)\n  name.vb: Write(ByRef Int32, Int32)\n  nameWithType: Volatile.Write(ref Int32, Int32)\n  nameWithType.vb: Volatile.Write(ByRef Int32, Int32)\n- uid: System.Threading.Volatile.Write(System.Int64@,System.Int64)\n  commentId: M:System.Threading.Volatile.Write(System.Int64@,System.Int64)\n  id: Write(System.Int64@,System.Int64)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref Int64, Int64)\n  fullName: System.Threading.Volatile.Write(ref System.Int64, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 320\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a memory operation appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static void Write(ref long location, long value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(ByRef location As Long, value As Long)\n    parameters:\n    - id: location\n      type: System.Int64\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.Int64, System.Int64)\n  name.vb: Write(ByRef Int64, Int64)\n  nameWithType: Volatile.Write(ref Int64, Int64)\n  nameWithType.vb: Volatile.Write(ByRef Int64, Int64)\n- uid: System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)\n  commentId: M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)\n  id: Write(System.IntPtr@,System.IntPtr)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref IntPtr, IntPtr)\n  fullName: System.Threading.Volatile.Write(ref System.IntPtr, System.IntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 381\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static void Write(ref IntPtr location, IntPtr value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(ByRef location As IntPtr, value As IntPtr)\n    parameters:\n    - id: location\n      type: System.IntPtr\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.IntPtr\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.IntPtr, System.IntPtr)\n  name.vb: Write(ByRef IntPtr, IntPtr)\n  nameWithType: Volatile.Write(ref IntPtr, IntPtr)\n  nameWithType.vb: Volatile.Write(ByRef IntPtr, IntPtr)\n- uid: System.Threading.Volatile.Write(System.SByte@,System.SByte)\n  commentId: M:System.Threading.Volatile.Write(System.SByte@,System.SByte)\n  id: Write(System.SByte@,System.SByte)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref SByte, SByte)\n  fullName: System.Threading.Volatile.Write(ref System.SByte, System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 250\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public static void Write(ref sbyte location, sbyte value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <CLSCompliant(False)>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(ByRef location As SByte, value As SByte)\n    parameters:\n    - id: location\n      type: System.SByte\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.SByte, System.SByte)\n  name.vb: Write(ByRef SByte, SByte)\n  nameWithType: Volatile.Write(ref SByte, SByte)\n  nameWithType.vb: Volatile.Write(ByRef SByte, SByte)\n- uid: System.Threading.Volatile.Write(System.Single@,System.Single)\n  commentId: M:System.Threading.Volatile.Write(System.Single@,System.Single)\n  id: Write(System.Single@,System.Single)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref Single, Single)\n  fullName: System.Threading.Volatile.Write(ref System.Single, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 404\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static void Write(ref float location, float value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(ByRef location As Single, value As Single)\n    parameters:\n    - id: location\n      type: System.Single\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.Single, System.Single)\n  name.vb: Write(ByRef Single, Single)\n  nameWithType: Volatile.Write(ref Single, Single)\n  nameWithType.vb: Volatile.Write(ByRef Single, Single)\n- uid: System.Threading.Volatile.Write(System.UInt16@,System.UInt16)\n  commentId: M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)\n  id: Write(System.UInt16@,System.UInt16)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref UInt16, UInt16)\n  fullName: System.Threading.Volatile.Write(ref System.UInt16, System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 284\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public static void Write(ref ushort location, ushort value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <CLSCompliant(False)>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(ByRef location As UShort, value As UShort)\n    parameters:\n    - id: location\n      type: System.UInt16\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.UInt16, System.UInt16)\n  name.vb: Write(ByRef UInt16, UInt16)\n  nameWithType: Volatile.Write(ref UInt16, UInt16)\n  nameWithType.vb: Volatile.Write(ByRef UInt16, UInt16)\n- uid: System.Threading.Volatile.Write(System.UInt32@,System.UInt32)\n  commentId: M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)\n  id: Write(System.UInt32@,System.UInt32)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref UInt32, UInt32)\n  fullName: System.Threading.Volatile.Write(ref System.UInt32, System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 307\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public static void Write(ref uint location, uint value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <CLSCompliant(False)>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(ByRef location As UInteger, value As UInteger)\n    parameters:\n    - id: location\n      type: System.UInt32\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.UInt32, System.UInt32)\n  name.vb: Write(ByRef UInt32, UInt32)\n  nameWithType: Volatile.Write(ref UInt32, UInt32)\n  nameWithType.vb: Volatile.Write(ByRef UInt32, UInt32)\n- uid: System.Threading.Volatile.Write(System.UInt64@,System.UInt64)\n  commentId: M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)\n  id: Write(System.UInt64@,System.UInt64)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref UInt64, UInt64)\n  fullName: System.Threading.Volatile.Write(ref System.UInt64, System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 331\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      [SecuritySafeCritical]\n\n      public static void Write(ref ulong location, ulong value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <CLSCompliant(False)>\n\n      <NonVersionable>\n\n      <SecuritySafeCritical>\n\n      Public Shared Sub Write(ByRef location As ULong, value As ULong)\n    parameters:\n    - id: location\n      type: System.UInt64\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.UInt64, System.UInt64)\n  name.vb: Write(ByRef UInt64, UInt64)\n  nameWithType: Volatile.Write(ref UInt64, UInt64)\n  nameWithType.vb: Volatile.Write(ByRef UInt64, UInt64)\n- uid: System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)\n  commentId: M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)\n  id: Write(System.UIntPtr@,System.UIntPtr)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write(ref UIntPtr, UIntPtr)\n  fullName: System.Threading.Volatile.Write(ref System.UIntPtr, System.UIntPtr)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 392\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public static void Write(ref UIntPtr location, UIntPtr value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <CLSCompliant(False)>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(ByRef location As UIntPtr, value As UIntPtr)\n    parameters:\n    - id: location\n      type: System.UIntPtr\n      description: \"\\n<p>The field where the value is written.</p>\\n\"\n    - id: value\n      type: System.UIntPtr\n      description: \"\\n<p>The value to write. The value is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(ByRef System.UIntPtr, System.UIntPtr)\n  name.vb: Write(ByRef UIntPtr, UIntPtr)\n  nameWithType: Volatile.Write(ref UIntPtr, UIntPtr)\n  nameWithType.vb: Volatile.Write(ByRef UIntPtr, UIntPtr)\n- uid: System.Threading.Volatile.Write``1(``0@,``0)\n  commentId: M:System.Threading.Volatile.Write``1(``0@,``0)\n  id: Write``1(``0@,``0)\n  parent: System.Threading.Volatile\n  langs:\n  - csharp\n  - vb\n  name: Write<T>(ref T, T)\n  fullName: System.Threading.Volatile.Write<T>(ref T, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Volatile.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Threading/Volatile.cs\n    startLine: 428\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Writes the specified object reference to the specified field. On systems that require it, inserts a memory barrier that prevents the processor from reordering memory operations as follows: If a read or write appears before this method in the code, the processor cannot move it after this method. </p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static void Write<T>(ref T location, T value)where T : class\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Sub Write(Of T As Class)(ByRef location As T, value As T)\n    parameters:\n    - id: location\n      type: '{T}'\n      description: \"\\n<p>The field where the object reference is written.</p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object reference to write. The reference is written immediately so that it is visible to all processors in the computer.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of field to write. This must be a reference type, not a value type. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Volatile.Write(Of T)(ByRef T, T)\n  name.vb: Write(Of T)(ByRef T, T)\n  nameWithType: Volatile.Write<T>(ref T, T)\n  nameWithType.vb: Volatile.Write(Of T)(ByRef T, T)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  nameWithType: IntPtr\n  commentId: T:System.IntPtr\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.UIntPtr\n  parent: System\n  isExternal: false\n  name: UIntPtr\n  fullName: System.UIntPtr\n  nameWithType: UIntPtr\n  commentId: T:System.UIntPtr\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n"}