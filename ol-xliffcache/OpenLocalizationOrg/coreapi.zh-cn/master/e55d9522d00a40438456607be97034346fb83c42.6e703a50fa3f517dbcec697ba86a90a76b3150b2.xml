{"nodes":[{"pos":[808,827],"content":"BindingRestrictions","needQuote":true,"nodes":[{"content":"BindingRestrictions","pos":[0,19]}]},{"pos":[2517,2522],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[4010,4043],"content":"Combine(IList<DynamicMetaObject>)","needQuote":true,"nodes":[{"content":"Combine(IList&lt;DynamicMetaObject&gt;)","pos":[0,33],"source":"Combine(IList<DynamicMetaObject>)"}]},{"content":"\\n&lt;p&gt;The new set of binding restrictions.&lt;/p&gt;\\n","pos":[5362,5409],"source":"\\n<p>The new set of binding restrictions.</p>\\n"},{"pos":[6175,6211],"content":"GetExpressionRestriction(Expression)","needQuote":true,"nodes":[{"content":"GetExpressionRestriction(Expression)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The expression representing the restrictions.&lt;/p&gt;\\n","pos":[7124,7180],"source":"\\n<p>The expression representing the restrictions.</p>\\n"},{"content":"\\n&lt;p&gt;The new binding restrictions.&lt;/p&gt;\\n","pos":[7261,7301],"source":"\\n<p>The new binding restrictions.</p>\\n"},{"pos":[7853,7895],"content":"GetInstanceRestriction(Expression, Object)","needQuote":true,"nodes":[{"content":"GetInstanceRestriction(Expression, Object)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The expression to test.&lt;/p&gt;\\n","pos":[8846,8880],"source":"\\n<p>The expression to test.</p>\\n"},{"content":"\\n&lt;p&gt;The exact object instance to test.&lt;/p&gt;\\n","pos":[8947,8992],"source":"\\n<p>The exact object instance to test.</p>\\n"},{"content":"\\n&lt;p&gt;The new binding restrictions.&lt;/p&gt;\\n","pos":[9073,9113],"source":"\\n<p>The new binding restrictions.</p>\\n"},{"pos":[9653,9689],"content":"GetTypeRestriction(Expression, Type)","needQuote":true,"nodes":[{"content":"GetTypeRestriction(Expression, Type)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The expression to test.&lt;/p&gt;\\n","pos":[10606,10640],"source":"\\n<p>The expression to test.</p>\\n"},{"content":"\\n&lt;p&gt;The exact type to test.&lt;/p&gt;\\n","pos":[10701,10735],"source":"\\n<p>The exact type to test.</p>\\n"},{"content":"\\n&lt;p&gt;The new binding restrictions.&lt;/p&gt;\\n","pos":[10816,10856],"source":"\\n<p>The new binding restrictions.</p>\\n"},{"pos":[11315,11341],"content":"Merge(BindingRestrictions)","needQuote":true,"nodes":[{"content":"Merge(BindingRestrictions)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The set of restrictions with which to merge the current binding restrictions.&lt;/p&gt;\\n","pos":[12195,12283],"source":"\\n<p>The set of restrictions with which to merge the current binding restrictions.</p>\\n"},{"content":"\\n&lt;p&gt;The new set of binding restrictions.&lt;/p&gt;\\n","pos":[12364,12411],"source":"\\n<p>The new set of binding restrictions.</p>\\n"},{"pos":[12751,12765],"content":"ToExpression()","needQuote":true,"nodes":[{"content":"ToExpression()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The expression tree representing the restrictions.&lt;/p&gt;\\n","pos":[13544,13605],"source":"\\n<p>The expression tree representing the restrictions.</p>\\n"},{"pos":[13778,13792],"content":"System.Dynamic","needQuote":true,"nodes":[{"content":"System.Dynamic","pos":[0,14]}]},{"pos":[13947,13953],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14113,14123],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14218,14226],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14295,14296],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14323,14324],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14394,14402],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14471,14472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14499,14500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14683,14697],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[14816,14822],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14889,14890],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14940,14946],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15006,15007],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15090,15096],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15163,15164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15214,15220],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15280,15281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15495,15517],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[15665,15671],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15738,15739],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15789,15795],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15856,15857]},{"pos":[15912,15918],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15978,15979],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16076,16082],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16149,16150],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16200,16206],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16267,16268]},{"pos":[16323,16329],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16389,16390],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16635,16666],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[16832,16847],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16923,16924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16974,16980],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17041,17042]},{"pos":[17097,17103],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17163,17164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17270,17285],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17361,17362],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17412,17418],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17479,17480]},{"pos":[17535,17541],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17601,17602],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17832,17845],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[17946,17957],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18029,18030],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18057,18058],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18131,18142],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18214,18215],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18242,18243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18418,18427],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[18520,18527],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18595,18596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18623,18624],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18693,18700],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18768,18769],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18796,18797],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18972,18989],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[19098,19113],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19189,19190],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19217,19218],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19295,19310],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19386,19387],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19414,19415],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19560,19566],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[19726,19745],"content":"BindingRestrictions","needQuote":true,"nodes":[{"content":"BindingRestrictions","pos":[0,19]}]},{"pos":[20047,20071],"content":"IList<DynamicMetaObject>","needQuote":true,"nodes":[{"content":"IList&lt;DynamicMetaObject&gt;","pos":[0,24],"source":"IList<DynamicMetaObject>"}]},{"pos":[20344,20349],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[20428,20429],"content":"<","needQuote":true,"nodes":[]},{"pos":[20498,20515],"content":"DynamicMetaObject","needQuote":true,"nodes":[{"content":"DynamicMetaObject","pos":[0,17]}]},{"pos":[20660,20665],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[20745,20748]},{"pos":[20824,20841],"content":"DynamicMetaObject","needQuote":true,"nodes":[{"content":"DynamicMetaObject","pos":[0,17]}]},{"pos":[20899,20900],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21157,21165],"content":"IList<T>","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;","pos":[0,8],"source":"IList<T>"}]},{"pos":[21360,21365],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[21423,21424],"content":"<","needQuote":true,"nodes":[]},{"pos":[21451,21452],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[21566,21571],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[21630,21633]},{"pos":[21667,21668],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[21695,21696],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21881,21907],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[22136,22146],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[22330,22353],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[22533,22537],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]}],"content":"items:\n- uid: System.Dynamic.BindingRestrictions\n  commentId: T:System.Dynamic.BindingRestrictions\n  id: BindingRestrictions\n  parent: System.Dynamic\n  children:\n  - System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})\n  - System.Dynamic.BindingRestrictions.Empty\n  - System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)\n  - System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)\n  - System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)\n  - System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)\n  - System.Dynamic.BindingRestrictions.ToExpression\n  langs:\n  - csharp\n  - vb\n  name: BindingRestrictions\n  fullName: System.Dynamic.BindingRestrictions\n  type: Class\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindingRestrictions\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs\n    startLine: 15\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Represents a set of binding restrictions on the <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> under which the dynamic binding is valid.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerTypeProxy(typeof (BindingRestrictions.BindingRestrictionsProxy))]\n\n      [DebuggerDisplay(\"{DebugView}\")]\n\n      public abstract class BindingRestrictions\n    content.vb: >-\n      <DebuggerTypeProxy(GetType(BindingRestrictions.BindingRestrictionsProxy))>\n\n      <DebuggerDisplay(\"{DebugView}\")>\n\n      Public MustInherit Class BindingRestrictions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: BindingRestrictions\n- uid: System.Dynamic.BindingRestrictions.Empty\n  commentId: F:System.Dynamic.BindingRestrictions.Empty\n  id: Empty\n  parent: System.Dynamic.BindingRestrictions\n  langs:\n  - csharp\n  - vb\n  name: Empty\n  fullName: System.Dynamic.BindingRestrictions.Empty\n  type: Field\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs\n    startLine: 22\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Represents an empty set of binding restrictions. This field is read only.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Security\", \"CA2104:DoNotDeclareReadOnlyMutableReferenceTypes\")]\n\n      public static readonly BindingRestrictions Empty\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Security\", \"CA2104:DoNotDeclareReadOnlyMutableReferenceTypes\")>\n\n      Public Shared ReadOnly Empty As BindingRestrictions\n    return:\n      type: System.Dynamic.BindingRestrictions\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: BindingRestrictions.Empty\n- uid: System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})\n  commentId: M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})\n  id: Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})\n  parent: System.Dynamic.BindingRestrictions\n  langs:\n  - csharp\n  - vb\n  name: Combine(IList<DynamicMetaObject>)\n  fullName: System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList<System.Dynamic.DynamicMetaObject>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Combine\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs\n    startLine: 118\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Combines binding restrictions from the list of <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances into one set of restrictions.</p>\\n\"\n  syntax:\n    content: public static BindingRestrictions Combine(IList<DynamicMetaObject> contributingObjects)\n    content.vb: Public Shared Function Combine(contributingObjects As IList(Of DynamicMetaObject)) As BindingRestrictions\n    parameters:\n    - id: contributingObjects\n      type: System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject}\n      description: \"\\n<p>The list of <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances from which to combine restrictions.</p>\\n\"\n    return:\n      type: System.Dynamic.BindingRestrictions\n      description: \"\\n<p>The new set of binding restrictions.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList(Of System.Dynamic.DynamicMetaObject))\n  name.vb: Combine(IList(Of DynamicMetaObject))\n  nameWithType: BindingRestrictions.Combine(IList<DynamicMetaObject>)\n  nameWithType.vb: BindingRestrictions.Combine(IList(Of DynamicMetaObject))\n- uid: System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)\n  commentId: M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)\n  id: GetExpressionRestriction(System.Linq.Expressions.Expression)\n  parent: System.Dynamic.BindingRestrictions\n  langs:\n  - csharp\n  - vb\n  name: GetExpressionRestriction(Expression)\n  fullName: System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetExpressionRestriction\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 24\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Creates the binding restriction that checks the expression for arbitrary immutable properties.</p>\\n\"\n  syntax:\n    content: public static BindingRestrictions GetExpressionRestriction(Expression expression)\n    content.vb: Public Shared Function GetExpressionRestriction(expression As Expression) As BindingRestrictions\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The expression representing the restrictions.</p>\\n\"\n    return:\n      type: System.Dynamic.BindingRestrictions\n      description: \"\\n<p>The new binding restrictions.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BindingRestrictions.GetExpressionRestriction(Expression)\n- uid: System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)\n  commentId: M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)\n  id: GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)\n  parent: System.Dynamic.BindingRestrictions\n  langs:\n  - csharp\n  - vb\n  name: GetInstanceRestriction(Expression, Object)\n  fullName: System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInstanceRestriction\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 25\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Creates the binding restriction that checks the expression for object instance identity.</p>\\n\"\n  syntax:\n    content: public static BindingRestrictions GetInstanceRestriction(Expression expression, object instance)\n    content.vb: Public Shared Function GetInstanceRestriction(expression As Expression, instance As Object) As BindingRestrictions\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The expression to test.</p>\\n\"\n    - id: instance\n      type: System.Object\n      description: \"\\n<p>The exact object instance to test.</p>\\n\"\n    return:\n      type: System.Dynamic.BindingRestrictions\n      description: \"\\n<p>The new binding restrictions.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BindingRestrictions.GetInstanceRestriction(Expression, Object)\n- uid: System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)\n  commentId: M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)\n  id: GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)\n  parent: System.Dynamic.BindingRestrictions\n  langs:\n  - csharp\n  - vb\n  name: GetTypeRestriction(Expression, Type)\n  fullName: System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetTypeRestriction\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 26\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Creates the binding restriction that check the expression for runtime type identity.</p>\\n\"\n  syntax:\n    content: public static BindingRestrictions GetTypeRestriction(Expression expression, Type type)\n    content.vb: Public Shared Function GetTypeRestriction(expression As Expression, type As Type) As BindingRestrictions\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The expression to test.</p>\\n\"\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The exact type to test.</p>\\n\"\n    return:\n      type: System.Dynamic.BindingRestrictions\n      description: \"\\n<p>The new binding restrictions.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BindingRestrictions.GetTypeRestriction(Expression, Type)\n- uid: System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)\n  commentId: M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)\n  id: Merge(System.Dynamic.BindingRestrictions)\n  parent: System.Dynamic.BindingRestrictions\n  langs:\n  - csharp\n  - vb\n  name: Merge(BindingRestrictions)\n  fullName: System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Merge\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs\n    startLine: 40\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Merges the set of binding restrictions with the current binding restrictions.</p>\\n\"\n  syntax:\n    content: public BindingRestrictions Merge(BindingRestrictions restrictions)\n    content.vb: Public Function Merge(restrictions As BindingRestrictions) As BindingRestrictions\n    parameters:\n    - id: restrictions\n      type: System.Dynamic.BindingRestrictions\n      description: \"\\n<p>The set of restrictions with which to merge the current binding restrictions.</p>\\n\"\n    return:\n      type: System.Dynamic.BindingRestrictions\n      description: \"\\n<p>The new set of binding restrictions.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BindingRestrictions.Merge(BindingRestrictions)\n- uid: System.Dynamic.BindingRestrictions.ToExpression\n  commentId: M:System.Dynamic.BindingRestrictions.ToExpression\n  id: ToExpression\n  parent: System.Dynamic.BindingRestrictions\n  langs:\n  - csharp\n  - vb\n  name: ToExpression()\n  fullName: System.Dynamic.BindingRestrictions.ToExpression()\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToExpression\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/BindingRestrictions.cs\n    startLine: 186\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Creates the <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the binding restrictions.</p>\\n\"\n  syntax:\n    content: public Expression ToExpression()\n    content.vb: Public Function ToExpression As Expression\n    return:\n      type: Expression\n      description: \"\\n<p>The expression tree representing the restrictions.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BindingRestrictions.ToExpression()\nreferences:\n- uid: System.Dynamic\n  isExternal: false\n  name: System.Dynamic\n  fullName: System.Dynamic\n  nameWithType: System.Dynamic\n  commentId: N:System.Dynamic\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Dynamic.BindingRestrictions\n  parent: System.Dynamic\n  isExternal: false\n  name: BindingRestrictions\n  fullName: System.Dynamic.BindingRestrictions\n  nameWithType: BindingRestrictions\n  commentId: T:System.Dynamic.BindingRestrictions\n- uid: System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IList`1\n  name: IList<DynamicMetaObject>\n  fullName: System.Collections.Generic.IList<System.Dynamic.DynamicMetaObject>\n  fullname.vb: System.Collections.Generic.IList(Of System.Dynamic.DynamicMetaObject)\n  name.vb: IList(Of DynamicMetaObject)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Dynamic.DynamicMetaObject\n    name: DynamicMetaObject\n    fullName: System.Dynamic.DynamicMetaObject\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Dynamic.DynamicMetaObject\n    name: DynamicMetaObject\n    fullName: System.Dynamic.DynamicMetaObject\n  - name: )\n    fullName: )\n  nameWithType: IList<DynamicMetaObject>\n  nameWithType.vb: IList(Of DynamicMetaObject)\n  commentId: T:System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject}\n- uid: System.Collections.Generic.IList`1\n  isExternal: false\n  name: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n  fullname.vb: System.Collections.Generic.IList(Of T)\n  name.vb: IList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>\n  nameWithType.vb: IList(Of T)\n  commentId: T:System.Collections.Generic.IList`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  fullName: System.Linq.Expressions.Expression\n  nameWithType: Expression\n  commentId: T:System.Linq.Expressions.Expression\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n"}