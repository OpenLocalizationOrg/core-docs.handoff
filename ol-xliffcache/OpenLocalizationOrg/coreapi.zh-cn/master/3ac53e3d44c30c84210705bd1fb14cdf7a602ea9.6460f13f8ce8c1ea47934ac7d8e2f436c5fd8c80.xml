{"nodes":[{"pos":[325,333],"content":"KnownAce","needQuote":true,"nodes":[{"content":"KnownAce","pos":[0,8]}]},{"pos":[2731,2741],"content":"AccessMask","needQuote":true,"nodes":[{"content":"AccessMask","pos":[0,10]}]},{"pos":[4065,4083],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[5559,5588],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[5788,5794],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5989,5999],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[6272,6280],"content":"AceFlags","needQuote":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[6579,6586],"content":"AceType","needQuote":true,"nodes":[{"content":"AceType","pos":[0,7]}]},{"pos":[6885,6895],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[7205,7217],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[7537,7553],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[7880,7891],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[8208,8224],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[8544,8550],"content":"Copy()","needQuote":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[8691,8695],"content":"Copy","needQuote":true,"nodes":[{"content":"Copy","pos":[0,4]}]},{"pos":[8766,8767],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8794,8795],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8888,8892],"content":"Copy","needQuote":true,"nodes":[{"content":"Copy","pos":[0,4]}]},{"pos":[8963,8964],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8991,8992],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9279,9314],"content":"CreateFromBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm(Byte[], Int32)","pos":[0,35]}]},{"pos":[9695,9715],"content":"CreateFromBinaryForm","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm","pos":[0,20]}]},{"pos":[9802,9803],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9851,9855],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[9914,9916]},{"content":",","pos":[9948,9949]},{"pos":[10003,10008],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[10067,10068],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10205,10225],"content":"CreateFromBinaryForm","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm","pos":[0,20]}]},{"pos":[10312,10313],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10361,10365],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[10423,10425],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[10454,10455]},{"pos":[10509,10514],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[10573,10574],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10973,10987],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11160,11166],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11239,11240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11290,11296],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11356,11357],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11467,11473],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11546,11547],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11597,11603],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11663,11664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11969,11997],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"pos":[12350,12363],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[12443,12444],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12492,12496],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[12555,12557]},{"content":",","pos":[12589,12590]},{"pos":[12644,12649],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[12708,12709],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12839,12852],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[12932,12933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12981,12985],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[13043,13045],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[13074,13075]},{"pos":[13129,13134],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13193,13194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13563,13576],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13731,13742],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13820,13821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13848,13849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13949,13960],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14038,14039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14066,14067],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14274,14284],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14379,14387],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14456,14457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14484,14485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14555,14563],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14632,14633],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14660,14661],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14858,14880],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[15028,15034],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15101,15102],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15152,15158],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15219,15220]},{"pos":[15275,15281],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15341,15342],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15439,15445],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15512,15513],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15563,15569],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15630,15631]},{"pos":[15686,15692],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15752,15753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15998,16029],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[16195,16210],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16286,16287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16337,16343],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16404,16405]},{"pos":[16460,16466],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16526,16527],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16633,16648],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16724,16725],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16775,16781],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16842,16843]},{"pos":[16898,16904],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16964,16965],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17191,17200],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17293,17300],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17368,17369],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17396,17397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17466,17473],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17541,17542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17569,17570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17745,17762],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[17871,17886],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17962,17963],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17990,17991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18068,18083],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18159,18160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18187,18188],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18333,18339],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[18469,18474],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18666,18684],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[18898,18923],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]}],"content":"items:\n- uid: System.Security.AccessControl.KnownAce\n  commentId: T:System.Security.AccessControl.KnownAce\n  id: KnownAce\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.KnownAce.AccessMask\n  - System.Security.AccessControl.KnownAce.SecurityIdentifier\n  langs:\n  - csharp\n  - vb\n  name: KnownAce\n  fullName: System.Security.AccessControl.KnownAce\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KnownAce\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 317\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Encapsulates all Access Control Entry (ACE) types currently defined by Microsoft Corporation. All <xref href=\\\"System.Security.AccessControl.KnownAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects contain a 32-bit access mask and a <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: 'public abstract class KnownAce : GenericAce'\n    content.vb: >-\n      Public MustInherit Class KnownAce\n          Inherits GenericAce\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericAce\n  inheritedMembers:\n  - System.Security.AccessControl.GenericAce.AceFlags\n  - System.Security.AccessControl.GenericAce.AceType\n  - System.Security.AccessControl.GenericAce.AuditFlags\n  - System.Security.AccessControl.GenericAce.BinaryLength\n  - System.Security.AccessControl.GenericAce.InheritanceFlags\n  - System.Security.AccessControl.GenericAce.IsInherited\n  - System.Security.AccessControl.GenericAce.PropagationFlags\n  - System.Security.AccessControl.GenericAce.Copy\n  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.Equals(System.Object)\n  - System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: KnownAce\n- uid: System.Security.AccessControl.KnownAce.AccessMask\n  commentId: P:System.Security.AccessControl.KnownAce.AccessMask\n  id: AccessMask\n  parent: System.Security.AccessControl.KnownAce\n  langs:\n  - csharp\n  - vb\n  name: AccessMask\n  fullName: System.Security.AccessControl.KnownAce.AccessMask\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AccessMask\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 320\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the access mask for this <xref href=\\\"System.Security.AccessControl.KnownAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int AccessMask { get; set; }\n    content.vb: Public Property AccessMask As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The access mask for this <xref href=\\\"System.Security.AccessControl.KnownAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: KnownAce.AccessMask\n- uid: System.Security.AccessControl.KnownAce.SecurityIdentifier\n  commentId: P:System.Security.AccessControl.KnownAce.SecurityIdentifier\n  id: SecurityIdentifier\n  parent: System.Security.AccessControl.KnownAce\n  langs:\n  - csharp\n  - vb\n  name: SecurityIdentifier\n  fullName: System.Security.AccessControl.KnownAce.SecurityIdentifier\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SecurityIdentifier\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 321\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object associated with this <xref href=\\\"System.Security.AccessControl.KnownAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public SecurityIdentifier SecurityIdentifier { get; set; }\n    content.vb: Public Property SecurityIdentifier As SecurityIdentifier\n    parameters: []\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object associated with this <xref href=\\\"System.Security.AccessControl.KnownAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: KnownAce.SecurityIdentifier\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n  commentId: T:System.Security.AccessControl.GenericAce\n  nameWithType: GenericAce\n- uid: System.Security.AccessControl.GenericAce.AceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceFlags\n  fullName: System.Security.AccessControl.GenericAce.AceFlags\n  commentId: P:System.Security.AccessControl.GenericAce.AceFlags\n  nameWithType: GenericAce.AceFlags\n- uid: System.Security.AccessControl.GenericAce.AceType\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceType\n  fullName: System.Security.AccessControl.GenericAce.AceType\n  commentId: P:System.Security.AccessControl.GenericAce.AceType\n  nameWithType: GenericAce.AceType\n- uid: System.Security.AccessControl.GenericAce.AuditFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.GenericAce.AuditFlags\n  commentId: P:System.Security.AccessControl.GenericAce.AuditFlags\n  nameWithType: GenericAce.AuditFlags\n- uid: System.Security.AccessControl.GenericAce.BinaryLength\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: BinaryLength\n  fullName: System.Security.AccessControl.GenericAce.BinaryLength\n  commentId: P:System.Security.AccessControl.GenericAce.BinaryLength\n  nameWithType: GenericAce.BinaryLength\n- uid: System.Security.AccessControl.GenericAce.InheritanceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags\n  commentId: P:System.Security.AccessControl.GenericAce.InheritanceFlags\n  nameWithType: GenericAce.InheritanceFlags\n- uid: System.Security.AccessControl.GenericAce.IsInherited\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: IsInherited\n  fullName: System.Security.AccessControl.GenericAce.IsInherited\n  commentId: P:System.Security.AccessControl.GenericAce.IsInherited\n  nameWithType: GenericAce.IsInherited\n- uid: System.Security.AccessControl.GenericAce.PropagationFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.GenericAce.PropagationFlags\n  commentId: P:System.Security.AccessControl.GenericAce.PropagationFlags\n  nameWithType: GenericAce.PropagationFlags\n- uid: System.Security.AccessControl.GenericAce.Copy\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Copy()\n  fullName: System.Security.AccessControl.GenericAce.Copy()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.Copy\n    name: Copy\n    fullName: System.Security.AccessControl.GenericAce.Copy\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.Copy\n    name: Copy\n    fullName: System.Security.AccessControl.GenericAce.Copy\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.Copy\n  nameWithType: GenericAce.Copy()\n- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: CreateFromBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)\n  name.vb: CreateFromBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n    name: CreateFromBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n    name: CreateFromBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericAce.CreateFromBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAce.CreateFromBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.AccessControl.GenericAce.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.AccessControl.GenericAce.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.Equals(System.Object)\n  nameWithType: GenericAce.Equals(Object)\n- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: true\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericAce.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAce.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericAce.GetHashCode\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Security.AccessControl.GenericAce.GetHashCode()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAce.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.AccessControl.GenericAce.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAce.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.AccessControl.GenericAce.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAce.GetHashCode\n  nameWithType: GenericAce.GetHashCode()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n  commentId: T:System.Security.Principal.SecurityIdentifier\n  nameWithType: SecurityIdentifier\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n"}