{"nodes":[{"pos":[963,975],"content":"AuditRule<T>","needQuote":true,"nodes":[{"content":"AuditRule&lt;T&gt;","pos":[0,12],"source":"AuditRule<T>"}]},{"content":"\\n&lt;p&gt;The type of the audit rule.&lt;/p&gt;\\n","pos":[1747,1785],"source":"\\n<p>The type of the audit rule.</p>\\n"},{"pos":[3316,3359],"content":"AuditRule(IdentityReference, T, AuditFlags)","needQuote":true,"nodes":[{"content":"AuditRule(IdentityReference, T, AuditFlags)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The identity to which this audit rule applies.&lt;/p&gt;\\n","pos":[4415,4472],"source":"\\n<p>The identity to which this audit rule applies.</p>\\n"},{"content":"\\n&lt;p&gt;The rights of the audit rule.&lt;/p&gt;\\n","pos":[4529,4569],"source":"\\n<p>The rights of the audit rule.</p>\\n"},{"content":"\\n&lt;p&gt;The conditions for which the rule is audited.&lt;/p&gt;\\n","pos":[4660,4716],"source":"\\n<p>The conditions for which the rule is audited.</p>\\n"},{"pos":[5857,5936],"content":"AuditRule(IdentityReference, T, InheritanceFlags, PropagationFlags, AuditFlags)","needQuote":true,"nodes":[{"content":"AuditRule(IdentityReference, T, InheritanceFlags, PropagationFlags, AuditFlags)","pos":[0,79]}]},{"content":"\\n&lt;p&gt;The identity to which the audit rule applies.","pos":[7234,7284],"source":"\\n<p>The identity to which the audit rule applies."},{"content":"&lt;/p&gt;\\n","pos":[7285,7291],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The rights of the audit rule.&lt;/p&gt;\\n","pos":[7348,7388],"source":"\\n<p>The rights of the audit rule.</p>\\n"},{"content":"\\n&lt;p&gt;The inheritance properties of the audit rule.&lt;/p&gt;\\n","pos":[7496,7552],"source":"\\n<p>The inheritance properties of the audit rule.</p>\\n"},{"content":"\\n&lt;p&gt;Whether inherited audit rules are automatically propagated.&lt;/p&gt;\\n","pos":[7660,7730],"source":"\\n<p>Whether inherited audit rules are automatically propagated.</p>\\n"},{"content":"\\n&lt;p&gt;The conditions for which the rule is audited.&lt;/p&gt;\\n","pos":[7821,7877],"source":"\\n<p>The conditions for which the rule is audited.</p>\\n"},{"pos":[8814,8846],"content":"AuditRule(String, T, AuditFlags)","needQuote":true,"nodes":[{"content":"AuditRule(String, T, AuditFlags)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The identity to which the audit rule applies.&lt;/p&gt;\\n","pos":[9820,9876],"source":"\\n<p>The identity to which the audit rule applies.</p>\\n"},{"content":"\\n&lt;p&gt;The rights of the audit rule.&lt;/p&gt;\\n","pos":[9933,9973],"source":"\\n<p>The rights of the audit rule.</p>\\n"},{"content":"\\n&lt;p&gt;The properties of the audit rule.&lt;/p&gt;\\n","pos":[10064,10108],"source":"\\n<p>The properties of the audit rule.</p>\\n"},{"pos":[11107,11175],"content":"AuditRule(String, T, InheritanceFlags, PropagationFlags, AuditFlags)","needQuote":true,"nodes":[{"content":"AuditRule(String, T, InheritanceFlags, PropagationFlags, AuditFlags)","pos":[0,68]}]},{"content":"\\n&lt;p&gt;The identity to which the audit rule applies.&lt;/p&gt;\\n","pos":[12390,12446],"source":"\\n<p>The identity to which the audit rule applies.</p>\\n"},{"content":"\\n&lt;p&gt;The rights of the audit rule.&lt;/p&gt;\\n","pos":[12503,12543],"source":"\\n<p>The rights of the audit rule.</p>\\n"},{"content":"\\n&lt;p&gt;The inheritance properties of the audit rule.&lt;/p&gt;\\n","pos":[12651,12707],"source":"\\n<p>The inheritance properties of the audit rule.</p>\\n"},{"content":"\\n&lt;p&gt;Whether inherited audit rules are automatically propagated.&lt;/p&gt;\\n","pos":[12815,12885],"source":"\\n<p>Whether inherited audit rules are automatically propagated.</p>\\n"},{"content":"\\n&lt;p&gt;The conditions for which the rule is audited.&lt;/p&gt;\\n","pos":[12976,13032],"source":"\\n<p>The conditions for which the rule is audited.</p>\\n"},{"pos":[13741,13747],"content":"Rights","needQuote":true,"nodes":[{"content":"Rights","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The rights of the audit rule.&lt;/p&gt;\\n","pos":[14437,14477],"source":"\\n<p>The rights of the audit rule.</p>\\n"},{"pos":[14781,14810],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[15010,15016],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15218,15235],"content":"AuthorizationRule","needQuote":true,"nodes":[{"content":"AuthorizationRule","pos":[0,17]}]},{"pos":[15508,15517],"content":"AuditRule","needQuote":true,"nodes":[{"content":"AuditRule","pos":[0,9]}]},{"pos":[15787,15797],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[16116,16126],"content":"AccessMask","needQuote":true,"nodes":[{"content":"AccessMask","pos":[0,10]}]},{"pos":[16476,16493],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[16863,16879],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[17241,17252],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[17604,17620],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[17910,17920],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[18015,18023],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[18092,18093],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18120,18121],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18191,18199],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[18268,18269],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18296,18297],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18480,18494],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[18613,18619],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18686,18687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18737,18743],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18803,18804],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18887,18893],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18960,18961],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19011,19017],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19077,19078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19292,19314],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[19462,19468],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19535,19536],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19586,19592],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19653,19654]},{"pos":[19709,19715],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19775,19776],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19873,19879],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19946,19947],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19997,20003],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20064,20065]},{"pos":[20120,20126],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20186,20187],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20432,20463],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[20629,20644],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[20720,20721],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20771,20777],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20838,20839]},{"pos":[20894,20900],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20960,20961],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21067,21082],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21158,21159],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21209,21215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21276,21277]},{"pos":[21332,21338],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21398,21399],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21629,21642],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[21743,21754],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[21826,21827],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21854,21855],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21928,21939],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22011,22012],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22039,22040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22215,22224],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[22317,22324],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22392,22393],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22420,22421],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22490,22497],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22565,22566],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22593,22594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22769,22786],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[22895,22910],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[22986,22987],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23014,23015],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23092,23107],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23183,23184],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23211,23212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23357,23363],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[23543,23560],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[23747,23748],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23916,23926],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[24124,24149],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[24308,24309],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24464,24480],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[24757,24773],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[24994,25000],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Security.AccessControl.AuditRule`1\n  commentId: T:System.Security.AccessControl.AuditRule`1\n  id: AuditRule`1\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.AuditRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.AuditRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.AuditRule`1.#ctor(System.String,`0,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.AuditRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.AuditRule`1.Rights\n  langs:\n  - csharp\n  - vb\n  name: AuditRule<T>\n  fullName: System.Security.AccessControl.AuditRule<T>\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuditRule\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 116\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents a combination of a user’s identity and an access mask.</p>\\n\"\n  syntax:\n    content: 'public class AuditRule<T> : AuditRule where T : struct'\n    content.vb: >-\n      Public Class AuditRule(Of T As Structure)\n          Inherits AuditRule\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the audit rule.</p>\\n\"\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.AuthorizationRule\n  - System.Security.AccessControl.AuditRule\n  inheritedMembers:\n  - System.Security.AccessControl.AuditRule.AuditFlags\n  - System.Security.AccessControl.AuthorizationRule.AccessMask\n  - System.Security.AccessControl.AuthorizationRule.IdentityReference\n  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  - System.Security.AccessControl.AuthorizationRule.IsInherited\n  - System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  fullName.vb: System.Security.AccessControl.AuditRule(Of T)\n  name.vb: AuditRule(Of T)\n  nameWithType: AuditRule<T>\n  nameWithType.vb: AuditRule(Of T)\n- uid: System.Security.AccessControl.AuditRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AuditFlags)\n  commentId: M:System.Security.AccessControl.AuditRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AuditFlags)\n  id: '#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AuditFlags)'\n  parent: System.Security.AccessControl.AuditRule`1\n  langs:\n  - csharp\n  - vb\n  name: AuditRule(IdentityReference, T, AuditFlags)\n  fullName: System.Security.AccessControl.AuditRule<T>.AuditRule(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.AuditFlags)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 118\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.AuditRule`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified values.</p>\\n\"\n  syntax:\n    content: public AuditRule(IdentityReference identity, T rights, AuditFlags flags)\n    content.vb: Public Sub New(identity As IdentityReference, rights As T, flags As AuditFlags)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The identity to which this audit rule applies.</p>\\n\"\n    - id: rights\n      type: '{T}'\n      description: \"\\n<p>The rights of the audit rule.</p>\\n\"\n    - id: flags\n      type: System.Security.AccessControl.AuditFlags\n      description: \"\\n<p>The conditions for which the rule is audited.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.AuditRule(Of T).AuditRule(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.AuditFlags)\n  nameWithType: AuditRule<T>.AuditRule(IdentityReference, T, AuditFlags)\n  nameWithType.vb: AuditRule(Of T).AuditRule(IdentityReference, T, AuditFlags)\n- uid: System.Security.AccessControl.AuditRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  commentId: M:System.Security.AccessControl.AuditRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  id: '#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)'\n  parent: System.Security.AccessControl.AuditRule`1\n  langs:\n  - csharp\n  - vb\n  name: AuditRule(IdentityReference, T, InheritanceFlags, PropagationFlags, AuditFlags)\n  fullName: System.Security.AccessControl.AuditRule<T>.AuditRule(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 119\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.AuditRule`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified values.</p>\\n\"\n  syntax:\n    content: public AuditRule(IdentityReference identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags)\n    content.vb: Public Sub New(identity As IdentityReference, rights As T, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, flags As AuditFlags)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The identity to which the audit rule applies. </p>\\n\"\n    - id: rights\n      type: '{T}'\n      description: \"\\n<p>The rights of the audit rule.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>The inheritance properties of the audit rule.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Whether inherited audit rules are automatically propagated.</p>\\n\"\n    - id: flags\n      type: System.Security.AccessControl.AuditFlags\n      description: \"\\n<p>The conditions for which the rule is audited.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.AuditRule(Of T).AuditRule(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)\n  nameWithType: AuditRule<T>.AuditRule(IdentityReference, T, InheritanceFlags, PropagationFlags, AuditFlags)\n  nameWithType.vb: AuditRule(Of T).AuditRule(IdentityReference, T, InheritanceFlags, PropagationFlags, AuditFlags)\n- uid: System.Security.AccessControl.AuditRule`1.#ctor(System.String,`0,System.Security.AccessControl.AuditFlags)\n  commentId: M:System.Security.AccessControl.AuditRule`1.#ctor(System.String,`0,System.Security.AccessControl.AuditFlags)\n  id: '#ctor(System.String,`0,System.Security.AccessControl.AuditFlags)'\n  parent: System.Security.AccessControl.AuditRule`1\n  langs:\n  - csharp\n  - vb\n  name: AuditRule(String, T, AuditFlags)\n  fullName: System.Security.AccessControl.AuditRule<T>.AuditRule(System.String, T, System.Security.AccessControl.AuditFlags)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 120\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.AuditRule`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified values.</p>\\n\"\n  syntax:\n    content: public AuditRule(string identity, T rights, AuditFlags flags)\n    content.vb: Public Sub New(identity As String, rights As T, flags As AuditFlags)\n    parameters:\n    - id: identity\n      type: System.String\n      description: \"\\n<p>The identity to which the audit rule applies.</p>\\n\"\n    - id: rights\n      type: '{T}'\n      description: \"\\n<p>The rights of the audit rule.</p>\\n\"\n    - id: flags\n      type: System.Security.AccessControl.AuditFlags\n      description: \"\\n<p>The properties of the audit rule.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.AuditRule(Of T).AuditRule(System.String, T, System.Security.AccessControl.AuditFlags)\n  nameWithType: AuditRule<T>.AuditRule(String, T, AuditFlags)\n  nameWithType.vb: AuditRule(Of T).AuditRule(String, T, AuditFlags)\n- uid: System.Security.AccessControl.AuditRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  commentId: M:System.Security.AccessControl.AuditRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  id: '#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)'\n  parent: System.Security.AccessControl.AuditRule`1\n  langs:\n  - csharp\n  - vb\n  name: AuditRule(String, T, InheritanceFlags, PropagationFlags, AuditFlags)\n  fullName: System.Security.AccessControl.AuditRule<T>.AuditRule(System.String, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 121\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.AuditRule`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>class by using the specified values.</p>\\n\"\n  syntax:\n    content: public AuditRule(string identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags)\n    content.vb: Public Sub New(identity As String, rights As T, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, flags As AuditFlags)\n    parameters:\n    - id: identity\n      type: System.String\n      description: \"\\n<p>The identity to which the audit rule applies.</p>\\n\"\n    - id: rights\n      type: '{T}'\n      description: \"\\n<p>The rights of the audit rule.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>The inheritance properties of the audit rule.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Whether inherited audit rules are automatically propagated.</p>\\n\"\n    - id: flags\n      type: System.Security.AccessControl.AuditFlags\n      description: \"\\n<p>The conditions for which the rule is audited.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.AuditRule(Of T).AuditRule(System.String, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)\n  nameWithType: AuditRule<T>.AuditRule(String, T, InheritanceFlags, PropagationFlags, AuditFlags)\n  nameWithType.vb: AuditRule(Of T).AuditRule(String, T, InheritanceFlags, PropagationFlags, AuditFlags)\n- uid: System.Security.AccessControl.AuditRule`1.Rights\n  commentId: P:System.Security.AccessControl.AuditRule`1.Rights\n  id: Rights\n  parent: System.Security.AccessControl.AuditRule`1\n  langs:\n  - csharp\n  - vb\n  name: Rights\n  fullName: System.Security.AccessControl.AuditRule<T>.Rights\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Rights\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 122\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the rights of the audit rule.</p>\\n\"\n  syntax:\n    content: public T Rights { get; }\n    content.vb: Public ReadOnly Property Rights As T\n    parameters: []\n    return:\n      type: '{T}'\n      description: \"\\n<p>The rights of the audit rule.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Security.AccessControl.AuditRule(Of T).Rights\n  nameWithType: AuditRule<T>.Rights\n  nameWithType.vb: AuditRule(Of T).Rights\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.AuthorizationRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuthorizationRule\n  fullName: System.Security.AccessControl.AuthorizationRule\n  commentId: T:System.Security.AccessControl.AuthorizationRule\n  nameWithType: AuthorizationRule\n- uid: System.Security.AccessControl.AuditRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditRule\n  fullName: System.Security.AccessControl.AuditRule\n  commentId: T:System.Security.AccessControl.AuditRule\n  nameWithType: AuditRule\n- uid: System.Security.AccessControl.AuditRule.AuditFlags\n  parent: System.Security.AccessControl.AuditRule\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.AuditRule.AuditFlags\n  commentId: P:System.Security.AccessControl.AuditRule.AuditFlags\n  nameWithType: AuditRule.AuditFlags\n- uid: System.Security.AccessControl.AuthorizationRule.AccessMask\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: AccessMask\n  fullName: System.Security.AccessControl.AuthorizationRule.AccessMask\n  commentId: P:System.Security.AccessControl.AuthorizationRule.AccessMask\n  nameWithType: AuthorizationRule.AccessMask\n- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IdentityReference\n  nameWithType: AuthorizationRule.IdentityReference\n- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  nameWithType: AuthorizationRule.InheritanceFlags\n- uid: System.Security.AccessControl.AuthorizationRule.IsInherited\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IsInherited\n  fullName: System.Security.AccessControl.AuthorizationRule.IsInherited\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IsInherited\n  nameWithType: AuthorizationRule.IsInherited\n- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  nameWithType: AuthorizationRule.PropagationFlags\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n  commentId: T:System.Security.Principal.IdentityReference\n  nameWithType: IdentityReference\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  commentId: '!:T'\n  nameWithType: T\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n  commentId: T:System.Security.AccessControl.AuditFlags\n  nameWithType: AuditFlags\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n  commentId: T:System.Security.AccessControl.InheritanceFlags\n  nameWithType: InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n  commentId: T:System.Security.AccessControl.PropagationFlags\n  nameWithType: PropagationFlags\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n"}