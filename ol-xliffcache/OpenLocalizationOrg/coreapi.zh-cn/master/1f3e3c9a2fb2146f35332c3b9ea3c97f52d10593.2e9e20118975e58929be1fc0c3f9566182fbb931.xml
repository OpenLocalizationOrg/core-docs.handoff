{"nodes":[{"pos":[711,726],"content":"ObjectAuditRule","needQuote":true,"nodes":[{"content":"ObjectAuditRule","pos":[0,15]}]},{"pos":[3677,3787],"content":"ObjectAuditRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, Guid, Guid, AuditFlags)","needQuote":true,"nodes":[{"content":"ObjectAuditRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, Guid, Guid, AuditFlags)","pos":[0,110]}]},{"content":"\\n&lt;p&gt;The access mask of this rule.","pos":[5568,5602],"source":"\\n<p>The access mask of this rule."},{"content":"The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.&lt;/p&gt;\\n","pos":[5603,5729],"source":" The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this rule is inherited from a parent container.&lt;/p&gt;\\n","pos":[5800,5885],"source":"\\n<p>\\n<strong>true</strong> if this rule is inherited from a parent container.</p>\\n"},{"content":"\\n&lt;p&gt;Specifies the inheritance properties of the access rule.&lt;/p&gt;\\n","pos":[5993,6060],"source":"\\n<p>Specifies the inheritance properties of the access rule.</p>\\n"},{"content":"\\n&lt;p&gt;The type of object to which the rule applies.&lt;/p&gt;\\n","pos":[6492,6548],"source":"\\n<p>The type of object to which the rule applies.</p>\\n"},{"content":"\\n&lt;p&gt;The type of child object that can inherit the rule.&lt;/p&gt;\\n","pos":[6624,6686],"source":"\\n<p>The type of child object that can inherit the rule.</p>\\n"},{"content":"\\n&lt;p&gt;The audit conditions.&lt;/p&gt;\\n","pos":[6782,6814],"source":"\\n<p>The audit conditions.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the &lt;em&gt;accessMask&lt;/em&gt; parameter is 0, or the &lt;em&gt;inheritanceFlags&lt;/em&gt; or &lt;em&gt;propagationFlags&lt;/em&gt; parameters contain unrecognized flag values.&lt;/p&gt;\\n","pos":[7281,7451],"source":"\\n<p>The value of the <em>accessMask</em> parameter is 0, or the <em>inheritanceFlags</em> or <em>propagationFlags</em> parameters contain unrecognized flag values.</p>\\n"},{"pos":[7931,7950],"content":"InheritedObjectType","needQuote":true,"nodes":[{"content":"InheritedObjectType","pos":[0,19]}]},{"pos":[9387,9398],"content":"ObjectFlags","needQuote":true,"nodes":[{"content":"ObjectFlags","pos":[0,11]}]},{"pos":[11580,11590],"content":"ObjectType","needQuote":true,"nodes":[{"content":"ObjectType","pos":[0,10]}]},{"pos":[12786,12815],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[13015,13021],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13223,13240],"content":"AuthorizationRule","needQuote":true,"nodes":[{"content":"AuthorizationRule","pos":[0,17]}]},{"pos":[13513,13522],"content":"AuditRule","needQuote":true,"nodes":[{"content":"AuditRule","pos":[0,9]}]},{"pos":[13792,13802],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[14121,14131],"content":"AccessMask","needQuote":true,"nodes":[{"content":"AccessMask","pos":[0,10]}]},{"pos":[14481,14498],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[14868,14884],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[15246,15257],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[15609,15625],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[15915,15925],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[16020,16028],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16097,16098],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16125,16126],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16196,16204],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[16273,16274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16301,16302],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16485,16499],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[16618,16624],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16691,16692],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16742,16748],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16808,16809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16892,16898],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16965,16966],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17016,17022],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17082,17083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17297,17319],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17467,17473],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17540,17541],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17591,17597],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17658,17659]},{"pos":[17714,17720],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17780,17781],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17878,17884],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17951,17952],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18002,18008],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18069,18070]},{"pos":[18125,18131],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18191,18192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18437,18468],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18634,18649],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18725,18726],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18776,18782],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18843,18844]},{"pos":[18899,18905],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18965,18966],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19072,19087],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[19163,19164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19214,19220],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19281,19282]},{"pos":[19337,19343],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19403,19404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19634,19647],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[19748,19759],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19831,19832],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19859,19860],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19933,19944],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20016,20017],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20044,20045],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20220,20229],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[20322,20329],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20397,20398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20425,20426],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20495,20502],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[20570,20571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20598,20599],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20774,20791],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[20900,20915],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20991,20992],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21019,21020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21097,21112],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21188,21189],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21216,21217],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21362,21368],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[21548,21565],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[21780,21785],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[21928,21935],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22139,22155],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[22432,22448],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[22667,22671],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[22860,22870],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[23068,23093],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[23335,23349],"content":"ObjectAceFlags","needQuote":true,"nodes":[{"content":"ObjectAceFlags","pos":[0,14]}]},{"pos":[23575,23592],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[23774,23801],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.AccessControl.ObjectAuditRule\n  commentId: T:System.Security.AccessControl.ObjectAuditRule\n  id: ObjectAuditRule\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.ObjectAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.ObjectAuditRule.InheritedObjectType\n  - System.Security.AccessControl.ObjectAuditRule.ObjectFlags\n  - System.Security.AccessControl.ObjectAuditRule.ObjectType\n  langs:\n  - csharp\n  - vb\n  name: ObjectAuditRule\n  fullName: System.Security.AccessControl.ObjectAuditRule\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ObjectAuditRule\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 361\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents a combination of a user's identity, an access mask, and audit conditions. An <xref href=\\\"System.Security.AccessControl.ObjectAuditRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object also contains information about the type of object to which the rule applies, the type of child object that can inherit the rule, how the rule is inherited by child objects, and how that inheritance is propagated.</p>\\n\"\n  syntax:\n    content: 'public abstract class ObjectAuditRule : AuditRule'\n    content.vb: >-\n      Public MustInherit Class ObjectAuditRule\n          Inherits AuditRule\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.AuthorizationRule\n  - System.Security.AccessControl.AuditRule\n  inheritedMembers:\n  - System.Security.AccessControl.AuditRule.AuditFlags\n  - System.Security.AccessControl.AuthorizationRule.AccessMask\n  - System.Security.AccessControl.AuthorizationRule.IdentityReference\n  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  - System.Security.AccessControl.AuthorizationRule.IsInherited\n  - System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: ObjectAuditRule\n- uid: System.Security.AccessControl.ObjectAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AuditFlags)\n  commentId: M:System.Security.AccessControl.ObjectAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AuditFlags)\n  id: '#ctor(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Guid,System.Guid,System.Security.AccessControl.AuditFlags)'\n  parent: System.Security.AccessControl.ObjectAuditRule\n  langs:\n  - csharp\n  - vb\n  name: ObjectAuditRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, Guid, Guid, AuditFlags)\n  fullName: System.Security.AccessControl.ObjectAuditRule.ObjectAuditRule(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Guid, System.Guid, System.Security.AccessControl.AuditFlags)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 363\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.ObjectAuditRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected ObjectAuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, AuditFlags auditFlags)\n    content.vb: Protected Sub New(identity As IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, objectType As Guid, inheritedObjectType As Guid, auditFlags As AuditFlags)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The identity to which the access rule applies.  It must be an object that can be cast as a <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators.</p>\\n\"\n    - id: isInherited\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this rule is inherited from a parent container.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Specifies the inheritance properties of the access rule.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Whether inherited access rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\\\"System.Security.AccessControl.InheritanceFlags.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: objectType\n      type: System.Guid\n      description: \"\\n<p>The type of object to which the rule applies.</p>\\n\"\n    - id: inheritedObjectType\n      type: System.Guid\n      description: \"\\n<p>The type of child object that can inherit the rule.</p>\\n\"\n    - id: auditFlags\n      type: System.Security.AccessControl.AuditFlags\n      description: \"\\n<p>The audit conditions.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The value of the <em>identity</em> parameter cannot be cast as a <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or the <em>type</em> parameter contains an invalid value.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value of the <em>accessMask</em> parameter is 0, or the <em>inheritanceFlags</em> or <em>propagationFlags</em> parameters contain unrecognized flag values.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ObjectAuditRule.ObjectAuditRule(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, Guid, Guid, AuditFlags)\n- uid: System.Security.AccessControl.ObjectAuditRule.InheritedObjectType\n  commentId: P:System.Security.AccessControl.ObjectAuditRule.InheritedObjectType\n  id: InheritedObjectType\n  parent: System.Security.AccessControl.ObjectAuditRule\n  langs:\n  - csharp\n  - vb\n  name: InheritedObjectType\n  fullName: System.Security.AccessControl.ObjectAuditRule.InheritedObjectType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InheritedObjectType\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 364\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the type of child object that can inherit the <xref href=\\\"System.Security.AccessControl.ObjectAuditRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public Guid InheritedObjectType { get; }\n    content.vb: Public ReadOnly Property InheritedObjectType As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The type of child object that can inherit the <xref href=\\\"System.Security.AccessControl.ObjectAuditRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ObjectAuditRule.InheritedObjectType\n- uid: System.Security.AccessControl.ObjectAuditRule.ObjectFlags\n  commentId: P:System.Security.AccessControl.ObjectAuditRule.ObjectFlags\n  id: ObjectFlags\n  parent: System.Security.AccessControl.ObjectAuditRule\n  langs:\n  - csharp\n  - vb\n  name: ObjectFlags\n  fullName: System.Security.AccessControl.ObjectAuditRule.ObjectFlags\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ObjectFlags\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 365\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>\\n<xref href=\\\"System.Security.AccessControl.ObjectAuditRule.ObjectType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Security.AccessControl.ObjectAuditRule.InheritedObjectType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> properties of the <xref href=\\\"System.Security.AccessControl.ObjectAuditRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contain valid values.</p>\\n\"\n  syntax:\n    content: public ObjectAceFlags ObjectFlags { get; }\n    content.vb: Public ReadOnly Property ObjectFlags As ObjectAceFlags\n    parameters: []\n    return:\n      type: System.Security.AccessControl.ObjectAceFlags\n      description: \"\\n<p>\\n<xref href=\\\"System.Security.AccessControl.ObjectAceFlags.ObjectAceTypePresent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> specifies that the <xref href=\\\"System.Security.AccessControl.ObjectAuditRule.ObjectType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains a valid value. <xref href=\\\"System.Security.AccessControl.ObjectAceFlags.InheritedObjectAceTypePresent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> specifies that the <xref href=\\\"System.Security.AccessControl.ObjectAuditRule.InheritedObjectType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains a valid value. These values can be combined with a logical OR.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ObjectAuditRule.ObjectFlags\n- uid: System.Security.AccessControl.ObjectAuditRule.ObjectType\n  commentId: P:System.Security.AccessControl.ObjectAuditRule.ObjectType\n  id: ObjectType\n  parent: System.Security.AccessControl.ObjectAuditRule\n  langs:\n  - csharp\n  - vb\n  name: ObjectType\n  fullName: System.Security.AccessControl.ObjectAuditRule.ObjectType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ObjectType\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 366\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the type of object to which the <xref href=\\\"System.Security.AccessControl.ObjectAuditRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> applies.</p>\\n\"\n  syntax:\n    content: public Guid ObjectType { get; }\n    content.vb: Public ReadOnly Property ObjectType As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The type of object to which the <xref href=\\\"System.Security.AccessControl.ObjectAuditRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> applies.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ObjectAuditRule.ObjectType\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.AuthorizationRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuthorizationRule\n  fullName: System.Security.AccessControl.AuthorizationRule\n  commentId: T:System.Security.AccessControl.AuthorizationRule\n  nameWithType: AuthorizationRule\n- uid: System.Security.AccessControl.AuditRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditRule\n  fullName: System.Security.AccessControl.AuditRule\n  commentId: T:System.Security.AccessControl.AuditRule\n  nameWithType: AuditRule\n- uid: System.Security.AccessControl.AuditRule.AuditFlags\n  parent: System.Security.AccessControl.AuditRule\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.AuditRule.AuditFlags\n  commentId: P:System.Security.AccessControl.AuditRule.AuditFlags\n  nameWithType: AuditRule.AuditFlags\n- uid: System.Security.AccessControl.AuthorizationRule.AccessMask\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: AccessMask\n  fullName: System.Security.AccessControl.AuthorizationRule.AccessMask\n  commentId: P:System.Security.AccessControl.AuthorizationRule.AccessMask\n  nameWithType: AuthorizationRule.AccessMask\n- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IdentityReference\n  nameWithType: AuthorizationRule.IdentityReference\n- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  nameWithType: AuthorizationRule.InheritanceFlags\n- uid: System.Security.AccessControl.AuthorizationRule.IsInherited\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IsInherited\n  fullName: System.Security.AccessControl.AuthorizationRule.IsInherited\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IsInherited\n  nameWithType: AuthorizationRule.IsInherited\n- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  nameWithType: AuthorizationRule.PropagationFlags\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n  commentId: T:System.Security.Principal.IdentityReference\n  nameWithType: IdentityReference\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n  commentId: T:System.Security.AccessControl.InheritanceFlags\n  nameWithType: InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n  commentId: T:System.Security.AccessControl.PropagationFlags\n  nameWithType: PropagationFlags\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  commentId: T:System.Guid\n  nameWithType: Guid\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n  commentId: T:System.Security.AccessControl.AuditFlags\n  nameWithType: AuditFlags\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Security.AccessControl.ObjectAceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: ObjectAceFlags\n  fullName: System.Security.AccessControl.ObjectAceFlags\n  commentId: T:System.Security.AccessControl.ObjectAceFlags\n  nameWithType: ObjectAceFlags\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}