{"nodes":[{"pos":[1321,1330],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[3999,4009],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;FieldAttributes&lt;/strong&gt; for this field.&lt;/p&gt;\\n","pos":[4722,4785],"source":"\\n<p>The <strong>FieldAttributes</strong> for this field.</p>\\n"},{"pos":[5277,5286],"content":"FieldType","needQuote":true,"nodes":[{"content":"FieldType","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The type of this field object.&lt;/p&gt;\\n","pos":[5939,5980],"source":"\\n<p>The type of this field object.</p>\\n"},{"pos":[6474,6484],"content":"IsAssembly","needQuote":true,"nodes":[{"content":"IsAssembly","pos":[0,10]}]},{"pos":[8395,8403],"content":"IsFamily","needQuote":true,"nodes":[{"content":"IsFamily","pos":[0,8]}]},{"pos":[10310,10329],"content":"IsFamilyAndAssembly","needQuote":true,"nodes":[{"content":"IsFamilyAndAssembly","pos":[0,19]}]},{"pos":[12252,12270],"content":"IsFamilyOrAssembly","needQuote":true,"nodes":[{"content":"IsFamilyOrAssembly","pos":[0,18]}]},{"pos":[14061,14071],"content":"IsInitOnly","needQuote":true,"nodes":[{"content":"IsInitOnly","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the field has the &lt;strong&gt;InitOnly&lt;/strong&gt; attribute set; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14766,14897],"source":"\\n<p>\\n<strong>true</strong> if the field has the <strong>InitOnly</strong> attribute set; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[15520,15529],"content":"IsLiteral","needQuote":true,"nodes":[{"content":"IsLiteral","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the field has the &lt;strong&gt;Literal&lt;/strong&gt; attribute set; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16222,16352],"source":"\\n<p>\\n<strong>true</strong> if the field has the <strong>Literal</strong> attribute set; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[16762,16771],"content":"IsPrivate","needQuote":true,"nodes":[{"content":"IsPrivate","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the field is private; otherwise; &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17426,17520],"source":"\\n<p>\\n<strong>true</strong> if the field is private; otherwise; <strong>false</strong>.</p>\\n"},{"pos":[17972,17980],"content":"IsPublic","needQuote":true,"nodes":[{"content":"IsPublic","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this field is public; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18630,18724],"source":"\\n<p>\\n<strong>true</strong> if this field is public; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[19234,19247],"content":"IsSpecialName","needQuote":true,"nodes":[{"content":"IsSpecialName","pos":[0,13]}]},{"pos":[20704,20712],"content":"IsStatic","needQuote":true,"nodes":[{"content":"IsStatic","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this field is static; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21362,21456],"source":"\\n<p>\\n<strong>true</strong> if this field is static; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[22113,22127],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance, or &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22839,22916],"source":"\\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; equals the type and value of this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22977,23106],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[23594,23632],"content":"GetFieldFromHandle(RuntimeFieldHandle)","needQuote":true,"nodes":[{"content":"GetFieldFromHandle(RuntimeFieldHandle)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;handle&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[25043,25083],"source":"\\n<p>\\n<em>handle</em> is invalid.</p>\\n"},{"pos":[25732,25789],"content":"GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)","needQuote":true,"nodes":[{"content":"GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;handle&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;declaringType&lt;/em&gt; is not compatible with &lt;em&gt;handle&lt;/em&gt;.","pos":[27714,27834],"source":"\\n<p>\\n<em>handle</em> is invalid.</p>\\n<p>-or-</p>\\n<p>\\n<em>declaringType</em> is not compatible with <em>handle</em>."},{"content":"For example, &lt;em&gt;declaringType&lt;/em&gt; is the runtime type handle of the generic type definition, and &lt;em&gt;handle&lt;/em&gt; comes from a constructed type.","pos":[27835,27980],"source":" For example, <em>declaringType</em> is the runtime type handle of the generic type definition, and <em>handle</em> comes from a constructed type."},{"content":"See Remarks.&lt;/p&gt;\\n","pos":[27981,27999],"source":" See Remarks.</p>\\n"},{"pos":[28490,28503],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[29133,29178],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[29598,29626],"content":"GetOptionalCustomModifiers()","needQuote":true,"nodes":[{"content":"GetOptionalCustomModifiers()","pos":[0,28]}]},{"pos":[30998,31019],"content":"GetRawConstantValue()","needQuote":true,"nodes":[{"content":"GetRawConstantValue()","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The Constant table in unmanaged metadata does not contain a constant value for the current field.&lt;/p&gt;\\n","pos":[32095,32203],"source":"\\n<p>The Constant table in unmanaged metadata does not contain a constant value for the current field.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value is not one of the types permitted by the Common Language Specification (CLS).","pos":[32296,32400],"source":"\\n<p>The type of the value is not one of the types permitted by the Common Language Specification (CLS)."},{"content":"See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.","pos":[32401,32517]},{"content":"&lt;/p&gt;\\n","pos":[32518,32524],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The constant value for the field is not set.","pos":[32629,32678],"source":"\\n<p>The constant value for the field is not set."},{"content":"&lt;/p&gt;\\n","pos":[32679,32685],"source":" </p>\\n"},{"pos":[33059,33087],"content":"GetRequiredCustomModifiers()","needQuote":true,"nodes":[{"content":"GetRequiredCustomModifiers()","pos":[0,28]}]},{"pos":[34597,34613],"content":"GetValue(Object)","needQuote":true,"nodes":[{"content":"GetValue(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The object whose field value will be returned.","pos":[35347,35398],"source":"\\n<p>The object whose field value will be returned."},{"content":"&lt;/p&gt;\\n","pos":[35399,35405],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object containing the value of the field reflected by this instance.&lt;/p&gt;\\n","pos":[35465,35547],"source":"\\n<p>An object containing the value of the field reflected by this instance.</p>\\n"},{"content":"\\n&lt;p&gt;A field is marked literal, but the field does not have one of the accepted literal types.","pos":[36091,36185],"source":"\\n<p>A field is marked literal, but the field does not have one of the accepted literal types."},{"content":"&lt;/p&gt;\\n","pos":[36186,36192],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The method is neither declared nor inherited by the class of &lt;em&gt;obj&lt;/em&gt;.","pos":[36732,36811],"source":"\\n<p>The method is neither declared nor inherited by the class of <em>obj</em>."},{"content":"&lt;/p&gt;\\n","pos":[36812,36818],"source":" </p>\\n"},{"pos":[37589,37599],"content":"MemberType","needQuote":true,"nodes":[{"content":"MemberType","pos":[0,10]}]},{"pos":[39154,39178],"content":"SetValue(Object, Object)","needQuote":true,"nodes":[{"content":"SetValue(Object, Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The object whose field value will be set.","pos":[40008,40054],"source":"\\n<p>The object whose field value will be set."},{"content":"&lt;/p&gt;\\n","pos":[40055,40061],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to assign to the field.","pos":[40125,40163],"source":"\\n<p>The value to assign to the field."},{"content":"&lt;/p&gt;\\n","pos":[40164,40170],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The field does not exist on the object.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;value&lt;/em&gt; parameter cannot be converted and stored in the field.","pos":[41170,41310],"source":"\\n<p>The field does not exist on the object.</p>\\n<p>-or- </p>\\n<p>The <em>value</em> parameter cannot be converted and stored in the field."},{"content":"&lt;/p&gt;\\n","pos":[41311,41317],"source":" </p>\\n"},{"pos":[42024,42041],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[42205,42211],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42382,42392],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[42611,42635],"content":"ICustomAttributeProvider","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider","pos":[0,24]}]},{"pos":[42910,42926],"content":"CustomAttributes","needQuote":true,"nodes":[{"content":"CustomAttributes","pos":[0,16]}]},{"pos":[43207,43220],"content":"DeclaringType","needQuote":true,"nodes":[{"content":"DeclaringType","pos":[0,13]}]},{"pos":[43492,43505],"content":"MetadataToken","needQuote":true,"nodes":[{"content":"MetadataToken","pos":[0,13]}]},{"pos":[43770,43776],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[44018,44022],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[44331,44384],"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","pos":[0,53]}]},{"pos":[44730,44774],"content":"ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes","pos":[0,44]}]},{"pos":[44891,44892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44943,44950],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[45011,45012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45167,45229],"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","pos":[0,62]}]},{"pos":[45346,45347],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45398,45405],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[45466,45467],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45983,46042],"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","pos":[0,59]}]},{"pos":[46419,46463],"content":"ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes","pos":[0,44]}]},{"pos":[46580,46581],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46629,46633],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[46692,46693]},{"pos":[46749,46756],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[46817,46818],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46985,47047],"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","pos":[0,62]}]},{"pos":[47164,47165],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47213,47217],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[47276,47277]},{"pos":[47333,47340],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[47401,47402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47932,47981],"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","pos":[0,49]}]},{"pos":[48328,48362],"content":"ICustomAttributeProvider.IsDefined","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined","pos":[0,34]}]},{"pos":[48469,48470],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48518,48522],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[48581,48582]},{"pos":[48638,48645],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[48706,48707],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48864,48916],"content":"System.Reflection.ICustomAttributeProvider.IsDefined","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.IsDefined","pos":[0,52]}]},{"pos":[49023,49024],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49072,49076],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[49135,49136]},{"pos":[49192,49199],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[49260,49261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49659,49669],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[49764,49772],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[49841,49842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49869,49870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49940,49948],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[50017,50018],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50045,50046],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50243,50265],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[50413,50419],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50486,50487],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50537,50543],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50604,50605]},{"pos":[50660,50666],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50726,50727],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50824,50830],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50897,50898],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50948,50954],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51015,51016]},{"pos":[51071,51077],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51137,51138],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51383,51414],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[51580,51595],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[51671,51672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51722,51728],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51789,51790]},{"pos":[51845,51851],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51911,51912],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52018,52033],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[52109,52110],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52160,52166],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[52227,52228]},{"pos":[52283,52289],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52349,52350],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52576,52585],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[52678,52685],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52753,52754],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52781,52782],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52851,52858],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52926,52927],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52954,52955],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53130,53147],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[53256,53271],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[53347,53348],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53375,53376],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53453,53468],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[53544,53545],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53572,53573],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53718,53724],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[53886,53901],"content":"FieldAttributes","needQuote":true,"nodes":[{"content":"FieldAttributes","pos":[0,15]}]},{"pos":[54093,54097],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[54237,54244],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[54450,54464],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[54613,54619],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[54680,54681],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54731,54737],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54797,54798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54896,54902],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[54963,54964],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55014,55020],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55080,55081],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55284,55302],"content":"RuntimeFieldHandle","needQuote":true,"nodes":[{"content":"RuntimeFieldHandle","pos":[0,18]}]},{"pos":[55508,55517],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[55704,55721],"content":"RuntimeTypeHandle","needQuote":true,"nodes":[{"content":"RuntimeTypeHandle","pos":[0,17]}]},{"pos":[55948,55961],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[56092,56103],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[56169,56170],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56197,56198],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56286,56297],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[56363,56364],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56391,56392],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56571,56576],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[56681,56687],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[56807,56811],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[56849,56851]},{"pos":[56914,56918],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[56955,56957],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[57138,57148],"content":"MemberType","needQuote":true,"nodes":[{"content":"MemberType","pos":[0,10]}]},{"pos":[57387,57398],"content":"MemberTypes","needQuote":true,"nodes":[{"content":"MemberTypes","pos":[0,11]}]},{"pos":[57591,57608],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[57805,57830],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[58041,58056],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[58243,58264],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[58457,58472],"content":"TargetException","needQuote":true,"nodes":[{"content":"TargetException","pos":[0,15]}]},{"pos":[58663,58683],"content":"FieldAccessException","needQuote":true,"nodes":[{"content":"FieldAccessException","pos":[0,20]}]}],"content":"items:\n- uid: System.Reflection.FieldInfo\n  commentId: T:System.Reflection.FieldInfo\n  id: FieldInfo\n  parent: System.Reflection\n  children:\n  - System.Reflection.FieldInfo.Attributes\n  - System.Reflection.FieldInfo.Equals(System.Object)\n  - System.Reflection.FieldInfo.FieldType\n  - System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)\n  - System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  - System.Reflection.FieldInfo.GetHashCode\n  - System.Reflection.FieldInfo.GetOptionalCustomModifiers\n  - System.Reflection.FieldInfo.GetRawConstantValue\n  - System.Reflection.FieldInfo.GetRequiredCustomModifiers\n  - System.Reflection.FieldInfo.GetValue(System.Object)\n  - System.Reflection.FieldInfo.IsAssembly\n  - System.Reflection.FieldInfo.IsFamily\n  - System.Reflection.FieldInfo.IsFamilyAndAssembly\n  - System.Reflection.FieldInfo.IsFamilyOrAssembly\n  - System.Reflection.FieldInfo.IsInitOnly\n  - System.Reflection.FieldInfo.IsLiteral\n  - System.Reflection.FieldInfo.IsPrivate\n  - System.Reflection.FieldInfo.IsPublic\n  - System.Reflection.FieldInfo.IsSpecialName\n  - System.Reflection.FieldInfo.IsStatic\n  - System.Reflection.FieldInfo.MemberType\n  - System.Reflection.FieldInfo.SetValue(System.Object,System.Object)\n  langs:\n  - csharp\n  - vb\n  name: FieldInfo\n  fullName: System.Reflection.FieldInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FieldInfo\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 25\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Discovers the attributes of a field and provides access to field metadata. </p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_FieldInfo))]\n\n      [PermissionSet(SecurityAction.InheritanceDemand, Name = \"FullTrust\")]\n\n      [ComVisible(true)]\n\n      public abstract class FieldInfo : MemberInfo, ICustomAttributeProvider, _MemberInfo, _FieldInfo\n    content.vb: >-\n      <Serializable>\n\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_FieldInfo))>\n\n      <PermissionSet(SecurityAction.InheritanceDemand, Name:=\"FullTrust\")>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class FieldInfo\n          Inherits MemberInfo\n          Implements ICustomAttributeProvider, _MemberInfo, _FieldInfo\n  seealso:\n  - type: System.Type\n    commentId: T:System.Type\n  see:\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  implements:\n  - System.Reflection.ICustomAttributeProvider\n  inheritedMembers:\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.DeclaringType\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.Module\n  - System.Reflection.MemberInfo.Name\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: FieldInfo\n- uid: System.Reflection.FieldInfo.Attributes\n  commentId: P:System.Reflection.FieldInfo.Attributes\n  id: Attributes\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: Attributes\n  fullName: System.Reflection.FieldInfo.Attributes\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Attributes\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 133\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the attributes associated with this field.</p>\\n\"\n  syntax:\n    content: public abstract FieldAttributes Attributes { get; }\n    content.vb: Public MustOverride ReadOnly Property Attributes As FieldAttributes\n    parameters: []\n    return:\n      type: System.Reflection.FieldAttributes\n      description: \"\\n<p>The <strong>FieldAttributes</strong> for this field.</p>\\n\"\n  seealso:\n  - type: System.Reflection.FieldAttributes\n    commentId: T:System.Reflection.FieldAttributes\n  - type: System.Type\n    commentId: T:System.Type\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: FieldInfo.Attributes\n- uid: System.Reflection.FieldInfo.FieldType\n  commentId: P:System.Reflection.FieldInfo.FieldType\n  id: FieldType\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: FieldType\n  fullName: System.Reflection.FieldInfo.FieldType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FieldType\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 125\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the type of this field object.</p>\\n\"\n  syntax:\n    content: public abstract Type FieldType { get; }\n    content.vb: Public MustOverride ReadOnly Property FieldType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The type of this field object.</p>\\n\"\n  seealso:\n  - type: System.Reflection.FieldAttributes\n    commentId: T:System.Reflection.FieldAttributes\n  - type: System.Type\n    commentId: T:System.Type\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: FieldInfo.FieldType\n- uid: System.Reflection.FieldInfo.IsAssembly\n  commentId: P:System.Reflection.FieldInfo.IsAssembly\n  id: IsAssembly\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: IsAssembly\n  fullName: System.Reflection.FieldInfo.IsAssembly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsAssembly\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 156\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the potential visibility of this field is described by <xref href=\\\"System.Reflection.FieldAttributes.Assembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</p>\\n\"\n  syntax:\n    content: public bool IsAssembly { get; }\n    content.vb: Public ReadOnly Property IsAssembly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the visibility of this field is exactly described by <xref href=\\\"System.Reflection.FieldAttributes.Assembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.FieldAttributes\n    commentId: T:System.Reflection.FieldAttributes\n  - type: System.Reflection.FieldInfo.IsFamily\n    commentId: P:System.Reflection.FieldInfo.IsFamily\n  - type: System.Reflection.FieldInfo.IsFamilyOrAssembly\n    commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly\n  - type: System.Reflection.FieldInfo.IsFamilyAndAssembly\n    commentId: P:System.Reflection.FieldInfo.IsFamilyAndAssembly\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FieldInfo.IsAssembly\n- uid: System.Reflection.FieldInfo.IsFamily\n  commentId: P:System.Reflection.FieldInfo.IsFamily\n  id: IsFamily\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: IsFamily\n  fullName: System.Reflection.FieldInfo.IsFamily\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFamily\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 154\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the visibility of this field is described by <xref href=\\\"System.Reflection.FieldAttributes.Family\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; that is, the field is visible only within its class and derived classes.</p>\\n\"\n  syntax:\n    content: public bool IsFamily { get; }\n    content.vb: Public ReadOnly Property IsFamily As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to this field is exactly described by <xref href=\\\"System.Reflection.FieldAttributes.Family\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.FieldAttributes\n    commentId: T:System.Reflection.FieldAttributes\n  - type: System.Type\n    commentId: T:System.Type\n  - type: System.Reflection.FieldInfo.IsAssembly\n    commentId: P:System.Reflection.FieldInfo.IsAssembly\n  - type: System.Reflection.FieldInfo.IsFamilyOrAssembly\n    commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly\n  - type: System.Reflection.FieldInfo.IsFamilyAndAssembly\n    commentId: P:System.Reflection.FieldInfo.IsFamilyAndAssembly\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FieldInfo.IsFamily\n- uid: System.Reflection.FieldInfo.IsFamilyAndAssembly\n  commentId: P:System.Reflection.FieldInfo.IsFamilyAndAssembly\n  id: IsFamilyAndAssembly\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: IsFamilyAndAssembly\n  fullName: System.Reflection.FieldInfo.IsFamilyAndAssembly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFamilyAndAssembly\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 158\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the visibility of this field is described by <xref href=\\\"System.Reflection.FieldAttributes.FamANDAssem\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</p>\\n\"\n  syntax:\n    content: public bool IsFamilyAndAssembly { get; }\n    content.vb: Public ReadOnly Property IsFamilyAndAssembly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to this field is exactly described by <xref href=\\\"System.Reflection.FieldAttributes.FamANDAssem\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.FieldInfo.IsFamilyOrAssembly\n    commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly\n  - type: System.Reflection.FieldAttributes\n    commentId: T:System.Reflection.FieldAttributes\n  - type: System.Reflection.FieldInfo.IsAssembly\n    commentId: P:System.Reflection.FieldInfo.IsAssembly\n  - type: System.Reflection.FieldInfo.IsFamily\n    commentId: P:System.Reflection.FieldInfo.IsFamily\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FieldInfo.IsFamilyAndAssembly\n- uid: System.Reflection.FieldInfo.IsFamilyOrAssembly\n  commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly\n  id: IsFamilyOrAssembly\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: IsFamilyOrAssembly\n  fullName: System.Reflection.FieldInfo.IsFamilyOrAssembly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFamilyOrAssembly\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 160\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the potential visibility of this field is described by <xref href=\\\"System.Reflection.FieldAttributes.FamORAssem\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</p>\\n\"\n  syntax:\n    content: public bool IsFamilyOrAssembly { get; }\n    content.vb: Public ReadOnly Property IsFamilyOrAssembly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to this field is exactly described by <xref href=\\\"System.Reflection.FieldAttributes.FamORAssem\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.FieldAttributes\n    commentId: T:System.Reflection.FieldAttributes\n  - type: System.Reflection.FieldInfo.IsAssembly\n    commentId: P:System.Reflection.FieldInfo.IsAssembly\n  - type: System.Reflection.FieldInfo.IsFamily\n    commentId: P:System.Reflection.FieldInfo.IsFamily\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FieldInfo.IsFamilyOrAssembly\n- uid: System.Reflection.FieldInfo.IsInitOnly\n  commentId: P:System.Reflection.FieldInfo.IsInitOnly\n  id: IsInitOnly\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: IsInitOnly\n  fullName: System.Reflection.FieldInfo.IsInitOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsInitOnly\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 164\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the field can only be set in the body of the constructor.</p>\\n\"\n  syntax:\n    content: public bool IsInitOnly { get; }\n    content.vb: Public ReadOnly Property IsInitOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the field has the <strong>InitOnly</strong> attribute set; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.FieldAttributes\n    commentId: T:System.Reflection.FieldAttributes\n  - type: System.Type.GetField(System.String,System.Reflection.BindingFlags)\n    commentId: M:System.Type.GetField(System.String,System.Reflection.BindingFlags)\n  - type: System.Type\n    commentId: T:System.Type\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FieldInfo.IsInitOnly\n- uid: System.Reflection.FieldInfo.IsLiteral\n  commentId: P:System.Reflection.FieldInfo.IsLiteral\n  id: IsLiteral\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: IsLiteral\n  fullName: System.Reflection.FieldInfo.IsLiteral\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLiteral\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 166\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the value is written at compile time and cannot be changed.</p>\\n\"\n  syntax:\n    content: public bool IsLiteral { get; }\n    content.vb: Public ReadOnly Property IsLiteral As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the field has the <strong>Literal</strong> attribute set; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.FieldAttributes\n    commentId: T:System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FieldInfo.IsLiteral\n- uid: System.Reflection.FieldInfo.IsPrivate\n  commentId: P:System.Reflection.FieldInfo.IsPrivate\n  id: IsPrivate\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: IsPrivate\n  fullName: System.Reflection.FieldInfo.IsPrivate\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPrivate\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 152\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the field is private.</p>\\n\"\n  syntax:\n    content: public bool IsPrivate { get; }\n    content.vb: Public ReadOnly Property IsPrivate As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the field is private; otherwise; <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.BindingFlags\n    commentId: T:System.Reflection.BindingFlags\n  - type: System.Type\n    commentId: T:System.Type\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FieldInfo.IsPrivate\n- uid: System.Reflection.FieldInfo.IsPublic\n  commentId: P:System.Reflection.FieldInfo.IsPublic\n  id: IsPublic\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: IsPublic\n  fullName: System.Reflection.FieldInfo.IsPublic\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPublic\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 150\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the field is public.</p>\\n\"\n  syntax:\n    content: public bool IsPublic { get; }\n    content.vb: Public ReadOnly Property IsPublic As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this field is public; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.FieldAttributes\n    commentId: T:System.Reflection.FieldAttributes\n  - type: System.Reflection.BindingFlags\n    commentId: T:System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FieldInfo.IsPublic\n- uid: System.Reflection.FieldInfo.IsSpecialName\n  commentId: P:System.Reflection.FieldInfo.IsSpecialName\n  id: IsSpecialName\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: IsSpecialName\n  fullName: System.Reflection.FieldInfo.IsSpecialName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSpecialName\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 170\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the corresponding <strong>SpecialName</strong> attribute is set in the <xref href=\\\"System.Reflection.FieldAttributes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumerator.</p>\\n\"\n  syntax:\n    content: public bool IsSpecialName { get; }\n    content.vb: Public ReadOnly Property IsSpecialName As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <strong>SpecialName</strong> attribute is set in <xref href=\\\"System.Reflection.FieldAttributes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.FieldAttributes\n    commentId: T:System.Reflection.FieldAttributes\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FieldInfo.IsSpecialName\n- uid: System.Reflection.FieldInfo.IsStatic\n  commentId: P:System.Reflection.FieldInfo.IsStatic\n  id: IsStatic\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: IsStatic\n  fullName: System.Reflection.FieldInfo.IsStatic\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsStatic\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 162\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the field is static.</p>\\n\"\n  syntax:\n    content: public bool IsStatic { get; }\n    content.vb: Public ReadOnly Property IsStatic As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this field is static; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.FieldAttributes\n    commentId: T:System.Reflection.FieldAttributes\n  - type: System.Type.GetField(System.String,System.Reflection.BindingFlags)\n    commentId: M:System.Type.GetField(System.String,System.Reflection.BindingFlags)\n  - type: System.Type\n    commentId: T:System.Type\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FieldInfo.IsStatic\n- uid: System.Reflection.FieldInfo.Equals(System.Object)\n  commentId: M:System.Reflection.FieldInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Reflection.FieldInfo.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 85\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Reflection.MemberInfo.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: FieldInfo.Equals(Object)\n- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)\n  commentId: M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)\n  id: GetFieldFromHandle(System.RuntimeFieldHandle)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: GetFieldFromHandle(RuntimeFieldHandle)\n  fullName: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFieldFromHandle\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 35\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Reflection.FieldInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the field represented by the specified handle.</p>\\n\"\n  syntax:\n    content: public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle)\n    content.vb: Public Shared Function GetFieldFromHandle(handle As RuntimeFieldHandle) As FieldInfo\n    parameters:\n    - id: handle\n      type: System.RuntimeFieldHandle\n      description: \"\\n<p>A <xref href=\\\"System.RuntimeFieldHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the handle to the internal metadata representation of a field. </p>\\n\"\n    return:\n      type: System.Reflection.FieldInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.FieldInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the field specified by <em>handle</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>handle</em> is invalid.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle)\n- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  commentId: M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  id: GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)\n  fullName: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle, System.RuntimeTypeHandle)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFieldFromHandle\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 51\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Reflection.FieldInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the field represented by the specified handle, for the specified generic type.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Shared Function GetFieldFromHandle(handle As RuntimeFieldHandle, declaringType As RuntimeTypeHandle) As FieldInfo\n    parameters:\n    - id: handle\n      type: System.RuntimeFieldHandle\n      description: \"\\n<p>A <xref href=\\\"System.RuntimeFieldHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the handle to the internal metadata representation of a field.</p>\\n\"\n    - id: declaringType\n      type: System.RuntimeTypeHandle\n      description: \"\\n<p>A <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the handle to the generic type that defines the field.</p>\\n\"\n    return:\n      type: System.Reflection.FieldInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.FieldInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the field specified by <em>handle</em>, in the generic type specified by <em>declaringType</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>handle</em> is invalid.</p>\\n<p>-or-</p>\\n<p>\\n<em>declaringType</em> is not compatible with <em>handle</em>. For example, <em>declaringType</em> is the runtime type handle of the generic type definition, and <em>handle</em> comes from a constructed type. See Remarks.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)\n- uid: System.Reflection.FieldInfo.GetHashCode\n  commentId: M:System.Reflection.FieldInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Reflection.FieldInfo.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 90\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Reflection.MemberInfo.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: FieldInfo.GetHashCode()\n- uid: System.Reflection.FieldInfo.GetOptionalCustomModifiers\n  commentId: M:System.Reflection.FieldInfo.GetOptionalCustomModifiers\n  id: GetOptionalCustomModifiers\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: GetOptionalCustomModifiers()\n  fullName: System.Reflection.FieldInfo.GetOptionalCustomModifiers()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetOptionalCustomModifiers\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 106\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets an array of types that identify the optional custom modifiers of the field.</p>\\n\"\n  syntax:\n    content: public virtual Type[] GetOptionalCustomModifiers()\n    content.vb: Public Overridable Function GetOptionalCustomModifiers As Type()\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that identify the optional custom modifiers of the current field, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: FieldInfo.GetOptionalCustomModifiers()\n- uid: System.Reflection.FieldInfo.GetRawConstantValue\n  commentId: M:System.Reflection.FieldInfo.GetRawConstantValue\n  id: GetRawConstantValue\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: GetRawConstantValue()\n  fullName: System.Reflection.FieldInfo.GetRawConstantValue()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRawConstantValue\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 129\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a literal value associated with the field by a compiler. </p>\\n\"\n  syntax:\n    content: public virtual object GetRawConstantValue()\n    content.vb: Public Overridable Function GetRawConstantValue As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the literal value associated with the field. If the literal value is a class type with an element value of zero, the return value is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The Constant table in unmanaged metadata does not contain a constant value for the current field.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The constant value for the field is not set. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: FieldInfo.GetRawConstantValue()\n- uid: System.Reflection.FieldInfo.GetRequiredCustomModifiers\n  commentId: M:System.Reflection.FieldInfo.GetRequiredCustomModifiers\n  id: GetRequiredCustomModifiers\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: GetRequiredCustomModifiers()\n  fullName: System.Reflection.FieldInfo.GetRequiredCustomModifiers()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRequiredCustomModifiers\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 101\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets an array of types that identify the required custom modifiers of the property.</p>\\n\"\n  syntax:\n    content: public virtual Type[] GetRequiredCustomModifiers()\n    content.vb: Public Overridable Function GetRequiredCustomModifiers As Type()\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that identify the required custom modifiers of the current property, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: FieldInfo.GetRequiredCustomModifiers()\n- uid: System.Reflection.FieldInfo.GetValue(System.Object)\n  commentId: M:System.Reflection.FieldInfo.GetValue(System.Object)\n  id: GetValue(System.Object)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: GetValue(Object)\n  fullName: System.Reflection.FieldInfo.GetValue(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetValue\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 127\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>When overridden in a derived class, returns the value of a field supported by a given object.</p>\\n\"\n  syntax:\n    content: public abstract object GetValue(object obj)\n    content.vb: Public MustOverride Function GetValue(obj As Object) As Object\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object whose field value will be returned. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object containing the value of the field reflected by this instance.</p>\\n\"\n  exceptions:\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead.</p>\\n<p>The field is non-static and <em>obj</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>A field is marked literal, but the field does not have one of the accepted literal types. </p>\\n\"\n  - type: System.FieldAccessException\n    commentId: T:System.FieldAccessException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.MemberAccessException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The caller does not have permission to access this field. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The method is neither declared nor inherited by the class of <em>obj</em>. </p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: FieldInfo.GetValue(Object)\n- uid: System.Reflection.FieldInfo.MemberType\n  commentId: P:System.Reflection.FieldInfo.MemberType\n  id: MemberType\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: MemberType\n  fullName: System.Reflection.FieldInfo.MemberType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MemberType\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 96\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Reflection.MemberTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value indicating that this member is a field.</p>\\n\"\n  syntax:\n    content: public override MemberTypes MemberType { get; }\n    content.vb: Public Overrides ReadOnly Property MemberType As MemberTypes\n    parameters: []\n    return:\n      type: System.Reflection.MemberTypes\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MemberTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value indicating that this member is a field.</p>\\n\"\n  overridden: System.Reflection.MemberInfo.MemberType\n  seealso:\n  - type: System.Reflection.FieldInfo\n    commentId: T:System.Reflection.FieldInfo\n  - type: System.Type\n    commentId: T:System.Type\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: FieldInfo.MemberType\n- uid: System.Reflection.FieldInfo.SetValue(System.Object,System.Object)\n  commentId: M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)\n  id: SetValue(System.Object,System.Object)\n  parent: System.Reflection.FieldInfo\n  langs:\n  - csharp\n  - vb\n  name: SetValue(Object, Object)\n  fullName: System.Reflection.FieldInfo.SetValue(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetValue\n    path: src/mscorlib/src/System/Reflection/FieldInfo.cs\n    startLine: 137\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Sets the value of the field supported by the given object.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerStepThrough]\n\n      [DebuggerHidden]\n\n      public void SetValue(object obj, object value)\n    content.vb: >-\n      <DebuggerStepThrough>\n\n      <DebuggerHidden>\n\n      Public Sub SetValue(obj As Object, value As Object)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object whose field value will be set. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value to assign to the field. </p>\\n\"\n  exceptions:\n  - type: System.FieldAccessException\n    commentId: T:System.FieldAccessException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.MemberAccessException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The caller does not have permission to access this field. </p>\\n\"\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead.</p>\\n<p>The <em>obj</em> parameter is <strong>null</strong> and the field is an instance field. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The field does not exist on the object.</p>\\n<p>-or- </p>\\n<p>The <em>value</em> parameter cannot be converted and stored in the field. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: FieldInfo.SetValue(Object, Object)\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  fullName: System.Reflection.MemberInfo\n  nameWithType: MemberInfo\n  commentId: T:System.Reflection.MemberInfo\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  commentId: T:System.Reflection.ICustomAttributeProvider\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  fullName: System.Reflection.MemberInfo.CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  commentId: P:System.Reflection.MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.DeclaringType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: DeclaringType\n  fullName: System.Reflection.MemberInfo.DeclaringType\n  nameWithType: MemberInfo.DeclaringType\n  commentId: P:System.Reflection.MemberInfo.DeclaringType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  fullName: System.Reflection.MemberInfo.MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  commentId: P:System.Reflection.MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.Module\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Module\n  fullName: System.Reflection.MemberInfo.Module\n  nameWithType: MemberInfo.Module\n  commentId: P:System.Reflection.MemberInfo.Module\n- uid: System.Reflection.MemberInfo.Name\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Name\n  fullName: System.Reflection.MemberInfo.Name\n  nameWithType: MemberInfo.Name\n  commentId: P:System.Reflection.MemberInfo.Name\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n    name: ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n    name: ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n    name: ICustomAttributeProvider.IsDefined\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.IsDefined\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.FieldAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: FieldAttributes\n  fullName: System.Reflection.FieldAttributes\n  nameWithType: FieldAttributes\n  commentId: T:System.Reflection.FieldAttributes\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Reflection.MemberInfo.Equals(System.Object)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Reflection.MemberInfo.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.Equals(System.Object)\n    name: Equals\n    fullName: System.Reflection.MemberInfo.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.Equals(System.Object)\n    name: Equals\n    fullName: System.Reflection.MemberInfo.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.Equals(Object)\n  commentId: M:System.Reflection.MemberInfo.Equals(System.Object)\n- uid: System.RuntimeFieldHandle\n  parent: System\n  isExternal: false\n  name: RuntimeFieldHandle\n  fullName: System.RuntimeFieldHandle\n  nameWithType: RuntimeFieldHandle\n  commentId: T:System.RuntimeFieldHandle\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  fullName: System.Reflection.FieldInfo\n  nameWithType: FieldInfo\n  commentId: T:System.Reflection.FieldInfo\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  commentId: T:System.RuntimeTypeHandle\n- uid: System.Reflection.MemberInfo.GetHashCode\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Reflection.MemberInfo.GetHashCode()\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.GetHashCode\n    name: GetHashCode\n    fullName: System.Reflection.MemberInfo.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.GetHashCode\n    name: GetHashCode\n    fullName: System.Reflection.MemberInfo.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.GetHashCode()\n  commentId: M:System.Reflection.MemberInfo.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Reflection.MemberInfo.MemberType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MemberType\n  fullName: System.Reflection.MemberInfo.MemberType\n  nameWithType: MemberInfo.MemberType\n  commentId: P:System.Reflection.MemberInfo.MemberType\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  fullName: System.Reflection.MemberTypes\n  nameWithType: MemberTypes\n  commentId: T:System.Reflection.MemberTypes\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.Reflection.TargetException\n  isExternal: false\n  name: TargetException\n  fullName: System.Reflection.TargetException\n  nameWithType: TargetException\n  commentId: T:System.Reflection.TargetException\n- uid: System.FieldAccessException\n  isExternal: false\n  name: FieldAccessException\n  fullName: System.FieldAccessException\n  nameWithType: FieldAccessException\n  commentId: T:System.FieldAccessException\n"}