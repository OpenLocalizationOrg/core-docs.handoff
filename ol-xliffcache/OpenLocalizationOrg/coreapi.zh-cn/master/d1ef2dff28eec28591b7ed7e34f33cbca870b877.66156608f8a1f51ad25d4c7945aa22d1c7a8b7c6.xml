{"nodes":[{"pos":[4524,4537],"content":"SqlDataReader","needQuote":true,"nodes":[{"content":"SqlDataReader","pos":[0,13]}]},{"pos":[5722,5732],"content":"Connection","needQuote":true,"nodes":[{"content":"Connection","pos":[0,10]}]},{"pos":[7212,7217],"content":"Depth","needQuote":true,"nodes":[{"content":"Depth","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The depth of nesting for the current row.&lt;/p&gt;\\n","pos":[7945,7997],"source":"\\n<p>The depth of nesting for the current row.</p>\\n"},{"pos":[8355,8365],"content":"FieldCount","needQuote":true,"nodes":[{"content":"FieldCount","pos":[0,10]}]},{"content":"\\n&lt;p&gt;When not positioned in a valid recordset, 0; otherwise the number of columns in the current row.","pos":[9090,9191],"source":"\\n<p>When not positioned in a valid recordset, 0; otherwise the number of columns in the current row."},{"content":"The default is -1.&lt;/p&gt;\\n","pos":[9192,9216],"source":" The default is -1.</p>\\n"},{"content":"\\n&lt;p&gt;There is no current connection to an instance of SQL Server.","pos":[9335,9400],"source":"\\n<p>There is no current connection to an instance of SQL Server."},{"content":"&lt;/p&gt;\\n","pos":[9401,9407],"source":" </p>\\n"},{"pos":[9761,9768],"content":"HasRows","needQuote":true,"nodes":[{"content":"HasRows","pos":[0,7]}]},{"pos":[11152,11160],"content":"IsClosed","needQuote":true,"nodes":[{"content":"IsClosed","pos":[0,8]}]},{"pos":[12606,12617],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[13393,13428],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[13429,13435],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column in its native format.&lt;/p&gt;\\n","pos":[13495,13561],"source":"\\n<p>The value of the specified column in its native format.</p>\\n"},{"pos":[14374,14386],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The column name.","pos":[15172,15193],"source":"\\n<p>The column name."},{"content":"&lt;/p&gt;\\n","pos":[15194,15200],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column in its native format.&lt;/p&gt;\\n","pos":[15260,15326],"source":"\\n<p>The value of the specified column in its native format.</p>\\n"},{"content":"\\n&lt;p&gt;No column with the specified name was found.","pos":[15451,15500],"source":"\\n<p>No column with the specified name was found."},{"content":"&lt;/p&gt;\\n","pos":[15501,15507],"source":" </p>\\n"},{"pos":[16028,16043],"content":"RecordsAffected","needQuote":true,"nodes":[{"content":"RecordsAffected","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.&lt;/p&gt;\\n","pos":[16839,16981],"source":"\\n<p>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</p>\\n"},{"pos":[17370,17387],"content":"VisibleFieldCount","needQuote":true,"nodes":[{"content":"VisibleFieldCount","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The number of fields that are not hidden.&lt;/p&gt;\\n","pos":[18244,18296],"source":"\\n<p>The number of fields that are not hidden.</p>\\n"},{"pos":[18708,18725],"content":"GetBoolean(Int32)","needQuote":true,"nodes":[{"content":"GetBoolean(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[19470,19505],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[19506,19512],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the column.&lt;/p&gt;\\n","pos":[19573,19608],"source":"\\n<p>The value of the column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[19725,19762],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[19763,19769],"source":" </p>\\n"},{"pos":[20151,20165],"content":"GetByte(Int32)","needQuote":true,"nodes":[{"content":"GetByte(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[20892,20927],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[20928,20934],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column as a byte.&lt;/p&gt;\\n","pos":[20992,21047],"source":"\\n<p>The value of the specified column as a byte.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[21164,21201],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[21202,21208],"source":" </p>\\n"},{"pos":[21749,21793],"content":"GetBytes(Int32, Int64, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Int32, Int64, Byte[], Int32, Int32)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[22790,22825],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[22826,22832],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index within the field from which to begin the read operation.&lt;/p&gt;\\n","pos":[22899,22976],"source":"\\n<p>The index within the field from which to begin the read operation.</p>\\n"},{"content":"\\n&lt;p&gt;The buffer into which to read the stream of bytes.","pos":[23041,23096],"source":"\\n<p>The buffer into which to read the stream of bytes."},{"content":"&lt;/p&gt;\\n","pos":[23097,23103],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index within the &lt;em&gt;buffer&lt;/em&gt; where the write operation is to start.","pos":[23172,23252],"source":"\\n<p>The index within the <em>buffer</em> where the write operation is to start."},{"content":"&lt;/p&gt;\\n","pos":[23253,23259],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum length to copy into the buffer.","pos":[23323,23371],"source":"\\n<p>The maximum length to copy into the buffer."},{"content":"&lt;/p&gt;\\n","pos":[23372,23378],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes read.&lt;/p&gt;\\n","pos":[23437,23480],"source":"\\n<p>The actual number of bytes read.</p>\\n"},{"pos":[24154,24168],"content":"GetChar(Int32)","needQuote":true,"nodes":[{"content":"GetChar(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[24907,24942],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[24943,24949],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[25007,25052],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[25169,25206],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[25207,25213],"source":" </p>\\n"},{"pos":[25754,25798],"content":"GetChars(Int32, Int64, Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Int32, Int64, Char[], Int32, Int32)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[26803,26838],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[26839,26845],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index within the field from which to begin the read operation.&lt;/p&gt;\\n","pos":[26912,26989],"source":"\\n<p>The index within the field from which to begin the read operation.</p>\\n"},{"content":"\\n&lt;p&gt;The buffer into which to read the stream of bytes.","pos":[27054,27109],"source":"\\n<p>The buffer into which to read the stream of bytes."},{"content":"&lt;/p&gt;\\n","pos":[27110,27116],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index within the &lt;em&gt;buffer&lt;/em&gt; where the write operation is to start.","pos":[27185,27265],"source":"\\n<p>The index within the <em>buffer</em> where the write operation is to start."},{"content":"&lt;/p&gt;\\n","pos":[27266,27272],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum length to copy into the buffer.","pos":[27336,27384],"source":"\\n<p>The maximum length to copy into the buffer."},{"content":"&lt;/p&gt;\\n","pos":[27385,27391],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters read.&lt;/p&gt;\\n","pos":[27450,27498],"source":"\\n<p>The actual number of characters read.</p>\\n"},{"pos":[28196,28218],"content":"GetDataTypeName(Int32)","needQuote":true,"nodes":[{"content":"GetDataTypeName(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The zero-based ordinal position of the column to find.&lt;/p&gt;\\n","pos":[28996,29061],"source":"\\n<p>The zero-based ordinal position of the column to find.</p>\\n"},{"content":"\\n&lt;p&gt;The string representing the data type of the specified column.&lt;/p&gt;\\n","pos":[29121,29194],"source":"\\n<p>The string representing the data type of the specified column.</p>\\n"},{"pos":[29593,29611],"content":"GetDateTime(Int32)","needQuote":true,"nodes":[{"content":"GetDateTime(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[30436,30471],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[30472,30478],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[30540,30585],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[30702,30739],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[30740,30746],"source":" </p>\\n"},{"pos":[31159,31183],"content":"GetDateTimeOffset(Int32)","needQuote":true,"nodes":[{"content":"GetDateTimeOffset(Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[32060,32095],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[32096,32102],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[32170,32215],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[32332,32369],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[32370,32376],"source":" </p>\\n"},{"pos":[32775,32792],"content":"GetDecimal(Int32)","needQuote":true,"nodes":[{"content":"GetDecimal(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[33614,33649],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[33650,33656],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[33717,33762],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[33879,33916],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[33917,33923],"source":" </p>\\n"},{"pos":[34311,34327],"content":"GetDouble(Int32)","needQuote":true,"nodes":[{"content":"GetDouble(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[35100,35135],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[35136,35142],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[35202,35247],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[35364,35401],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[35402,35408],"source":" </p>\\n"},{"pos":[35765,35780],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[37294,37313],"content":"GetFieldType(Int32)","needQuote":true,"nodes":[{"content":"GetFieldType(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[38127,38162],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[38163,38169],"source":" </p>\\n"},{"pos":[38916,38939],"content":"GetFieldValue<T>(Int32)","needQuote":true,"nodes":[{"content":"GetFieldValue&lt;T&gt;(Int32)","pos":[0,23],"source":"GetFieldValue<T>(Int32)"}]},{"content":"\\n&lt;p&gt;The column to be retrieved.&lt;/p&gt;\\n","pos":[39921,39959],"source":"\\n<p>The column to be retrieved.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value to be returned.","pos":[40013,40055],"source":"\\n<p>The type of the value to be returned."},{"content":"See the remarks section for more information.&lt;/p&gt;\\n","pos":[40056,40107],"source":" See the remarks section for more information.</p>\\n"},{"content":"\\n&lt;p&gt;The returned type object.&lt;/p&gt;\\n","pos":[40159,40195],"source":"\\n<p>The returned type object.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[41094,41149],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;T&lt;/em&gt; doesn’t match the type returned by SQL Server or cannot be cast.&lt;/p&gt;\\n","pos":[41602,41690],"source":"\\n<p>\\n<em>T</em> doesn’t match the type returned by SQL Server or cannot be cast.</p>\\n"},{"pos":[42408,42455],"content":"GetFieldValueAsync<T>(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"GetFieldValueAsync&lt;T&gt;(Int32, CancellationToken)","pos":[0,47],"source":"GetFieldValueAsync<T>(Int32, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The column to be retrieved.&lt;/p&gt;\\n","pos":[43545,43583],"source":"\\n<p>The column to be retrieved.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value to be returned.","pos":[44136,44178],"source":"\\n<p>The type of the value to be returned."},{"content":"See the remarks section for more information.&lt;/p&gt;\\n","pos":[44179,44230],"source":" See the remarks section for more information.</p>\\n"},{"content":"\\n&lt;p&gt;The returned type object.&lt;/p&gt;\\n","pos":[44309,44345],"source":"\\n<p>The returned type object.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[45334,45389],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;T&lt;/em&gt; doesn’t match the type returned by SQL Server or cannot be cast.&lt;/p&gt;\\n","pos":[45842,45930],"source":"\\n<p>\\n<em>T</em> doesn’t match the type returned by SQL Server or cannot be cast.</p>\\n"},{"pos":[46617,46632],"content":"GetFloat(Int32)","needQuote":true,"nodes":[{"content":"GetFloat(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[47400,47435],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[47436,47442],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[47502,47547],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[47664,47701],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[47702,47708],"source":" </p>\\n"},{"pos":[48088,48102],"content":"GetGuid(Int32)","needQuote":true,"nodes":[{"content":"GetGuid(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[48858,48893],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[48894,48900],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[48958,49003],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[49120,49157],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[49158,49164],"source":" </p>\\n"},{"pos":[49546,49561],"content":"GetInt16(Int32)","needQuote":true,"nodes":[{"content":"GetInt16(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[50311,50346],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[50347,50353],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[50412,50457],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[50574,50611],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[50612,50618],"source":" </p>\\n"},{"pos":[51001,51016],"content":"GetInt32(Int32)","needQuote":true,"nodes":[{"content":"GetInt32(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[51766,51801],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[51802,51808],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[51867,51912],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[52029,52066],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[52067,52073],"source":" </p>\\n"},{"pos":[52456,52471],"content":"GetInt64(Int32)","needQuote":true,"nodes":[{"content":"GetInt64(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[53219,53254],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[53255,53261],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[53320,53365],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[53482,53519],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[53520,53526],"source":" </p>\\n"},{"pos":[53906,53920],"content":"GetName(Int32)","needQuote":true,"nodes":[{"content":"GetName(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[54639,54674],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[54675,54681],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The name of the specified column.&lt;/p&gt;\\n","pos":[54741,54785],"source":"\\n<p>The name of the specified column.</p>\\n"},{"pos":[55176,55194],"content":"GetOrdinal(String)","needQuote":true,"nodes":[{"content":"GetOrdinal(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The name of the column.","pos":[55953,55981],"source":"\\n<p>The name of the column."},{"content":"&lt;/p&gt;\\n","pos":[55982,55988],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[56047,56088],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The name specified is not a valid column name.","pos":[56213,56264],"source":"\\n<p>The name specified is not a valid column name."},{"content":"&lt;/p&gt;\\n","pos":[56265,56271],"source":" </p>\\n"},{"pos":[56717,56752],"content":"GetProviderSpecificFieldType(Int32)","needQuote":true,"nodes":[{"content":"GetProviderSpecificFieldType(Int32)","pos":[0,35]}]},{"pos":[58411,58442],"content":"GetProviderSpecificValue(Int32)","needQuote":true,"nodes":[{"content":"GetProviderSpecificValue(Int32)","pos":[0,31]}]},{"pos":[60085,60120],"content":"GetProviderSpecificValues(Object[])","needQuote":true,"nodes":[{"content":"GetProviderSpecificValues(Object[])","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The array of objects that are a representation of the underlying provider specific values.&lt;/p&gt;\\n","pos":[61186,61287],"source":"\\n<p>The array of objects that are a representation of the underlying provider specific values.</p>\\n"},{"pos":[61912,61931],"content":"GetSqlBinary(Int32)","needQuote":true,"nodes":[{"content":"GetSqlBinary(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[62775,62810],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[62811,62817],"source":" </p>\\n"},{"pos":[63438,63458],"content":"GetSqlBoolean(Int32)","needQuote":true,"nodes":[{"content":"GetSqlBoolean(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[64309,64344],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[64345,64351],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the column.&lt;/p&gt;\\n","pos":[64429,64464],"source":"\\n<p>The value of the column.</p>\\n"},{"pos":[64859,64876],"content":"GetSqlByte(Int32)","needQuote":true,"nodes":[{"content":"GetSqlByte(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[65706,65741],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[65742,65748],"source":" </p>\\n"},{"pos":[66358,66376],"content":"GetSqlBytes(Int32)","needQuote":true,"nodes":[{"content":"GetSqlBytes(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[67211,67246],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[67247,67253],"source":" </p>\\n"},{"pos":[67865,67883],"content":"GetSqlChars(Int32)","needQuote":true,"nodes":[{"content":"GetSqlChars(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[68718,68753],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[68754,68760],"source":" </p>\\n"},{"pos":[69382,69403],"content":"GetSqlDateTime(Int32)","needQuote":true,"nodes":[{"content":"GetSqlDateTime(Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[70261,70296],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[70297,70303],"source":" </p>\\n"},{"pos":[70931,70951],"content":"GetSqlDecimal(Int32)","needQuote":true,"nodes":[{"content":"GetSqlDecimal(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[71802,71837],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[71838,71844],"source":" </p>\\n"},{"pos":[72465,72484],"content":"GetSqlDouble(Int32)","needQuote":true,"nodes":[{"content":"GetSqlDouble(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[73328,73363],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[73364,73370],"source":" </p>\\n"},{"pos":[73983,74000],"content":"GetSqlGuid(Int32)","needQuote":true,"nodes":[{"content":"GetSqlGuid(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[74830,74865],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[74866,74872],"source":" </p>\\n"},{"pos":[75482,75500],"content":"GetSqlInt16(Int32)","needQuote":true,"nodes":[{"content":"GetSqlInt16(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[76337,76372],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[76373,76379],"source":" </p>\\n"},{"pos":[76991,77009],"content":"GetSqlInt32(Int32)","needQuote":true,"nodes":[{"content":"GetSqlInt32(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[77846,77881],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[77882,77888],"source":" </p>\\n"},{"pos":[78500,78518],"content":"GetSqlInt64(Int32)","needQuote":true,"nodes":[{"content":"GetSqlInt64(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[79355,79390],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[79391,79397],"source":" </p>\\n"},{"pos":[80009,80027],"content":"GetSqlMoney(Int32)","needQuote":true,"nodes":[{"content":"GetSqlMoney(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[80864,80899],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[80900,80906],"source":" </p>\\n"},{"pos":[81521,81540],"content":"GetSqlSingle(Int32)","needQuote":true,"nodes":[{"content":"GetSqlSingle(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[82384,82419],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[82420,82426],"source":" </p>\\n"},{"pos":[83044,83063],"content":"GetSqlString(Int32)","needQuote":true,"nodes":[{"content":"GetSqlString(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[83907,83942],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[83943,83949],"source":" </p>\\n"},{"pos":[84564,84582],"content":"GetSqlValue(Int32)","needQuote":true,"nodes":[{"content":"GetSqlValue(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[85350,85385],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[85386,85392],"source":" </p>\\n"},{"pos":[85992,86014],"content":"GetSqlValues(Object[])","needQuote":true,"nodes":[{"content":"GetSqlValues(Object[])","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An integer indicating the number of columns copied.&lt;/p&gt;\\n","pos":[87163,87225],"source":"\\n<p>An integer indicating the number of columns copied.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;values&lt;/em&gt; is null.","pos":[87344,87375],"source":"\\n<p>\\n<em>values</em> is null."},{"content":"&lt;/p&gt;\\n","pos":[87376,87382],"source":" </p>\\n"},{"pos":[87947,87963],"content":"GetSqlXml(Int32)","needQuote":true,"nodes":[{"content":"GetSqlXml(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[88709,88750],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"pos":[90202,90218],"content":"GetStream(Int32)","needQuote":true,"nodes":[{"content":"GetStream(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[91054,91095],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;A stream object.&lt;/p&gt;\\n","pos":[91158,91185],"source":"\\n<p>A stream object.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[92084,92139],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;The returned type was not one of the types below:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;binary&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;image&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;varbinary&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;udt&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[92242,92416],"source":"\\n<p>The returned type was not one of the types below:</p>\\n<ul><li>\\n<p>binary</p>\\n</li><li>\\n<p>image</p>\\n</li><li>\\n<p>varbinary</p>\\n</li><li>\\n<p>udt</p>\\n</li></ul>\\n"},{"pos":[92803,92819],"content":"GetString(Int32)","needQuote":true,"nodes":[{"content":"GetString(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[93560,93595],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[93596,93602],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[93662,93707],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[93824,93861],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[93862,93868],"source":" </p>\\n"},{"pos":[94267,94287],"content":"GetTextReader(Int32)","needQuote":true,"nodes":[{"content":"GetTextReader(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The column to be retrieved.&lt;/p&gt;\\n","pos":[95165,95203],"source":"\\n<p>The column to be retrieved.</p>\\n"},{"content":"\\n&lt;p&gt;The returned object.&lt;/p&gt;\\n","pos":[95270,95301],"source":"\\n<p>The returned object.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[96200,96255],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;The returned type was not one of the types below:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;char&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;nchar&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;ntext&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;nvarchar&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;text&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;varchar&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[96358,96582],"source":"\\n<p>The returned type was not one of the types below:</p>\\n<ul><li>\\n<p>char</p>\\n</li><li>\\n<p>nchar</p>\\n</li><li>\\n<p>ntext</p>\\n</li><li>\\n<p>nvarchar</p>\\n</li><li>\\n<p>text</p>\\n</li><li>\\n<p>varchar</p>\\n</li></ul>\\n"},{"pos":[96979,96997],"content":"GetTimeSpan(Int32)","needQuote":true,"nodes":[{"content":"GetTimeSpan(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[97832,97867],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[97868,97874],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[97936,97981],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The specified cast is not valid.","pos":[98098,98135],"source":"\\n<p>The specified cast is not valid."},{"content":"&lt;/p&gt;\\n","pos":[98136,98142],"source":" </p>\\n"},{"pos":[98529,98544],"content":"GetValue(Int32)","needQuote":true,"nodes":[{"content":"GetValue(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[99290,99325],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[99326,99332],"source":" </p>\\n"},{"pos":[99918,99937],"content":"GetValues(Object[])","needQuote":true,"nodes":[{"content":"GetValues(Object[])","pos":[0,19]}]},{"pos":[101608,101627],"content":"GetXmlReader(Int32)","needQuote":true,"nodes":[{"content":"GetXmlReader(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[102450,102495],"source":"\\n<p>The value of the specified column.</p>\\n"},{"content":"\\n&lt;p&gt;The returned object.&lt;/p&gt;\\n","pos":[102551,102582],"source":"\\n<p>The returned object.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[103482,103537],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;The returned type was not xml.&lt;/p&gt;\\n","pos":[103640,103681],"source":"\\n<p>The returned type was not xml.</p>\\n"},{"pos":[104069,104084],"content":"IsDBNull(Int32)","needQuote":true,"nodes":[{"content":"IsDBNull(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[104856,104891],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[104892,104898],"source":" </p>\\n"},{"pos":[105652,105691],"content":"IsDBNullAsync(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"IsDBNullAsync(Int32, CancellationToken)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The zero-based column to be retrieved.&lt;/p&gt;\\n","pos":[106944,106993],"source":"\\n<p>The zero-based column to be retrieved.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified column value is equivalent to &lt;strong&gt;DBNull&lt;/strong&gt; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[107582,107721],"source":"\\n<p>\\n<strong>true</strong> if the specified column value is equivalent to <strong>DBNull</strong> otherwise <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Trying to read a column that does not exist.&lt;/p&gt;\\n","pos":[108711,108766],"source":"\\n<p>Trying to read a column that does not exist.</p>\\n"},{"pos":[109137,109149],"content":"NextResult()","needQuote":true,"nodes":[{"content":"NextResult()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if there are more result sets; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[109900,109999],"source":"\\n<p>\\n<strong>true</strong> if there are more result sets; otherwise <strong>false</strong>.</p>\\n"},{"pos":[110466,110500],"content":"NextResultAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"NextResultAsync(CancellationToken)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The cancellation instruction.&lt;/p&gt;\\n","pos":[111769,111809],"source":"\\n<p>The cancellation instruction.</p>\\n"},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[111899,111957],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;SQL Server returned an error while executing the command text.&lt;/p&gt;\\n","pos":[112518,112591],"source":"\\n<p>SQL Server returned an error while executing the command text.</p>\\n"},{"pos":[112939,112945],"content":"Read()","needQuote":true,"nodes":[{"content":"Read()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if there are more rows; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[113697,113789],"source":"\\n<p>\\n<strong>true</strong> if there are more rows; otherwise <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;SQL Server returned an error while executing the command text.&lt;/p&gt;\\n","pos":[113920,113993],"source":"\\n<p>SQL Server returned an error while executing the command text.</p>\\n"},{"pos":[114436,114464],"content":"ReadAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"ReadAsync(CancellationToken)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The cancellation instruction.&lt;/p&gt;\\n","pos":[115727,115767],"source":"\\n<p>The cancellation instruction.</p>\\n"},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[115857,115915],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;SQL Server returned an error while executing the command text.&lt;/p&gt;\\n","pos":[116470,116543],"source":"\\n<p>SQL Server returned an error while executing the command text.</p>\\n"},{"pos":[116758,116779],"content":"System.Data.SqlClient","needQuote":true,"nodes":[{"content":"System.Data.SqlClient","pos":[0,21]}]},{"pos":[116955,116961],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[117111,117122],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[117258,117264],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[117432,117445],"content":"SqlConnection","needQuote":true,"nodes":[{"content":"SqlConnection","pos":[0,13]}]},{"pos":[117640,117645],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[117788,117795],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[117943,117949],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[118092,118096],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[118234,118239],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[118344,118350],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[118470,118474],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[118533,118535]},{"pos":[118598,118602],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[118660,118662],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[118793,118797],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[118899,118905],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[119025,119029],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[119088,119090]},{"pos":[119153,119157],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[119215,119217],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[119352,119360],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[119519,119533],"content":"DateTimeOffset","needQuote":true,"nodes":[{"content":"DateTimeOffset","pos":[0,14]}]},{"pos":[119703,119710],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[119858,119864],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[120038,120049],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[120221,120239],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[120404,120408],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[120518,120519],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[120608,120609],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[120739,120756],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[121013,121020],"content":"Task<T>","needQuote":true,"nodes":[{"content":"Task&lt;T&gt;","pos":[0,7],"source":"Task<T>"}]},{"pos":[121199,121203],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[121277,121278],"content":"<","needQuote":true,"nodes":[]},{"pos":[121305,121306],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[121415,121419],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[121494,121497]},{"pos":[121531,121532],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[121559,121560],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121731,121747],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[121907,121920],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[122117,122121],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[122174,122175],"content":"<","needQuote":true,"nodes":[]},{"pos":[122202,122209],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[122324,122328],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[122382,122385]},{"pos":[122419,122426],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[122459,122460],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122646,122668],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[122847,122853],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[122996,123000],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[123138,123143],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[123250,123258],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[123386,123392],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[123453,123455]},{"pos":[123520,123526],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[123586,123588],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[123756,123765],"content":"SqlBinary","needQuote":true,"nodes":[{"content":"SqlBinary","pos":[0,9]}]},{"pos":[123937,123957],"content":"System.Data.SqlTypes","needQuote":true,"nodes":[{"content":"System.Data.SqlTypes","pos":[0,20]}]},{"pos":[124162,124172],"content":"SqlBoolean","needQuote":true,"nodes":[{"content":"SqlBoolean","pos":[0,10]}]},{"pos":[124386,124393],"content":"SqlByte","needQuote":true,"nodes":[{"content":"SqlByte","pos":[0,7]}]},{"pos":[124599,124607],"content":"SqlBytes","needQuote":true,"nodes":[{"content":"SqlBytes","pos":[0,8]}]},{"pos":[124816,124824],"content":"SqlChars","needQuote":true,"nodes":[{"content":"SqlChars","pos":[0,8]}]},{"pos":[125036,125047],"content":"SqlDateTime","needQuote":true,"nodes":[{"content":"SqlDateTime","pos":[0,11]}]},{"pos":[125267,125277],"content":"SqlDecimal","needQuote":true,"nodes":[{"content":"SqlDecimal","pos":[0,10]}]},{"pos":[125493,125502],"content":"SqlDouble","needQuote":true,"nodes":[{"content":"SqlDouble","pos":[0,9]}]},{"pos":[125713,125720],"content":"SqlGuid","needQuote":true,"nodes":[{"content":"SqlGuid","pos":[0,7]}]},{"pos":[125926,125934],"content":"SqlInt16","needQuote":true,"nodes":[{"content":"SqlInt16","pos":[0,8]}]},{"pos":[126143,126151],"content":"SqlInt32","needQuote":true,"nodes":[{"content":"SqlInt32","pos":[0,8]}]},{"pos":[126360,126368],"content":"SqlInt64","needQuote":true,"nodes":[{"content":"SqlInt64","pos":[0,8]}]},{"pos":[126577,126585],"content":"SqlMoney","needQuote":true,"nodes":[{"content":"SqlMoney","pos":[0,8]}]},{"pos":[126795,126804],"content":"SqlSingle","needQuote":true,"nodes":[{"content":"SqlSingle","pos":[0,9]}]},{"pos":[127017,127026],"content":"SqlString","needQuote":true,"nodes":[{"content":"SqlString","pos":[0,9]}]},{"pos":[127236,127242],"content":"SqlXml","needQuote":true,"nodes":[{"content":"SqlXml","pos":[0,6]}]},{"pos":[127421,127427],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[127557,127566],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[127716,127726],"content":"TextReader","needQuote":true,"nodes":[{"content":"TextReader","pos":[0,10]}]},{"pos":[127891,127899],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[128061,128070],"content":"XmlReader","needQuote":true,"nodes":[{"content":"XmlReader","pos":[0,9]}]},{"pos":[128212,128222],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[128435,128448],"content":"Task<Boolean>","needQuote":true,"nodes":[{"content":"Task&lt;Boolean&gt;","pos":[0,13],"source":"Task<Boolean>"}]},{"pos":[128659,128663],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[128737,128738],"content":"<","needQuote":true,"nodes":[]},{"pos":[128789,128796],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[128939,128943],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[129018,129021]},{"pos":[129079,129086],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[129147,129148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129371,129392],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[129583,129607],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]},{"pos":[129803,129823],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[130029,130054],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[130268,130289],"content":"SqlNullValueException","needQuote":true,"nodes":[{"content":"SqlNullValueException","pos":[0,21]}]},{"pos":[130505,130526],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[130720,130747],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[130959,130971],"content":"SqlException","needQuote":true,"nodes":[{"content":"SqlException","pos":[0,12]}]}],"content":"items:\n- uid: System.Data.SqlClient.SqlDataReader\n  commentId: T:System.Data.SqlClient.SqlDataReader\n  id: SqlDataReader\n  parent: System.Data.SqlClient\n  children:\n  - System.Data.SqlClient.SqlDataReader.Connection\n  - System.Data.SqlClient.SqlDataReader.Depth\n  - System.Data.SqlClient.SqlDataReader.FieldCount\n  - System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetEnumerator\n  - System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)\n  - System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetName(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)\n  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])\n  - System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])\n  - System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetString(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])\n  - System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.HasRows\n  - System.Data.SqlClient.SqlDataReader.IsClosed\n  - System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)\n  - System.Data.SqlClient.SqlDataReader.Item(System.Int32)\n  - System.Data.SqlClient.SqlDataReader.Item(System.String)\n  - System.Data.SqlClient.SqlDataReader.NextResult\n  - System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)\n  - System.Data.SqlClient.SqlDataReader.Read\n  - System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)\n  - System.Data.SqlClient.SqlDataReader.RecordsAffected\n  - System.Data.SqlClient.SqlDataReader.VisibleFieldCount\n  langs:\n  - csharp\n  - vb\n  name: SqlDataReader\n  fullName: System.Data.SqlClient.SqlDataReader\n  type: Class\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SqlDataReader\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 25\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Provides a way of reading a forward-only stream of rows from a SQL Server database. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: 'public class SqlDataReader : DbDataReader, IDbColumnSchemaGenerator'\n    content.vb: >-\n      Public Class SqlDataReader\n          Inherits DbDataReader\n          Implements IDbColumnSchemaGenerator\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: SqlDataReader\n- uid: System.Data.SqlClient.SqlDataReader.Connection\n  commentId: P:System.Data.SqlClient.SqlDataReader.Connection\n  id: Connection\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: Connection\n  fullName: System.Data.SqlClient.SqlDataReader.Connection\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Connection\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 137\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected SqlConnection Connection { get; }\n    content.vb: Protected ReadOnly Property Connection As SqlConnection\n    parameters: []\n    return:\n      type: System.Data.SqlClient.SqlConnection\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  modifiers.vb:\n  - Protected\n  - ReadOnly\n  nameWithType: SqlDataReader.Connection\n- uid: System.Data.SqlClient.SqlDataReader.Depth\n  commentId: P:System.Data.SqlClient.SqlDataReader.Depth\n  id: Depth\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: Depth\n  fullName: System.Data.SqlClient.SqlDataReader.Depth\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Depth\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 145\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets a value that indicates the depth of nesting for the current row.</p>\\n\"\n  syntax:\n    content: public override int Depth { get; }\n    content.vb: Public Overrides ReadOnly Property Depth As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The depth of nesting for the current row.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlDataReader.Depth\n- uid: System.Data.SqlClient.SqlDataReader.FieldCount\n  commentId: P:System.Data.SqlClient.SqlDataReader.FieldCount\n  id: FieldCount\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: FieldCount\n  fullName: System.Data.SqlClient.SqlDataReader.FieldCount\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FieldCount\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 159\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the number of columns in the current row.</p>\\n\"\n  syntax:\n    content: public override int FieldCount { get; }\n    content.vb: Public Overrides ReadOnly Property FieldCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>When not positioned in a valid recordset, 0; otherwise the number of columns in the current row. The default is -1.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>There is no current connection to an instance of SQL Server. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlDataReader.FieldCount\n- uid: System.Data.SqlClient.SqlDataReader.HasRows\n  commentId: P:System.Data.SqlClient.SqlDataReader.HasRows\n  id: HasRows\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: HasRows\n  fullName: System.Data.SqlClient.SqlDataReader.HasRows\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasRows\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 181\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets a value that indicates whether the <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains one or more rows.</p>\\n\"\n  syntax:\n    content: public override bool HasRows { get; }\n    content.vb: Public Overrides ReadOnly Property HasRows As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains one or more rows; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlDataReader.HasRows\n- uid: System.Data.SqlClient.SqlDataReader.IsClosed\n  commentId: P:System.Data.SqlClient.SqlDataReader.IsClosed\n  id: IsClosed\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: IsClosed\n  fullName: System.Data.SqlClient.SqlDataReader.IsClosed\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsClosed\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 198\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Retrieves a Boolean value that indicates whether the specified <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance has been closed. </p>\\n\"\n  syntax:\n    content: public override bool IsClosed { get; }\n    content.vb: Public Overrides ReadOnly Property IsClosed As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance is closed; otherwise <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlDataReader.IsClosed\n- uid: System.Data.SqlClient.SqlDataReader.Item(System.Int32)\n  commentId: P:System.Data.SqlClient.SqlDataReader.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Data.SqlClient.SqlDataReader.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 373\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column in its native format given the column ordinal.</p>\\n\"\n  syntax:\n    content: public override object this[int i] { get; }\n    content.vb: Public Overrides ReadOnly Property Item(i As Integer) As Object\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the specified column in its native format.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  fullName.vb: System.Data.SqlClient.SqlDataReader.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: SqlDataReader.Item[Int32]\n  nameWithType.vb: SqlDataReader.Item(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.Item(System.String)\n  commentId: P:System.Data.SqlClient.SqlDataReader.Item(System.String)\n  id: Item(System.String)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.Data.SqlClient.SqlDataReader.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 381\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column in its native format given the column name.</p>\\n\"\n  syntax:\n    content: public override object this[string name] { get; }\n    content.vb: Public Overrides ReadOnly Property Item(name As String) As Object\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The column name. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the specified column in its native format.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>No column with the specified name was found. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  fullName.vb: System.Data.SqlClient.SqlDataReader.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: SqlDataReader.Item[String]\n  nameWithType.vb: SqlDataReader.Item(String)\n- uid: System.Data.SqlClient.SqlDataReader.RecordsAffected\n  commentId: P:System.Data.SqlClient.SqlDataReader.RecordsAffected\n  id: RecordsAffected\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: RecordsAffected\n  fullName: System.Data.SqlClient.SqlDataReader.RecordsAffected\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RecordsAffected\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 326\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the number of rows changed, inserted, or deleted by execution of the Transact-SQL statement.</p>\\n\"\n  syntax:\n    content: public override int RecordsAffected { get; }\n    content.vb: Public Overrides ReadOnly Property RecordsAffected As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlDataReader.RecordsAffected\n- uid: System.Data.SqlClient.SqlDataReader.VisibleFieldCount\n  commentId: P:System.Data.SqlClient.SqlDataReader.VisibleFieldCount\n  id: VisibleFieldCount\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: VisibleFieldCount\n  fullName: System.Data.SqlClient.SqlDataReader.VisibleFieldCount\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VisibleFieldCount\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 355\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the number of fields in the <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that are not hidden. </p>\\n\"\n  syntax:\n    content: public override int VisibleFieldCount { get; }\n    content.vb: Public Overrides ReadOnly Property VisibleFieldCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of fields that are not hidden.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlDataReader.VisibleFieldCount\n- uid: System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)\n  id: GetBoolean(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetBoolean(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBoolean\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1070\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a Boolean.</p>\\n\"\n  syntax:\n    content: public override bool GetBoolean(int i)\n    content.vb: Public Overrides Function GetBoolean(i As Integer) As Boolean\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value of the column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetBoolean(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)\n  id: GetByte(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetByte(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetByte\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1156\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a byte.</p>\\n\"\n  syntax:\n    content: public override byte GetByte(int i)\n    content.vb: Public Overrides Function GetByte(i As Integer) As Byte\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The value of the specified column as a byte.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetByte(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Int32, Int64, Byte[], Int32, Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBytes\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1162\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Reads a stream of bytes from the specified column offset into the buffer an array starting at the given buffer offset.</p>\\n\"\n  syntax:\n    content: public override long GetBytes(int i, long dataIndex, byte[] buffer, int bufferIndex, int length)\n    content.vb: Public Overrides Function GetBytes(i As Integer, dataIndex As Long, buffer As Byte(), bufferIndex As Integer, length As Integer) As Long\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    - id: dataIndex\n      type: System.Int64\n      description: \"\\n<p>The index within the field from which to begin the read operation.</p>\\n\"\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer into which to read the stream of bytes. </p>\\n\"\n    - id: bufferIndex\n      type: System.Int32\n      description: \"\\n<p>The index within the <em>buffer</em> where the write operation is to start. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The maximum length to copy into the buffer. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The actual number of bytes read.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)\n  name.vb: GetBytes(Int32, Int64, Byte(), Int32, Int32)\n  nameWithType: SqlDataReader.GetBytes(Int32, Int64, Byte[], Int32, Int32)\n  nameWithType.vb: SqlDataReader.GetBytes(Int32, Int64, Byte(), Int32, Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)\n  id: GetChar(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetChar(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetChar\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1542\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a single character.</p>\\n\"\n  syntax:\n    content: public override char GetChar(int i)\n    content.vb: Public Overrides Function GetChar(i As Integer) As Char\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetChar(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Int32, Int64, Char[], Int32, Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetChars\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1547\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Reads a stream of characters from the specified column offset into the buffer as an array starting at the given buffer offset.</p>\\n\"\n  syntax:\n    content: public override long GetChars(int i, long dataIndex, char[] buffer, int bufferIndex, int length)\n    content.vb: Public Overrides Function GetChars(i As Integer, dataIndex As Long, buffer As Char(), bufferIndex As Integer, length As Integer) As Long\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    - id: dataIndex\n      type: System.Int64\n      description: \"\\n<p>The index within the field from which to begin the read operation.</p>\\n\"\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>The buffer into which to read the stream of bytes. </p>\\n\"\n    - id: bufferIndex\n      type: System.Int32\n      description: \"\\n<p>The index within the <em>buffer</em> where the write operation is to start. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The maximum length to copy into the buffer. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The actual number of characters read.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Data.SqlClient.SqlDataReader.GetChars(System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)\n  name.vb: GetChars(Int32, Int64, Char(), Int32, Int32)\n  nameWithType: SqlDataReader.GetChars(Int32, Int64, Char[], Int32, Int32)\n  nameWithType.vb: SqlDataReader.GetChars(Int32, Int64, Char(), Int32, Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)\n  id: GetDataTypeName(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetDataTypeName(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDataTypeName\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 826\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets a string representing the data type of the specified column.</p>\\n\"\n  syntax:\n    content: public override string GetDataTypeName(int i)\n    content.vb: Public Overrides Function GetDataTypeName(i As Integer) As String\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based ordinal position of the column to find.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representing the data type of the specified column.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetDataTypeName(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)\n  id: GetDateTime(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetDateTime(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDateTime\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1806\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override DateTime GetDateTime(int i)\n    content.vb: Public Overrides Function GetDateTime(i As Integer) As Date\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetDateTime(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)\n  id: GetDateTimeOffset(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetDateTimeOffset(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDateTimeOffset\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 2181\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Retrieves the value of the specified column as a <xref href=\\\"System.DateTimeOffset\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual DateTimeOffset GetDateTimeOffset(int i)\n    content.vb: Public Overridable Function GetDateTimeOffset(i As Integer) As DateTimeOffset\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.DateTimeOffset\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetDateTimeOffset(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)\n  id: GetDecimal(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetDecimal(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDecimal\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1827\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override decimal GetDecimal(int i)\n    content.vb: Public Overrides Function GetDecimal(i As Integer) As Decimal\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetDecimal(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)\n  id: GetDouble(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetDouble(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDouble\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1833\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a double-precision floating point number.</p>\\n\"\n  syntax:\n    content: public override double GetDouble(int i)\n    content.vb: Public Overrides Function GetDouble(i As Integer) As Double\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetDouble(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetEnumerator\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetEnumerator\n  id: GetEnumerator\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Data.SqlClient.SqlDataReader.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 893\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that iterates through the <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override IEnumerator GetEnumerator()\n    content.vb: Public Overrides Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetEnumerator()\n- uid: System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)\n  id: GetFieldType(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetFieldType(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFieldType\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 898\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the data type of the object.</p>\\n\"\n  syntax:\n    content: public override Type GetFieldType(int i)\n    content.vb: Public Overrides Function GetFieldType(i As Integer) As Type\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the data type of the object. If the type does not exist on the client, in the case of a User-Defined Type (UDT) returned from the database, <strong>GetFieldType</strong> returns null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetFieldType(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)\n  id: GetFieldValue``1(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetFieldValue<T>(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValue<T>(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFieldValue\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 2128\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Synchronously gets the value of the specified column as a type. <xref href=\\\"System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is the asynchronous version of this method.</p>\\n\"\n  syntax:\n    content: public override T GetFieldValue<T>(int i)\n    content.vb: Public Overrides Function GetFieldValue(Of T)(i As Integer) As T\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column to be retrieved.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the value to be returned. See the remarks section for more information.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The returned type object.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.SqlClient.SqlDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Tried to read a previously-read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  - type: System.Data.SqlTypes.SqlNullValueException\n    commentId: T:System.Data.SqlTypes.SqlNullValueException\n    description: \"\\n<p>The value of the column was null (<xref href=\\\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> == <strong>true</strong>), retrieving a non-SQL type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>T</em> doesn’t match the type returned by SQL Server or cannot be cast.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Data.SqlClient.SqlDataReader.GetFieldValue(Of T)(System.Int32)\n  name.vb: GetFieldValue(Of T)(Int32)\n  nameWithType: SqlDataReader.GetFieldValue<T>(Int32)\n  nameWithType.vb: SqlDataReader.GetFieldValue(Of T)(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)\n  id: GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetFieldValueAsync<T>(Int32, CancellationToken)\n  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync<T>(System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFieldValueAsync\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 4148\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Asynchronously gets the value of the specified column as a type. <xref href=\\\"System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is the synchronous version of this method.</p>\\n\"\n  syntax:\n    content: public override Task<T> GetFieldValueAsync<T>(int i, CancellationToken cancellationToken)\n    content.vb: Public Overrides Function GetFieldValueAsync(Of T)(i As Integer, cancellationToken As CancellationToken) As Task(Of T)\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column to be retrieved.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation instruction, which propagates a notification that operations should be canceled. This does not guarantee the cancellation. A setting of <strong>CancellationToken.None</strong> makes this method equivalent to <xref href=\\\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The returned task must be marked as cancelled.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the value to be returned. See the remarks section for more information.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{T}}\n      description: \"\\n<p>The returned type object.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.SqlClient.SqlDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Tried to read a previously-read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n<p>\\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  - type: System.Data.SqlTypes.SqlNullValueException\n    commentId: T:System.Data.SqlTypes.SqlNullValueException\n    description: \"\\n<p>The value of the column was null (<xref href=\\\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> == <strong>true</strong>), retrieving a non-SQL type.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>T</em> doesn’t match the type returned by SQL Server or cannot be cast.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync(Of T)(System.Int32, System.Threading.CancellationToken)\n  name.vb: GetFieldValueAsync(Of T)(Int32, CancellationToken)\n  nameWithType: SqlDataReader.GetFieldValueAsync<T>(Int32, CancellationToken)\n  nameWithType.vb: SqlDataReader.GetFieldValueAsync(Of T)(Int32, CancellationToken)\n- uid: System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)\n  id: GetFloat(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetFloat(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFloat\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1839\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a single-precision floating point number.</p>\\n\"\n  syntax:\n    content: public override float GetFloat(int i)\n    content.vb: Public Overrides Function GetFloat(i As Integer) As Single\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetFloat(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)\n  id: GetGuid(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetGuid(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGuid\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1845\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a globally unique identifier (GUID).</p>\\n\"\n  syntax:\n    content: public override Guid GetGuid(int i)\n    content.vb: Public Overrides Function GetGuid(i As Integer) As Guid\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Guid\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetGuid(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)\n  id: GetInt16(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetInt16(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInt16\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1851\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public override short GetInt16(int i)\n    content.vb: Public Overrides Function GetInt16(i As Integer) As Short\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetInt16(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)\n  id: GetInt32(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetInt32(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInt32\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1857\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public override int GetInt32(int i)\n    content.vb: Public Overrides Function GetInt32(i As Integer) As Integer\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetInt32(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)\n  id: GetInt64(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetInt64(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInt64\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1863\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public override long GetInt64(int i)\n    content.vb: Public Overrides Function GetInt64(i As Integer) As Long\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetInt64(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetName(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetName(System.Int32)\n  id: GetName(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetName(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetName(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetName\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 974\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the name of the specified column.</p>\\n\"\n  syntax:\n    content: public override string GetName(int i)\n    content.vb: Public Overrides Function GetName(i As Integer) As String\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the specified column.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetName(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)\n  id: GetOrdinal(System.String)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetOrdinal(String)\n  fullName: System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetOrdinal\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1040\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the column ordinal, given the name of the column.</p>\\n\"\n  syntax:\n    content: public override int GetOrdinal(string name)\n    content.vb: Public Overrides Function GetOrdinal(name As String) As Integer\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the column. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The name specified is not a valid column name. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetOrdinal(String)\n- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)\n  id: GetProviderSpecificFieldType(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetProviderSpecificFieldType(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProviderSpecificFieldType\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 980\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets an <strong>Object</strong> that is a representation of the underlying provider-specific field type.</p>\\n\"\n  syntax:\n    content: public override Type GetProviderSpecificFieldType(int i)\n    content.vb: Public Overrides Function GetProviderSpecificFieldType(i As Integer) As Type\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the column ordinal. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>Gets an <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is a representation of the underlying provider-specific field type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetProviderSpecificFieldType(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)\n  id: GetProviderSpecificValue(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetProviderSpecificValue(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProviderSpecificValue\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1059\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets an <strong>Object</strong> that is a representation of the underlying provider specific value.</p>\\n\"\n  syntax:\n    content: public override object GetProviderSpecificValue(int i)\n    content.vb: Public Overrides Function GetProviderSpecificValue(i As Integer) As Object\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>An <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the column ordinal. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is a representation of the underlying provider specific value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetProviderSpecificValue(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])\n  id: GetProviderSpecificValues(System.Object[])\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetProviderSpecificValues(Object[])\n  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProviderSpecificValues\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1064\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets an array of objects that are a representation of the underlying provider specific values.</p>\\n\"\n  syntax:\n    content: public override int GetProviderSpecificValues(object[] values)\n    content.vb: Public Overrides Function GetProviderSpecificValues(values As Object()) As Integer\n    parameters:\n    - id: values\n      type: System.Object[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into which to copy the column values.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The array of objects that are a representation of the underlying provider specific values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object())\n  name.vb: GetProviderSpecificValues(Object())\n  nameWithType: SqlDataReader.GetProviderSpecificValues(Object[])\n  nameWithType.vb: SqlDataReader.GetProviderSpecificValues(Object())\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)\n  id: GetSqlBinary(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlBinary(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlBinary\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1875\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlBinary GetSqlBinary(int i)\n    content.vb: Public Overridable Function GetSqlBinary(i As Integer) As SqlBinary\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBinary\n      description: \"\\n<p>The value of the column expressed as a <xref href=\\\"System.Data.SqlTypes.SqlBinary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlBinary(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)\n  id: GetSqlBoolean(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlBoolean(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlBoolean\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1869\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlBoolean GetSqlBoolean(int i)\n    content.vb: Public Overridable Function GetSqlBoolean(i As Integer) As SqlBoolean\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The value of the column.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlBoolean(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)\n  id: GetSqlByte(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlByte(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlByte\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1881\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlByte GetSqlByte(int i)\n    content.vb: Public Overridable Function GetSqlByte(i As Integer) As SqlByte\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The value of the column expressed as a  <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlByte(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)\n  id: GetSqlBytes(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlBytes(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlBytes\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1887\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as <xref href=\\\"System.Data.SqlTypes.SqlBytes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlBytes GetSqlBytes(int i)\n    content.vb: Public Overridable Function GetSqlBytes(i As Integer) As SqlBytes\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBytes\n      description: \"\\n<p>The value of the column expressed as a <xref href=\\\"System.Data.SqlTypes.SqlBytes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlBytes(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)\n  id: GetSqlChars(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlChars(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlChars\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1894\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as <xref href=\\\"System.Data.SqlTypes.SqlChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlChars GetSqlChars(int i)\n    content.vb: Public Overridable Function GetSqlChars(i As Integer) As SqlChars\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlChars\n      description: \"\\n<p>The value of the column expressed as a  <xref href=\\\"System.Data.SqlTypes.SqlChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlChars(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)\n  id: GetSqlDateTime(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlDateTime(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlDateTime\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1910\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlDateTime GetSqlDateTime(int i)\n    content.vb: Public Overridable Function GetSqlDateTime(i As Integer) As SqlDateTime\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDateTime\n      description: \"\\n<p>The value of the column expressed as a  <xref href=\\\"System.Data.SqlTypes.SqlDateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlDateTime(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)\n  id: GetSqlDecimal(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlDecimal(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlDecimal\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1916\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlDecimal GetSqlDecimal(int i)\n    content.vb: Public Overridable Function GetSqlDecimal(i As Integer) As SqlDecimal\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDecimal\n      description: \"\\n<p>The value of the column expressed as a <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlDecimal(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)\n  id: GetSqlDouble(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlDouble(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlDouble\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1928\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlDouble GetSqlDouble(int i)\n    content.vb: Public Overridable Function GetSqlDouble(i As Integer) As SqlDouble\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>The value of the column expressed as a  <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlDouble(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)\n  id: GetSqlGuid(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlGuid(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlGuid\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1922\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlGuid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlGuid GetSqlGuid(int i)\n    content.vb: Public Overridable Function GetSqlGuid(i As Integer) As SqlGuid\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlGuid\n      description: \"\\n<p>The value of the column expressed as a  <xref href=\\\"System.Data.SqlTypes.SqlGuid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlGuid(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)\n  id: GetSqlInt16(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlInt16(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlInt16\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1934\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlInt16 GetSqlInt16(int i)\n    content.vb: Public Overridable Function GetSqlInt16(i As Integer) As SqlInt16\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt16\n      description: \"\\n<p>The value of the column expressed as a <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlInt16(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)\n  id: GetSqlInt32(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlInt32(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlInt32\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1940\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlInt32 GetSqlInt32(int i)\n    content.vb: Public Overridable Function GetSqlInt32(i As Integer) As SqlInt32\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt32\n      description: \"\\n<p>The value of the column expressed as a <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlInt32(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)\n  id: GetSqlInt64(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlInt64(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlInt64\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1946\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlInt64 GetSqlInt64(int i)\n    content.vb: Public Overridable Function GetSqlInt64(i As Integer) As SqlInt64\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>The value of the column expressed as a <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlInt64(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)\n  id: GetSqlMoney(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlMoney(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlMoney\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1952\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlMoney GetSqlMoney(int i)\n    content.vb: Public Overridable Function GetSqlMoney(i As Integer) As SqlMoney\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlMoney\n      description: \"\\n<p>The value of the column expressed as a <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlMoney(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)\n  id: GetSqlSingle(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlSingle(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlSingle\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1958\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlSingle GetSqlSingle(int i)\n    content.vb: Public Overridable Function GetSqlSingle(i As Integer) As SqlSingle\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlSingle\n      description: \"\\n<p>The value of the column expressed as a <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlSingle(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)\n  id: GetSqlString(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlString(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlString\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1964\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual SqlString GetSqlString(int i)\n    content.vb: Public Overridable Function GetSqlString(i As Integer) As SqlString\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>The value of the column expressed as a <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlString(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)\n  id: GetSqlValue(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlValue(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlValue\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 2006\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Returns the data value in the specified column as a SQL Server type. </p>\\n\"\n  syntax:\n    content: public virtual object GetSqlValue(int i)\n    content.vb: Public Overridable Function GetSqlValue(i As Integer) As Object\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the column expressed as a <xref href=\\\"System.Data.SqlDbType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlValue(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])\n  id: GetSqlValues(System.Object[])\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlValues(Object[])\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlValues\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 2087\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Fills an array of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the values for all the columns in the record, expressed as SQL Server types.</p>\\n\"\n  syntax:\n    content: public virtual int GetSqlValues(object[] values)\n    content.vb: Public Overridable Function GetSqlValues(values As Object()) As Integer\n    parameters:\n    - id: values\n      type: System.Object[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into which to copy the values. The column values are expressed as SQL Server types.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer indicating the number of columns copied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>values</em> is null. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object())\n  name.vb: GetSqlValues(Object())\n  nameWithType: SqlDataReader.GetSqlValues(Object[])\n  nameWithType.vb: SqlDataReader.GetSqlValues(Object())\n- uid: System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)\n  id: GetSqlXml(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetSqlXml(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSqlXml\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1976\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as an XML value.</p>\\n\"\n  syntax:\n    content: public virtual SqlXml GetSqlXml(int i)\n    content.vb: Public Overridable Function GetSqlXml(i As Integer) As SqlXml\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlXml\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlXml\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that contains the XML stored within the corresponding field. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 to <xref href=\\\"System.Data.DataTableReader.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> - 1</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An attempt was made to read or access columns in a closed <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The retrieved data is not compatible with the <xref href=\\\"System.Data.SqlTypes.SqlXml\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetSqlXml(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)\n  id: GetStream(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetStream(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStream\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1115\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Retrieves binary, image, varbinary, UDT, and variant data types as a <xref href=\\\"System.IO.Stream\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override Stream GetStream(int i)\n    content.vb: Public Overrides Function GetStream(i As Integer) As Stream\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.IO.Stream\n      description: \"\\n<p>A stream object.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.SqlClient.SqlDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Tried to read a previously-read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The returned type was not one of the types below:</p>\\n<ul><li>\\n<p>binary</p>\\n</li><li>\\n<p>image</p>\\n</li><li>\\n<p>varbinary</p>\\n</li><li>\\n<p>udt</p>\\n</li></ul>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetStream(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetString(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetString(System.Int32)\n  id: GetString(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetString(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetString(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetString\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 2115\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column as a string.</p>\\n\"\n  syntax:\n    content: public override string GetString(int i)\n    content.vb: Public Overrides Function GetString(i As Integer) As String\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetString(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)\n  id: GetTextReader(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetTextReader(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetTextReader\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1491\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Retrieves Char, NChar, NText, NVarChar, text, varChar, and Variant data types as a <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override TextReader GetTextReader(int i)\n    content.vb: Public Overrides Function GetTextReader(i As Integer) As TextReader\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column to be retrieved.</p>\\n\"\n    return:\n      type: System.IO.TextReader\n      description: \"\\n<p>The returned object.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.SqlClient.SqlDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Tried to read a previously-read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The returned type was not one of the types below:</p>\\n<ul><li>\\n<p>char</p>\\n</li><li>\\n<p>nchar</p>\\n</li><li>\\n<p>ntext</p>\\n</li><li>\\n<p>nvarchar</p>\\n</li><li>\\n<p>text</p>\\n</li><li>\\n<p>varchar</p>\\n</li></ul>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetTextReader(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)\n  id: GetTimeSpan(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetTimeSpan(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetTimeSpan\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 2160\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Retrieves the value of the specified column as a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual TimeSpan GetTimeSpan(int i)\n    content.vb: Public Overridable Function GetTimeSpan(i As Integer) As TimeSpan\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The specified cast is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetTimeSpan(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)\n  id: GetValue(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetValue(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValue\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 2144\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets the value of the specified column in its native format.</p>\\n\"\n  syntax:\n    content: public override object GetValue(int i)\n    content.vb: Public Overrides Function GetValue(i As Integer) As Object\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>This method returns <xref href=\\\"System.DBNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for null database columns.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.GetValue(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])\n  id: GetValues(System.Object[])\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetValues(Object[])\n  fullName: System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValues\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 2330\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Populates an array of objects with the column values of the current row.</p>\\n\"\n  syntax:\n    content: public override int GetValues(object[] values)\n    content.vb: Public Overrides Function GetValues(values As Object()) As Integer\n    parameters:\n    - id: values\n      type: System.Object[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into which to copy the attribute columns. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of instances of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Data.SqlClient.SqlDataReader.GetValues(System.Object())\n  name.vb: GetValues(Object())\n  nameWithType: SqlDataReader.GetValues(Object[])\n  nameWithType.vb: SqlDataReader.GetValues(Object())\n- uid: System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)\n  id: GetXmlReader(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: GetXmlReader(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetXmlReader\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 1076\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Retrieves data of type XML as an <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual XmlReader GetXmlReader(int i)\n    content.vb: Public Overridable Function GetXmlReader(i As Integer) As XmlReader\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n    return:\n      type: XmlReader\n      description: \"\\n<p>The returned object.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.SqlClient.SqlDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Trying to read a previously read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The returned type was not xml.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SqlDataReader.GetXmlReader(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\n  commentId: M:System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\n  id: IsDBNull(System.Int32)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: IsDBNull(Int32)\n  fullName: System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDBNull\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 2589\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets a value that indicates whether the column contains non-existent or missing values.</p>\\n\"\n  syntax:\n    content: public override bool IsDBNull(int i)\n    content.vb: Public Overrides Function IsDBNull(i As Integer) As Boolean\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified column value is equivalent to <xref href=\\\"System.DBNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.IsDBNull(Int32)\n- uid: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)\n  id: IsDBNullAsync(System.Int32,System.Threading.CancellationToken)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: IsDBNullAsync(Int32, CancellationToken)\n  fullName: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDBNullAsync\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 4024\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which gets a value that indicates whether the column contains non-existent or missing values.</p>\\n<p>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses. Exceptions will be reported via the returned Task object.</p>\\n\"\n  syntax:\n    content: public override Task<bool> IsDBNullAsync(int i, CancellationToken cancellationToken)\n    content.vb: Public Overrides Function IsDBNullAsync(i As Integer, cancellationToken As CancellationToken) As Task(Of Boolean)\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column to be retrieved.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation instruction, which propagates a notification that operations should be canceled. This does not guarantee the cancellation. A setting of <strong>CancellationToken.None</strong> makes this method equivalent to <xref href=\\\"System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The returned task must be marked as cancelled.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>\\n<strong>true</strong> if the specified column value is equivalent to <strong>DBNull</strong> otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The connection drops or is closed during the data retrieval.</p>\\n<p>The <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed during the data retrieval.</p>\\n<p>There is no data ready to be read (for example, the first <xref href=\\\"System.Data.SqlClient.SqlDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hasn't been called, or returned false).</p>\\n<p>Trying to read a previously read column in sequential mode.</p>\\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\\n<p>\\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>Trying to read a column that does not exist.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.IsDBNullAsync(Int32, CancellationToken)\n- uid: System.Data.SqlClient.SqlDataReader.NextResult\n  commentId: M:System.Data.SqlClient.SqlDataReader.NextResult\n  id: NextResult\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: NextResult()\n  fullName: System.Data.SqlClient.SqlDataReader.NextResult()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NextResult\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 2607\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Advances the data reader to the next result, when reading the results of batch Transact-SQL statements.</p>\\n\"\n  syntax:\n    content: public override bool NextResult()\n    content.vb: Public Overrides Function NextResult As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if there are more result sets; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.NextResult()\n- uid: System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)\n  commentId: M:System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)\n  id: NextResultAsync(System.Threading.CancellationToken)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: NextResultAsync(CancellationToken)\n  fullName: System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NextResultAsync\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 3587\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.SqlClient.SqlDataReader.NextResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which advances the data reader to the next result, when reading the results of batch Transact-SQL statements.</p>\\n<p>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\\n\"\n  syntax:\n    content: public override Task<bool> NextResultAsync(CancellationToken cancellationToken)\n    content.vb: Public Overrides Function NextResultAsync(cancellationToken As CancellationToken) As Task(Of Boolean)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation instruction.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Calling <xref href=\\\"System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> more than once for the same instance before task completion.</p>\\n<p>\\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\\n\"\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: \"\\n<p>SQL Server returned an error while executing the command text.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.NextResultAsync(CancellationToken)\n- uid: System.Data.SqlClient.SqlDataReader.Read\n  commentId: M:System.Data.SqlClient.SqlDataReader.Read\n  id: Read\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: Read()\n  fullName: System.Data.SqlClient.SqlDataReader.Read()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Read\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 2762\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Advances the <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the next record.</p>\\n\"\n  syntax:\n    content: public override bool Read()\n    content.vb: Public Overrides Function Read As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if there are more rows; otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: \"\\n<p>SQL Server returned an error while executing the command text.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.Read()\n- uid: System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)\n  commentId: M:System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)\n  id: ReadAsync(System.Threading.CancellationToken)\n  parent: System.Data.SqlClient.SqlDataReader\n  langs:\n  - csharp\n  - vb\n  name: ReadAsync(CancellationToken)\n  fullName: System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadAsync\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlDataReader.cs\n    startLine: 3870\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.SqlClient.SqlDataReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which advances the <xref href=\\\"System.Data.SqlClient.SqlDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the next record.</p>\\n<p>The cancellation token can be used to request that the operation be abandoned before the command timeout elapses. Exceptions will be reported via the returned Task object.</p>\\n\"\n  syntax:\n    content: public override Task<bool> ReadAsync(CancellationToken cancellationToken)\n    content.vb: Public Overrides Function ReadAsync(cancellationToken As CancellationToken) As Task(Of Boolean)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation instruction.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Boolean}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Calling <xref href=\\\"System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> more than once for the same instance before task completion.</p>\\n<p>\\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\\n\"\n  - type: System.Data.SqlClient.SqlException\n    commentId: T:System.Data.SqlClient.SqlException\n    description: \"\\n<p>SQL Server returned an error while executing the command text.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlDataReader.ReadAsync(CancellationToken)\nreferences:\n- uid: System.Data.SqlClient\n  isExternal: false\n  name: System.Data.SqlClient\n  fullName: System.Data.SqlClient\n  nameWithType: System.Data.SqlClient\n  commentId: N:System.Data.SqlClient\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Data.SqlClient.SqlConnection\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlConnection\n  fullName: System.Data.SqlClient.SqlConnection\n  nameWithType: SqlConnection\n  commentId: T:System.Data.SqlClient.SqlConnection\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.DateTimeOffset\n  parent: System\n  isExternal: false\n  name: DateTimeOffset\n  fullName: System.DateTimeOffset\n  nameWithType: DateTimeOffset\n  commentId: T:System.DateTimeOffset\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading.Tasks.Task{{T}}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<T>\n  fullName: System.Threading.Tasks.Task<T>\n  fullname.vb: System.Threading.Tasks.Task(Of T)\n  name.vb: Task(Of T)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Task<T>\n  nameWithType.vb: Task(Of T)\n  commentId: T:System.Threading.Tasks.Task{``0}\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  nameWithType: Guid\n  commentId: T:System.Guid\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Data.SqlTypes.SqlBinary\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlBinary\n  fullName: System.Data.SqlTypes.SqlBinary\n  nameWithType: SqlBinary\n  commentId: T:System.Data.SqlTypes.SqlBinary\n- uid: System.Data.SqlTypes\n  isExternal: false\n  name: System.Data.SqlTypes\n  fullName: System.Data.SqlTypes\n  nameWithType: System.Data.SqlTypes\n  commentId: N:System.Data.SqlTypes\n- uid: System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlBoolean\n  fullName: System.Data.SqlTypes.SqlBoolean\n  nameWithType: SqlBoolean\n  commentId: T:System.Data.SqlTypes.SqlBoolean\n- uid: System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlByte\n  fullName: System.Data.SqlTypes.SqlByte\n  nameWithType: SqlByte\n  commentId: T:System.Data.SqlTypes.SqlByte\n- uid: System.Data.SqlTypes.SqlBytes\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlBytes\n  fullName: System.Data.SqlTypes.SqlBytes\n  nameWithType: SqlBytes\n  commentId: T:System.Data.SqlTypes.SqlBytes\n- uid: System.Data.SqlTypes.SqlChars\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlChars\n  fullName: System.Data.SqlTypes.SqlChars\n  nameWithType: SqlChars\n  commentId: T:System.Data.SqlTypes.SqlChars\n- uid: System.Data.SqlTypes.SqlDateTime\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDateTime\n  fullName: System.Data.SqlTypes.SqlDateTime\n  nameWithType: SqlDateTime\n  commentId: T:System.Data.SqlTypes.SqlDateTime\n- uid: System.Data.SqlTypes.SqlDecimal\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDecimal\n  fullName: System.Data.SqlTypes.SqlDecimal\n  nameWithType: SqlDecimal\n  commentId: T:System.Data.SqlTypes.SqlDecimal\n- uid: System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDouble\n  fullName: System.Data.SqlTypes.SqlDouble\n  nameWithType: SqlDouble\n  commentId: T:System.Data.SqlTypes.SqlDouble\n- uid: System.Data.SqlTypes.SqlGuid\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlGuid\n  fullName: System.Data.SqlTypes.SqlGuid\n  nameWithType: SqlGuid\n  commentId: T:System.Data.SqlTypes.SqlGuid\n- uid: System.Data.SqlTypes.SqlInt16\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt16\n  fullName: System.Data.SqlTypes.SqlInt16\n  nameWithType: SqlInt16\n  commentId: T:System.Data.SqlTypes.SqlInt16\n- uid: System.Data.SqlTypes.SqlInt32\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt32\n  fullName: System.Data.SqlTypes.SqlInt32\n  nameWithType: SqlInt32\n  commentId: T:System.Data.SqlTypes.SqlInt32\n- uid: System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt64\n  fullName: System.Data.SqlTypes.SqlInt64\n  nameWithType: SqlInt64\n  commentId: T:System.Data.SqlTypes.SqlInt64\n- uid: System.Data.SqlTypes.SqlMoney\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlMoney\n  fullName: System.Data.SqlTypes.SqlMoney\n  nameWithType: SqlMoney\n  commentId: T:System.Data.SqlTypes.SqlMoney\n- uid: System.Data.SqlTypes.SqlSingle\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlSingle\n  fullName: System.Data.SqlTypes.SqlSingle\n  nameWithType: SqlSingle\n  commentId: T:System.Data.SqlTypes.SqlSingle\n- uid: System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlString\n  fullName: System.Data.SqlTypes.SqlString\n  nameWithType: SqlString\n  commentId: T:System.Data.SqlTypes.SqlString\n- uid: System.Data.SqlTypes.SqlXml\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlXml\n  fullName: System.Data.SqlTypes.SqlXml\n  nameWithType: SqlXml\n  commentId: T:System.Data.SqlTypes.SqlXml\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  nameWithType: Stream\n  commentId: T:System.IO.Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: false\n  name: TextReader\n  fullName: System.IO.TextReader\n  nameWithType: TextReader\n  commentId: T:System.IO.TextReader\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlReader\n  fullName: System.Xml.XmlReader\n  nameWithType: XmlReader\n  commentId: T:System.Xml.XmlReader\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  nameWithType: System.Xml\n  commentId: N:System.Xml\n- uid: System.Threading.Tasks.Task{System.Boolean}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Boolean>\n  fullName: System.Threading.Tasks.Task<System.Boolean>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)\n  name.vb: Task(Of Boolean)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<Boolean>\n  nameWithType.vb: Task(Of Boolean)\n  commentId: T:System.Threading.Tasks.Task{System.Boolean}\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.Data.SqlTypes.SqlNullValueException\n  isExternal: false\n  name: SqlNullValueException\n  fullName: System.Data.SqlTypes.SqlNullValueException\n  nameWithType: SqlNullValueException\n  commentId: T:System.Data.SqlTypes.SqlNullValueException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.Data.SqlClient.SqlException\n  isExternal: false\n  name: SqlException\n  fullName: System.Data.SqlClient.SqlException\n  nameWithType: SqlException\n  commentId: T:System.Data.SqlClient.SqlException\n"}