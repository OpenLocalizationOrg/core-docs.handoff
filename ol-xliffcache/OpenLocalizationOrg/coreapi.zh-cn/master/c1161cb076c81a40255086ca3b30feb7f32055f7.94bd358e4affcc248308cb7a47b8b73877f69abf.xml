{"nodes":[{"pos":[1377,1385],"content":"BitArray","needQuote":true,"nodes":[{"content":"BitArray","pos":[0,8]}]},{"pos":[3486,3505],"content":"BitArray(Boolean[])","needQuote":true,"nodes":[{"content":"BitArray(Boolean[])","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An array of Booleans to copy.","pos":[4316,4350],"source":"\\n<p>An array of Booleans to copy."},{"content":"&lt;/p&gt;\\n","pos":[4351,4357],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;values&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[4476,4524],"source":"\\n<p>\\n<em>values</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[4525,4531],"source":" </p>\\n"},{"pos":[5007,5023],"content":"BitArray(Byte[])","needQuote":true,"nodes":[{"content":"BitArray(Byte[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An array of bytes containing the values to copy, where each byte represents eight consecutive bits.","pos":[5818,5922],"source":"\\n<p>An array of bytes containing the values to copy, where each byte represents eight consecutive bits."},{"content":"&lt;/p&gt;\\n","pos":[5923,5929],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6048,6095],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6096,6102],"source":" </p>\\n"},{"pos":[6843,6861],"content":"BitArray(BitArray)","needQuote":true,"nodes":[{"content":"BitArray(BitArray)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bits&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[7990,8036],"source":"\\n<p>\\n<em>bits</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8037,8043],"source":" </p>\\n"},{"pos":[8366,8381],"content":"BitArray(Int32)","needQuote":true,"nodes":[{"content":"BitArray(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.","pos":[9476,9517],"source":"\\n<p>\\n<em>length</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[9518,9524],"source":" </p>\\n"},{"pos":[9889,9913],"content":"BitArray(Int32, Boolean)","needQuote":true,"nodes":[{"content":"BitArray(Int32, Boolean)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The Boolean value to assign to each bit.","pos":[11006,11051],"source":"\\n<p>The Boolean value to assign to each bit."},{"content":"&lt;/p&gt;\\n","pos":[11052,11058],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero.","pos":[11189,11230],"source":"\\n<p>\\n<em>length</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[11231,11237],"source":" </p>\\n"},{"pos":[11572,11589],"content":"BitArray(Int32[])","needQuote":true,"nodes":[{"content":"BitArray(Int32[])","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An array of integers containing the values to copy, where each integer represents 32 consecutive bits.","pos":[12402,12509],"source":"\\n<p>An array of integers containing the values to copy, where each integer represents 32 consecutive bits."},{"content":"&lt;/p&gt;\\n","pos":[12510,12516],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;values&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12635,12683],"source":"\\n<p>\\n<em>values</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12684,12690],"source":" </p>\\n"},{"pos":[13385,13396],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index of the value to get or set.","pos":[14172,14225],"source":"\\n<p>The zero-based index of the value to get or set."},{"content":"&lt;/p&gt;\\n","pos":[14226,14232],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the bit at position &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;\\n","pos":[14293,14352],"source":"\\n<p>The value of the bit at position <em>index</em>.</p>\\n"},{"pos":[15214,15220],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The property is set to a value that is less than zero.","pos":[16196,16255],"source":"\\n<p>The property is set to a value that is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[16256,16262],"source":" </p>\\n"},{"pos":[16652,16669],"content":"ICollection.Count","needQuote":true,"nodes":[{"content":"ICollection.Count","pos":[0,17]}]},{"pos":[17916,17942],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[19255,19275],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[20499,20512],"content":"And(BitArray)","needQuote":true,"nodes":[{"content":"And(BitArray)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The array with which to perform the bitwise AND operation.","pos":[21549,21612],"source":"\\n<p>The array with which to perform the bitwise AND operation."},{"content":"&lt;/p&gt;\\n","pos":[21613,21619],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22016,22063],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22064,22070],"source":" </p>\\n"},{"pos":[22650,22660],"content":"Get(Int32)","needQuote":true,"nodes":[{"content":"Get(Int32)","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The zero-based index of the value to get.","pos":[23406,23452],"source":"\\n<p>The zero-based index of the value to get."},{"content":"&lt;/p&gt;\\n","pos":[23453,23459],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the bit at position &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;\\n","pos":[23520,23579],"source":"\\n<p>The value of the bit at position <em>index</em>.</p>\\n"},{"pos":[24238,24253],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[25642,25647],"content":"Not()","needQuote":true,"nodes":[{"content":"Not()","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The current instance with inverted bit values.&lt;/p&gt;\\n","pos":[26506,26563],"source":"\\n<p>The current instance with inverted bit values.</p>\\n"},{"pos":[26907,26919],"content":"Or(BitArray)","needQuote":true,"nodes":[{"content":"Or(BitArray)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The array with which to perform the bitwise OR operation.","pos":[27950,28012],"source":"\\n<p>The array with which to perform the bitwise OR operation."},{"content":"&lt;/p&gt;\\n","pos":[28013,28019],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28414,28461],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28462,28468],"source":" </p>\\n"},{"pos":[29092,29111],"content":"Set(Int32, Boolean)","needQuote":true,"nodes":[{"content":"Set(Int32, Boolean)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The zero-based index of the bit to set.","pos":[29897,29941],"source":"\\n<p>The zero-based index of the bit to set."},{"content":"&lt;/p&gt;\\n","pos":[29942,29948],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The Boolean value to assign to the bit.","pos":[30013,30057],"source":"\\n<p>The Boolean value to assign to the bit."},{"content":"&lt;/p&gt;\\n","pos":[30058,30064],"source":" </p>\\n"},{"pos":[30759,30774],"content":"SetAll(Boolean)","needQuote":true,"nodes":[{"content":"SetAll(Boolean)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The Boolean value to assign to all bits.","pos":[31509,31554],"source":"\\n<p>The Boolean value to assign to all bits."},{"content":"&lt;/p&gt;\\n","pos":[31555,31561],"source":" </p>\\n"},{"pos":[32028,32060],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"pos":[33358,33371],"content":"Xor(BitArray)","needQuote":true,"nodes":[{"content":"Xor(BitArray)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The array with which to perform the bitwise exclusive OR operation.","pos":[34430,34502],"source":"\\n<p>The array with which to perform the bitwise exclusive OR operation."},{"content":"&lt;/p&gt;\\n","pos":[34503,34509],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[34915,34962],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[34963,34969],"source":" </p>\\n"},{"pos":[35404,35422],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[35589,35595],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35769,35780],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[35993,36004],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[36203,36213],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[36308,36316],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[36385,36386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36413,36414],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36484,36492],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[36561,36562],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36589,36590],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36773,36787],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[36906,36912],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36979,36980],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37030,37036],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37096,37097],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37180,37186],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37253,37254],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37304,37310],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37370,37371],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37585,37607],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[37755,37761],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37828,37829],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37879,37885],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[37946,37947]},{"pos":[38002,38008],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38068,38069],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38166,38172],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[38239,38240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38290,38296],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38357,38358]},{"pos":[38413,38419],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38479,38480],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38725,38756],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[38922,38937],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[39013,39014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39064,39070],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39131,39132]},{"pos":[39187,39193],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39253,39254],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39360,39375],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[39451,39452],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39502,39508],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39569,39570]},{"pos":[39625,39631],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39691,39692],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39922,39935],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[40036,40047],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[40119,40120],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40147,40148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40221,40232],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[40304,40305],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40332,40333],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40508,40517],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[40610,40617],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[40685,40686],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40713,40714],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40783,40790],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[40858,40859],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40886,40887],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41062,41079],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[41188,41203],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[41279,41280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41307,41308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41385,41400],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[41476,41477],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41504,41505],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41800,41813],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[41930,41941],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[42000,42001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42028,42029],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42110,42121],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[42180,42181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42208,42209],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42564,42576],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[42709,42719],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[42786,42787],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42814,42815],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42904,42914],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[42981,42982],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43009,43010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43351,43366],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[43570,43583],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[43645,43646],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43673,43674],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43752,43768],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[43833,43834],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43861,43862],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44240,44257],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[44469,44484],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[44548,44549],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44576,44577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44657,44675],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[44742,44743],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44770,44771],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45006,45012],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[45177,45201],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[45380,45391],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[45450,45451],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45518,45529],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[45606,45607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45720,45731],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[45790,45791],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45858,45869],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[45946,45947],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46175,46184],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[46390,46413],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[46608,46618],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[46685,46686],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46753,46764],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[46841,46842],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46963,46973],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[47040,47041],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47108,47119],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[47196,47197],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47450,47468],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[47690,47716],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[48023,48036],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[48098,48099],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48166,48177],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[48254,48255],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48365,48381],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[48446,48447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48514,48525],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[48602,48603],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48892,48902],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[49102,49130],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[49445,49460],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[49524,49525],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49592,49603],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[49680,49681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49793,49811],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[49878,49879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49946,49957],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[50034,50035],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50297,50308],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[50420,50429],"content":"Boolean[]","needQuote":true,"nodes":[{"content":"Boolean[]","pos":[0,9]}]},{"pos":[50561,50568],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"content":"[]","pos":[50630,50632]},{"pos":[50698,50705],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[50766,50768],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[50870,50876],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[50996,51000],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[51059,51061]},{"pos":[51124,51128],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[51186,51188],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[51347,51355],"content":"BitArray","needQuote":true,"nodes":[{"content":"BitArray","pos":[0,8]}]},{"pos":[51529,51534],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[51677,51684],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[51796,51803],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[51927,51932],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[51992,51994]},{"pos":[52058,52063],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[52122,52124],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[52306,52311],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[52569,52583],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[52862,52870],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[53136,53151],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[53290,53303],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[53373,53374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53401,53402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53494,53507],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[53577,53578],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53605,53606],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53822,53833],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[54091,54111],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[54289,54295],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[54358,54359],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54408,54413],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[54452,54453]},{"pos":[54507,54512],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[54571,54572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54684,54690],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[54753,54754],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54803,54808],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[54847,54848]},{"pos":[54902,54907],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[54966,54967],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55178,55183],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[55323,55344],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[55545,55562],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[55744,55771],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Collections.BitArray\n  commentId: T:System.Collections.BitArray\n  id: BitArray\n  parent: System.Collections\n  children:\n  - System.Collections.BitArray.#ctor(System.Boolean[])\n  - System.Collections.BitArray.#ctor(System.Byte[])\n  - System.Collections.BitArray.#ctor(System.Collections.BitArray)\n  - System.Collections.BitArray.#ctor(System.Int32)\n  - System.Collections.BitArray.#ctor(System.Int32,System.Boolean)\n  - System.Collections.BitArray.#ctor(System.Int32[])\n  - System.Collections.BitArray.And(System.Collections.BitArray)\n  - System.Collections.BitArray.Get(System.Int32)\n  - System.Collections.BitArray.GetEnumerator\n  - System.Collections.BitArray.Item(System.Int32)\n  - System.Collections.BitArray.Length\n  - System.Collections.BitArray.Not\n  - System.Collections.BitArray.Or(System.Collections.BitArray)\n  - System.Collections.BitArray.Set(System.Int32,System.Boolean)\n  - System.Collections.BitArray.SetAll(System.Boolean)\n  - System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.BitArray.System#Collections#ICollection#Count\n  - System.Collections.BitArray.System#Collections#ICollection#IsSynchronized\n  - System.Collections.BitArray.System#Collections#ICollection#SyncRoot\n  - System.Collections.BitArray.Xor(System.Collections.BitArray)\n  langs:\n  - csharp\n  - vb\n  name: BitArray\n  fullName: System.Collections.BitArray\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BitArray\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 21\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Manages a compact array of bit values, which are represented as Booleans, where <strong>true</strong> indicates that the bit is on (1) and <strong>false</strong> indicates the bit is off (0).</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public sealed class BitArray : ICollection, IEnumerable, ICloneable\n    content.vb: >-\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public NotInheritable Class BitArray\n          Implements ICollection, IEnumerable, ICloneable\n  seealso:\n  - type: System.Collections.Specialized.BitVector32\n    commentId: T:System.Collections.Specialized.BitVector32\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: BitArray\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.BitArray.#ctor(System.Boolean[])\n  commentId: M:System.Collections.BitArray.#ctor(System.Boolean[])\n  id: '#ctor(System.Boolean[])'\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: BitArray(Boolean[])\n  fullName: System.Collections.BitArray.BitArray(System.Boolean[])\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 112\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that contains bit values copied from the specified array of Booleans.</p>\\n\"\n  syntax:\n    content: public BitArray(bool[] values)\n    content.vb: Public Sub New(values As Boolean())\n    parameters:\n    - id: values\n      type: System.Boolean[]\n      description: \"\\n<p>An array of Booleans to copy. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>values</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.BitArray.BitArray(System.Boolean())\n  name.vb: BitArray(Boolean())\n  nameWithType: BitArray.BitArray(Boolean[])\n  nameWithType.vb: BitArray.BitArray(Boolean())\n- uid: System.Collections.BitArray.#ctor(System.Byte[])\n  commentId: M:System.Collections.BitArray.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: BitArray(Byte[])\n  fullName: System.Collections.BitArray.BitArray(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 67\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that contains bit values copied from the specified array of bytes.</p>\\n\"\n  syntax:\n    content: public BitArray(byte[] bytes)\n    content.vb: Public Sub New(bytes As Byte())\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes containing the values to copy, where each byte represents eight consecutive bits. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The length of <em>bytes</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.BitArray.BitArray(System.Byte())\n  name.vb: BitArray(Byte())\n  nameWithType: BitArray.BitArray(Byte[])\n  nameWithType.vb: BitArray.BitArray(Byte())\n- uid: System.Collections.BitArray.#ctor(System.Collections.BitArray)\n  commentId: M:System.Collections.BitArray.#ctor(System.Collections.BitArray)\n  id: '#ctor(System.Collections.BitArray)'\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: BitArray(BitArray)\n  fullName: System.Collections.BitArray.BitArray(System.Collections.BitArray)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 161\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that contains bit values copied from the specified <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public BitArray(BitArray bits)\n    content.vb: Public Sub New(bits As BitArray)\n    parameters:\n    - id: bits\n      type: System.Collections.BitArray\n      description: \"\\n<p>The <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to copy. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bits</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitArray.BitArray(BitArray)\n- uid: System.Collections.BitArray.#ctor(System.Int32)\n  commentId: M:System.Collections.BitArray.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: BitArray(Int32)\n  fullName: System.Collections.BitArray.BitArray(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 32\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that can hold the specified number of bit values, which are initially set to <strong>false</strong>.</p>\\n\"\n  syntax:\n    content: public BitArray(int length)\n    content.vb: Public Sub New(length As Integer)\n    parameters:\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of bit values in the new <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>length</em> is less than zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitArray.BitArray(Int32)\n- uid: System.Collections.BitArray.#ctor(System.Int32,System.Boolean)\n  commentId: M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)\n  id: '#ctor(System.Int32,System.Boolean)'\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: BitArray(Int32, Boolean)\n  fullName: System.Collections.BitArray.BitArray(System.Int32, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 42\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that can hold the specified number of bit values, which are initially set to the specified value.</p>\\n\"\n  syntax:\n    content: public BitArray(int length, bool defaultValue)\n    content.vb: Public Sub New(length As Integer, defaultValue As Boolean)\n    parameters:\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of bit values in the new <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: defaultValue\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to assign to each bit. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>length</em> is less than zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitArray.BitArray(Int32, Boolean)\n- uid: System.Collections.BitArray.#ctor(System.Int32[])\n  commentId: M:System.Collections.BitArray.#ctor(System.Int32[])\n  id: '#ctor(System.Int32[])'\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: BitArray(Int32[])\n  fullName: System.Collections.BitArray.BitArray(System.Int32[])\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 138\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that contains bit values copied from the specified array of 32-bit integers.</p>\\n\"\n  syntax:\n    content: public BitArray(int[] values)\n    content.vb: Public Sub New(values As Integer())\n    parameters:\n    - id: values\n      type: System.Int32[]\n      description: \"\\n<p>An array of integers containing the values to copy, where each integer represents 32 consecutive bits. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>values</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The length of <em>values</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.BitArray.BitArray(System.Int32())\n  name.vb: BitArray(Int32())\n  nameWithType: BitArray.BitArray(Int32[])\n  nameWithType.vb: BitArray.BitArray(Int32())\n- uid: System.Collections.BitArray.Item(System.Int32)\n  commentId: P:System.Collections.BitArray.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Collections.BitArray.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: this[]\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 176\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the value of the bit at a specific position in the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool this[int index] { get; set; }\n    content.vb: Public Property Item(index As Integer) As Boolean\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the value to get or set. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value of the bit at position <em>index</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.Collections.BitArray.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Collections.BitArray.Count\n    commentId: P:System.Collections.BitArray.Count\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.BitArray.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: BitArray.Item[Int32]\n  nameWithType.vb: BitArray.Item(Int32)\n- uid: System.Collections.BitArray.Length\n  commentId: P:System.Collections.BitArray.Length\n  id: Length\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: Length\n  fullName: System.Collections.BitArray.Length\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Length\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 315\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the number of elements in the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int Length { get; set; }\n    content.vb: Public Property Length As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The property is set to a value that is less than zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: BitArray.Length\n- uid: System.Collections.BitArray.System#Collections#ICollection#Count\n  commentId: P:System.Collections.BitArray.System#Collections#ICollection#Count\n  id: System#Collections#ICollection#Count\n  isEii: true\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: ICollection.Count\n  fullName: System.Collections.BitArray.System.Collections.ICollection.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/ref/System.Collections.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.Count\n    path: src/System.Collections/ref/System.Collections.cs\n    startLine: 20\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  syntax:\n    content: int ICollection.Count { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.Count As Integer Implements ICollection.Count\n    parameters: []\n    return:\n      type: System.Int32\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.Count\n  nameWithType: BitArray.ICollection.Count\n  nameWithType.vb: BitArray.System.Collections.ICollection.Count\n- uid: System.Collections.BitArray.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.BitArray.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Collections.BitArray.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/ref/System.Collections.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.Collections/ref/System.Collections.cs\n    startLine: 21\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: BitArray.ICollection.IsSynchronized\n  nameWithType.vb: BitArray.System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.BitArray.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.BitArray.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Collections.BitArray.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/ref/System.Collections.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.Collections/ref/System.Collections.cs\n    startLine: 22\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: BitArray.ICollection.SyncRoot\n  nameWithType.vb: BitArray.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.BitArray.And(System.Collections.BitArray)\n  commentId: M:System.Collections.BitArray.And(System.Collections.BitArray)\n  id: And(System.Collections.BitArray)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: And(BitArray)\n  fullName: System.Collections.BitArray.And(System.Collections.BitArray)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: And\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 240\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Performs the bitwise AND operation between the elements of the current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and the corresponding elements in the specified array. The current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object will be modified to store the result of the bitwise AND operation.</p>\\n\"\n  syntax:\n    content: public BitArray And(BitArray value)\n    content.vb: Public Function And(value As BitArray) As BitArray\n    parameters:\n    - id: value\n      type: System.Collections.BitArray\n      description: \"\\n<p>The array with which to perform the bitwise AND operation. </p>\\n\"\n    return:\n      type: System.Collections.BitArray\n      description: \"\\n<p>An array containing the result of the bitwise AND operation, which is a reference to the current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> and the current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> do not have the same number of elements. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitArray.And(BitArray)\n- uid: System.Collections.BitArray.Get(System.Int32)\n  commentId: M:System.Collections.BitArray.Get(System.Int32)\n  id: Get(System.Int32)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: Get(Int32)\n  fullName: System.Collections.BitArray.Get(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Get\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 191\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the value of the bit at a specific position in the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Get(int index)\n    content.vb: Public Function Get(index As Integer) As Boolean\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the value to get. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value of the bit at position <em>index</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> is greater than or equal to the number of elements in the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitArray.Get(Int32)\n- uid: System.Collections.BitArray.GetEnumerator\n  commentId: M:System.Collections.BitArray.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.BitArray.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnumerator\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 437\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an enumerator that iterates through the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public IEnumerator GetEnumerator()\n    content.vb: Public Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the entire <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitArray.GetEnumerator()\n- uid: System.Collections.BitArray.Not\n  commentId: M:System.Collections.BitArray.Not\n  id: Not\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: Not()\n  fullName: System.Collections.BitArray.Not()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Not\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 305\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Inverts all the bit values in the current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, so that elements set to <strong>true</strong> are changed to <strong>false</strong>, and elements set to <strong>false</strong> are changed to <strong>true</strong>.</p>\\n\"\n  syntax:\n    content: public BitArray Not()\n    content.vb: Public Function Not As BitArray\n    return:\n      type: System.Collections.BitArray\n      description: \"\\n<p>The current instance with inverted bit values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitArray.Not()\n- uid: System.Collections.BitArray.Or(System.Collections.BitArray)\n  commentId: M:System.Collections.BitArray.Or(System.Collections.BitArray)\n  id: Or(System.Collections.BitArray)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: Or(BitArray)\n  fullName: System.Collections.BitArray.Or(System.Collections.BitArray)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Or\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 262\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Performs the bitwise OR operation between the elements of the current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and the corresponding elements in the specified array. The current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object will be modified to store the result of the bitwise OR operation.</p>\\n\"\n  syntax:\n    content: public BitArray Or(BitArray value)\n    content.vb: Public Function Or(value As BitArray) As BitArray\n    parameters:\n    - id: value\n      type: System.Collections.BitArray\n      description: \"\\n<p>The array with which to perform the bitwise OR operation. </p>\\n\"\n    return:\n      type: System.Collections.BitArray\n      description: \"\\n<p>An array containing the result of the bitwise OR operation, which is a reference to the current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> and the current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> do not have the same number of elements. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitArray.Or(BitArray)\n- uid: System.Collections.BitArray.Set(System.Int32,System.Boolean)\n  commentId: M:System.Collections.BitArray.Set(System.Int32,System.Boolean)\n  id: Set(System.Int32,System.Boolean)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: Set(Int32, Boolean)\n  fullName: System.Collections.BitArray.Set(System.Int32, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Set\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 206\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Sets the bit at a specific position in the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the specified value.</p>\\n\"\n  syntax:\n    content: public void Set(int index, bool value)\n    content.vb: Public Sub Set(index As Integer, value As Boolean)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the bit to set. </p>\\n\"\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to assign to the bit. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> is greater than or equal to the number of elements in the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitArray.Set(Int32, Boolean)\n- uid: System.Collections.BitArray.SetAll(System.Boolean)\n  commentId: M:System.Collections.BitArray.SetAll(System.Boolean)\n  id: SetAll(System.Boolean)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: SetAll(Boolean)\n  fullName: System.Collections.BitArray.SetAll(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetAll\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 224\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Sets all bits in the <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the specified value.</p>\\n\"\n  syntax:\n    content: public void SetAll(bool value)\n    content.vb: Public Sub SetAll(value As Boolean)\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to assign to all bits. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitArray.SetAll(Boolean)\n- uid: System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Collections.BitArray.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections/ref/System.Collections.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/System.Collections/ref/System.Collections.cs\n    startLine: 30\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n    - id: index\n      type: System.Int32\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: BitArray.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: BitArray.System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Collections.BitArray.Xor(System.Collections.BitArray)\n  commentId: M:System.Collections.BitArray.Xor(System.Collections.BitArray)\n  id: Xor(System.Collections.BitArray)\n  parent: System.Collections.BitArray\n  langs:\n  - csharp\n  - vb\n  name: Xor(BitArray)\n  fullName: System.Collections.BitArray.Xor(System.Collections.BitArray)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/BitArray.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Xor\n    path: src/mscorlib/src/System/Collections/BitArray.cs\n    startLine: 284\n  assemblies:\n  - System.Collections\n  namespace: System.Collections\n  summary: \"\\n<p>Performs the bitwise exclusive OR operation between the elements of the current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object against the corresponding elements in the specified array. The current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object will be modified to store the result of the bitwise exclusive OR operation.</p>\\n\"\n  syntax:\n    content: public BitArray Xor(BitArray value)\n    content.vb: Public Function Xor(value As BitArray) As BitArray\n    parameters:\n    - id: value\n      type: System.Collections.BitArray\n      description: \"\\n<p>The array with which to perform the bitwise exclusive OR operation. </p>\\n\"\n    return:\n      type: System.Collections.BitArray\n      description: \"\\n<p>An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> and the current <xref href=\\\"System.Collections.BitArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> do not have the same number of elements. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitArray.Xor(BitArray)\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Boolean[]\n  name: Boolean[]\n  fullName: System.Boolean[]\n  fullname.vb: System.Boolean()\n  name.vb: Boolean()\n  spec.csharp:\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Boolean[]\n  nameWithType.vb: Boolean()\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Collections.BitArray\n  parent: System.Collections\n  isExternal: false\n  name: BitArray\n  fullName: System.Collections.BitArray\n  nameWithType: BitArray\n  commentId: T:System.Collections.BitArray\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}