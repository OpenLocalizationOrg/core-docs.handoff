{"nodes":[{"pos":[1737,1752],"content":"FileVersionInfo","needQuote":true,"nodes":[{"content":"FileVersionInfo","pos":[0,15]}]},{"pos":[3394,3402],"content":"Comments","needQuote":true,"nodes":[{"content":"Comments","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The comments associated with the file or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[4132,4254],"source":"\\n<p>The comments associated with the file or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[4590,4601],"content":"CompanyName","needQuote":true,"nodes":[{"content":"CompanyName","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The name of the company that produced the file or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[5352,5483],"source":"\\n<p>The name of the company that produced the file or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[5828,5841],"content":"FileBuildPart","needQuote":true,"nodes":[{"content":"FileBuildPart","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A value representing the build number of the file or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[6579,6713],"source":"\\n<p>A value representing the build number of the file or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[7634,7649],"content":"FileDescription","needQuote":true,"nodes":[{"content":"FileDescription","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The description of the file or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[8397,8509],"source":"\\n<p>The description of the file or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[8858,8871],"content":"FileMajorPart","needQuote":true,"nodes":[{"content":"FileMajorPart","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A value representing the major part of the version number or 0 (zero) if the file did not contain version information.&lt;/p&gt;\\n","pos":[9617,9746],"source":"\\n<p>A value representing the major part of the version number or 0 (zero) if the file did not contain version information.</p>\\n"},{"pos":[10532,10545],"content":"FileMinorPart","needQuote":true,"nodes":[{"content":"FileMinorPart","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A value representing the minor part of the version number of the file or 0 (zero) if the file did not contain version information.&lt;/p&gt;\\n","pos":[11303,11444],"source":"\\n<p>A value representing the minor part of the version number of the file or 0 (zero) if the file did not contain version information.</p>\\n"},{"pos":[12215,12223],"content":"FileName","needQuote":true,"nodes":[{"content":"FileName","pos":[0,8]}]},{"pos":[13692,13707],"content":"FilePrivatePart","needQuote":true,"nodes":[{"content":"FilePrivatePart","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A value representing the file private part number or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[14454,14588],"source":"\\n<p>A value representing the file private part number or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[15495,15506],"content":"FileVersion","needQuote":true,"nodes":[{"content":"FileVersion","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The version number of the file or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[16235,16350],"source":"\\n<p>The version number of the file or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[17264,17276],"content":"InternalName","needQuote":true,"nodes":[{"content":"InternalName","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The internal name of the file.","pos":[18030,18065],"source":"\\n<p>The internal name of the file."},{"content":"If none exists, this property will contain the original name of the file without the extension.&lt;/p&gt;\\n","pos":[18066,18167],"source":" If none exists, this property will contain the original name of the file without the extension.</p>\\n"},{"pos":[18495,18502],"content":"IsDebug","needQuote":true,"nodes":[{"content":"IsDebug","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the file contains debugging information or is compiled with debugging features enabled; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19309,19469],"source":"\\n<p>\\n<strong>true</strong> if the file contains debugging information or is compiled with debugging features enabled; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[19798,19807],"content":"IsPatched","needQuote":true,"nodes":[{"content":"IsPatched","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the file is patched; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20640,20733],"source":"\\n<p>\\n<strong>true</strong> if the file is patched; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[21073,21085],"content":"IsPreRelease","needQuote":true,"nodes":[{"content":"IsPreRelease","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the file is prerelease; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21904,22000],"source":"\\n<p>\\n<strong>true</strong> if the file is prerelease; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[22349,22363],"content":"IsPrivateBuild","needQuote":true,"nodes":[{"content":"IsPrivateBuild","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the file is a private build; &lt;strong&gt;false&lt;/strong&gt; if the file was built using standard release procedures or if the file did not contain version information.&lt;/p&gt;\\n","pos":[23164,23361],"source":"\\n<p>\\n<strong>true</strong> if the file is a private build; <strong>false</strong> if the file was built using standard release procedures or if the file did not contain version information.</p>\\n"},{"pos":[23846,23860],"content":"IsSpecialBuild","needQuote":true,"nodes":[{"content":"IsSpecialBuild","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the file is a special build; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24636,24737],"source":"\\n<p>\\n<strong>true</strong> if the file is a special build; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[25204,25212],"content":"Language","needQuote":true,"nodes":[{"content":"Language","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The description string for the Microsoft Language Identifier in the version resource or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[25960,26129],"source":"\\n<p>The description string for the Microsoft Language Identifier in the version resource or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[26474,26488],"content":"LegalCopyright","needQuote":true,"nodes":[{"content":"LegalCopyright","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The copyright notices that apply to the specified file.&lt;/p&gt;\\n","pos":[27260,27326],"source":"\\n<p>The copyright notices that apply to the specified file.</p>\\n"},{"pos":[27680,27695],"content":"LegalTrademarks","needQuote":true,"nodes":[{"content":"LegalTrademarks","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The trademarks and registered trademarks that apply to the file or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[28480,28628],"source":"\\n<p>The trademarks and registered trademarks that apply to the file or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[28986,29002],"content":"OriginalFilename","needQuote":true,"nodes":[{"content":"OriginalFilename","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The name the file was created with or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[29762,29881],"source":"\\n<p>The name the file was created with or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[30228,30240],"content":"PrivateBuild","needQuote":true,"nodes":[{"content":"PrivateBuild","pos":[0,12]}]},{"content":"\\n&lt;p&gt;Information about a private version of the file or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[30997,31129],"source":"\\n<p>Information about a private version of the file or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[31622,31638],"content":"ProductBuildPart","needQuote":true,"nodes":[{"content":"ProductBuildPart","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A value representing the build number of the product this file is associated with or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[32421,32587],"source":"\\n<p>A value representing the build number of the product this file is associated with or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[33481,33497],"content":"ProductMajorPart","needQuote":true,"nodes":[{"content":"ProductMajorPart","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A value representing the major part of the product version number or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[34301,34451],"source":"\\n<p>A value representing the major part of the product version number or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[35210,35226],"content":"ProductMinorPart","needQuote":true,"nodes":[{"content":"ProductMinorPart","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A value representing the minor part of the product version number or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[36029,36179],"source":"\\n<p>A value representing the minor part of the product version number or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[36923,36934],"content":"ProductName","needQuote":true,"nodes":[{"content":"ProductName","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The name of the product this file is distributed with or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[37693,37831],"source":"\\n<p>The name of the product this file is distributed with or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[38191,38209],"content":"ProductPrivatePart","needQuote":true,"nodes":[{"content":"ProductPrivatePart","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A value representing the private part number of the product this file is associated with or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[39007,39180],"source":"\\n<p>A value representing the private part number of the product this file is associated with or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[40066,40080],"content":"ProductVersion","needQuote":true,"nodes":[{"content":"ProductVersion","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The version of the product this file is distributed with or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[40854,40995],"source":"\\n<p>The version of the product this file is distributed with or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[41879,41891],"content":"SpecialBuild","needQuote":true,"nodes":[{"content":"SpecialBuild","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The special build information for the file or &lt;strong&gt;null&lt;/strong&gt; if the file did not contain version information.&lt;/p&gt;\\n","pos":[42643,42770],"source":"\\n<p>The special build information for the file or <strong>null</strong> if the file did not contain version information.</p>\\n"},{"pos":[43302,43324],"content":"GetVersionInfo(String)","needQuote":true,"nodes":[{"content":"GetVersionInfo(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The fully qualified path and name of the file to retrieve the version information for.","pos":[44281,44372],"source":"\\n<p>The fully qualified path and name of the file to retrieve the version information for."},{"content":"&lt;/p&gt;\\n","pos":[44373,44379],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The file specified cannot be found.","pos":[44925,44965],"source":"\\n<p>The file specified cannot be found."},{"content":"&lt;/p&gt;\\n","pos":[44966,44972],"source":" </p>\\n"},{"pos":[48828,48838],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[53226,53244],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[53411,53417],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53590,53604],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[53723,53729],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[53796,53797],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53847,53853],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53913,53914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53997,54003],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[54070,54071],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54121,54127],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54187,54188],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54402,54424],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[54572,54578],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[54645,54646],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54696,54702],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[54763,54764]},{"pos":[54819,54825],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54885,54886],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54983,54989],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[55056,55057],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55107,55113],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[55174,55175]},{"pos":[55230,55236],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55296,55297],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55542,55573],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[55739,55754],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[55830,55831],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55881,55887],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[55948,55949]},{"pos":[56004,56010],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56070,56071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56177,56192],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[56268,56269],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56319,56325],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[56386,56387]},{"pos":[56442,56448],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56508,56509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56739,56752],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[56853,56864],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[56936,56937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56964,56965],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57038,57049],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[57121,57122],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57149,57150],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57325,57334],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[57427,57434],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[57502,57503],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57530,57531],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57600,57607],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[57675,57676],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57703,57704],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57879,57896],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[58005,58020],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[58096,58097],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58124,58125],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58202,58217],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[58293,58294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58321,58322],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58467,58473],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[58604,58610],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[58754,58759],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[58902,58909],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[59090,59105],"content":"FileVersionInfo","needQuote":true,"nodes":[{"content":"FileVersionInfo","pos":[0,15]}]},{"pos":[59316,59326],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[59421,59429],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[59498,59499],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59526,59527],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59597,59605],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[59674,59675],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59702,59703],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59859,59880],"content":"FileNotFoundException","needQuote":true,"nodes":[{"content":"FileNotFoundException","pos":[0,21]}]}],"content":"items:\n- uid: System.Diagnostics.FileVersionInfo\n  commentId: T:System.Diagnostics.FileVersionInfo\n  id: FileVersionInfo\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.FileVersionInfo.Comments\n  - System.Diagnostics.FileVersionInfo.CompanyName\n  - System.Diagnostics.FileVersionInfo.FileBuildPart\n  - System.Diagnostics.FileVersionInfo.FileDescription\n  - System.Diagnostics.FileVersionInfo.FileMajorPart\n  - System.Diagnostics.FileVersionInfo.FileMinorPart\n  - System.Diagnostics.FileVersionInfo.FileName\n  - System.Diagnostics.FileVersionInfo.FilePrivatePart\n  - System.Diagnostics.FileVersionInfo.FileVersion\n  - System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\n  - System.Diagnostics.FileVersionInfo.InternalName\n  - System.Diagnostics.FileVersionInfo.IsDebug\n  - System.Diagnostics.FileVersionInfo.IsPatched\n  - System.Diagnostics.FileVersionInfo.IsPreRelease\n  - System.Diagnostics.FileVersionInfo.IsPrivateBuild\n  - System.Diagnostics.FileVersionInfo.IsSpecialBuild\n  - System.Diagnostics.FileVersionInfo.Language\n  - System.Diagnostics.FileVersionInfo.LegalCopyright\n  - System.Diagnostics.FileVersionInfo.LegalTrademarks\n  - System.Diagnostics.FileVersionInfo.OriginalFilename\n  - System.Diagnostics.FileVersionInfo.PrivateBuild\n  - System.Diagnostics.FileVersionInfo.ProductBuildPart\n  - System.Diagnostics.FileVersionInfo.ProductMajorPart\n  - System.Diagnostics.FileVersionInfo.ProductMinorPart\n  - System.Diagnostics.FileVersionInfo.ProductName\n  - System.Diagnostics.FileVersionInfo.ProductPrivatePart\n  - System.Diagnostics.FileVersionInfo.ProductVersion\n  - System.Diagnostics.FileVersionInfo.SpecialBuild\n  - System.Diagnostics.FileVersionInfo.ToString\n  langs:\n  - csharp\n  - vb\n  name: FileVersionInfo\n  fullName: System.Diagnostics.FileVersionInfo\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FileVersionInfo\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 12\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides version information for a physical file on disk.</p>\\n\"\n  syntax:\n    content: public sealed class FileVersionInfo\n    content.vb: Public NotInheritable Class FileVersionInfo\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.FileVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion\n  - type: System.Version\n    commentId: T:System.Version\n  see:\n  - type: System.Security.Permissions.SecurityAction.LinkDemand\n    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: FileVersionInfo\n- uid: System.Diagnostics.FileVersionInfo.Comments\n  commentId: P:System.Diagnostics.FileVersionInfo.Comments\n  id: Comments\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: Comments\n  fullName: System.Diagnostics.FileVersionInfo.Comments\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Comments\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 46\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the comments associated with the file.</p>\\n\"\n  syntax:\n    content: public string Comments { get; }\n    content.vb: Public ReadOnly Property Comments As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The comments associated with the file or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.Comments\n- uid: System.Diagnostics.FileVersionInfo.CompanyName\n  commentId: P:System.Diagnostics.FileVersionInfo.CompanyName\n  id: CompanyName\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: CompanyName\n  fullName: System.Diagnostics.FileVersionInfo.CompanyName\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompanyName\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 54\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the name of the company that produced the file.</p>\\n\"\n  syntax:\n    content: public string CompanyName { get; }\n    content.vb: Public ReadOnly Property CompanyName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the company that produced the file or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.CompanyName\n- uid: System.Diagnostics.FileVersionInfo.FileBuildPart\n  commentId: P:System.Diagnostics.FileVersionInfo.FileBuildPart\n  id: FileBuildPart\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: FileBuildPart\n  fullName: System.Diagnostics.FileVersionInfo.FileBuildPart\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FileBuildPart\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 62\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the build number of the file.</p>\\n\"\n  syntax:\n    content: public int FileBuildPart { get; }\n    content.vb: Public ReadOnly Property FileBuildPart As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value representing the build number of the file or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.FileMajorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileMajorPart\n  - type: System.Diagnostics.FileVersionInfo.FileMinorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileMinorPart\n  - type: System.Diagnostics.FileVersionInfo.FileVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion\n  - type: System.Version\n    commentId: T:System.Version\n  - type: System.Diagnostics.FileVersionInfo.FilePrivatePart\n    commentId: P:System.Diagnostics.FileVersionInfo.FilePrivatePart\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.FileBuildPart\n- uid: System.Diagnostics.FileVersionInfo.FileDescription\n  commentId: P:System.Diagnostics.FileVersionInfo.FileDescription\n  id: FileDescription\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: FileDescription\n  fullName: System.Diagnostics.FileVersionInfo.FileDescription\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FileDescription\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 70\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the description of the file.</p>\\n\"\n  syntax:\n    content: public string FileDescription { get; }\n    content.vb: Public ReadOnly Property FileDescription As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The description of the file or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.FileDescription\n- uid: System.Diagnostics.FileVersionInfo.FileMajorPart\n  commentId: P:System.Diagnostics.FileVersionInfo.FileMajorPart\n  id: FileMajorPart\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: FileMajorPart\n  fullName: System.Diagnostics.FileVersionInfo.FileMajorPart\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FileMajorPart\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 78\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the major part of the version number.</p>\\n\"\n  syntax:\n    content: public int FileMajorPart { get; }\n    content.vb: Public ReadOnly Property FileMajorPart As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value representing the major part of the version number or 0 (zero) if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.FileBuildPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileBuildPart\n  - type: System.Diagnostics.FileVersionInfo.FileMinorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileMinorPart\n  - type: System.Diagnostics.FileVersionInfo.FileVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion\n  - type: System.Version\n    commentId: T:System.Version\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.FileMajorPart\n- uid: System.Diagnostics.FileVersionInfo.FileMinorPart\n  commentId: P:System.Diagnostics.FileVersionInfo.FileMinorPart\n  id: FileMinorPart\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: FileMinorPart\n  fullName: System.Diagnostics.FileVersionInfo.FileMinorPart\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FileMinorPart\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 86\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the minor part of the version number of the file.</p>\\n\"\n  syntax:\n    content: public int FileMinorPart { get; }\n    content.vb: Public ReadOnly Property FileMinorPart As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value representing the minor part of the version number of the file or 0 (zero) if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.FileMajorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileMajorPart\n  - type: System.Diagnostics.FileVersionInfo.FileBuildPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileBuildPart\n  - type: System.Diagnostics.FileVersionInfo.FileVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion\n  - type: System.Version\n    commentId: T:System.Version\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.FileMinorPart\n- uid: System.Diagnostics.FileVersionInfo.FileName\n  commentId: P:System.Diagnostics.FileVersionInfo.FileName\n  id: FileName\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: FileName\n  fullName: System.Diagnostics.FileVersionInfo.FileName\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FileName\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 94\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the name of the file that this instance of <xref href=\\\"System.Diagnostics.FileVersionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> describes.</p>\\n\"\n  syntax:\n    content: public string FileName { get; }\n    content.vb: Public ReadOnly Property FileName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the file described by this instance of <xref href=\\\"System.Diagnostics.FileVersionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.FileName\n- uid: System.Diagnostics.FileVersionInfo.FilePrivatePart\n  commentId: P:System.Diagnostics.FileVersionInfo.FilePrivatePart\n  id: FilePrivatePart\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: FilePrivatePart\n  fullName: System.Diagnostics.FileVersionInfo.FilePrivatePart\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FilePrivatePart\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 102\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the file private part number.</p>\\n\"\n  syntax:\n    content: public int FilePrivatePart { get; }\n    content.vb: Public ReadOnly Property FilePrivatePart As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value representing the file private part number or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.FileBuildPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileBuildPart\n  - type: System.Diagnostics.FileVersionInfo.FileMinorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileMinorPart\n  - type: System.Diagnostics.FileVersionInfo.FileVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion\n  - type: System.Version\n    commentId: T:System.Version\n  - type: System.Diagnostics.FileVersionInfo.FileMajorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileMajorPart\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.FilePrivatePart\n- uid: System.Diagnostics.FileVersionInfo.FileVersion\n  commentId: P:System.Diagnostics.FileVersionInfo.FileVersion\n  id: FileVersion\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: FileVersion\n  fullName: System.Diagnostics.FileVersionInfo.FileVersion\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FileVersion\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 110\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the file version number.</p>\\n\"\n  syntax:\n    content: public string FileVersion { get; }\n    content.vb: Public ReadOnly Property FileVersion As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The version number of the file or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.FileBuildPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileBuildPart\n  - type: System.Diagnostics.FileVersionInfo.FileMinorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileMinorPart\n  - type: System.Diagnostics.FileVersionInfo.FileMajorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileMajorPart\n  - type: System.Version\n    commentId: T:System.Version\n  - type: System.Diagnostics.FileVersionInfo.FilePrivatePart\n    commentId: P:System.Diagnostics.FileVersionInfo.FilePrivatePart\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.FileVersion\n- uid: System.Diagnostics.FileVersionInfo.InternalName\n  commentId: P:System.Diagnostics.FileVersionInfo.InternalName\n  id: InternalName\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: InternalName\n  fullName: System.Diagnostics.FileVersionInfo.InternalName\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InternalName\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 118\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the internal name of the file, if one exists.</p>\\n\"\n  syntax:\n    content: public string InternalName { get; }\n    content.vb: Public ReadOnly Property InternalName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The internal name of the file. If none exists, this property will contain the original name of the file without the extension.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.InternalName\n- uid: System.Diagnostics.FileVersionInfo.IsDebug\n  commentId: P:System.Diagnostics.FileVersionInfo.IsDebug\n  id: IsDebug\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: IsDebug\n  fullName: System.Diagnostics.FileVersionInfo.IsDebug\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDebug\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 127\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets a value that specifies whether the file contains debugging information or is compiled with debugging features enabled.</p>\\n\"\n  syntax:\n    content: public bool IsDebug { get; }\n    content.vb: Public ReadOnly Property IsDebug As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the file contains debugging information or is compiled with debugging features enabled; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.IsDebug\n- uid: System.Diagnostics.FileVersionInfo.IsPatched\n  commentId: P:System.Diagnostics.FileVersionInfo.IsPatched\n  id: IsPatched\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: IsPatched\n  fullName: System.Diagnostics.FileVersionInfo.IsPatched\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsPatched\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 136\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets a value that specifies whether the file has been modified and is not identical to the original shipping file of the same version number.</p>\\n\"\n  syntax:\n    content: public bool IsPatched { get; }\n    content.vb: Public ReadOnly Property IsPatched As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the file is patched; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.IsPatched\n- uid: System.Diagnostics.FileVersionInfo.IsPreRelease\n  commentId: P:System.Diagnostics.FileVersionInfo.IsPreRelease\n  id: IsPreRelease\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: IsPreRelease\n  fullName: System.Diagnostics.FileVersionInfo.IsPreRelease\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsPreRelease\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 153\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets a value that specifies whether the file is a development version, rather than a commercially released product.</p>\\n\"\n  syntax:\n    content: public bool IsPreRelease { get; }\n    content.vb: Public ReadOnly Property IsPreRelease As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the file is prerelease; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.IsPreRelease\n- uid: System.Diagnostics.FileVersionInfo.IsPrivateBuild\n  commentId: P:System.Diagnostics.FileVersionInfo.IsPrivateBuild\n  id: IsPrivateBuild\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: IsPrivateBuild\n  fullName: System.Diagnostics.FileVersionInfo.IsPrivateBuild\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsPrivateBuild\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 144\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets a value that specifies whether the file was built using standard release procedures.</p>\\n\"\n  syntax:\n    content: public bool IsPrivateBuild { get; }\n    content.vb: Public ReadOnly Property IsPrivateBuild As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the file is a private build; <strong>false</strong> if the file was built using standard release procedures or if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.PrivateBuild\n    commentId: P:System.Diagnostics.FileVersionInfo.PrivateBuild\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.IsPrivateBuild\n- uid: System.Diagnostics.FileVersionInfo.IsSpecialBuild\n  commentId: P:System.Diagnostics.FileVersionInfo.IsSpecialBuild\n  id: IsSpecialBuild\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: IsSpecialBuild\n  fullName: System.Diagnostics.FileVersionInfo.IsSpecialBuild\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSpecialBuild\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 161\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets a value that specifies whether the file is a special build.</p>\\n\"\n  syntax:\n    content: public bool IsSpecialBuild { get; }\n    content.vb: Public ReadOnly Property IsSpecialBuild As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the file is a special build; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.SpecialBuild\n    commentId: P:System.Diagnostics.FileVersionInfo.SpecialBuild\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.IsSpecialBuild\n- uid: System.Diagnostics.FileVersionInfo.Language\n  commentId: P:System.Diagnostics.FileVersionInfo.Language\n  id: Language\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: Language\n  fullName: System.Diagnostics.FileVersionInfo.Language\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Language\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 169\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the default language string for the version info block.</p>\\n\"\n  syntax:\n    content: public string Language { get; }\n    content.vb: Public ReadOnly Property Language As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The description string for the Microsoft Language Identifier in the version resource or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.Language\n- uid: System.Diagnostics.FileVersionInfo.LegalCopyright\n  commentId: P:System.Diagnostics.FileVersionInfo.LegalCopyright\n  id: LegalCopyright\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: LegalCopyright\n  fullName: System.Diagnostics.FileVersionInfo.LegalCopyright\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalCopyright\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 177\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets all copyright notices that apply to the specified file.</p>\\n\"\n  syntax:\n    content: public string LegalCopyright { get; }\n    content.vb: Public ReadOnly Property LegalCopyright As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The copyright notices that apply to the specified file.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.LegalCopyright\n- uid: System.Diagnostics.FileVersionInfo.LegalTrademarks\n  commentId: P:System.Diagnostics.FileVersionInfo.LegalTrademarks\n  id: LegalTrademarks\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: LegalTrademarks\n  fullName: System.Diagnostics.FileVersionInfo.LegalTrademarks\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalTrademarks\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 185\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the trademarks and registered trademarks that apply to the file.</p>\\n\"\n  syntax:\n    content: public string LegalTrademarks { get; }\n    content.vb: Public ReadOnly Property LegalTrademarks As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The trademarks and registered trademarks that apply to the file or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.LegalTrademarks\n- uid: System.Diagnostics.FileVersionInfo.OriginalFilename\n  commentId: P:System.Diagnostics.FileVersionInfo.OriginalFilename\n  id: OriginalFilename\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: OriginalFilename\n  fullName: System.Diagnostics.FileVersionInfo.OriginalFilename\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OriginalFilename\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 193\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the name the file was created with.</p>\\n\"\n  syntax:\n    content: public string OriginalFilename { get; }\n    content.vb: Public ReadOnly Property OriginalFilename As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name the file was created with or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.OriginalFilename\n- uid: System.Diagnostics.FileVersionInfo.PrivateBuild\n  commentId: P:System.Diagnostics.FileVersionInfo.PrivateBuild\n  id: PrivateBuild\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: PrivateBuild\n  fullName: System.Diagnostics.FileVersionInfo.PrivateBuild\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PrivateBuild\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 201\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets information about a private version of the file.</p>\\n\"\n  syntax:\n    content: public string PrivateBuild { get; }\n    content.vb: Public ReadOnly Property PrivateBuild As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Information about a private version of the file or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.IsPrivateBuild\n    commentId: P:System.Diagnostics.FileVersionInfo.IsPrivateBuild\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.PrivateBuild\n- uid: System.Diagnostics.FileVersionInfo.ProductBuildPart\n  commentId: P:System.Diagnostics.FileVersionInfo.ProductBuildPart\n  id: ProductBuildPart\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: ProductBuildPart\n  fullName: System.Diagnostics.FileVersionInfo.ProductBuildPart\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProductBuildPart\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 209\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the build number of the product this file is associated with.</p>\\n\"\n  syntax:\n    content: public int ProductBuildPart { get; }\n    content.vb: Public ReadOnly Property ProductBuildPart As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value representing the build number of the product this file is associated with or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.ProductVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion\n  - type: System.Diagnostics.FileVersionInfo.ProductMajorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductMajorPart\n  - type: System.Diagnostics.FileVersionInfo.ProductMinorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductMinorPart\n  - type: System.Diagnostics.FileVersionInfo.ProductPrivatePart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductPrivatePart\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.ProductBuildPart\n- uid: System.Diagnostics.FileVersionInfo.ProductMajorPart\n  commentId: P:System.Diagnostics.FileVersionInfo.ProductMajorPart\n  id: ProductMajorPart\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: ProductMajorPart\n  fullName: System.Diagnostics.FileVersionInfo.ProductMajorPart\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProductMajorPart\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 217\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the major part of the version number for the product this file is associated with.</p>\\n\"\n  syntax:\n    content: public int ProductMajorPart { get; }\n    content.vb: Public ReadOnly Property ProductMajorPart As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value representing the major part of the product version number or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.ProductBuildPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductBuildPart\n  - type: System.Diagnostics.FileVersionInfo.ProductMinorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductMinorPart\n  - type: System.Diagnostics.FileVersionInfo.ProductVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.ProductMajorPart\n- uid: System.Diagnostics.FileVersionInfo.ProductMinorPart\n  commentId: P:System.Diagnostics.FileVersionInfo.ProductMinorPart\n  id: ProductMinorPart\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: ProductMinorPart\n  fullName: System.Diagnostics.FileVersionInfo.ProductMinorPart\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProductMinorPart\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 225\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the minor part of the version number for the product the file is associated with.</p>\\n\"\n  syntax:\n    content: public int ProductMinorPart { get; }\n    content.vb: Public ReadOnly Property ProductMinorPart As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value representing the minor part of the product version number or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.ProductBuildPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductBuildPart\n  - type: System.Diagnostics.FileVersionInfo.ProductMajorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductMajorPart\n  - type: System.Diagnostics.FileVersionInfo.ProductVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.ProductMinorPart\n- uid: System.Diagnostics.FileVersionInfo.ProductName\n  commentId: P:System.Diagnostics.FileVersionInfo.ProductName\n  id: ProductName\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: ProductName\n  fullName: System.Diagnostics.FileVersionInfo.ProductName\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProductName\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 233\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the name of the product this file is distributed with.</p>\\n\"\n  syntax:\n    content: public string ProductName { get; }\n    content.vb: Public ReadOnly Property ProductName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the product this file is distributed with or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.ProductName\n- uid: System.Diagnostics.FileVersionInfo.ProductPrivatePart\n  commentId: P:System.Diagnostics.FileVersionInfo.ProductPrivatePart\n  id: ProductPrivatePart\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: ProductPrivatePart\n  fullName: System.Diagnostics.FileVersionInfo.ProductPrivatePart\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProductPrivatePart\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 241\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the private part number of the product this file is associated with.</p>\\n\"\n  syntax:\n    content: public int ProductPrivatePart { get; }\n    content.vb: Public ReadOnly Property ProductPrivatePart As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value representing the private part number of the product this file is associated with or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.ProductBuildPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductBuildPart\n  - type: System.Diagnostics.FileVersionInfo.ProductMinorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductMinorPart\n  - type: System.Diagnostics.FileVersionInfo.ProductMajorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductMajorPart\n  - type: System.Diagnostics.FileVersionInfo.ProductVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.ProductPrivatePart\n- uid: System.Diagnostics.FileVersionInfo.ProductVersion\n  commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion\n  id: ProductVersion\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: ProductVersion\n  fullName: System.Diagnostics.FileVersionInfo.ProductVersion\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProductVersion\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 249\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the version of the product this file is distributed with.</p>\\n\"\n  syntax:\n    content: public string ProductVersion { get; }\n    content.vb: Public ReadOnly Property ProductVersion As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The version of the product this file is distributed with or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.ProductBuildPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductBuildPart\n  - type: System.Diagnostics.FileVersionInfo.ProductMinorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductMinorPart\n  - type: System.Diagnostics.FileVersionInfo.ProductMajorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductMajorPart\n  - type: System.Diagnostics.FileVersionInfo.ProductPrivatePart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductPrivatePart\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.ProductVersion\n- uid: System.Diagnostics.FileVersionInfo.SpecialBuild\n  commentId: P:System.Diagnostics.FileVersionInfo.SpecialBuild\n  id: SpecialBuild\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: SpecialBuild\n  fullName: System.Diagnostics.FileVersionInfo.SpecialBuild\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SpecialBuild\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 257\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the special build information for the file.</p>\\n\"\n  syntax:\n    content: public string SpecialBuild { get; }\n    content.vb: Public ReadOnly Property SpecialBuild As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The special build information for the file or <strong>null</strong> if the file did not contain version information.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.IsSpecialBuild\n    commentId: P:System.Diagnostics.FileVersionInfo.IsSpecialBuild\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: FileVersionInfo.SpecialBuild\n- uid: System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\n  commentId: M:System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\n  id: GetVersionInfo(System.String)\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: GetVersionInfo(String)\n  fullName: System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetVersionInfo\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 265\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Diagnostics.FileVersionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the version information associated with the specified file.</p>\\n\"\n  syntax:\n    content: public static FileVersionInfo GetVersionInfo(string fileName)\n    content.vb: Public Shared Function GetVersionInfo(fileName As String) As FileVersionInfo\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>The fully qualified path and name of the file to retrieve the version information for. </p>\\n\"\n    return:\n      type: System.Diagnostics.FileVersionInfo\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.FileVersionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing information about the file. If the file did not contain version information, the <xref href=\\\"System.Diagnostics.FileVersionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains only the name of the file requested.</p>\\n\"\n  exceptions:\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>The file specified cannot be found. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.SpecialBuild\n    commentId: P:System.Diagnostics.FileVersionInfo.SpecialBuild\n  - type: System.Diagnostics.FileVersionInfo.ProductVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion\n  - type: System.Diagnostics.FileVersionInfo.ProductPrivatePart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductPrivatePart\n  - type: System.Diagnostics.FileVersionInfo.ProductName\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductName\n  - type: System.Diagnostics.FileVersionInfo.ProductMinorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductMinorPart\n  - type: System.Diagnostics.FileVersionInfo.ProductMajorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductMajorPart\n  - type: System.Diagnostics.FileVersionInfo.ProductBuildPart\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductBuildPart\n  - type: System.Diagnostics.FileVersionInfo.PrivateBuild\n    commentId: P:System.Diagnostics.FileVersionInfo.PrivateBuild\n  - type: System.Diagnostics.FileVersionInfo.OriginalFilename\n    commentId: P:System.Diagnostics.FileVersionInfo.OriginalFilename\n  - type: System.Diagnostics.FileVersionInfo.LegalTrademarks\n    commentId: P:System.Diagnostics.FileVersionInfo.LegalTrademarks\n  - type: System.Diagnostics.FileVersionInfo.LegalCopyright\n    commentId: P:System.Diagnostics.FileVersionInfo.LegalCopyright\n  - type: System.Diagnostics.FileVersionInfo.IsSpecialBuild\n    commentId: P:System.Diagnostics.FileVersionInfo.IsSpecialBuild\n  - type: System.Diagnostics.FileVersionInfo.IsPreRelease\n    commentId: P:System.Diagnostics.FileVersionInfo.IsPreRelease\n  - type: System.Diagnostics.FileVersionInfo.IsPrivateBuild\n    commentId: P:System.Diagnostics.FileVersionInfo.IsPrivateBuild\n  - type: System.Diagnostics.FileVersionInfo.IsPatched\n    commentId: P:System.Diagnostics.FileVersionInfo.IsPatched\n  - type: System.Diagnostics.FileVersionInfo.IsDebug\n    commentId: P:System.Diagnostics.FileVersionInfo.IsDebug\n  - type: System.Diagnostics.FileVersionInfo.InternalName\n    commentId: P:System.Diagnostics.FileVersionInfo.InternalName\n  - type: System.Diagnostics.FileVersionInfo.FileVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion\n  - type: System.Diagnostics.FileVersionInfo.FilePrivatePart\n    commentId: P:System.Diagnostics.FileVersionInfo.FilePrivatePart\n  - type: System.Diagnostics.FileVersionInfo.FileName\n    commentId: P:System.Diagnostics.FileVersionInfo.FileName\n  - type: System.Diagnostics.FileVersionInfo.FileMinorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileMinorPart\n  - type: System.Diagnostics.FileVersionInfo.FileMajorPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileMajorPart\n  - type: System.Diagnostics.FileVersionInfo.FileDescription\n    commentId: P:System.Diagnostics.FileVersionInfo.FileDescription\n  - type: System.Diagnostics.FileVersionInfo.FileBuildPart\n    commentId: P:System.Diagnostics.FileVersionInfo.FileBuildPart\n  - type: System.Diagnostics.FileVersionInfo.CompanyName\n    commentId: P:System.Diagnostics.FileVersionInfo.CompanyName\n  - type: System.Diagnostics.FileVersionInfo.Comments\n    commentId: P:System.Diagnostics.FileVersionInfo.Comments\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  - type: System.Security.Permissions.SecurityAction.LinkDemand\n    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: FileVersionInfo.GetVersionInfo(String)\n- uid: System.Diagnostics.FileVersionInfo.ToString\n  commentId: M:System.Diagnostics.FileVersionInfo.ToString\n  id: ToString\n  parent: System.Diagnostics.FileVersionInfo\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Diagnostics.FileVersionInfo.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.cs\n    startLine: 280\n  assemblies:\n  - System.Diagnostics.FileVersionInfo\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Returns a partial list of properties in the <xref href=\\\"System.Diagnostics.FileVersionInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and their values.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A list of the following properties in this class and their values: </p>\\n<p>\\n<xref href=\\\"System.Diagnostics.FileVersionInfo.FileName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Diagnostics.FileVersionInfo.InternalName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Diagnostics.FileVersionInfo.OriginalFilename\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Diagnostics.FileVersionInfo.FileVersion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Diagnostics.FileVersionInfo.FileDescription\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Diagnostics.FileVersionInfo.ProductName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Diagnostics.FileVersionInfo.ProductVersion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Diagnostics.FileVersionInfo.IsDebug\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Diagnostics.FileVersionInfo.IsPatched\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Diagnostics.FileVersionInfo.IsPreRelease\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Diagnostics.FileVersionInfo.IsPrivateBuild\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Diagnostics.FileVersionInfo.IsSpecialBuild\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>,</p>\\n<p>\\n<xref href=\\\"System.Diagnostics.FileVersionInfo.Language\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>If the file did not contain version information, this list will contain only the name of the requested file. Boolean values will be <strong>false</strong>, and all other entries will be <strong>null</strong>.</p>\\n\"\n  overridden: System.Object.ToString\n  seealso:\n  - type: System.Diagnostics.FileVersionInfo.FileName\n    commentId: P:System.Diagnostics.FileVersionInfo.FileName\n  - type: System.Diagnostics.FileVersionInfo.InternalName\n    commentId: P:System.Diagnostics.FileVersionInfo.InternalName\n  - type: System.Diagnostics.FileVersionInfo.OriginalFilename\n    commentId: P:System.Diagnostics.FileVersionInfo.OriginalFilename\n  - type: System.Diagnostics.FileVersionInfo.FileVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.FileVersion\n  - type: System.Diagnostics.FileVersionInfo.FileDescription\n    commentId: P:System.Diagnostics.FileVersionInfo.FileDescription\n  - type: System.Diagnostics.FileVersionInfo.Language\n    commentId: P:System.Diagnostics.FileVersionInfo.Language\n  - type: System.Diagnostics.FileVersionInfo.ProductName\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductName\n  - type: System.Diagnostics.FileVersionInfo.ProductVersion\n    commentId: P:System.Diagnostics.FileVersionInfo.ProductVersion\n  - type: System.Diagnostics.FileVersionInfo.IsDebug\n    commentId: P:System.Diagnostics.FileVersionInfo.IsDebug\n  - type: System.Diagnostics.FileVersionInfo.IsPatched\n    commentId: P:System.Diagnostics.FileVersionInfo.IsPatched\n  - type: System.Diagnostics.FileVersionInfo.IsPreRelease\n    commentId: P:System.Diagnostics.FileVersionInfo.IsPreRelease\n  - type: System.Diagnostics.FileVersionInfo.IsPrivateBuild\n    commentId: P:System.Diagnostics.FileVersionInfo.IsPrivateBuild\n  - type: System.Diagnostics.FileVersionInfo.IsSpecialBuild\n    commentId: P:System.Diagnostics.FileVersionInfo.IsSpecialBuild\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: FileVersionInfo.ToString()\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Diagnostics.FileVersionInfo\n  parent: System.Diagnostics\n  isExternal: false\n  name: FileVersionInfo\n  fullName: System.Diagnostics.FileVersionInfo\n  nameWithType: FileVersionInfo\n  commentId: T:System.Diagnostics.FileVersionInfo\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.IO.FileNotFoundException\n  isExternal: false\n  name: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n  nameWithType: FileNotFoundException\n  commentId: T:System.IO.FileNotFoundException\n"}