{"nodes":[{"pos":[1998,2012],"content":"TaiwanCalendar","needQuote":true,"nodes":[{"content":"TaiwanCalendar","pos":[0,14]}]},{"pos":[5545,5561],"content":"TaiwanCalendar()","needQuote":true,"nodes":[{"content":"TaiwanCalendar()","pos":[0,16]}]},{"pos":[6837,6841],"content":"Eras","needQuote":true,"nodes":[{"content":"Eras","pos":[0,4]}]},{"content":"\\n&lt;p&gt;An array that consists of a single element for which the value is always the current era.&lt;/p&gt;\\n","pos":[7610,7710],"source":"\\n<p>An array that consists of a single element for which the value is always the current era.</p>\\n"},{"pos":[8267,8287],"content":"MaxSupportedDateTime","needQuote":true,"nodes":[{"content":"MaxSupportedDateTime","pos":[0,20]}]},{"pos":[9930,9950],"content":"MinSupportedDateTime","needQuote":true,"nodes":[{"content":"MinSupportedDateTime","pos":[0,20]}]},{"pos":[11581,11596],"content":"TwoDigitYearMax","needQuote":true,"nodes":[{"content":"TwoDigitYearMax","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The last year of a 100-year range that can be represented by a 2-digit year.&lt;/p&gt;\\n","pos":[12363,12450],"source":"\\n<p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\\n"},{"content":"\\n&lt;p&gt;The value specified in a set operation is less than 99.","pos":[12641,12701],"source":"\\n<p>The value specified in a set operation is less than 99."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The value specified in a set operation is greater than &lt;strong&gt;MaxSupportedDateTime.Year&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12702,12829],"source":" </p>\\n<p>-or- </p>\\n<p>The value specified in a set operation is greater than <strong>MaxSupportedDateTime.Year</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;In a set operation, the current instance is read-only.&lt;/p&gt;\\n","pos":[12942,13007],"source":"\\n<p>In a set operation, the current instance is read-only.</p>\\n"},{"pos":[13628,13654],"content":"AddMonths(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMonths(DateTime, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The number of months to add.","pos":[14792,14825],"source":"\\n<p>The number of months to add."},{"content":"&lt;/p&gt;\\n","pos":[14826,14832],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;months&lt;/em&gt; is less than -120000.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;months&lt;/em&gt; is greater than 120000.","pos":[15579,15687],"source":"\\n<p>\\n<em>months</em> is less than -120000.</p>\\n<p>-or- </p>\\n<p>\\n<em>months</em> is greater than 120000."},{"content":"&lt;/p&gt;\\n","pos":[15688,15694],"source":" </p>\\n"},{"pos":[16549,16574],"content":"AddYears(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddYears(DateTime, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number of years to add.","pos":[17703,17735],"source":"\\n<p>The number of years to add."},{"content":"&lt;/p&gt;\\n","pos":[17736,17742],"source":" </p>\\n"},{"pos":[19037,19060],"content":"GetDayOfMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfMonth(DateTime)","pos":[0,23]}]},{"pos":[21244,21266],"content":"GetDayOfWeek(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfWeek(DateTime)","pos":[0,22]}]},{"pos":[23590,23612],"content":"GetDayOfYear(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfYear(DateTime)","pos":[0,22]}]},{"pos":[25876,25911],"content":"GetDaysInMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[26785,26826],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[26827,26833],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month.","pos":[26896,26951],"source":"\\n<p>An integer from 1 to 12 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[26952,26958],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[27019,27059],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[27060,27066],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in the specified month in the specified year in the specified era.&lt;/p&gt;\\n","pos":[27125,27221],"source":"\\n<p>The number of days in the specified month in the specified year in the specified era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[27451,27691],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[27692,27698],"source":" </p>\\n"},{"pos":[28751,28778],"content":"GetDaysInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[29582,29623],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[29624,29630],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[29691,29731],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[29732,29738],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in the specified year in the specified era.&lt;/p&gt;\\n","pos":[29797,29870],"source":"\\n<p>The number of days in the specified year in the specified era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[30086,30239],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[30240,30246],"source":" </p>\\n"},{"pos":[31268,31284],"content":"GetEra(DateTime)","needQuote":true,"nodes":[{"content":"GetEra(DateTime)","pos":[0,16]}]},{"pos":[33307,33333],"content":"GetLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A year.&lt;/p&gt;\\n","pos":[34190,34208],"source":"\\n<p>A year.</p>\\n"},{"content":"\\n&lt;p&gt;An era.&lt;/p&gt;\\n","pos":[34269,34287],"source":"\\n<p>An era.</p>\\n"},{"pos":[35032,35050],"content":"GetMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetMonth(DateTime)","pos":[0,18]}]},{"pos":[36905,36934],"content":"GetMonthsInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[37748,37789],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[37790,37796],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[37857,37897],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[37898,37904],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of months in the specified year in the specified era.&lt;/p&gt;\\n","pos":[37963,38038],"source":"\\n<p>The number of months in the specified year in the specified era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[38256,38409],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[38410,38416],"source":" </p>\\n"},{"pos":[39622,39674],"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","needQuote":true,"nodes":[{"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;A positive integer that represents the week of the year that includes the date in the &lt;em&gt;time&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[41499,41620],"source":"\\n<p>A positive integer that represents the week of the year that includes the date in the <em>time</em> parameter.</p>\\n"},{"pos":[42568,42585],"content":"GetYear(DateTime)","needQuote":true,"nodes":[{"content":"GetYear(DateTime)","pos":[0,17]}]},{"pos":[44785,44822],"content":"IsLeapDay(Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32, Int32)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[45696,45737],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[45738,45744],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month.","pos":[45807,45862],"source":"\\n<p>An integer from 1 to 12 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[45863,45869],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 31 that represents the day.","pos":[45930,45983],"source":"\\n<p>An integer from 1 to 31 that represents the day."},{"content":"&lt;/p&gt;\\n","pos":[45984,45990],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[46051,46091],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[46092,46098],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified day is a leap day; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[46159,46264],"source":"\\n<p>\\n<strong>true</strong> if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[46502,46827],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[46828,46834],"source":" </p>\\n"},{"pos":[48219,48251],"content":"IsLeapMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[49119,49160],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[49161,49167],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month.","pos":[49230,49285],"source":"\\n<p>An integer from 1 to 12 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[49286,49292],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[49353,49393],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[49394,49400],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;This method always returns &lt;strong&gt;false&lt;/strong&gt;, unless overridden by a derived class.&lt;/p&gt;\\n","pos":[49461,49560],"source":"\\n<p>This method always returns <strong>false</strong>, unless overridden by a derived class.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[49787,50027],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[50028,50034],"source":" </p>\\n"},{"pos":[51185,51209],"content":"IsLeapYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[52006,52047],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[52048,52054],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[52115,52155],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[52156,52162],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified year is a leap year; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[52223,52330],"source":"\\n<p>\\n<strong>true</strong> if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[52543,52696],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[52697,52703],"source":" </p>\\n"},{"pos":[53923,53989],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[55131,55172],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[55173,55179],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month.","pos":[55242,55297],"source":"\\n<p>An integer from 1 to 12 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[55298,55304],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 31 that represents the day.","pos":[55365,55418],"source":"\\n<p>An integer from 1 to 31 that represents the day."},{"content":"&lt;/p&gt;\\n","pos":[55419,55425],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 23 that represents the hour.","pos":[55487,55541],"source":"\\n<p>An integer from 0 to 23 that represents the hour."},{"content":"&lt;/p&gt;\\n","pos":[55542,55548],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 59 that represents the minute.","pos":[55612,55668],"source":"\\n<p>An integer from 0 to 59 that represents the minute."},{"content":"&lt;/p&gt;\\n","pos":[55669,55675],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 59 that represents the second.","pos":[55739,55795],"source":"\\n<p>An integer from 0 to 59 that represents the second."},{"content":"&lt;/p&gt;\\n","pos":[55796,55802],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 999 that represents the millisecond.","pos":[55871,55933],"source":"\\n<p>An integer from 0 to 999 that represents the millisecond."},{"content":"&lt;/p&gt;\\n","pos":[55934,55940],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[56001,56041],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[56042,56048],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;hour&lt;/em&gt; is less than zero or greater than 23.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;minute&lt;/em&gt; is less than zero or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;second&lt;/em&gt; is less than zero or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;millisecond&lt;/em&gt; is less than zero or greater than 999.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[56554,57195],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than zero or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than zero or greater than 999.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[57196,57202],"source":" </p>\\n"},{"pos":[58231,58253],"content":"ToFourDigitYear(Int32)","needQuote":true,"nodes":[{"content":"ToFourDigitYear(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A two-digit or four-digit integer that represents the year to convert.","pos":[59176,59251],"source":"\\n<p>A two-digit or four-digit integer that represents the year to convert."},{"content":"&lt;/p&gt;\\n","pos":[59252,59258],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that contains the four-digit representation of &lt;em&gt;year&lt;/em&gt;.&lt;/p&gt;\\n","pos":[59317,59400],"source":"\\n<p>An integer that contains the four-digit representation of <em>year</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.","pos":[59605,59673],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[59674,59680],"source":" </p>\\n"},{"pos":[60031,60051],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[60224,60230],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60405,60413],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[60595,60605],"content":"ICloneable","needQuote":true,"nodes":[{"content":"ICloneable","pos":[0,10]}]},{"pos":[60811,60821],"content":"CurrentEra","needQuote":true,"nodes":[{"content":"CurrentEra","pos":[0,10]}]},{"pos":[61077,61084],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[61205,61210],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[61292,61293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61320,61321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61404,61409],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[61491,61492],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61519,61520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61765,61783],"content":"ReadOnly(Calendar)","needQuote":true,"nodes":[{"content":"ReadOnly(Calendar)","pos":[0,18]}]},{"pos":[61970,61978],"content":"ReadOnly","needQuote":true,"nodes":[{"content":"ReadOnly","pos":[0,8]}]},{"pos":[62063,62064],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62130,62138],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[62214,62215],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62332,62340],"content":"ReadOnly","needQuote":true,"nodes":[{"content":"ReadOnly","pos":[0,8]}]},{"pos":[62425,62426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62492,62500],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[62576,62577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62874,62907],"content":"AddMilliseconds(DateTime, Double)","needQuote":true,"nodes":[{"content":"AddMilliseconds(DateTime, Double)","pos":[0,33]}]},{"pos":[63109,63124],"content":"AddMilliseconds","needQuote":true,"nodes":[{"content":"AddMilliseconds","pos":[0,15]}]},{"pos":[63216,63217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63269,63277],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[63340,63341]},{"pos":[63396,63402],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[63462,63463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63587,63602],"content":"AddMilliseconds","needQuote":true,"nodes":[{"content":"AddMilliseconds","pos":[0,15]}]},{"pos":[63694,63695],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63747,63755],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[63818,63819]},{"pos":[63874,63880],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[63940,63941],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64251,64275],"content":"AddDays(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddDays(DateTime, Int32)","pos":[0,24]}]},{"pos":[64459,64466],"content":"AddDays","needQuote":true,"nodes":[{"content":"AddDays","pos":[0,7]}]},{"pos":[64550,64551],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64603,64611],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[64674,64675]},{"pos":[64729,64734],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64793,64794],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64909,64916],"content":"AddDays","needQuote":true,"nodes":[{"content":"AddDays","pos":[0,7]}]},{"pos":[65000,65001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65053,65061],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[65124,65125]},{"pos":[65179,65184],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[65243,65244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65537,65562],"content":"AddHours(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddHours(DateTime, Int32)","pos":[0,25]}]},{"pos":[65748,65756],"content":"AddHours","needQuote":true,"nodes":[{"content":"AddHours","pos":[0,8]}]},{"pos":[65841,65842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65894,65902],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[65965,65966]},{"pos":[66020,66025],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66084,66085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66201,66209],"content":"AddHours","needQuote":true,"nodes":[{"content":"AddHours","pos":[0,8]}]},{"pos":[66294,66295],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66347,66355],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[66418,66419]},{"pos":[66473,66478],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66537,66538],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66835,66862],"content":"AddMinutes(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMinutes(DateTime, Int32)","pos":[0,27]}]},{"pos":[67052,67062],"content":"AddMinutes","needQuote":true,"nodes":[{"content":"AddMinutes","pos":[0,10]}]},{"pos":[67149,67150],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67202,67210],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[67273,67274]},{"pos":[67328,67333],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67392,67393],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67511,67521],"content":"AddMinutes","needQuote":true,"nodes":[{"content":"AddMinutes","pos":[0,10]}]},{"pos":[67608,67609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67661,67669],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[67732,67733]},{"pos":[67787,67792],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67851,67852],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68153,68180],"content":"AddSeconds(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddSeconds(DateTime, Int32)","pos":[0,27]}]},{"pos":[68370,68380],"content":"AddSeconds","needQuote":true,"nodes":[{"content":"AddSeconds","pos":[0,10]}]},{"pos":[68467,68468],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68520,68528],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[68591,68592]},{"pos":[68646,68651],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[68710,68711],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68829,68839],"content":"AddSeconds","needQuote":true,"nodes":[{"content":"AddSeconds","pos":[0,10]}]},{"pos":[68926,68927],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68979,68987],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[69050,69051]},{"pos":[69105,69110],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69169,69170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69469,69494],"content":"AddWeeks(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddWeeks(DateTime, Int32)","pos":[0,25]}]},{"pos":[69680,69688],"content":"AddWeeks","needQuote":true,"nodes":[{"content":"AddWeeks","pos":[0,8]}]},{"pos":[69773,69774],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69826,69834],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[69897,69898]},{"pos":[69952,69957],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70016,70017],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70133,70141],"content":"AddWeeks","needQuote":true,"nodes":[{"content":"AddWeeks","pos":[0,8]}]},{"pos":[70226,70227],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70279,70287],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[70350,70351]},{"pos":[70405,70410],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70469,70470],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70768,70796],"content":"GetDaysInMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32)","pos":[0,28]}]},{"pos":[70988,71002],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[71093,71094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71143,71148],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[71208,71209]},{"pos":[71263,71268],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[71327,71328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71447,71461],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[71552,71553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71602,71607],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[71667,71668]},{"pos":[71722,71727],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[71786,71787],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72077,72097],"content":"GetDaysInYear(Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32)","pos":[0,20]}]},{"pos":[72260,72273],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[72363,72364],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72413,72418],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72477,72478],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72583,72596],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[72686,72687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72736,72741],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72800,72801],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73066,73083],"content":"GetHour(DateTime)","needQuote":true,"nodes":[{"content":"GetHour(DateTime)","pos":[0,17]}]},{"pos":[73240,73247],"content":"GetHour","needQuote":true,"nodes":[{"content":"GetHour","pos":[0,7]}]},{"pos":[73331,73332],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73384,73392],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[73454,73455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73557,73564],"content":"GetHour","needQuote":true,"nodes":[{"content":"GetHour","pos":[0,7]}]},{"pos":[73648,73649],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73701,73709],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[73771,73772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74039,74064],"content":"GetMilliseconds(DateTime)","needQuote":true,"nodes":[{"content":"GetMilliseconds(DateTime)","pos":[0,25]}]},{"pos":[74237,74252],"content":"GetMilliseconds","needQuote":true,"nodes":[{"content":"GetMilliseconds","pos":[0,15]}]},{"pos":[74344,74345],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74397,74405],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[74467,74468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74578,74593],"content":"GetMilliseconds","needQuote":true,"nodes":[{"content":"GetMilliseconds","pos":[0,15]}]},{"pos":[74685,74686],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74738,74746],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[74808,74809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75086,75105],"content":"GetMinute(DateTime)","needQuote":true,"nodes":[{"content":"GetMinute(DateTime)","pos":[0,19]}]},{"pos":[75266,75275],"content":"GetMinute","needQuote":true,"nodes":[{"content":"GetMinute","pos":[0,9]}]},{"pos":[75361,75362],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75414,75422],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[75484,75485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75589,75598],"content":"GetMinute","needQuote":true,"nodes":[{"content":"GetMinute","pos":[0,9]}]},{"pos":[75684,75685],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75737,75745],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[75807,75808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76076,76098],"content":"GetMonthsInYear(Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32)","pos":[0,22]}]},{"pos":[76265,76280],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[76372,76373],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76422,76427],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76486,76487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76594,76609],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[76701,76702],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76751,76756],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76815,76816],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77087,77106],"content":"GetSecond(DateTime)","needQuote":true,"nodes":[{"content":"GetSecond(DateTime)","pos":[0,19]}]},{"pos":[77267,77276],"content":"GetSecond","needQuote":true,"nodes":[{"content":"GetSecond","pos":[0,9]}]},{"pos":[77362,77363],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77415,77423],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[77485,77486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77590,77599],"content":"GetSecond","needQuote":true,"nodes":[{"content":"GetSecond","pos":[0,9]}]},{"pos":[77685,77686],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77738,77746],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[77808,77809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78097,78127],"content":"IsLeapDay(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32)","pos":[0,30]}]},{"pos":[78336,78345],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[78431,78432],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78481,78486],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[78546,78547]},{"pos":[78601,78606],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[78666,78667]},{"pos":[78721,78726],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[78785,78786],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78913,78922],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[79008,79009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79058,79063],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[79123,79124]},{"pos":[79178,79183],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[79243,79244]},{"pos":[79298,79303],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[79362,79363],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79674,79699],"content":"IsLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32)","pos":[0,25]}]},{"pos":[79885,79896],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[79984,79985],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80034,80039],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[80099,80100]},{"pos":[80154,80159],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[80218,80219],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80335,80346],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[80434,80435],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80484,80489],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[80549,80550]},{"pos":[80604,80609],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[80668,80669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80952,80971],"content":"GetLeapMonth(Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32)","pos":[0,19]}]},{"pos":[81132,81144],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[81233,81234],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81283,81288],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81347,81348],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81452,81464],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[81553,81554],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81603,81608],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81667,81668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81931,81948],"content":"IsLeapYear(Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32)","pos":[0,17]}]},{"pos":[82105,82115],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[82202,82203],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82252,82257],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[82316,82317],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82419,82429],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[82516,82517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82566,82571],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[82630,82631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82968,83027],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,59]}]},{"pos":[83346,83356],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[83443,83444],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83493,83498],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[83558,83559]},{"pos":[83613,83618],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[83678,83679]},{"pos":[83733,83738],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[83798,83799]},{"pos":[83853,83858],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[83918,83919]},{"pos":[83973,83978],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[84038,84039]},{"pos":[84093,84098],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[84158,84159]},{"pos":[84213,84218],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[84277,84278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84458,84468],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[84555,84556],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84605,84610],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[84670,84671]},{"pos":[84725,84730],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[84790,84791]},{"pos":[84845,84850],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[84910,84911]},{"pos":[84965,84970],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[85030,85031]},{"pos":[85085,85090],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[85150,85151]},{"pos":[85205,85210],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[85270,85271]},{"pos":[85325,85330],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[85389,85390],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85758,85771],"content":"AlgorithmType","needQuote":true,"nodes":[{"content":"AlgorithmType","pos":[0,13]}]},{"pos":[86041,86051],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[86334,86366],"content":"DaysInYearBeforeMinSupportedYear","needQuote":true,"nodes":[{"content":"DaysInYearBeforeMinSupportedYear","pos":[0,32]}]},{"pos":[86659,86669],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[86764,86772],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[86841,86842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86869,86870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86940,86948],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[87017,87018],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87045,87046],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87229,87243],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[87362,87368],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[87435,87436],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87486,87492],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87552,87553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87636,87642],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[87709,87710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87760,87766],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[87826,87827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88041,88063],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[88211,88217],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[88284,88285],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88335,88341],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[88402,88403]},{"pos":[88458,88464],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[88524,88525],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88622,88628],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[88695,88696],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88746,88752],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[88813,88814]},{"pos":[88869,88875],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[88935,88936],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89181,89212],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[89378,89393],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[89469,89470],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89520,89526],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[89587,89588]},{"pos":[89643,89649],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89709,89710],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89816,89831],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[89907,89908],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89958,89964],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[90025,90026]},{"pos":[90081,90087],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90147,90148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90378,90391],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[90492,90503],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[90575,90576],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90603,90604],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90677,90688],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[90760,90761],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90788,90789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90964,90973],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[91066,91073],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[91141,91142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91169,91170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91239,91246],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[91314,91315],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91342,91343],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91518,91535],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[91644,91659],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[91735,91736],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91763,91764],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91841,91856],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[91932,91933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91960,91961],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92106,92112],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[92286,92290],"content":"Eras","needQuote":true,"nodes":[{"content":"Eras","pos":[0,4]}]},{"pos":[92448,92455],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[92579,92584],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[92644,92646]},{"pos":[92710,92715],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92774,92776],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[92970,92990],"content":"MaxSupportedDateTime","needQuote":true,"nodes":[{"content":"MaxSupportedDateTime","pos":[0,20]}]},{"pos":[93234,93242],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[93452,93472],"content":"MinSupportedDateTime","needQuote":true,"nodes":[{"content":"MinSupportedDateTime","pos":[0,20]}]},{"pos":[93768,93783],"content":"TwoDigitYearMax","needQuote":true,"nodes":[{"content":"TwoDigitYearMax","pos":[0,15]}]},{"pos":[94009,94014],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[94234,94260],"content":"AddMonths(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMonths(DateTime, Int32)","pos":[0,26]}]},{"pos":[94448,94457],"content":"AddMonths","needQuote":true,"nodes":[{"content":"AddMonths","pos":[0,9]}]},{"pos":[94543,94544],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94596,94604],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[94667,94668]},{"pos":[94722,94727],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[94786,94787],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94904,94913],"content":"AddMonths","needQuote":true,"nodes":[{"content":"AddMonths","pos":[0,9]}]},{"pos":[94999,95000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95052,95060],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[95123,95124]},{"pos":[95178,95183],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[95242,95243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95540,95565],"content":"AddYears(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddYears(DateTime, Int32)","pos":[0,25]}]},{"pos":[95751,95759],"content":"AddYears","needQuote":true,"nodes":[{"content":"AddYears","pos":[0,8]}]},{"pos":[95844,95845],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95897,95905],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[95968,95969]},{"pos":[96023,96028],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[96087,96088],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96204,96212],"content":"AddYears","needQuote":true,"nodes":[{"content":"AddYears","pos":[0,8]}]},{"pos":[96297,96298],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96350,96358],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[96421,96422]},{"pos":[96476,96481],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[96540,96541],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96828,96851],"content":"GetDayOfMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfMonth(DateTime)","pos":[0,23]}]},{"pos":[97020,97033],"content":"GetDayOfMonth","needQuote":true,"nodes":[{"content":"GetDayOfMonth","pos":[0,13]}]},{"pos":[97123,97124],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97176,97184],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[97246,97247],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97355,97368],"content":"GetDayOfMonth","needQuote":true,"nodes":[{"content":"GetDayOfMonth","pos":[0,13]}]},{"pos":[97458,97459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97511,97519],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[97581,97582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97858,97880],"content":"GetDayOfWeek(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfWeek(DateTime)","pos":[0,22]}]},{"pos":[98047,98059],"content":"GetDayOfWeek","needQuote":true,"nodes":[{"content":"GetDayOfWeek","pos":[0,12]}]},{"pos":[98148,98149],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98201,98209],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[98271,98272],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98379,98391],"content":"GetDayOfWeek","needQuote":true,"nodes":[{"content":"GetDayOfWeek","pos":[0,12]}]},{"pos":[98480,98481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98533,98541],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[98603,98604],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98813,98822],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[99044,99066],"content":"GetDayOfYear(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfYear(DateTime)","pos":[0,22]}]},{"pos":[99233,99245],"content":"GetDayOfYear","needQuote":true,"nodes":[{"content":"GetDayOfYear","pos":[0,12]}]},{"pos":[99334,99335],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99387,99395],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[99457,99458],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99565,99577],"content":"GetDayOfYear","needQuote":true,"nodes":[{"content":"GetDayOfYear","pos":[0,12]}]},{"pos":[99666,99667],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99719,99727],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[99789,99790],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100089,100124],"content":"GetDaysInMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32, Int32)","pos":[0,35]}]},{"pos":[100343,100357],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[100448,100449],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100498,100503],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[100563,100564]},{"pos":[100618,100623],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[100683,100684]},{"pos":[100738,100743],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[100802,100803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100935,100949],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[101040,101041],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101090,101095],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[101155,101156]},{"pos":[101210,101215],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[101275,101276]},{"pos":[101330,101335],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[101394,101395],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101718,101745],"content":"GetDaysInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32, Int32)","pos":[0,27]}]},{"pos":[101935,101948],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[102038,102039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102088,102093],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102153,102154]},{"pos":[102208,102213],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[102272,102273],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102391,102404],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[102494,102495],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102544,102549],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102609,102610]},{"pos":[102664,102669],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[102728,102729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103013,103029],"content":"GetEra(DateTime)","needQuote":true,"nodes":[{"content":"GetEra(DateTime)","pos":[0,16]}]},{"pos":[103184,103190],"content":"GetEra","needQuote":true,"nodes":[{"content":"GetEra","pos":[0,6]}]},{"pos":[103273,103274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103326,103334],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[103396,103397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103498,103504],"content":"GetEra","needQuote":true,"nodes":[{"content":"GetEra","pos":[0,6]}]},{"pos":[103587,103588],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103640,103648],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[103710,103711],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103983,104009],"content":"GetLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32, Int32)","pos":[0,26]}]},{"pos":[104197,104209],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[104298,104299],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104348,104353],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[104413,104414]},{"pos":[104468,104473],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[104532,104533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104650,104662],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[104751,104752],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104801,104806],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[104866,104867]},{"pos":[104921,104926],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[104985,104986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105270,105288],"content":"GetMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetMonth(DateTime)","pos":[0,18]}]},{"pos":[105447,105455],"content":"GetMonth","needQuote":true,"nodes":[{"content":"GetMonth","pos":[0,8]}]},{"pos":[105540,105541],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105593,105601],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[105663,105664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105767,105775],"content":"GetMonth","needQuote":true,"nodes":[{"content":"GetMonth","pos":[0,8]}]},{"pos":[105860,105861],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105913,105921],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[105983,105984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106263,106292],"content":"GetMonthsInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32, Int32)","pos":[0,29]}]},{"pos":[106486,106501],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[106593,106594],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106643,106648],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[106708,106709]},{"pos":[106763,106768],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[106827,106828],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106948,106963],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[107055,107056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107105,107110],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[107170,107171]},{"pos":[107225,107230],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[107289,107290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107640,107692],"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","needQuote":true,"nodes":[{"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","pos":[0,52]}]},{"pos":[107973,107986],"content":"GetWeekOfYear","needQuote":true,"nodes":[{"content":"GetWeekOfYear","pos":[0,13]}]},{"pos":[108076,108077],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108129,108137],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[108200,108201]},{"pos":[108280,108296],"content":"CalendarWeekRule","needQuote":true,"nodes":[{"content":"CalendarWeekRule","pos":[0,16]}]},{"content":",","pos":[108381,108382]},{"pos":[108440,108449],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[108512,108513],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108676,108689],"content":"GetWeekOfYear","needQuote":true,"nodes":[{"content":"GetWeekOfYear","pos":[0,13]}]},{"pos":[108779,108780],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108832,108840],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[108903,108904]},{"pos":[108983,108999],"content":"CalendarWeekRule","needQuote":true,"nodes":[{"content":"CalendarWeekRule","pos":[0,16]}]},{"content":",","pos":[109084,109085]},{"pos":[109143,109152],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[109215,109216],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109546,109562],"content":"CalendarWeekRule","needQuote":true,"nodes":[{"content":"CalendarWeekRule","pos":[0,16]}]},{"pos":[109828,109845],"content":"GetYear(DateTime)","needQuote":true,"nodes":[{"content":"GetYear(DateTime)","pos":[0,17]}]},{"pos":[110002,110009],"content":"GetYear","needQuote":true,"nodes":[{"content":"GetYear","pos":[0,7]}]},{"pos":[110093,110094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110146,110154],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[110216,110217],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110319,110326],"content":"GetYear","needQuote":true,"nodes":[{"content":"GetYear","pos":[0,7]}]},{"pos":[110410,110411],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110463,110471],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[110533,110534],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110831,110868],"content":"IsLeapDay(Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32, Int32)","pos":[0,37]}]},{"pos":[111104,111113],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[111199,111200],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111249,111254],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[111314,111315]},{"pos":[111369,111374],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[111434,111435]},{"pos":[111489,111494],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[111554,111555]},{"pos":[111609,111614],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[111673,111674],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111814,111823],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[111909,111910],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111959,111964],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112024,112025]},{"pos":[112079,112084],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112144,112145]},{"pos":[112199,112204],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112264,112265]},{"pos":[112319,112324],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[112383,112384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112639,112646],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[112884,112916],"content":"IsLeapMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32, Int32)","pos":[0,32]}]},{"pos":[113129,113140],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[113228,113229],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113278,113283],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[113343,113344]},{"pos":[113398,113403],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[113463,113464]},{"pos":[113518,113523],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[113582,113583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113712,113723],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[113811,113812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113861,113866],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[113926,113927]},{"pos":[113981,113986],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114046,114047]},{"pos":[114101,114106],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114165,114166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114480,114504],"content":"IsLeapYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32, Int32)","pos":[0,24]}]},{"pos":[114688,114698],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[114785,114786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114835,114840],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114900,114901]},{"pos":[114955,114960],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[115019,115020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115135,115145],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[115232,115233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115282,115287],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[115347,115348]},{"pos":[115402,115407],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[115466,115467],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115837,115903],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,66]}]},{"pos":[116249,116259],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[116346,116347],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116396,116401],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116461,116462]},{"pos":[116516,116521],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116581,116582]},{"pos":[116636,116641],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116701,116702]},{"pos":[116756,116761],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116821,116822]},{"pos":[116876,116881],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116941,116942]},{"pos":[116996,117001],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117061,117062]},{"pos":[117116,117121],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117181,117182]},{"pos":[117236,117241],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[117300,117301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117494,117504],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[117591,117592],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117641,117646],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117706,117707]},{"pos":[117761,117766],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117826,117827]},{"pos":[117881,117886],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117946,117947]},{"pos":[118001,118006],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[118066,118067]},{"pos":[118121,118126],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[118186,118187]},{"pos":[118241,118246],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[118306,118307]},{"pos":[118361,118366],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[118426,118427]},{"pos":[118481,118486],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[118545,118546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118950,118972],"content":"ToFourDigitYear(Int32)","needQuote":true,"nodes":[{"content":"ToFourDigitYear(Int32)","pos":[0,22]}]},{"pos":[119139,119154],"content":"ToFourDigitYear","needQuote":true,"nodes":[{"content":"ToFourDigitYear","pos":[0,15]}]},{"pos":[119246,119247],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119296,119301],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[119360,119361],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119468,119483],"content":"ToFourDigitYear","needQuote":true,"nodes":[{"content":"ToFourDigitYear","pos":[0,15]}]},{"pos":[119575,119576],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119625,119630],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[119689,119690],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119900,119927],"content":"TypeInitializationException","needQuote":true,"nodes":[{"content":"TypeInitializationException","pos":[0,27]}]},{"pos":[120139,120166],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[120393,120418],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[120631,120648],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Globalization.TaiwanCalendar\n  commentId: T:System.Globalization.TaiwanCalendar\n  id: TaiwanCalendar\n  parent: System.Globalization\n  children:\n  - System.Globalization.TaiwanCalendar.#ctor\n  - System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)\n  - System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)\n  - System.Globalization.TaiwanCalendar.Eras\n  - System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)\n  - System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)\n  - System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n  - System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.GetEra(System.DateTime)\n  - System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n  - System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n  - System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.MaxSupportedDateTime\n  - System.Globalization.TaiwanCalendar.MinSupportedDateTime\n  - System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)\n  - System.Globalization.TaiwanCalendar.TwoDigitYearMax\n  langs:\n  - csharp\n  - vb\n  name: TaiwanCalendar\n  fullName: System.Globalization.TaiwanCalendar\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TaiwanCalendar\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 24\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>the Taiwan calendar.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public class TaiwanCalendar : Calendar, ICloneable\n    content.vb: >-\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public Class TaiwanCalendar\n          Inherits Calendar\n          Implements ICloneable\n  seealso:\n  - type: System.Globalization.Calendar\n    commentId: T:System.Globalization.Calendar\n  - type: System.Globalization.GregorianCalendar\n    commentId: T:System.Globalization.GregorianCalendar\n  - type: System.Globalization.CultureInfo.Calendar\n    commentId: P:System.Globalization.CultureInfo.Calendar\n  - type: System.Globalization.CultureInfo.OptionalCalendars\n    commentId: P:System.Globalization.CultureInfo.OptionalCalendars\n  inheritance:\n  - System.Object\n  - System.Globalization.Calendar\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.Globalization.Calendar.CurrentEra\n  - System.Globalization.Calendar.Clone\n  - System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  - System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  - System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  - System.Globalization.Calendar.GetHour(System.DateTime)\n  - System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  - System.Globalization.Calendar.GetMinute(System.DateTime)\n  - System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - System.Globalization.Calendar.GetSecond(System.DateTime)\n  - System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  - System.Globalization.Calendar.IsLeapYear(System.Int32)\n  - System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.AlgorithmType\n  - System.Globalization.Calendar.IsReadOnly\n  - System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: TaiwanCalendar\n- uid: System.Globalization.TaiwanCalendar.#ctor\n  commentId: M:System.Globalization.TaiwanCalendar.#ctor\n  id: '#ctor'\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: TaiwanCalendar()\n  fullName: System.Globalization.TaiwanCalendar.TaiwanCalendar()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 95\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Globalization.TaiwanCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public TaiwanCalendar()\n    content.vb: Public Sub New\n  exceptions:\n  - type: System.TypeInitializationException\n    commentId: T:System.TypeInitializationException\n    description: \"\\n<p>Unable to initialize a <xref href=\\\"System.Globalization.TaiwanCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object because of missing culture information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TaiwanCalendar.TaiwanCalendar()\n- uid: System.Globalization.TaiwanCalendar.Eras\n  commentId: P:System.Globalization.TaiwanCalendar.Eras\n  id: Eras\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: Eras\n  fullName: System.Globalization.TaiwanCalendar.Eras\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Eras\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 205\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the list of eras in the <xref href=\\\"System.Globalization.TaiwanCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int[] Eras { get; }\n    content.vb: Public Overrides ReadOnly Property Eras As Integer()\n    parameters: []\n    return:\n      type: System.Int32[]\n      description: \"\\n<p>An array that consists of a single element for which the value is always the current era.</p>\\n\"\n  overridden: System.Globalization.Calendar.Eras\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: TaiwanCalendar.Eras\n- uid: System.Globalization.TaiwanCalendar.MaxSupportedDateTime\n  commentId: P:System.Globalization.TaiwanCalendar.MaxSupportedDateTime\n  id: MaxSupportedDateTime\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: MaxSupportedDateTime\n  fullName: System.Globalization.TaiwanCalendar.MaxSupportedDateTime\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaxSupportedDateTime\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 73\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the latest date and time supported by the <xref href=\\\"System.Globalization.TaiwanCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override DateTime MaxSupportedDateTime { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides ReadOnly Property MaxSupportedDateTime As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The latest date and time supported by the <xref href=\\\"System.Globalization.TaiwanCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</p>\\n\"\n  overridden: System.Globalization.Calendar.MaxSupportedDateTime\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: TaiwanCalendar.MaxSupportedDateTime\n- uid: System.Globalization.TaiwanCalendar.MinSupportedDateTime\n  commentId: P:System.Globalization.TaiwanCalendar.MinSupportedDateTime\n  id: MinSupportedDateTime\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: MinSupportedDateTime\n  fullName: System.Globalization.TaiwanCalendar.MinSupportedDateTime\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MinSupportedDateTime\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 64\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the earliest date and time supported by the <xref href=\\\"System.Globalization.TaiwanCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override DateTime MinSupportedDateTime { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides ReadOnly Property MinSupportedDateTime As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The earliest date and time supported by the <xref href=\\\"System.Globalization.TaiwanCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, which is equivalent to the first moment of January 1, 1912 C.E. in the Gregorian calendar.</p>\\n\"\n  overridden: System.Globalization.Calendar.MinSupportedDateTime\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: TaiwanCalendar.MinSupportedDateTime\n- uid: System.Globalization.TaiwanCalendar.TwoDigitYearMax\n  commentId: P:System.Globalization.TaiwanCalendar.TwoDigitYearMax\n  id: TwoDigitYearMax\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: TwoDigitYearMax\n  fullName: System.Globalization.TaiwanCalendar.TwoDigitYearMax\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TwoDigitYearMax\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 213\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\\n\"\n  syntax:\n    content: public override int TwoDigitYearMax { get; set; }\n    content.vb: Public Overrides Property TwoDigitYearMax As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\\n\"\n  overridden: System.Globalization.Calendar.TwoDigitYearMax\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value specified in a set operation is less than 99. </p>\\n<p>-or- </p>\\n<p>The value specified in a set operation is greater than <strong>MaxSupportedDateTime.Year</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>In a set operation, the current instance is read-only.</p>\\n\"\n  seealso:\n  - type: System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.TwoDigitYearMax\n- uid: System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)\n  id: AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: AddMonths(DateTime, Int32)\n  fullName: System.Globalization.TaiwanCalendar.AddMonths(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMonths\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 111\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of months away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override DateTime AddMonths(DateTime time, int months)\n    content.vb: Public Overrides Function AddMonths(time As Date, months As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add months. </p>\\n\"\n    - id: months\n      type: System.Int32\n      description: \"\\n<p>The number of months to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of months to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>months</em> is less than -120000.</p>\\n<p>-or- </p>\\n<p>\\n<em>months</em> is greater than 120000. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.AddMonths(DateTime, Int32)\n- uid: System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)\n  id: AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: AddYears(DateTime, Int32)\n  fullName: System.Globalization.TaiwanCalendar.AddYears(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddYears\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 116\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of years away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override DateTime AddYears(DateTime time, int years)\n    content.vb: Public Overrides Function AddYears(time As Date, years As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add years. </p>\\n\"\n    - id: years\n      type: System.Int32\n      description: \"\\n<p>The number of years to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of years to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.AddYears(DateTime, Int32)\n- uid: System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)\n  commentId: M:System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)\n  id: GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfMonth(DateTime)\n  fullName: System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfMonth\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 131\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the day of the month in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetDayOfMonth(DateTime time)\n    content.vb: Public Overrides Function GetDayOfMonth(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 31 that represents the day of the month in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  seealso:\n  - type: System.DateTime.Day\n    commentId: P:System.DateTime.Day\n  - type: System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.GetDayOfMonth(DateTime)\n- uid: System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)\n  commentId: M:System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)\n  id: GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfWeek(DateTime)\n  fullName: System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfWeek\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 136\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the day of the week in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override DayOfWeek GetDayOfWeek(DateTime time)\n    content.vb: Public Overrides Function GetDayOfWeek(time As Date) As DayOfWeek\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.DayOfWeek\n      description: \"\\n<p>A <xref href=\\\"System.DayOfWeek\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the day of the week in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  seealso:\n  - type: System.DateTime.DayOfWeek\n    commentId: P:System.DateTime.DayOfWeek\n  - type: System.DayOfWeek\n    commentId: T:System.DayOfWeek\n  - type: System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.GetDayOfWeek(DateTime)\n- uid: System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n  commentId: M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n  id: GetDayOfYear(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfYear(DateTime)\n  fullName: System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfYear\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 141\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the day of the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetDayOfYear(DateTime time)\n    content.vb: Public Overrides Function GetDayOfYear(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 366 that represents the day of the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  seealso:\n  - type: System.DateTime.DayOfYear\n    commentId: P:System.DateTime.DayOfYear\n  - type: System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n  - type: System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.GetDayOfYear(DateTime)\n- uid: System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDaysInMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDaysInMonth\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 121\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the number of days in the specified month in the specified year in the specified era.</p>\\n\"\n  syntax:\n    content: public override int GetDaysInMonth(int year, int month, int era)\n    content.vb: Public Overrides Function GetDaysInMonth(year As Integer, month As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in the specified month in the specified year in the specified era.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.TaiwanCalendar.Eras\n    commentId: P:System.Globalization.TaiwanCalendar.Eras\n  - type: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.GetDaysInMonth(Int32, Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)\n  id: GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDaysInYear(Int32, Int32)\n  fullName: System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDaysInYear\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 126\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the number of days in the specified year in the specified era.</p>\\n\"\n  syntax:\n    content: public override int GetDaysInYear(int year, int era)\n    content.vb: Public Overrides Function GetDaysInYear(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in the specified year in the specified era.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.TaiwanCalendar.Eras\n    commentId: P:System.Globalization.TaiwanCalendar.Eras\n  - type: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.GetDaysInYear(Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.GetEra(System.DateTime)\n  commentId: M:System.Globalization.TaiwanCalendar.GetEra(System.DateTime)\n  id: GetEra(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetEra(DateTime)\n  fullName: System.Globalization.TaiwanCalendar.GetEra(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEra\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 160\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the era in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetEra(DateTime time)\n    content.vb: Public Overrides Function GetEra(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetEra(System.DateTime)\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.TaiwanCalendar.Eras\n    commentId: P:System.Globalization.TaiwanCalendar.Eras\n  - type: System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.GetEra(DateTime)\n- uid: System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)\n  id: GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetLeapMonth(Int32, Int32)\n  fullName: System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetLeapMonth\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 188\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the leap month for a specified year and era.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override int GetLeapMonth(int year, int era)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function GetLeapMonth(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>A year.</p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An era.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The return value is always 0 because the <xref href=\\\"System.Globalization.TaiwanCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class does not support the notion of a leap month.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.GetLeapMonth(Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n  commentId: M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n  id: GetMonth(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetMonth(DateTime)\n  fullName: System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMonth\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 164\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the month in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetMonth(DateTime time)\n    content.vb: Public Overrides Function GetMonth(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetMonth(System.DateTime)\n  seealso:\n  - type: System.DateTime.Month\n    commentId: P:System.DateTime.Month\n  - type: System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.GetMonth(DateTime)\n- uid: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  id: GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetMonthsInYear(Int32, Int32)\n  fullName: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMonthsInYear\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 147\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the number of months in the specified year in the specified era.</p>\\n\"\n  syntax:\n    content: public override int GetMonthsInYear(int year, int era)\n    content.vb: Public Overrides Function GetMonthsInYear(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of months in the specified year in the specified era.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.TaiwanCalendar.Eras\n    commentId: P:System.Globalization.TaiwanCalendar.Eras\n  - type: System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - type: System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.GetMonthsInYear(Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  commentId: M:System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  id: GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  fullName: System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime, System.Globalization.CalendarWeekRule, System.DayOfWeek)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetWeekOfYear\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 152\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the week of the year that includes the date in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Contracts\", \"CC1055\")]\n\n      [ComVisible(false)]\n\n      public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Contracts\", \"CC1055\")>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetWeekOfYear(time As Date, rule As CalendarWeekRule, firstDayOfWeek As DayOfWeek) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    - id: rule\n      type: System.Globalization.CalendarWeekRule\n      description: \"\\n<p>One of the <xref href=\\\"System.Globalization.CalendarWeekRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that defines a calendar week. </p>\\n\"\n    - id: firstDayOfWeek\n      type: System.DayOfWeek\n      description: \"\\n<p>One of the <xref href=\\\"System.DayOfWeek\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that represents the first day of the week. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A positive integer that represents the week of the year that includes the date in the <em>time</em> parameter.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>time</em> or <em>firstDayOfWeek</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>rule</em> is not a valid <xref href=\\\"System.Globalization.CalendarWeekRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n- uid: System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n  commentId: M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n  id: GetYear(System.DateTime)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetYear(DateTime)\n  fullName: System.Globalization.TaiwanCalendar.GetYear(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetYear\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 169\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetYear(DateTime time)\n    content.vb: Public Overrides Function GetYear(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetYear(System.DateTime)\n  seealso:\n  - type: System.DateTime.Year\n    commentId: P:System.DateTime.Year\n  - type: System.Globalization.TaiwanCalendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetEra(System.DateTime)\n  - type: System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.GetYear(DateTime)\n- uid: System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapDay(Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapDay\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 174\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified date in the specified era is a leap day.</p>\\n\"\n  syntax:\n    content: public override bool IsLeapDay(int year, int month, int day, int era)\n    content.vb: Public Overrides Function IsLeapDay(year As Integer, month As Integer, day As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month. </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 31 that represents the day. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.TaiwanCalendar.Eras\n    commentId: P:System.Globalization.TaiwanCalendar.Eras\n  - type: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - type: System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)\n  - type: System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.IsLeapDay(Int32, Int32, Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapMonth\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 195\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified month in the specified year in the specified era is a leap month.</p>\\n\"\n  syntax:\n    content: public override bool IsLeapMonth(int year, int month, int era)\n    content.vb: Public Overrides Function IsLeapMonth(year As Integer, month As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This method always returns <strong>false</strong>, unless overridden by a derived class.</p>\\n\"\n  overridden: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.TaiwanCalendar.Eras\n    commentId: P:System.Globalization.TaiwanCalendar.Eras\n  - type: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)\n  - type: System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.IsLeapMonth(Int32, Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)\n  id: IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapYear(Int32, Int32)\n  fullName: System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapYear\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 180\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified year in the specified era is a leap year.</p>\\n\"\n  syntax:\n    content: public override bool IsLeapYear(int year, int era)\n    content.vb: Public Overrides Function IsLeapYear(year As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.TaiwanCalendar.Eras\n    commentId: P:System.Globalization.TaiwanCalendar.Eras\n  - type: System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - type: System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.IsLeapYear(Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.TaiwanCalendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDateTime\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 200\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set to the specified date and time in the specified era.</p>\\n\"\n  syntax:\n    content: public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era)\n    content.vb: Public Overrides Function ToDateTime(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, era As Integer) As Date\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month. </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 31 that represents the day. </p>\\n\"\n    - id: hour\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 23 that represents the hour. </p>\\n\"\n    - id: minute\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 59 that represents the minute. </p>\\n\"\n    - id: second\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 59 that represents the second. </p>\\n\"\n    - id: millisecond\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 999 that represents the millisecond. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set to the specified date and time in the current era.</p>\\n\"\n  overridden: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than zero or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than zero or greater than 999.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.TaiwanCalendar.Eras\n    commentId: P:System.Globalization.TaiwanCalendar.Eras\n  - type: System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n- uid: System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)\n  commentId: M:System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)\n  id: ToFourDigitYear(System.Int32)\n  parent: System.Globalization.TaiwanCalendar\n  langs:\n  - csharp\n  - vb\n  name: ToFourDigitYear(Int32)\n  fullName: System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToFourDigitYear\n    path: src/mscorlib/src/System/Globalization/TaiwanCalendar.cs\n    startLine: 241\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Converts the specified year to a four-digit year by using the <xref href=\\\"System.Globalization.TaiwanCalendar.TwoDigitYearMax\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to determine the appropriate century.</p>\\n\"\n  syntax:\n    content: public override int ToFourDigitYear(int year)\n    content.vb: Public Overrides Function ToFourDigitYear(year As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>A two-digit or four-digit integer that represents the year to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that contains the four-digit representation of <em>year</em>.</p>\\n\"\n  overridden: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.TaiwanCalendar.TwoDigitYearMax\n    commentId: P:System.Globalization.TaiwanCalendar.TwoDigitYearMax\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TaiwanCalendar.ToFourDigitYear(Int32)\nreferences:\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Globalization.Calendar\n  parent: System.Globalization\n  isExternal: false\n  name: Calendar\n  fullName: System.Globalization.Calendar\n  nameWithType: Calendar\n  commentId: T:System.Globalization.Calendar\n- uid: System.ICloneable\n  parent: System\n  isExternal: true\n  name: ICloneable\n  fullName: System.ICloneable\n  nameWithType: ICloneable\n  commentId: T:System.ICloneable\n- uid: System.Globalization.Calendar.CurrentEra\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: CurrentEra\n  fullName: System.Globalization.Calendar.CurrentEra\n  nameWithType: Calendar.CurrentEra\n  commentId: F:System.Globalization.Calendar.CurrentEra\n- uid: System.Globalization.Calendar.Clone\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: Clone()\n  fullName: System.Globalization.Calendar.Clone()\n  spec.csharp:\n  - uid: System.Globalization.Calendar.Clone\n    name: Clone\n    fullName: System.Globalization.Calendar.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.Clone\n    name: Clone\n    fullName: System.Globalization.Calendar.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Calendar.Clone()\n  commentId: M:System.Globalization.Calendar.Clone\n- uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ReadOnly(Calendar)\n  fullName: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n    name: ReadOnly\n    fullName: System.Globalization.Calendar.ReadOnly\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Globalization.Calendar\n    name: Calendar\n    fullName: System.Globalization.Calendar\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n    name: ReadOnly\n    fullName: System.Globalization.Calendar.ReadOnly\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Globalization.Calendar\n    name: Calendar\n    fullName: System.Globalization.Calendar\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ReadOnly(Calendar)\n  commentId: M:System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n- uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddMilliseconds(DateTime, Double)\n  fullName: System.Globalization.Calendar.AddMilliseconds(System.DateTime, System.Double)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    name: AddMilliseconds\n    fullName: System.Globalization.Calendar.AddMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    name: AddMilliseconds\n    fullName: System.Globalization.Calendar.AddMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddMilliseconds(DateTime, Double)\n  commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n- uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddDays(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddDays(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    name: AddDays\n    fullName: System.Globalization.Calendar.AddDays\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    name: AddDays\n    fullName: System.Globalization.Calendar.AddDays\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddDays(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddHours(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddHours(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    name: AddHours\n    fullName: System.Globalization.Calendar.AddHours\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    name: AddHours\n    fullName: System.Globalization.Calendar.AddHours\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddHours(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddMinutes(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddMinutes(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    name: AddMinutes\n    fullName: System.Globalization.Calendar.AddMinutes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    name: AddMinutes\n    fullName: System.Globalization.Calendar.AddMinutes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddMinutes(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddSeconds(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddSeconds(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    name: AddSeconds\n    fullName: System.Globalization.Calendar.AddSeconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    name: AddSeconds\n    fullName: System.Globalization.Calendar.AddSeconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddSeconds(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddWeeks(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddWeeks(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    name: AddWeeks\n    fullName: System.Globalization.Calendar.AddWeeks\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    name: AddWeeks\n    fullName: System.Globalization.Calendar.AddWeeks\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddWeeks(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInMonth(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInMonth(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInYear(Int32)\n  fullName: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInYear(Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32)\n- uid: System.Globalization.Calendar.GetHour(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetHour(DateTime)\n  fullName: System.Globalization.Calendar.GetHour(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetHour(System.DateTime)\n    name: GetHour\n    fullName: System.Globalization.Calendar.GetHour\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetHour(System.DateTime)\n    name: GetHour\n    fullName: System.Globalization.Calendar.GetHour\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetHour(DateTime)\n  commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n- uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMilliseconds(DateTime)\n  fullName: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    name: GetMilliseconds\n    fullName: System.Globalization.Calendar.GetMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    name: GetMilliseconds\n    fullName: System.Globalization.Calendar.GetMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMilliseconds(DateTime)\n  commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n- uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMinute(DateTime)\n  fullName: System.Globalization.Calendar.GetMinute(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n    name: GetMinute\n    fullName: System.Globalization.Calendar.GetMinute\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n    name: GetMinute\n    fullName: System.Globalization.Calendar.GetMinute\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMinute(DateTime)\n  commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMonthsInYear(Int32)\n  fullName: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMonthsInYear(Int32)\n  commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n- uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetSecond(DateTime)\n  fullName: System.Globalization.Calendar.GetSecond(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n    name: GetSecond\n    fullName: System.Globalization.Calendar.GetSecond\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n    name: GetSecond\n    fullName: System.Globalization.Calendar.GetSecond\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetSecond(DateTime)\n  commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapDay(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapDay(System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapMonth(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapMonth(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetLeapMonth(Int32)\n  fullName: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetLeapMonth(Int32)\n  commentId: M:System.Globalization.Calendar.GetLeapMonth(System.Int32)\n- uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapYear(Int32)\n  fullName: System.Globalization.Calendar.IsLeapYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapYear(Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32)\n- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.AlgorithmType\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AlgorithmType\n  fullName: System.Globalization.Calendar.AlgorithmType\n  nameWithType: Calendar.AlgorithmType\n  commentId: P:System.Globalization.Calendar.AlgorithmType\n- uid: System.Globalization.Calendar.IsReadOnly\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Globalization.Calendar.IsReadOnly\n  nameWithType: Calendar.IsReadOnly\n  commentId: P:System.Globalization.Calendar.IsReadOnly\n- uid: System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: DaysInYearBeforeMinSupportedYear\n  fullName: System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  nameWithType: Calendar.DaysInYearBeforeMinSupportedYear\n  commentId: P:System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Globalization.Calendar.Eras\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: Eras\n  fullName: System.Globalization.Calendar.Eras\n  nameWithType: Calendar.Eras\n  commentId: P:System.Globalization.Calendar.Eras\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.Globalization.Calendar.MaxSupportedDateTime\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: MaxSupportedDateTime\n  fullName: System.Globalization.Calendar.MaxSupportedDateTime\n  nameWithType: Calendar.MaxSupportedDateTime\n  commentId: P:System.Globalization.Calendar.MaxSupportedDateTime\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.Globalization.Calendar.MinSupportedDateTime\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: MinSupportedDateTime\n  fullName: System.Globalization.Calendar.MinSupportedDateTime\n  nameWithType: Calendar.MinSupportedDateTime\n  commentId: P:System.Globalization.Calendar.MinSupportedDateTime\n- uid: System.Globalization.Calendar.TwoDigitYearMax\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: TwoDigitYearMax\n  fullName: System.Globalization.Calendar.TwoDigitYearMax\n  nameWithType: Calendar.TwoDigitYearMax\n  commentId: P:System.Globalization.Calendar.TwoDigitYearMax\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddMonths(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddMonths(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    name: AddMonths\n    fullName: System.Globalization.Calendar.AddMonths\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    name: AddMonths\n    fullName: System.Globalization.Calendar.AddMonths\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddMonths(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddYears(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddYears(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    name: AddYears\n    fullName: System.Globalization.Calendar.AddYears\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    name: AddYears\n    fullName: System.Globalization.Calendar.AddYears\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddYears(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDayOfMonth(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    name: GetDayOfMonth\n    fullName: System.Globalization.Calendar.GetDayOfMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    name: GetDayOfMonth\n    fullName: System.Globalization.Calendar.GetDayOfMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDayOfMonth(DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n- uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDayOfWeek(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    name: GetDayOfWeek\n    fullName: System.Globalization.Calendar.GetDayOfWeek\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    name: GetDayOfWeek\n    fullName: System.Globalization.Calendar.GetDayOfWeek\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDayOfWeek(DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n- uid: System.DayOfWeek\n  parent: System\n  isExternal: false\n  name: DayOfWeek\n  fullName: System.DayOfWeek\n  nameWithType: DayOfWeek\n  commentId: T:System.DayOfWeek\n- uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDayOfYear(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    name: GetDayOfYear\n    fullName: System.Globalization.Calendar.GetDayOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    name: GetDayOfYear\n    fullName: System.Globalization.Calendar.GetDayOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDayOfYear(DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInMonth(System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInMonth(Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInYear(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInYear(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetEra(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetEra(DateTime)\n  fullName: System.Globalization.Calendar.GetEra(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetEra(System.DateTime)\n    name: GetEra\n    fullName: System.Globalization.Calendar.GetEra\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetEra(System.DateTime)\n    name: GetEra\n    fullName: System.Globalization.Calendar.GetEra\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetEra(DateTime)\n  commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetLeapMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetLeapMonth(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetLeapMonth(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMonth(DateTime)\n  fullName: System.Globalization.Calendar.GetMonth(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n    name: GetMonth\n    fullName: System.Globalization.Calendar.GetMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n    name: GetMonth\n    fullName: System.Globalization.Calendar.GetMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMonth(DateTime)\n  commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMonthsInYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetMonthsInYear(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMonthsInYear(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  fullName: System.Globalization.Calendar.GetWeekOfYear(System.DateTime, System.Globalization.CalendarWeekRule, System.DayOfWeek)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    name: GetWeekOfYear\n    fullName: System.Globalization.Calendar.GetWeekOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CalendarWeekRule\n    name: CalendarWeekRule\n    fullName: System.Globalization.CalendarWeekRule\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.DayOfWeek\n    name: DayOfWeek\n    fullName: System.DayOfWeek\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    name: GetWeekOfYear\n    fullName: System.Globalization.Calendar.GetWeekOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CalendarWeekRule\n    name: CalendarWeekRule\n    fullName: System.Globalization.CalendarWeekRule\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.DayOfWeek\n    name: DayOfWeek\n    fullName: System.DayOfWeek\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n- uid: System.Globalization.CalendarWeekRule\n  parent: System.Globalization\n  isExternal: false\n  name: CalendarWeekRule\n  fullName: System.Globalization.CalendarWeekRule\n  nameWithType: CalendarWeekRule\n  commentId: T:System.Globalization.CalendarWeekRule\n- uid: System.Globalization.Calendar.GetYear(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetYear(DateTime)\n  fullName: System.Globalization.Calendar.GetYear(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetYear(System.DateTime)\n    name: GetYear\n    fullName: System.Globalization.Calendar.GetYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetYear(System.DateTime)\n    name: GetYear\n    fullName: System.Globalization.Calendar.GetYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetYear(DateTime)\n  commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapDay(Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapMonth(System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapMonth(Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapYear(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapYear(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ToFourDigitYear(Int32)\n  fullName: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n    name: ToFourDigitYear\n    fullName: System.Globalization.Calendar.ToFourDigitYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n    name: ToFourDigitYear\n    fullName: System.Globalization.Calendar.ToFourDigitYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ToFourDigitYear(Int32)\n  commentId: M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n- uid: System.TypeInitializationException\n  isExternal: false\n  name: TypeInitializationException\n  fullName: System.TypeInitializationException\n  nameWithType: TypeInitializationException\n  commentId: T:System.TypeInitializationException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}