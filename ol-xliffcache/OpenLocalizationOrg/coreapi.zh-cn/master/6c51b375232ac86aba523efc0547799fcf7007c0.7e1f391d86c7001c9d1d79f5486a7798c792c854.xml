{"nodes":[{"pos":[2778,2794],"content":"X509Certificate2","needQuote":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"pos":[6570,6588],"content":"X509Certificate2()","needQuote":true,"nodes":[{"content":"X509Certificate2()","pos":[0,18]}]},{"pos":[7884,7908],"content":"X509Certificate2(Byte[])","needQuote":true,"nodes":[{"content":"X509Certificate2(Byte[])","pos":[0,24]}]},{"content":"\\n&lt;p&gt;A byte array containing data from an X.509 certificate.","pos":[8929,8989],"source":"\\n<p>A byte array containing data from an X.509 certificate."},{"content":"&lt;/p&gt;\\n","pos":[8990,8996],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[9161,9203],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[9204,9396],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"pos":[10090,10122],"content":"X509Certificate2(Byte[], String)","needQuote":true,"nodes":[{"content":"X509Certificate2(Byte[], String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;A byte array containing data from an X.509 certificate.","pos":[11193,11253],"source":"\\n<p>A byte array containing data from an X.509 certificate."},{"content":"&lt;/p&gt;\\n","pos":[11254,11260],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password required to access the X.509 certificate data.","pos":[11327,11391],"source":"\\n<p>The password required to access the X.509 certificate data."},{"content":"&lt;/p&gt;\\n","pos":[11392,11398],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[11563,11605],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[11606,11798],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"pos":[12978,13031],"content":"X509Certificate2(Byte[], String, X509KeyStorageFlags)","needQuote":true,"nodes":[{"content":"X509Certificate2(Byte[], String, X509KeyStorageFlags)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;A byte array containing data from an X.509 certificate.","pos":[14267,14327],"source":"\\n<p>A byte array containing data from an X.509 certificate."},{"content":"&lt;/p&gt;\\n","pos":[14328,14334],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password required to access the X.509 certificate data.","pos":[14401,14465],"source":"\\n<p>The password required to access the X.509 certificate data."},{"content":"&lt;/p&gt;\\n","pos":[14466,14472],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that control where and how to import the certificate.","pos":[14598,14704],"source":"\\n<p>A bitwise combination of the enumeration values that control where and how to import the certificate."},{"content":"&lt;/p&gt;\\n","pos":[14705,14711],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[14876,14918],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[14919,15111],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"pos":[16181,16205],"content":"X509Certificate2(IntPtr)","needQuote":true,"nodes":[{"content":"X509Certificate2(IntPtr)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;A pointer to a certificate context in unmanaged code.","pos":[17213,17271],"source":"\\n<p>A pointer to a certificate context in unmanaged code."},{"content":"The C structure is called &lt;strong&gt;PCCERT_CONTEXT&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17272,17336],"source":" The C structure is called <strong>PCCERT_CONTEXT</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[17501,17543],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[17544,17736],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"pos":[18430,18454],"content":"X509Certificate2(String)","needQuote":true,"nodes":[{"content":"X509Certificate2(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The name of a certificate file.","pos":[19472,19508],"source":"\\n<p>The name of a certificate file."},{"content":"&lt;/p&gt;\\n","pos":[19509,19515],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[19680,19722],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[19723,19915],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"pos":[20402,20434],"content":"X509Certificate2(String, String)","needQuote":true,"nodes":[{"content":"X509Certificate2(String, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The name of a certificate file.","pos":[21550,21586],"source":"\\n<p>The name of a certificate file."},{"content":"&lt;/p&gt;\\n","pos":[21587,21593],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password required to access the X.509 certificate data.","pos":[21660,21724],"source":"\\n<p>The password required to access the X.509 certificate data."},{"content":"&lt;/p&gt;\\n","pos":[21725,21731],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[21896,21938],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[21939,22131],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"pos":[23073,23126],"content":"X509Certificate2(String, String, X509KeyStorageFlags)","needQuote":true,"nodes":[{"content":"X509Certificate2(String, String, X509KeyStorageFlags)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;The name of a certificate file.","pos":[24407,24443],"source":"\\n<p>The name of a certificate file."},{"content":"&lt;/p&gt;\\n","pos":[24444,24450],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password required to access the X.509 certificate data.","pos":[24517,24581],"source":"\\n<p>The password required to access the X.509 certificate data."},{"content":"&lt;/p&gt;\\n","pos":[24582,24588],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that control where and how to import the certificate.","pos":[24714,24820],"source":"\\n<p>A bitwise combination of the enumeration values that control where and how to import the certificate."},{"content":"&lt;/p&gt;\\n","pos":[24821,24827],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[24992,25034],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[25035,25227],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"pos":[25912,25920],"content":"Archived","needQuote":true,"nodes":[{"content":"Archived","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the certificate is archived, &lt;strong&gt;false&lt;/strong&gt; if the certificate is not archived.&lt;/p&gt;\\n","pos":[26784,26909],"source":"\\n<p>\\n<strong>true</strong> if the certificate is archived, <strong>false</strong> if the certificate is not archived.</p>\\n"},{"content":"\\n&lt;p&gt;The certificate is unreadable.","pos":[27074,27109],"source":"\\n<p>The certificate is unreadable."},{"content":"&lt;/p&gt;\\n","pos":[27110,27116],"source":" </p>\\n"},{"pos":[27529,27539],"content":"Extensions","needQuote":true,"nodes":[{"content":"Extensions","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The certificate is unreadable.","pos":[28900,28935],"source":"\\n<p>The certificate is unreadable."},{"content":"&lt;/p&gt;\\n","pos":[28936,28942],"source":" </p>\\n"},{"pos":[29368,29380],"content":"FriendlyName","needQuote":true,"nodes":[{"content":"FriendlyName","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The certificate's friendly name.&lt;/p&gt;\\n","pos":[30242,30285],"source":"\\n<p>The certificate's friendly name.</p>\\n"},{"content":"\\n&lt;p&gt;The certificate is unreadable.","pos":[30450,30485],"source":"\\n<p>The certificate is unreadable."},{"content":"&lt;/p&gt;\\n","pos":[30486,30492],"source":" </p>\\n"},{"pos":[30918,30931],"content":"HasPrivateKey","needQuote":true,"nodes":[{"content":"HasPrivateKey","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The certificate context is invalid.&lt;/p&gt;\\n","pos":[32338,32384],"source":"\\n<p>The certificate context is invalid.</p>\\n"},{"pos":[32807,32817],"content":"IssuerName","needQuote":true,"nodes":[{"content":"IssuerName","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The certificate context is invalid.&lt;/p&gt;\\n","pos":[34124,34170],"source":"\\n<p>The certificate context is invalid.</p>\\n"},{"pos":[34584,34592],"content":"NotAfter","needQuote":true,"nodes":[{"content":"NotAfter","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The certificate is unreadable.","pos":[35782,35817],"source":"\\n<p>The certificate is unreadable."},{"content":"&lt;/p&gt;\\n","pos":[35818,35824],"source":" </p>\\n"},{"pos":[36239,36248],"content":"NotBefore","needQuote":true,"nodes":[{"content":"NotBefore","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The certificate is unreadable.","pos":[37432,37467],"source":"\\n<p>The certificate is unreadable."},{"content":"&lt;/p&gt;\\n","pos":[37468,37474],"source":" </p>\\n"},{"pos":[37890,37899],"content":"PublicKey","needQuote":true,"nodes":[{"content":"PublicKey","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The key value is not an RSA or DSA key, or the key is unreadable.","pos":[39244,39314],"source":"\\n<p>The key value is not an RSA or DSA key, or the key is unreadable."},{"content":"&lt;/p&gt;\\n","pos":[39315,39321],"source":" </p>\\n"},{"pos":[39731,39738],"content":"RawData","needQuote":true,"nodes":[{"content":"RawData","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The raw data of the certificate as a byte array.&lt;/p&gt;\\n","pos":[40567,40626],"source":"\\n<p>The raw data of the certificate as a byte array.</p>\\n"},{"pos":[41049,41061],"content":"SerialNumber","needQuote":true,"nodes":[{"content":"SerialNumber","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The serial number of the certificate.&lt;/p&gt;\\n","pos":[41915,41963],"source":"\\n<p>The serial number of the certificate.</p>\\n"},{"pos":[42409,42427],"content":"SignatureAlgorithm","needQuote":true,"nodes":[{"content":"SignatureAlgorithm","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The certificate is unreadable.","pos":[43671,43706],"source":"\\n<p>The certificate is unreadable."},{"content":"&lt;/p&gt;\\n","pos":[43707,43713],"source":" </p>\\n"},{"pos":[44144,44155],"content":"SubjectName","needQuote":true,"nodes":[{"content":"SubjectName","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The certificate context is invalid.&lt;/p&gt;\\n","pos":[45470,45516],"source":"\\n<p>The certificate context is invalid.</p>\\n"},{"pos":[45937,45947],"content":"Thumbprint","needQuote":true,"nodes":[{"content":"Thumbprint","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The thumbprint of the certificate.&lt;/p&gt;\\n","pos":[46790,46835],"source":"\\n<p>The thumbprint of the certificate.</p>\\n"},{"pos":[47246,47253],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The certificate format.&lt;/p&gt;\\n","pos":[48091,48125],"source":"\\n<p>The certificate format.</p>\\n"},{"content":"\\n&lt;p&gt;The certificate is unreadable.","pos":[48290,48325],"source":"\\n<p>The certificate is unreadable."},{"content":"&lt;/p&gt;\\n","pos":[48326,48332],"source":" </p>\\n"},{"pos":[48818,48844],"content":"GetCertContentType(Byte[])","needQuote":true,"nodes":[{"content":"GetCertContentType(Byte[])","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A byte array containing data from an X.509 certificate.","pos":[49807,49867],"source":"\\n<p>A byte array containing data from an X.509 certificate."},{"content":"&lt;/p&gt;\\n","pos":[49868,49874],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rawData&lt;/em&gt; has a zero length or is &lt;strong&gt;null&lt;/strong&gt;.","pos":[50236,50306],"source":"\\n<p>\\n<em>rawData</em> has a zero length or is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[50307,50313],"source":" </p>\\n"},{"pos":[51032,51058],"content":"GetCertContentType(String)","needQuote":true,"nodes":[{"content":"GetCertContentType(String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The name of a certificate file.","pos":[52018,52054],"source":"\\n<p>The name of a certificate file."},{"content":"&lt;/p&gt;\\n","pos":[52055,52061],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fileName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[52431,52487],"source":"\\n<p>\\n<em>fileName</em> is <strong>null</strong>.</p>\\n"},{"pos":[53276,53310],"content":"GetNameInfo(X509NameType, Boolean)","needQuote":true,"nodes":[{"content":"GetNameInfo(X509NameType, Boolean)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to include the issuer name; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[54591,54682],"source":"\\n<p>\\n<strong>true</strong> to include the issuer name; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[54683,54689],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The name of the certificate.&lt;/p&gt;\\n","pos":[54749,54788],"source":"\\n<p>The name of the certificate.</p>\\n"},{"pos":[55205,55215],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The certificate information.&lt;/p&gt;\\n","pos":[56042,56081],"source":"\\n<p>The certificate information.</p>\\n"},{"pos":[56634,56651],"content":"ToString(Boolean)","needQuote":true,"nodes":[{"content":"ToString(Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The certificate information.&lt;/p&gt;\\n","pos":[57981,58020],"source":"\\n<p>The certificate information.</p>\\n"},{"pos":[58352,58397],"content":"System.Security.Cryptography.X509Certificates","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.X509Certificates","pos":[0,45]}]},{"pos":[58645,58651],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58883,58898],"content":"X509Certificate","needQuote":true,"nodes":[{"content":"X509Certificate","pos":[0,15]}]},{"pos":[59153,59164],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[59434,59440],"content":"Handle","needQuote":true,"nodes":[{"content":"Handle","pos":[0,6]}]},{"pos":[59821,59827],"content":"Issuer","needQuote":true,"nodes":[{"content":"Issuer","pos":[0,6]}]},{"pos":[60209,60216],"content":"Subject","needQuote":true,"nodes":[{"content":"Subject","pos":[0,7]}]},{"pos":[60601,60610],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[60799,60806],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[60901,60902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60929,60930],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61047,61054],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[61149,61150],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61177,61178],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61514,61530],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[61749,61756],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[61851,61852],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61903,61910],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[61971,61972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62105,62112],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[62207,62208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62259,62266],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[62327,62328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62685,62699],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[62914,62920],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[63014,63015],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63065,63071],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63131,63132],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63263,63269],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[63363,63364],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63414,63420],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63480,63481],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63883,63906],"content":"Equals(X509Certificate)","needQuote":true,"nodes":[{"content":"Equals(X509Certificate)","pos":[0,23]}]},{"pos":[64217,64223],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[64317,64318],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64416,64431],"content":"X509Certificate","needQuote":true,"nodes":[{"content":"X509Certificate","pos":[0,15]}]},{"pos":[64518,64519],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64698,64704],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[64798,64799],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64897,64912],"content":"X509Certificate","needQuote":true,"nodes":[{"content":"X509Certificate","pos":[0,15]}]},{"pos":[64999,65000],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65459,65482],"content":"Export(X509ContentType)","needQuote":true,"nodes":[{"content":"Export(X509ContentType)","pos":[0,23]}]},{"pos":[65793,65799],"content":"Export","needQuote":true,"nodes":[{"content":"Export","pos":[0,6]}]},{"pos":[65893,65894],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65992,66007],"content":"X509ContentType","needQuote":true,"nodes":[{"content":"X509ContentType","pos":[0,15]}]},{"pos":[66094,66095],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66274,66280],"content":"Export","needQuote":true,"nodes":[{"content":"Export","pos":[0,6]}]},{"pos":[66374,66375],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66473,66488],"content":"X509ContentType","needQuote":true,"nodes":[{"content":"X509ContentType","pos":[0,15]}]},{"pos":[66575,66576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67048,67079],"content":"Export(X509ContentType, String)","needQuote":true,"nodes":[{"content":"Export(X509ContentType, String)","pos":[0,31]}]},{"pos":[67419,67425],"content":"Export","needQuote":true,"nodes":[{"content":"Export","pos":[0,6]}]},{"pos":[67519,67520],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67618,67633],"content":"X509ContentType","needQuote":true,"nodes":[{"content":"X509ContentType","pos":[0,15]}]},{"content":",","pos":[67721,67722]},{"pos":[67777,67783],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[67843,67844],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68037,68043],"content":"Export","needQuote":true,"nodes":[{"content":"Export","pos":[0,6]}]},{"pos":[68137,68138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68236,68251],"content":"X509ContentType","needQuote":true,"nodes":[{"content":"X509ContentType","pos":[0,15]}]},{"content":",","pos":[68339,68340]},{"pos":[68395,68401],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[68461,68462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68885,68898],"content":"GetCertHash()","needQuote":true,"nodes":[{"content":"GetCertHash()","pos":[0,13]}]},{"pos":[69095,69106],"content":"GetCertHash","needQuote":true,"nodes":[{"content":"GetCertHash","pos":[0,11]}]},{"pos":[69205,69206],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69233,69234],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69355,69366],"content":"GetCertHash","needQuote":true,"nodes":[{"content":"GetCertHash","pos":[0,11]}]},{"pos":[69465,69466],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69493,69494],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69825,69836],"content":"GetFormat()","needQuote":true,"nodes":[{"content":"GetFormat()","pos":[0,11]}]},{"pos":[70029,70038],"content":"GetFormat","needQuote":true,"nodes":[{"content":"GetFormat","pos":[0,9]}]},{"pos":[70135,70136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70163,70164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70283,70292],"content":"GetFormat","needQuote":true,"nodes":[{"content":"GetFormat","pos":[0,9]}]},{"pos":[70389,70390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70417,70418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70747,70760],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[70957,70968],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[71067,71068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71095,71096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71217,71228],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[71327,71328],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71355,71356],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71693,71710],"content":"GetKeyAlgorithm()","needQuote":true,"nodes":[{"content":"GetKeyAlgorithm()","pos":[0,17]}]},{"pos":[71915,71930],"content":"GetKeyAlgorithm","needQuote":true,"nodes":[{"content":"GetKeyAlgorithm","pos":[0,15]}]},{"pos":[72033,72034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72061,72062],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72187,72202],"content":"GetKeyAlgorithm","needQuote":true,"nodes":[{"content":"GetKeyAlgorithm","pos":[0,15]}]},{"pos":[72305,72306],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72333,72334],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72689,72716],"content":"GetKeyAlgorithmParameters()","needQuote":true,"nodes":[{"content":"GetKeyAlgorithmParameters()","pos":[0,27]}]},{"pos":[72941,72966],"content":"GetKeyAlgorithmParameters","needQuote":true,"nodes":[{"content":"GetKeyAlgorithmParameters","pos":[0,25]}]},{"pos":[73079,73080],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73107,73108],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73243,73268],"content":"GetKeyAlgorithmParameters","needQuote":true,"nodes":[{"content":"GetKeyAlgorithmParameters","pos":[0,25]}]},{"pos":[73381,73382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73409,73410],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73791,73824],"content":"GetKeyAlgorithmParametersString()","needQuote":true,"nodes":[{"content":"GetKeyAlgorithmParametersString()","pos":[0,33]}]},{"pos":[74061,74092],"content":"GetKeyAlgorithmParametersString","needQuote":true,"nodes":[{"content":"GetKeyAlgorithmParametersString","pos":[0,31]}]},{"pos":[74211,74212],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74239,74240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74381,74412],"content":"GetKeyAlgorithmParametersString","needQuote":true,"nodes":[{"content":"GetKeyAlgorithmParametersString","pos":[0,31]}]},{"pos":[74531,74532],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74559,74560],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74934,74948],"content":"GetPublicKey()","needQuote":true,"nodes":[{"content":"GetPublicKey()","pos":[0,14]}]},{"pos":[75147,75159],"content":"GetPublicKey","needQuote":true,"nodes":[{"content":"GetPublicKey","pos":[0,12]}]},{"pos":[75259,75260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75287,75288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75410,75422],"content":"GetPublicKey","needQuote":true,"nodes":[{"content":"GetPublicKey","pos":[0,12]}]},{"pos":[75522,75523],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75550,75551],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75890,75907],"content":"GetSerialNumber()","needQuote":true,"nodes":[{"content":"GetSerialNumber()","pos":[0,17]}]},{"pos":[76112,76127],"content":"GetSerialNumber","needQuote":true,"nodes":[{"content":"GetSerialNumber","pos":[0,15]}]},{"pos":[76230,76231],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76258,76259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76384,76399],"content":"GetSerialNumber","needQuote":true,"nodes":[{"content":"GetSerialNumber","pos":[0,15]}]},{"pos":[76502,76503],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76530,76531],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76799,76821],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[76969,76975],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[77042,77043],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77093,77099],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[77160,77161]},{"pos":[77216,77222],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77282,77283],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77380,77386],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[77453,77454],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77504,77510],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[77571,77572]},{"pos":[77627,77633],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77693,77694],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77939,77970],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[78136,78151],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[78227,78228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78278,78284],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[78345,78346]},{"pos":[78401,78407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78467,78468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78574,78589],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[78665,78666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78716,78722],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[78783,78784]},{"pos":[78839,78845],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78905,78906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79132,79141],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[79234,79241],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[79309,79310],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79337,79338],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79407,79414],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[79482,79483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79510,79511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79686,79703],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[79812,79827],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[79903,79904],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79931,79932],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80009,80024],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[80100,80101],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80128,80129],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80655,80675],"content":"GetECDsaPrivateKey()","needQuote":true,"nodes":[{"content":"GetECDsaPrivateKey()","pos":[0,20]}]},{"pos":[80908,80926],"content":"GetECDsaPrivateKey","needQuote":true,"nodes":[{"content":"GetECDsaPrivateKey","pos":[0,18]}]},{"pos":[81043,81044],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81071,81072],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81211,81229],"content":"GetECDsaPrivateKey","needQuote":true,"nodes":[{"content":"GetECDsaPrivateKey","pos":[0,18]}]},{"pos":[81346,81347],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81374,81375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82048,82067],"content":"GetECDsaPublicKey()","needQuote":true,"nodes":[{"content":"GetECDsaPublicKey()","pos":[0,19]}]},{"pos":[82298,82315],"content":"GetECDsaPublicKey","needQuote":true,"nodes":[{"content":"GetECDsaPublicKey","pos":[0,17]}]},{"pos":[82431,82432],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82459,82460],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82598,82615],"content":"GetECDsaPublicKey","needQuote":true,"nodes":[{"content":"GetECDsaPublicKey","pos":[0,17]}]},{"pos":[82731,82732],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82759,82760],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83423,83441],"content":"GetRSAPrivateKey()","needQuote":true,"nodes":[{"content":"GetRSAPrivateKey()","pos":[0,18]}]},{"pos":[83666,83682],"content":"GetRSAPrivateKey","needQuote":true,"nodes":[{"content":"GetRSAPrivateKey","pos":[0,16]}]},{"pos":[83795,83796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83823,83824],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83959,83975],"content":"GetRSAPrivateKey","needQuote":true,"nodes":[{"content":"GetRSAPrivateKey","pos":[0,16]}]},{"pos":[84088,84089],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84116,84117],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84772,84789],"content":"GetRSAPublicKey()","needQuote":true,"nodes":[{"content":"GetRSAPublicKey()","pos":[0,17]}]},{"pos":[85012,85027],"content":"GetRSAPublicKey","needQuote":true,"nodes":[{"content":"GetRSAPublicKey","pos":[0,15]}]},{"pos":[85139,85140],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85167,85168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85302,85317],"content":"GetRSAPublicKey","needQuote":true,"nodes":[{"content":"GetRSAPublicKey","pos":[0,15]}]},{"pos":[85429,85430],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85457,85458],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85742,85748],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[86004,86040],"content":"GetECDsaPrivateKey(X509Certificate2)","needQuote":true,"nodes":[{"content":"GetECDsaPrivateKey(X509Certificate2)","pos":[0,36]}]},{"pos":[86399,86417],"content":"GetECDsaPrivateKey","needQuote":true,"nodes":[{"content":"GetECDsaPrivateKey","pos":[0,18]}]},{"pos":[86534,86535],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86634,86650],"content":"X509Certificate2","needQuote":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"pos":[86738,86739],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86942,86960],"content":"GetECDsaPrivateKey","needQuote":true,"nodes":[{"content":"GetECDsaPrivateKey","pos":[0,18]}]},{"pos":[87077,87078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87177,87193],"content":"X509Certificate2","needQuote":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"pos":[87281,87282],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87714,87740],"content":"ECDsaCertificateExtensions","needQuote":true,"nodes":[{"content":"ECDsaCertificateExtensions","pos":[0,26]}]},{"pos":[88147,88182],"content":"GetECDsaPublicKey(X509Certificate2)","needQuote":true,"nodes":[{"content":"GetECDsaPublicKey(X509Certificate2)","pos":[0,35]}]},{"pos":[88539,88556],"content":"GetECDsaPublicKey","needQuote":true,"nodes":[{"content":"GetECDsaPublicKey","pos":[0,17]}]},{"pos":[88672,88673],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88772,88788],"content":"X509Certificate2","needQuote":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"pos":[88876,88877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89079,89096],"content":"GetECDsaPublicKey","needQuote":true,"nodes":[{"content":"GetECDsaPublicKey","pos":[0,17]}]},{"pos":[89212,89213],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89312,89328],"content":"X509Certificate2","needQuote":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"pos":[89416,89417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89870,89904],"content":"GetRSAPrivateKey(X509Certificate2)","needQuote":true,"nodes":[{"content":"GetRSAPrivateKey(X509Certificate2)","pos":[0,34]}]},{"pos":[90255,90271],"content":"GetRSAPrivateKey","needQuote":true,"nodes":[{"content":"GetRSAPrivateKey","pos":[0,16]}]},{"pos":[90384,90385],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90484,90500],"content":"X509Certificate2","needQuote":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"pos":[90588,90589],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90788,90804],"content":"GetRSAPrivateKey","needQuote":true,"nodes":[{"content":"GetRSAPrivateKey","pos":[0,16]}]},{"pos":[90917,90918],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91017,91033],"content":"X509Certificate2","needQuote":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"pos":[91121,91122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91544,91568],"content":"RSACertificateExtensions","needQuote":true,"nodes":[{"content":"RSACertificateExtensions","pos":[0,24]}]},{"pos":[91965,91998],"content":"GetRSAPublicKey(X509Certificate2)","needQuote":true,"nodes":[{"content":"GetRSAPublicKey(X509Certificate2)","pos":[0,33]}]},{"pos":[92347,92362],"content":"GetRSAPublicKey","needQuote":true,"nodes":[{"content":"GetRSAPublicKey","pos":[0,15]}]},{"pos":[92474,92475],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92574,92590],"content":"X509Certificate2","needQuote":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"pos":[92678,92679],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92877,92892],"content":"GetRSAPublicKey","needQuote":true,"nodes":[{"content":"GetRSAPublicKey","pos":[0,15]}]},{"pos":[93004,93005],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93104,93120],"content":"X509Certificate2","needQuote":true,"nodes":[{"content":"X509Certificate2","pos":[0,16]}]},{"pos":[93208,93209],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93496,93502],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[93622,93626],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[93685,93687]},{"pos":[93750,93754],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[93812,93814],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[93947,93953],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[94189,94208],"content":"X509KeyStorageFlags","needQuote":true,"nodes":[{"content":"X509KeyStorageFlags","pos":[0,19]}]},{"pos":[94470,94476],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[94622,94629],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[94872,94895],"content":"X509ExtensionCollection","needQuote":true,"nodes":[{"content":"X509ExtensionCollection","pos":[0,23]}]},{"pos":[95262,95283],"content":"X500DistinguishedName","needQuote":true,"nodes":[{"content":"X500DistinguishedName","pos":[0,21]}]},{"pos":[95553,95561],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[95793,95802],"content":"PublicKey","needQuote":true,"nodes":[{"content":"PublicKey","pos":[0,9]}]},{"pos":[96075,96078],"content":"Oid","needQuote":true,"nodes":[{"content":"Oid","pos":[0,3]}]},{"pos":[96256,96284],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[96480,96485],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[96714,96729],"content":"X509ContentType","needQuote":true,"nodes":[{"content":"X509ContentType","pos":[0,15]}]},{"pos":[97063,97075],"content":"X509NameType","needQuote":true,"nodes":[{"content":"X509NameType","pos":[0,12]}]},{"pos":[97428,97438],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[97629,97637],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[97733,97734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97761,97762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97880,97888],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[97984,97985],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98012,98013],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98352,98369],"content":"ToString(Boolean)","needQuote":true,"nodes":[{"content":"ToString(Boolean)","pos":[0,17]}]},{"pos":[98590,98598],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[98694,98695],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98746,98753],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[98814,98815],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98949,98957],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[99053,99054],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99105,99112],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[99173,99174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99430,99452],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]},{"pos":[99700,99717],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[99893,99914],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2\n  id: X509Certificate2\n  parent: System.Security.Cryptography.X509Certificates\n  children:\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Archived\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.RawData\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.Version\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: X509Certificate2\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 126\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Represents an X.509 certificate.  </p>\\n\"\n  syntax:\n    content: 'public class X509Certificate2 : X509Certificate, IDisposable'\n    content.vb: >-\n      Public Class X509Certificate2\n          Inherits X509Certificate\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.X509Certificates.X509Certificate\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Handle\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Issuer\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Subject\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: X509Certificate2\n  extensionMethods:\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey\n  - System.Security.Cryptography.X509Certificates.X509Certificate2.System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate2()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 128\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public X509Certificate2()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate2.X509Certificate2()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate2(Byte[])\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 129\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using information from a byte array.</p>\\n\"\n  syntax:\n    content: public X509Certificate2(byte[] rawData)\n    content.vb: Public Sub New(rawData As Byte())\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing data from an X.509 certificate. </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.Byte())\n  name.vb: X509Certificate2(Byte())\n  nameWithType: X509Certificate2.X509Certificate2(Byte[])\n  nameWithType.vb: X509Certificate2.X509Certificate2(Byte())\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)\n  id: '#ctor(System.Byte[],System.String)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate2(Byte[], String)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.Byte[], System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 130\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a byte array and a password.</p>\\n\"\n  syntax:\n    content: public X509Certificate2(byte[] rawData, string password)\n    content.vb: Public Sub New(rawData As Byte(), password As String)\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing data from an X.509 certificate. </p>\\n\"\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password required to access the X.509 certificate data. </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.Byte(), System.String)\n  name.vb: X509Certificate2(Byte(), String)\n  nameWithType: X509Certificate2.X509Certificate2(Byte[], String)\n  nameWithType.vb: X509Certificate2.X509Certificate2(Byte(), String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  id: '#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate2(Byte[], String, X509KeyStorageFlags)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.Byte[], System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 131\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a byte array, a password, and a key storage flag.</p>\\n\"\n  syntax:\n    content: public X509Certificate2(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags)\n    content.vb: Public Sub New(rawData As Byte(), password As String, keyStorageFlags As X509KeyStorageFlags)\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing data from an X.509 certificate. </p>\\n\"\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password required to access the X.509 certificate data. </p>\\n\"\n    - id: keyStorageFlags\n      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n      description: \"\\n<p>A bitwise combination of the enumeration values that control where and how to import the certificate. </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.Byte(), System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  name.vb: X509Certificate2(Byte(), String, X509KeyStorageFlags)\n  nameWithType: X509Certificate2.X509Certificate2(Byte[], String, X509KeyStorageFlags)\n  nameWithType.vb: X509Certificate2.X509Certificate2(Byte(), String, X509KeyStorageFlags)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate2(IntPtr)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.IntPtr)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 132\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using an unmanaged handle.</p>\\n\"\n  syntax:\n    content: public X509Certificate2(IntPtr handle)\n    content.vb: Public Sub New(handle As IntPtr)\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: \"\\n<p>A pointer to a certificate context in unmanaged code. The C structure is called <strong>PCCERT_CONTEXT</strong>.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate2.X509Certificate2(IntPtr)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate2(String)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 133\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a certificate file name.</p>\\n\"\n  syntax:\n    content: public X509Certificate2(string fileName)\n    content.vb: Public Sub New(fileName As String)\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>The name of a certificate file. </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate2.X509Certificate2(String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate2(String, String)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 134\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a certificate file name and a password used to access the certificate.</p>\\n\"\n  syntax:\n    content: public X509Certificate2(string fileName, string password)\n    content.vb: Public Sub New(fileName As String, password As String)\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>The name of a certificate file. </p>\\n\"\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password required to access the X.509 certificate data. </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate2.X509Certificate2(String, String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  id: '#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate2(String, String, X509KeyStorageFlags)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.X509Certificate2(System.String, System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 135\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a certificate file name, a password used to access the certificate, and a key storage flag.</p>\\n\"\n  syntax:\n    content: public X509Certificate2(string fileName, string password, X509KeyStorageFlags keyStorageFlags)\n    content.vb: Public Sub New(fileName As String, password As String, keyStorageFlags As X509KeyStorageFlags)\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>The name of a certificate file. </p>\\n\"\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password required to access the X.509 certificate data. </p>\\n\"\n    - id: keyStorageFlags\n      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n      description: \"\\n<p>A bitwise combination of the enumeration values that control where and how to import the certificate. </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate2.X509Certificate2(String, String, X509KeyStorageFlags)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived\n  id: Archived\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: Archived\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Archived\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Archived\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 136\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets or sets a value indicating that an X.509 certificate is archived.</p>\\n\"\n  syntax:\n    content: public bool Archived { get; set; }\n    content.vb: Public Property Archived As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the certificate is archived, <strong>false</strong> if the certificate is not archived.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate is unreadable. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate2.Archived\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions\n  id: Extensions\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: Extensions\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Extensions\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 137\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets a collection of <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Extension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: public X509ExtensionCollection Extensions { get; }\n    content.vb: Public ReadOnly Property Extensions As X509ExtensionCollection\n    parameters: []\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509ExtensionCollection\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ExtensionCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate is unreadable. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate2.Extensions\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName\n  id: FriendlyName\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: FriendlyName\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FriendlyName\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 138\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets or sets the associated alias for a certificate.</p>\\n\"\n  syntax:\n    content: public string FriendlyName { get; set; }\n    content.vb: Public Property FriendlyName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The certificate's friendly name.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate is unreadable. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate2.FriendlyName\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey\n  id: HasPrivateKey\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: HasPrivateKey\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasPrivateKey\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 139\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets a value that indicates whether an <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains a private key. </p>\\n\"\n  syntax:\n    content: public bool HasPrivateKey { get; }\n    content.vb: Public ReadOnly Property HasPrivateKey As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains a private key; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate context is invalid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate2.HasPrivateKey\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName\n  id: IssuerName\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: IssuerName\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IssuerName\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 140\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the distinguished name of the certificate issuer.</p>\\n\"\n  syntax:\n    content: public X500DistinguishedName IssuerName { get; }\n    content.vb: Public ReadOnly Property IssuerName As X500DistinguishedName\n    parameters: []\n    return:\n      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.X509Certificates.X500DistinguishedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the name of the certificate issuer.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate context is invalid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate2.IssuerName\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter\n  id: NotAfter\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: NotAfter\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotAfter\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 141\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the date in local time after which a certificate is no longer valid.</p>\\n\"\n  syntax:\n    content: public DateTime NotAfter { get; }\n    content.vb: Public ReadOnly Property NotAfter As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>A <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the expiration date for the certificate.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate is unreadable. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate2.NotAfter\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore\n  id: NotBefore\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: NotBefore\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotBefore\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 142\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the date in local time on which a certificate becomes valid.</p>\\n\"\n  syntax:\n    content: public DateTime NotBefore { get; }\n    content.vb: Public ReadOnly Property NotBefore As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>A <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the effective date of the certificate.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate is unreadable. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate2.NotBefore\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\n  id: PublicKey\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: PublicKey\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PublicKey\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 143\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object associated with a certificate.</p>\\n\"\n  syntax:\n    content: public PublicKey PublicKey { get; }\n    content.vb: Public ReadOnly Property PublicKey As PublicKey\n    parameters: []\n    return:\n      type: System.Security.Cryptography.X509Certificates.PublicKey\n      description: \"\\n<p>A <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The key value is not an RSA or DSA key, or the key is unreadable. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate2.PublicKey\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.RawData\n  id: RawData\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: RawData\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.RawData\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RawData\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 144\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the raw data of a certificate.</p>\\n\"\n  syntax:\n    content: public byte[] RawData { get; }\n    content.vb: Public ReadOnly Property RawData As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The raw data of the certificate as a byte array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate2.RawData\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber\n  id: SerialNumber\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: SerialNumber\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SerialNumber\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 145\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the serial number of a certificate.</p>\\n\"\n  syntax:\n    content: public string SerialNumber { get; }\n    content.vb: Public ReadOnly Property SerialNumber As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The serial number of the certificate.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate2.SerialNumber\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm\n  id: SignatureAlgorithm\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: SignatureAlgorithm\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignatureAlgorithm\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 146\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the algorithm used to create the signature of a certificate.</p>\\n\"\n  syntax:\n    content: public Oid SignatureAlgorithm { get; }\n    content.vb: Public ReadOnly Property SignatureAlgorithm As Oid\n    parameters: []\n    return:\n      type: System.Security.Cryptography.Oid\n      description: \"\\n<p>Returns the object identifier (<xref href=\\\"System.Security.Cryptography.Oid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) of the signature algorithm.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate is unreadable. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate2.SignatureAlgorithm\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName\n  id: SubjectName\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: SubjectName\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SubjectName\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 147\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the subject distinguished name from a certificate.</p>\\n\"\n  syntax:\n    content: public X500DistinguishedName SubjectName { get; }\n    content.vb: Public ReadOnly Property SubjectName As X500DistinguishedName\n    parameters: []\n    return:\n      type: System.Security.Cryptography.X509Certificates.X500DistinguishedName\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.X509Certificates.X500DistinguishedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the name of the certificate subject.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate context is invalid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate2.SubjectName\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint\n  id: Thumbprint\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: Thumbprint\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Thumbprint\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 148\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the thumbprint of a certificate.</p>\\n\"\n  syntax:\n    content: public string Thumbprint { get; }\n    content.vb: Public ReadOnly Property Thumbprint As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The thumbprint of the certificate.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate2.Thumbprint\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.Version\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate2.Version\n  id: Version\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: Version\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.Version\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Version\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 149\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the X.509 format version of a certificate.</p>\\n\"\n  syntax:\n    content: public int Version { get; }\n    content.vb: Public ReadOnly Property Version As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The certificate format.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate is unreadable. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate2.Version\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])\n  id: GetCertContentType(System.Byte[])\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: GetCertContentType(Byte[])\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCertContentType\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 150\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Indicates the type of certificate contained in a byte array.</p>\\n\"\n  syntax:\n    content: public static X509ContentType GetCertContentType(byte[] rawData)\n    content.vb: Public Shared Function GetCertContentType(rawData As Byte()) As X509ContentType\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing data from an X.509 certificate. </p>\\n\"\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509ContentType\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ContentType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>rawData</em> has a zero length or is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte())\n  name.vb: GetCertContentType(Byte())\n  nameWithType: X509Certificate2.GetCertContentType(Byte[])\n  nameWithType.vb: X509Certificate2.GetCertContentType(Byte())\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)\n  id: GetCertContentType(System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: GetCertContentType(String)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCertContentType\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 151\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Indicates the type of certificate contained in a file.</p>\\n\"\n  syntax:\n    content: public static X509ContentType GetCertContentType(string fileName)\n    content.vb: Public Shared Function GetCertContentType(fileName As String) As X509ContentType\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>The name of a certificate file. </p>\\n\"\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509ContentType\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ContentType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>fileName</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: X509Certificate2.GetCertContentType(String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)\n  id: GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: GetNameInfo(X509NameType, Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNameInfo\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 152\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the subject and issuer names from a certificate.</p>\\n\"\n  syntax:\n    content: public string GetNameInfo(X509NameType nameType, bool forIssuer)\n    content.vb: Public Function GetNameInfo(nameType As X509NameType, forIssuer As Boolean) As String\n    parameters:\n    - id: nameType\n      type: System.Security.Cryptography.X509Certificates.X509NameType\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.X509Certificates.X509NameType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value for the subject. </p>\\n\"\n    - id: forIssuer\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to include the issuer name; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the certificate.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate2.GetNameInfo(X509NameType, Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString\n  id: ToString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 153\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Displays an X.509 certificate in text format.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The certificate information.</p>\\n\"\n  overridden: System.Security.Cryptography.X509Certificates.X509Certificate.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: X509Certificate2.ToString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)\n  id: ToString(System.Boolean)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate2\n  langs:\n  - csharp\n  - vb\n  name: ToString(Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 154\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Displays an X.509 certificate in text format.</p>\\n\"\n  syntax:\n    content: public override string ToString(bool verbose)\n    content.vb: Public Overrides Function ToString(verbose As Boolean) As String\n    parameters:\n    - id: verbose\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to display the public key, private key, extensions, and so forth; <strong>false</strong> to display information that is similar to the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, including thumbprint, serial number, subject and issuer names, and so on. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The certificate information.</p>\\n\"\n  overridden: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: X509Certificate2.ToString(Boolean)\nreferences:\n- uid: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: System.Security.Cryptography.X509Certificates\n  fullName: System.Security.Cryptography.X509Certificates\n  commentId: N:System.Security.Cryptography.X509Certificates\n  nameWithType: System.Security.Cryptography.X509Certificates\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate\n  nameWithType: X509Certificate\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Handle\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Handle\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Handle\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate.Handle\n  nameWithType: X509Certificate.Handle\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Issuer\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Issuer\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Issuer\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate.Issuer\n  nameWithType: X509Certificate.Issuer\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Subject\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Subject\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Subject\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate.Subject\n  nameWithType: X509Certificate.Subject\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Dispose()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n  nameWithType: X509Certificate.Dispose()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)\n  nameWithType: X509Certificate.Dispose(Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)\n    name: Equals\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)\n  nameWithType: X509Certificate.Equals(Object)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Equals(X509Certificate)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n    name: Equals\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate\n    name: X509Certificate\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n    name: Equals\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate\n    name: X509Certificate\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n  nameWithType: X509Certificate.Equals(X509Certificate)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: Export(X509ContentType)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n    name: Export\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509ContentType\n    name: X509ContentType\n    fullName: System.Security.Cryptography.X509Certificates.X509ContentType\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n    name: Export\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509ContentType\n    name: X509ContentType\n    fullName: System.Security.Cryptography.X509Certificates.X509ContentType\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n  nameWithType: X509Certificate.Export(X509ContentType)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: true\n  name: Export(X509ContentType, String)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType, System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n    name: Export\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509ContentType\n    name: X509ContentType\n    fullName: System.Security.Cryptography.X509Certificates.X509ContentType\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n    name: Export\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509ContentType\n    name: X509ContentType\n    fullName: System.Security.Cryptography.X509Certificates.X509ContentType\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n  nameWithType: X509Certificate.Export(X509ContentType, String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetCertHash()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\n    name: GetCertHash\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\n    name: GetCertHash\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\n  nameWithType: X509Certificate.GetCertHash()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetFormat()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\n    name: GetFormat\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\n    name: GetFormat\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\n  nameWithType: X509Certificate.GetFormat()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\n    name: GetHashCode\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\n  nameWithType: X509Certificate.GetHashCode()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetKeyAlgorithm()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\n    name: GetKeyAlgorithm\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\n    name: GetKeyAlgorithm\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\n  nameWithType: X509Certificate.GetKeyAlgorithm()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetKeyAlgorithmParameters()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\n    name: GetKeyAlgorithmParameters\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\n    name: GetKeyAlgorithmParameters\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\n  nameWithType: X509Certificate.GetKeyAlgorithmParameters()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetKeyAlgorithmParametersString()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\n    name: GetKeyAlgorithmParametersString\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\n    name: GetKeyAlgorithmParametersString\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\n  nameWithType: X509Certificate.GetKeyAlgorithmParametersString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetPublicKey()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\n    name: GetPublicKey\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\n    name: GetPublicKey\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\n  nameWithType: X509Certificate.GetPublicKey()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: GetSerialNumber()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\n    name: GetSerialNumber\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\n    name: GetSerialNumber\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\n  nameWithType: X509Certificate.GetSerialNumber()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  definition: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  name: GetECDsaPrivateKey()\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey\n    name: GetECDsaPrivateKey\n    fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey\n    name: GetECDsaPrivateKey\n    fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey\n  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  definition: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  name: GetECDsaPublicKey()\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey\n    name: GetECDsaPublicKey\n    fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey\n    name: GetECDsaPublicKey\n    fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey\n  parent: System.Security.Cryptography.X509Certificates.RSACertificateExtensions\n  definition: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  name: GetRSAPrivateKey()\n  fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey\n    name: GetRSAPrivateKey\n    fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey\n    name: GetRSAPrivateKey\n    fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  nameWithType: RSACertificateExtensions.GetRSAPrivateKey()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2.System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey\n  parent: System.Security.Cryptography.X509Certificates.RSACertificateExtensions\n  definition: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  name: GetRSAPublicKey()\n  fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey\n    name: GetRSAPublicKey\n    fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey\n    name: GetRSAPublicKey\n    fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  nameWithType: RSACertificateExtensions.GetRSAPublicKey()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  isExternal: false\n  name: GetECDsaPrivateKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n    name: GetECDsaPrivateKey\n    fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n    name: X509Certificate2\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n    name: GetECDsaPrivateKey\n    fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n    name: X509Certificate2\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: ECDsaCertificateExtensions\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  commentId: T:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions\n  nameWithType: ECDsaCertificateExtensions\n- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  isExternal: false\n  name: GetECDsaPublicKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n    name: GetECDsaPublicKey\n    fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n    name: X509Certificate2\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n    name: GetECDsaPublicKey\n    fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n    name: X509Certificate2\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  isExternal: false\n  name: GetRSAPrivateKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n    name: GetRSAPrivateKey\n    fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n    name: X509Certificate2\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n    name: GetRSAPrivateKey\n    fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n    name: X509Certificate2\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  nameWithType: RSACertificateExtensions.GetRSAPrivateKey(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: RSACertificateExtensions\n  fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions\n  commentId: T:System.Security.Cryptography.X509Certificates.RSACertificateExtensions\n  nameWithType: RSACertificateExtensions\n- uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  isExternal: false\n  name: GetRSAPublicKey(X509Certificate2)\n  fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n    name: GetRSAPublicKey\n    fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n    name: X509Certificate2\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n    name: GetRSAPublicKey\n    fullName: System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n    name: X509Certificate2\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  nameWithType: RSACertificateExtensions.GetRSAPublicKey(X509Certificate2)\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509KeyStorageFlags\n  fullName: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n  commentId: T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n  nameWithType: X509KeyStorageFlags\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  commentId: T:System.IntPtr\n  nameWithType: IntPtr\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.X509Certificates.X509ExtensionCollection\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509ExtensionCollection\n  fullName: System.Security.Cryptography.X509Certificates.X509ExtensionCollection\n  commentId: T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection\n  nameWithType: X509ExtensionCollection\n- uid: System.Security.Cryptography.X509Certificates.X500DistinguishedName\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X500DistinguishedName\n  fullName: System.Security.Cryptography.X509Certificates.X500DistinguishedName\n  commentId: T:System.Security.Cryptography.X509Certificates.X500DistinguishedName\n  nameWithType: X500DistinguishedName\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  commentId: T:System.DateTime\n  nameWithType: DateTime\n- uid: System.Security.Cryptography.X509Certificates.PublicKey\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: PublicKey\n  fullName: System.Security.Cryptography.X509Certificates.PublicKey\n  commentId: T:System.Security.Cryptography.X509Certificates.PublicKey\n  nameWithType: PublicKey\n- uid: System.Security.Cryptography.Oid\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: Oid\n  fullName: System.Security.Cryptography.Oid\n  commentId: T:System.Security.Cryptography.Oid\n  nameWithType: Oid\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.X509Certificates.X509ContentType\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509ContentType\n  fullName: System.Security.Cryptography.X509Certificates.X509ContentType\n  commentId: T:System.Security.Cryptography.X509Certificates.X509ContentType\n  nameWithType: X509ContentType\n- uid: System.Security.Cryptography.X509Certificates.X509NameType\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509NameType\n  fullName: System.Security.Cryptography.X509Certificates.X509NameType\n  commentId: T:System.Security.Cryptography.X509Certificates.X509NameType\n  nameWithType: X509NameType\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: false\n  name: ToString()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString\n    name: ToString\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString\n    name: ToString\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString\n  nameWithType: X509Certificate.ToString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  isExternal: true\n  name: ToString(Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)\n    name: ToString\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)\n    name: ToString\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)\n  nameWithType: X509Certificate.ToString(Boolean)\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}