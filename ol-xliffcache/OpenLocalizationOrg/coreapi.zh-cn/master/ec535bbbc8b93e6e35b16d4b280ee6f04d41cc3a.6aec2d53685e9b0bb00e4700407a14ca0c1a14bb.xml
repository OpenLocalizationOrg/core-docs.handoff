{"nodes":[{"pos":[581,600],"content":"Queue<T>.Enumerator","needQuote":true,"nodes":[{"content":"Queue&lt;T&gt;.Enumerator","pos":[0,19],"source":"Queue<T>.Enumerator"}]},{"pos":[3078,3085],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The enumerator is positioned before the first element of the collection or after the last element.","pos":[4072,4175],"source":"\\n<p>The enumerator is positioned before the first element of the collection or after the last element."},{"content":"&lt;/p&gt;\\n","pos":[4176,4182],"source":" </p>\\n"},{"pos":[5079,5098],"content":"IEnumerator.Current","needQuote":true,"nodes":[{"content":"IEnumerator.Current","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The element in the collection at the current position of the enumerator.&lt;/p&gt;\\n","pos":[5941,6024],"source":"\\n<p>The element in the collection at the current position of the enumerator.</p>\\n"},{"content":"\\n&lt;p&gt;The enumerator is positioned before the first element of the collection or after the last element.","pos":[6151,6254],"source":"\\n<p>The enumerator is positioned before the first element of the collection or after the last element."},{"content":"&lt;/p&gt;\\n","pos":[6255,6261],"source":" </p>\\n"},{"pos":[7244,7253],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[8450,8460],"content":"MoveNext()","needQuote":true,"nodes":[{"content":"MoveNext()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the enumerator was successfully advanced to the next element; &lt;strong&gt;false&lt;/strong&gt; if the enumerator has passed the end of the collection.&lt;/p&gt;\\n","pos":[9227,9405],"source":"\\n<p>\\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\\n"},{"content":"\\n&lt;p&gt;The collection was modified after the enumerator was created.","pos":[9532,9598],"source":"\\n<p>The collection was modified after the enumerator was created."},{"content":"&lt;/p&gt;\\n","pos":[9599,9605],"source":" </p>\\n"},{"pos":[10381,10400],"content":"IEnumerator.Reset()","needQuote":true,"nodes":[{"content":"IEnumerator.Reset()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The collection was modified after the enumerator was created.","pos":[11276,11342],"source":"\\n<p>The collection was modified after the enumerator was created."},{"content":"&lt;/p&gt;\\n","pos":[11343,11349],"source":" </p>\\n"},{"pos":[12251,12277],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[12553,12567],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[12786,12797],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[12861,12862],"content":"<","needQuote":true,"nodes":[]},{"pos":[12889,12890],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[13010,13021],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[13086,13089]},{"pos":[13123,13124],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[13151,13152],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13390,13401],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[13590,13601],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[13795,13809],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[13934,13940],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13989,13990],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14040,14046],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14106,14107],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14193,14199],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14248,14249],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14299,14305],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14365,14366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14569,14582],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14689,14700],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14754,14755],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14782,14783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14859,14870],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14924,14925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14952,14953],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15142,15152],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15253,15261],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15312,15313],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15340,15341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15414,15422],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15473,15474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15501,15502],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15705,15727],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[15875,15881],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15948,15949],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15999,16005],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16066,16067]},{"pos":[16122,16128],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16188,16189],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16286,16292],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16359,16360],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16410,16416],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16477,16478]},{"pos":[16533,16539],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16599,16600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16845,16876],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[17042,17057],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17133,17134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17184,17190],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17251,17252]},{"pos":[17307,17313],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17373,17374],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17480,17495],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17571,17572],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17622,17628],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17689,17690]},{"pos":[17745,17751],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17811,17812],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18038,18047],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[18140,18147],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18215,18216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18243,18244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18313,18320],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18388,18389],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18416,18417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18580,18594],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[18813,18824],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[18888,18889],"content":"<","needQuote":true,"nodes":[]},{"pos":[18916,18917],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19037,19048],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[19113,19116]},{"pos":[19150,19151],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19178,19179],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19374,19392],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[19535,19541],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[19675,19684],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[19838,19844],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20107,20114],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[20432,20433],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20568,20575],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[20891,20892],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[21040,21047],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[21280,21289],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[21392,21399],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[21451,21452],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21479,21480],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21554,21561],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[21613,21614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21641,21642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21855,21865],"content":"MoveNext()","needQuote":true,"nodes":[{"content":"MoveNext()","pos":[0,10]}]},{"pos":[21994,22002],"content":"MoveNext","needQuote":true,"nodes":[{"content":"MoveNext","pos":[0,8]}]},{"pos":[22067,22068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22095,22096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22183,22191],"content":"MoveNext","needQuote":true,"nodes":[{"content":"MoveNext","pos":[0,8]}]},{"pos":[22256,22257],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22284,22285],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22463,22470],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[22665,22672],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[22795,22800],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[22862,22863],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22890,22891],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22975,22980],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[23042,23043],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23070,23071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23261,23286],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Collections.Generic.Queue`1.Enumerator\n  commentId: T:System.Collections.Generic.Queue`1.Enumerator\n  id: Queue`1.Enumerator\n  parent: System.Collections.Generic\n  children:\n  - System.Collections.Generic.Queue`1.Enumerator.Current\n  - System.Collections.Generic.Queue`1.Enumerator.Dispose\n  - System.Collections.Generic.Queue`1.Enumerator.MoveNext\n  - System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current\n  - System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset\n  langs:\n  - csharp\n  - vb\n  name: Queue<T>.Enumerator\n  fullName: System.Collections.Generic.Queue<T>.Enumerator\n  type: Struct\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Enumerator\n    path: src/System.Collections/src/System/Collections/Generic/Queue.cs\n    startLine: 366\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Enumerates the elements of a <xref href=\\\"System.Collections.Generic.Queue`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Performance\", \"CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes\", Justification = \"not an expected scenario\")]\n\n      public struct Enumerator : IEnumerator<T>, IDisposable, IEnumerator\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Performance\", \"CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes\", Justification:=\"not an expected scenario\")>\n\n      Public Structure Enumerator\n          Implements IEnumerator(Of T), IDisposable, IEnumerator\n  seealso:\n  - type: System.Collections.Generic.IEnumerable`1\n    commentId: T:System.Collections.Generic.IEnumerable`1\n  - type: System.Collections.Generic.IEnumerator`1\n    commentId: T:System.Collections.Generic.IEnumerator`1\n  implements:\n  - System.Collections.Generic.IEnumerator{{T}}\n  - System.Collections.IEnumerator\n  - System.IDisposable\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  fullName.vb: System.Collections.Generic.Queue(Of T).Enumerator\n  name.vb: Queue(Of T).Enumerator\n  nameWithType: Queue<T>.Enumerator\n  nameWithType.vb: Queue(Of T).Enumerator\n- uid: System.Collections.Generic.Queue`1.Enumerator.Current\n  commentId: P:System.Collections.Generic.Queue`1.Enumerator.Current\n  id: Current\n  parent: System.Collections.Generic.Queue`1.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: Current\n  fullName: System.Collections.Generic.Queue<T>.Enumerator.Current\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Current\n    path: src/System.Collections/src/System/Collections/Generic/Queue.cs\n    startLine: 412\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: public T Current { get; }\n    content.vb: Public ReadOnly Property Current As T\n    parameters: []\n    return:\n      type: '{T}'\n      description: \"\\n<p>The element in the <xref href=\\\"System.Collections.Generic.Queue`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the current position of the enumerator.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.Queue`1.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.Queue`1.Enumerator.MoveNext\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.Generic.IEnumerator{{T}}.Current\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.Queue(Of T).Enumerator.Current\n  nameWithType: Queue<T>.Enumerator.Current\n  nameWithType.vb: Queue(Of T).Enumerator.Current\n- uid: System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current\n  commentId: P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current\n  id: System#Collections#IEnumerator#Current\n  isEii: true\n  parent: System.Collections.Generic.Queue`1.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IEnumerator.Current\n  fullName: System.Collections.Generic.Queue<T>.Enumerator.System.Collections.IEnumerator.Current\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEnumerator.Current\n    path: src/System.Collections/src/System/Collections/Generic/Queue.cs\n    startLine: 427\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Gets the element at the current position of the enumerator.</p>\\n\"\n  syntax:\n    content: object IEnumerator.Current { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IEnumerator.Current As Object Implements IEnumerator.Current\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The element in the collection at the current position of the enumerator.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.Queue`1.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.Queue`1.Enumerator.MoveNext\n  - type: System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset\n    commentId: M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset\n  implements:\n  - System.Collections.IEnumerator.Current\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.Queue(Of T).Enumerator.System.Collections.IEnumerator.Current\n  name.vb: System.Collections.IEnumerator.Current\n  nameWithType: Queue<T>.Enumerator.IEnumerator.Current\n  nameWithType.vb: Queue(Of T).Enumerator.System.Collections.IEnumerator.Current\n- uid: System.Collections.Generic.Queue`1.Enumerator.Dispose\n  commentId: M:System.Collections.Generic.Queue`1.Enumerator.Dispose\n  id: Dispose\n  parent: System.Collections.Generic.Queue`1.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Collections.Generic.Queue<T>.Enumerator.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Collections/src/System/Collections/Generic/Queue.cs\n    startLine: 384\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.Collections.Generic.Queue`1.Enumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.Queue(Of T).Enumerator.Dispose()\n  nameWithType: Queue<T>.Enumerator.Dispose()\n  nameWithType.vb: Queue(Of T).Enumerator.Dispose()\n- uid: System.Collections.Generic.Queue`1.Enumerator.MoveNext\n  commentId: M:System.Collections.Generic.Queue`1.Enumerator.MoveNext\n  id: MoveNext\n  parent: System.Collections.Generic.Queue`1.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: MoveNext()\n  fullName: System.Collections.Generic.Queue<T>.Enumerator.MoveNext()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MoveNext\n    path: src/System.Collections/src/System/Collections/Generic/Queue.cs\n    startLine: 391\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Advances the enumerator to the next element of the <xref href=\\\"System.Collections.Generic.Queue`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool MoveNext()\n    content.vb: Public Function MoveNext As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The collection was modified after the enumerator was created. </p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.Queue`1.Enumerator.Current\n    commentId: P:System.Collections.Generic.Queue`1.Enumerator.Current\n  implements:\n  - System.Collections.IEnumerator.MoveNext\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Generic.Queue(Of T).Enumerator.MoveNext()\n  nameWithType: Queue<T>.Enumerator.MoveNext()\n  nameWithType.vb: Queue(Of T).Enumerator.MoveNext()\n- uid: System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset\n  commentId: M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset\n  id: System#Collections#IEnumerator#Reset\n  isEii: true\n  parent: System.Collections.Generic.Queue`1.Enumerator\n  langs:\n  - csharp\n  - vb\n  name: IEnumerator.Reset()\n  fullName: System.Collections.Generic.Queue<T>.Enumerator.System.Collections.IEnumerator.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections/src/System/Collections/Generic/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEnumerator.Reset\n    path: src/System.Collections/src/System/Collections/Generic/Queue.cs\n    startLine: 432\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Sets the enumerator to its initial position, which is before the first element in the collection.</p>\\n\"\n  syntax:\n    content: void IEnumerator.Reset()\n    content.vb: Sub System.Collections.IEnumerator.Reset Implements IEnumerator.Reset\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The collection was modified after the enumerator was created. </p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.Queue`1.Enumerator.MoveNext\n    commentId: M:System.Collections.Generic.Queue`1.Enumerator.MoveNext\n  - type: System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current\n    commentId: P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current\n  - type: System.Collections.Generic.Queue`1.Enumerator.Current\n    commentId: P:System.Collections.Generic.Queue`1.Enumerator.Current\n  implements:\n  - System.Collections.IEnumerator.Reset\n  fullName.vb: System.Collections.Generic.Queue(Of T).Enumerator.System.Collections.IEnumerator.Reset()\n  name.vb: System.Collections.IEnumerator.Reset()\n  nameWithType: Queue<T>.Enumerator.IEnumerator.Reset()\n  nameWithType.vb: Queue(Of T).Enumerator.System.Collections.IEnumerator.Reset()\nreferences:\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.IEnumerator{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator{`0}\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Collections.Generic.IEnumerator`1\n  isExternal: false\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator`1\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Generic.IEnumerator{{T}}.Current\n  parent: System.Collections.Generic.IEnumerator{{T}}\n  definition: System.Collections.Generic.IEnumerator`1.Current\n  name: Current\n  fullName: System.Collections.Generic.IEnumerator<T>.Current\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T).Current\n  nameWithType: IEnumerator<T>.Current\n  nameWithType.vb: IEnumerator(Of T).Current\n  commentId: P:System.Collections.Generic.IEnumerator{`0}.Current\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: System.Collections.Generic.IEnumerator`1.Current\n  isExternal: true\n  name: Current\n  fullName: System.Collections.Generic.IEnumerator<T>.Current\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T).Current\n  nameWithType: IEnumerator<T>.Current\n  nameWithType.vb: IEnumerator(Of T).Current\n  commentId: P:System.Collections.Generic.IEnumerator`1.Current\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Collections.IEnumerator.Current\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: Current\n  fullName: System.Collections.IEnumerator.Current\n  nameWithType: IEnumerator.Current\n  commentId: P:System.Collections.IEnumerator.Current\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Collections.IEnumerator.MoveNext\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: MoveNext()\n  fullName: System.Collections.IEnumerator.MoveNext()\n  spec.csharp:\n  - uid: System.Collections.IEnumerator.MoveNext\n    name: MoveNext\n    fullName: System.Collections.IEnumerator.MoveNext\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerator.MoveNext\n    name: MoveNext\n    fullName: System.Collections.IEnumerator.MoveNext\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator.MoveNext()\n  commentId: M:System.Collections.IEnumerator.MoveNext\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.IEnumerator.Reset\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: Reset()\n  fullName: System.Collections.IEnumerator.Reset()\n  spec.csharp:\n  - uid: System.Collections.IEnumerator.Reset\n    name: Reset\n    fullName: System.Collections.IEnumerator.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerator.Reset\n    name: Reset\n    fullName: System.Collections.IEnumerator.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator.Reset()\n  commentId: M:System.Collections.IEnumerator.Reset\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}