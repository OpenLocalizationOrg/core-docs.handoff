{"nodes":[{"pos":[1728,1743],"content":"ArraySegment<T>","needQuote":true,"nodes":[{"content":"ArraySegment&lt;T&gt;","pos":[0,15],"source":"ArraySegment<T>"}]},{"content":"\\n&lt;p&gt;The type of the elements in the array segment.&lt;/p&gt;\\n","pos":[2601,2658],"source":"\\n<p>The type of the elements in the array segment.</p>\\n"},{"pos":[3884,3901],"content":"ArraySegment(T[])","needQuote":true,"nodes":[{"content":"ArraySegment(T[])","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The array to wrap.&lt;/p&gt;\\n","pos":[4631,4660],"source":"\\n<p>The array to wrap.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4779,4832],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"pos":[5405,5436],"content":"ArraySegment(T[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ArraySegment(T[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The array containing the range of elements to delimit.&lt;/p&gt;\\n","pos":[6273,6338],"source":"\\n<p>The array containing the range of elements to delimit.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index of the first element in the range.&lt;/p&gt;\\n","pos":[6402,6468],"source":"\\n<p>The zero-based index of the first element in the range.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the range.&lt;/p&gt;\\n","pos":[6531,6578],"source":"\\n<p>The number of elements in the range.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6697,6750],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[6867,6929],"source":"\\n<p>\\n<em>offset</em> or <em>count</em> is less than 0.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid range in &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[7026,7121],"source":"\\n<p>\\n<em>offset</em> and <em>count</em> do not specify a valid range in <em>array</em>.</p>\\n"},{"pos":[7666,7671],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[8922,8927],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[10341,10347],"content":"Offset","needQuote":true,"nodes":[{"content":"Offset","pos":[0,6]}]},{"pos":[11900,11925],"content":"ICollection<T>.IsReadOnly","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;.IsReadOnly","pos":[0,25],"source":"ICollection<T>.IsReadOnly"}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the array segment is read-only; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12741,12845],"source":"\\n<p>\\n<strong>true</strong> if the array segment is read-only; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[13602,13622],"content":"IList<T>.Item[Int32]","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;.Item[Int32]","pos":[0,20],"source":"IList<T>.Item[Int32]"}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to get or set.&lt;/p&gt;\\n","pos":[14398,14459],"source":"\\n<p>The zero-based index of the element to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[14511,14557],"source":"\\n<p>The element at the specified index.</p>\\n"},{"content":"\\n&lt;p&gt;The property is set and the array segment is read-only.&lt;/p&gt;\\n","pos":[14931,14997],"source":"\\n<p>The property is set and the array segment is read-only.</p>\\n"},{"pos":[15746,15774],"content":"IReadOnlyList<T>.Item[Int32]","needQuote":true,"nodes":[{"content":"IReadOnlyList&lt;T&gt;.Item[Int32]","pos":[0,28],"source":"IReadOnlyList<T>.Item[Int32]"}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to get.&lt;/p&gt;\\n","pos":[16598,16652],"source":"\\n<p>The zero-based index of the element to get.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[16704,16750],"source":"\\n<p>The element at the specified index.</p>\\n"},{"content":"\\n&lt;p&gt;The property is set.&lt;/p&gt;\\n","pos":[17124,17155],"source":"\\n<p>The property is set.</p>\\n"},{"pos":[17858,17881],"content":"Equals(ArraySegment<T>)","needQuote":true,"nodes":[{"content":"Equals(ArraySegment&lt;T&gt;)","pos":[0,23],"source":"Equals(ArraySegment<T>)"}]},{"content":"\\n&lt;p&gt;The structure to compare with the current instance.&lt;/p&gt;\\n","pos":[18652,18714],"source":"\\n<p>The structure to compare with the current instance.</p>\\n"},{"pos":[19486,19500],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to be compared with the current instance.&lt;/p&gt;\\n","pos":[20167,20230],"source":"\\n<p>The object to be compared with the current instance.</p>\\n"},{"pos":[20997,21010],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[21613,21658],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[22263,22305],"content":"Equality(ArraySegment<T>, ArraySegment<T>)","needQuote":true,"nodes":[{"content":"Equality(ArraySegment&lt;T&gt;, ArraySegment&lt;T&gt;)","pos":[0,42],"source":"Equality(ArraySegment<T>, ArraySegment<T>)"}]},{"content":"\\n&lt;p&gt;The  structure on the left side of the equality operator.&lt;/p&gt;\\n","pos":[23128,23196],"source":"\\n<p>The  structure on the left side of the equality operator.</p>\\n"},{"content":"\\n&lt;p&gt;The structure on the right side of the equality operator.&lt;/p&gt;\\n","pos":[23264,23332],"source":"\\n<p>The structure on the right side of the equality operator.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;a&lt;/em&gt; is equal to &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23393,23500],"source":"\\n<p>\\n<strong>true</strong> if <em>a</em> is equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[24236,24280],"content":"Inequality(ArraySegment<T>, ArraySegment<T>)","needQuote":true,"nodes":[{"content":"Inequality(ArraySegment&lt;T&gt;, ArraySegment&lt;T&gt;)","pos":[0,44],"source":"Inequality(ArraySegment<T>, ArraySegment<T>)"}]},{"content":"\\n&lt;p&gt;The structure on the left side of the inequality operator.&lt;/p&gt;\\n","pos":[25110,25179],"source":"\\n<p>The structure on the left side of the inequality operator.</p>\\n"},{"content":"\\n&lt;p&gt;The structure on the right side of the inequality operator.&lt;/p&gt;\\n","pos":[25247,25317],"source":"\\n<p>The structure on the right side of the inequality operator.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;a&lt;/em&gt; is not equal to &lt;em&gt;b&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25378,25489],"source":"\\n<p>\\n<strong>true</strong> if <em>a</em> is not equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[26208,26229],"content":"ICollection<T>.Add(T)","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;.Add(T)","pos":[0,21],"source":"ICollection<T>.Add(T)"}]},{"content":"\\n&lt;p&gt;The object to add to the array segment.&lt;/p&gt;\\n","pos":[26943,26993],"source":"\\n<p>The object to add to the array segment.</p>\\n"},{"content":"\\n&lt;p&gt;The array segment is read-only.&lt;/p&gt;\\n","pos":[27112,27154],"source":"\\n<p>The array segment is read-only.</p>\\n"},{"pos":[27815,27837],"content":"ICollection<T>.Clear()","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;.Clear()","pos":[0,22],"source":"ICollection<T>.Clear()"}]},{"content":"\\n&lt;p&gt;The array segment is read-only.","pos":[28598,28634],"source":"\\n<p>The array segment is read-only."},{"content":"&lt;/p&gt;\\n","pos":[28635,28641],"source":" </p>\\n"},{"pos":[29324,29350],"content":"ICollection<T>.Contains(T)","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;.Contains(T)","pos":[0,26],"source":"ICollection<T>.Contains(T)"}]},{"content":"\\n&lt;p&gt;The object to locate in the array segment.&lt;/p&gt;\\n","pos":[30134,30187],"source":"\\n<p>The object to locate in the array segment.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;item&lt;/em&gt; is found in the array segment; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30248,30365],"source":"\\n<p>\\n<strong>true</strong> if <em>item</em> is found in the array segment; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[31111,31144],"content":"ICollection<T>.CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;.CopyTo(T[], Int32)","pos":[0,33],"source":"ICollection<T>.CopyTo(T[], Int32)"}]},{"content":"\\n&lt;p&gt;The one-dimensional array that is the destination of the elements copied from the array segment.","pos":[31995,32096],"source":"\\n<p>The one-dimensional array that is the destination of the elements copied from the array segment."},{"content":"The array must have zero-based indexing.&lt;/p&gt;\\n","pos":[32097,32143],"source":" The array must have zero-based indexing.</p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[32211,32285],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32404,32457],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;arrayIndex&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[32574,32622],"source":"\\n<p>\\n<em>arrayIndex</em> is less than 0.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is multidimensional.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The number of elements in the source array segment is greater than the available space from &lt;em&gt;arrayIndex&lt;/em&gt; to the end of the destination &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;Type &lt;em&gt;T&lt;/em&gt; cannot be cast automatically to the type of the destination &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;\\n","pos":[32719,33059],"source":"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or-</p>\\n<p>The number of elements in the source array segment is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>.</p>\\n<p>-or-</p>\\n<p>Type <em>T</em> cannot be cast automatically to the type of the destination <em>array</em>.</p>\\n"},{"pos":[33808,33832],"content":"ICollection<T>.Remove(T)","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;.Remove(T)","pos":[0,24],"source":"ICollection<T>.Remove(T)"}]},{"content":"\\n&lt;p&gt;The object to remove from the array segment.&lt;/p&gt;\\n","pos":[34616,34671],"source":"\\n<p>The object to remove from the array segment.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;item&lt;/em&gt; was successfully removed from the array segment; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[34732,34861],"source":"\\n<p>\\n<strong>true</strong> if <em>item</em> was successfully removed from the array segment; otherwise, <strong>false</strong>."},{"content":"This method also returns &lt;strong&gt;false&lt;/strong&gt; if &lt;em&gt;item&lt;/em&gt; is not found in the array segment.&lt;/p&gt;\\n","pos":[34862,34967],"source":" This method also returns <strong>false</strong> if <em>item</em> is not found in the array segment.</p>\\n"},{"content":"\\n&lt;p&gt;The array segment is read-only.&lt;/p&gt;\\n","pos":[35086,35128],"source":"\\n<p>The array segment is read-only.</p>\\n"},{"pos":[35828,35858],"content":"IEnumerable<T>.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;.GetEnumerator()","pos":[0,30],"source":"IEnumerable<T>.GetEnumerator()"}]},{"content":"\\n&lt;p&gt;An enumerator that can be used to iterate through the array segment.&lt;/p&gt;\\n","pos":[36687,36766],"source":"\\n<p>An enumerator that can be used to iterate through the array segment.</p>\\n"},{"pos":[37468,37487],"content":"IList<T>.IndexOf(T)","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;.IndexOf(T)","pos":[0,19],"source":"IList<T>.IndexOf(T)"}]},{"content":"\\n&lt;p&gt;The object to locate in the array segment.&lt;/p&gt;\\n","pos":[38233,38286],"source":"\\n<p>The object to locate in the array segment.</p>\\n"},{"content":"\\n&lt;p&gt;The index of &lt;em&gt;item&lt;/em&gt; if found in the list; otherwise, -1.&lt;/p&gt;\\n","pos":[38345,38419],"source":"\\n<p>The index of <em>item</em> if found in the list; otherwise, -1.</p>\\n"},{"pos":[39106,39131],"content":"IList<T>.Insert(Int32, T)","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;.Insert(Int32, T)","pos":[0,25],"source":"IList<T>.Insert(Int32, T)"}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;item&lt;/em&gt; should be inserted.&lt;/p&gt;\\n","pos":[39909,39983],"source":"\\n<p>The zero-based index at which <em>item</em> should be inserted.</p>\\n"},{"content":"\\n&lt;p&gt;The object to insert into the array segment.&lt;/p&gt;\\n","pos":[40038,40093],"source":"\\n<p>The object to insert into the array segment.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is not a valid index in the array segment.&lt;/p&gt;\\n","pos":[40224,40294],"source":"\\n<p>\\n<em>index</em> is not a valid index in the array segment.</p>\\n"},{"content":"\\n&lt;p&gt;The array segment is read-only.&lt;/p&gt;\\n","pos":[40399,40441],"source":"\\n<p>The array segment is read-only.</p>\\n"},{"pos":[41168,41192],"content":"IList<T>.RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;.RemoveAt(Int32)","pos":[0,24],"source":"IList<T>.RemoveAt(Int32)"}]},{"content":"\\n&lt;p&gt;The zero-based index of the item to remove.&lt;/p&gt;\\n","pos":[41950,42004],"source":"\\n<p>The zero-based index of the item to remove.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is not a valid index in the array segment.&lt;/p&gt;\\n","pos":[42135,42205],"source":"\\n<p>\\n<em>index</em> is not a valid index in the array segment.</p>\\n"},{"content":"\\n&lt;p&gt;The array segment is read-only.&lt;/p&gt;\\n","pos":[42310,42352],"source":"\\n<p>The array segment is read-only.</p>\\n"},{"pos":[43031,43058],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"content":"\\n&lt;p&gt;An enumerator that can be used to iterate through the array segment.&lt;/p&gt;\\n","pos":[43822,43901],"source":"\\n<p>An enumerator that can be used to iterate through the array segment.</p>\\n"},{"pos":[44311,44317],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[44521,44529],"content":"IList<T>","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;","pos":[0,8],"source":"IList<T>"}]},{"pos":[44724,44729],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[44787,44788],"content":"<","needQuote":true,"nodes":[]},{"pos":[44815,44816],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[44930,44935],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[44994,44997]},{"pos":[45031,45032],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[45059,45060],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45336,45350],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[45569,45580],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[45644,45645],"content":"<","needQuote":true,"nodes":[]},{"pos":[45672,45673],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[45793,45804],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[45869,45872]},{"pos":[45906,45907],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[45934,45935],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46233,46249],"content":"IReadOnlyList<T>","needQuote":true,"nodes":[{"content":"IReadOnlyList&lt;T&gt;","pos":[0,16],"source":"IReadOnlyList<T>"}]},{"pos":[46476,46489],"content":"IReadOnlyList","needQuote":true,"nodes":[{"content":"IReadOnlyList","pos":[0,13]}]},{"pos":[46555,46556],"content":"<","needQuote":true,"nodes":[]},{"pos":[46583,46584],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[46706,46719],"content":"IReadOnlyList","needQuote":true,"nodes":[{"content":"IReadOnlyList","pos":[0,13]}]},{"content":"(Of","pos":[46786,46789]},{"pos":[46823,46824],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[46851,46852],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47168,47190],"content":"IReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"IReadOnlyCollection&lt;T&gt;","pos":[0,22],"source":"IReadOnlyCollection<T>"}]},{"pos":[47441,47460],"content":"IReadOnlyCollection","needQuote":true,"nodes":[{"content":"IReadOnlyCollection","pos":[0,19]}]},{"pos":[47532,47533],"content":"<","needQuote":true,"nodes":[]},{"pos":[47560,47561],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[47689,47708],"content":"IReadOnlyCollection","needQuote":true,"nodes":[{"content":"IReadOnlyCollection","pos":[0,19]}]},{"content":"(Of","pos":[47781,47784]},{"pos":[47818,47819],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[47846,47847],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48165,48179],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[48398,48409],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[48473,48474],"content":"<","needQuote":true,"nodes":[]},{"pos":[48501,48502],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[48622,48633],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[48698,48701]},{"pos":[48735,48736],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[48763,48764],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49002,49013],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[49219,49229],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[49330,49338],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[49389,49390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49417,49418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49491,49499],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[49550,49551],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49578,49579],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49782,49804],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[49952,49958],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50025,50026],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50076,50082],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50143,50144]},{"pos":[50199,50205],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50265,50266],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50363,50369],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50436,50437],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50487,50493],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50554,50555]},{"pos":[50610,50616],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50676,50677],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50922,50953],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[51119,51134],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[51210,51211],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51261,51267],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51328,51329]},{"pos":[51384,51390],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51450,51451],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51557,51572],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[51648,51649],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51699,51705],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[51766,51767]},{"pos":[51822,51828],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51888,51889],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52115,52124],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[52217,52224],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52292,52293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52320,52321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52390,52397],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52465,52466],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52493,52494],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52651,52659],"content":"IList<T>","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;","pos":[0,8],"source":"IList<T>"}]},{"pos":[52854,52859],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[52917,52918],"content":"<","needQuote":true,"nodes":[]},{"pos":[52945,52946],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[53060,53065],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[53124,53127]},{"pos":[53161,53162],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[53189,53190],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53375,53401],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[53602,53616],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[53835,53846],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[53910,53911],"content":"<","needQuote":true,"nodes":[]},{"pos":[53938,53939],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[54059,54070],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[54135,54138]},{"pos":[54172,54173],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[54200,54201],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54420,54436],"content":"IReadOnlyList<T>","needQuote":true,"nodes":[{"content":"IReadOnlyList&lt;T&gt;","pos":[0,16],"source":"IReadOnlyList<T>"}]},{"pos":[54663,54676],"content":"IReadOnlyList","needQuote":true,"nodes":[{"content":"IReadOnlyList","pos":[0,13]}]},{"pos":[54742,54743],"content":"<","needQuote":true,"nodes":[]},{"pos":[54770,54771],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[54893,54906],"content":"IReadOnlyList","needQuote":true,"nodes":[{"content":"IReadOnlyList","pos":[0,13]}]},{"content":"(Of","pos":[54973,54976]},{"pos":[55010,55011],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[55038,55039],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55270,55292],"content":"IReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"IReadOnlyCollection&lt;T&gt;","pos":[0,22],"source":"IReadOnlyCollection<T>"}]},{"pos":[55543,55562],"content":"IReadOnlyCollection","needQuote":true,"nodes":[{"content":"IReadOnlyCollection","pos":[0,19]}]},{"pos":[55634,55635],"content":"<","needQuote":true,"nodes":[]},{"pos":[55662,55663],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[55791,55810],"content":"IReadOnlyCollection","needQuote":true,"nodes":[{"content":"IReadOnlyCollection","pos":[0,19]}]},{"content":"(Of","pos":[55883,55886]},{"pos":[55920,55921],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[55948,55949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56190,56204],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[56423,56434],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[56498,56499],"content":"<","needQuote":true,"nodes":[]},{"pos":[56526,56527],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[56647,56658],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[56723,56726]},{"pos":[56760,56761],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[56788,56789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56984,57002],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[57172,57181],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[57335,57341],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[57443,57446],"content":"T[]","needQuote":true,"nodes":[{"content":"T[]","pos":[0,3]}]},{"pos":[57522,57523],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[57551,57553]},{"pos":[57595,57596],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[57623,57625],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[57751,57756],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[58012,58017],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[58492,58497],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[58890,58895],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[59254,59259],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[59758,59768],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[60131,60138],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[60307,60317],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[60799,60810],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[61062,61066],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[61133,61134]},{"pos":[61186,61191],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[61251,61252]},{"pos":[61356,61360],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[61429,61430],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61479,61484],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[61543,61544],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61749,61750],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[61890,61901],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[62153,62157],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[62224,62225]},{"pos":[62277,62282],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[62342,62343]},{"pos":[62447,62451],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[62520,62521],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62570,62575],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[62634,62635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62838,62839],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[63084,63095],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[63371,63375],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[63450,63451]},{"pos":[63503,63508],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[63568,63569]},{"pos":[63681,63685],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[63762,63763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63812,63817],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63876,63877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64165,64176],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[64452,64456],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[64531,64532]},{"pos":[64584,64589],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[64649,64650]},{"pos":[64762,64766],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[64843,64844],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64893,64898],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64957,64958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65222,65237],"content":"ArraySegment<T>","needQuote":true,"nodes":[{"content":"ArraySegment&lt;T&gt;","pos":[0,15],"source":"ArraySegment<T>"}]},{"pos":[65400,65412],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"pos":[65457,65458],"content":"<","needQuote":true,"nodes":[]},{"pos":[65485,65486],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[65587,65599],"content":"ArraySegment","needQuote":true,"nodes":[{"content":"ArraySegment","pos":[0,12]}]},{"content":"(Of","pos":[65645,65648]},{"pos":[65682,65683],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[65710,65711],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65935,65949],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[66074,66080],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66129,66130],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66180,66186],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66246,66247],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66333,66339],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66388,66389],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66439,66445],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66505,66506],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66709,66722],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[66829,66840],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[66894,66895],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66922,66923],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66999,67010],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[67064,67065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67092,67093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67379,67385],"content":"Add(T)","needQuote":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[67597,67600],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[67671,67672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67699,67700],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[67727,67728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67824,67827],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[67901,67902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67929,67930],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[67957,67958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68207,68213],"content":"Add(T)","needQuote":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[68425,68428],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[68499,68500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68527,68528],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[68555,68556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68652,68655],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[68729,68730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68757,68758],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[68785,68786],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69129,69136],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[69348,69353],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[69426,69427],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69454,69455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69549,69554],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[69630,69631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69658,69659],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69906,69913],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[70125,70130],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[70203,70204],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70231,70232],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70326,70331],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[70407,70408],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70435,70436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70794,70805],"content":"Contains(T)","needQuote":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[71032,71040],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[71116,71117],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71144,71145],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[71172,71173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71274,71282],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[71361,71362],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71389,71390],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[71417,71418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71687,71698],"content":"Contains(T)","needQuote":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[71925,71933],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[72009,72010],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72037,72038],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[72065,72066],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72167,72175],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[72254,72255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72282,72283],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[72310,72311],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72710,72728],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"pos":[73026,73032],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[73106,73107],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73134,73135],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[73163,73165]},{"content":",","pos":[73197,73198]},{"pos":[73252,73257],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73316,73317],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73431,73437],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[73514,73515],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73542,73543],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[73570,73572],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[73601,73602]},{"pos":[73656,73661],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73720,73721],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74029,74047],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"pos":[74345,74351],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[74425,74426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74453,74454],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[74482,74484]},{"content":",","pos":[74516,74517]},{"pos":[74571,74576],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74635,74636],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74750,74756],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[74833,74834],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74861,74862],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[74889,74891],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[74920,74921]},{"pos":[74975,74980],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[75039,75040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75436,75445],"content":"Remove(T)","needQuote":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[75666,75672],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[75746,75747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75774,75775],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[75802,75803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75902,75908],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[75985,75986],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76013,76014],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[76041,76042],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76303,76312],"content":"Remove(T)","needQuote":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[76533,76539],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[76613,76614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76641,76642],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[76669,76670],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76769,76775],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[76852,76853],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76880,76881],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[76908,76909],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77277,77292],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[77528,77541],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[77622,77623],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77650,77651],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77753,77766],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[77850,77851],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77878,77879],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78219,78233],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[78452,78463],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[78527,78528],"content":"<","needQuote":true,"nodes":[]},{"pos":[78555,78556],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[78676,78687],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[78752,78755]},{"pos":[78789,78790],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[78817,78818],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79051,79066],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[79302,79315],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[79396,79397],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79424,79425],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79527,79540],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[79624,79625],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79652,79653],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79916,79930],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[80149,80160],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[80224,80225],"content":"<","needQuote":true,"nodes":[]},{"pos":[80252,80253],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[80373,80384],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[80449,80452]},{"pos":[80486,80487],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[80514,80515],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80831,80841],"content":"IndexOf(T)","needQuote":true,"nodes":[{"content":"IndexOf(T)","pos":[0,10]}]},{"pos":[81047,81054],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[81123,81124],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81151,81152],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[81179,81180],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81274,81281],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[81353,81354],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81381,81382],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[81409,81410],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81651,81661],"content":"IndexOf(T)","needQuote":true,"nodes":[{"content":"IndexOf(T)","pos":[0,10]}]},{"pos":[81867,81874],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[81943,81944],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81971,81972],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[81999,82000],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82094,82101],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[82173,82174],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82201,82202],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[82229,82230],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82586,82602],"content":"Insert(Int32, T)","needQuote":true,"nodes":[{"content":"Insert(Int32, T)","pos":[0,16]}]},{"pos":[82846,82852],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[82920,82921],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82970,82975],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[83035,83036]},{"pos":[83068,83069],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[83096,83097],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83203,83209],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[83280,83281],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83330,83335],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[83395,83396]},{"pos":[83428,83429],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[83456,83457],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83733,83749],"content":"Insert(Int32, T)","needQuote":true,"nodes":[{"content":"Insert(Int32, T)","pos":[0,16]}]},{"pos":[83993,83999],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[84067,84068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84117,84122],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[84182,84183]},{"pos":[84215,84216],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[84243,84244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84350,84356],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[84427,84428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84477,84482],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[84542,84543]},{"pos":[84575,84576],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[84603,84604],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84981,84996],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[85237,85245],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[85315,85316],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85365,85370],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[85429,85430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85535,85543],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[85616,85617],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85666,85671],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[85730,85731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86003,86018],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[86259,86267],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[86337,86338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86387,86392],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[86451,86452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86557,86565],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[86638,86639],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86688,86693],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[86752,86753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87052,87067],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[87206,87219],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[87289,87290],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87317,87318],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87410,87423],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[87493,87494],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87521,87522],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87738,87749],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[87931,87952],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[88146,88173],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[88392,88409],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[88602,88623],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]}],"content":"items:\n- uid: System.ArraySegment`1\n  commentId: T:System.ArraySegment`1\n  id: ArraySegment`1\n  parent: System\n  children:\n  - System.ArraySegment`1.#ctor(`0[])\n  - System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)\n  - System.ArraySegment`1.Array\n  - System.ArraySegment`1.Count\n  - System.ArraySegment`1.Equals(System.ArraySegment{`0})\n  - System.ArraySegment`1.Equals(System.Object)\n  - System.ArraySegment`1.GetHashCode\n  - System.ArraySegment`1.Offset\n  - System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})\n  - System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})\n  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear\n  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)\n  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)\n  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  - System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  - System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)\n  - System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  - System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  - System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  - System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)\n  - System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  - vb\n  name: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ArraySegment\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 27\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Delimits a section of a one-dimensional array.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      public struct ArraySegment<T> : IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable\n    content.vb: >-\n      <Serializable>\n\n      Public Structure ArraySegment(Of T)\n          Implements IList(Of T), ICollection(Of T), IReadOnlyList(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the elements in the array segment.</p>\\n\"\n  seealso:\n  - type: System.Array\n    commentId: T:System.Array\n  implements:\n  - System.Collections.Generic.IList{{T}}\n  - System.Collections.Generic.ICollection{{T}}\n  - System.Collections.Generic.IReadOnlyList{{T}}\n  - System.Collections.Generic.IReadOnlyCollection{{T}}\n  - System.Collections.Generic.IEnumerable{{T}}\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  fullName.vb: System.ArraySegment(Of T)\n  name.vb: ArraySegment(Of T)\n  nameWithType: ArraySegment<T>\n  nameWithType.vb: ArraySegment(Of T)\n- uid: System.ArraySegment`1.#ctor(`0[])\n  commentId: M:System.ArraySegment`1.#ctor(`0[])\n  id: '#ctor(`0[])'\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: ArraySegment(T[])\n  fullName: System.ArraySegment<T>.ArraySegment(T[])\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ArraySegment`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that delimits all the elements in the specified array.</p>\\n\"\n  syntax:\n    content: public ArraySegment(T[] array)\n    content.vb: Public Sub New(array As T())\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The array to wrap.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Array\n    commentId: T:System.Array\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.ArraySegment(Of T).ArraySegment(T())\n  name.vb: ArraySegment(T())\n  nameWithType: ArraySegment<T>.ArraySegment(T[])\n  nameWithType.vb: ArraySegment(Of T).ArraySegment(T())\n- uid: System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)\n  commentId: M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)\n  id: '#ctor(`0[],System.Int32,System.Int32)'\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: ArraySegment(T[], Int32, Int32)\n  fullName: System.ArraySegment<T>.ArraySegment(T[], System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 45\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ArraySegment`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that delimits the specified range of the elements in the specified array.</p>\\n\"\n  syntax:\n    content: public ArraySegment(T[] array, int offset, int count)\n    content.vb: Public Sub New(array As T(), offset As Integer, count As Integer)\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The array containing the range of elements to delimit.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first element in the range.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the range.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> or <em>count</em> is less than 0.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>offset</em> and <em>count</em> do not specify a valid range in <em>array</em>.</p>\\n\"\n  seealso:\n  - type: System.Array\n    commentId: T:System.Array\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.ArraySegment(Of T).ArraySegment(T(), System.Int32, System.Int32)\n  name.vb: ArraySegment(T(), Int32, Int32)\n  nameWithType: ArraySegment<T>.ArraySegment(T[], Int32, Int32)\n  nameWithType.vb: ArraySegment(Of T).ArraySegment(T(), Int32, Int32)\n- uid: System.ArraySegment`1.Array\n  commentId: P:System.ArraySegment`1.Array\n  id: Array\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: Array\n  fullName: System.ArraySegment<T>.Array\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Array\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 62\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the original array containing the range of elements that the array segment delimits.</p>\\n\"\n  syntax:\n    content: public T[] Array { get; }\n    content.vb: Public ReadOnly Property Array As T()\n    parameters: []\n    return:\n      type: '{T}[]'\n      description: \"\\n<p>The original array that was passed to the constructor, and that contains the range delimited by the <xref href=\\\"System.ArraySegment`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Array\n    commentId: T:System.Array\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.ArraySegment(Of T).Array\n  nameWithType: ArraySegment<T>.Array\n  nameWithType.vb: ArraySegment(Of T).Array\n- uid: System.ArraySegment`1.Count\n  commentId: P:System.ArraySegment`1.Count\n  id: Count\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.ArraySegment<T>.Count\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Count\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 93\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the number of elements in the range delimited by the array segment.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the range delimited by the <xref href=\\\"System.ArraySegment`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.ArraySegment`1.Offset\n    commentId: P:System.ArraySegment`1.Offset\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Count\n  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.ArraySegment(Of T).Count\n  nameWithType: ArraySegment<T>.Count\n  nameWithType.vb: ArraySegment(Of T).Count\n- uid: System.ArraySegment`1.Offset\n  commentId: P:System.ArraySegment`1.Offset\n  id: Offset\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: Offset\n  fullName: System.ArraySegment<T>.Offset\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Offset\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 74\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.</p>\\n\"\n  syntax:\n    content: public int Offset { get; }\n    content.vb: Public ReadOnly Property Offset As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The position of the first element in the range delimited by the <xref href=\\\"System.ArraySegment`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, relative to the start of the original array.</p>\\n\"\n  seealso:\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.ArraySegment`1.Count\n    commentId: P:System.ArraySegment`1.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.ArraySegment(Of T).Offset\n  nameWithType: ArraySegment<T>.Offset\n  nameWithType.vb: ArraySegment(Of T).Offset\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  commentId: P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  id: System#Collections#Generic#ICollection{T}#IsReadOnly\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection<T>.IsReadOnly\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.ICollection<T>.IsReadOnly\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 210\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value that indicates whether the array segment  is read-only.</p>\\n\"\n  syntax:\n    content: bool ICollection<T>.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the array segment is read-only; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly\n  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly\n  nameWithType: ArraySegment<T>.ICollection<T>.IsReadOnly\n  nameWithType.vb: ArraySegment(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly\n- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  commentId: P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  id: System#Collections#Generic#IList{T}#Item(System.Int32)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: IList<T>.Item[Int32]\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IList<T>.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.IList<T>.this[]\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 143\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets or sets the element at the specified index.</p>\\n\"\n  syntax:\n    content: T IList<T>.this[int index] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IList<T>.Item(index As Integer) As T Implements IList(Of T).this\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to get or set.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a valid index in the <xref href=\\\"System.ArraySegment`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The property is set and the array segment is read-only.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IList{{T}}.Item(System.Int32)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IList<T>.Item(System.Int32)\n  name.vb: System.Collections.Generic.IList<T>.Item(Int32)\n  nameWithType: ArraySegment<T>.IList<T>.Item[Int32]\n  nameWithType.vb: ArraySegment(Of T).System.Collections.Generic.IList<T>.Item(Int32)\n- uid: System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)\n  commentId: P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)\n  id: System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: IReadOnlyList<T>.Item[Int32]\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.IReadOnlyList<T>.this[]\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 194\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the element at the specified index of the array segment.</p>\\n\"\n  syntax:\n    content: T IReadOnlyList<T>.this[int index] { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IReadOnlyList<T>.Item(index As Integer) As T Implements IReadOnlyList(Of T).this\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to get.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a valid index in the <xref href=\\\"System.ArraySegment`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The property is set.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IReadOnlyList<T>.Item(System.Int32)\n  name.vb: System.Collections.Generic.IReadOnlyList<T>.Item(Int32)\n  nameWithType: ArraySegment<T>.IReadOnlyList<T>.Item[Int32]\n  nameWithType.vb: ArraySegment(Of T).System.Collections.Generic.IReadOnlyList<T>.Item(Int32)\n- uid: System.ArraySegment`1.Equals(System.ArraySegment{`0})\n  commentId: M:System.ArraySegment`1.Equals(System.ArraySegment{`0})\n  id: Equals(System.ArraySegment{`0})\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: Equals(ArraySegment<T>)\n  fullName: System.ArraySegment<T>.Equals(System.ArraySegment<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 127\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.ArraySegment`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is equal to the current instance.</p>\\n\"\n  syntax:\n    content: public bool Equals(ArraySegment<T> obj)\n    content.vb: Public Function Equals(obj As ArraySegment(Of T)) As Boolean\n    parameters:\n    - id: obj\n      type: System.ArraySegment`1\n      description: \"\\n<p>The structure to compare with the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.ArraySegment`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is equal to the current instance; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.ArraySegment(Of T).Equals(System.ArraySegment(Of T))\n  name.vb: Equals(ArraySegment(Of T))\n  nameWithType: ArraySegment<T>.Equals(ArraySegment<T>)\n  nameWithType.vb: ArraySegment(Of T).Equals(ArraySegment(Of T))\n- uid: System.ArraySegment`1.Equals(System.Object)\n  commentId: M:System.ArraySegment`1.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.ArraySegment<T>.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 119\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the specified object is equal to the current instance.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to be compared with the current instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified object is a <xref href=\\\"System.ArraySegment`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure and is equal to the current instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.ArraySegment(Of T).Equals(System.Object)\n  nameWithType: ArraySegment<T>.Equals(Object)\n  nameWithType.vb: ArraySegment(Of T).Equals(Object)\n- uid: System.ArraySegment`1.GetHashCode\n  commentId: M:System.ArraySegment`1.GetHashCode\n  id: GetHashCode\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.ArraySegment<T>.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 112\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for the current instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.ArraySegment(Of T).GetHashCode()\n  nameWithType: ArraySegment<T>.GetHashCode()\n  nameWithType.vb: ArraySegment(Of T).GetHashCode()\n- uid: System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})\n  commentId: M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})\n  id: op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: Equality(ArraySegment<T>, ArraySegment<T>)\n  fullName: System.ArraySegment<T>.Equality(System.ArraySegment<T>, System.ArraySegment<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 132\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether two <xref href=\\\"System.ArraySegment`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(ArraySegment<T> a, ArraySegment<T> b)\n    content.vb: Public Shared Operator =(a As ArraySegment(Of T), b As ArraySegment(Of T)) As Boolean\n    parameters:\n    - id: a\n      type: System.ArraySegment`1\n      description: \"\\n<p>The  structure on the left side of the equality operator.</p>\\n\"\n    - id: b\n      type: System.ArraySegment`1\n      description: \"\\n<p>The structure on the right side of the equality operator.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>a</em> is equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.ArraySegment(Of T).Equality(System.ArraySegment(Of T), System.ArraySegment(Of T))\n  name.vb: Equality(ArraySegment(Of T), ArraySegment(Of T))\n  nameWithType: ArraySegment<T>.Equality(ArraySegment<T>, ArraySegment<T>)\n  nameWithType.vb: ArraySegment(Of T).Equality(ArraySegment(Of T), ArraySegment(Of T))\n- uid: System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})\n  commentId: M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})\n  id: op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: Inequality(ArraySegment<T>, ArraySegment<T>)\n  fullName: System.ArraySegment<T>.Inequality(System.ArraySegment<T>, System.ArraySegment<T>)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 137\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Indicates whether two <xref href=\\\"System.ArraySegment`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are unequal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(ArraySegment<T> a, ArraySegment<T> b)\n    content.vb: Public Shared Operator <>(a As ArraySegment(Of T), b As ArraySegment(Of T)) As Boolean\n    parameters:\n    - id: a\n      type: System.ArraySegment`1\n      description: \"\\n<p>The structure on the left side of the inequality operator.</p>\\n\"\n    - id: b\n      type: System.ArraySegment`1\n      description: \"\\n<p>The structure on the right side of the inequality operator.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>a</em> is not equal to <em>b</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.ArraySegment(Of T).Inequality(System.ArraySegment(Of T), System.ArraySegment(Of T))\n  name.vb: Inequality(ArraySegment(Of T), ArraySegment(Of T))\n  nameWithType: ArraySegment<T>.Inequality(ArraySegment<T>, ArraySegment<T>)\n  nameWithType.vb: ArraySegment(Of T).Inequality(ArraySegment(Of T), ArraySegment(Of T))\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  id: System#Collections#Generic#ICollection{T}#Add(`0)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection<T>.Add(T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.Add(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.ICollection<T>.Add\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 220\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Adds an item to the array segment.</p>\\n\"\n  syntax:\n    content: void ICollection<T>.Add(T item)\n    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add\n    parameters:\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to add to the array segment.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The array segment is read-only.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Add({T})\n  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Add(T)\n  name.vb: System.Collections.Generic.ICollection<T>.Add(T)\n  nameWithType: ArraySegment<T>.ICollection<T>.Add(T)\n  nameWithType.vb: ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Add(T)\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear\n  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear\n  id: System#Collections#Generic#ICollection{T}#Clear\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection<T>.Clear()\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.ICollection<T>.Clear\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 225\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Removes all items from the array segment.</p>\\n\"\n  syntax:\n    content: void ICollection<T>.Clear()\n    content.vb: Sub System.Collections.Generic.ICollection<T>.Clear Implements ICollection(Of T).Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The array segment is read-only. </p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Clear\n  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Clear()\n  name.vb: System.Collections.Generic.ICollection<T>.Clear()\n  nameWithType: ArraySegment<T>.ICollection<T>.Clear()\n  nameWithType.vb: ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Clear()\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)\n  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)\n  id: System#Collections#Generic#ICollection{T}#Contains(`0)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection<T>.Contains(T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.Contains(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.ICollection<T>.Contains\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 230\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the array segment contains a specific value.</p>\\n\"\n  syntax:\n    content: bool ICollection<T>.Contains(T item)\n    content.vb: Function System.Collections.Generic.ICollection<T>.Contains(item As T) As Boolean Implements ICollection(Of T).Contains\n    parameters:\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to locate in the array segment.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>item</em> is found in the array segment; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Contains({T})\n  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Contains(T)\n  name.vb: System.Collections.Generic.ICollection<T>.Contains(T)\n  nameWithType: ArraySegment<T>.ICollection<T>.Contains(T)\n  nameWithType.vb: ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Contains(T)\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)\n  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)\n  id: System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection<T>.CopyTo(T[], Int32)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.ICollection<T>.CopyTo\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 244\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Copies the elements of the array segment to an array, starting at the specified array index.</p>\\n\"\n  syntax:\n    content: void ICollection<T>.CopyTo(T[] array, int arrayIndex)\n    content.vb: Sub System.Collections.Generic.ICollection<T>.CopyTo(array As T(), arrayIndex As Integer) Implements ICollection(Of T).CopyTo\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional array that is the destination of the elements copied from the array segment. The array must have zero-based indexing.</p>\\n\"\n    - id: arrayIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>arrayIndex</em> is less than 0.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or-</p>\\n<p>The number of elements in the source array segment is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>.</p>\\n<p>-or-</p>\\n<p>Type <em>T</em> cannot be cast automatically to the type of the destination <em>array</em>.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)\n  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.CopyTo(T(), System.Int32)\n  name.vb: System.Collections.Generic.ICollection<T>.CopyTo(T(), Int32)\n  nameWithType: ArraySegment<T>.ICollection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: ArraySegment(Of T).System.Collections.Generic.ICollection<T>.CopyTo(T(), Int32)\n- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  commentId: M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  id: System#Collections#Generic#ICollection{T}#Remove(`0)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection<T>.Remove(T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.ICollection<T>.Remove(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.ICollection<T>.Remove\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 253\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Removes the first occurrence of a specific object from the array segment.</p>\\n\"\n  syntax:\n    content: bool ICollection<T>.Remove(T item)\n    content.vb: Function System.Collections.Generic.ICollection<T>.Remove(item As T) As Boolean Implements ICollection(Of T).Remove\n    parameters:\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to remove from the array segment.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>item</em> was successfully removed from the array segment; otherwise, <strong>false</strong>. This method also returns <strong>false</strong> if <em>item</em> is not found in the array segment.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The array segment is read-only.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Remove({T})\n  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Remove(T)\n  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)\n  nameWithType: ArraySegment<T>.ICollection<T>.Remove(T)\n  nameWithType.vb: ArraySegment(Of T).System.Collections.Generic.ICollection<T>.Remove(T)\n- uid: System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  commentId: M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable<T>.GetEnumerator()\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 260\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns an enumerator that iterates through the array segment.</p>\\n\"\n  syntax:\n    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()\n    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator\n    return:\n      type: System.Collections.Generic.IEnumerator{{T}}\n      description: \"\\n<p>An enumerator that can be used to iterate through the array segment.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator\n  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  nameWithType: ArraySegment<T>.IEnumerable<T>.GetEnumerator()\n  nameWithType.vb: ArraySegment(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)\n  commentId: M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)\n  id: System#Collections#Generic#IList{T}#IndexOf(`0)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: IList<T>.IndexOf(T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IList<T>.IndexOf(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.IList<T>.IndexOf\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 168\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines the index of a specific item in the array segment.</p>\\n\"\n  syntax:\n    content: int IList<T>.IndexOf(T item)\n    content.vb: Function System.Collections.Generic.IList<T>.IndexOf(item As T) As Integer Implements IList(Of T).IndexOf\n    parameters:\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to locate in the array segment.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of <em>item</em> if found in the list; otherwise, -1.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IList{{T}}.IndexOf({T})\n  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IList<T>.IndexOf(T)\n  name.vb: System.Collections.Generic.IList<T>.IndexOf(T)\n  nameWithType: ArraySegment<T>.IList<T>.IndexOf(T)\n  nameWithType.vb: ArraySegment(Of T).System.Collections.Generic.IList<T>.IndexOf(T)\n- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  commentId: M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: IList<T>.Insert(Int32, T)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.IList<T>.Insert\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 182\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Inserts an item into the array segment at the specified index.</p>\\n\"\n  syntax:\n    content: void IList<T>.Insert(int index, T item)\n    content.vb: Sub System.Collections.Generic.IList<T>.Insert(index As Integer, item As T) Implements IList(Of T).Insert\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>item</em> should be inserted.</p>\\n\"\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to insert into the array segment.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a valid index in the array segment.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The array segment is read-only.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})\n  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IList<T>.Insert(System.Int32, T)\n  name.vb: System.Collections.Generic.IList<T>.Insert(Int32, T)\n  nameWithType: ArraySegment<T>.IList<T>.Insert(Int32, T)\n  nameWithType.vb: ArraySegment(Of T).System.Collections.Generic.IList<T>.Insert(Int32, T)\n- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  commentId: M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: IList<T>.RemoveAt(Int32)\n  fullName: System.ArraySegment<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.IList<T>.RemoveAt\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 187\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Removes the array segment item at the specified index.</p>\\n\"\n  syntax:\n    content: void IList<T>.RemoveAt(int index)\n    content.vb: Sub System.Collections.Generic.IList<T>.RemoveAt(index As Integer) Implements IList(Of T).RemoveAt\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the item to remove.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a valid index in the array segment.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The array segment is read-only.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)\n  fullName.vb: System.ArraySegment(Of T).System.Collections.Generic.IList<T>.RemoveAt(System.Int32)\n  name.vb: System.Collections.Generic.IList<T>.RemoveAt(Int32)\n  nameWithType: ArraySegment<T>.IList<T>.RemoveAt(Int32)\n  nameWithType.vb: ArraySegment(Of T).System.Collections.Generic.IList<T>.RemoveAt(Int32)\n- uid: System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.ArraySegment`1\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable.GetEnumerator()\n  fullName: System.ArraySegment<T>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/ArraySegment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEnumerable.GetEnumerator\n    path: src/mscorlib/src/System/ArraySegment.cs\n    startLine: 271\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns an enumerator that iterates through an array segment.</p>\\n\"\n  syntax:\n    content: IEnumerator IEnumerable.GetEnumerator()\n    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An enumerator that can be used to iterate through the array segment.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  fullName.vb: System.ArraySegment(Of T).System.Collections.IEnumerable.GetEnumerator()\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ArraySegment<T>.IEnumerable.GetEnumerator()\n  nameWithType.vb: ArraySegment(Of T).System.Collections.IEnumerable.GetEnumerator()\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections.Generic.IList{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IList`1\n  name: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n  fullname.vb: System.Collections.Generic.IList(Of T)\n  name.vb: IList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>\n  nameWithType.vb: IList(Of T)\n  commentId: T:System.Collections.Generic.IList{`0}\n- uid: System.Collections.Generic.ICollection{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.ICollection`1\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n  commentId: T:System.Collections.Generic.ICollection{`0}\n- uid: System.Collections.Generic.IReadOnlyList{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IReadOnlyList`1\n  name: IReadOnlyList<T>\n  fullName: System.Collections.Generic.IReadOnlyList<T>\n  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)\n  name.vb: IReadOnlyList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyList`1\n    name: IReadOnlyList\n    fullName: System.Collections.Generic.IReadOnlyList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyList`1\n    name: IReadOnlyList\n    fullName: System.Collections.Generic.IReadOnlyList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyList<T>\n  nameWithType.vb: IReadOnlyList(Of T)\n  commentId: T:System.Collections.Generic.IReadOnlyList{`0}\n- uid: System.Collections.Generic.IReadOnlyCollection{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IReadOnlyCollection`1\n  name: IReadOnlyCollection<T>\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>\n  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)\n  name.vb: IReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyCollection<T>\n  nameWithType.vb: IReadOnlyCollection(Of T)\n  commentId: T:System.Collections.Generic.IReadOnlyCollection{`0}\n- uid: System.Collections.Generic.IEnumerable{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable{`0}\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Collections.Generic.IList`1\n  isExternal: false\n  name: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n  fullname.vb: System.Collections.Generic.IList(Of T)\n  name.vb: IList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>\n  nameWithType.vb: IList(Of T)\n  commentId: T:System.Collections.Generic.IList`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n  commentId: T:System.Collections.Generic.ICollection`1\n- uid: System.Collections.Generic.IReadOnlyList`1\n  isExternal: false\n  name: IReadOnlyList<T>\n  fullName: System.Collections.Generic.IReadOnlyList<T>\n  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)\n  name.vb: IReadOnlyList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyList`1\n    name: IReadOnlyList\n    fullName: System.Collections.Generic.IReadOnlyList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyList`1\n    name: IReadOnlyList\n    fullName: System.Collections.Generic.IReadOnlyList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyList<T>\n  nameWithType.vb: IReadOnlyList(Of T)\n  commentId: T:System.Collections.Generic.IReadOnlyList`1\n- uid: System.Collections.Generic.IReadOnlyCollection`1\n  isExternal: false\n  name: IReadOnlyCollection<T>\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>\n  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)\n  name.vb: IReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyCollection<T>\n  nameWithType.vb: IReadOnlyCollection(Of T)\n  commentId: T:System.Collections.Generic.IReadOnlyCollection`1\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: '{T}[]'\n  name: T[]\n  fullName: T[]\n  fullname.vb: T()\n  name.vb: T()\n  spec.csharp:\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  nameWithType: T[]\n  nameWithType.vb: T()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.Generic.ICollection{{T}}.Count\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Count\n  name: Count\n  fullName: System.Collections.Generic.ICollection<T>.Count\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Count\n  nameWithType: ICollection<T>.Count\n  nameWithType.vb: ICollection(Of T).Count\n  commentId: P:System.Collections.Generic.ICollection{`0}.Count\n- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count\n  parent: System.Collections.Generic.IReadOnlyCollection{{T}}\n  definition: System.Collections.Generic.IReadOnlyCollection`1.Count\n  name: Count\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count\n  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count\n  nameWithType: IReadOnlyCollection<T>.Count\n  nameWithType.vb: IReadOnlyCollection(Of T).Count\n  commentId: P:System.Collections.Generic.IReadOnlyCollection{`0}.Count\n- uid: System.Collections.Generic.ICollection`1.Count\n  isExternal: false\n  name: Count\n  fullName: System.Collections.Generic.ICollection<T>.Count\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Count\n  nameWithType: ICollection<T>.Count\n  nameWithType.vb: ICollection(Of T).Count\n  commentId: P:System.Collections.Generic.ICollection`1.Count\n- uid: System.Collections.Generic.IReadOnlyCollection`1.Count\n  isExternal: false\n  name: Count\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count\n  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count\n  nameWithType: IReadOnlyCollection<T>.Count\n  nameWithType.vb: IReadOnlyCollection(Of T).Count\n  commentId: P:System.Collections.Generic.IReadOnlyCollection`1.Count\n- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.IsReadOnly\n  name: IsReadOnly\n  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly\n  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly\n  nameWithType: ICollection<T>.IsReadOnly\n  nameWithType.vb: ICollection(Of T).IsReadOnly\n  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.Generic.ICollection`1.IsReadOnly\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly\n  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly\n  nameWithType: ICollection<T>.IsReadOnly\n  nameWithType.vb: ICollection(Of T).IsReadOnly\n  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly\n- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)\n  parent: System.Collections.Generic.IList{{T}}\n  definition: System.Collections.Generic.IList`1.Item(System.Int32)\n  name: Item[Int32]\n  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]\n  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IList<T>.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IList(Of T).Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.Item[Int32]\n  nameWithType.vb: IList(Of T).Item(Int32)\n  commentId: P:System.Collections.Generic.IList{`0}.Item(System.Int32)\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: System.Collections.Generic.IList`1.Item(System.Int32)\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]\n  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IList<T>.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IList(Of T).Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.Item[Int32]\n  nameWithType.vb: IList(Of T).Item(Int32)\n  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)\n  parent: System.Collections.Generic.IReadOnlyList{{T}}\n  definition: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n  name: Item[Int32]\n  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]\n  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IReadOnlyList<T>.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyList<T>.Item[Int32]\n  nameWithType.vb: IReadOnlyList(Of T).Item(Int32)\n  commentId: P:System.Collections.Generic.IReadOnlyList{`0}.Item(System.Int32)\n- uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]\n  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IReadOnlyList<T>.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyList<T>.Item[Int32]\n  nameWithType.vb: IReadOnlyList(Of T).Item(Int32)\n  commentId: P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n- uid: System.ArraySegment`1\n  parent: System\n  isExternal: false\n  name: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n  fullname.vb: System.ArraySegment(Of T)\n  name.vb: ArraySegment(Of T)\n  spec.csharp:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    fullName: System.ArraySegment\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    fullName: System.ArraySegment\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ArraySegment<T>\n  nameWithType.vb: ArraySegment(Of T)\n  commentId: T:System.ArraySegment`1\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Collections.Generic.ICollection{{T}}.Add({T})\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Add(`0)\n  name: Add(T)\n  fullName: System.Collections.Generic.ICollection<T>.Add(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection<T>.Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection(Of T).Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Add(T)\n  nameWithType.vb: ICollection(Of T).Add(T)\n  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)\n- uid: System.Collections.Generic.ICollection`1.Add(`0)\n  isExternal: false\n  name: Add(T)\n  fullName: System.Collections.Generic.ICollection<T>.Add(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection<T>.Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection(Of T).Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Add(T)\n  nameWithType.vb: ICollection(Of T).Add(T)\n  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)\n- uid: System.Collections.Generic.ICollection{{T}}.Clear\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Clear\n  name: Clear()\n  fullName: System.Collections.Generic.ICollection<T>.Clear()\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection<T>.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection(Of T).Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Clear()\n  nameWithType.vb: ICollection(Of T).Clear()\n  commentId: M:System.Collections.Generic.ICollection{`0}.Clear\n- uid: System.Collections.Generic.ICollection`1.Clear\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.Generic.ICollection<T>.Clear()\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection<T>.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection(Of T).Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Clear()\n  nameWithType.vb: ICollection(Of T).Clear()\n  commentId: M:System.Collections.Generic.ICollection`1.Clear\n- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Contains(`0)\n  name: Contains(T)\n  fullName: System.Collections.Generic.ICollection<T>.Contains(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection<T>.Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection(Of T).Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Contains(T)\n  nameWithType.vb: ICollection(Of T).Contains(T)\n  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)\n- uid: System.Collections.Generic.ICollection`1.Contains(`0)\n  isExternal: false\n  name: Contains(T)\n  fullName: System.Collections.Generic.ICollection<T>.Contains(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection<T>.Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection(Of T).Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Contains(T)\n  nameWithType.vb: ICollection(Of T).Contains(T)\n  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)\n- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  name: CopyTo(T[], Int32)\n  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection<T>.CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection(Of T).CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)\n  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)\n- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  isExternal: true\n  name: CopyTo(T[], Int32)\n  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection<T>.CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection(Of T).CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)\n  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Remove(`0)\n  name: Remove(T)\n  fullName: System.Collections.Generic.ICollection<T>.Remove(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection<T>.Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection(Of T).Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Remove(T)\n  nameWithType.vb: ICollection(Of T).Remove(T)\n  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)\n- uid: System.Collections.Generic.ICollection`1.Remove(`0)\n  isExternal: false\n  name: Remove(T)\n  fullName: System.Collections.Generic.ICollection<T>.Remove(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection<T>.Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection(Of T).Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Remove(T)\n  nameWithType.vb: ICollection(Of T).Remove(T)\n  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)\n- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator\n  parent: System.Collections.Generic.IEnumerable{{T}}\n  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator\n  name: GetEnumerator()\n  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>.GetEnumerator()\n  nameWithType.vb: IEnumerable(Of T).GetEnumerator()\n  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator\n- uid: System.Collections.Generic.IEnumerator{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator{`0}\n- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>.GetEnumerator()\n  nameWithType.vb: IEnumerable(Of T).GetEnumerator()\n  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator\n- uid: System.Collections.Generic.IEnumerator`1\n  isExternal: false\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator`1\n- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})\n  parent: System.Collections.Generic.IList{{T}}\n  definition: System.Collections.Generic.IList`1.IndexOf(`0)\n  name: IndexOf(T)\n  fullName: System.Collections.Generic.IList<T>.IndexOf(T)\n  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.IndexOf(`0)\n    name: IndexOf\n    fullName: System.Collections.Generic.IList<T>.IndexOf\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.IndexOf(`0)\n    name: IndexOf\n    fullName: System.Collections.Generic.IList(Of T).IndexOf\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.IndexOf(T)\n  nameWithType.vb: IList(Of T).IndexOf(T)\n  commentId: M:System.Collections.Generic.IList{`0}.IndexOf(`0)\n- uid: System.Collections.Generic.IList`1.IndexOf(`0)\n  isExternal: false\n  name: IndexOf(T)\n  fullName: System.Collections.Generic.IList<T>.IndexOf(T)\n  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.IndexOf(`0)\n    name: IndexOf\n    fullName: System.Collections.Generic.IList<T>.IndexOf\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.IndexOf(`0)\n    name: IndexOf\n    fullName: System.Collections.Generic.IList(Of T).IndexOf\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.IndexOf(T)\n  nameWithType.vb: IList(Of T).IndexOf(T)\n  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)\n- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})\n  parent: System.Collections.Generic.IList{{T}}\n  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n  name: Insert(Int32, T)\n  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)\n  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n    name: Insert\n    fullName: System.Collections.Generic.IList<T>.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n    name: Insert\n    fullName: System.Collections.Generic.IList(Of T).Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.Insert(Int32, T)\n  nameWithType.vb: IList(Of T).Insert(Int32, T)\n  commentId: M:System.Collections.Generic.IList{`0}.Insert(System.Int32,`0)\n- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n  isExternal: true\n  name: Insert(Int32, T)\n  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)\n  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n    name: Insert\n    fullName: System.Collections.Generic.IList<T>.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n    name: Insert\n    fullName: System.Collections.Generic.IList(Of T).Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.Insert(Int32, T)\n  nameWithType.vb: IList(Of T).Insert(Int32, T)\n  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)\n  parent: System.Collections.Generic.IList{{T}}\n  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n  name: RemoveAt(Int32)\n  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)\n  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Generic.IList<T>.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Generic.IList(Of T).RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.RemoveAt(Int32)\n  nameWithType.vb: IList(Of T).RemoveAt(Int32)\n  commentId: M:System.Collections.Generic.IList{`0}.RemoveAt(System.Int32)\n- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)\n  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Generic.IList<T>.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Generic.IList(Of T).RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.RemoveAt(Int32)\n  nameWithType.vb: IList(Of T).RemoveAt(Int32)\n  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n"}