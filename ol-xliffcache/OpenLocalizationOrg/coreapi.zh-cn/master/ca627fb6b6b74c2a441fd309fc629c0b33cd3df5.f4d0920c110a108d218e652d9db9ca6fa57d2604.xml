{"nodes":[{"pos":[699,709],"content":"HMACSHA512","needQuote":true,"nodes":[{"content":"HMACSHA512","pos":[0,10]}]},{"pos":[3842,3854],"content":"HMACSHA512()","needQuote":true,"nodes":[{"content":"HMACSHA512()","pos":[0,12]}]},{"pos":[4994,5012],"content":"HMACSHA512(Byte[])","needQuote":true,"nodes":[{"content":"HMACSHA512(Byte[])","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;key&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6397,6454],"source":"\\n<p>The <em>key</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6455,6461],"source":" </p>\\n"},{"pos":[6947,6955],"content":"HashSize","needQuote":true,"nodes":[{"content":"HashSize","pos":[0,8]}]},{"pos":[8067,8070],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[9197,9213],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[10490,10520],"content":"HashCore(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"HashCore(Byte[], Int32, Int32)","pos":[0,30]}]},{"pos":[12062,12073],"content":"HashFinal()","needQuote":true,"nodes":[{"content":"HashFinal()","pos":[0,11]}]},{"pos":[13164,13176],"content":"Initialize()","needQuote":true,"nodes":[{"content":"Initialize()","pos":[0,12]}]},{"pos":[14056,14084],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[14281,14287],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14483,14496],"content":"HashAlgorithm","needQuote":true,"nodes":[{"content":"HashAlgorithm","pos":[0,13]}]},{"pos":[14762,14780],"content":"KeyedHashAlgorithm","needQuote":true,"nodes":[{"content":"KeyedHashAlgorithm","pos":[0,18]}]},{"pos":[15047,15051],"content":"HMAC","needQuote":true,"nodes":[{"content":"HMAC","pos":[0,4]}]},{"pos":[15288,15304],"content":"ICryptoTransform","needQuote":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[15528,15539],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[15752,15760],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[15891,15897],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[15984,15985],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16012,16013],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16101,16107],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[16194,16195],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16222,16223],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16460,16474],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[16633,16639],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[16726,16727],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16777,16783],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[16843,16844],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16947,16953],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[17040,17041],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17091,17097],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[17157,17158],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17409,17423],"content":"BlockSizeValue","needQuote":true,"nodes":[{"content":"BlockSizeValue","pos":[0,14]}]},{"pos":[17706,17714],"content":"HashName","needQuote":true,"nodes":[{"content":"HashName","pos":[0,8]}]},{"pos":[18007,18015],"content":"KeyValue","needQuote":true,"nodes":[{"content":"KeyValue","pos":[0,8]}]},{"pos":[18345,18358],"content":"HashSizeValue","needQuote":true,"nodes":[{"content":"HashSizeValue","pos":[0,13]}]},{"pos":[18684,18693],"content":"HashValue","needQuote":true,"nodes":[{"content":"HashValue","pos":[0,9]}]},{"pos":[19003,19008],"content":"State","needQuote":true,"nodes":[{"content":"State","pos":[0,5]}]},{"pos":[19330,19349],"content":"ComputeHash(Stream)","needQuote":true,"nodes":[{"content":"ComputeHash(Stream)","pos":[0,19]}]},{"pos":[19542,19553],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[19633,19634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19687,19693],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[19756,19757],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19877,19888],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[19968,19969],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20022,20028],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[20091,20092],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20404,20423],"content":"ComputeHash(Byte[])","needQuote":true,"nodes":[{"content":"ComputeHash(Byte[])","pos":[0,19]}]},{"pos":[20726,20737],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[20817,20818],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20866,20870],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[20929,20931]},{"pos":[20962,20963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21080,21091],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[21171,21172],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21220,21224],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[21282,21284],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[21312,21313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21701,21734],"content":"ComputeHash(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ComputeHash(Byte[], Int32, Int32)","pos":[0,33]}]},{"pos":[22133,22144],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[22224,22225],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22273,22277],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[22336,22338]},{"content":",","pos":[22370,22371]},{"pos":[22425,22430],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[22490,22491]},{"pos":[22545,22550],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22609,22610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22753,22764],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[22844,22845],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22893,22897],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[22955,22957],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[22986,22987]},{"pos":[23041,23046],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[23106,23107]},{"pos":[23161,23166],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23225,23226],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23698,23749],"content":"TransformBlock(Byte[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"TransformBlock(Byte[], Int32, Int32, Byte[], Int32)","pos":[0,51]}]},{"pos":[24260,24274],"content":"TransformBlock","needQuote":true,"nodes":[{"content":"TransformBlock","pos":[0,14]}]},{"pos":[24378,24379],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24427,24431],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[24490,24492]},{"content":",","pos":[24524,24525]},{"pos":[24579,24584],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[24644,24645]},{"pos":[24699,24704],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[24764,24765]},{"pos":[24818,24822],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[24881,24883]},{"content":",","pos":[24915,24916]},{"pos":[24970,24975],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25034,25035],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25208,25222],"content":"TransformBlock","needQuote":true,"nodes":[{"content":"TransformBlock","pos":[0,14]}]},{"pos":[25326,25327],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25375,25379],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[25437,25439],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[25468,25469]},{"pos":[25523,25528],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[25588,25589]},{"pos":[25643,25648],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[25708,25709]},{"pos":[25762,25766],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[25824,25826],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[25855,25856]},{"pos":[25910,25915],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25974,25975],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26491,26532],"content":"TransformFinalBlock(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"TransformFinalBlock(Byte[], Int32, Int32)","pos":[0,41]}]},{"pos":[26963,26982],"content":"TransformFinalBlock","needQuote":true,"nodes":[{"content":"TransformFinalBlock","pos":[0,19]}]},{"pos":[27091,27092],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27140,27144],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[27203,27205]},{"content":",","pos":[27237,27238]},{"pos":[27292,27297],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[27357,27358]},{"pos":[27412,27417],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[27476,27477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27628,27647],"content":"TransformFinalBlock","needQuote":true,"nodes":[{"content":"TransformFinalBlock","pos":[0,19]}]},{"pos":[27756,27757],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27805,27809],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[27867,27869],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[27898,27899]},{"pos":[27953,27958],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[28018,28019]},{"pos":[28073,28078],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28137,28138],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28560,28569],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[28720,28727],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[28803,28804],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28831,28832],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28930,28937],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[29013,29014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29041,29042],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29301,29308],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[29455,29460],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[29555,29556],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29583,29584],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29680,29685],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[29780,29781],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29808,29809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30063,30067],"content":"Hash","needQuote":true,"nodes":[{"content":"Hash","pos":[0,4]}]},{"pos":[30371,30385],"content":"InputBlockSize","needQuote":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"pos":[30720,30735],"content":"OutputBlockSize","needQuote":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"pos":[31084,31110],"content":"CanTransformMultipleBlocks","needQuote":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"pos":[31483,31500],"content":"CanReuseTransform","needQuote":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"pos":[31779,31789],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[31884,31892],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[31961,31962],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31989,31990],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32060,32068],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[32137,32138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32165,32166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32349,32363],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[32482,32488],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32555,32556],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32606,32612],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32672,32673],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32756,32762],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32829,32830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32880,32886],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32946,32947],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33161,33183],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[33331,33337],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33404,33405],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33455,33461],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33522,33523]},{"pos":[33578,33584],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33644,33645],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33742,33748],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33815,33816],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33866,33872],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33933,33934]},{"pos":[33989,33995],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34055,34056],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34301,34332],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[34498,34513],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[34589,34590],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34640,34646],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34707,34708]},{"pos":[34763,34769],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34829,34830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34936,34951],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[35027,35028],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35078,35084],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35145,35146]},{"pos":[35201,35207],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35267,35268],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35498,35511],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[35612,35623],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[35695,35696],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35723,35724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35797,35808],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[35880,35881],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35908,35909],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36084,36093],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[36186,36193],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[36261,36262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36289,36290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36359,36366],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[36434,36435],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36462,36463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36638,36655],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[36764,36779],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[36855,36856],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36883,36884],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36961,36976],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[37052,37053],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37080,37081],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37226,37232],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[37326,37332],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[37452,37456],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[37515,37517]},{"pos":[37580,37584],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[37642,37644],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[37851,37859],"content":"HashSize","needQuote":true,"nodes":[{"content":"HashSize","pos":[0,8]}]},{"pos":[38095,38100],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[38292,38295],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[38560,38576],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[38739,38746],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[38834,38835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38886,38893],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[38954,38955],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39060,39067],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[39155,39156],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39207,39214],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39275,39276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39471,39478],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39722,39752],"content":"HashCore(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"HashCore(Byte[], Int32, Int32)","pos":[0,30]}]},{"pos":[40112,40120],"content":"HashCore","needQuote":true,"nodes":[{"content":"HashCore","pos":[0,8]}]},{"pos":[40209,40210],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40258,40262],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[40321,40323]},{"content":",","pos":[40355,40356]},{"pos":[40410,40415],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[40475,40476]},{"pos":[40530,40535],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[40594,40595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40726,40734],"content":"HashCore","needQuote":true,"nodes":[{"content":"HashCore","pos":[0,8]}]},{"pos":[40823,40824],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40872,40876],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[40934,40936],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[40965,40966]},{"pos":[41020,41025],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[41085,41086]},{"pos":[41140,41145],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[41204,41205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41550,41561],"content":"HashFinal()","needQuote":true,"nodes":[{"content":"HashFinal()","pos":[0,11]}]},{"pos":[41698,41707],"content":"HashFinal","needQuote":true,"nodes":[{"content":"HashFinal","pos":[0,9]}]},{"pos":[41797,41798],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41825,41826],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41917,41926],"content":"HashFinal","needQuote":true,"nodes":[{"content":"HashFinal","pos":[0,9]}]},{"pos":[42016,42017],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42044,42045],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42277,42289],"content":"Initialize()","needQuote":true,"nodes":[{"content":"Initialize()","pos":[0,12]}]},{"pos":[42428,42438],"content":"Initialize","needQuote":true,"nodes":[{"content":"Initialize","pos":[0,10]}]},{"pos":[42529,42530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42557,42558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42650,42660],"content":"Initialize","needQuote":true,"nodes":[{"content":"Initialize","pos":[0,10]}]},{"pos":[42751,42752],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42779,42780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42955,42976],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Security.Cryptography.HMACSHA512\n  commentId: T:System.Security.Cryptography.HMACSHA512\n  id: HMACSHA512\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.HMACSHA512.#ctor\n  - System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])\n  - System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)\n  - System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMACSHA512.HashFinal\n  - System.Security.Cryptography.HMACSHA512.HashSize\n  - System.Security.Cryptography.HMACSHA512.Initialize\n  - System.Security.Cryptography.HMACSHA512.Key\n  langs:\n  - csharp\n  - vb\n  name: HMACSHA512\n  fullName: System.Security.Cryptography.HMACSHA512\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HMACSHA512\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 156\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes a Hash-based Message Authentication Code (HMAC) using the <xref href=\\\"System.Security.Cryptography.SHA512\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hash function.</p>\\n\"\n  syntax:\n    content: 'public class HMACSHA512 : HMAC, ICryptoTransform, IDisposable'\n    content.vb: >-\n      Public Class HMACSHA512\n          Inherits HMAC\n          Implements ICryptoTransform, IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.KeyedHashAlgorithm\n  - System.Security.Cryptography.HMAC\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.HMAC.Create\n  - System.Security.Cryptography.HMAC.Create(System.String)\n  - System.Security.Cryptography.HMAC.BlockSizeValue\n  - System.Security.Cryptography.HMAC.HashName\n  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: HMACSHA512\n- uid: System.Security.Cryptography.HMACSHA512.#ctor\n  commentId: M:System.Security.Cryptography.HMACSHA512.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  - vb\n  name: HMACSHA512()\n  fullName: System.Security.Cryptography.HMACSHA512.HMACSHA512()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 158\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.HMACSHA512\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a randomly generated key.</p>\\n\"\n  syntax:\n    content: public HMACSHA512()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HMACSHA512.HMACSHA512()\n- uid: System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])\n  commentId: M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  - vb\n  name: HMACSHA512(Byte[])\n  fullName: System.Security.Cryptography.HMACSHA512.HMACSHA512(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 159\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.HMACSHA512\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified key data.</p>\\n\"\n  syntax:\n    content: public HMACSHA512(byte[] key)\n    content.vb: Public Sub New(key As Byte())\n    parameters:\n    - id: key\n      type: System.Byte[]\n      description: \"\\n<p>The secret key for <xref href=\\\"System.Security.Cryptography.HMACSHA512\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> encryption. The key can be any length. However, the recommended size is 128 bytes. If the key is more than 128 bytes long, it is hashed (using SHA-512) to derive a 128-byte key. If it is less than 128 bytes long, it is padded to 128 bytes. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>key</em> parameter is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.HMACSHA512.HMACSHA512(System.Byte())\n  name.vb: HMACSHA512(Byte())\n  nameWithType: HMACSHA512.HMACSHA512(Byte[])\n  nameWithType.vb: HMACSHA512.HMACSHA512(Byte())\n- uid: System.Security.Cryptography.HMACSHA512.HashSize\n  commentId: P:System.Security.Cryptography.HMACSHA512.HashSize\n  id: HashSize\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  - vb\n  name: HashSize\n  fullName: System.Security.Cryptography.HMACSHA512.HashSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashSize\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 160\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override int HashSize { get; }\n    content.vb: Public Overrides ReadOnly Property HashSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n  overridden: System.Security.Cryptography.HashAlgorithm.HashSize\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: HMACSHA512.HashSize\n- uid: System.Security.Cryptography.HMACSHA512.Key\n  commentId: P:System.Security.Cryptography.HMACSHA512.Key\n  id: Key\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.Security.Cryptography.HMACSHA512.Key\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Key\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 161\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override byte[] Key { get; set; }\n    content.vb: Public Overrides Property Key As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.HMAC.Key\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: HMACSHA512.Key\n- uid: System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 162\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  overridden: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: HMACSHA512.Dispose(Boolean)\n- uid: System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  - vb\n  name: HashCore(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashCore\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 163\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void HashCore(byte[] rgb, int ib, int cb)\n    content.vb: Protected Overrides Sub HashCore(rgb As Byte(), ib As Integer, cb As Integer)\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n    - id: ib\n      type: System.Int32\n    - id: cb\n      type: System.Int32\n  overridden: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  fullName.vb: System.Security.Cryptography.HMACSHA512.HashCore(System.Byte(), System.Int32, System.Int32)\n  name.vb: HashCore(Byte(), Int32, Int32)\n  nameWithType: HMACSHA512.HashCore(Byte[], Int32, Int32)\n  nameWithType.vb: HMACSHA512.HashCore(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HMACSHA512.HashFinal\n  commentId: M:System.Security.Cryptography.HMACSHA512.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  - vb\n  name: HashFinal()\n  fullName: System.Security.Cryptography.HMACSHA512.HashFinal()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashFinal\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 164\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashFinal()\n    content.vb: Protected Overrides Function HashFinal As Byte()\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.HMAC.HashFinal\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: HMACSHA512.HashFinal()\n- uid: System.Security.Cryptography.HMACSHA512.Initialize\n  commentId: M:System.Security.Cryptography.HMACSHA512.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.HMACSHA512\n  langs:\n  - csharp\n  - vb\n  name: Initialize()\n  fullName: System.Security.Cryptography.HMACSHA512.Initialize()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Initialize\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 165\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void Initialize()\n    content.vb: Public Overrides Sub Initialize\n  overridden: System.Security.Cryptography.HMAC.Initialize\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: HMACSHA512.Initialize()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n  commentId: T:System.Security.Cryptography.HashAlgorithm\n  nameWithType: HashAlgorithm\n- uid: System.Security.Cryptography.KeyedHashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeyedHashAlgorithm\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm\n  commentId: T:System.Security.Cryptography.KeyedHashAlgorithm\n  nameWithType: KeyedHashAlgorithm\n- uid: System.Security.Cryptography.HMAC\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HMAC\n  fullName: System.Security.Cryptography.HMAC\n  commentId: T:System.Security.Cryptography.HMAC\n  nameWithType: HMAC\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n  commentId: T:System.Security.Cryptography.ICryptoTransform\n  nameWithType: ICryptoTransform\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.HMAC.Create\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: Create()\n  fullName: System.Security.Cryptography.HMAC.Create()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HMAC.Create\n    name: Create\n    fullName: System.Security.Cryptography.HMAC.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HMAC.Create\n    name: Create\n    fullName: System.Security.Cryptography.HMAC.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HMAC.Create\n  nameWithType: HMAC.Create()\n- uid: System.Security.Cryptography.HMAC.Create(System.String)\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: Create(String)\n  fullName: System.Security.Cryptography.HMAC.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HMAC.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.HMAC.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HMAC.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.HMAC.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HMAC.Create(System.String)\n  nameWithType: HMAC.Create(String)\n- uid: System.Security.Cryptography.HMAC.BlockSizeValue\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: BlockSizeValue\n  fullName: System.Security.Cryptography.HMAC.BlockSizeValue\n  commentId: P:System.Security.Cryptography.HMAC.BlockSizeValue\n  nameWithType: HMAC.BlockSizeValue\n- uid: System.Security.Cryptography.HMAC.HashName\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: HashName\n  fullName: System.Security.Cryptography.HMAC.HashName\n  commentId: P:System.Security.Cryptography.HMAC.HashName\n  nameWithType: HMAC.HashName\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: true\n  name: KeyValue\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  commentId: F:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  nameWithType: KeyedHashAlgorithm.KeyValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: HashSizeValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  commentId: F:System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: HashValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashValue\n  commentId: F:System.Security.Cryptography.HashAlgorithm.HashValue\n  nameWithType: HashAlgorithm.HashValue\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: State\n  fullName: System.Security.Cryptography.HashAlgorithm.State\n  commentId: F:System.Security.Cryptography.HashAlgorithm.State\n  nameWithType: HashAlgorithm.State\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Stream)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Byte[])\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte())\n  name.vb: ComputeHash(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  nameWithType.vb: HashAlgorithm.ComputeHash(Byte())\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte(), System.Int32, System.Int32)\n  name.vb: ComputeHash(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n  nameWithType.vb: HashAlgorithm.ComputeHash(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: TransformBlock(Byte(), Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: TransformBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: TransformBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: HashAlgorithm.TransformBlock(Byte(), Int32, Int32, Byte(), Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte(), System.Int32, System.Int32)\n  name.vb: TransformFinalBlock(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n    name: TransformFinalBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n    name: TransformFinalBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType.vb: HashAlgorithm.TransformFinalBlock(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose\n  nameWithType: HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: Clear()\n  fullName: System.Security.Cryptography.HashAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.HashAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.HashAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Clear\n  nameWithType: HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: Hash\n  fullName: System.Security.Cryptography.HashAlgorithm.Hash\n  commentId: P:System.Security.Cryptography.HashAlgorithm.Hash\n  nameWithType: HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: InputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: OutputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  commentId: P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: CanReuseTransform\n  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  commentId: P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSize\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.HashSize\n  nameWithType: HashAlgorithm.HashSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.HMAC.Key\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: Key\n  fullName: System.Security.Cryptography.HMAC.Key\n  commentId: P:System.Security.Cryptography.HMAC.Key\n  nameWithType: HMAC.Key\n- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.HMAC.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.HMAC.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HMAC.Dispose(System.Boolean)\n  nameWithType: HMAC.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: HashCore(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HMAC.HashCore(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HMAC.HashCore(System.Byte(), System.Int32, System.Int32)\n  name.vb: HashCore(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n    name: HashCore\n    fullName: System.Security.Cryptography.HMAC.HashCore\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n    name: HashCore\n    fullName: System.Security.Cryptography.HMAC.HashCore\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HMAC.HashCore(Byte[], Int32, Int32)\n  nameWithType.vb: HMAC.HashCore(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HMAC.HashFinal\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: HashFinal()\n  fullName: System.Security.Cryptography.HMAC.HashFinal()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HMAC.HashFinal\n    name: HashFinal\n    fullName: System.Security.Cryptography.HMAC.HashFinal\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HMAC.HashFinal\n    name: HashFinal\n    fullName: System.Security.Cryptography.HMAC.HashFinal\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HMAC.HashFinal\n  nameWithType: HMAC.HashFinal()\n- uid: System.Security.Cryptography.HMAC.Initialize\n  parent: System.Security.Cryptography.HMAC\n  isExternal: true\n  name: Initialize()\n  fullName: System.Security.Cryptography.HMAC.Initialize()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HMAC.Initialize\n    name: Initialize\n    fullName: System.Security.Cryptography.HMAC.Initialize\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HMAC.Initialize\n    name: Initialize\n    fullName: System.Security.Cryptography.HMAC.Initialize\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HMAC.Initialize\n  nameWithType: HMAC.Initialize()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}