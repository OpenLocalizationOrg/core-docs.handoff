{"nodes":[{"pos":[1361,1376],"content":"UnicodeEncoding","needQuote":true,"nodes":[{"content":"UnicodeEncoding","pos":[0,15]}]},{"pos":[5832,5849],"content":"UnicodeEncoding()","needQuote":true,"nodes":[{"content":"UnicodeEncoding()","pos":[0,17]}]},{"pos":[6856,6889],"content":"UnicodeEncoding(Boolean, Boolean)","needQuote":true,"nodes":[{"content":"UnicodeEncoding(Boolean, Boolean)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to use the big endian byte order (most significant byte first), or &lt;strong&gt;false&lt;/strong&gt; to use the little endian byte order (least significant byte first).","pos":[7932,8118],"source":"\\n<p>\\n<strong>true</strong> to use the big endian byte order (most significant byte first), or <strong>false</strong> to use the little endian byte order (least significant byte first)."},{"content":"&lt;/p&gt;\\n","pos":[8119,8125],"source":" </p>\\n"},{"pos":[9035,9077],"content":"UnicodeEncoding(Boolean, Boolean, Boolean)","needQuote":true,"nodes":[{"content":"UnicodeEncoding(Boolean, Boolean, Boolean)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to use the big endian byte order (most significant byte first); &lt;strong&gt;false&lt;/strong&gt; to use the little endian byte order (least significant byte first).","pos":[10154,10337],"source":"\\n<p>\\n<strong>true</strong> to use the big endian byte order (most significant byte first); <strong>false</strong> to use the little endian byte order (least significant byte first)."},{"content":"&lt;/p&gt;\\n","pos":[10338,10344],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to specify that an exception should be thrown when an invalid encoding is detected; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[10774,10921],"source":"\\n<p>\\n<strong>true</strong> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10922,10928],"source":" </p>\\n"},{"pos":[11404,11418],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current object.","pos":[12288,12339],"source":"\\n<p>The object to compare with the current object."},{"content":"&lt;/p&gt;\\n","pos":[12340,12346],"source":" </p>\\n"},{"pos":[13351,13385],"content":"GetByteCount(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[14321,14389],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[14390,14396],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[14459,14507],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[14508,14514],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[14577,14617],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[14618,14624],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[14683,14760],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[14968,15042],"source":"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[15043,15049],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[15166,15452],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[15453,15459],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;chars&lt;/em&gt; contains an invalid sequence of characters.","pos":[15556,15651],"source":"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters."},{"content":"&lt;/p&gt;\\n","pos":[15652,15658],"source":" </p>\\n"},{"pos":[17214,17234],"content":"GetByteCount(String)","needQuote":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The string that contains the set of characters to encode.","pos":[18057,18119],"source":"\\n<p>The string that contains the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[18120,18126],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.","pos":[18185,18256],"source":"\\n<p>The number of bytes produced by encoding the specified characters."},{"content":"&lt;/p&gt;\\n","pos":[18257,18263],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;.","pos":[18445,18489],"source":"\\n<p>\\n<em>s</em> is <strong>null </strong>."},{"content":"&lt;/p&gt;\\n","pos":[18490,18496],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[18613,18718],"source":"\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[18719,18725],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;s&lt;/em&gt; contains an invalid sequence of characters.","pos":[18822,18913],"source":"\\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters."},{"content":"&lt;/p&gt;\\n","pos":[18914,18920],"source":" </p>\\n"},{"pos":[20394,20439],"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[21459,21527],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[21528,21534],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[21601,21649],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[21650,21656],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[21723,21763],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[21764,21770],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.","pos":[21834,21897],"source":"\\n<p>The byte array to contain the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[21898,21904],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.","pos":[21971,22044],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[22045,22051],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[22110,22176],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[22407,22573],"source":"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[22574,22580],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[22697,22981],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[22982,22988],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;chars&lt;/em&gt; contains an invalid sequence of characters.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[23085,23333],"source":"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[23334,23340],"source":" </p>\\n"},{"pos":[25055,25100],"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The string containing the set of characters to encode.","pos":[26166,26225],"source":"\\n<p>The string containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[26226,26232],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[26299,26347],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[26348,26354],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[26421,26461],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[26462,26468],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.","pos":[26532,26595],"source":"\\n<p>The byte array to contain the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[26596,26602],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.","pos":[26669,26742],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[26743,26749],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[26808,26874],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[27105,27241],"source":"\\n<p>\\n<em>s</em> is <strong>null </strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[27242,27248],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[27365,27649],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[27650,27656],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;s&lt;/em&gt; contains an invalid sequence of characters.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[27753,27997],"source":"\\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[27998,28004],"source":" </p>\\n"},{"pos":[29650,29684],"content":"GetCharCount(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[30621,30684],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[30685,30691],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[30754,30797],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[30798,30804],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[30867,30902],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[30903,30909],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[30968,31057],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[31265,31339],"source":"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[31340,31346],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[31463,31749],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[31750,31756],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.","pos":[31853,31943],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[31944,31950],"source":" </p>\\n"},{"pos":[33653,33698],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[34718,34781],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[34782,34788],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[34855,34898],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[34899,34905],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[34972,35007],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[35008,35014],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character array to contain the resulting set of characters.","pos":[35078,35146],"source":"\\n<p>The character array to contain the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[35147,35153],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting set of characters.","pos":[35220,35293],"source":"\\n<p>The index at which to start writing the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[35294,35300],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written into &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n","pos":[35359,35430],"source":"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[35661,35827],"source":"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[35828,35834],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteindex&lt;/em&gt; and &lt;em&gt;byteCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; is not a valid index in &lt;em&gt;chars&lt;/em&gt;.","pos":[35951,36235],"source":"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>."},{"content":"&lt;/p&gt;\\n","pos":[36236,36242],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; does not have enough capacity from &lt;em&gt;charIndex&lt;/em&gt; to the end of the array to accommodate the resulting characters.","pos":[36339,36587],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters."},{"content":"&lt;/p&gt;\\n","pos":[36588,36594],"source":" </p>\\n"},{"pos":[38296,38308],"content":"GetDecoder()","needQuote":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[40364,40376],"content":"GetEncoder()","needQuote":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[42330,42343],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[43643,43665],"content":"GetMaxByteCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[44447,44487],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[44488,44494],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes produced by encoding the specified number of characters.&lt;/p&gt;\\n","pos":[44553,44648],"source":"\\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[44844,45011],"source":"\\n<p>\\n<em>charCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[45012,45018],"source":" </p>\\n"},{"pos":[46401,46423],"content":"GetMaxCharCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[47205,47240],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[47241,47247],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters produced by decoding the specified number of bytes.&lt;/p&gt;\\n","pos":[47306,47401],"source":"\\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The resulting number of bytes is greater than the maximum number that can be returned as an integer.","pos":[47597,47764],"source":"\\n<p>\\n<em>byteCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer."},{"content":"&lt;/p&gt;\\n","pos":[47765,47771],"source":" </p>\\n"},{"pos":[49285,49298],"content":"GetPreamble()","needQuote":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"pos":[50767,50798],"content":"GetString(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[51729,51792],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[51793,51799],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[51862,51905],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[51906,51912],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[51975,52010],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[52011,52017],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[52443,52517],"source":"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[52518,52524],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.","pos":[52641,52804],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[52805,52811],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Error detection is enabled, and &lt;em&gt;bytes&lt;/em&gt; contains an invalid sequence of bytes.","pos":[52908,52998],"source":"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[52999,53005],"source":" </p>\\n"},{"pos":[54558,54569],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[54715,54721],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54878,54886],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[55050,55060],"content":"ICloneable","needQuote":true,"nodes":[{"content":"ICloneable","pos":[0,10]}]},{"pos":[55302,55337],"content":"Convert(Encoding, Encoding, Byte[])","needQuote":true,"nodes":[{"content":"Convert(Encoding, Encoding, Byte[])","pos":[0,35]}]},{"pos":[55708,55715],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[55790,55791],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55848,55856],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[55924,55925]},{"pos":[55987,55995],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[56063,56064]},{"pos":[56117,56121],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[56180,56182]},{"pos":[56213,56214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56347,56354],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[56429,56430],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56487,56495],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[56563,56564]},{"pos":[56626,56634],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[56702,56703]},{"pos":[56756,56760],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[56818,56820],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[56848,56849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57269,57318],"content":"Convert(Encoding, Encoding, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Convert(Encoding, Encoding, Byte[], Int32, Int32)","pos":[0,49]}]},{"pos":[57785,57792],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[57867,57868],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57925,57933],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[58001,58002]},{"pos":[58064,58072],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[58140,58141]},{"pos":[58194,58198],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[58257,58259]},{"content":",","pos":[58291,58292]},{"pos":[58346,58351],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[58411,58412]},{"pos":[58466,58471],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[58530,58531],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58690,58697],"content":"Convert","needQuote":true,"nodes":[{"content":"Convert","pos":[0,7]}]},{"pos":[58772,58773],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58830,58838],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[58906,58907]},{"pos":[58969,58977],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"content":",","pos":[59045,59046]},{"pos":[59099,59103],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[59161,59163],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[59192,59193]},{"pos":[59247,59252],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[59312,59313]},{"pos":[59367,59372],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[59431,59432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59862,59896],"content":"RegisterProvider(EncodingProvider)","needQuote":true,"nodes":[{"content":"RegisterProvider(EncodingProvider)","pos":[0,34]}]},{"pos":[60079,60095],"content":"RegisterProvider","needQuote":true,"nodes":[{"content":"RegisterProvider","pos":[0,16]}]},{"pos":[60179,60180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60245,60261],"content":"EncodingProvider","needQuote":true,"nodes":[{"content":"EncodingProvider","pos":[0,16]}]},{"pos":[60336,60337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60452,60468],"content":"RegisterProvider","needQuote":true,"nodes":[{"content":"RegisterProvider","pos":[0,16]}]},{"pos":[60552,60553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60618,60634],"content":"EncodingProvider","needQuote":true,"nodes":[{"content":"EncodingProvider","pos":[0,16]}]},{"pos":[60709,60710],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60982,61000],"content":"GetEncoding(Int32)","needQuote":true,"nodes":[{"content":"GetEncoding(Int32)","pos":[0,18]}]},{"pos":[61141,61152],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[61231,61232],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61281,61286],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[61345,61346],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61440,61451],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[61530,61531],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61580,61585],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[61644,61645],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61936,61988],"content":"GetEncoding(Int32, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"GetEncoding(Int32, EncoderFallback, DecoderFallback)","pos":[0,52]}]},{"pos":[62243,62254],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[62333,62334],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62383,62388],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[62448,62449]},{"pos":[62518,62533],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[62608,62609]},{"pos":[62678,62693],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[62767,62768],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62918,62929],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[63008,63009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63058,63063],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[63123,63124]},{"pos":[63193,63208],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[63283,63284]},{"pos":[63353,63368],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[63442,63443],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63769,63788],"content":"GetEncoding(String)","needQuote":true,"nodes":[{"content":"GetEncoding(String)","pos":[0,19]}]},{"pos":[63931,63942],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[64021,64022],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64072,64078],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[64138,64139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64234,64245],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[64324,64325],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64375,64381],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[64441,64442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64736,64789],"content":"GetEncoding(String, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"GetEncoding(String, EncoderFallback, DecoderFallback)","pos":[0,53]}]},{"pos":[65046,65057],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[65136,65137],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65187,65193],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[65254,65255]},{"pos":[65324,65339],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[65414,65415]},{"pos":[65484,65499],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[65573,65574],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65725,65736],"content":"GetEncoding","needQuote":true,"nodes":[{"content":"GetEncoding","pos":[0,11]}]},{"pos":[65815,65816],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65866,65872],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[65933,65934]},{"pos":[66003,66018],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":",","pos":[66093,66094]},{"pos":[66163,66178],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[66252,66253],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66567,66581],"content":"GetEncodings()","needQuote":true,"nodes":[{"content":"GetEncodings()","pos":[0,14]}]},{"pos":[66698,66710],"content":"GetEncodings","needQuote":true,"nodes":[{"content":"GetEncodings","pos":[0,12]}]},{"pos":[66790,66791],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66818,66819],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66900,66912],"content":"GetEncodings","needQuote":true,"nodes":[{"content":"GetEncodings","pos":[0,12]}]},{"pos":[66992,66993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67020,67021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67219,67226],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[67329,67334],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[67407,67408],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67435,67436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67510,67515],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[67588,67589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67616,67617],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67823,67843],"content":"GetByteCount(Char[])","needQuote":true,"nodes":[{"content":"GetByteCount(Char[])","pos":[0,20]}]},{"pos":[68084,68096],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[68176,68177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68225,68229],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[68288,68290]},{"pos":[68321,68322],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68418,68430],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[68510,68511],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68559,68563],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[68621,68623],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[68651,68652],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68954,68980],"content":"GetByteCount(Char*, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char*, Int32)","pos":[0,26]}]},{"pos":[69150,69162],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[69242,69243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69291,69295],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[69386,69387]},{"pos":[69441,69446],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69505,69506],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69614,69626],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[69706,69707],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69755,69759],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[69850,69851]},{"pos":[69905,69910],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69969,69970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70225,70241],"content":"GetBytes(Char[])","needQuote":true,"nodes":[{"content":"GetBytes(Char[])","pos":[0,16]}]},{"pos":[70466,70474],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[70550,70551],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70599,70603],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[70662,70664]},{"pos":[70695,70696],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70788,70796],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[70872,70873],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70921,70925],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[70983,70985],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[71013,71014],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71314,71344],"content":"GetBytes(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32)","pos":[0,30]}]},{"pos":[71665,71673],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[71749,71750],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71798,71802],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[71861,71863]},{"content":",","pos":[71895,71896]},{"pos":[71950,71955],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[72015,72016]},{"pos":[72070,72075],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72134,72135],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72253,72261],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[72337,72338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72386,72390],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[72448,72450],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[72479,72480]},{"pos":[72534,72539],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[72599,72600]},{"pos":[72654,72659],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72718,72719],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73047,73063],"content":"GetBytes(String)","needQuote":true,"nodes":[{"content":"GetBytes(String)","pos":[0,16]}]},{"pos":[73200,73208],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[73284,73285],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73335,73341],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[73401,73402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73494,73502],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[73578,73579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73629,73635],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[73695,73696],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73963,73999],"content":"GetBytes(Char*, Int32, Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char*, Int32, Byte*, Int32)","pos":[0,36]}]},{"pos":[74215,74223],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[74299,74300],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74348,74352],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[74443,74444]},{"pos":[74498,74503],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[74563,74564]},{"pos":[74617,74621],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[74712,74713]},{"pos":[74767,74772],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74831,74832],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74962,74970],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[75046,75047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75095,75099],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[75190,75191]},{"pos":[75245,75250],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[75310,75311]},{"pos":[75364,75368],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[75459,75460]},{"pos":[75514,75519],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[75578,75579],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75870,75890],"content":"GetCharCount(Byte[])","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[])","pos":[0,20]}]},{"pos":[76131,76143],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[76223,76224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76272,76276],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[76335,76337]},{"pos":[76368,76369],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76465,76477],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[76557,76558],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76606,76610],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[76668,76670],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[76698,76699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77001,77027],"content":"GetCharCount(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte*, Int32)","pos":[0,26]}]},{"pos":[77197,77209],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[77289,77290],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77338,77342],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[77433,77434]},{"pos":[77488,77493],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[77552,77553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77661,77673],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[77753,77754],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77802,77806],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[77897,77898]},{"pos":[77952,77957],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[78016,78017],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78272,78288],"content":"GetChars(Byte[])","needQuote":true,"nodes":[{"content":"GetChars(Byte[])","pos":[0,16]}]},{"pos":[78513,78521],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[78597,78598],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78646,78650],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[78709,78711]},{"pos":[78742,78743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78835,78843],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[78919,78920],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78968,78972],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[79030,79032],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[79060,79061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79361,79391],"content":"GetChars(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32)","pos":[0,30]}]},{"pos":[79712,79720],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[79796,79797],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79845,79849],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[79908,79910]},{"content":",","pos":[79942,79943]},{"pos":[79997,80002],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[80062,80063]},{"pos":[80117,80122],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[80181,80182],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80300,80308],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[80384,80385],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80433,80437],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[80495,80497],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[80526,80527]},{"pos":[80581,80586],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[80646,80647]},{"pos":[80701,80706],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[80765,80766],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81132,81168],"content":"GetChars(Byte*, Int32, Char*, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte*, Int32, Char*, Int32)","pos":[0,36]}]},{"pos":[81384,81392],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[81468,81469],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81517,81521],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[81612,81613]},{"pos":[81667,81672],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[81732,81733]},{"pos":[81786,81790],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[81881,81882]},{"pos":[81936,81941],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[82000,82001],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82131,82139],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[82215,82216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82264,82268],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[82359,82360]},{"pos":[82414,82419],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[82479,82480]},{"pos":[82533,82537],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":",","pos":[82628,82629]},{"pos":[82683,82688],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[82747,82748],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83048,83071],"content":"GetString(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte*, Int32)","pos":[0,23]}]},{"pos":[83235,83244],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[83321,83322],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83370,83374],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[83465,83466]},{"pos":[83520,83525],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[83584,83585],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83690,83699],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[83776,83777],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83825,83829],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":",","pos":[83920,83921]},{"pos":[83975,83980],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[84039,84040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84284,84304],"content":"IsAlwaysNormalized()","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized()","pos":[0,20]}]},{"pos":[84433,84451],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[84537,84538],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84565,84566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84653,84671],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[84757,84758],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84785,84786],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85040,85077],"content":"IsAlwaysNormalized(NormalizationForm)","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized(NormalizationForm)","pos":[0,37]}]},{"pos":[85266,85284],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[85370,85371],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85437,85454],"content":"NormalizationForm","needQuote":true,"nodes":[{"content":"NormalizationForm","pos":[0,17]}]},{"pos":[85530,85531],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85649,85667],"content":"IsAlwaysNormalized","needQuote":true,"nodes":[{"content":"IsAlwaysNormalized","pos":[0,18]}]},{"pos":[85753,85754],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85820,85837],"content":"NormalizationForm","needQuote":true,"nodes":[{"content":"NormalizationForm","pos":[0,17]}]},{"pos":[85913,85914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86191,86208],"content":"GetString(Byte[])","needQuote":true,"nodes":[{"content":"GetString(Byte[])","pos":[0,17]}]},{"pos":[86437,86446],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[86523,86524],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86572,86576],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[86635,86637]},{"pos":[86668,86669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86762,86771],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[86848,86849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86897,86901],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[86959,86961],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[86989,86990],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87252,87260],"content":"BodyName","needQuote":true,"nodes":[{"content":"BodyName","pos":[0,8]}]},{"pos":[87481,87493],"content":"EncodingName","needQuote":true,"nodes":[{"content":"EncodingName","pos":[0,12]}]},{"pos":[87724,87734],"content":"HeaderName","needQuote":true,"nodes":[{"content":"HeaderName","pos":[0,10]}]},{"pos":[87956,87963],"content":"WebName","needQuote":true,"nodes":[{"content":"WebName","pos":[0,7]}]},{"pos":[88184,88199],"content":"WindowsCodePage","needQuote":true,"nodes":[{"content":"WindowsCodePage","pos":[0,15]}]},{"pos":[88445,88461],"content":"IsBrowserDisplay","needQuote":true,"nodes":[{"content":"IsBrowserDisplay","pos":[0,16]}]},{"pos":[88707,88720],"content":"IsBrowserSave","needQuote":true,"nodes":[{"content":"IsBrowserSave","pos":[0,13]}]},{"pos":[88961,88978],"content":"IsMailNewsDisplay","needQuote":true,"nodes":[{"content":"IsMailNewsDisplay","pos":[0,17]}]},{"pos":[89228,89242],"content":"IsMailNewsSave","needQuote":true,"nodes":[{"content":"IsMailNewsSave","pos":[0,14]}]},{"pos":[89481,89493],"content":"IsSingleByte","needQuote":true,"nodes":[{"content":"IsSingleByte","pos":[0,12]}]},{"pos":[89729,89744],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"pos":[89989,90004],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[90244,90254],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[90474,90479],"content":"ASCII","needQuote":true,"nodes":[{"content":"ASCII","pos":[0,5]}]},{"pos":[90687,90695],"content":"CodePage","needQuote":true,"nodes":[{"content":"CodePage","pos":[0,8]}]},{"pos":[90911,90918],"content":"Default","needQuote":true,"nodes":[{"content":"Default","pos":[0,7]}]},{"pos":[91131,91138],"content":"Unicode","needQuote":true,"nodes":[{"content":"Unicode","pos":[0,7]}]},{"pos":[91360,91376],"content":"BigEndianUnicode","needQuote":true,"nodes":[{"content":"BigEndianUnicode","pos":[0,16]}]},{"pos":[91613,91617],"content":"UTF7","needQuote":true,"nodes":[{"content":"UTF7","pos":[0,4]}]},{"pos":[91818,91822],"content":"UTF8","needQuote":true,"nodes":[{"content":"UTF8","pos":[0,4]}]},{"pos":[92024,92029],"content":"UTF32","needQuote":true,"nodes":[{"content":"UTF32","pos":[0,5]}]},{"pos":[92223,92233],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[92328,92336],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[92405,92406],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92433,92434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92504,92512],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[92581,92582],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92609,92610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92807,92829],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[92977,92983],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[93050,93051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93101,93107],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[93168,93169]},{"pos":[93224,93230],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[93290,93291],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93388,93394],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[93461,93462],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93512,93518],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[93579,93580]},{"pos":[93635,93641],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[93701,93702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93947,93978],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[94144,94159],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[94235,94236],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94286,94292],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[94353,94354]},{"pos":[94409,94415],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[94475,94476],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94582,94597],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[94673,94674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94724,94730],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[94791,94792]},{"pos":[94847,94853],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[94913,94914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95140,95149],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[95242,95249],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[95317,95318],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95345,95346],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95415,95422],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[95490,95491],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95518,95519],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95694,95711],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[95820,95835],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[95911,95912],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95939,95940],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96017,96032],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[96108,96109],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96136,96137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96282,96288],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[96420,96427],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[96617,96631],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[96764,96770],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[96844,96845],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96895,96901],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[96961,96962],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97052,97058],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[97132,97133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97183,97189],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[97249,97250],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97505,97539],"content":"GetByteCount(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char[], Int32, Int32)","pos":[0,34]}]},{"pos":[97876,97888],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[97968,97969],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98017,98021],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[98080,98082]},{"content":",","pos":[98114,98115]},{"pos":[98169,98174],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[98234,98235]},{"pos":[98289,98294],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[98353,98354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98476,98488],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[98568,98569],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98617,98621],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[98679,98681],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[98710,98711]},{"pos":[98765,98770],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[98830,98831]},{"pos":[98885,98890],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[98949,98950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99209,99215],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[99335,99339],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[99398,99400]},{"pos":[99463,99467],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[99525,99527],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[99659,99664],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[99854,99874],"content":"GetByteCount(String)","needQuote":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"pos":[100019,100031],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[100111,100112],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100162,100168],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[100228,100229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100325,100337],"content":"GetByteCount","needQuote":true,"nodes":[{"content":"GetByteCount","pos":[0,12]}]},{"pos":[100417,100418],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100468,100474],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[100534,100535],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100728,100734],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[100976,101021],"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"pos":[101442,101450],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[101526,101527],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101575,101579],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[101638,101640]},{"content":",","pos":[101672,101673]},{"pos":[101727,101732],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[101792,101793]},{"pos":[101847,101852],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[101912,101913]},{"pos":[101966,101970],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[102029,102031]},{"content":",","pos":[102063,102064]},{"pos":[102118,102123],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[102182,102183],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102328,102336],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[102412,102413],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102461,102465],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[102523,102525],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[102554,102555]},{"pos":[102609,102614],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102674,102675]},{"pos":[102729,102734],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[102794,102795]},{"pos":[102848,102852],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[102910,102912],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[102941,102942]},{"pos":[102996,103001],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[103060,103061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103365,103371],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[103491,103495],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[103554,103556]},{"pos":[103619,103623],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[103681,103683],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[103913,103958],"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"pos":[104379,104387],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[104463,104464],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104514,104520],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[104581,104582]},{"pos":[104636,104641],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[104701,104702]},{"pos":[104756,104761],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[104821,104822]},{"pos":[104875,104879],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[104938,104940]},{"content":",","pos":[104972,104973]},{"pos":[105027,105032],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[105091,105092],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105237,105245],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[105321,105322],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105372,105378],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[105439,105440]},{"pos":[105494,105499],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[105559,105560]},{"pos":[105614,105619],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[105679,105680]},{"pos":[105733,105737],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[105795,105797],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[105826,105827]},{"pos":[105881,105886],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[105945,105946],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106361,106395],"content":"GetCharCount(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32)","pos":[0,34]}]},{"pos":[106732,106744],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[106824,106825],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106873,106877],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[106936,106938]},{"content":",","pos":[106970,106971]},{"pos":[107025,107030],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[107090,107091]},{"pos":[107145,107150],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[107209,107210],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107332,107344],"content":"GetCharCount","needQuote":true,"nodes":[{"content":"GetCharCount","pos":[0,12]}]},{"pos":[107424,107425],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107473,107477],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[107535,107537],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[107566,107567]},{"pos":[107621,107626],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[107686,107687]},{"pos":[107741,107746],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[107805,107806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108199,108244],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","pos":[0,45]}]},{"pos":[108665,108673],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[108749,108750],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108798,108802],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[108861,108863]},{"content":",","pos":[108895,108896]},{"pos":[108950,108955],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[109015,109016]},{"pos":[109070,109075],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[109135,109136]},{"pos":[109189,109193],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[109252,109254]},{"content":",","pos":[109286,109287]},{"pos":[109341,109346],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[109405,109406],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109551,109559],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[109635,109636],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109684,109688],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[109746,109748],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[109777,109778]},{"pos":[109832,109837],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[109897,109898]},{"pos":[109952,109957],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[110017,110018]},{"pos":[110071,110075],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[110133,110135],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[110164,110165]},{"pos":[110219,110224],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[110283,110284],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110656,110668],"content":"GetDecoder()","needQuote":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[110781,110791],"content":"GetDecoder","needQuote":true,"nodes":[{"content":"GetDecoder","pos":[0,10]}]},{"pos":[110869,110870],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110897,110898],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110977,110987],"content":"GetDecoder","needQuote":true,"nodes":[{"content":"GetDecoder","pos":[0,10]}]},{"pos":[111065,111066],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111093,111094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111273,111280],"content":"Decoder","needQuote":true,"nodes":[{"content":"Decoder","pos":[0,7]}]},{"pos":[111469,111481],"content":"GetEncoder()","needQuote":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[111594,111604],"content":"GetEncoder","needQuote":true,"nodes":[{"content":"GetEncoder","pos":[0,10]}]},{"pos":[111682,111683],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111710,111711],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111790,111800],"content":"GetEncoder","needQuote":true,"nodes":[{"content":"GetEncoder","pos":[0,10]}]},{"pos":[111878,111879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111906,111907],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112086,112093],"content":"Encoder","needQuote":true,"nodes":[{"content":"Encoder","pos":[0,7]}]},{"pos":[112283,112296],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[112411,112422],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[112501,112502],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112529,112530],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112610,112621],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[112700,112701],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112728,112729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112949,112971],"content":"GetMaxByteCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"pos":[113120,113135],"content":"GetMaxByteCount","needQuote":true,"nodes":[{"content":"GetMaxByteCount","pos":[0,15]}]},{"pos":[113218,113219],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113268,113273],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[113332,113333],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113431,113446],"content":"GetMaxByteCount","needQuote":true,"nodes":[{"content":"GetMaxByteCount","pos":[0,15]}]},{"pos":[113529,113530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113579,113584],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[113643,113644],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113891,113913],"content":"GetMaxCharCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"pos":[114062,114077],"content":"GetMaxCharCount","needQuote":true,"nodes":[{"content":"GetMaxCharCount","pos":[0,15]}]},{"pos":[114160,114161],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114210,114215],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114274,114275],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114373,114388],"content":"GetMaxCharCount","needQuote":true,"nodes":[{"content":"GetMaxCharCount","pos":[0,15]}]},{"pos":[114471,114472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114521,114526],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114585,114586],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114815,114828],"content":"GetPreamble()","needQuote":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"pos":[114943,114954],"content":"GetPreamble","needQuote":true,"nodes":[{"content":"GetPreamble","pos":[0,11]}]},{"pos":[115033,115034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115061,115062],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115142,115153],"content":"GetPreamble","needQuote":true,"nodes":[{"content":"GetPreamble","pos":[0,11]}]},{"pos":[115232,115233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115260,115261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115502,115533],"content":"GetString(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte[], Int32, Int32)","pos":[0,31]}]},{"pos":[115858,115867],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[115944,115945],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115993,115997],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[116056,116058]},{"content":",","pos":[116090,116091]},{"pos":[116145,116150],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116210,116211]},{"pos":[116265,116270],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[116329,116330],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116449,116458],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[116535,116536],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116584,116588],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[116646,116648],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[116677,116678]},{"pos":[116732,116737],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116797,116798]},{"pos":[116852,116857],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[116916,116917],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117202,117223],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[117417,117444],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[117663,117680],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[117864,117888],"content":"EncoderFallbackException","needQuote":true,"nodes":[{"content":"EncoderFallbackException","pos":[0,24]}]},{"pos":[118103,118127],"content":"DecoderFallbackException","needQuote":true,"nodes":[{"content":"DecoderFallbackException","pos":[0,24]}]}],"content":"items:\n- uid: System.Text.UnicodeEncoding\n  commentId: T:System.Text.UnicodeEncoding\n  id: UnicodeEncoding\n  parent: System.Text\n  children:\n  - System.Text.UnicodeEncoding.#ctor\n  - System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)\n  - System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  - System.Text.UnicodeEncoding.Equals(System.Object)\n  - System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - System.Text.UnicodeEncoding.GetByteCount(System.String)\n  - System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.UnicodeEncoding.GetDecoder\n  - System.Text.UnicodeEncoding.GetEncoder\n  - System.Text.UnicodeEncoding.GetHashCode\n  - System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n  - System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n  - System.Text.UnicodeEncoding.GetPreamble\n  - System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: UnicodeEncoding\n  fullName: System.Text.UnicodeEncoding\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UnicodeEncoding\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 17\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Represents a UTF-16 encoding of Unicode characters. </p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class UnicodeEncoding : Encoding, ICloneable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class UnicodeEncoding\n          Inherits Encoding\n          Implements ICloneable\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  - type: System.Text.Encoder\n    commentId: T:System.Text.Encoder\n  - type: System.Text.Decoder\n    commentId: T:System.Text.Decoder\n  - type: System.Text.UTF32Encoding\n    commentId: T:System.Text.UTF32Encoding\n  - type: System.Text.UTF8Encoding\n    commentId: T:System.Text.UTF8Encoding\n  - type: System.Text.UTF7Encoding\n    commentId: T:System.Text.UTF7Encoding\n  - type: System.Text.ASCIIEncoding\n    commentId: T:System.Text.ASCIIEncoding\n  - type: System.Globalization.UnicodeCategory\n    commentId: T:System.Globalization.UnicodeCategory\n  - type: System.Globalization.CharUnicodeInfo\n    commentId: T:System.Globalization.CharUnicodeInfo\n  inheritance:\n  - System.Object\n  - System.Text.Encoding\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  - System.Text.Encoding.GetEncoding(System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncoding(System.String)\n  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncodings\n  - System.Text.Encoding.Clone\n  - System.Text.Encoding.GetByteCount(System.Char[])\n  - System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  - System.Text.Encoding.GetBytes(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.String)\n  - System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  - System.Text.Encoding.GetCharCount(System.Byte[])\n  - System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  - System.Text.Encoding.GetChars(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  - System.Text.Encoding.IsAlwaysNormalized\n  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  - System.Text.Encoding.GetString(System.Byte[])\n  - System.Text.Encoding.BodyName\n  - System.Text.Encoding.EncodingName\n  - System.Text.Encoding.HeaderName\n  - System.Text.Encoding.WebName\n  - System.Text.Encoding.WindowsCodePage\n  - System.Text.Encoding.IsBrowserDisplay\n  - System.Text.Encoding.IsBrowserSave\n  - System.Text.Encoding.IsMailNewsDisplay\n  - System.Text.Encoding.IsMailNewsSave\n  - System.Text.Encoding.IsSingleByte\n  - System.Text.Encoding.EncoderFallback\n  - System.Text.Encoding.DecoderFallback\n  - System.Text.Encoding.IsReadOnly\n  - System.Text.Encoding.ASCII\n  - System.Text.Encoding.CodePage\n  - System.Text.Encoding.Default\n  - System.Text.Encoding.Unicode\n  - System.Text.Encoding.BigEndianUnicode\n  - System.Text.Encoding.UTF7\n  - System.Text.Encoding.UTF8\n  - System.Text.Encoding.UTF32\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: UnicodeEncoding\n- uid: System.Text.UnicodeEncoding.#ctor\n  commentId: M:System.Text.UnicodeEncoding.#ctor\n  id: '#ctor'\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: UnicodeEncoding()\n  fullName: System.Text.UnicodeEncoding.UnicodeEncoding()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 31\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.UnicodeEncoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public UnicodeEncoding()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UnicodeEncoding.UnicodeEncoding()\n- uid: System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)\n  commentId: M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean)'\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: UnicodeEncoding(Boolean, Boolean)\n  fullName: System.Text.UnicodeEncoding.UnicodeEncoding(System.Boolean, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 37\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.UnicodeEncoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. Parameters specify whether to use the big endian byte order and whether the <xref href=\\\"System.Text.UnicodeEncoding.GetPreamble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method returns a Unicode byte order mark. </p>\\n\"\n  syntax:\n    content: public UnicodeEncoding(bool bigEndian, bool byteOrderMark)\n    content.vb: Public Sub New(bigEndian As Boolean, byteOrderMark As Boolean)\n    parameters:\n    - id: bigEndian\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to use the big endian byte order (most significant byte first), or <strong>false</strong> to use the little endian byte order (least significant byte first). </p>\\n\"\n    - id: byteOrderMark\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to specify that the <xref href=\\\"System.Text.UnicodeEncoding.GetPreamble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method returns a Unicode byte order mark; otherwise, <strong>false</strong>. See the Remarks section for more information. </p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding.GetPreamble\n    commentId: M:System.Text.UnicodeEncoding.GetPreamble\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UnicodeEncoding.UnicodeEncoding(Boolean, Boolean)\n- uid: System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  commentId: M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: UnicodeEncoding(Boolean, Boolean, Boolean)\n  fullName: System.Text.UnicodeEncoding.UnicodeEncoding(System.Boolean, System.Boolean, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 43\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.UnicodeEncoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</p>\\n\"\n  syntax:\n    content: public UnicodeEncoding(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes)\n    content.vb: Public Sub New(bigEndian As Boolean, byteOrderMark As Boolean, throwOnInvalidBytes As Boolean)\n    parameters:\n    - id: bigEndian\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to use the big endian byte order (most significant byte first); <strong>false</strong> to use the little endian byte order (least significant byte first). </p>\\n\"\n    - id: byteOrderMark\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to specify that the <xref href=\\\"System.Text.UnicodeEncoding.GetPreamble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method returns a Unicode byte order mark; otherwise, <strong>false</strong>. See the Remarks section for more information. </p>\\n\"\n    - id: throwOnInvalidBytes\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <strong>false</strong>. </p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding.GetPreamble\n    commentId: M:System.Text.UnicodeEncoding.GetPreamble\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: UnicodeEncoding.UnicodeEncoding(Boolean, Boolean, Boolean)\n- uid: System.Text.UnicodeEncoding.Equals(System.Object)\n  commentId: M:System.Text.UnicodeEncoding.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Text.UnicodeEncoding.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 1989\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current <xref href=\\\"System.Text.UnicodeEncoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is an instance of <xref href=\\\"System.Text.UnicodeEncoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and is equal to the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Text.Encoding.Equals(System.Object)\n  seealso:\n  - type: System.Text.UnicodeEncoding.#ctor\n    commentId: M:System.Text.UnicodeEncoding.#ctor\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UnicodeEncoding.Equals(Object)\n- uid: System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char[], Int32, Int32)\n  fullName: System.Text.UnicodeEncoding.GetByteCount(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 94\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetByteCount(char[] chars, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetByteCount(chars As Char(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.UnicodeEncoding.GetEncoder\n    commentId: M:System.Text.UnicodeEncoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UnicodeEncoding.GetByteCount(System.Char(), System.Int32, System.Int32)\n  name.vb: GetByteCount(Char(), Int32, Int32)\n  nameWithType: UnicodeEncoding.GetByteCount(Char[], Int32, Int32)\n  nameWithType.vb: UnicodeEncoding.GetByteCount(Char(), Int32, Int32)\n- uid: System.Text.UnicodeEncoding.GetByteCount(System.String)\n  commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.String)\n  id: GetByteCount(System.String)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(String)\n  fullName: System.Text.UnicodeEncoding.GetByteCount(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 125\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of bytes produced by encoding the characters in the specified string.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetByteCount(string s)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetByteCount(s As String) As Integer\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string that contains the set of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters. </p>\\n\"\n  overridden: System.Text.Encoding.GetByteCount(System.String)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null </strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.UnicodeEncoding.GetEncoder\n    commentId: M:System.Text.UnicodeEncoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UnicodeEncoding.GetByteCount(String)\n- uid: System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: System.Text.UnicodeEncoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 212\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters from the specified character array into the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>chars</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding.GetEncoder\n    commentId: M:System.Text.UnicodeEncoding.GetEncoder\n  - type: System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UnicodeEncoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  nameWithType: UnicodeEncoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: UnicodeEncoding.GetBytes(Char(), Int32, Int32, Byte(), Int32)\n- uid: System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: System.Text.UnicodeEncoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 165\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Encodes a set of characters from the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetBytes(s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string containing the set of characters to encode. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null </strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>s</em> contains an invalid sequence of characters.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding.GetEncoder\n    commentId: M:System.Text.UnicodeEncoding.GetEncoder\n  - type: System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UnicodeEncoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)\n  nameWithType: UnicodeEncoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType.vb: UnicodeEncoding.GetBytes(String, Int32, Int32, Byte(), Int32)\n- uid: System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte[], Int32, Int32)\n  fullName: System.Text.UnicodeEncoding.GetCharCount(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 282\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetCharCount(byte[] bytes, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UnicodeEncoding.GetDecoder\n    commentId: M:System.Text.UnicodeEncoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UnicodeEncoding.GetCharCount(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetCharCount(Byte(), Int32, Int32)\n  nameWithType: UnicodeEncoding.GetCharCount(Byte[], Int32, Int32)\n  nameWithType.vb: UnicodeEncoding.GetCharCount(Byte(), Int32, Int32)\n- uid: System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Text.UnicodeEncoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 335\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array to contain the resulting set of characters. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting set of characters. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n\"\n  overridden: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.UnicodeEncoding.GetDecoder\n    commentId: M:System.Text.UnicodeEncoding.GetDecoder\n  - type: System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UnicodeEncoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)\n  nameWithType: UnicodeEncoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: UnicodeEncoding.GetChars(Byte(), Int32, Int32, Char(), Int32)\n- uid: System.Text.UnicodeEncoding.GetDecoder\n  commentId: M:System.Text.UnicodeEncoding.GetDecoder\n  id: GetDecoder\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetDecoder()\n  fullName: System.Text.UnicodeEncoding.GetDecoder()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDecoder\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 1921\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Obtains a decoder that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</p>\\n\"\n  syntax:\n    content: public override Decoder GetDecoder()\n    content.vb: Public Overrides Function GetDecoder As Decoder\n    return:\n      type: System.Text.Decoder\n      description: \"\\n<p>A <xref href=\\\"System.Text.Decoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that converts a UTF-16 encoded sequence of bytes into a sequence of Unicode characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetDecoder\n  seealso:\n  - type: System.Text.Decoder\n    commentId: T:System.Text.Decoder\n  - type: System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UnicodeEncoding.GetEncoder\n    commentId: M:System.Text.UnicodeEncoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UnicodeEncoding.GetDecoder()\n- uid: System.Text.UnicodeEncoding.GetEncoder\n  commentId: M:System.Text.UnicodeEncoding.GetEncoder\n  id: GetEncoder\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetEncoder()\n  fullName: System.Text.UnicodeEncoding.GetEncoder()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEncoder\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 1914\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Obtains an encoder that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override Encoder GetEncoder()\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function GetEncoder As Encoder\n    return:\n      type: System.Text.Encoder\n      description: \"\\n<p>A <xref href=\\\"System.Text.Encoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that converts a sequence of Unicode characters into a UTF-16 encoded sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetEncoder\n  seealso:\n  - type: System.Text.Encoder\n    commentId: T:System.Text.Encoder\n  - type: System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UnicodeEncoding.GetDecoder\n    commentId: M:System.Text.UnicodeEncoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UnicodeEncoding.GetEncoder()\n- uid: System.Text.UnicodeEncoding.GetHashCode\n  commentId: M:System.Text.UnicodeEncoding.GetHashCode\n  id: GetHashCode\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Text.UnicodeEncoding.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 2008\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Returns the hash code for the current instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for the current <xref href=\\\"System.Text.UnicodeEncoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Text.Encoding.GetHashCode\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UnicodeEncoding.GetHashCode()\n- uid: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n  id: GetMaxByteCount(System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetMaxByteCount(Int32)\n  fullName: System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMaxByteCount\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 1942\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\\n\"\n  syntax:\n    content: public override int GetMaxByteCount(int charCount)\n    content.vb: Public Overrides Function GetMaxByteCount(charCount As Integer) As Integer\n    parameters:\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\\n\"\n  overridden: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - type: System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - type: System.Text.UnicodeEncoding.GetEncoder\n    commentId: M:System.Text.UnicodeEncoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UnicodeEncoding.GetMaxByteCount(Int32)\n- uid: System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n  id: GetMaxCharCount(System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetMaxCharCount(Int32)\n  fullName: System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMaxCharCount\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 1965\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\\n\"\n  syntax:\n    content: public override int GetMaxCharCount(int byteCount)\n    content.vb: Public Overrides Function GetMaxCharCount(byteCount As Integer) As Integer\n    parameters:\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UnicodeEncoding.GetDecoder\n    commentId: M:System.Text.UnicodeEncoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UnicodeEncoding.GetMaxCharCount(Int32)\n- uid: System.Text.UnicodeEncoding.GetPreamble\n  commentId: M:System.Text.UnicodeEncoding.GetPreamble\n  id: GetPreamble\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetPreamble()\n  fullName: System.Text.UnicodeEncoding.GetPreamble()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetPreamble\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 1927\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Returns a Unicode byte order mark encoded in UTF-16 format, if the constructor for this instance requests a byte order mark.</p>\\n\"\n  syntax:\n    content: public override byte[] GetPreamble()\n    content.vb: Public Overrides Function GetPreamble As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing the Unicode byte order mark, if the <xref href=\\\"System.Text.UnicodeEncoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is configured to supply one. Otherwise, this method returns a zero-length byte array. </p>\\n\"\n  overridden: System.Text.Encoding.GetPreamble\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: UnicodeEncoding.GetPreamble()\n- uid: System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)\n  id: GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.UnicodeEncoding\n  langs:\n  - csharp\n  - vb\n  name: GetString(Byte[], Int32, Int32)\n  fullName: System.Text.UnicodeEncoding.GetString(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetString\n    path: src/mscorlib/src/System/Text/UnicodeEncoding.cs\n    startLine: 405\n  assemblies:\n  - System.Text.Encoding.Extensions\n  namespace: System.Text\n  summary: \"\\n<p>Decodes a range of bytes from a byte array into a string.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ComVisible(false)]\n\n      public override string GetString(byte[] bytes, int index, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetString(bytes As Byte(), index As Integer, count As Integer) As String\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the results of decoding the specified sequence of bytes.</p>\\n\"\n  overridden: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Error detection is enabled, and <em>bytes</em> contains an invalid sequence of bytes. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.UnicodeEncoding.GetDecoder\n    commentId: M:System.Text.UnicodeEncoding.GetDecoder\n  - type: System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Text.UnicodeEncoding.GetString(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetString(Byte(), Int32, Int32)\n  nameWithType: UnicodeEncoding.GetString(Byte[], Int32, Int32)\n  nameWithType.vb: UnicodeEncoding.GetString(Byte(), Int32, Int32)\nreferences:\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  nameWithType: Encoding\n  commentId: T:System.Text.Encoding\n- uid: System.ICloneable\n  parent: System\n  isExternal: true\n  name: ICloneable\n  fullName: System.ICloneable\n  nameWithType: ICloneable\n  commentId: T:System.ICloneable\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Convert(Encoding, Encoding, Byte[])\n  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[])\n  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte())\n  name.vb: Convert(Encoding, Encoding, Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])\n  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte())\n  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte(), System.Int32, System.Int32)\n  name.vb: Convert(Encoding, Encoding, Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n    name: Convert\n    fullName: System.Text.Encoding.Convert\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.Encoding\n    name: Encoding\n    fullName: System.Text.Encoding\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: RegisterProvider(EncodingProvider)\n  fullName: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  spec.csharp:\n  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n    name: RegisterProvider\n    fullName: System.Text.Encoding.RegisterProvider\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.EncodingProvider\n    name: EncodingProvider\n    fullName: System.Text.EncodingProvider\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n    name: RegisterProvider\n    fullName: System.Text.Encoding.RegisterProvider\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.EncodingProvider\n    name: EncodingProvider\n    fullName: System.Text.EncodingProvider\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.RegisterProvider(EncodingProvider)\n  commentId: M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n- uid: System.Text.Encoding.GetEncoding(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(Int32)\n  fullName: System.Text.Encoding.GetEncoding(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(Int32)\n  commentId: M:System.Text.Encoding.GetEncoding(System.Int32)\n- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.GetEncoding(System.Int32, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  commentId: M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n- uid: System.Text.Encoding.GetEncoding(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(String)\n  fullName: System.Text.Encoding.GetEncoding(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.String)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.String)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(String)\n  commentId: M:System.Text.Encoding.GetEncoding(System.String)\n- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoding(String, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.GetEncoding(System.String, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n    name: GetEncoding\n    fullName: System.Text.Encoding.GetEncoding\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.EncoderFallback\n    name: EncoderFallback\n    fullName: System.Text.EncoderFallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Text.DecoderFallback\n    name: DecoderFallback\n    fullName: System.Text.DecoderFallback\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)\n  commentId: M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n- uid: System.Text.Encoding.GetEncodings\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncodings()\n  fullName: System.Text.Encoding.GetEncodings()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncodings\n    name: GetEncodings\n    fullName: System.Text.Encoding.GetEncodings\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncodings\n    name: GetEncodings\n    fullName: System.Text.Encoding.GetEncodings\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncodings()\n  commentId: M:System.Text.Encoding.GetEncodings\n- uid: System.Text.Encoding.Clone\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Clone()\n  fullName: System.Text.Encoding.Clone()\n  spec.csharp:\n  - uid: System.Text.Encoding.Clone\n    name: Clone\n    fullName: System.Text.Encoding.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Clone\n    name: Clone\n    fullName: System.Text.Encoding.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Clone()\n  commentId: M:System.Text.Encoding.Clone\n- uid: System.Text.Encoding.GetByteCount(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char[])\n  fullName: System.Text.Encoding.GetByteCount(System.Char[])\n  fullname.vb: System.Text.Encoding.GetByteCount(System.Char())\n  name.vb: GetByteCount(Char())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[])\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[])\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char[])\n  nameWithType.vb: Encoding.GetByteCount(Char())\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n- uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char*, Int32)\n  fullName: System.Text.Encoding.GetByteCount(System.Char*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char*, Int32)\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n- uid: System.Text.Encoding.GetBytes(System.Char[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[])\n  fullName: System.Text.Encoding.GetBytes(System.Char[])\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char())\n  name.vb: GetBytes(Char())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[])\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[])\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[])\n  nameWithType.vb: Encoding.GetBytes(Char())\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[])\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[], Int32, Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)\n  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetBytes(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(String)\n  fullName: System.Text.Encoding.GetBytes(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.String)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.String)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(String)\n  commentId: M:System.Text.Encoding.GetBytes(System.String)\n- uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte[])\n  fullName: System.Text.Encoding.GetCharCount(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte())\n  name.vb: GetCharCount(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[])\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[])\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte[])\n  nameWithType.vb: Encoding.GetCharCount(Byte())\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n- uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte*, Int32)\n  fullName: System.Text.Encoding.GetCharCount(System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[])\n  fullName: System.Text.Encoding.GetChars(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte())\n  name.vb: GetChars(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[])\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[])\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[])\n  nameWithType.vb: Encoding.GetChars(Byte())\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[])\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte*, Int32, Char*, Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte*, Int32)\n  fullName: System.Text.Encoding.GetString(System.Byte*, System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte*, Int32)\n  commentId: M:System.Text.Encoding.GetString(System.Byte*,System.Int32)\n- uid: System.Text.Encoding.IsAlwaysNormalized\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsAlwaysNormalized()\n  fullName: System.Text.Encoding.IsAlwaysNormalized()\n  spec.csharp:\n  - uid: System.Text.Encoding.IsAlwaysNormalized\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.IsAlwaysNormalized\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.IsAlwaysNormalized()\n  commentId: M:System.Text.Encoding.IsAlwaysNormalized\n- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsAlwaysNormalized(NormalizationForm)\n  fullName: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n  spec.csharp:\n  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.NormalizationForm\n    name: NormalizationForm\n    fullName: System.Text.NormalizationForm\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n    name: IsAlwaysNormalized\n    fullName: System.Text.Encoding.IsAlwaysNormalized\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Text.NormalizationForm\n    name: NormalizationForm\n    fullName: System.Text.NormalizationForm\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.IsAlwaysNormalized(NormalizationForm)\n  commentId: M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)\n- uid: System.Text.Encoding.GetString(System.Byte[])\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte[])\n  fullName: System.Text.Encoding.GetString(System.Byte[])\n  fullname.vb: System.Text.Encoding.GetString(System.Byte())\n  name.vb: GetString(Byte())\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte[])\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte[])\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte[])\n  nameWithType.vb: Encoding.GetString(Byte())\n  commentId: M:System.Text.Encoding.GetString(System.Byte[])\n- uid: System.Text.Encoding.BodyName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: BodyName\n  fullName: System.Text.Encoding.BodyName\n  nameWithType: Encoding.BodyName\n  commentId: P:System.Text.Encoding.BodyName\n- uid: System.Text.Encoding.EncodingName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: EncodingName\n  fullName: System.Text.Encoding.EncodingName\n  nameWithType: Encoding.EncodingName\n  commentId: P:System.Text.Encoding.EncodingName\n- uid: System.Text.Encoding.HeaderName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: HeaderName\n  fullName: System.Text.Encoding.HeaderName\n  nameWithType: Encoding.HeaderName\n  commentId: P:System.Text.Encoding.HeaderName\n- uid: System.Text.Encoding.WebName\n  parent: System.Text.Encoding\n  isExternal: true\n  name: WebName\n  fullName: System.Text.Encoding.WebName\n  nameWithType: Encoding.WebName\n  commentId: P:System.Text.Encoding.WebName\n- uid: System.Text.Encoding.WindowsCodePage\n  parent: System.Text.Encoding\n  isExternal: true\n  name: WindowsCodePage\n  fullName: System.Text.Encoding.WindowsCodePage\n  nameWithType: Encoding.WindowsCodePage\n  commentId: P:System.Text.Encoding.WindowsCodePage\n- uid: System.Text.Encoding.IsBrowserDisplay\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsBrowserDisplay\n  fullName: System.Text.Encoding.IsBrowserDisplay\n  nameWithType: Encoding.IsBrowserDisplay\n  commentId: P:System.Text.Encoding.IsBrowserDisplay\n- uid: System.Text.Encoding.IsBrowserSave\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsBrowserSave\n  fullName: System.Text.Encoding.IsBrowserSave\n  nameWithType: Encoding.IsBrowserSave\n  commentId: P:System.Text.Encoding.IsBrowserSave\n- uid: System.Text.Encoding.IsMailNewsDisplay\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsMailNewsDisplay\n  fullName: System.Text.Encoding.IsMailNewsDisplay\n  nameWithType: Encoding.IsMailNewsDisplay\n  commentId: P:System.Text.Encoding.IsMailNewsDisplay\n- uid: System.Text.Encoding.IsMailNewsSave\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsMailNewsSave\n  fullName: System.Text.Encoding.IsMailNewsSave\n  nameWithType: Encoding.IsMailNewsSave\n  commentId: P:System.Text.Encoding.IsMailNewsSave\n- uid: System.Text.Encoding.IsSingleByte\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsSingleByte\n  fullName: System.Text.Encoding.IsSingleByte\n  nameWithType: Encoding.IsSingleByte\n  commentId: P:System.Text.Encoding.IsSingleByte\n- uid: System.Text.Encoding.EncoderFallback\n  parent: System.Text.Encoding\n  isExternal: true\n  name: EncoderFallback\n  fullName: System.Text.Encoding.EncoderFallback\n  nameWithType: Encoding.EncoderFallback\n  commentId: P:System.Text.Encoding.EncoderFallback\n- uid: System.Text.Encoding.DecoderFallback\n  parent: System.Text.Encoding\n  isExternal: true\n  name: DecoderFallback\n  fullName: System.Text.Encoding.DecoderFallback\n  nameWithType: Encoding.DecoderFallback\n  commentId: P:System.Text.Encoding.DecoderFallback\n- uid: System.Text.Encoding.IsReadOnly\n  parent: System.Text.Encoding\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Text.Encoding.IsReadOnly\n  nameWithType: Encoding.IsReadOnly\n  commentId: P:System.Text.Encoding.IsReadOnly\n- uid: System.Text.Encoding.ASCII\n  parent: System.Text.Encoding\n  isExternal: true\n  name: ASCII\n  fullName: System.Text.Encoding.ASCII\n  nameWithType: Encoding.ASCII\n  commentId: P:System.Text.Encoding.ASCII\n- uid: System.Text.Encoding.CodePage\n  parent: System.Text.Encoding\n  isExternal: true\n  name: CodePage\n  fullName: System.Text.Encoding.CodePage\n  nameWithType: Encoding.CodePage\n  commentId: P:System.Text.Encoding.CodePage\n- uid: System.Text.Encoding.Default\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Default\n  fullName: System.Text.Encoding.Default\n  nameWithType: Encoding.Default\n  commentId: P:System.Text.Encoding.Default\n- uid: System.Text.Encoding.Unicode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Unicode\n  fullName: System.Text.Encoding.Unicode\n  nameWithType: Encoding.Unicode\n  commentId: P:System.Text.Encoding.Unicode\n- uid: System.Text.Encoding.BigEndianUnicode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: BigEndianUnicode\n  fullName: System.Text.Encoding.BigEndianUnicode\n  nameWithType: Encoding.BigEndianUnicode\n  commentId: P:System.Text.Encoding.BigEndianUnicode\n- uid: System.Text.Encoding.UTF7\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF7\n  fullName: System.Text.Encoding.UTF7\n  nameWithType: Encoding.UTF7\n  commentId: P:System.Text.Encoding.UTF7\n- uid: System.Text.Encoding.UTF8\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF8\n  fullName: System.Text.Encoding.UTF8\n  nameWithType: Encoding.UTF8\n  commentId: P:System.Text.Encoding.UTF8\n- uid: System.Text.Encoding.UTF32\n  parent: System.Text.Encoding\n  isExternal: true\n  name: UTF32\n  fullName: System.Text.Encoding.UTF32\n  nameWithType: Encoding.UTF32\n  commentId: P:System.Text.Encoding.UTF32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Text.Encoding.Equals(System.Object)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Text.Encoding.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Text.Encoding.Equals(System.Object)\n    name: Equals\n    fullName: System.Text.Encoding.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.Equals(System.Object)\n    name: Equals\n    fullName: System.Text.Encoding.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.Equals(Object)\n  commentId: M:System.Text.Encoding.Equals(System.Object)\n- uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(Char[], Int32, Int32)\n  fullName: System.Text.Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)\n  name.vb: GetByteCount(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(Char[], Int32, Int32)\n  nameWithType.vb: Encoding.GetByteCount(Char(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Text.Encoding.GetByteCount(System.String)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetByteCount(String)\n  fullName: System.Text.Encoding.GetByteCount(System.String)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetByteCount(System.String)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetByteCount(System.String)\n    name: GetByteCount\n    fullName: System.Text.Encoding.GetByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetByteCount(String)\n  commentId: M:System.Text.Encoding.GetByteCount(System.String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: GetBytes\n    fullName: System.Text.Encoding.GetBytes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType.vb: Encoding.GetBytes(String, Int32, Int32, Byte(), Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetCharCount(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetCharCount(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    name: GetCharCount\n    fullName: System.Text.Encoding.GetCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetCharCount(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetCharCount(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  fullname.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    name: GetChars\n    fullName: System.Text.Encoding.GetChars\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32, Char(), Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n- uid: System.Text.Encoding.GetDecoder\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetDecoder()\n  fullName: System.Text.Encoding.GetDecoder()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetDecoder\n    name: GetDecoder\n    fullName: System.Text.Encoding.GetDecoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetDecoder\n    name: GetDecoder\n    fullName: System.Text.Encoding.GetDecoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetDecoder()\n  commentId: M:System.Text.Encoding.GetDecoder\n- uid: System.Text.Decoder\n  parent: System.Text\n  isExternal: false\n  name: Decoder\n  fullName: System.Text.Decoder\n  nameWithType: Decoder\n  commentId: T:System.Text.Decoder\n- uid: System.Text.Encoding.GetEncoder\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetEncoder()\n  fullName: System.Text.Encoding.GetEncoder()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetEncoder\n    name: GetEncoder\n    fullName: System.Text.Encoding.GetEncoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetEncoder\n    name: GetEncoder\n    fullName: System.Text.Encoding.GetEncoder\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetEncoder()\n  commentId: M:System.Text.Encoding.GetEncoder\n- uid: System.Text.Encoder\n  parent: System.Text\n  isExternal: false\n  name: Encoder\n  fullName: System.Text.Encoder\n  nameWithType: Encoder\n  commentId: T:System.Text.Encoder\n- uid: System.Text.Encoding.GetHashCode\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Text.Encoding.GetHashCode()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetHashCode\n    name: GetHashCode\n    fullName: System.Text.Encoding.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetHashCode\n    name: GetHashCode\n    fullName: System.Text.Encoding.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetHashCode()\n  commentId: M:System.Text.Encoding.GetHashCode\n- uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetMaxByteCount(Int32)\n  fullName: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    name: GetMaxByteCount\n    fullName: System.Text.Encoding.GetMaxByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    name: GetMaxByteCount\n    fullName: System.Text.Encoding.GetMaxByteCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetMaxByteCount(Int32)\n  commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n- uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetMaxCharCount(Int32)\n  fullName: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    name: GetMaxCharCount\n    fullName: System.Text.Encoding.GetMaxCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    name: GetMaxCharCount\n    fullName: System.Text.Encoding.GetMaxCharCount\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetMaxCharCount(Int32)\n  commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n- uid: System.Text.Encoding.GetPreamble\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetPreamble()\n  fullName: System.Text.Encoding.GetPreamble()\n  spec.csharp:\n  - uid: System.Text.Encoding.GetPreamble\n    name: GetPreamble\n    fullName: System.Text.Encoding.GetPreamble\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetPreamble\n    name: GetPreamble\n    fullName: System.Text.Encoding.GetPreamble\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetPreamble()\n  commentId: M:System.Text.Encoding.GetPreamble\n- uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  isExternal: true\n  name: GetString(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetString(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Text.Encoding.GetString(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetString(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n    name: GetString\n    fullName: System.Text.Encoding.GetString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Encoding.GetString(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetString(Byte(), Int32, Int32)\n  commentId: M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Text.EncoderFallbackException\n  isExternal: false\n  name: EncoderFallbackException\n  fullName: System.Text.EncoderFallbackException\n  nameWithType: EncoderFallbackException\n  commentId: T:System.Text.EncoderFallbackException\n- uid: System.Text.DecoderFallbackException\n  isExternal: false\n  name: DecoderFallbackException\n  fullName: System.Text.DecoderFallbackException\n  nameWithType: DecoderFallbackException\n  commentId: T:System.Text.DecoderFallbackException\n"}