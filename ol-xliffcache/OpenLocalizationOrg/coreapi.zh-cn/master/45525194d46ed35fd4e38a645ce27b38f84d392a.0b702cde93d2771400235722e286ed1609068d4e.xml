{"nodes":[{"pos":[359,375],"content":"MemberAssignment","needQuote":true,"nodes":[{"content":"MemberAssignment","pos":[0,16]}]},{"pos":[1939,1949],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[3306,3324],"content":"Update(Expression)","needQuote":true,"nodes":[{"content":"Update(Expression)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;This expression if no children are changed or an expression with the updated children.&lt;/p&gt;\\n","pos":[4458,4555],"source":"\\n<p>This expression if no children are changed or an expression with the updated children.</p>\\n"},{"pos":[4738,4761],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[4943,4949],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5135,5148],"content":"MemberBinding","needQuote":true,"nodes":[{"content":"MemberBinding","pos":[0,13]}]},{"pos":[5415,5426],"content":"BindingType","needQuote":true,"nodes":[{"content":"BindingType","pos":[0,11]}]},{"pos":[5724,5730],"content":"Member","needQuote":true,"nodes":[{"content":"Member","pos":[0,6]}]},{"pos":[6015,6025],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6168,6176],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6248,6249],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6276,6277],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6371,6379],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6451,6452],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6479,6480],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6694,6708],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6827,6833],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6900,6901],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6951,6957],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7017,7018],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7101,7107],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7174,7175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7225,7231],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7291,7292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7506,7528],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7676,7682],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7749,7750],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7800,7806],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7867,7868]},{"pos":[7923,7929],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7989,7990],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8087,8093],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8160,8161],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8211,8217],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8278,8279]},{"pos":[8334,8340],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8400,8401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8646,8677],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8843,8858],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8934,8935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8985,8991],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9052,9053]},{"pos":[9108,9114],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9174,9175],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9281,9296],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9372,9373],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9423,9429],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9490,9491]},{"pos":[9546,9552],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9612,9613],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9843,9856],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[9957,9968],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10040,10041],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10068,10069],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10142,10153],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10225,10226],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10253,10254],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10429,10438],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[10531,10538],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10606,10607],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10634,10635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10704,10711],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10779,10780],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10807,10808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10983,11000],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11109,11124],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11200,11201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11228,11229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11306,11321],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11397,11398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11425,11426],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11571,11577],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11746,11756],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[11991,12007],"content":"MemberAssignment","needQuote":true,"nodes":[{"content":"MemberAssignment","pos":[0,16]}]}],"content":"items:\n- uid: System.Linq.Expressions.MemberAssignment\n  commentId: T:System.Linq.Expressions.MemberAssignment\n  id: MemberAssignment\n  parent: System.Linq.Expressions\n  children:\n  - System.Linq.Expressions.MemberAssignment.Expression\n  - System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)\n  langs:\n  - csharp\n  - vb\n  name: MemberAssignment\n  fullName: System.Linq.Expressions.MemberAssignment\n  type: Class\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MemberAssignment\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 674\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Represents assignment operation for a field or property of an object.</p>\\n\"\n  syntax:\n    content: 'public sealed class MemberAssignment : MemberBinding'\n    content.vb: >-\n      Public NotInheritable Class MemberAssignment\n          Inherits MemberBinding\n  inheritance:\n  - System.Object\n  - System.Linq.Expressions.MemberBinding\n  inheritedMembers:\n  - System.Linq.Expressions.MemberBinding.BindingType\n  - System.Linq.Expressions.MemberBinding.Member\n  - System.Linq.Expressions.MemberBinding.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: MemberAssignment\n- uid: System.Linq.Expressions.MemberAssignment.Expression\n  commentId: P:System.Linq.Expressions.MemberAssignment.Expression\n  id: Expression\n  parent: System.Linq.Expressions.MemberAssignment\n  langs:\n  - csharp\n  - vb\n  name: Expression\n  fullName: System.Linq.Expressions.MemberAssignment.Expression\n  type: Property\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Expression\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 677\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Gets the expression to assign to the field or property.</p>\\n\"\n  syntax:\n    content: public Expression Expression { get; }\n    content.vb: Public ReadOnly Property Expression As Expression\n    parameters: []\n    return:\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the value to assign to the field or property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MemberAssignment.Expression\n- uid: System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)\n  id: Update(System.Linq.Expressions.Expression)\n  parent: System.Linq.Expressions.MemberAssignment\n  langs:\n  - csharp\n  - vb\n  name: Update(Expression)\n  fullName: System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Update\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 678\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</p>\\n\"\n  syntax:\n    content: public MemberAssignment Update(Expression expression)\n    content.vb: Public Function Update(expression As Expression) As MemberAssignment\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The <xref href=\\\"System.Linq.Expressions.MemberAssignment.Expression\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the result.</p>\\n\"\n    return:\n      type: System.Linq.Expressions.MemberAssignment\n      description: \"\\n<p>This expression if no children are changed or an expression with the updated children.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MemberAssignment.Update(Expression)\nreferences:\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Linq.Expressions.MemberBinding\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberBinding\n  fullName: System.Linq.Expressions.MemberBinding\n  commentId: T:System.Linq.Expressions.MemberBinding\n  nameWithType: MemberBinding\n- uid: System.Linq.Expressions.MemberBinding.BindingType\n  parent: System.Linq.Expressions.MemberBinding\n  isExternal: false\n  name: BindingType\n  fullName: System.Linq.Expressions.MemberBinding.BindingType\n  commentId: P:System.Linq.Expressions.MemberBinding.BindingType\n  nameWithType: MemberBinding.BindingType\n- uid: System.Linq.Expressions.MemberBinding.Member\n  parent: System.Linq.Expressions.MemberBinding\n  isExternal: false\n  name: Member\n  fullName: System.Linq.Expressions.MemberBinding.Member\n  commentId: P:System.Linq.Expressions.MemberBinding.Member\n  nameWithType: MemberBinding.Member\n- uid: System.Linq.Expressions.MemberBinding.ToString\n  parent: System.Linq.Expressions.MemberBinding\n  isExternal: false\n  name: ToString()\n  fullName: System.Linq.Expressions.MemberBinding.ToString()\n  spec.csharp:\n  - uid: System.Linq.Expressions.MemberBinding.ToString\n    name: ToString\n    fullName: System.Linq.Expressions.MemberBinding.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Expressions.MemberBinding.ToString\n    name: ToString\n    fullName: System.Linq.Expressions.MemberBinding.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Expressions.MemberBinding.ToString\n  nameWithType: MemberBinding.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  fullName: System.Linq.Expressions.Expression\n  commentId: T:System.Linq.Expressions.Expression\n  nameWithType: Expression\n- uid: System.Linq.Expressions.MemberAssignment\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: MemberAssignment\n  fullName: System.Linq.Expressions.MemberAssignment\n  commentId: T:System.Linq.Expressions.MemberAssignment\n  nameWithType: MemberAssignment\n"}