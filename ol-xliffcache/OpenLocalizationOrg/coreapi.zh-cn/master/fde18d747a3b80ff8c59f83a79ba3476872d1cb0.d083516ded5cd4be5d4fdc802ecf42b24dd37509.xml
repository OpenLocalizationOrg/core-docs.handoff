{"nodes":[{"pos":[1958,1963],"content":"ECDsa","needQuote":true,"nodes":[{"content":"ECDsa","pos":[0,5]}]},{"pos":[4390,4397],"content":"ECDsa()","needQuote":true,"nodes":[{"content":"ECDsa()","pos":[0,7]}]},{"pos":[5429,5437],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[6856,6871],"content":"Create(ECCurve)","needQuote":true,"nodes":[{"content":"Create(ECCurve)","pos":[0,15]}]},{"pos":[8132,8152],"content":"Create(ECParameters)","needQuote":true,"nodes":[{"content":"Create(ECParameters)","pos":[0,20]}]},{"pos":[9426,9459],"content":"ExportExplicitParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportExplicitParameters(Boolean)","pos":[0,33]}]},{"pos":[10802,10827],"content":"ExportParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[12181,12201],"content":"GenerateKey(ECCurve)","needQuote":true,"nodes":[{"content":"GenerateKey(ECCurve)","pos":[0,20]}]},{"pos":[13566,13615],"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The data to be hashed.","pos":[14737,14764],"source":"\\n<p>The data to be hashed."},{"content":"&lt;/p&gt;\\n","pos":[14765,14771],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte in &lt;em&gt;data&lt;/em&gt; to be hashed.","pos":[14835,14898],"source":"\\n<p>The index of the first byte in <em>data</em> to be hashed."},{"content":"&lt;/p&gt;\\n","pos":[14900,14906],"source":"  </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to hash.","pos":[14969,15002],"source":"\\n<p>The number of bytes to hash."},{"content":"&lt;/p&gt;\\n","pos":[15003,15009],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The algorithm to use to hash the data.","pos":[15114,15157],"source":"\\n<p>The algorithm to use to hash the data."},{"content":"&lt;/p&gt;\\n","pos":[15158,15164],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hashed data.","pos":[15224,15245],"source":"\\n<p>The hashed data."},{"content":"&lt;/p&gt;\\n","pos":[15246,15252],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A derived class must override this method.","pos":[15375,15422],"source":"\\n<p>A derived class must override this method."},{"content":"&lt;/p&gt;\\n","pos":[15423,15429],"source":" </p>\\n"},{"pos":[16283,16318],"content":"HashData(Stream, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Stream, HashAlgorithmName)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The binary stream to hash.","pos":[17347,17378],"source":"\\n<p>The binary stream to hash."},{"content":"&lt;/p&gt;\\n","pos":[17379,17385],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The algorithm to use to hash the data.&lt;/p&gt;\\n","pos":[17490,17539],"source":"\\n<p>The algorithm to use to hash the data.</p>\\n"},{"content":"\\n&lt;p&gt;The hashed data.&lt;/p&gt;\\n","pos":[17599,17626],"source":"\\n<p>The hashed data.</p>\\n"},{"content":"\\n&lt;p&gt;A derived class must override this method.","pos":[17749,17796],"source":"\\n<p>A derived class must override this method."},{"content":"&lt;/p&gt;\\n","pos":[17797,17803],"source":" </p>\\n"},{"pos":[18315,18345],"content":"ImportParameters(ECParameters)","needQuote":true,"nodes":[{"content":"ImportParameters(ECParameters)","pos":[0,30]}]},{"pos":[19775,19824],"content":"SignData(Byte[], Int32, Int32, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"SignData(Byte[], Int32, Int32, HashAlgorithmName)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The input data for which to compute the hash.","pos":[20931,20981],"source":"\\n<p>The input data for which to compute the hash."},{"content":"&lt;/p&gt;\\n","pos":[20982,20988],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The offset into the array at which to begin using data.","pos":[21052,21112],"source":"\\n<p>The offset into the array at which to begin using data."},{"content":"&lt;/p&gt;\\n","pos":[21113,21119],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes in the array to use as data.","pos":[21182,21235],"source":"\\n<p>The number of bytes in the array to use as data."},{"content":"&lt;/p&gt;\\n","pos":[21236,21242],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm to use to create the hash value.","pos":[21347,21403],"source":"\\n<p>The hash algorithm to use to create the hash value."},{"content":"&lt;/p&gt;\\n","pos":[21404,21410],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The ECDSA signature for the specified data.","pos":[21470,21518],"source":"\\n<p>The ECDSA signature for the specified data."},{"content":"&lt;/p&gt;\\n","pos":[21519,21525],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[21644,21690],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[21691,21697],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is less than zero.","pos":[22168,22209],"source":"\\n<p>\\n<em>offset</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[22210,22267],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; – 1 results in an index that is beyond the upper bound of &lt;em&gt;data&lt;/em&gt;.","pos":[22268,22397],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> + <em>count</em> – 1 results in an index that is beyond the upper bound of <em>data</em>."},{"content":"&lt;/p&gt;\\n","pos":[22399,22405],"source":"  </p>\\n"},{"pos":[23242,23277],"content":"SignData(Byte[], HashAlgorithmName)","needQuote":true,"nodes":[{"content":"SignData(Byte[], HashAlgorithmName)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The input data for which to compute the hash.","pos":[24283,24333],"source":"\\n<p>The input data for which to compute the hash."},{"content":"&lt;/p&gt;\\n","pos":[24334,24340],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm to use to create the hash value.","pos":[24445,24501],"source":"\\n<p>The hash algorithm to use to create the hash value."},{"content":"&lt;/p&gt;\\n","pos":[24502,24508],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The ECDSA signature for the specified data.","pos":[24568,24616],"source":"\\n<p>The ECDSA signature for the specified data."},{"content":"&lt;/p&gt;\\n","pos":[24617,24623],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[24742,24788],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24789,24795],"source":" </p>\\n"},{"pos":[25925,25960],"content":"SignData(Stream, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"SignData(Stream, HashAlgorithmName)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The input stream for which to compute the hash.","pos":[26967,27019],"source":"\\n<p>The input stream for which to compute the hash."},{"content":"&lt;/p&gt;\\n","pos":[27020,27026],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm to use to create the hash value.","pos":[27131,27187],"source":"\\n<p>The hash algorithm to use to create the hash value."},{"content":"&lt;/p&gt;\\n","pos":[27188,27194],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The ECDSA signature for the specified data.","pos":[27254,27302],"source":"\\n<p>The ECDSA signature for the specified data."},{"content":"&lt;/p&gt;\\n","pos":[27303,27309],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[27428,27474],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[27475,27481],"source":" </p>\\n"},{"pos":[28231,28247],"content":"SignHash(Byte[])","needQuote":true,"nodes":[{"content":"SignHash(Byte[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The hash value of the data that is being signed.&lt;/p&gt;\\n","pos":[29075,29134],"source":"\\n<p>The hash value of the data that is being signed.</p>\\n"},{"content":"\\n&lt;p&gt;A digital signature that consists of the given hash value encrypted with the private key.&lt;/p&gt;\\n","pos":[29194,29294],"source":"\\n<p>A digital signature that consists of the given hash value encrypted with the private key.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;hash&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29413,29477],"source":"\\n<p>The <em>hash</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[30189,30234],"content":"VerifyData(Byte[], Byte[], HashAlgorithmName)","needQuote":true,"nodes":[{"content":"VerifyData(Byte[], Byte[], HashAlgorithmName)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The signed data.","pos":[31332,31353],"source":"\\n<p>The signed data."},{"content":"&lt;/p&gt;\\n","pos":[31354,31360],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The signature data to be verified.","pos":[31428,31467],"source":"\\n<p>The signature data to be verified."},{"content":"&lt;/p&gt;\\n","pos":[31468,31474],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm used to create the hash value of the data.","pos":[31579,31645],"source":"\\n<p>The hash algorithm used to create the hash value of the data."},{"content":"&lt;/p&gt;\\n","pos":[31646,31652],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signature is valid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[31713,31803],"source":"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[31804,31810],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[31929,31975],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;signature&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[31976,32050],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>.</p>\\n"},{"pos":[33316,33375],"content":"VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)","needQuote":true,"nodes":[{"content":"VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;The signed data.","pos":[34600,34621],"source":"\\n<p>The signed data."},{"content":"&lt;/p&gt;\\n","pos":[34622,34628],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting index at which to compute the hash.","pos":[34692,34745],"source":"\\n<p>The starting index at which to compute the hash."},{"content":"&lt;/p&gt;\\n","pos":[34746,34752],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to hash.","pos":[34815,34848],"source":"\\n<p>The number of bytes to hash."},{"content":"&lt;/p&gt;\\n","pos":[34849,34855],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The signature data to be verified.","pos":[34923,34962],"source":"\\n<p>The signature data to be verified."},{"content":"&lt;/p&gt;\\n","pos":[34963,34969],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm used to create the hash value of the data.","pos":[35074,35140],"source":"\\n<p>The hash algorithm used to create the hash value of the data."},{"content":"&lt;/p&gt;\\n","pos":[35141,35147],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signature is valid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[35208,35298],"source":"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[35299,35305],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[35424,35470],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;signature&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35471,35545],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is less than zero.","pos":[36016,36057],"source":"\\n<p>\\n<em>offset</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; – 1 results in an index that is beyond the upper bound of &lt;em&gt;data&lt;/em&gt;.","pos":[36058,36244],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> + <em>count</em> – 1 results in an index that is beyond the upper bound of <em>data</em>."},{"content":"&lt;/p&gt;\\n","pos":[36246,36252],"source":"  </p>\\n"},{"pos":[37193,37238],"content":"VerifyData(Stream, Byte[], HashAlgorithmName)","needQuote":true,"nodes":[{"content":"VerifyData(Stream, Byte[], HashAlgorithmName)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The signed data.","pos":[38344,38365],"source":"\\n<p>The signed data."},{"content":"&lt;/p&gt;\\n","pos":[38366,38372],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The signature data to be verified.","pos":[38440,38479],"source":"\\n<p>The signature data to be verified."},{"content":"&lt;/p&gt;\\n","pos":[38480,38486],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm used to create the hash value of the data.","pos":[38591,38657],"source":"\\n<p>The hash algorithm used to create the hash value of the data."},{"content":"&lt;/p&gt;\\n","pos":[38658,38664],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signature is valid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[38725,38815],"source":"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[38816,38822],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[38941,38987],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;signature&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38988,39062],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>.</p>\\n"},{"pos":[40112,40138],"content":"VerifyHash(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"VerifyHash(Byte[], Byte[])","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The hash value of a block of data.&lt;/p&gt;\\n","pos":[41029,41074],"source":"\\n<p>The hash value of a block of data.</p>\\n"},{"content":"\\n&lt;p&gt;The digital signature to be verified.&lt;/p&gt;\\n","pos":[41142,41190],"source":"\\n<p>The digital signature to be verified.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the hash value equals the decrypted signature; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[41251,41370],"source":"\\n<p>\\n<strong>true</strong> if the hash value equals the decrypted signature; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[41766,41794],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[41991,41997],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42199,42218],"content":"AsymmetricAlgorithm","needQuote":true,"nodes":[{"content":"AsymmetricAlgorithm","pos":[0,19]}]},{"pos":[42451,42462],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[42711,42723],"content":"KeySizeValue","needQuote":true,"nodes":[{"content":"KeySizeValue","pos":[0,12]}]},{"pos":[43085,43103],"content":"LegalKeySizesValue","needQuote":true,"nodes":[{"content":"LegalKeySizesValue","pos":[0,18]}]},{"pos":[43472,43481],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[43644,43651],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[43754,43755],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43782,43783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43887,43894],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[43997,43998],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44025,44026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44309,44316],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[44475,44480],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[44581,44582],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44609,44610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44712,44717],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[44818,44819],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44846,44847],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45144,45160],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[45353,45360],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[45463,45464],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45515,45522],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[45583,45584],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45704,45711],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[45814,45815],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45866,45873],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[45934,45935],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46257,46271],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[46460,46466],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[46568,46569],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46619,46625],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[46685,46686],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46804,46810],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[46912,46913],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46963,46969],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[47029,47030],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47355,47376],"content":"FromXmlString(String)","needQuote":true,"nodes":[{"content":"FromXmlString(String)","pos":[0,21]}]},{"pos":[47579,47592],"content":"FromXmlString","needQuote":true,"nodes":[{"content":"FromXmlString","pos":[0,13]}]},{"pos":[47701,47702],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47752,47758],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[47818,47819],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47944,47957],"content":"FromXmlString","needQuote":true,"nodes":[{"content":"FromXmlString","pos":[0,13]}]},{"pos":[48066,48067],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48117,48123],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[48183,48184],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48522,48542],"content":"ToXmlString(Boolean)","needQuote":true,"nodes":[{"content":"ToXmlString(Boolean)","pos":[0,20]}]},{"pos":[48743,48754],"content":"ToXmlString","needQuote":true,"nodes":[{"content":"ToXmlString","pos":[0,11]}]},{"pos":[48861,48862],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48913,48920],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[48981,48982],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49106,49117],"content":"ToXmlString","needQuote":true,"nodes":[{"content":"ToXmlString","pos":[0,11]}]},{"pos":[49224,49225],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49276,49283],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[49344,49345],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49661,49668],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[50010,50023],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[50388,50406],"content":"SignatureAlgorithm","needQuote":true,"nodes":[{"content":"SignatureAlgorithm","pos":[0,18]}]},{"pos":[50788,50808],"content":"KeyExchangeAlgorithm","needQuote":true,"nodes":[{"content":"KeyExchangeAlgorithm","pos":[0,20]}]},{"pos":[51114,51124],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[51219,51227],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[51296,51297],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51324,51325],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51395,51403],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[51472,51473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51500,51501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51684,51698],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[51817,51823],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51890,51891],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51941,51947],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52007,52008],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52091,52097],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[52164,52165],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52215,52221],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52281,52282],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52496,52518],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[52666,52672],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[52739,52740],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52790,52796],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[52857,52858]},{"pos":[52913,52919],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52979,52980],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53077,53083],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[53150,53151],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53201,53207],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[53268,53269]},{"pos":[53324,53330],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53390,53391],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53636,53667],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[53833,53848],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[53924,53925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53975,53981],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[54042,54043]},{"pos":[54098,54104],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54164,54165],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54271,54286],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[54362,54363],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54413,54419],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[54480,54481]},{"pos":[54536,54542],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54602,54603],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54833,54846],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[54947,54958],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[55030,55031],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55058,55059],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55132,55143],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[55215,55216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55243,55244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55419,55428],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[55521,55528],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[55596,55597],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55624,55625],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55694,55701],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[55769,55770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55797,55798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55973,55990],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[56099,56114],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[56190,56191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56218,56219],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56296,56311],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[56387,56388],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56415,56416],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56561,56567],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[56741,56746],"content":"ECDsa","needQuote":true,"nodes":[{"content":"ECDsa","pos":[0,5]}]},{"pos":[56977,56984],"content":"ECCurve","needQuote":true,"nodes":[{"content":"ECCurve","pos":[0,7]}]},{"pos":[57226,57238],"content":"ECParameters","needQuote":true,"nodes":[{"content":"ECParameters","pos":[0,12]}]},{"pos":[57446,57453],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[57564,57570],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[57690,57694],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[57753,57755]},{"pos":[57818,57822],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[57880,57882],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[58014,58019],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[58216,58233],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[58461,58467],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[58597,58606],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[58746,58769],"content":"NotImplementedException","needQuote":true,"nodes":[{"content":"NotImplementedException","pos":[0,23]}]},{"pos":[58963,58984],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[59185,59202],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[59384,59411],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.Cryptography.ECDsa\n  commentId: T:System.Security.Cryptography.ECDsa\n  id: ECDsa\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.ECDsa.#ctor\n  - System.Security.Cryptography.ECDsa.Create\n  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  - System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)\n  - System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)\n  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  - vb\n  name: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDsa\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 77\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).</p>\\n\"\n  syntax:\n    content: 'public abstract class ECDsa : AsymmetricAlgorithm, IDisposable'\n    content.vb: >-\n      Public MustInherit Class ECDsa\n          Inherits AsymmetricAlgorithm\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: ECDsa\n- uid: System.Security.Cryptography.ECDsa.#ctor\n  commentId: M:System.Security.Cryptography.ECDsa.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: ECDsa()\n  fullName: System.Security.Cryptography.ECDsa.ECDsa()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 79\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.ECDsa\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected ECDsa()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ECDsa.ECDsa()\n- uid: System.Security.Cryptography.ECDsa.Create\n  commentId: M:System.Security.Cryptography.ECDsa.Create\n  id: Create\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: Create()\n  fullName: System.Security.Cryptography.ECDsa.Create()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 80\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</p>\\n\"\n  syntax:\n    content: public static ECDsa Create()\n    content.vb: Public Shared Function Create As ECDsa\n    return:\n      type: System.Security.Cryptography.ECDsa\n      description: \"\\n<p>A new instance of the default implementation (<xref href=\\\"System.Security.Cryptography.ECDsaCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) of this class.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ECDsa.Create()\n- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  commentId: M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  id: Create(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: Create(ECCurve)\n  fullName: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 81\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static ECDsa Create(ECCurve curve)\n    content.vb: Public Shared Function Create(curve As ECCurve) As ECDsa\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n    return:\n      type: System.Security.Cryptography.ECDsa\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ECDsa.Create(ECCurve)\n- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  commentId: M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  id: Create(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: Create(ECParameters)\n  fullName: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 82\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static ECDsa Create(ECParameters parameters)\n    content.vb: Public Shared Function Create(parameters As ECParameters) As ECDsa\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.ECParameters\n    return:\n      type: System.Security.Cryptography.ECDsa\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: ECDsa.Create(ECParameters)\n- uid: System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)\n  id: ExportExplicitParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: ExportExplicitParameters(Boolean)\n  fullName: System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportExplicitParameters\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 83\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters)\n    content.vb: Public Overridable Function ExportExplicitParameters(includePrivateParameters As Boolean) As ECParameters\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n    return:\n      type: System.Security.Cryptography.ECParameters\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ECDsa.ExportExplicitParameters(Boolean)\n- uid: System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportParameters\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 84\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual ECParameters ExportParameters(bool includePrivateParameters)\n    content.vb: Public Overridable Function ExportParameters(includePrivateParameters As Boolean) As ECParameters\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n    return:\n      type: System.Security.Cryptography.ECParameters\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ECDsa.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)\n  commentId: M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)\n  id: GenerateKey(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: GenerateKey(ECCurve)\n  fullName: System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenerateKey\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 85\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual void GenerateKey(ECCurve curve)\n    content.vb: Public Overridable Sub GenerateKey(curve As ECCurve)\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ECDsa.GenerateKey(ECCurve)\n- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 86\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm. </p>\\n\"\n  syntax:\n    content: protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected MustOverride Function HashData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The data to be hashed. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte in <em>data</em> to be hashed.  </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to hash. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The algorithm to use to hash the data. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The hashed data. </p>\\n\"\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: \"\\n<p>A derived class must override this method. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  fullName.vb: System.Security.Cryptography.ECDsa.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)\n  nameWithType: ECDsa.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType.vb: ECDsa.HashData(Byte(), Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: HashData(Stream, HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 87\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.</p>\\n\"\n  syntax:\n    content: protected abstract byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected MustOverride Function HashData(data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: \"\\n<p>The binary stream to hash. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The algorithm to use to hash the data.</p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The hashed data.</p>\\n\"\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: \"\\n<p>A derived class must override this method. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: ECDsa.HashData(Stream, HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)\n  commentId: M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)\n  id: ImportParameters(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: ImportParameters(ECParameters)\n  fullName: System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ImportParameters\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 88\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public virtual void ImportParameters(ECParameters parameters)\n    content.vb: Public Overridable Sub ImportParameters(parameters As ECParameters)\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.ECParameters\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ECDsa.ImportParameters(ECParameters)\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 89\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value. </p>\\n\"\n  syntax:\n    content: public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)\n    content.vb: Public Overridable Function SignData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The input data for which to compute the hash. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset into the array at which to begin using data. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes in the array to use as data. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm to use to create the hash value. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The ECDSA signature for the specified data. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em>.<xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is less than zero. </p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero. </p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> + <em>count</em> – 1 results in an index that is beyond the upper bound of <em>data</em>.  </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Cryptography.ECDsa.SignData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  name.vb: SignData(Byte(), Int32, Int32, HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType.vb: ECDsa.SignData(Byte(), Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: SignData(Byte[], HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(System.Byte[], System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 90\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value. </p>\\n\"\n  syntax:\n    content: public virtual byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm)\n    content.vb: Public Overridable Function SignData(data As Byte(), hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The input data for which to compute the hash. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm to use to create the hash value. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The ECDSA signature for the specified data. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em>.<xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Cryptography.ECDsa.SignData(System.Byte(), System.Security.Cryptography.HashAlgorithmName)\n  name.vb: SignData(Byte(), HashAlgorithmName)\n  nameWithType: ECDsa.SignData(Byte[], HashAlgorithmName)\n  nameWithType.vb: ECDsa.SignData(Byte(), HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: SignData(Stream, HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 91\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.</p>\\n\"\n  syntax:\n    content: public virtual byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm)\n    content.vb: Public Overridable Function SignData(data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: \"\\n<p>The input stream for which to compute the hash. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm to use to create the hash value. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The ECDSA signature for the specified data. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em>.<xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ECDsa.SignData(Stream, HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  id: SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: SignHash(Byte[])\n  fullName: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignHash\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 92\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Generates a digital signature for the specified hash value. </p>\\n\"\n  syntax:\n    content: public abstract byte[] SignHash(byte[] hash)\n    content.vb: Public MustOverride Function SignHash(hash As Byte()) As Byte()\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: \"\\n<p>The hash value of the data that is being signed.</p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A digital signature that consists of the given hash value encrypted with the private key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>hash</em> parameter is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Security.Cryptography.ECDsa.SignHash(System.Byte())\n  name.vb: SignHash(Byte())\n  nameWithType: ECDsa.SignHash(Byte[])\n  nameWithType.vb: ECDsa.SignHash(Byte())\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 93\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature. </p>\\n\"\n  syntax:\n    content: public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm)\n    content.vb: Public Function VerifyData(data As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The signed data. </p>\\n\"\n    - id: signature\n      type: System.Byte[]\n      description: \"\\n<p>The signature data to be verified. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm used to create the hash value of the data. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em>.<xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.ECDsa.VerifyData(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName)\n  name.vb: VerifyData(Byte(), Byte(), HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)\n  nameWithType.vb: ECDsa.VerifyData(Byte(), Byte(), HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 94\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature. </p>\\n\"\n  syntax:\n    content: public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm)\n    content.vb: Public Overridable Function VerifyData(data As Byte(), offset As Integer, count As Integer, signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The signed data. </p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index at which to compute the hash. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to hash. </p>\\n\"\n    - id: signature\n      type: System.Byte[]\n      description: \"\\n<p>The signature data to be verified. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm used to create the hash value of the data. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em>.<xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is less than zero. </p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>offset</em> + <em>count</em> – 1 results in an index that is beyond the upper bound of <em>data</em>.  </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Cryptography.ECDsa.VerifyData(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Security.Cryptography.HashAlgorithmName)\n  name.vb: VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)\n  nameWithType.vb: ECDsa.VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: VerifyData(Stream, Byte[], HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream, System.Byte[], System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 95\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature. </p>\\n\"\n  syntax:\n    content: public bool VerifyData(Stream data, byte[] signature, HashAlgorithmName hashAlgorithm)\n    content.vb: Public Function VerifyData(data As Stream, signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean\n    parameters:\n    - id: data\n      type: System.IO.Stream\n      description: \"\\n<p>The signed data. </p>\\n\"\n    - id: signature\n      type: System.Byte[]\n      description: \"\\n<p>The signature data to be verified. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm used to create the hash value of the data. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>hashAlgorithm</em>.<xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream, System.Byte(), System.Security.Cryptography.HashAlgorithmName)\n  name.vb: VerifyData(Stream, Byte(), HashAlgorithmName)\n  nameWithType: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)\n  nameWithType.vb: ECDsa.VerifyData(Stream, Byte(), HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])\n  id: VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsa\n  langs:\n  - csharp\n  - vb\n  name: VerifyHash(Byte[], Byte[])\n  fullName: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[], System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyHash\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 96\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies a digital signature against the specified hash value.</p>\\n\"\n  syntax:\n    content: public abstract bool VerifyHash(byte[] hash, byte[] signature)\n    content.vb: Public MustOverride Function VerifyHash(hash As Byte(), signature As Byte()) As Boolean\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: \"\\n<p>The hash value of a block of data.</p>\\n\"\n    - id: signature\n      type: System.Byte[]\n      description: \"\\n<p>The digital signature to be verified.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the hash value equals the decrypted signature; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte(), System.Byte())\n  name.vb: VerifyHash(Byte(), Byte())\n  nameWithType: ECDsa.VerifyHash(Byte[], Byte[])\n  nameWithType.vb: ECDsa.VerifyHash(Byte(), Byte())\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n  commentId: T:System.Security.Cryptography.AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: KeySizeValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizesValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Dispose()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  nameWithType: AsymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Clear()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  nameWithType: AsymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Create(String)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)\n  nameWithType: AsymmetricAlgorithm.Create(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: FromXmlString(String)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n    name: FromXmlString\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n    name: FromXmlString\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)\n  nameWithType: AsymmetricAlgorithm.FromXmlString(String)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n    name: ToXmlString\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n    name: ToXmlString\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)\n  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: KeySize\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  nameWithType: AsymmetricAlgorithm.KeySize\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  nameWithType: AsymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: SignatureAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\n  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\n  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.ECDsa\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECDsa\n  fullName: System.Security.Cryptography.ECDsa\n  commentId: T:System.Security.Cryptography.ECDsa\n  nameWithType: ECDsa\n- uid: System.Security.Cryptography.ECCurve\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECCurve\n  fullName: System.Security.Cryptography.ECCurve\n  commentId: T:System.Security.Cryptography.ECCurve\n  nameWithType: ECCurve\n- uid: System.Security.Cryptography.ECParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECParameters\n  fullName: System.Security.Cryptography.ECParameters\n  commentId: T:System.Security.Cryptography.ECParameters\n  nameWithType: ECParameters\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n  commentId: T:System.Security.Cryptography.HashAlgorithmName\n  nameWithType: HashAlgorithmName\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.NotImplementedException\n  isExternal: false\n  name: NotImplementedException\n  fullName: System.NotImplementedException\n  nameWithType: NotImplementedException\n  commentId: T:System.NotImplementedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}