{"nodes":[{"pos":[2872,2887],"content":"X509Certificate","needQuote":true,"nodes":[{"content":"X509Certificate","pos":[0,15]}]},{"pos":[4355,4372],"content":"X509Certificate()","needQuote":true,"nodes":[{"content":"X509Certificate()","pos":[0,17]}]},{"pos":[5659,5682],"content":"X509Certificate(Byte[])","needQuote":true,"nodes":[{"content":"X509Certificate(Byte[])","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A byte array containing data from an X.509 certificate.&lt;/p&gt;\\n","pos":[6722,6788],"source":"\\n<p>A byte array containing data from an X.509 certificate.</p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[6953,6995],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[6996,7188],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;rawData&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The length of the &lt;em&gt;rawData&lt;/em&gt; parameter is 0.&lt;/p&gt;\\n","pos":[7285,7424],"source":"\\n<p>The <em>rawData</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The length of the <em>rawData</em> parameter is 0.</p>\\n"},{"pos":[8244,8275],"content":"X509Certificate(Byte[], String)","needQuote":true,"nodes":[{"content":"X509Certificate(Byte[], String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;A byte array containing data from an X.509 certificate.&lt;/p&gt;\\n","pos":[9341,9407],"source":"\\n<p>A byte array containing data from an X.509 certificate.</p>\\n"},{"content":"\\n&lt;p&gt;The password required to access the X.509 certificate data.&lt;/p&gt;\\n","pos":[9474,9544],"source":"\\n<p>The password required to access the X.509 certificate data.</p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[9709,9751],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[9752,9944],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;rawData&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The length of the &lt;em&gt;rawData&lt;/em&gt; parameter is 0.&lt;/p&gt;\\n","pos":[10041,10180],"source":"\\n<p>The <em>rawData</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The length of the <em>rawData</em> parameter is 0.</p>\\n"},{"pos":[11358,11410],"content":"X509Certificate(Byte[], String, X509KeyStorageFlags)","needQuote":true,"nodes":[{"content":"X509Certificate(Byte[], String, X509KeyStorageFlags)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;A byte array containing data from an X.509 certificate.","pos":[12642,12702],"source":"\\n<p>A byte array containing data from an X.509 certificate."},{"content":"&lt;/p&gt;\\n","pos":[12703,12709],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password required to access the X.509 certificate data.","pos":[12776,12840],"source":"\\n<p>The password required to access the X.509 certificate data."},{"content":"&lt;/p&gt;\\n","pos":[12841,12847],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that control where and how to import the certificate.","pos":[12973,13079],"source":"\\n<p>A bitwise combination of the enumeration values that control where and how to import the certificate."},{"content":"&lt;/p&gt;\\n","pos":[13080,13086],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[13251,13293],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[13294,13486],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;rawData&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The length of the &lt;em&gt;rawData&lt;/em&gt; parameter is 0.&lt;/p&gt;\\n","pos":[13583,13722],"source":"\\n<p>The <em>rawData</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The length of the <em>rawData</em> parameter is 0.</p>\\n"},{"pos":[14669,14692],"content":"X509Certificate(IntPtr)","needQuote":true,"nodes":[{"content":"X509Certificate(IntPtr)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A handle to an unmanaged &lt;strong&gt;PCCERT_CONTEXT&lt;/strong&gt; structure.&lt;/p&gt;\\n","pos":[15813,15891],"source":"\\n<p>A handle to an unmanaged <strong>PCCERT_CONTEXT</strong> structure.</p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[16056,16098],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[16099,16291],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"content":"\\n&lt;p&gt;The handle parameter does not represent a valid &lt;strong&gt;PCCERT_CONTEXT&lt;/strong&gt; structure.&lt;/p&gt;\\n","pos":[16388,16489],"source":"\\n<p>The handle parameter does not represent a valid <strong>PCCERT_CONTEXT</strong> structure.</p>\\n"},{"pos":[17338,17361],"content":"X509Certificate(String)","needQuote":true,"nodes":[{"content":"X509Certificate(String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The name of a PKCS7 signed file.&lt;/p&gt;\\n","pos":[18384,18427],"source":"\\n<p>The name of a PKCS7 signed file.</p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[18592,18634],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[18635,18827],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;fileName&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18924,18992],"source":"\\n<p>The <em>fileName</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[19727,19758],"content":"X509Certificate(String, String)","needQuote":true,"nodes":[{"content":"X509Certificate(String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The name of a PKCS7 signed file.","pos":[20873,20910],"source":"\\n<p>The name of a PKCS7 signed file."},{"content":"&lt;/p&gt;\\n","pos":[20911,20917],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password required to access the X.509 certificate data.","pos":[20984,21048],"source":"\\n<p>The password required to access the X.509 certificate data."},{"content":"&lt;/p&gt;\\n","pos":[21049,21055],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[21220,21262],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[21263,21455],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;fileName&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21552,21620],"source":"\\n<p>The <em>fileName</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[22561,22613],"content":"X509Certificate(String, String, X509KeyStorageFlags)","needQuote":true,"nodes":[{"content":"X509Certificate(String, String, X509KeyStorageFlags)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;The name of a PKCS7 signed file.","pos":[23894,23931],"source":"\\n<p>The name of a PKCS7 signed file."},{"content":"&lt;/p&gt;\\n","pos":[23932,23938],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password required to access the X.509 certificate data.","pos":[24005,24069],"source":"\\n<p>The password required to access the X.509 certificate data."},{"content":"&lt;/p&gt;\\n","pos":[24070,24076],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that control where and how to import the certificate.","pos":[24202,24308],"source":"\\n<p>A bitwise combination of the enumeration values that control where and how to import the certificate."},{"content":"&lt;/p&gt;\\n","pos":[24309,24315],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An error with the certificate occurs.","pos":[24480,24522],"source":"\\n<p>An error with the certificate occurs."},{"content":"For example:&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;The certificate file does not exist.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate is invalid.&lt;/p&gt;\\n&lt;/li&gt;&lt;li&gt;\\n&lt;p&gt;The certificate's password is incorrect.&lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[24523,24715],"source":" For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;fileName&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24812,24880],"source":"\\n<p>The <em>fileName</em> parameter is <strong>null</strong>.</p>\\n"},{"pos":[25558,25564],"content":"Handle","needQuote":true,"nodes":[{"content":"Handle","pos":[0,6]}]},{"pos":[27386,27392],"content":"Issuer","needQuote":true,"nodes":[{"content":"Issuer","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The name of the certificate authority that issued the X.509v3 certificate.&lt;/p&gt;\\n","pos":[28260,28345],"source":"\\n<p>The name of the certificate authority that issued the X.509v3 certificate.</p>\\n"},{"content":"\\n&lt;p&gt;The certificate handle is invalid.&lt;/p&gt;\\n","pos":[28510,28555],"source":"\\n<p>The certificate handle is invalid.</p>\\n"},{"pos":[28958,28965],"content":"Subject","needQuote":true,"nodes":[{"content":"Subject","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The subject distinguished name from the certificate.&lt;/p&gt;\\n","pos":[29815,29878],"source":"\\n<p>The subject distinguished name from the certificate.</p>\\n"},{"content":"\\n&lt;p&gt;The certificate handle is invalid.&lt;/p&gt;\\n","pos":[30043,30088],"source":"\\n<p>The certificate handle is invalid.</p>\\n"},{"pos":[30492,30501],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[31832,31848],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.&lt;/p&gt;\\n","pos":[32912,33055],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n"},{"pos":[33523,33537],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[35691,35714],"content":"Equals(X509Certificate)","needQuote":true,"nodes":[{"content":"Equals(X509Certificate)","pos":[0,23]}]},{"pos":[37948,37971],"content":"Export(X509ContentType)","needQuote":true,"nodes":[{"content":"Export(X509ContentType)","pos":[0,23]}]},{"pos":[41206,41237],"content":"Export(X509ContentType, String)","needQuote":true,"nodes":[{"content":"Export(X509ContentType, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The password required to access the X.509 certificate data.&lt;/p&gt;\\n","pos":[42884,42954],"source":"\\n<p>The password required to access the X.509 certificate data.</p>\\n"},{"pos":[44485,44498],"content":"GetCertHash()","needQuote":true,"nodes":[{"content":"GetCertHash()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash value for the X.509 certificate.&lt;/p&gt;\\n","pos":[45364,45416],"source":"\\n<p>The hash value for the X.509 certificate.</p>\\n"},{"pos":[45839,45850],"content":"GetFormat()","needQuote":true,"nodes":[{"content":"GetFormat()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The format of this X.509 certificate.&lt;/p&gt;\\n","pos":[46695,46743],"source":"\\n<p>The format of this X.509 certificate.</p>\\n"},{"pos":[47170,47183],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code for the X.509 certificate as an integer.&lt;/p&gt;\\n","pos":[48037,48102],"source":"\\n<p>The hash code for the X.509 certificate as an integer.</p>\\n"},{"pos":[48582,48599],"content":"GetKeyAlgorithm()","needQuote":true,"nodes":[{"content":"GetKeyAlgorithm()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The key algorithm information for this X.509 certificate as a string.&lt;/p&gt;\\n","pos":[49488,49568],"source":"\\n<p>The key algorithm information for this X.509 certificate as a string.</p>\\n"},{"content":"\\n&lt;p&gt;The certificate context is invalid.&lt;/p&gt;\\n","pos":[49733,49779],"source":"\\n<p>The certificate context is invalid.</p>\\n"},{"pos":[50254,50281],"content":"GetKeyAlgorithmParameters()","needQuote":true,"nodes":[{"content":"GetKeyAlgorithmParameters()","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The key algorithm parameters for the X.509 certificate as an array of bytes.&lt;/p&gt;\\n","pos":[51217,51304],"source":"\\n<p>The key algorithm parameters for the X.509 certificate as an array of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The certificate context is invalid.&lt;/p&gt;\\n","pos":[51469,51515],"source":"\\n<p>The certificate context is invalid.</p>\\n"},{"pos":[52018,52051],"content":"GetKeyAlgorithmParametersString()","needQuote":true,"nodes":[{"content":"GetKeyAlgorithmParametersString()","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The key algorithm parameters for the X.509 certificate as a hexadecimal string.&lt;/p&gt;\\n","pos":[53014,53104],"source":"\\n<p>The key algorithm parameters for the X.509 certificate as a hexadecimal string.</p>\\n"},{"content":"\\n&lt;p&gt;The certificate context is invalid.&lt;/p&gt;\\n","pos":[53269,53315],"source":"\\n<p>The certificate context is invalid.</p>\\n"},{"pos":[53767,53781],"content":"GetPublicKey()","needQuote":true,"nodes":[{"content":"GetPublicKey()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The public key for the X.509 certificate as an array of bytes.&lt;/p&gt;\\n","pos":[54651,54724],"source":"\\n<p>The public key for the X.509 certificate as an array of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The certificate context is invalid.&lt;/p&gt;\\n","pos":[54889,54935],"source":"\\n<p>The certificate context is invalid.</p>\\n"},{"pos":[55377,55394],"content":"GetSerialNumber()","needQuote":true,"nodes":[{"content":"GetSerialNumber()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The serial number of the X.509 certificate as an array of bytes.&lt;/p&gt;\\n","pos":[56278,56353],"source":"\\n<p>The serial number of the X.509 certificate as an array of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The certificate context is invalid.&lt;/p&gt;\\n","pos":[56518,56564],"source":"\\n<p>The certificate context is invalid.</p>\\n"},{"pos":[56988,56998],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[58635,58652],"content":"ToString(Boolean)","needQuote":true,"nodes":[{"content":"ToString(Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to produce the verbose form of the string representation; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[59720,59841],"source":"\\n<p>\\n<strong>true</strong> to produce the verbose form of the string representation; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[59842,59848],"source":" </p>\\n"},{"pos":[60318,60363],"content":"System.Security.Cryptography.X509Certificates","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.X509Certificates","pos":[0,45]}]},{"pos":[60611,60617],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60767,60778],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[60980,61002],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[61150,61156],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61223,61224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61274,61280],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[61341,61342]},{"pos":[61397,61403],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61463,61464],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61561,61567],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61634,61635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61685,61691],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[61752,61753]},{"pos":[61808,61814],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61874,61875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62120,62151],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[62317,62332],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[62408,62409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62459,62465],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62526,62527]},{"pos":[62582,62588],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62648,62649],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62755,62770],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[62846,62847],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62897,62903],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62964,62965]},{"pos":[63020,63026],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63086,63087],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63313,63322],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[63415,63422],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[63490,63491],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63518,63519],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63588,63595],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[63663,63664],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63691,63692],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63867,63884],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[63993,64008],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[64084,64085],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64112,64113],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64190,64205],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[64281,64282],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64309,64310],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64455,64461],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[64555,64561],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[64681,64685],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[64744,64746]},{"pos":[64809,64813],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[64871,64873],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[65006,65012],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[65248,65267],"content":"X509KeyStorageFlags","needQuote":true,"nodes":[{"content":"X509KeyStorageFlags","pos":[0,19]}]},{"pos":[65529,65535],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[65705,65714],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[65817,65824],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[65876,65877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65904,65905],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65979,65986],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[66038,66039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66066,66067],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66231,66238],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[66414,66428],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[66547,66553],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66620,66621],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66671,66677],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66737,66738],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66821,66827],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66894,66895],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66945,66951],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67011,67012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67271,67286],"content":"X509Certificate","needQuote":true,"nodes":[{"content":"X509Certificate","pos":[0,15]}]},{"pos":[67623,67638],"content":"X509ContentType","needQuote":true,"nodes":[{"content":"X509ContentType","pos":[0,15]}]},{"pos":[67906,67919],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[68020,68031],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[68103,68104],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68131,68132],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68205,68216],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[68288,68289],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68316,68317],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68477,68482],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[68639,68649],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[68744,68752],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[68821,68822],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68849,68850],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68920,68928],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[68997,68998],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69025,69026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69202,69224],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]},{"pos":[69472,69489],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate\n  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate\n  id: X509Certificate\n  parent: System.Security.Cryptography.X509Certificates\n  children:\n  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor\n  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[])\n  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.IntPtr)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\n  - System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Handle\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Issuer\n  - System.Security.Cryptography.X509Certificates.X509Certificate.Subject\n  - System.Security.Cryptography.X509Certificates.X509Certificate.ToString\n  - System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: X509Certificate\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 95\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Provides methods that help you use X.509 v.3 certificates.</p>\\n\"\n  syntax:\n    content: 'public class X509Certificate : IDisposable'\n    content.vb: >-\n      Public Class X509Certificate\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: X509Certificate\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 97\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: public X509Certificate()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate.X509Certificate()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[])\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate(Byte[])\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 98\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class defined from a sequence of bytes representing an X.509v3 certificate.</p>\\n\"\n  syntax:\n    content: public X509Certificate(byte[] data)\n    content.vb: Public Sub New(data As Byte())\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing data from an X.509 certificate.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>rawData</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The length of the <em>rawData</em> parameter is 0.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermission\n    commentId: T:System.Security.Permissions.KeyContainerPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Byte())\n  name.vb: X509Certificate(Byte())\n  nameWithType: X509Certificate.X509Certificate(Byte[])\n  nameWithType.vb: X509Certificate.X509Certificate(Byte())\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String)\n  id: '#ctor(System.Byte[],System.String)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate(Byte[], String)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Byte[], System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 99\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a byte array and a password.</p>\\n\"\n  syntax:\n    content: public X509Certificate(byte[] rawData, string password)\n    content.vb: Public Sub New(rawData As Byte(), password As String)\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing data from an X.509 certificate.</p>\\n\"\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password required to access the X.509 certificate data.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>rawData</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The length of the <em>rawData</em> parameter is 0.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  - type: System.Security.Permissions.KeyContainerPermission\n    commentId: T:System.Security.Permissions.KeyContainerPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Byte(), System.String)\n  name.vb: X509Certificate(Byte(), String)\n  nameWithType: X509Certificate.X509Certificate(Byte[], String)\n  nameWithType.vb: X509Certificate.X509Certificate(Byte(), String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  id: '#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate(Byte[], String, X509KeyStorageFlags)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Byte[], System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 100\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a byte array, a password, and a key storage flag.</p>\\n\"\n  syntax:\n    content: public X509Certificate(byte[] rawData, string password, X509KeyStorageFlags keyStorageFlags)\n    content.vb: Public Sub New(rawData As Byte(), password As String, keyStorageFlags As X509KeyStorageFlags)\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing data from an X.509 certificate. </p>\\n\"\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password required to access the X.509 certificate data. </p>\\n\"\n    - id: keyStorageFlags\n      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n      description: \"\\n<p>A bitwise combination of the enumeration values that control where and how to import the certificate. </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>rawData</em> parameter is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The length of the <em>rawData</em> parameter is 0.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermission\n    commentId: T:System.Security.Permissions.KeyContainerPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Byte(), System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  name.vb: X509Certificate(Byte(), String, X509KeyStorageFlags)\n  nameWithType: X509Certificate.X509Certificate(Byte[], String, X509KeyStorageFlags)\n  nameWithType.vb: X509Certificate.X509Certificate(Byte(), String, X509KeyStorageFlags)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.IntPtr)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate(IntPtr)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.IntPtr)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 101\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a handle to an unmanaged <strong>PCCERT_CONTEXT</strong> structure.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public X509Certificate(IntPtr handle)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Sub New(handle As IntPtr)\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: \"\\n<p>A handle to an unmanaged <strong>PCCERT_CONTEXT</strong> structure.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The handle parameter does not represent a valid <strong>PCCERT_CONTEXT</strong> structure.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate.X509Certificate(IntPtr)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate(String)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 103\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the name of a PKCS7 signed file. </p>\\n\"\n  syntax:\n    content: public X509Certificate(string fileName)\n    content.vb: Public Sub New(fileName As String)\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>The name of a PKCS7 signed file.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>fileName</em> parameter is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  - type: System.Security.Permissions.KeyContainerPermission\n    commentId: T:System.Security.Permissions.KeyContainerPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate.X509Certificate(String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate(String, String)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 104\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the name of a PKCS7 signed file and a password to access the certificate.</p>\\n\"\n  syntax:\n    content: public X509Certificate(string fileName, string password)\n    content.vb: Public Sub New(fileName As String, password As String)\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>The name of a PKCS7 signed file. </p>\\n\"\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password required to access the X.509 certificate data. </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>fileName</em> parameter is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  - type: System.Security.Permissions.KeyContainerPermission\n    commentId: T:System.Security.Permissions.KeyContainerPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate.X509Certificate(String, String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  id: '#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)'\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: X509Certificate(String, String, X509KeyStorageFlags)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.String, System.String, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 105\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the name of a PKCS7 signed file, a password to access the certificate, and a key storage flag. </p>\\n\"\n  syntax:\n    content: public X509Certificate(string fileName, string password, X509KeyStorageFlags keyStorageFlags)\n    content.vb: Public Sub New(fileName As String, password As String, keyStorageFlags As X509KeyStorageFlags)\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>The name of a PKCS7 signed file. </p>\\n\"\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password required to access the X.509 certificate data. </p>\\n\"\n    - id: keyStorageFlags\n      type: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n      description: \"\\n<p>A bitwise combination of the enumeration values that control where and how to import the certificate. </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>An error with the certificate occurs. For example:</p>\\n<ul><li>\\n<p>The certificate file does not exist.</p>\\n</li><li>\\n<p>The certificate is invalid.</p>\\n</li><li>\\n<p>The certificate's password is incorrect.</p>\\n</li></ul>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>fileName</em> parameter is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  - type: System.Security.Permissions.KeyContainerPermission\n    commentId: T:System.Security.Permissions.KeyContainerPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate.X509Certificate(String, String, X509KeyStorageFlags)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Handle\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate.Handle\n  id: Handle\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: Handle\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Handle\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Handle\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 106\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets a handle to a Microsoft Cryptographic API certificate context described by an unmanaged <strong>PCCERT_CONTEXT</strong> structure. </p>\\n\"\n  syntax:\n    content: >-\n      public IntPtr Handle\n\n      {\n          [SecurityCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property Handle As IntPtr\n    parameters: []\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>An <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that represents an unmanaged <strong>PCCERT_CONTEXT</strong> structure.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate.Handle\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Issuer\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate.Issuer\n  id: Issuer\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: Issuer\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Issuer\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Issuer\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 107\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the name of the certificate authority that issued the X.509v3 certificate.</p>\\n\"\n  syntax:\n    content: public string Issuer { get; }\n    content.vb: Public ReadOnly Property Issuer As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the certificate authority that issued the X.509v3 certificate.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate handle is invalid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate.Issuer\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Subject\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Certificate.Subject\n  id: Subject\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: Subject\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Subject\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subject\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 108\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the subject distinguished name from the certificate.</p>\\n\"\n  syntax:\n    content: public string Subject { get; }\n    content.vb: Public ReadOnly Property Subject As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The subject distinguished name from the certificate.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate handle is invalid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509Certificate.Subject\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 109\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Releases all resources used by the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Certificate.Dispose()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 110\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Releases all of the unmanaged resources used by this <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources. </p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: X509Certificate.Dispose(Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 111\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects for equality.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare to the current object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to the object specified by the <em>other</em> parameter; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: X509Certificate.Equals(Object)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n  id: Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: Equals(X509Certificate)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 112\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects for equality.</p>\\n\"\n  syntax:\n    content: public virtual bool Equals(X509Certificate other)\n    content.vb: Public Overridable Function Equals(other As X509Certificate) As Boolean\n    parameters:\n    - id: other\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare to the current object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to the object specified by the <em>other</em> parameter; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: X509Certificate.Equals(X509Certificate)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n  id: Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: Export(X509ContentType)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Export\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 113\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Exports the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a byte array in a format described by one of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ContentType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. </p>\\n\"\n  syntax:\n    content: public virtual byte[] Export(X509ContentType contentType)\n    content.vb: Public Overridable Function Export(contentType As X509ContentType) As Byte()\n    parameters:\n    - id: contentType\n      type: System.Security.Cryptography.X509Certificates.X509ContentType\n      description: \"\\n<p>One of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ContentType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that describes how to format the output data. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes that represents the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>A value other than <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ContentType.Cert\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ContentType.SerializedCert\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ContentType.Pkcs12\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was passed to the <em>contentType</em> parameter.</p>\\n<p>-or-</p>\\n<p>The certificate could not be exported.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermission\n    commentId: T:System.Security.Permissions.KeyContainerPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: X509Certificate.Export(X509ContentType)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n  id: Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: Export(X509ContentType, String)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Export\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 114\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Exports the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a byte array in a format described by one of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ContentType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values, and using the specified password.</p>\\n\"\n  syntax:\n    content: public virtual byte[] Export(X509ContentType contentType, string password)\n    content.vb: Public Overridable Function Export(contentType As X509ContentType, password As String) As Byte()\n    parameters:\n    - id: contentType\n      type: System.Security.Cryptography.X509Certificates.X509ContentType\n      description: \"\\n<p>One of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ContentType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that describes how to format the output data.</p>\\n\"\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password required to access the X.509 certificate data.</p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes that represents the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>A value other than <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ContentType.Cert\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ContentType.SerializedCert\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Security.Cryptography.X509Certificates.X509ContentType.Pkcs12\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was passed to the <em>contentType</em> parameter.</p>\\n<p>-or-</p>\\n<p>The certificate could not be exported.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermission\n    commentId: T:System.Security.Permissions.KeyContainerPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: X509Certificate.Export(X509ContentType, String)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash\n  id: GetCertHash\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: GetCertHash()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCertHash\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 115\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Returns the hash value for the X.509v3 certificate as an array of bytes.</p>\\n\"\n  syntax:\n    content: public virtual byte[] GetCertHash()\n    content.vb: Public Overridable Function GetCertHash As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The hash value for the X.509 certificate.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: X509Certificate.GetCertHash()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat\n  id: GetFormat\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: GetFormat()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFormat\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 116\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Returns the name of the format of this X.509v3 certificate.</p>\\n\"\n  syntax:\n    content: public virtual string GetFormat()\n    content.vb: Public Overridable Function GetFormat As String\n    return:\n      type: System.String\n      description: \"\\n<p>The format of this X.509 certificate.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: X509Certificate.GetFormat()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 117\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Returns the hash code for the X.509v3 certificate as an integer.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for the X.509 certificate as an integer.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: X509Certificate.GetHashCode()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm\n  id: GetKeyAlgorithm\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: GetKeyAlgorithm()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetKeyAlgorithm\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 118\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Returns the key algorithm information for this X.509v3 certificate as a string.</p>\\n\"\n  syntax:\n    content: public virtual string GetKeyAlgorithm()\n    content.vb: Public Overridable Function GetKeyAlgorithm As String\n    return:\n      type: System.String\n      description: \"\\n<p>The key algorithm information for this X.509 certificate as a string.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate context is invalid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: X509Certificate.GetKeyAlgorithm()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters\n  id: GetKeyAlgorithmParameters\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: GetKeyAlgorithmParameters()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetKeyAlgorithmParameters\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 119\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Returns the key algorithm parameters for the X.509v3 certificate as an array of bytes.</p>\\n\"\n  syntax:\n    content: public virtual byte[] GetKeyAlgorithmParameters()\n    content.vb: Public Overridable Function GetKeyAlgorithmParameters As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The key algorithm parameters for the X.509 certificate as an array of bytes.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate context is invalid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: X509Certificate.GetKeyAlgorithmParameters()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString\n  id: GetKeyAlgorithmParametersString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: GetKeyAlgorithmParametersString()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetKeyAlgorithmParametersString\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 120\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Returns the key algorithm parameters for the X.509v3 certificate as a hexadecimal string.</p>\\n\"\n  syntax:\n    content: public virtual string GetKeyAlgorithmParametersString()\n    content.vb: Public Overridable Function GetKeyAlgorithmParametersString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The key algorithm parameters for the X.509 certificate as a hexadecimal string.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate context is invalid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: X509Certificate.GetKeyAlgorithmParametersString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey\n  id: GetPublicKey\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: GetPublicKey()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetPublicKey\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 121\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Returns the public key for the X.509v3 certificate as an array of bytes.</p>\\n\"\n  syntax:\n    content: public virtual byte[] GetPublicKey()\n    content.vb: Public Overridable Function GetPublicKey As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The public key for the X.509 certificate as an array of bytes.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate context is invalid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: X509Certificate.GetPublicKey()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber\n  id: GetSerialNumber\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: GetSerialNumber()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSerialNumber\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 122\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Returns the serial number of the X.509v3 certificate as an array of bytes.</p>\\n\"\n  syntax:\n    content: public virtual byte[] GetSerialNumber()\n    content.vb: Public Overridable Function GetSerialNumber As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The serial number of the X.509 certificate as an array of bytes.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The certificate context is invalid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: X509Certificate.GetSerialNumber()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString\n  id: ToString\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 123\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Returns a string representation of the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: X509Certificate.ToString()\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)\n  id: ToString(System.Boolean)\n  parent: System.Security.Cryptography.X509Certificates.X509Certificate\n  langs:\n  - csharp\n  - vb\n  name: ToString(Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 124\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Returns a string representation of the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, with extra information, if specified.</p>\\n\"\n  syntax:\n    content: public virtual string ToString(bool fVerbose)\n    content.vb: Public Overridable Function ToString(fVerbose As Boolean) As String\n    parameters:\n    - id: fVerbose\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to produce the verbose form of the string representation; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: X509Certificate.ToString(Boolean)\nreferences:\n- uid: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: System.Security.Cryptography.X509Certificates\n  fullName: System.Security.Cryptography.X509Certificates\n  commentId: N:System.Security.Cryptography.X509Certificates\n  nameWithType: System.Security.Cryptography.X509Certificates\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509KeyStorageFlags\n  fullName: System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n  commentId: T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\n  nameWithType: X509KeyStorageFlags\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  commentId: T:System.IntPtr\n  nameWithType: IntPtr\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate\n  nameWithType: X509Certificate\n- uid: System.Security.Cryptography.X509Certificates.X509ContentType\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509ContentType\n  fullName: System.Security.Cryptography.X509Certificates.X509ContentType\n  commentId: T:System.Security.Cryptography.X509Certificates.X509ContentType\n  nameWithType: X509ContentType\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}