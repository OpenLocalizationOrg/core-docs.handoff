{"nodes":[{"pos":[5144,5154],"content":"SqlBoolean","needQuote":true,"nodes":[{"content":"SqlBoolean","pos":[0,10]}]},{"pos":[9872,9875],"content":"One","needQuote":true,"nodes":[{"content":"One","pos":[0,3]}]},{"pos":[12744,12748],"content":"Zero","needQuote":true,"nodes":[{"content":"Zero","pos":[0,4]}]},{"pos":[14025,14044],"content":"SqlBoolean(Boolean)","needQuote":true,"nodes":[{"content":"SqlBoolean(Boolean)","pos":[0,19]}]},{"pos":[15391,15408],"content":"SqlBoolean(Int32)","needQuote":true,"nodes":[{"content":"SqlBoolean(Int32)","pos":[0,17]}]},{"pos":[16689,16698],"content":"ByteValue","needQuote":true,"nodes":[{"content":"ByteValue","pos":[0,9]}]},{"pos":[17933,17940],"content":"IsFalse","needQuote":true,"nodes":[{"content":"IsFalse","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;strong&gt;Value&lt;/strong&gt; is &lt;strong&gt;False&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18807,18929],"source":"\\n<p>\\n<strong>true</strong> if <strong>Value</strong> is <strong>False</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[19557,19563],"content":"IsNull","needQuote":true,"nodes":[{"content":"IsNull","pos":[0,6]}]},{"pos":[21099,21105],"content":"IsTrue","needQuote":true,"nodes":[{"content":"IsTrue","pos":[0,6]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;strong&gt;Value&lt;/strong&gt; is &lt;strong&gt;True&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21967,22088],"source":"\\n<p>\\n<strong>true</strong> if <strong>Value</strong> is <strong>True</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[22716,22721],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The property is set to null.","pos":[23912,23945],"source":"\\n<p>The property is set to null."},{"content":"&lt;/p&gt;\\n","pos":[23946,23952],"source":" </p>\\n"},{"pos":[24873,24900],"content":"And(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"And(SqlBoolean, SqlBoolean)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The result of the logical AND operation.&lt;/p&gt;\\n","pos":[26210,26261],"source":"\\n<p>The result of the logical AND operation.</p>\\n"},{"pos":[26696,26717],"content":"CompareTo(SqlBoolean)","needQuote":true,"nodes":[{"content":"CompareTo(SqlBoolean)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A signed number that indicates the relative values of the instance and value.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Description &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A negative integer &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than &lt;em&gt;value&lt;/em&gt;.","pos":[28050,28282],"source":"\\n<p>A signed number that indicates the relative values of the instance and value.</p>\\n<p>Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>A negative integer </p>\\n</td><td>\\n<p>This instance is less than <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is equal to &lt;em&gt;value&lt;/em&gt;.","pos":[28283,28378],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is equal to <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A positive integer &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).","pos":[28379,28595],"source":" </p>\\n</td></tr><tr><td>\\n<p>A positive integer </p>\\n</td><td>\\n<p>This instance is greater than <em>value</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is a null reference (<strong>Nothing</strong> in Visual Basic)."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[28596,28630],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[28983,29000],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An object to compare, or a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).","pos":[29860,29950],"source":"\\n<p>An object to compare, or a null reference (<strong>Nothing</strong> in Visual Basic)."},{"content":"&lt;/p&gt;\\n","pos":[29951,29957],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A signed number that indicates the relative values of the instance and value.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Description &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A negative integer &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than &lt;em&gt;value&lt;/em&gt;.","pos":[30016,30248],"source":"\\n<p>A signed number that indicates the relative values of the instance and value.</p>\\n<p>Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>A negative integer </p>\\n</td><td>\\n<p>This instance is less than <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is equal to &lt;em&gt;value&lt;/em&gt;.","pos":[30249,30344],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is equal to <em>value</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;A positive integer &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).","pos":[30345,30561],"source":" </p>\\n</td></tr><tr><td>\\n<p>A positive integer </p>\\n</td><td>\\n<p>This instance is greater than <em>value</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is a null reference (<strong>Nothing</strong> in Visual Basic)."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[30562,30596],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[31148,31178],"content":"Equals(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"Equals(SqlBoolean, SqlBoolean)","pos":[0,30]}]},{"pos":[33679,33693],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to be compared.","pos":[34510,34541],"source":"\\n<p>The object to be compared."},{"content":"&lt;/p&gt;\\n","pos":[34542,34548],"source":" </p>\\n"},{"pos":[35208,35221],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[35896,35941],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[36512,36547],"content":"GreaterThan(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"GreaterThan(SqlBoolean, SqlBoolean)","pos":[0,35]}]},{"pos":[38705,38748],"content":"GreaterThanOrEquals(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"GreaterThanOrEquals(SqlBoolean, SqlBoolean)","pos":[0,43]}]},{"pos":[40936,40968],"content":"LessThan(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"LessThan(SqlBoolean, SqlBoolean)","pos":[0,32]}]},{"pos":[43096,43136],"content":"LessThanOrEquals(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"LessThanOrEquals(SqlBoolean, SqlBoolean)","pos":[0,40]}]},{"pos":[45307,45340],"content":"NotEquals(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"NotEquals(SqlBoolean, SqlBoolean)","pos":[0,33]}]},{"pos":[47913,47939],"content":"OnesComplement(SqlBoolean)","needQuote":true,"nodes":[{"content":"OnesComplement(SqlBoolean)","pos":[0,26]}]},{"pos":[49719,49753],"content":"BitwiseAnd(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"BitwiseAnd(SqlBoolean, SqlBoolean)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The result of the logical AND operation.&lt;/p&gt;\\n","pos":[51089,51140],"source":"\\n<p>The result of the logical AND operation.</p>\\n"},{"pos":[51687,51720],"content":"BitwiseOr(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"BitwiseOr(SqlBoolean, SqlBoolean)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The results of the logical OR operation.&lt;/p&gt;\\n","pos":[52938,52989],"source":"\\n<p>The results of the logical OR operation.</p>\\n"},{"pos":[53532,53564],"content":"Equality(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"Equality(SqlBoolean, SqlBoolean)","pos":[0,32]}]},{"pos":[56209,56244],"content":"ExclusiveOr(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"ExclusiveOr(SqlBoolean, SqlBoolean)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The result of the logical XOR operation.&lt;/p&gt;\\n","pos":[57502,57553],"source":"\\n<p>The result of the logical XOR operation.</p>\\n"},{"pos":[58047,58078],"content":"Explicit(SqlBoolean to Boolean)","needQuote":true,"nodes":[{"content":"Explicit(SqlBoolean to Boolean)","pos":[0,31]}]},{"pos":[60102,60133],"content":"Explicit(SqlByte to SqlBoolean)","needQuote":true,"nodes":[{"content":"Explicit(SqlByte to SqlBoolean)","pos":[0,31]}]},{"pos":[62536,62570],"content":"Explicit(SqlDecimal to SqlBoolean)","needQuote":true,"nodes":[{"content":"Explicit(SqlDecimal to SqlBoolean)","pos":[0,34]}]},{"pos":[65012,65045],"content":"Explicit(SqlDouble to SqlBoolean)","needQuote":true,"nodes":[{"content":"Explicit(SqlDouble to SqlBoolean)","pos":[0,33]}]},{"pos":[67475,67507],"content":"Explicit(SqlInt16 to SqlBoolean)","needQuote":true,"nodes":[{"content":"Explicit(SqlInt16 to SqlBoolean)","pos":[0,32]}]},{"pos":[69925,69957],"content":"Explicit(SqlInt32 to SqlBoolean)","needQuote":true,"nodes":[{"content":"Explicit(SqlInt32 to SqlBoolean)","pos":[0,32]}]},{"pos":[72375,72407],"content":"Explicit(SqlInt64 to SqlBoolean)","needQuote":true,"nodes":[{"content":"Explicit(SqlInt64 to SqlBoolean)","pos":[0,32]}]},{"pos":[74825,74857],"content":"Explicit(SqlMoney to SqlBoolean)","needQuote":true,"nodes":[{"content":"Explicit(SqlMoney to SqlBoolean)","pos":[0,32]}]},{"pos":[77275,77308],"content":"Explicit(SqlSingle to SqlBoolean)","needQuote":true,"nodes":[{"content":"Explicit(SqlSingle to SqlBoolean)","pos":[0,33]}]},{"pos":[79741,79774],"content":"Explicit(SqlString to SqlBoolean)","needQuote":true,"nodes":[{"content":"Explicit(SqlString to SqlBoolean)","pos":[0,33]}]},{"pos":[82104,82121],"content":"False(SqlBoolean)","needQuote":true,"nodes":[{"content":"False(SqlBoolean)","pos":[0,17]}]},{"pos":[84046,84081],"content":"GreaterThan(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"GreaterThan(SqlBoolean, SqlBoolean)","pos":[0,35]}]},{"pos":[86232,86274],"content":"GreaterThanOrEqual(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(SqlBoolean, SqlBoolean)","pos":[0,42]}]},{"pos":[88397,88428],"content":"Implicit(Boolean to SqlBoolean)","needQuote":true,"nodes":[{"content":"Implicit(Boolean to SqlBoolean)","pos":[0,31]}]},{"pos":[90398,90432],"content":"Inequality(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"Inequality(SqlBoolean, SqlBoolean)","pos":[0,34]}]},{"pos":[93102,93134],"content":"LessThan(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"LessThan(SqlBoolean, SqlBoolean)","pos":[0,32]}]},{"pos":[95268,95307],"content":"LessThanOrEqual(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(SqlBoolean, SqlBoolean)","pos":[0,39]}]},{"pos":[97377,97399],"content":"LogicalNot(SqlBoolean)","needQuote":true,"nodes":[{"content":"LogicalNot(SqlBoolean)","pos":[0,22]}]},{"pos":[99471,99497],"content":"OnesComplement(SqlBoolean)","needQuote":true,"nodes":[{"content":"OnesComplement(SqlBoolean)","pos":[0,26]}]},{"pos":[101153,101169],"content":"True(SqlBoolean)","needQuote":true,"nodes":[{"content":"True(SqlBoolean)","pos":[0,16]}]},{"pos":[103050,103076],"content":"Or(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"Or(SqlBoolean, SqlBoolean)","pos":[0,26]}]},{"pos":[104924,104937],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"pos":[106497,106508],"content":"ToSqlByte()","needQuote":true,"nodes":[{"content":"ToSqlByte()","pos":[0,11]}]},{"pos":[108189,108203],"content":"ToSqlDecimal()","needQuote":true,"nodes":[{"content":"ToSqlDecimal()","pos":[0,14]}]},{"pos":[109921,109934],"content":"ToSqlDouble()","needQuote":true,"nodes":[{"content":"ToSqlDouble()","pos":[0,13]}]},{"pos":[111637,111649],"content":"ToSqlInt16()","needQuote":true,"nodes":[{"content":"ToSqlInt16()","pos":[0,12]}]},{"pos":[113212,113224],"content":"ToSqlInt32()","needQuote":true,"nodes":[{"content":"ToSqlInt32()","pos":[0,12]}]},{"pos":[114783,114795],"content":"ToSqlInt64()","needQuote":true,"nodes":[{"content":"ToSqlInt64()","pos":[0,12]}]},{"pos":[116355,116367],"content":"ToSqlMoney()","needQuote":true,"nodes":[{"content":"ToSqlMoney()","pos":[0,12]}]},{"pos":[118506,118519],"content":"ToSqlSingle()","needQuote":true,"nodes":[{"content":"ToSqlSingle()","pos":[0,13]}]},{"pos":[120211,120224],"content":"ToSqlString()","needQuote":true,"nodes":[{"content":"ToSqlString()","pos":[0,13]}]},{"pos":[121913,121923],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[123417,123444],"content":"Xor(SqlBoolean, SqlBoolean)","needQuote":true,"nodes":[{"content":"Xor(SqlBoolean, SqlBoolean)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The result of the logical XOR operation.&lt;/p&gt;\\n","pos":[124668,124719],"source":"\\n<p>The result of the logical XOR operation.</p>\\n"},{"pos":[124924,124944],"content":"System.Data.SqlTypes","needQuote":true,"nodes":[{"content":"System.Data.SqlTypes","pos":[0,20]}]},{"pos":[125148,125157],"content":"INullable","needQuote":true,"nodes":[{"content":"INullable","pos":[0,9]}]},{"pos":[125344,125355],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[125557,125579],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[125727,125733],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[125800,125801],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125851,125857],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[125918,125919]},{"pos":[125974,125980],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[126040,126041],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126138,126144],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[126211,126212],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126262,126268],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[126329,126330]},{"pos":[126385,126391],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[126451,126452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126697,126728],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[126894,126909],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[126985,126986],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127036,127042],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[127103,127104]},{"pos":[127159,127165],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[127225,127226],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127332,127347],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[127423,127424],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127474,127480],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[127541,127542]},{"pos":[127597,127603],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[127663,127664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127890,127899],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[127992,127999],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[128067,128068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128095,128096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128165,128172],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[128240,128241],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128268,128269],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128398,128404],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[128535,128541],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[128718,128728],"content":"SqlBoolean","needQuote":true,"nodes":[{"content":"SqlBoolean","pos":[0,10]}]},{"pos":[128914,128921],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[129068,129073],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[129213,129217],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[129404,129410],"content":"IsNull","needQuote":true,"nodes":[{"content":"IsNull","pos":[0,6]}]},{"pos":[129654,129671],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[129806,129815],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[129869,129870],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129920,129926],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[129986,129987],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130078,130087],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[130141,130142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130192,130198],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[130258,130259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130481,130495],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[130620,130626],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[130675,130676],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130726,130732],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[130792,130793],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130879,130885],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[130934,130935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130985,130991],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[131051,131052],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131233,131242],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[131421,131434],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[131541,131552],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[131606,131607],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131634,131635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131711,131722],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[131776,131777],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131804,131805],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[132001,132008],"content":"SqlByte","needQuote":true,"nodes":[{"content":"SqlByte","pos":[0,7]}]},{"pos":[132216,132226],"content":"SqlDecimal","needQuote":true,"nodes":[{"content":"SqlDecimal","pos":[0,10]}]},{"pos":[132442,132451],"content":"SqlDouble","needQuote":true,"nodes":[{"content":"SqlDouble","pos":[0,9]}]},{"pos":[132663,132671],"content":"SqlInt16","needQuote":true,"nodes":[{"content":"SqlInt16","pos":[0,8]}]},{"pos":[132880,132888],"content":"SqlInt32","needQuote":true,"nodes":[{"content":"SqlInt32","pos":[0,8]}]},{"pos":[133097,133105],"content":"SqlInt64","needQuote":true,"nodes":[{"content":"SqlInt64","pos":[0,8]}]},{"pos":[133314,133322],"content":"SqlMoney","needQuote":true,"nodes":[{"content":"SqlMoney","pos":[0,8]}]},{"pos":[133532,133541],"content":"SqlSingle","needQuote":true,"nodes":[{"content":"SqlSingle","pos":[0,9]}]},{"pos":[133754,133763],"content":"SqlString","needQuote":true,"nodes":[{"content":"SqlString","pos":[0,9]}]},{"pos":[133945,133951],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[134118,134128],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[134229,134237],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[134288,134289],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[134316,134317],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[134390,134398],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[134449,134450],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[134477,134478],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[134651,134672],"content":"SqlNullValueException","needQuote":true,"nodes":[{"content":"SqlNullValueException","pos":[0,21]}]}],"content":"items:\n- uid: System.Data.SqlTypes.SqlBoolean\n  commentId: T:System.Data.SqlTypes.SqlBoolean\n  id: SqlBoolean\n  parent: System.Data.SqlTypes\n  children:\n  - System.Data.SqlTypes.SqlBoolean.#ctor(System.Boolean)\n  - System.Data.SqlTypes.SqlBoolean.#ctor(System.Int32)\n  - System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.ByteValue\n  - System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)\n  - System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.Equals(System.Object)\n  - System.Data.SqlTypes.SqlBoolean.False\n  - System.Data.SqlTypes.SqlBoolean.GetHashCode\n  - System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.IsFalse\n  - System.Data.SqlTypes.SqlBoolean.IsNull\n  - System.Data.SqlTypes.SqlBoolean.IsTrue\n  - System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.Null\n  - System.Data.SqlTypes.SqlBoolean.One\n  - System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Boolean\n  - System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlBoolean\n  - System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlBoolean\n  - System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlBoolean\n  - System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlBoolean\n  - System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlBoolean\n  - System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlBoolean\n  - System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlBoolean\n  - System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlBoolean\n  - System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlBoolean\n  - System.Data.SqlTypes.SqlBoolean.op_False(System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_Implicit(System.Boolean)~System.Data.SqlTypes.SqlBoolean\n  - System.Data.SqlTypes.SqlBoolean.op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_LogicalNot(System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_OnesComplement(System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.op_True(System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.Parse(System.String)\n  - System.Data.SqlTypes.SqlBoolean.ToSqlByte\n  - System.Data.SqlTypes.SqlBoolean.ToSqlDecimal\n  - System.Data.SqlTypes.SqlBoolean.ToSqlDouble\n  - System.Data.SqlTypes.SqlBoolean.ToSqlInt16\n  - System.Data.SqlTypes.SqlBoolean.ToSqlInt32\n  - System.Data.SqlTypes.SqlBoolean.ToSqlInt64\n  - System.Data.SqlTypes.SqlBoolean.ToSqlMoney\n  - System.Data.SqlTypes.SqlBoolean.ToSqlSingle\n  - System.Data.SqlTypes.SqlBoolean.ToSqlString\n  - System.Data.SqlTypes.SqlBoolean.ToString\n  - System.Data.SqlTypes.SqlBoolean.True\n  - System.Data.SqlTypes.SqlBoolean.Value\n  - System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  - System.Data.SqlTypes.SqlBoolean.Zero\n  langs:\n  - csharp\n  - vb\n  name: SqlBoolean\n  fullName: System.Data.SqlTypes.SqlBoolean\n  type: Struct\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SqlBoolean\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 20\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents an integer value that is either 1 or 0 to be stored in or retrieved from a database.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct SqlBoolean : INullable, IComparable\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure SqlBoolean\n          Implements INullable, IComparable\n  implements:\n  - System.Data.SqlTypes.INullable\n  - System.IComparable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: SqlBoolean\n- uid: System.Data.SqlTypes.SqlBoolean.False\n  commentId: F:System.Data.SqlTypes.SqlBoolean.False\n  id: False\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: False\n  fullName: System.Data.SqlTypes.SqlBoolean.False\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: False\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 620\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a false value that can be assigned to the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an instance of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlBoolean False\n    content.vb: Public Shared ReadOnly False As SqlBoolean\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n  seealso:\n  - type: System.Data.SqlTypes.SqlBoolean.True\n    commentId: F:System.Data.SqlTypes.SqlBoolean.True\n  - type: System.Data.SqlTypes.SqlBoolean.IsFalse\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsFalse\n  - type: System.Data.SqlTypes.SqlBoolean.IsTrue\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsTrue\n  - type: System.Data.SqlTypes.SqlBoolean.Null\n    commentId: F:System.Data.SqlTypes.SqlBoolean.Null\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlBoolean.False\n- uid: System.Data.SqlTypes.SqlBoolean.Null\n  commentId: F:System.Data.SqlTypes.SqlBoolean.Null\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  fullName: System.Data.SqlTypes.SqlBoolean.Null\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 627\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents <xref href=\\\"System.DBNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be assigned to this instance of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlBoolean Null\n    content.vb: Public Shared ReadOnly Null As SqlBoolean\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n  seealso:\n  - type: System.Data.SqlTypes.SqlBoolean.IsNull\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsNull\n  - type: System.Data.SqlTypes.SqlBoolean.True\n    commentId: F:System.Data.SqlTypes.SqlBoolean.True\n  - type: System.Data.SqlTypes.SqlBoolean.False\n    commentId: F:System.Data.SqlTypes.SqlBoolean.False\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlBoolean.Null\n- uid: System.Data.SqlTypes.SqlBoolean.One\n  commentId: F:System.Data.SqlTypes.SqlBoolean.One\n  id: One\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: One\n  fullName: System.Data.SqlTypes.SqlBoolean.One\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: One\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 636\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a one value that can be assigned to the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.ByteValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an instance of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlBoolean One\n    content.vb: Public Shared ReadOnly One As SqlBoolean\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlBoolean.One\n- uid: System.Data.SqlTypes.SqlBoolean.True\n  commentId: F:System.Data.SqlTypes.SqlBoolean.True\n  id: True\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: True\n  fullName: System.Data.SqlTypes.SqlBoolean.True\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: True\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 612\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a true value that can be assigned to the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an instance of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlBoolean True\n    content.vb: Public Shared ReadOnly True As SqlBoolean\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n  seealso:\n  - type: System.Data.SqlTypes.SqlBoolean.False\n    commentId: F:System.Data.SqlTypes.SqlBoolean.False\n  - type: System.Data.SqlTypes.SqlBoolean.IsTrue\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsTrue\n  - type: System.Data.SqlTypes.SqlBoolean.IsFalse\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsFalse\n  - type: System.Data.SqlTypes.SqlBoolean.Null\n    commentId: F:System.Data.SqlTypes.SqlBoolean.Null\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlBoolean.True\n- uid: System.Data.SqlTypes.SqlBoolean.Zero\n  commentId: F:System.Data.SqlTypes.SqlBoolean.Zero\n  id: Zero\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Zero\n  fullName: System.Data.SqlTypes.SqlBoolean.Zero\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zero\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 632\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a zero value that can be assigned to the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.ByteValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an instance of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlBoolean Zero\n    content.vb: Public Shared ReadOnly Zero As SqlBoolean\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlBoolean.Zero\n- uid: System.Data.SqlTypes.SqlBoolean.#ctor(System.Boolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: SqlBoolean(Boolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.SqlBoolean(System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 37\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the supplied Boolean value.</p>\\n\"\n  syntax:\n    content: public SqlBoolean(bool value)\n    content.vb: Public Sub New(value As Boolean)\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The value for the new <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure; either <strong>true</strong> or <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.SqlBoolean(Boolean)\n- uid: System.Data.SqlTypes.SqlBoolean.#ctor(System.Int32)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: SqlBoolean(Int32)\n  fullName: System.Data.SqlTypes.SqlBoolean.SqlBoolean(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 45\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified integer value.</p>\\n\"\n  syntax:\n    content: public SqlBoolean(int value)\n    content.vb: Public Sub New(value As Integer)\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The integer whose value is to be used for the new <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.SqlBoolean(Int32)\n- uid: System.Data.SqlTypes.SqlBoolean.ByteValue\n  commentId: P:System.Data.SqlTypes.SqlBoolean.ByteValue\n  id: ByteValue\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: ByteValue\n  fullName: System.Data.SqlTypes.SqlBoolean.ByteValue\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ByteValue\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 224\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the value of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure as a byte.</p>\\n\"\n  syntax:\n    content: public byte ByteValue { get; }\n    content.vb: Public ReadOnly Property ByteValue As Byte\n    parameters: []\n    return:\n      type: System.Byte\n      description: \"\\n<p>A byte representing the value of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlBoolean.ByteValue\n- uid: System.Data.SqlTypes.SqlBoolean.IsFalse\n  commentId: P:System.Data.SqlTypes.SqlBoolean.IsFalse\n  id: IsFalse\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: IsFalse\n  fullName: System.Data.SqlTypes.SqlBoolean.IsFalse\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsFalse\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 111\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Indicates whether the current <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool IsFalse { get; }\n    content.vb: Public ReadOnly Property IsFalse As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <strong>Value</strong> is <strong>False</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Data.SqlTypes.SqlBoolean.IsTrue\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsTrue\n  - type: System.Data.SqlTypes.SqlBoolean.True\n    commentId: F:System.Data.SqlTypes.SqlBoolean.True\n  - type: System.Data.SqlTypes.SqlBoolean.IsNull\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsNull\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlBoolean.IsFalse\n- uid: System.Data.SqlTypes.SqlBoolean.IsNull\n  commentId: P:System.Data.SqlTypes.SqlBoolean.IsNull\n  id: IsNull\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: IsNull\n  fullName: System.Data.SqlTypes.SqlBoolean.IsNull\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNull\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 64\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Indicates whether this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is null.</p>\\n\"\n  syntax:\n    content: public bool IsNull { get; }\n    content.vb: Public ReadOnly Property IsNull As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is null; otherwise <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Data.SqlTypes.SqlBoolean.IsTrue\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsTrue\n  - type: System.Data.SqlTypes.SqlBoolean.IsFalse\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsFalse\n  implements:\n  - System.Data.SqlTypes.INullable.IsNull\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlBoolean.IsNull\n- uid: System.Data.SqlTypes.SqlBoolean.IsTrue\n  commentId: P:System.Data.SqlTypes.SqlBoolean.IsTrue\n  id: IsTrue\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: IsTrue\n  fullName: System.Data.SqlTypes.SqlBoolean.IsTrue\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsTrue\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 100\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Indicates whether the current <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool IsTrue { get; }\n    content.vb: Public ReadOnly Property IsTrue As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <strong>Value</strong> is <strong>True</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Data.SqlTypes.SqlBoolean.IsFalse\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsFalse\n  - type: System.Data.SqlTypes.SqlBoolean.False\n    commentId: F:System.Data.SqlTypes.SqlBoolean.False\n  - type: System.Data.SqlTypes.SqlBoolean.IsNull\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsNull\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlBoolean.IsTrue\n- uid: System.Data.SqlTypes.SqlBoolean.Value\n  commentId: P:System.Data.SqlTypes.SqlBoolean.Value\n  id: Value\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Data.SqlTypes.SqlBoolean.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 76\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value. This property is read-only.</p>\\n\"\n  syntax:\n    content: public bool Value { get; }\n    content.vb: Public ReadOnly Property Value As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.Data.SqlTypes.SqlNullValueException\n    commentId: T:System.Data.SqlTypes.SqlNullValueException\n    description: \"\\n<p>The property is set to null. </p>\\n\"\n  seealso:\n  - type: System.Data.SqlTypes.SqlBoolean.False\n    commentId: F:System.Data.SqlTypes.SqlBoolean.False\n  - type: System.Data.SqlTypes.SqlBoolean.IsTrue\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsTrue\n  - type: System.Data.SqlTypes.SqlBoolean.IsFalse\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsFalse\n  - type: System.Data.SqlTypes.SqlBoolean.IsNull\n    commentId: P:System.Data.SqlTypes.SqlBoolean.IsNull\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlBoolean.Value\n- uid: System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: And(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: And\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 439\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the bitwise AND operation of two specified <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean And(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Function And(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The result of the logical AND operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.And(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)\n  id: CompareTo(System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 562\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to the supplied <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(SqlBoolean value)\n    content.vb: Public Function CompareTo(value As SqlBoolean) As Integer\n    parameters:\n    - id: value\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref><xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare, or a null reference (<strong>Nothing</strong> in Visual Basic).  </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of the instance and value.</p>\\n<p>Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>A negative integer </p>\\n</td><td>\\n<p>This instance is less than <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is equal to <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>A positive integer </p>\\n</td><td>\\n<p>This instance is greater than <em>value</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is a null reference (<strong>Nothing</strong> in Visual Basic). </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.CompareTo(SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)\n  id: CompareTo(System.Object)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Object)\n  fullName: System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 551\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a specified object and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(object value)\n    content.vb: Public Function CompareTo(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object to compare, or a null reference (<strong>Nothing</strong> in Visual Basic). </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of the instance and value.</p>\\n<p>Value </p>\\n<p>Description </p>\\n<table><tbody><tr><td>\\n<p>A negative integer </p>\\n</td><td>\\n<p>This instance is less than <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is equal to <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>A positive integer </p>\\n</td><td>\\n<p>This instance is greater than <em>value</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is a null reference (<strong>Nothing</strong> in Visual Basic). </p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.CompareTo(Object)\n- uid: System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Equals(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 457\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether they are equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean Equals(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Function Equals(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.Equals(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.Equals(System.Object)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Data.SqlTypes.SqlBoolean.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 580\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares the supplied object parameter to the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to be compared. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if object is an instance of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the two are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlBoolean.Equals(Object)\n- uid: System.Data.SqlTypes.SqlBoolean.GetHashCode\n  commentId: M:System.Data.SqlTypes.SqlBoolean.GetHashCode\n  id: GetHashCode\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Data.SqlTypes.SqlBoolean.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 599\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlBoolean.GetHashCode()\n- uid: System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 469\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is greater than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean GreaterThan(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Function GreaterThan(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <strong>true</strong> if the first instance is greater than the second instance; otherwise <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.GreaterThan(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEquals(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEquals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 481\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is greater than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean GreaterThanOrEquals(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Function GreaterThanOrEquals(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <strong>true</strong> if the first instance is greater than or equal to the second instance; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.GreaterThanOrEquals(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: LessThan(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 475\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is less than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean LessThan(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Function LessThan(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <strong>true</strong> if the first instance is less than the second instance; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.LessThan(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEquals(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEquals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 487\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is less than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean LessThanOrEquals(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Function LessThanOrEquals(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <strong>true</strong> if the first instance is less than or equal to the second instance; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.LessThanOrEquals(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: NotEquals(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotEquals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 463\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for equality.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean NotEquals(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Function NotEquals(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.NotEquals(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)\n  id: OnesComplement(System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: OnesComplement(SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnesComplement\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 433\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a one's complement operation on the supplied <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean OnesComplement(SqlBoolean x)\n    content.vb: Public Shared Function OnesComplement(x As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The one's complement of the supplied <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.OnesComplement(SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: BitwiseAnd(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.BitwiseAnd(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_BitwiseAnd\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 190\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the bitwise AND operation of two specified <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator &(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Operator And(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The result of the logical AND operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.BitwiseAnd(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: BitwiseOr(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.BitwiseOr(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_BitwiseOr\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 208\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the bitwise OR of its operands.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator |(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Operator Or(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The results of the logical OR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.BitwiseOr(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Equality(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Equality(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 383\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for equality.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator ==(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Operator =(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.Equality(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveOr(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.ExclusiveOr(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_ExclusiveOr\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 284\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a bitwise exclusive-OR (XOR) operation on the supplied parameters.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator ^(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Operator Xor(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The result of the logical XOR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.ExclusiveOr(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Boolean\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Boolean\n  id: op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Boolean\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlBoolean to Boolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Explicit(System.Data.SqlTypes.SqlBoolean to System.Boolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 135\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a Boolean.</p>\\n\"\n  syntax:\n    content: public static explicit operator bool (SqlBoolean x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlBoolean) As Boolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to convert. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>A Boolean set to the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBoolean.Narrowing(System.Data.SqlTypes.SqlBoolean to System.Boolean)\n  name.vb: Narrowing(SqlBoolean to Boolean)\n  nameWithType: SqlBoolean.Explicit(SqlBoolean to Boolean)\n  nameWithType.vb: SqlBoolean.Narrowing(SqlBoolean to Boolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlBoolean\n  id: op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlByte to SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Explicit(System.Data.SqlTypes.SqlByte to System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 300\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlBoolean(SqlByte x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlByte) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value equals the <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBoolean.Narrowing(System.Data.SqlTypes.SqlByte to System.Data.SqlTypes.SqlBoolean)\n  name.vb: Narrowing(SqlByte to SqlBoolean)\n  nameWithType: SqlBoolean.Explicit(SqlByte to SqlBoolean)\n  nameWithType.vb: SqlBoolean.Narrowing(SqlByte to SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlBoolean\n  id: op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlDecimal to SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Explicit(System.Data.SqlTypes.SqlDecimal to System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 363\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlBoolean(SqlDecimal x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlDecimal) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDecimal\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value equals the <xref href=\\\"System.Data.SqlTypes.SqlDecimal.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBoolean.Narrowing(System.Data.SqlTypes.SqlDecimal to System.Data.SqlTypes.SqlBoolean)\n  name.vb: Narrowing(SqlDecimal to SqlBoolean)\n  nameWithType: SqlBoolean.Explicit(SqlDecimal to SqlBoolean)\n  nameWithType.vb: SqlBoolean.Narrowing(SqlDecimal to SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlBoolean\n  id: op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlDouble to SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Explicit(System.Data.SqlTypes.SqlDouble to System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 336\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlBoolean(SqlDouble x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlDouble) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value equals the <xref href=\\\"System.Data.SqlTypes.SqlDouble.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBoolean.Narrowing(System.Data.SqlTypes.SqlDouble to System.Data.SqlTypes.SqlBoolean)\n  name.vb: Narrowing(SqlDouble to SqlBoolean)\n  nameWithType: SqlBoolean.Explicit(SqlDouble to SqlBoolean)\n  nameWithType.vb: SqlBoolean.Narrowing(SqlDouble to SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlBoolean\n  id: op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlInt16 to SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Explicit(System.Data.SqlTypes.SqlInt16 to System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 309\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlBoolean(SqlInt16 x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlInt16) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt16\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value equals the <xref href=\\\"System.Data.SqlTypes.SqlInt16.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBoolean.Narrowing(System.Data.SqlTypes.SqlInt16 to System.Data.SqlTypes.SqlBoolean)\n  name.vb: Narrowing(SqlInt16 to SqlBoolean)\n  nameWithType: SqlBoolean.Explicit(SqlInt16 to SqlBoolean)\n  nameWithType.vb: SqlBoolean.Narrowing(SqlInt16 to SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlBoolean\n  id: op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlInt32 to SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Explicit(System.Data.SqlTypes.SqlInt32 to System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 318\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlBoolean(SqlInt32 x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlInt32) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt32\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value equals the <xref href=\\\"System.Data.SqlTypes.SqlInt32.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBoolean.Narrowing(System.Data.SqlTypes.SqlInt32 to System.Data.SqlTypes.SqlBoolean)\n  name.vb: Narrowing(SqlInt32 to SqlBoolean)\n  nameWithType: SqlBoolean.Explicit(SqlInt32 to SqlBoolean)\n  nameWithType.vb: SqlBoolean.Narrowing(SqlInt32 to SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlBoolean\n  id: op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlInt64 to SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Explicit(System.Data.SqlTypes.SqlInt64 to System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 327\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlBoolean(SqlInt64 x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value equals the <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBoolean.Narrowing(System.Data.SqlTypes.SqlInt64 to System.Data.SqlTypes.SqlBoolean)\n  name.vb: Narrowing(SqlInt64 to SqlBoolean)\n  nameWithType: SqlBoolean.Explicit(SqlInt64 to SqlBoolean)\n  nameWithType.vb: SqlBoolean.Narrowing(SqlInt64 to SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlBoolean\n  id: op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlMoney to SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Explicit(System.Data.SqlTypes.SqlMoney to System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 354\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlBoolean(SqlMoney x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlMoney) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlMoney\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value equals the <xref href=\\\"System.Data.SqlTypes.SqlMoney.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBoolean.Narrowing(System.Data.SqlTypes.SqlMoney to System.Data.SqlTypes.SqlBoolean)\n  name.vb: Narrowing(SqlMoney to SqlBoolean)\n  nameWithType: SqlBoolean.Explicit(SqlMoney to SqlBoolean)\n  nameWithType.vb: SqlBoolean.Narrowing(SqlMoney to SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlBoolean\n  id: op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlSingle to SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Explicit(System.Data.SqlTypes.SqlSingle to System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 345\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlBoolean(SqlSingle x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlSingle) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlSingle\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value equals the <xref href=\\\"System.Data.SqlTypes.SqlSingle.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBoolean.Narrowing(System.Data.SqlTypes.SqlSingle to System.Data.SqlTypes.SqlBoolean)\n  name.vb: Narrowing(SqlSingle to SqlBoolean)\n  nameWithType: SqlBoolean.Explicit(SqlSingle to SqlBoolean)\n  nameWithType.vb: SqlBoolean.Narrowing(SqlSingle to SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlBoolean\n  id: op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlString to SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Explicit(System.Data.SqlTypes.SqlString to System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 374\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlBoolean(SqlString x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlString) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value equals the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBoolean.Narrowing(System.Data.SqlTypes.SqlString to System.Data.SqlTypes.SqlBoolean)\n  name.vb: Narrowing(SqlString to SqlBoolean)\n  nameWithType: SqlBoolean.Explicit(SqlString to SqlBoolean)\n  nameWithType.vb: SqlBoolean.Narrowing(SqlString to SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_False(System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_False(System.Data.SqlTypes.SqlBoolean)\n  id: op_False(System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: False(SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.False(System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_False\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 176\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The false operator can be used to test the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether it is false.</p>\\n\"\n  syntax:\n    content: public static bool operator false (SqlBoolean x)\n    content.vb: Public Shared Operator IsFalse(x As SqlBoolean) As Boolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be tested. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <strong>true</strong> if the supplied parameter is <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is false, <strong>false</strong> otherwise.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.False(SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 407\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether the first is greater than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator>(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Operator>(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <strong>true</strong> if the first instance is greater than the second instance; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.GreaterThan(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 423\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures to determine whether the first is greater than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator >=(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Operator >=(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <strong>true</strong> if the first instance is greater than or equal to the second instance; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.GreaterThanOrEqual(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Implicit(System.Boolean)~System.Data.SqlTypes.SqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Implicit(System.Boolean)~System.Data.SqlTypes.SqlBoolean\n  id: op_Implicit(System.Boolean)~System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Boolean to SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Implicit(System.Boolean to System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 123\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied byte value to a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlBoolean(bool x)\n    content.vb: Public Shared Widening Operator CType(x As Boolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Boolean\n      description: \"\\n<p>A byte value to be converted to <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that contains 0 or 1.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlBoolean.Widening(System.Boolean to System.Data.SqlTypes.SqlBoolean)\n  name.vb: Widening(Boolean to SqlBoolean)\n  nameWithType: SqlBoolean.Implicit(Boolean to SqlBoolean)\n  nameWithType.vb: SqlBoolean.Widening(Boolean to SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Inequality(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Inequality(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 391\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether they are not equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator !=(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Operator <>(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.Inequality(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: LessThan(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 399\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is less than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator <(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Operator <(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <strong>true</strong> if the first instance is less than the second instance; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.LessThan(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.LessThanOrEqual(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 415\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares two instances of <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether the first is less than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator <=(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Operator <=(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <strong>true</strong> if the first instance is less than or equal to the second instance; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.LessThanOrEqual(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_LogicalNot(System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_LogicalNot(System.Data.SqlTypes.SqlBoolean)\n  id: op_LogicalNot(System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: LogicalNot(SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.LogicalNot(System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LogicalNot\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 149\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a NOT operation on a <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator !(SqlBoolean x)\n    content.vb: VB cannot support this operator.\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on which the NOT operation will be performed. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref><xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if argument was true, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if argument was null, and <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> otherwise.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.LogicalNot(SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_OnesComplement(System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_OnesComplement(System.Data.SqlTypes.SqlBoolean)\n  id: op_OnesComplement(System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: OnesComplement(SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_OnesComplement\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 273\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a one's complement operation on the supplied <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator ~(SqlBoolean x)\n    content.vb: Public Shared Operator Not(x As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The one's complement of the supplied <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.OnesComplement(SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.op_True(System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.op_True(System.Data.SqlTypes.SqlBoolean)\n  id: op_True(System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: True(SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.True(System.Data.SqlTypes.SqlBoolean)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_True\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 168\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The true operator can be used to test the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to determine whether it is true.</p>\\n\"\n  syntax:\n    content: public static bool operator true (SqlBoolean x)\n    content.vb: Public Shared Operator IsTrue(x As SqlBoolean) As Boolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be tested. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <strong>true</strong> if the supplied parameter is <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is true, <strong>false</strong> otherwise.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.True(SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Or(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Or\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 445\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a bitwise OR operation on the two specified <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean Or(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Function Or(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose Value is the result of the bitwise OR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.Or(SqlBoolean, SqlBoolean)\n- uid: System.Data.SqlTypes.SqlBoolean.Parse(System.String)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Data.SqlTypes.SqlBoolean.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 248\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representation of a logical value to its <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean Parse(string s)\n    content.vb: Public Shared Function Parse(s As String) As SqlBoolean\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the parsed value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.Parse(String)\n- uid: System.Data.SqlTypes.SqlBoolean.ToSqlByte\n  commentId: M:System.Data.SqlTypes.SqlBoolean.ToSqlByte\n  id: ToSqlByte\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: ToSqlByte()\n  fullName: System.Data.SqlTypes.SqlBoolean.ToSqlByte()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlByte\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 494\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlByte ToSqlByte()\n    content.vb: Public Function ToSqlByte As SqlByte\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value is 1 or 0. If the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value equals <strong>true</strong>, the new <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is 1. Otherwise, the new <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.ToSqlByte()\n- uid: System.Data.SqlTypes.SqlBoolean.ToSqlDecimal\n  commentId: M:System.Data.SqlTypes.SqlBoolean.ToSqlDecimal\n  id: ToSqlDecimal\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: ToSqlDecimal()\n  fullName: System.Data.SqlTypes.SqlBoolean.ToSqlDecimal()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlDecimal\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 524\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlDecimal ToSqlDecimal()\n    content.vb: Public Function ToSqlDecimal As SqlDecimal\n    return:\n      type: System.Data.SqlTypes.SqlDecimal\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value is 1 or 0. If the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value equals <strong>true</strong> then the new <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is 1. Otherwise, the new <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.ToSqlDecimal()\n- uid: System.Data.SqlTypes.SqlBoolean.ToSqlDouble\n  commentId: M:System.Data.SqlTypes.SqlBoolean.ToSqlDouble\n  id: ToSqlDouble\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: ToSqlDouble()\n  fullName: System.Data.SqlTypes.SqlBoolean.ToSqlDouble()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlDouble\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 499\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlDouble ToSqlDouble()\n    content.vb: Public Function ToSqlDouble As SqlDouble\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value is 1 or 0. If the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value equals <strong>true</strong> then the new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is 1. Otherwise, the new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.ToSqlDouble()\n- uid: System.Data.SqlTypes.SqlBoolean.ToSqlInt16\n  commentId: M:System.Data.SqlTypes.SqlBoolean.ToSqlInt16\n  id: ToSqlInt16\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt16()\n  fullName: System.Data.SqlTypes.SqlBoolean.ToSqlInt16()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt16\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 504\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt16 ToSqlInt16()\n    content.vb: Public Function ToSqlInt16 As SqlInt16\n    return:\n      type: System.Data.SqlTypes.SqlInt16\n      description: \"\\n<p>A new <strong>SqlInt16</strong> structure whose value is 1 or 0. If the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value equals <strong>true</strong> then the new <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is 1. Otherwise, the new <strong>SqlInt16</strong> structure's value is 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.ToSqlInt16()\n- uid: System.Data.SqlTypes.SqlBoolean.ToSqlInt32\n  commentId: M:System.Data.SqlTypes.SqlBoolean.ToSqlInt32\n  id: ToSqlInt32\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt32()\n  fullName: System.Data.SqlTypes.SqlBoolean.ToSqlInt32()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt32\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 509\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt32 ToSqlInt32()\n    content.vb: Public Function ToSqlInt32 As SqlInt32\n    return:\n      type: System.Data.SqlTypes.SqlInt32\n      description: \"\\n<p>A new <strong>SqlInt32</strong> structure whose value is 1 or 0. If the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value equals <strong>true</strong>, the new <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is 1. Otherwise, the new <strong>SqlInt32</strong> structure's value is 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.ToSqlInt32()\n- uid: System.Data.SqlTypes.SqlBoolean.ToSqlInt64\n  commentId: M:System.Data.SqlTypes.SqlBoolean.ToSqlInt64\n  id: ToSqlInt64\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt64()\n  fullName: System.Data.SqlTypes.SqlBoolean.ToSqlInt64()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt64\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 514\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt64 ToSqlInt64()\n    content.vb: Public Function ToSqlInt64 As SqlInt64\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <strong>SqlInt64</strong> structure whose value is 1 or 0. If the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value equals <strong>true</strong>, the new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  structure's value is 1. Otherwise, the new <strong>SqlInt64</strong> structure's value is 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.ToSqlInt64()\n- uid: System.Data.SqlTypes.SqlBoolean.ToSqlMoney\n  commentId: M:System.Data.SqlTypes.SqlBoolean.ToSqlMoney\n  id: ToSqlMoney\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: ToSqlMoney()\n  fullName: System.Data.SqlTypes.SqlBoolean.ToSqlMoney()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlMoney\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 519\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlMoney ToSqlMoney()\n    content.vb: Public Function ToSqlMoney As SqlMoney\n    return:\n      type: System.Data.SqlTypes.SqlMoney\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value is 1 or 0. If the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value equals <strong>true</strong>, the new <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is 1. If the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value equals <strong>false</strong>, the new <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is 0. If <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is neither 1 nor 0, the new <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is <xref href=\\\"System.Data.SqlTypes.SqlMoney.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.ToSqlMoney()\n- uid: System.Data.SqlTypes.SqlBoolean.ToSqlSingle\n  commentId: M:System.Data.SqlTypes.SqlBoolean.ToSqlSingle\n  id: ToSqlSingle\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: ToSqlSingle()\n  fullName: System.Data.SqlTypes.SqlBoolean.ToSqlSingle()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlSingle\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 529\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlSingle ToSqlSingle()\n    content.vb: Public Function ToSqlSingle As SqlSingle\n    return:\n      type: System.Data.SqlTypes.SqlSingle\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value is 1 or 0.</p>\\n<p>If the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value equals true, the new <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is 1; otherwise the new <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.ToSqlSingle()\n- uid: System.Data.SqlTypes.SqlBoolean.ToSqlString\n  commentId: M:System.Data.SqlTypes.SqlBoolean.ToSqlString\n  id: ToSqlString\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: ToSqlString()\n  fullName: System.Data.SqlTypes.SqlBoolean.ToSqlString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlString\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 534\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlString ToSqlString()\n    content.vb: Public Function ToSqlString As SqlString\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose value is 1 or 0. If the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value equals <strong>true</strong> then <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is 1. Otherwise, the new <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure's value is 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlBoolean.ToSqlString()\n- uid: System.Data.SqlTypes.SqlBoolean.ToString\n  commentId: M:System.Data.SqlTypes.SqlBoolean.ToString\n  id: ToString\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Data.SqlTypes.SqlBoolean.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 238\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a string.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains the value of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the value is null, the string will contain \\\"null\\\".</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlBoolean.ToString()\n- uid: System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  commentId: M:System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  id: Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)\n  parent: System.Data.SqlTypes.SqlBoolean\n  langs:\n  - csharp\n  - vb\n  name: Xor(SqlBoolean, SqlBoolean)\n  fullName: System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean, System.Data.SqlTypes.SqlBoolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Xor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLBoolean.cs\n    startLine: 451\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a bitwise exclusive-OR operation on the supplied parameters.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean Xor(SqlBoolean x, SqlBoolean y)\n    content.vb: Public Shared Function Xor(x As SqlBoolean, y As SqlBoolean) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The result of the logical XOR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlBoolean.Xor(SqlBoolean, SqlBoolean)\nreferences:\n- uid: System.Data.SqlTypes\n  isExternal: false\n  name: System.Data.SqlTypes\n  fullName: System.Data.SqlTypes\n  nameWithType: System.Data.SqlTypes\n  commentId: N:System.Data.SqlTypes\n- uid: System.Data.SqlTypes.INullable\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: INullable\n  fullName: System.Data.SqlTypes.INullable\n  nameWithType: INullable\n  commentId: T:System.Data.SqlTypes.INullable\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlBoolean\n  fullName: System.Data.SqlTypes.SqlBoolean\n  nameWithType: SqlBoolean\n  commentId: T:System.Data.SqlTypes.SqlBoolean\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Data.SqlTypes.INullable.IsNull\n  parent: System.Data.SqlTypes.INullable\n  isExternal: false\n  name: IsNull\n  fullName: System.Data.SqlTypes.INullable.IsNull\n  nameWithType: INullable.IsNull\n  commentId: P:System.Data.SqlTypes.INullable.IsNull\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlByte\n  fullName: System.Data.SqlTypes.SqlByte\n  nameWithType: SqlByte\n  commentId: T:System.Data.SqlTypes.SqlByte\n- uid: System.Data.SqlTypes.SqlDecimal\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDecimal\n  fullName: System.Data.SqlTypes.SqlDecimal\n  nameWithType: SqlDecimal\n  commentId: T:System.Data.SqlTypes.SqlDecimal\n- uid: System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDouble\n  fullName: System.Data.SqlTypes.SqlDouble\n  nameWithType: SqlDouble\n  commentId: T:System.Data.SqlTypes.SqlDouble\n- uid: System.Data.SqlTypes.SqlInt16\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt16\n  fullName: System.Data.SqlTypes.SqlInt16\n  nameWithType: SqlInt16\n  commentId: T:System.Data.SqlTypes.SqlInt16\n- uid: System.Data.SqlTypes.SqlInt32\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt32\n  fullName: System.Data.SqlTypes.SqlInt32\n  nameWithType: SqlInt32\n  commentId: T:System.Data.SqlTypes.SqlInt32\n- uid: System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt64\n  fullName: System.Data.SqlTypes.SqlInt64\n  nameWithType: SqlInt64\n  commentId: T:System.Data.SqlTypes.SqlInt64\n- uid: System.Data.SqlTypes.SqlMoney\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlMoney\n  fullName: System.Data.SqlTypes.SqlMoney\n  nameWithType: SqlMoney\n  commentId: T:System.Data.SqlTypes.SqlMoney\n- uid: System.Data.SqlTypes.SqlSingle\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlSingle\n  fullName: System.Data.SqlTypes.SqlSingle\n  nameWithType: SqlSingle\n  commentId: T:System.Data.SqlTypes.SqlSingle\n- uid: System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlString\n  fullName: System.Data.SqlTypes.SqlString\n  nameWithType: SqlString\n  commentId: T:System.Data.SqlTypes.SqlString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Data.SqlTypes.SqlNullValueException\n  isExternal: false\n  name: SqlNullValueException\n  fullName: System.Data.SqlTypes.SqlNullValueException\n  nameWithType: SqlNullValueException\n  commentId: T:System.Data.SqlTypes.SqlNullValueException\n"}