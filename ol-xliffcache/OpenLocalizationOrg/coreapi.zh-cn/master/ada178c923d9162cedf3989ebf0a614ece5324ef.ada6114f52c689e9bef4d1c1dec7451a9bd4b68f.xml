{"nodes":[{"pos":[362,384],"content":"AssemblyFlagsAttribute","needQuote":true,"nodes":[{"content":"AssemblyFlagsAttribute","pos":[0,22]}]},{"pos":[2456,2465],"content":"Inherited","needQuote":true,"nodes":[{"content":"Inherited","pos":[0,9]}]},{"pos":[2986,3027],"content":"AssemblyFlagsAttribute(AssemblyNameFlags)","needQuote":true,"nodes":[{"content":"AssemblyFlagsAttribute(AssemblyNameFlags)","pos":[0,41]}]},{"pos":[4825,4838],"content":"AssemblyFlags","needQuote":true,"nodes":[{"content":"AssemblyFlags","pos":[0,13]}]},{"pos":[6165,6182],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[6346,6352],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6500,6509],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[6697,6711],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6836,6842],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6891,6892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6942,6948],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7008,7009],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7095,7101],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7150,7151],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7201,7207],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7267,7268],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7471,7484],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[7591,7602],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[7656,7657],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7684,7685],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7761,7772],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[7826,7827],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7854,7855],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8037,8047],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[8142,8150],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8219,8220],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8247,8248],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8318,8326],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8395,8396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8423,8424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8621,8643],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8791,8797],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8864,8865],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8915,8921],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8982,8983]},{"pos":[9038,9044],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9104,9105],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9202,9208],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9275,9276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9326,9332],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9393,9394]},{"pos":[9449,9455],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9515,9516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9761,9792],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9958,9973],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10049,10050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10100,10106],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10167,10168]},{"pos":[10223,10229],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10289,10290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10396,10411],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10487,10488],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10538,10544],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10605,10606]},{"pos":[10661,10667],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10727,10728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10954,10963],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11056,11063],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11131,11132],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11159,11160],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11229,11236],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11304,11305],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11332,11333],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11508,11525],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11634,11649],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11725,11726],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11753,11754],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11831,11846],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11922,11923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11950,11951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12096,12102],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12266,12283],"content":"AssemblyNameFlags","needQuote":true,"nodes":[{"content":"AssemblyNameFlags","pos":[0,17]}]},{"pos":[12482,12487],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.Reflection.AssemblyFlagsAttribute\n  commentId: T:System.Reflection.AssemblyFlagsAttribute\n  id: AssemblyFlagsAttribute\n  parent: System.Reflection\n  children:\n  - System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)\n  - System.Reflection.AssemblyFlagsAttribute.AssemblyFlags\n  langs:\n  - csharp\n  - vb\n  name: AssemblyFlagsAttribute\n  fullName: System.Reflection.AssemblyFlagsAttribute\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AssemblyFlagsAttribute\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 300\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies a bitwise combination of <xref href=\\\"System.Reflection.AssemblyNameFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]\n\n      [ComVisible(true)]\n\n      public sealed class AssemblyFlagsAttribute : Attribute, _Attribute\n    content.vb: >-\n      <AttributeUsage(AttributeTargets.Assembly, Inherited:=False)>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class AssemblyFlagsAttribute\n          Inherits Attribute\n          Implements _Attribute\n  seealso:\n  - type: System.Reflection.AssemblyNameFlags\n    commentId: T:System.Reflection.AssemblyNameFlags\n  - type: System.Reflection.Assembly.GetName\n    commentId: M:System.Reflection.Assembly.GetName\n  - type: System.Reflection.AssemblyName.Flags\n    commentId: P:System.Reflection.AssemblyName.Flags\n  inheritance:\n  - System.Object\n  - System.Attribute\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.AttributeUsageAttribute\n    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)\n    arguments:\n    - type: System.AttributeTargets\n      value: 1\n    namedArguments:\n    - name: Inherited\n      type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: AssemblyFlagsAttribute\n- uid: System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)\n  commentId: M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)\n  id: '#ctor(System.Reflection.AssemblyNameFlags)'\n  parent: System.Reflection.AssemblyFlagsAttribute\n  langs:\n  - csharp\n  - vb\n  name: AssemblyFlagsAttribute(AssemblyNameFlags)\n  fullName: System.Reflection.AssemblyFlagsAttribute.AssemblyFlagsAttribute(System.Reflection.AssemblyNameFlags)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 333\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Reflection.AssemblyFlagsAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified combination of <xref href=\\\"System.Reflection.AssemblyNameFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flags.</p>\\n\"\n  syntax:\n    content: public AssemblyFlagsAttribute(AssemblyNameFlags assemblyFlags)\n    content.vb: Public Sub New(assemblyFlags As AssemblyNameFlags)\n    parameters:\n    - id: assemblyFlags\n      type: System.Reflection.AssemblyNameFlags\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Reflection.AssemblyNameFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flags representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</p>\\n\"\n  seealso:\n  - type: System.Reflection.AssemblyNameFlags\n    commentId: T:System.Reflection.AssemblyNameFlags\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyFlagsAttribute.AssemblyFlagsAttribute(AssemblyNameFlags)\n- uid: System.Reflection.AssemblyFlagsAttribute.AssemblyFlags\n  commentId: P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags\n  id: AssemblyFlags\n  parent: System.Reflection.AssemblyFlagsAttribute\n  langs:\n  - csharp\n  - vb\n  name: AssemblyFlags\n  fullName: System.Reflection.AssemblyFlagsAttribute.AssemblyFlags\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AssemblyFlags\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 321\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets an integer value representing the combination of <xref href=\\\"System.Reflection.AssemblyNameFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flags specified when this attribute instance was created.</p>\\n\"\n  syntax:\n    content: public int AssemblyFlags { get; }\n    content.vb: Public ReadOnly Property AssemblyFlags As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer value representing a bitwise combination of <xref href=\\\"System.Reflection.AssemblyNameFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flags.</p>\\n\"\n  seealso:\n  - type: System.Reflection.AssemblyNameFlags\n    commentId: T:System.Reflection.AssemblyNameFlags\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: AssemblyFlagsAttribute.AssemblyFlags\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  fullName: System.Attribute\n  nameWithType: Attribute\n  commentId: T:System.Attribute\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Attribute.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Attribute.Equals(Object)\n  commentId: M:System.Attribute.Equals(System.Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Attribute.GetHashCode()\n  spec.csharp:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Attribute.GetHashCode()\n  commentId: M:System.Attribute.GetHashCode\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.AssemblyNameFlags\n  parent: System.Reflection\n  isExternal: false\n  name: AssemblyNameFlags\n  fullName: System.Reflection.AssemblyNameFlags\n  nameWithType: AssemblyNameFlags\n  commentId: T:System.Reflection.AssemblyNameFlags\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n"}