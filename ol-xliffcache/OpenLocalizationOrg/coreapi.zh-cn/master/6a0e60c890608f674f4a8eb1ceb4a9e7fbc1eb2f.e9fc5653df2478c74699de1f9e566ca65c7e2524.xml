{"nodes":[{"pos":[2504,2513],"content":"DbCommand","needQuote":true,"nodes":[{"content":"DbCommand","pos":[0,9]}]},{"pos":[4091,4102],"content":"DbCommand()","needQuote":true,"nodes":[{"content":"DbCommand()","pos":[0,11]}]},{"pos":[5037,5048],"content":"CommandText","needQuote":true,"nodes":[{"content":"CommandText","pos":[0,11]}]},{"pos":[6246,6260],"content":"CommandTimeout","needQuote":true,"nodes":[{"content":"CommandTimeout","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The time in seconds to wait for the command to execute.&lt;/p&gt;\\n","pos":[7023,7089],"source":"\\n<p>The time in seconds to wait for the command to execute.</p>\\n"},{"pos":[7488,7499],"content":"CommandType","needQuote":true,"nodes":[{"content":"CommandType","pos":[0,11]}]},{"pos":[8867,8877],"content":"Connection","needQuote":true,"nodes":[{"content":"Connection","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The connection to the data source.&lt;/p&gt;\\n","pos":[9743,9788],"source":"\\n<p>The connection to the data source.</p>\\n"},{"pos":[10100,10112],"content":"DbConnection","needQuote":true,"nodes":[{"content":"DbConnection","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The connection to the data source.&lt;/p&gt;\\n","pos":[11014,11059],"source":"\\n<p>The connection to the data source.</p>\\n"},{"pos":[11436,11457],"content":"DbParameterCollection","needQuote":true,"nodes":[{"content":"DbParameterCollection","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The parameters of the SQL statement or stored procedure.&lt;/p&gt;\\n","pos":[12337,12404],"source":"\\n<p>The parameters of the SQL statement or stored procedure.</p>\\n"},{"pos":[12771,12784],"content":"DbTransaction","needQuote":true,"nodes":[{"content":"DbTransaction","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The transaction within which a Command object of a .NET Framework data provider executes.","pos":[13725,13819],"source":"\\n<p>The transaction within which a Command object of a .NET Framework data provider executes."},{"content":"The default value is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).&lt;/p&gt;\\n","pos":[13820,13907],"source":" The default value is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n"},{"pos":[14273,14290],"content":"DesignTimeVisible","needQuote":true,"nodes":[{"content":"DesignTimeVisible","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt;, if the command object should be visible in a control; otherwise &lt;strong&gt;false&lt;/strong&gt;.","pos":[15076,15193],"source":"\\n<p>\\n<strong>true</strong>, if the command object should be visible in a control; otherwise <strong>false</strong>."},{"content":"The default is &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15194,15237],"source":" The default is <strong>true</strong>.</p>\\n"},{"pos":[15580,15590],"content":"Parameters","needQuote":true,"nodes":[{"content":"Parameters","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The parameters of the SQL statement or stored procedure.&lt;/p&gt;\\n","pos":[16487,16554],"source":"\\n<p>The parameters of the SQL statement or stored procedure.</p>\\n"},{"pos":[16948,16969],"content":"IDbCommand.Connection","needQuote":true,"nodes":[{"content":"IDbCommand.Connection","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The connection to the data source.&lt;/p&gt;\\n","pos":[17954,17999],"source":"\\n<p>The connection to the data source.</p>\\n"},{"pos":[18521,18542],"content":"IDbCommand.Parameters","needQuote":true,"nodes":[{"content":"IDbCommand.Parameters","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The parameters of the SQL statement or stored procedure.&lt;/p&gt;\\n","pos":[19446,19513],"source":"\\n<p>The parameters of the SQL statement or stored procedure.</p>\\n"},{"pos":[20059,20081],"content":"IDbCommand.Transaction","needQuote":true,"nodes":[{"content":"IDbCommand.Transaction","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The transaction within which a &lt;strong&gt;Command&lt;/strong&gt; object of a .NET Framework data provider executes.","pos":[21102,21213],"source":"\\n<p>The transaction within which a <strong>Command</strong> object of a .NET Framework data provider executes."},{"content":"The default value is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).&lt;/p&gt;\\n","pos":[21214,21301],"source":" The default value is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n"},{"pos":[21747,21758],"content":"Transaction","needQuote":true,"nodes":[{"content":"Transaction","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The transaction within which a &lt;strong&gt;Command&lt;/strong&gt; object of a .NET Framework data provider executes.","pos":[22653,22764],"source":"\\n<p>The transaction within which a <strong>Command</strong> object of a .NET Framework data provider executes."},{"content":"The default value is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).&lt;/p&gt;\\n","pos":[22765,22852],"source":" The default value is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n"},{"pos":[23177,23193],"content":"UpdatedRowSource","needQuote":true,"nodes":[{"content":"UpdatedRowSource","pos":[0,16]}]},{"pos":[24790,24798],"content":"Cancel()","needQuote":true,"nodes":[{"content":"Cancel()","pos":[0,8]}]},{"pos":[25837,25856],"content":"CreateDbParameter()","needQuote":true,"nodes":[{"content":"CreateDbParameter()","pos":[0,19]}]},{"pos":[27121,27138],"content":"CreateParameter()","needQuote":true,"nodes":[{"content":"CreateParameter()","pos":[0,17]}]},{"pos":[28428,28464],"content":"ExecuteDbDataReader(CommandBehavior)","needQuote":true,"nodes":[{"content":"ExecuteDbDataReader(CommandBehavior)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A task representing the operation.&lt;/p&gt;\\n","pos":[29493,29538],"source":"\\n<p>A task representing the operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[29661,29723],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[30522,30582],"content":"ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken)","needQuote":true,"nodes":[{"content":"ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;Options for statement execution and data retrieval.&lt;/p&gt;\\n","pos":[32300,32362],"source":"\\n<p>Options for statement execution and data retrieval.</p>\\n"},{"content":"\\n&lt;p&gt;The token to monitor for cancellation requests.&lt;/p&gt;\\n","pos":[32459,32517],"source":"\\n<p>The token to monitor for cancellation requests.</p>\\n"},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[32624,32682],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[32805,32867],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[33469,33486],"content":"ExecuteNonQuery()","needQuote":true,"nodes":[{"content":"ExecuteNonQuery()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The number of rows affected.&lt;/p&gt;\\n","pos":[34173,34212],"source":"\\n<p>The number of rows affected.</p>\\n"},{"pos":[34626,34648],"content":"ExecuteNonQueryAsync()","needQuote":true,"nodes":[{"content":"ExecuteNonQueryAsync()","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[35707,35765],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[35888,35950],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[36390,36429],"content":"ExecuteNonQueryAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"ExecuteNonQueryAsync(CancellationToken)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The token to monitor for cancellation requests.&lt;/p&gt;\\n","pos":[38168,38226],"source":"\\n<p>The token to monitor for cancellation requests.</p>\\n"},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[38314,38372],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[38495,38557],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[38913,38928],"content":"ExecuteReader()","needQuote":true,"nodes":[{"content":"ExecuteReader()","pos":[0,15]}]},{"pos":[40402,40432],"content":"ExecuteReader(CommandBehavior)","needQuote":true,"nodes":[{"content":"ExecuteReader(CommandBehavior)","pos":[0,30]}]},{"pos":[42257,42277],"content":"ExecuteReaderAsync()","needQuote":true,"nodes":[{"content":"ExecuteReaderAsync()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[43670,43728],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[43851,43913],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[44537,44572],"content":"ExecuteReaderAsync(CommandBehavior)","needQuote":true,"nodes":[{"content":"ExecuteReaderAsync(CommandBehavior)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[46231,46289],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[46412,46474],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[47218,47272],"content":"ExecuteReaderAsync(CommandBehavior, CancellationToken)","needQuote":true,"nodes":[{"content":"ExecuteReaderAsync(CommandBehavior, CancellationToken)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The token to monitor for cancellation requests.&lt;/p&gt;\\n","pos":[48556,48614],"source":"\\n<p>The token to monitor for cancellation requests.</p>\\n"},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[48721,48779],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[48902,48964],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[49643,49680],"content":"ExecuteReaderAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"ExecuteReaderAsync(CancellationToken)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The token to monitor for cancellation requests.&lt;/p&gt;\\n","pos":[51234,51292],"source":"\\n<p>The token to monitor for cancellation requests.</p>\\n"},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[51399,51457],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[51580,51642],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[52181,52196],"content":"ExecuteScalar()","needQuote":true,"nodes":[{"content":"ExecuteScalar()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The first column of the first row in the result set.&lt;/p&gt;\\n","pos":[52970,53033],"source":"\\n<p>The first column of the first row in the result set.</p>\\n"},{"pos":[53437,53457],"content":"ExecuteScalarAsync()","needQuote":true,"nodes":[{"content":"ExecuteScalarAsync()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[54599,54657],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[54780,54842],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[55274,55311],"content":"ExecuteScalarAsync(CancellationToken)","needQuote":true,"nodes":[{"content":"ExecuteScalarAsync(CancellationToken)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The token to monitor for cancellation requests.&lt;/p&gt;\\n","pos":[56948,57006],"source":"\\n<p>The token to monitor for cancellation requests.</p>\\n"},{"content":"\\n&lt;p&gt;A task representing the asynchronous operation.&lt;/p&gt;\\n","pos":[57095,57153],"source":"\\n<p>A task representing the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while executing the command text.&lt;/p&gt;\\n","pos":[57276,57338],"source":"\\n<p>An error occurred while executing the command text.</p>\\n"},{"pos":[57674,57683],"content":"Prepare()","needQuote":true,"nodes":[{"content":"Prepare()","pos":[0,9]}]},{"pos":[58752,58780],"content":"IDbCommand.CreateParameter()","needQuote":true,"nodes":[{"content":"IDbCommand.CreateParameter()","pos":[0,28]}]},{"content":"\\n&lt;p&gt;An &lt;strong&gt;IDbDataParameter&lt;/strong&gt; object.&lt;/p&gt;\\n","pos":[59659,59714],"source":"\\n<p>An <strong>IDbDataParameter</strong> object.</p>\\n"},{"pos":[60235,60261],"content":"IDbCommand.ExecuteReader()","needQuote":true,"nodes":[{"content":"IDbCommand.ExecuteReader()","pos":[0,26]}]},{"pos":[62007,62048],"content":"IDbCommand.ExecuteReader(CommandBehavior)","needQuote":true,"nodes":[{"content":"IDbCommand.ExecuteReader(CommandBehavior)","pos":[0,41]}]},{"pos":[64087,64096],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[64950,64966],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[65789,65807],"content":"System.Data.Common","needQuote":true,"nodes":[{"content":"System.Data.Common","pos":[0,18]}]},{"pos":[65974,65980],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66139,66149],"content":"IDbCommand","needQuote":true,"nodes":[{"content":"IDbCommand","pos":[0,10]}]},{"pos":[66321,66332],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[66507,66517],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[66612,66620],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[66689,66690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66717,66718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66788,66796],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[66865,66866],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66893,66894],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67077,67091],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[67210,67216],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67283,67284],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67334,67340],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67400,67401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67484,67490],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67557,67558],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67608,67614],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67674,67675],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67889,67911],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[68059,68065],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[68132,68133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68183,68189],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[68250,68251]},{"pos":[68306,68312],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68372,68373],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68470,68476],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[68543,68544],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68594,68600],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[68661,68662]},{"pos":[68717,68723],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68783,68784],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69029,69060],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[69226,69241],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[69317,69318],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69368,69374],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69435,69436]},{"pos":[69491,69497],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69557,69558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69664,69679],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[69755,69756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69806,69812],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69873,69874]},{"pos":[69929,69935],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69995,69996],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70226,70239],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[70340,70351],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[70423,70424],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70451,70452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70525,70536],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[70608,70609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70636,70637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70812,70821],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[70914,70921],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[70989,70990],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71017,71018],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71087,71094],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[71162,71163],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71190,71191],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71366,71383],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[71492,71507],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[71583,71584],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71611,71612],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71689,71704],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[71780,71781],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71808,71809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71954,71960],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[72072,72083],"content":"System.Data","needQuote":true,"nodes":[{"content":"System.Data","pos":[0,11]}]},{"pos":[72266,72277],"content":"CommandText","needQuote":true,"nodes":[{"content":"CommandText","pos":[0,11]}]},{"pos":[72480,72486],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[72671,72685],"content":"CommandTimeout","needQuote":true,"nodes":[{"content":"CommandTimeout","pos":[0,14]}]},{"pos":[72896,72901],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73080,73091],"content":"CommandType","needQuote":true,"nodes":[{"content":"CommandType","pos":[0,11]}]},{"pos":[73309,73320],"content":"CommandType","needQuote":true,"nodes":[{"content":"CommandType","pos":[0,11]}]},{"pos":[73520,73532],"content":"DbConnection","needQuote":true,"nodes":[{"content":"DbConnection","pos":[0,12]}]},{"pos":[73758,73779],"content":"DbParameterCollection","needQuote":true,"nodes":[{"content":"DbParameterCollection","pos":[0,21]}]},{"pos":[74024,74037],"content":"DbTransaction","needQuote":true,"nodes":[{"content":"DbTransaction","pos":[0,13]}]},{"pos":[74228,74235],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[74419,74429],"content":"Connection","needQuote":true,"nodes":[{"content":"Connection","pos":[0,10]}]},{"pos":[74646,74659],"content":"IDbConnection","needQuote":true,"nodes":[{"content":"IDbConnection","pos":[0,13]}]},{"pos":[74871,74881],"content":"Parameters","needQuote":true,"nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[75109,75133],"content":"IDataParameterCollection","needQuote":true,"nodes":[{"content":"IDataParameterCollection","pos":[0,24]}]},{"pos":[75379,75390],"content":"Transaction","needQuote":true,"nodes":[{"content":"Transaction","pos":[0,11]}]},{"pos":[75611,75625],"content":"IDbTransaction","needQuote":true,"nodes":[{"content":"IDbTransaction","pos":[0,14]}]},{"pos":[75846,75862],"content":"UpdatedRowSource","needQuote":true,"nodes":[{"content":"UpdatedRowSource","pos":[0,16]}]},{"pos":[76099,76114],"content":"UpdateRowSource","needQuote":true,"nodes":[{"content":"UpdateRowSource","pos":[0,15]}]},{"pos":[76328,76336],"content":"Cancel()","needQuote":true,"nodes":[{"content":"Cancel()","pos":[0,8]}]},{"pos":[76445,76451],"content":"Cancel","needQuote":true,"nodes":[{"content":"Cancel","pos":[0,6]}]},{"pos":[76506,76507],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76534,76535],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76612,76618],"content":"Cancel","needQuote":true,"nodes":[{"content":"Cancel","pos":[0,6]}]},{"pos":[76673,76674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76701,76702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76895,76906],"content":"DbParameter","needQuote":true,"nodes":[{"content":"DbParameter","pos":[0,11]}]},{"pos":[77109,77124],"content":"CommandBehavior","needQuote":true,"nodes":[{"content":"CommandBehavior","pos":[0,15]}]},{"pos":[77336,77348],"content":"DbDataReader","needQuote":true,"nodes":[{"content":"DbDataReader","pos":[0,12]}]},{"pos":[77566,77583],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[77868,77886],"content":"Task<DbDataReader>","needQuote":true,"nodes":[{"content":"Task&lt;DbDataReader&gt;","pos":[0,18],"source":"Task<DbDataReader>"}]},{"pos":[78136,78140],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[78214,78215],"content":"<","needQuote":true,"nodes":[]},{"pos":[78283,78295],"content":"DbDataReader","needQuote":true,"nodes":[{"content":"DbDataReader","pos":[0,12]}]},{"pos":[78434,78438],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[78513,78516]},{"pos":[78591,78603],"content":"DbDataReader","needQuote":true,"nodes":[{"content":"DbDataReader","pos":[0,12]}]},{"pos":[78660,78661],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78882,78898],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[79058,79071],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[79268,79272],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[79325,79326],"content":"<","needQuote":true,"nodes":[]},{"pos":[79353,79360],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[79475,79479],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[79533,79536]},{"pos":[79570,79577],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[79610,79611],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79797,79819],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[80039,80056],"content":"ExecuteNonQuery()","needQuote":true,"nodes":[{"content":"ExecuteNonQuery()","pos":[0,17]}]},{"pos":[80183,80198],"content":"ExecuteNonQuery","needQuote":true,"nodes":[{"content":"ExecuteNonQuery","pos":[0,15]}]},{"pos":[80262,80263],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80290,80291],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80377,80392],"content":"ExecuteNonQuery","needQuote":true,"nodes":[{"content":"ExecuteNonQuery","pos":[0,15]}]},{"pos":[80456,80457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80484,80485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80735,80746],"content":"Task<Int32>","needQuote":true,"nodes":[{"content":"Task&lt;Int32&gt;","pos":[0,11],"source":"Task<Int32>"}]},{"pos":[80951,80955],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[81029,81030],"content":"<","needQuote":true,"nodes":[]},{"pos":[81079,81084],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81225,81229],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[81304,81307]},{"pos":[81363,81368],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81427,81428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81669,81684],"content":"ExecuteScalar()","needQuote":true,"nodes":[{"content":"ExecuteScalar()","pos":[0,15]}]},{"pos":[81807,81820],"content":"ExecuteScalar","needQuote":true,"nodes":[{"content":"ExecuteScalar","pos":[0,13]}]},{"pos":[81882,81883],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81910,81911],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81995,82008],"content":"ExecuteScalar","needQuote":true,"nodes":[{"content":"ExecuteScalar","pos":[0,13]}]},{"pos":[82070,82071],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82098,82099],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82346,82358],"content":"Task<Object>","needQuote":true,"nodes":[{"content":"Task&lt;Object&gt;","pos":[0,12],"source":"Task<Object>"}]},{"pos":[82566,82570],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[82644,82645],"content":"<","needQuote":true,"nodes":[]},{"pos":[82695,82701],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[82843,82847],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[82922,82925]},{"pos":[82982,82988],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[83048,83049],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83287,83296],"content":"Prepare()","needQuote":true,"nodes":[{"content":"Prepare()","pos":[0,9]}]},{"pos":[83407,83414],"content":"Prepare","needQuote":true,"nodes":[{"content":"Prepare","pos":[0,7]}]},{"pos":[83470,83471],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83498,83499],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83577,83584],"content":"Prepare","needQuote":true,"nodes":[{"content":"Prepare","pos":[0,7]}]},{"pos":[83640,83641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83668,83669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83876,83893],"content":"CreateParameter()","needQuote":true,"nodes":[{"content":"CreateParameter()","pos":[0,17]}]},{"pos":[84020,84035],"content":"CreateParameter","needQuote":true,"nodes":[{"content":"CreateParameter","pos":[0,15]}]},{"pos":[84099,84100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84127,84128],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84214,84229],"content":"CreateParameter","needQuote":true,"nodes":[{"content":"CreateParameter","pos":[0,15]}]},{"pos":[84293,84294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84321,84322],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84524,84540],"content":"IDbDataParameter","needQuote":true,"nodes":[{"content":"IDbDataParameter","pos":[0,16]}]},{"pos":[84764,84779],"content":"ExecuteReader()","needQuote":true,"nodes":[{"content":"ExecuteReader()","pos":[0,15]}]},{"pos":[84902,84915],"content":"ExecuteReader","needQuote":true,"nodes":[{"content":"ExecuteReader","pos":[0,13]}]},{"pos":[84977,84978],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85005,85006],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85090,85103],"content":"ExecuteReader","needQuote":true,"nodes":[{"content":"ExecuteReader","pos":[0,13]}]},{"pos":[85165,85166],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85193,85194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85387,85398],"content":"IDataReader","needQuote":true,"nodes":[{"content":"IDataReader","pos":[0,11]}]},{"pos":[85636,85666],"content":"ExecuteReader(CommandBehavior)","needQuote":true,"nodes":[{"content":"ExecuteReader(CommandBehavior)","pos":[0,30]}]},{"pos":[85845,85858],"content":"ExecuteReader","needQuote":true,"nodes":[{"content":"ExecuteReader","pos":[0,13]}]},{"pos":[85920,85921],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85985,86000],"content":"CommandBehavior","needQuote":true,"nodes":[{"content":"CommandBehavior","pos":[0,15]}]},{"pos":[86053,86054],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86167,86180],"content":"ExecuteReader","needQuote":true,"nodes":[{"content":"ExecuteReader","pos":[0,13]}]},{"pos":[86242,86243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86307,86322],"content":"CommandBehavior","needQuote":true,"nodes":[{"content":"CommandBehavior","pos":[0,15]}]},{"pos":[86375,86376],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86623,86632],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[86735,86742],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[86794,86795],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86822,86823],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86897,86904],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[86956,86957],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86984,86985],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87148,87159],"content":"DbException","needQuote":true,"nodes":[{"content":"DbException","pos":[0,11]}]},{"pos":[87354,87371],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Data.Common.DbCommand\n  commentId: T:System.Data.Common.DbCommand\n  id: DbCommand\n  parent: System.Data.Common\n  children:\n  - System.Data.Common.DbCommand.#ctor\n  - System.Data.Common.DbCommand.Cancel\n  - System.Data.Common.DbCommand.CommandText\n  - System.Data.Common.DbCommand.CommandTimeout\n  - System.Data.Common.DbCommand.CommandType\n  - System.Data.Common.DbCommand.Connection\n  - System.Data.Common.DbCommand.CreateDbParameter\n  - System.Data.Common.DbCommand.CreateParameter\n  - System.Data.Common.DbCommand.DbConnection\n  - System.Data.Common.DbCommand.DbParameterCollection\n  - System.Data.Common.DbCommand.DbTransaction\n  - System.Data.Common.DbCommand.DesignTimeVisible\n  - System.Data.Common.DbCommand.Dispose\n  - System.Data.Common.DbCommand.Dispose(System.Boolean)\n  - System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)\n  - System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\n  - System.Data.Common.DbCommand.ExecuteNonQuery\n  - System.Data.Common.DbCommand.ExecuteNonQueryAsync\n  - System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)\n  - System.Data.Common.DbCommand.ExecuteReader\n  - System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)\n  - System.Data.Common.DbCommand.ExecuteReaderAsync\n  - System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)\n  - System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\n  - System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)\n  - System.Data.Common.DbCommand.ExecuteScalar\n  - System.Data.Common.DbCommand.ExecuteScalarAsync\n  - System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)\n  - System.Data.Common.DbCommand.Parameters\n  - System.Data.Common.DbCommand.Prepare\n  - System.Data.Common.DbCommand.System#Data#IDbCommand#Connection\n  - System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter\n  - System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader\n  - System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)\n  - System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters\n  - System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction\n  - System.Data.Common.DbCommand.Transaction\n  - System.Data.Common.DbCommand.UpdatedRowSource\n  langs:\n  - csharp\n  - vb\n  name: DbCommand\n  fullName: System.Data.Common.DbCommand\n  type: Class\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DbCommand\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 15\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Represents an SQL statement or stored procedure to execute against a data source. Provides a base class for database-specific classes that represent commands. <xref href=\\\"System.Data.Common.DbCommand.ExecuteNonQueryAsync\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  syntax:\n    content: 'public abstract class DbCommand : IDbCommand, IDisposable'\n    content.vb: >-\n      Public MustInherit Class DbCommand\n          Implements IDbCommand, IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Data.IDbCommand\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: DbCommand\n- uid: System.Data.Common.DbCommand.#ctor\n  commentId: M:System.Data.Common.DbCommand.#ctor\n  id: '#ctor'\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: DbCommand()\n  fullName: System.Data.Common.DbCommand.DbCommand()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 18\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Constructs an instance of the <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: protected DbCommand()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: DbCommand.DbCommand()\n- uid: System.Data.Common.DbCommand.CommandText\n  commentId: P:System.Data.Common.DbCommand.CommandText\n  id: CommandText\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: CommandText\n  fullName: System.Data.Common.DbCommand.CommandText\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CommandText\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 27\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the text command to run against the data source.</p>\\n\"\n  syntax:\n    content: public abstract string CommandText { get; set; }\n    content.vb: Public MustOverride Property CommandText As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The text command to execute. The default value is an empty string (\\\"\\\").</p>\\n\"\n  implements:\n  - System.Data.IDbCommand.CommandText\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbCommand.CommandText\n- uid: System.Data.Common.DbCommand.CommandTimeout\n  commentId: P:System.Data.Common.DbCommand.CommandTimeout\n  id: CommandTimeout\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: CommandTimeout\n  fullName: System.Data.Common.DbCommand.CommandTimeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CommandTimeout\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 33\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the wait time before terminating the attempt to execute a command and generating an error.</p>\\n\"\n  syntax:\n    content: public abstract int CommandTimeout { get; set; }\n    content.vb: Public MustOverride Property CommandTimeout As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The time in seconds to wait for the command to execute.</p>\\n\"\n  implements:\n  - System.Data.IDbCommand.CommandTimeout\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbCommand.CommandTimeout\n- uid: System.Data.Common.DbCommand.CommandType\n  commentId: P:System.Data.Common.DbCommand.CommandType\n  id: CommandType\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: CommandType\n  fullName: System.Data.Common.DbCommand.CommandType\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CommandType\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 39\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Indicates or specifies how the <xref href=\\\"System.Data.Common.DbCommand.CommandText\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is interpreted.</p>\\n\"\n  syntax:\n    content: public abstract CommandType CommandType { get; set; }\n    content.vb: Public MustOverride Property CommandType As CommandType\n    parameters: []\n    return:\n      type: System.Data.CommandType\n      description: \"\\n<p>One of the <xref href=\\\"System.Data.CommandType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. The default is <strong>Text</strong>.</p>\\n\"\n  implements:\n  - System.Data.IDbCommand.CommandType\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbCommand.CommandType\n- uid: System.Data.Common.DbCommand.Connection\n  commentId: P:System.Data.Common.DbCommand.Connection\n  id: Connection\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: Connection\n  fullName: System.Data.Common.DbCommand.Connection\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Connection\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 45\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Data.Common.DbConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used by this <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public DbConnection Connection { get; set; }\n    content.vb: Public Property Connection As DbConnection\n    parameters: []\n    return:\n      type: System.Data.Common.DbConnection\n      description: \"\\n<p>The connection to the data source.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: DbCommand.Connection\n- uid: System.Data.Common.DbCommand.DbConnection\n  commentId: P:System.Data.Common.DbCommand.DbConnection\n  id: DbConnection\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: DbConnection\n  fullName: System.Data.Common.DbCommand.DbConnection\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DbConnection\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 58\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Data.Common.DbConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used by this <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected abstract DbConnection DbConnection { get; set; }\n    content.vb: Protected MustOverride Property DbConnection As DbConnection\n    parameters: []\n    return:\n      type: System.Data.Common.DbConnection\n      description: \"\\n<p>The connection to the data source.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: DbCommand.DbConnection\n- uid: System.Data.Common.DbCommand.DbParameterCollection\n  commentId: P:System.Data.Common.DbCommand.DbParameterCollection\n  id: DbParameterCollection\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: DbParameterCollection\n  fullName: System.Data.Common.DbCommand.DbParameterCollection\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DbParameterCollection\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 64\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the collection of <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: protected abstract DbParameterCollection DbParameterCollection { get; }\n    content.vb: Protected MustOverride ReadOnly Property DbParameterCollection As DbParameterCollection\n    parameters: []\n    return:\n      type: System.Data.Common.DbParameterCollection\n      description: \"\\n<p>The parameters of the SQL statement or stored procedure.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  - get\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbCommand.DbParameterCollection\n- uid: System.Data.Common.DbCommand.DbTransaction\n  commentId: P:System.Data.Common.DbCommand.DbTransaction\n  id: DbTransaction\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: DbTransaction\n  fullName: System.Data.Common.DbCommand.DbTransaction\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DbTransaction\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 69\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Data.Common.DbCommand.DbTransaction\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> within which this <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object executes.</p>\\n\"\n  syntax:\n    content: protected abstract DbTransaction DbTransaction { get; set; }\n    content.vb: Protected MustOverride Property DbTransaction As DbTransaction\n    parameters: []\n    return:\n      type: System.Data.Common.DbTransaction\n      description: \"\\n<p>The transaction within which a Command object of a .NET Framework data provider executes. The default value is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: DbCommand.DbTransaction\n- uid: System.Data.Common.DbCommand.DesignTimeVisible\n  commentId: P:System.Data.Common.DbCommand.DesignTimeVisible\n  id: DesignTimeVisible\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: DesignTimeVisible\n  fullName: System.Data.Common.DbCommand.DesignTimeVisible\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DesignTimeVisible\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 75\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets a value indicating whether the command object should be visible in a customized interface control.</p>\\n\"\n  syntax:\n    content: public abstract bool DesignTimeVisible { get; set; }\n    content.vb: Public MustOverride Property DesignTimeVisible As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong>, if the command object should be visible in a control; otherwise <strong>false</strong>. The default is <strong>true</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbCommand.DesignTimeVisible\n- uid: System.Data.Common.DbCommand.Parameters\n  commentId: P:System.Data.Common.DbCommand.Parameters\n  id: Parameters\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: Parameters\n  fullName: System.Data.Common.DbCommand.Parameters\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parameters\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 81\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the collection of <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects. For more information on parameters, see Configuring Parameters and Parameter Data Types.</p>\\n\"\n  syntax:\n    content: public DbParameterCollection Parameters { get; }\n    content.vb: Public ReadOnly Property Parameters As DbParameterCollection\n    parameters: []\n    return:\n      type: System.Data.Common.DbParameterCollection\n      description: \"\\n<p>The parameters of the SQL statement or stored procedure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DbCommand.Parameters\n- uid: System.Data.Common.DbCommand.System#Data#IDbCommand#Connection\n  commentId: P:System.Data.Common.DbCommand.System#Data#IDbCommand#Connection\n  id: System#Data#IDbCommand#Connection\n  isEii: true\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: IDbCommand.Connection\n  fullName: System.Data.Common.DbCommand.System.Data.IDbCommand.Connection\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDbCommand.Connection\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 107\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Data.IDbConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used by this instance of the <xref href=\\\"System.Data.IDbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: IDbConnection IDbCommand.Connection { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Data.IDbCommand.Connection As IDbConnection Implements IDbCommand.Connection\n    parameters: []\n    return:\n      type: System.Data.IDbConnection\n      description: \"\\n<p>The connection to the data source.</p>\\n\"\n  implements:\n  - System.Data.IDbCommand.Connection\n  modifiers.csharp:\n  - get\n  - set\n  name.vb: System.Data.IDbCommand.Connection\n  nameWithType: DbCommand.IDbCommand.Connection\n  nameWithType.vb: DbCommand.System.Data.IDbCommand.Connection\n- uid: System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters\n  commentId: P:System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters\n  id: System#Data#IDbCommand#Parameters\n  isEii: true\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: IDbCommand.Parameters\n  fullName: System.Data.Common.DbCommand.System.Data.IDbCommand.Parameters\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDbCommand.Parameters\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 131\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Data.IDataParameterCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: IDataParameterCollection IDbCommand.Parameters { get; }\n    content.vb: ReadOnly WriteOnly Property System.Data.IDbCommand.Parameters As IDataParameterCollection Implements IDbCommand.Parameters\n    parameters: []\n    return:\n      type: System.Data.IDataParameterCollection\n      description: \"\\n<p>The parameters of the SQL statement or stored procedure.</p>\\n\"\n  implements:\n  - System.Data.IDbCommand.Parameters\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Data.IDbCommand.Parameters\n  nameWithType: DbCommand.IDbCommand.Parameters\n  nameWithType.vb: DbCommand.System.Data.IDbCommand.Parameters\n- uid: System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction\n  commentId: P:System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction\n  id: System#Data#IDbCommand#Transaction\n  isEii: true\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: IDbCommand.Transaction\n  fullName: System.Data.Common.DbCommand.System.Data.IDbCommand.Transaction\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDbCommand.Transaction\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 119\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Data.Common.DbCommand.DbTransaction\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> within which this <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object executes.</p>\\n\"\n  syntax:\n    content: IDbTransaction IDbCommand.Transaction { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Data.IDbCommand.Transaction As IDbTransaction Implements IDbCommand.Transaction\n    parameters: []\n    return:\n      type: System.Data.IDbTransaction\n      description: \"\\n<p>The transaction within which a <strong>Command</strong> object of a .NET Framework data provider executes. The default value is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n\"\n  implements:\n  - System.Data.IDbCommand.Transaction\n  modifiers.csharp:\n  - get\n  - set\n  name.vb: System.Data.IDbCommand.Transaction\n  nameWithType: DbCommand.IDbCommand.Transaction\n  nameWithType.vb: DbCommand.System.Data.IDbCommand.Transaction\n- uid: System.Data.Common.DbCommand.Transaction\n  commentId: P:System.Data.Common.DbCommand.Transaction\n  id: Transaction\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: Transaction\n  fullName: System.Data.Common.DbCommand.Transaction\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Transaction\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 89\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Data.Common.DbTransaction\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> within which this <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object executes.</p>\\n\"\n  syntax:\n    content: public DbTransaction Transaction { get; set; }\n    content.vb: Public Property Transaction As DbTransaction\n    parameters: []\n    return:\n      type: System.Data.Common.DbTransaction\n      description: \"\\n<p>The transaction within which a <strong>Command</strong> object of a .NET Framework data provider executes. The default value is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: DbCommand.Transaction\n- uid: System.Data.Common.DbCommand.UpdatedRowSource\n  commentId: P:System.Data.Common.DbCommand.UpdatedRowSource\n  id: UpdatedRowSource\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: UpdatedRowSource\n  fullName: System.Data.Common.DbCommand.UpdatedRowSource\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UpdatedRowSource\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 101\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets how command results are applied to the <xref href=\\\"System.Data.DataRow\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> when used by the Update method of a <xref href=\\\"System.Data.Common.DbDataAdapter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract UpdateRowSource UpdatedRowSource { get; set; }\n    content.vb: Public MustOverride Property UpdatedRowSource As UpdateRowSource\n    parameters: []\n    return:\n      type: System.Data.UpdateRowSource\n      description: \"\\n<p>One of the <xref href=\\\"System.Data.UpdateRowSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. The default is <strong>Both</strong> unless the command is automatically generated. Then the default is <strong>None</strong>.</p>\\n\"\n  implements:\n  - System.Data.IDbCommand.UpdatedRowSource\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbCommand.UpdatedRowSource\n- uid: System.Data.Common.DbCommand.Cancel\n  commentId: M:System.Data.Common.DbCommand.Cancel\n  id: Cancel\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: Cancel()\n  fullName: System.Data.Common.DbCommand.Cancel()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Cancel\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 155\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Attempts to cancels the execution of a <xref href=\\\"System.Data.Common.DbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract void Cancel()\n    content.vb: Public MustOverride Sub Cancel\n  implements:\n  - System.Data.IDbCommand.Cancel\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbCommand.Cancel()\n- uid: System.Data.Common.DbCommand.CreateDbParameter\n  commentId: M:System.Data.Common.DbCommand.CreateDbParameter\n  id: CreateDbParameter\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: CreateDbParameter()\n  fullName: System.Data.Common.DbCommand.CreateDbParameter()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDbParameter\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 163\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Creates a new instance of a <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: protected abstract DbParameter CreateDbParameter()\n    content.vb: Protected MustOverride Function CreateDbParameter As DbParameter\n    return:\n      type: System.Data.Common.DbParameter\n      description: \"\\n<p>A <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: DbCommand.CreateDbParameter()\n- uid: System.Data.Common.DbCommand.CreateParameter\n  commentId: M:System.Data.Common.DbCommand.CreateParameter\n  id: CreateParameter\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: CreateParameter()\n  fullName: System.Data.Common.DbCommand.CreateParameter()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateParameter\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 157\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Creates a new instance of a <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public DbParameter CreateParameter()\n    content.vb: Public Function CreateParameter As DbParameter\n    return:\n      type: System.Data.Common.DbParameter\n      description: \"\\n<p>A <xref href=\\\"System.Data.Common.DbParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbCommand.CreateParameter()\n- uid: System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)\n  commentId: M:System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)\n  id: ExecuteDbDataReader(System.Data.CommandBehavior)\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteDbDataReader(CommandBehavior)\n  fullName: System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteDbDataReader\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 165\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Executes the command text against the connection.</p>\\n\"\n  syntax:\n    content: protected abstract DbDataReader ExecuteDbDataReader(CommandBehavior behavior)\n    content.vb: Protected MustOverride Function ExecuteDbDataReader(behavior As CommandBehavior) As DbDataReader\n    parameters:\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: \"\\n<p>An instance of <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Data.Common.DbDataReader\n      description: \"\\n<p>A task representing the operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: DbCommand.ExecuteDbDataReader(CommandBehavior)\n- uid: System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\n  commentId: M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\n  id: ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken)\n  fullName: System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteDbDataReaderAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 235\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Providers should implement this method to provide a non-default implementation for <xref href=\\\"System.Data.Common.DbCommand.ExecuteReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> overloads.</p>\\n<p>The default implementation invokes the synchronous <xref href=\\\"System.Data.Common.DbCommand.ExecuteReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled cancellation token. Exceptions thrown by ExecuteReader will be communicated via the returned Task Exception property.</p>\\n<p>This method accepts a cancellation token that can be used to request the operation to be cancelled early. Implementations may ignore this request.</p>\\n\"\n  syntax:\n    content: protected virtual Task<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)\n    content.vb: Protected Overridable Function ExecuteDbDataReaderAsync(behavior As CommandBehavior, cancellationToken As CancellationToken) As Task(Of DbDataReader)\n    parameters:\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: \"\\n<p>Options for statement execution and data retrieval.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DbCommand.ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken)\n- uid: System.Data.Common.DbCommand.ExecuteNonQuery\n  commentId: M:System.Data.Common.DbCommand.ExecuteNonQuery\n  id: ExecuteNonQuery\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteNonQuery()\n  fullName: System.Data.Common.DbCommand.ExecuteNonQuery()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteNonQuery\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 167\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Executes a SQL statement against a connection object.</p>\\n\"\n  syntax:\n    content: public abstract int ExecuteNonQuery()\n    content.vb: Public MustOverride Function ExecuteNonQuery As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of rows affected.</p>\\n\"\n  implements:\n  - System.Data.IDbCommand.ExecuteNonQuery\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbCommand.ExecuteNonQuery()\n- uid: System.Data.Common.DbCommand.ExecuteNonQueryAsync\n  commentId: M:System.Data.Common.DbCommand.ExecuteNonQueryAsync\n  id: ExecuteNonQueryAsync\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteNonQueryAsync()\n  fullName: System.Data.Common.DbCommand.ExecuteNonQueryAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteNonQueryAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 181\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.Common.DbCommand.ExecuteNonQuery\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which executes a SQL statement against a connection object.</p>\\n<p>Invokes <xref href=\\\"System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with CancellationToken.None.</p>\\n\"\n  syntax:\n    content: public Task<int> ExecuteNonQueryAsync()\n    content.vb: Public Function ExecuteNonQueryAsync As Task(Of Integer)\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbCommand.ExecuteNonQueryAsync()\n- uid: System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)\n  commentId: M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)\n  id: ExecuteNonQueryAsync(System.Threading.CancellationToken)\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteNonQueryAsync(CancellationToken)\n  fullName: System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteNonQueryAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 186\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>This is the asynchronous version of <xref href=\\\"System.Data.Common.DbCommand.ExecuteNonQuery\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Providers should override with an appropriate implementation. The cancellation token may optionally be ignored.</p>\\n<p>The default implementation invokes the synchronous <xref href=\\\"System.Data.Common.DbCommand.ExecuteNonQuery\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled cancellation token.  Exceptions thrown by <xref href=\\\"System.Data.Common.DbCommand.ExecuteNonQuery\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be communicated via the returned Task Exception property.</p>\\n<p>Do not invoke other methods and properties of the <strong>DbCommand</strong> object until the returned Task is complete.</p>\\n\"\n  syntax:\n    content: public virtual Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken)\n    content.vb: Public Overridable Function ExecuteNonQueryAsync(cancellationToken As CancellationToken) As Task(Of Integer)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbCommand.ExecuteNonQueryAsync(CancellationToken)\n- uid: System.Data.Common.DbCommand.ExecuteReader\n  commentId: M:System.Data.Common.DbCommand.ExecuteReader\n  id: ExecuteReader\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteReader()\n  fullName: System.Data.Common.DbCommand.ExecuteReader()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteReader\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 169\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Executes the <xref href=\\\"System.Data.Common.DbCommand.CommandText\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> against the <xref href=\\\"System.Data.Common.DbCommand.Connection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and returns an <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public DbDataReader ExecuteReader()\n    content.vb: Public Function ExecuteReader As DbDataReader\n    return:\n      type: System.Data.Common.DbDataReader\n      description: \"\\n<p>A <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbCommand.ExecuteReader()\n- uid: System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)\n  commentId: M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)\n  id: ExecuteReader(System.Data.CommandBehavior)\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteReader(CommandBehavior)\n  fullName: System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteReader\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 175\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Executes the <xref href=\\\"System.Data.Common.DbCommand.CommandText\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> against the <xref href=\\\"System.Data.Common.DbCommand.Connection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and returns an <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using one of the <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. </p>\\n\"\n  syntax:\n    content: public DbDataReader ExecuteReader(CommandBehavior behavior)\n    content.vb: Public Function ExecuteReader(behavior As CommandBehavior) As DbDataReader\n    parameters:\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: \"\\n<p>One of the <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n    return:\n      type: System.Data.Common.DbDataReader\n      description: \"\\n<p>An <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbCommand.ExecuteReader(CommandBehavior)\n- uid: System.Data.Common.DbCommand.ExecuteReaderAsync\n  commentId: M:System.Data.Common.DbCommand.ExecuteReaderAsync\n  id: ExecuteReaderAsync\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteReaderAsync()\n  fullName: System.Data.Common.DbCommand.ExecuteReaderAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteReaderAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 215\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.Common.DbCommand.ExecuteReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which executes the <xref href=\\\"System.Data.Common.DbCommand.CommandText\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> against the <xref href=\\\"System.Data.Common.DbCommand.Connection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns a <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>Invokes <xref href=\\\"System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with CancellationToken.None.</p>\\n\"\n  syntax:\n    content: public Task<DbDataReader> ExecuteReaderAsync()\n    content.vb: Public Function ExecuteReaderAsync As Task(Of DbDataReader)\n    return:\n      type: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbCommand.ExecuteReaderAsync()\n- uid: System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)\n  commentId: M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)\n  id: ExecuteReaderAsync(System.Data.CommandBehavior)\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteReaderAsync(CommandBehavior)\n  fullName: System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteReaderAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 225\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.Common.DbCommand.ExecuteReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which executes the <xref href=\\\"System.Data.Common.DbCommand.CommandText\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> against the <xref href=\\\"System.Data.Common.DbCommand.Connection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns a <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>Invokes <xref href=\\\"System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public Task<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior)\n    content.vb: Public Function ExecuteReaderAsync(behavior As CommandBehavior) As Task(Of DbDataReader)\n    parameters:\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: \"\\n<p>One of the <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbCommand.ExecuteReaderAsync(CommandBehavior)\n- uid: System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\n  commentId: M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\n  id: ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteReaderAsync(CommandBehavior, CancellationToken)\n  fullName: System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteReaderAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 230\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Invokes <xref href=\\\"System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public Task<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)\n    content.vb: Public Function ExecuteReaderAsync(behavior As CommandBehavior, cancellationToken As CancellationToken) As Task(Of DbDataReader)\n    parameters:\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: \"\\n<p>One of the <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbCommand.ExecuteReaderAsync(CommandBehavior, CancellationToken)\n- uid: System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)\n  commentId: M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)\n  id: ExecuteReaderAsync(System.Threading.CancellationToken)\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteReaderAsync(CancellationToken)\n  fullName: System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteReaderAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 220\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.Common.DbCommand.ExecuteReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which executes the <xref href=\\\"System.Data.Common.DbCommand.CommandText\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> against the <xref href=\\\"System.Data.Common.DbCommand.Connection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns a <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This method propagates a notification that operations should be canceled.</p>\\n<p>Invokes <xref href=\\\"System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public Task<DbDataReader> ExecuteReaderAsync(CancellationToken cancellationToken)\n    content.vb: Public Function ExecuteReaderAsync(cancellationToken As CancellationToken) As Task(Of DbDataReader)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbCommand.ExecuteReaderAsync(CancellationToken)\n- uid: System.Data.Common.DbCommand.ExecuteScalar\n  commentId: M:System.Data.Common.DbCommand.ExecuteScalar\n  id: ExecuteScalar\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteScalar()\n  fullName: System.Data.Common.DbCommand.ExecuteScalar()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteScalar\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 298\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.</p>\\n\"\n  syntax:\n    content: public abstract object ExecuteScalar()\n    content.vb: Public MustOverride Function ExecuteScalar As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>The first column of the first row in the result set.</p>\\n\"\n  implements:\n  - System.Data.IDbCommand.ExecuteScalar\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbCommand.ExecuteScalar()\n- uid: System.Data.Common.DbCommand.ExecuteScalarAsync\n  commentId: M:System.Data.Common.DbCommand.ExecuteScalarAsync\n  id: ExecuteScalarAsync\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteScalarAsync()\n  fullName: System.Data.Common.DbCommand.ExecuteScalarAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteScalarAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 264\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>An asynchronous version of <xref href=\\\"System.Data.Common.DbCommand.ExecuteScalar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.</p>\\n<p>Invokes <xref href=\\\"System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with CancellationToken.None.</p>\\n\"\n  syntax:\n    content: public Task<object> ExecuteScalarAsync()\n    content.vb: Public Function ExecuteScalarAsync As Task(Of Object)\n    return:\n      type: System.Threading.Tasks.Task{System.Object}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbCommand.ExecuteScalarAsync()\n- uid: System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)\n  commentId: M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)\n  id: ExecuteScalarAsync(System.Threading.CancellationToken)\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: ExecuteScalarAsync(CancellationToken)\n  fullName: System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExecuteScalarAsync\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 269\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>This is the asynchronous version of <xref href=\\\"System.Data.Common.DbCommand.ExecuteScalar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Providers should override with an appropriate implementation. The cancellation token may optionally be ignored.</p>\\n<p>The default implementation invokes the synchronous <xref href=\\\"System.Data.Common.DbCommand.ExecuteScalar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled cancellation token. Exceptions thrown by ExecuteScalar will be communicated via the returned Task Exception property.</p>\\n<p>Do not invoke other methods and properties of the <strong>DbCommand</strong> object until the returned Task is complete.</p>\\n\"\n  syntax:\n    content: public virtual Task<object> ExecuteScalarAsync(CancellationToken cancellationToken)\n    content.vb: Public Overridable Function ExecuteScalarAsync(cancellationToken As CancellationToken) As Task(Of Object)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The token to monitor for cancellation requests.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Object}\n      description: \"\\n<p>A task representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.Data.Common.DbException\n    commentId: T:System.Data.Common.DbException\n    description: \"\\n<p>An error occurred while executing the command text.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbCommand.ExecuteScalarAsync(CancellationToken)\n- uid: System.Data.Common.DbCommand.Prepare\n  commentId: M:System.Data.Common.DbCommand.Prepare\n  id: Prepare\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: Prepare()\n  fullName: System.Data.Common.DbCommand.Prepare()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Prepare\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 300\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Creates a prepared (or compiled) version of the command on the data source.</p>\\n\"\n  syntax:\n    content: public abstract void Prepare()\n    content.vb: Public MustOverride Sub Prepare\n  implements:\n  - System.Data.IDbCommand.Prepare\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbCommand.Prepare()\n- uid: System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter\n  commentId: M:System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter\n  id: System#Data#IDbCommand#CreateParameter\n  isEii: true\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: IDbCommand.CreateParameter()\n  fullName: System.Data.Common.DbCommand.System.Data.IDbCommand.CreateParameter()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDbCommand.CreateParameter\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 311\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Creates a new instance of an <xref href=\\\"System.Data.IDbDataParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: IDbDataParameter IDbCommand.CreateParameter()\n    content.vb: Function System.Data.IDbCommand.CreateParameter As IDbDataParameter Implements IDbCommand.CreateParameter\n    return:\n      type: System.Data.IDbDataParameter\n      description: \"\\n<p>An <strong>IDbDataParameter</strong> object.</p>\\n\"\n  implements:\n  - System.Data.IDbCommand.CreateParameter\n  name.vb: System.Data.IDbCommand.CreateParameter()\n  nameWithType: DbCommand.IDbCommand.CreateParameter()\n  nameWithType.vb: DbCommand.System.Data.IDbCommand.CreateParameter()\n- uid: System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader\n  commentId: M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader\n  id: System#Data#IDbCommand#ExecuteReader\n  isEii: true\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: IDbCommand.ExecuteReader()\n  fullName: System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDbCommand.ExecuteReader\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 316\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Executes the <xref href=\\\"System.Data.IDbCommand.CommandText\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> against the <xref href=\\\"System.Data.IDbCommand.Connection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and builds an <xref href=\\\"System.Data.IDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: IDataReader IDbCommand.ExecuteReader()\n    content.vb: Function System.Data.IDbCommand.ExecuteReader As IDataReader Implements IDbCommand.ExecuteReader\n    return:\n      type: System.Data.IDataReader\n      description: \"\\n<p>An <xref href=\\\"System.Data.IDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.Data.IDbCommand.ExecuteReader\n  name.vb: System.Data.IDbCommand.ExecuteReader()\n  nameWithType: DbCommand.IDbCommand.ExecuteReader()\n  nameWithType.vb: DbCommand.System.Data.IDbCommand.ExecuteReader()\n- uid: System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)\n  commentId: M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)\n  id: System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)\n  isEii: true\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: IDbCommand.ExecuteReader(CommandBehavior)\n  fullName: System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Data.IDbCommand.ExecuteReader\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 321\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Executes the <xref href=\\\"System.Data.IDbCommand.CommandText\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> against the <xref href=\\\"System.Data.IDbCommand.Connection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and builds an <xref href=\\\"System.Data.IDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using one of the <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: IDataReader IDbCommand.ExecuteReader(CommandBehavior behavior)\n    content.vb: Function System.Data.IDbCommand.ExecuteReader(behavior As CommandBehavior) As IDataReader Implements IDbCommand.ExecuteReader\n    parameters:\n    - id: behavior\n      type: System.Data.CommandBehavior\n      description: \"\\n<p>One of the <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n    return:\n      type: System.Data.IDataReader\n      description: \"\\n<p>An <xref href=\\\"System.Data.IDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)\n  name.vb: System.Data.IDbCommand.ExecuteReader(CommandBehavior)\n  nameWithType: DbCommand.IDbCommand.ExecuteReader(CommandBehavior)\n  nameWithType.vb: DbCommand.System.Data.IDbCommand.ExecuteReader(CommandBehavior)\n- uid: System.Data.Common.DbCommand.Dispose\n  commentId: M:System.Data.Common.DbCommand.Dispose\n  id: Dispose\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Data.Common.DbCommand.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 301\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbCommand.Dispose()\n- uid: System.Data.Common.DbCommand.Dispose(System.Boolean)\n  commentId: M:System.Data.Common.DbCommand.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Data.Common.DbCommand\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Data.Common.DbCommand.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Data.Common/src/System/Data/Common/DbCommand.cs\n    startLine: 307\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DbCommand.Dispose(Boolean)\nreferences:\n- uid: System.Data.Common\n  isExternal: false\n  name: System.Data.Common\n  fullName: System.Data.Common\n  nameWithType: System.Data.Common\n  commentId: N:System.Data.Common\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Data.IDbCommand\n  parent: System.Data\n  isExternal: false\n  name: IDbCommand\n  fullName: System.Data.IDbCommand\n  nameWithType: IDbCommand\n  commentId: T:System.Data.IDbCommand\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Data\n  isExternal: false\n  name: System.Data\n  fullName: System.Data\n  nameWithType: System.Data\n  commentId: N:System.Data\n- uid: System.Data.IDbCommand.CommandText\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: CommandText\n  fullName: System.Data.IDbCommand.CommandText\n  nameWithType: IDbCommand.CommandText\n  commentId: P:System.Data.IDbCommand.CommandText\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Data.IDbCommand.CommandTimeout\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: CommandTimeout\n  fullName: System.Data.IDbCommand.CommandTimeout\n  nameWithType: IDbCommand.CommandTimeout\n  commentId: P:System.Data.IDbCommand.CommandTimeout\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Data.IDbCommand.CommandType\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: CommandType\n  fullName: System.Data.IDbCommand.CommandType\n  nameWithType: IDbCommand.CommandType\n  commentId: P:System.Data.IDbCommand.CommandType\n- uid: System.Data.CommandType\n  parent: System.Data\n  isExternal: false\n  name: CommandType\n  fullName: System.Data.CommandType\n  nameWithType: CommandType\n  commentId: T:System.Data.CommandType\n- uid: System.Data.Common.DbConnection\n  parent: System.Data.Common\n  isExternal: false\n  name: DbConnection\n  fullName: System.Data.Common.DbConnection\n  nameWithType: DbConnection\n  commentId: T:System.Data.Common.DbConnection\n- uid: System.Data.Common.DbParameterCollection\n  parent: System.Data.Common\n  isExternal: false\n  name: DbParameterCollection\n  fullName: System.Data.Common.DbParameterCollection\n  nameWithType: DbParameterCollection\n  commentId: T:System.Data.Common.DbParameterCollection\n- uid: System.Data.Common.DbTransaction\n  parent: System.Data.Common\n  isExternal: false\n  name: DbTransaction\n  fullName: System.Data.Common.DbTransaction\n  nameWithType: DbTransaction\n  commentId: T:System.Data.Common.DbTransaction\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Data.IDbCommand.Connection\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Connection\n  fullName: System.Data.IDbCommand.Connection\n  nameWithType: IDbCommand.Connection\n  commentId: P:System.Data.IDbCommand.Connection\n- uid: System.Data.IDbConnection\n  parent: System.Data\n  isExternal: false\n  name: IDbConnection\n  fullName: System.Data.IDbConnection\n  nameWithType: IDbConnection\n  commentId: T:System.Data.IDbConnection\n- uid: System.Data.IDbCommand.Parameters\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Parameters\n  fullName: System.Data.IDbCommand.Parameters\n  nameWithType: IDbCommand.Parameters\n  commentId: P:System.Data.IDbCommand.Parameters\n- uid: System.Data.IDataParameterCollection\n  parent: System.Data\n  isExternal: false\n  name: IDataParameterCollection\n  fullName: System.Data.IDataParameterCollection\n  nameWithType: IDataParameterCollection\n  commentId: T:System.Data.IDataParameterCollection\n- uid: System.Data.IDbCommand.Transaction\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Transaction\n  fullName: System.Data.IDbCommand.Transaction\n  nameWithType: IDbCommand.Transaction\n  commentId: P:System.Data.IDbCommand.Transaction\n- uid: System.Data.IDbTransaction\n  parent: System.Data\n  isExternal: false\n  name: IDbTransaction\n  fullName: System.Data.IDbTransaction\n  nameWithType: IDbTransaction\n  commentId: T:System.Data.IDbTransaction\n- uid: System.Data.IDbCommand.UpdatedRowSource\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: UpdatedRowSource\n  fullName: System.Data.IDbCommand.UpdatedRowSource\n  nameWithType: IDbCommand.UpdatedRowSource\n  commentId: P:System.Data.IDbCommand.UpdatedRowSource\n- uid: System.Data.UpdateRowSource\n  parent: System.Data\n  isExternal: false\n  name: UpdateRowSource\n  fullName: System.Data.UpdateRowSource\n  nameWithType: UpdateRowSource\n  commentId: T:System.Data.UpdateRowSource\n- uid: System.Data.IDbCommand.Cancel\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Cancel()\n  fullName: System.Data.IDbCommand.Cancel()\n  spec.csharp:\n  - uid: System.Data.IDbCommand.Cancel\n    name: Cancel\n    fullName: System.Data.IDbCommand.Cancel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbCommand.Cancel\n    name: Cancel\n    fullName: System.Data.IDbCommand.Cancel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDbCommand.Cancel()\n  commentId: M:System.Data.IDbCommand.Cancel\n- uid: System.Data.Common.DbParameter\n  parent: System.Data.Common\n  isExternal: false\n  name: DbParameter\n  fullName: System.Data.Common.DbParameter\n  nameWithType: DbParameter\n  commentId: T:System.Data.Common.DbParameter\n- uid: System.Data.CommandBehavior\n  parent: System.Data\n  isExternal: false\n  name: CommandBehavior\n  fullName: System.Data.CommandBehavior\n  nameWithType: CommandBehavior\n  commentId: T:System.Data.CommandBehavior\n- uid: System.Data.Common.DbDataReader\n  parent: System.Data.Common\n  isExternal: false\n  name: DbDataReader\n  fullName: System.Data.Common.DbDataReader\n  nameWithType: DbDataReader\n  commentId: T:System.Data.Common.DbDataReader\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading.Tasks.Task{System.Data.Common.DbDataReader}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<DbDataReader>\n  fullName: System.Threading.Tasks.Task<System.Data.Common.DbDataReader>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Data.Common.DbDataReader)\n  name.vb: Task(Of DbDataReader)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Data.Common.DbDataReader\n    name: DbDataReader\n    fullName: System.Data.Common.DbDataReader\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Data.Common.DbDataReader\n    name: DbDataReader\n    fullName: System.Data.Common.DbDataReader\n  - name: )\n    fullName: )\n  nameWithType: Task<DbDataReader>\n  nameWithType.vb: Task(Of DbDataReader)\n  commentId: T:System.Threading.Tasks.Task{System.Data.Common.DbDataReader}\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Data.IDbCommand.ExecuteNonQuery\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: ExecuteNonQuery()\n  fullName: System.Data.IDbCommand.ExecuteNonQuery()\n  spec.csharp:\n  - uid: System.Data.IDbCommand.ExecuteNonQuery\n    name: ExecuteNonQuery\n    fullName: System.Data.IDbCommand.ExecuteNonQuery\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbCommand.ExecuteNonQuery\n    name: ExecuteNonQuery\n    fullName: System.Data.IDbCommand.ExecuteNonQuery\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDbCommand.ExecuteNonQuery()\n  commentId: M:System.Data.IDbCommand.ExecuteNonQuery\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)\n  name.vb: Task(Of Int32)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<Int32>\n  nameWithType.vb: Task(Of Int32)\n  commentId: T:System.Threading.Tasks.Task{System.Int32}\n- uid: System.Data.IDbCommand.ExecuteScalar\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: ExecuteScalar()\n  fullName: System.Data.IDbCommand.ExecuteScalar()\n  spec.csharp:\n  - uid: System.Data.IDbCommand.ExecuteScalar\n    name: ExecuteScalar\n    fullName: System.Data.IDbCommand.ExecuteScalar\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbCommand.ExecuteScalar\n    name: ExecuteScalar\n    fullName: System.Data.IDbCommand.ExecuteScalar\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDbCommand.ExecuteScalar()\n  commentId: M:System.Data.IDbCommand.ExecuteScalar\n- uid: System.Threading.Tasks.Task{System.Object}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Object>\n  fullName: System.Threading.Tasks.Task<System.Object>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Object)\n  name.vb: Task(Of Object)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<Object>\n  nameWithType.vb: Task(Of Object)\n  commentId: T:System.Threading.Tasks.Task{System.Object}\n- uid: System.Data.IDbCommand.Prepare\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: Prepare()\n  fullName: System.Data.IDbCommand.Prepare()\n  spec.csharp:\n  - uid: System.Data.IDbCommand.Prepare\n    name: Prepare\n    fullName: System.Data.IDbCommand.Prepare\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbCommand.Prepare\n    name: Prepare\n    fullName: System.Data.IDbCommand.Prepare\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDbCommand.Prepare()\n  commentId: M:System.Data.IDbCommand.Prepare\n- uid: System.Data.IDbCommand.CreateParameter\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: CreateParameter()\n  fullName: System.Data.IDbCommand.CreateParameter()\n  spec.csharp:\n  - uid: System.Data.IDbCommand.CreateParameter\n    name: CreateParameter\n    fullName: System.Data.IDbCommand.CreateParameter\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbCommand.CreateParameter\n    name: CreateParameter\n    fullName: System.Data.IDbCommand.CreateParameter\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDbCommand.CreateParameter()\n  commentId: M:System.Data.IDbCommand.CreateParameter\n- uid: System.Data.IDbDataParameter\n  parent: System.Data\n  isExternal: false\n  name: IDbDataParameter\n  fullName: System.Data.IDbDataParameter\n  nameWithType: IDbDataParameter\n  commentId: T:System.Data.IDbDataParameter\n- uid: System.Data.IDbCommand.ExecuteReader\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: ExecuteReader()\n  fullName: System.Data.IDbCommand.ExecuteReader()\n  spec.csharp:\n  - uid: System.Data.IDbCommand.ExecuteReader\n    name: ExecuteReader\n    fullName: System.Data.IDbCommand.ExecuteReader\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbCommand.ExecuteReader\n    name: ExecuteReader\n    fullName: System.Data.IDbCommand.ExecuteReader\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDbCommand.ExecuteReader()\n  commentId: M:System.Data.IDbCommand.ExecuteReader\n- uid: System.Data.IDataReader\n  parent: System.Data\n  isExternal: false\n  name: IDataReader\n  fullName: System.Data.IDataReader\n  nameWithType: IDataReader\n  commentId: T:System.Data.IDataReader\n- uid: System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)\n  parent: System.Data.IDbCommand\n  isExternal: false\n  name: ExecuteReader(CommandBehavior)\n  fullName: System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)\n  spec.csharp:\n  - uid: System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)\n    name: ExecuteReader\n    fullName: System.Data.IDbCommand.ExecuteReader\n  - name: (\n    fullName: (\n  - uid: System.Data.CommandBehavior\n    name: CommandBehavior\n    fullName: System.Data.CommandBehavior\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)\n    name: ExecuteReader\n    fullName: System.Data.IDbCommand.ExecuteReader\n  - name: (\n    fullName: (\n  - uid: System.Data.CommandBehavior\n    name: CommandBehavior\n    fullName: System.Data.CommandBehavior\n  - name: )\n    fullName: )\n  nameWithType: IDbCommand.ExecuteReader(CommandBehavior)\n  commentId: M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Data.Common.DbException\n  isExternal: false\n  name: DbException\n  fullName: System.Data.Common.DbException\n  nameWithType: DbException\n  commentId: T:System.Data.Common.DbException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}