{"nodes":[{"pos":[1170,1191],"content":"EventWrittenEventArgs","needQuote":true,"nodes":[{"content":"EventWrittenEventArgs","pos":[0,21]}]},{"pos":[2764,2774],"content":"ActivityId","needQuote":true,"nodes":[{"content":"ActivityId","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The activity ID on the thread that the event was written to.","pos":[3633,3698],"source":"\\n<p>The activity ID on the thread that the event was written to."},{"content":"&lt;/p&gt;\\n","pos":[3699,3705],"source":" </p>\\n"},{"pos":[4436,4443],"content":"Channel","needQuote":true,"nodes":[{"content":"Channel","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The channel for the event.&lt;/p&gt;\\n","pos":[5170,5207],"source":"\\n<p>The channel for the event.</p>\\n"},{"pos":[5578,5585],"content":"EventId","needQuote":true,"nodes":[{"content":"EventId","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The event identifier.&lt;/p&gt;\\n","pos":[6266,6298],"source":"\\n<p>The event identifier.</p>\\n"},{"pos":[6675,6684],"content":"EventName","needQuote":true,"nodes":[{"content":"EventName","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The name of the event.&lt;/p&gt;\\n","pos":[7377,7410],"source":"\\n<p>The name of the event.</p>\\n"},{"pos":[7795,7806],"content":"EventSource","needQuote":true,"nodes":[{"content":"EventSource","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The event source object.&lt;/p&gt;\\n","pos":[8544,8579],"source":"\\n<p>The event source object.</p>\\n"},{"pos":[8957,8965],"content":"Keywords","needQuote":true,"nodes":[{"content":"Keywords","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The keywords for the event.&lt;/p&gt;\\n","pos":[9700,9738],"source":"\\n<p>The keywords for the event.</p>\\n"},{"pos":[10104,10109],"content":"Level","needQuote":true,"nodes":[{"content":"Level","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The level of the event.&lt;/p&gt;\\n","pos":[10819,10853],"source":"\\n<p>The level of the event.</p>\\n"},{"pos":[11222,11229],"content":"Message","needQuote":true,"nodes":[{"content":"Message","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The message for the event.&lt;/p&gt;\\n","pos":[11918,11955],"source":"\\n<p>The message for the event.</p>\\n"},{"pos":[12323,12329],"content":"Opcode","needQuote":true,"nodes":[{"content":"Opcode","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The operation code for the event.&lt;/p&gt;\\n","pos":[13056,13100],"source":"\\n<p>The operation code for the event.</p>\\n"},{"pos":[13470,13477],"content":"Payload","needQuote":true,"nodes":[{"content":"Payload","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The payload for the event.&lt;/p&gt;\\n","pos":[14260,14297],"source":"\\n<p>The payload for the event.</p>\\n"},{"pos":[14683,14695],"content":"PayloadNames","needQuote":true,"nodes":[{"content":"PayloadNames","pos":[0,12]}]},{"pos":[16077,16094],"content":"RelatedActivityId","needQuote":true,"nodes":[{"content":"RelatedActivityId","pos":[0,17]}]},{"pos":[17966,17970],"content":"Tags","needQuote":true,"nodes":[{"content":"Tags","pos":[0,4]}]},{"pos":[19339,19343],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The task for the event.&lt;/p&gt;\\n","pos":[20046,20080],"source":"\\n<p>The task for the event.</p>\\n"},{"pos":[20448,20455],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The version of the event.&lt;/p&gt;\\n","pos":[21137,21173],"source":"\\n<p>The version of the event.</p>\\n"},{"pos":[21374,21400],"content":"System.Diagnostics.Tracing","needQuote":true,"nodes":[{"content":"System.Diagnostics.Tracing","pos":[0,26]}]},{"pos":[21591,21597],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21745,21754],"content":"EventArgs","needQuote":true,"nodes":[{"content":"EventArgs","pos":[0,9]}]},{"pos":[21926,21931],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[22118,22128],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[22223,22231],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22300,22301],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22328,22329],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22399,22407],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22476,22477],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22504,22505],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22688,22702],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22821,22827],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22894,22895],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22945,22951],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23011,23012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23095,23101],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23168,23169],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23219,23225],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23285,23286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23500,23522],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[23670,23676],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23743,23744],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23794,23800],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23861,23862]},{"pos":[23917,23923],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23983,23984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24081,24087],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24154,24155],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24205,24211],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24272,24273]},{"pos":[24328,24334],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24394,24395],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24640,24671],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[24837,24852],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24928,24929],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24979,24985],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25046,25047]},{"pos":[25102,25108],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25168,25169],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25275,25290],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[25366,25367],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25417,25423],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25484,25485]},{"pos":[25540,25546],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25606,25607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25837,25850],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25951,25962],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26034,26035],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26062,26063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26136,26147],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26219,26220],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26247,26248],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26423,26432],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[26525,26532],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26600,26601],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26628,26629],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26698,26705],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26773,26774],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26801,26802],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26977,26994],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[27103,27118],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27194,27195],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27222,27223],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27300,27315],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27391,27392],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27419,27420],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27565,27571],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[27700,27704],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[27889,27901],"content":"EventChannel","needQuote":true,"nodes":[{"content":"EventChannel","pos":[0,12]}]},{"pos":[28103,28108],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28250,28256],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[28446,28457],"content":"EventSource","needQuote":true,"nodes":[{"content":"EventSource","pos":[0,11]}]},{"pos":[28704,28717],"content":"EventKeywords","needQuote":true,"nodes":[{"content":"EventKeywords","pos":[0,13]}]},{"pos":[28967,28977],"content":"EventLevel","needQuote":true,"nodes":[{"content":"EventLevel","pos":[0,10]}]},{"pos":[29219,29230],"content":"EventOpcode","needQuote":true,"nodes":[{"content":"EventOpcode","pos":[0,11]}]},{"pos":[29551,29577],"content":"ReadOnlyCollection<Object>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;Object&gt;","pos":[0,26],"source":"ReadOnlyCollection<Object>"}]},{"pos":[29865,29883],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[29979,29980],"content":"<","needQuote":true,"nodes":[]},{"pos":[30030,30036],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30200,30218],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[30315,30318]},{"pos":[30375,30381],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30441,30442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30718,30739],"content":"ReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;T&gt;","pos":[0,21],"source":"ReadOnlyCollection<T>"}]},{"pos":[30998,31016],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[31091,31092],"content":"<","needQuote":true,"nodes":[]},{"pos":[31119,31120],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[31251,31269],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[31345,31348]},{"pos":[31382,31383],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[31410,31411],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31643,31673],"content":"System.Collections.ObjectModel","needQuote":true,"nodes":[{"content":"System.Collections.ObjectModel","pos":[0,30]}]},{"pos":[31997,32023],"content":"ReadOnlyCollection<String>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;String&gt;","pos":[0,26],"source":"ReadOnlyCollection<String>"}]},{"pos":[32311,32329],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"pos":[32425,32426],"content":"<","needQuote":true,"nodes":[]},{"pos":[32476,32482],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[32646,32664],"content":"ReadOnlyCollection","needQuote":true,"nodes":[{"content":"ReadOnlyCollection","pos":[0,18]}]},{"content":"(Of","pos":[32761,32764]},{"pos":[32821,32827],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[32887,32888],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33186,33195],"content":"EventTags","needQuote":true,"nodes":[{"content":"EventTags","pos":[0,9]}]},{"pos":[33432,33441],"content":"EventTask","needQuote":true,"nodes":[{"content":"EventTask","pos":[0,9]}]},{"pos":[33633,33637],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]}],"content":"items:\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs\n  commentId: T:System.Diagnostics.Tracing.EventWrittenEventArgs\n  id: EventWrittenEventArgs\n  parent: System.Diagnostics.Tracing\n  children:\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.Channel\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.EventId\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.EventName\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.EventSource\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.Keywords\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.Level\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.Message\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.Opcode\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.Payload\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.PayloadNames\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.Tags\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.Task\n  - System.Diagnostics.Tracing.EventWrittenEventArgs.Version\n  langs:\n  - csharp\n  - vb\n  name: EventWrittenEventArgs\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventWrittenEventArgs\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4789\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Provides data for the <xref href=\\\"System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> callback.</p>\\n\"\n  syntax:\n    content: 'public class EventWrittenEventArgs : EventArgs'\n    content.vb: >-\n      Public Class EventWrittenEventArgs\n          Inherits EventArgs\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: EventWrittenEventArgs\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId\n  id: ActivityId\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: ActivityId\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ActivityId\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4819\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Gets the activity ID on the thread that the event was written to. </p>\\n\"\n  syntax:\n    content: >-\n      public Guid ActivityId\n\n      {\n          [SecurityCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property ActivityId As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The activity ID on the thread that the event was written to. </p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId\n    commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId\n  - type: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\n    commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.ActivityId\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Channel\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Channel\n  id: Channel\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Channel\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Channel\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Channel\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4952\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the channel for the event.</p>\\n\"\n  syntax:\n    content: public EventChannel Channel { get; }\n    content.vb: Public ReadOnly Property Channel As EventChannel\n    parameters: []\n    return:\n      type: System.Diagnostics.Tracing.EventChannel\n      description: \"\\n<p>The channel for the event.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.Channel\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.EventId\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.EventId\n  id: EventId\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: EventId\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.EventId\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventId\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4814\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the event identifier.</p>\\n\"\n  syntax:\n    content: public int EventId { get; }\n    content.vb: Public ReadOnly Property EventId As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The event identifier.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.EventId\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.EventName\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.EventName\n  id: EventName\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: EventName\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.EventName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventName\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4794\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the name of the event.</p>\\n\"\n  syntax:\n    content: public string EventName { get; }\n    content.vb: Public ReadOnly Property EventName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the event.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.EventName\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.EventSource\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.EventSource\n  id: EventSource\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: EventSource\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.EventSource\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventSource\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4873\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the event source object.</p>\\n\"\n  syntax:\n    content: public EventSource EventSource { get; }\n    content.vb: Public ReadOnly Property EventSource As EventSource\n    parameters: []\n    return:\n      type: System.Diagnostics.Tracing.EventSource\n      description: \"\\n<p>The event source object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.EventSource\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Keywords\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Keywords\n  id: Keywords\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Keywords\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Keywords\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Keywords\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4878\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the keywords for the event.</p>\\n\"\n  syntax:\n    content: public EventKeywords Keywords { get; }\n    content.vb: Public ReadOnly Property Keywords As EventKeywords\n    parameters: []\n    return:\n      type: System.Diagnostics.Tracing.EventKeywords\n      description: \"\\n<p>The keywords for the event.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.Keywords\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Level\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Level\n  id: Level\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Level\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Level\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Level\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4979\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the level of the event.</p>\\n\"\n  syntax:\n    content: public EventLevel Level { get; }\n    content.vb: Public ReadOnly Property Level As EventLevel\n    parameters: []\n    return:\n      type: System.Diagnostics.Tracing.EventLevel\n      description: \"\\n<p>The level of the event.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.Level\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Message\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Message\n  id: Message\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Message\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Message\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Message\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4932\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the message for the event.</p>\\n\"\n  syntax:\n    content: public string Message { get; }\n    content.vb: Public ReadOnly Property Message As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The message for the event.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.Message\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Opcode\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Opcode\n  id: Opcode\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Opcode\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Opcode\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Opcode\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4892\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the operation code for the event.</p>\\n\"\n  syntax:\n    content: public EventOpcode Opcode { get; }\n    content.vb: Public ReadOnly Property Opcode As EventOpcode\n    parameters: []\n    return:\n      type: System.Diagnostics.Tracing.EventOpcode\n      description: \"\\n<p>The operation code for the event.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.Opcode\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Payload\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Payload\n  id: Payload\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Payload\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Payload\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Payload\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4838\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the payload for the event.</p>\\n\"\n  syntax:\n    content: public ReadOnlyCollection<object> Payload { get; }\n    content.vb: Public ReadOnly Property Payload As ReadOnlyCollection(Of Object)\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Object}\n      description: \"\\n<p>The payload for the event.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.Payload\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.PayloadNames\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.PayloadNames\n  id: PayloadNames\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: PayloadNames\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.PayloadNames\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PayloadNames\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4843\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Returns a list of strings that represent the property names of the event.</p>\\n\"\n  syntax:\n    content: public ReadOnlyCollection<string> PayloadNames { get; }\n    content.vb: Public ReadOnly Property PayloadNames As ReadOnlyCollection(Of String)\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}\n      description: \"\\n<p>Returns <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.PayloadNames\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId\n  id: RelatedActivityId\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: RelatedActivityId\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.RelatedActivityId\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RelatedActivityId\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4828\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Gets the identifier of an activity that is related to the activity represented by the current instance. </p>\\n\"\n  syntax:\n    content: >-\n      public Guid RelatedActivityId\n\n      {\n          [SecurityCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property RelatedActivityId As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The identifier of the related activity, or <xref href=\\\"System.Guid.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if there is no related activity.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId\n    commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.ActivityId\n  - type: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\n    commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.RelatedActivityId\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Tags\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Tags\n  id: Tags\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Tags\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Tags\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Tags\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4919\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Returns the tags specified in the call to the <xref href=\\\"System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public EventTags Tags { get; }\n    content.vb: Public ReadOnly Property Tags As EventTags\n    parameters: []\n    return:\n      type: System.Diagnostics.Tracing.EventTags\n      description: \"\\n<p>Returns <xref href=\\\"System.Diagnostics.Tracing.EventTags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.Tags\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Task\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Task\n  id: Task\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Task\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Task\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Task\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4905\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the task for the event.</p>\\n\"\n  syntax:\n    content: public EventTask Task { get; }\n    content.vb: Public ReadOnly Property Task As EventTask\n    parameters: []\n    return:\n      type: System.Diagnostics.Tracing.EventTask\n      description: \"\\n<p>The task for the event.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.Task\n- uid: System.Diagnostics.Tracing.EventWrittenEventArgs.Version\n  commentId: P:System.Diagnostics.Tracing.EventWrittenEventArgs.Version\n  id: Version\n  parent: System.Diagnostics.Tracing.EventWrittenEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Version\n  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs.Version\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Version\n    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs\n    startLine: 4966\n  assemblies:\n  - System.Diagnostics.Tracing\n  namespace: System.Diagnostics.Tracing\n  summary: \"\\n<p>Gets the version of the event.</p>\\n\"\n  syntax:\n    content: public byte Version { get; }\n    content.vb: Public ReadOnly Property Version As Byte\n    parameters: []\n    return:\n      type: System.Byte\n      description: \"\\n<p>The version of the event.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: EventWrittenEventArgs.Version\nreferences:\n- uid: System.Diagnostics.Tracing\n  isExternal: false\n  name: System.Diagnostics.Tracing\n  fullName: System.Diagnostics.Tracing\n  nameWithType: System.Diagnostics.Tracing\n  commentId: N:System.Diagnostics.Tracing\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  fullName: System.EventArgs\n  nameWithType: EventArgs\n  commentId: T:System.EventArgs\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: true\n  name: Empty\n  fullName: System.EventArgs.Empty\n  nameWithType: EventArgs.Empty\n  commentId: F:System.EventArgs.Empty\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  nameWithType: Guid\n  commentId: T:System.Guid\n- uid: System.Diagnostics.Tracing.EventChannel\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventChannel\n  fullName: System.Diagnostics.Tracing.EventChannel\n  nameWithType: EventChannel\n  commentId: T:System.Diagnostics.Tracing.EventChannel\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Diagnostics.Tracing.EventSource\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventSource\n  fullName: System.Diagnostics.Tracing.EventSource\n  nameWithType: EventSource\n  commentId: T:System.Diagnostics.Tracing.EventSource\n- uid: System.Diagnostics.Tracing.EventKeywords\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventKeywords\n  fullName: System.Diagnostics.Tracing.EventKeywords\n  nameWithType: EventKeywords\n  commentId: T:System.Diagnostics.Tracing.EventKeywords\n- uid: System.Diagnostics.Tracing.EventLevel\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventLevel\n  fullName: System.Diagnostics.Tracing.EventLevel\n  nameWithType: EventLevel\n  commentId: T:System.Diagnostics.Tracing.EventLevel\n- uid: System.Diagnostics.Tracing.EventOpcode\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventOpcode\n  fullName: System.Diagnostics.Tracing.EventOpcode\n  nameWithType: EventOpcode\n  commentId: T:System.Diagnostics.Tracing.EventOpcode\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Object}\n  parent: System.Collections.ObjectModel\n  definition: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<Object>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Object>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Object)\n  name.vb: ReadOnlyCollection(Of Object)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ReadOnlyCollection<Object>\n  nameWithType.vb: ReadOnlyCollection(Of Object)\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.Object}\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  isExternal: false\n  name: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)\n  name.vb: ReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ReadOnlyCollection<T>\n  nameWithType.vb: ReadOnlyCollection(Of T)\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1\n- uid: System.Collections.ObjectModel\n  isExternal: false\n  name: System.Collections.ObjectModel\n  fullName: System.Collections.ObjectModel\n  nameWithType: System.Collections.ObjectModel\n  commentId: N:System.Collections.ObjectModel\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}\n  parent: System.Collections.ObjectModel\n  definition: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<String>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>\n  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.String)\n  name.vb: ReadOnlyCollection(Of String)\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ReadOnlyCollection<String>\n  nameWithType.vb: ReadOnlyCollection(Of String)\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.String}\n- uid: System.Diagnostics.Tracing.EventTags\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventTags\n  fullName: System.Diagnostics.Tracing.EventTags\n  nameWithType: EventTags\n  commentId: T:System.Diagnostics.Tracing.EventTags\n- uid: System.Diagnostics.Tracing.EventTask\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventTask\n  fullName: System.Diagnostics.Tracing.EventTask\n  nameWithType: EventTask\n  commentId: T:System.Diagnostics.Tracing.EventTask\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n"}