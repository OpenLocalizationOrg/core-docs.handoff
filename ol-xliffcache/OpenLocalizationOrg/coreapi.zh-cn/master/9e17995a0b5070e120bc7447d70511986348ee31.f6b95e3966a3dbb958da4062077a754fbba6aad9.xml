{"nodes":[{"pos":[1117,1140],"content":"ProcessModuleCollection","needQuote":true,"nodes":[{"content":"ProcessModuleCollection","pos":[0,23]}]},{"pos":[3264,3289],"content":"ProcessModuleCollection()","needQuote":true,"nodes":[{"content":"ProcessModuleCollection()","pos":[0,25]}]},{"pos":[4620,4660],"content":"ProcessModuleCollection(ProcessModule[])","needQuote":true,"nodes":[{"content":"ProcessModuleCollection(ProcessModule[])","pos":[0,40]}]},{"pos":[6665,6676],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index value of the module in the collection.","pos":[7466,7530],"source":"\\n<p>The zero-based index value of the module in the collection."},{"content":"&lt;/p&gt;\\n","pos":[7531,7537],"source":" </p>\\n"},{"pos":[8384,8407],"content":"Contains(ProcessModule)","needQuote":true,"nodes":[{"content":"Contains(ProcessModule)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the module exists in the collection; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9478,9587],"source":"\\n<p>\\n<strong>true</strong> if the module exists in the collection; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[10081,10111],"content":"CopyTo(ProcessModule[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(ProcessModule[], Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The location at which to add the new instances.","pos":[11282,11334],"source":"\\n<p>The location at which to add the new instances."},{"content":"&lt;/p&gt;\\n","pos":[11335,11341],"source":" </p>\\n"},{"pos":[12031,12053],"content":"IndexOf(ProcessModule)","needQuote":true,"nodes":[{"content":"IndexOf(ProcessModule)","pos":[0,22]}]},{"pos":[13604,13609],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[14790,14816],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[16291,16311],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[17807,17839],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"pos":[19242,19257],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[20174,20192],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[20359,20365],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20539,20550],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[20763,20774],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[20973,20983],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[21078,21086],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21155,21156],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21183,21184],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21254,21262],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21331,21332],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21359,21360],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21543,21557],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[21676,21682],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21749,21750],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21800,21806],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21866,21867],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21950,21956],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22023,22024],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22074,22080],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22140,22141],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22355,22377],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[22525,22531],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22598,22599],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22649,22655],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22716,22717]},{"pos":[22772,22778],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22838,22839],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22936,22942],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23009,23010],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23060,23066],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23127,23128]},{"pos":[23183,23189],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23249,23250],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23495,23526],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[23692,23707],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[23783,23784],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23834,23840],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23901,23902]},{"pos":[23957,23963],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24023,24024],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24130,24145],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24221,24222],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24272,24278],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24339,24340]},{"pos":[24395,24401],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24461,24462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24692,24705],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[24806,24817],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24889,24890],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24917,24918],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24991,25002],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[25074,25075],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25102,25103],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25278,25287],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[25380,25387],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25455,25456],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25483,25484],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25553,25560],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[25628,25629],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25656,25657],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25832,25849],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[25958,25973],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26049,26050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26077,26078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26155,26170],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[26246,26247],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26274,26275],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26570,26583],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[26700,26711],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[26770,26771],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26798,26799],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26880,26891],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[26950,26951],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26978,26979],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27334,27346],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[27479,27489],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[27556,27557],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27584,27585],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27674,27684],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[27751,27752],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27779,27780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28121,28136],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[28340,28353],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[28415,28416],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28443,28444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28522,28538],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[28603,28604],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28631,28632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29010,29027],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[29239,29254],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[29318,29319],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29346,29347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29427,29445],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[29512,29513],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29540,29541],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29776,29782],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[29901,29919],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[30120,30144],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[30323,30334],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[30393,30394],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30461,30472],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[30549,30550],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30663,30674],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[30733,30734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30801,30812],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[30889,30890],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31118,31127],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[31333,31356],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[31551,31561],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[31628,31629],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31696,31707],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[31784,31785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31906,31916],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[31983,31984],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32051,32062],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[32139,32140],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32393,32411],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[32633,32659],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[32966,32979],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[33041,33042],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33109,33120],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[33197,33198],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33308,33324],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[33389,33390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33457,33468],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[33545,33546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33835,33845],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[34045,34073],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[34388,34403],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[34467,34468],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34535,34546],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[34623,34624],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34736,34754],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[34821,34822],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34889,34900],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[34977,34978],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35240,35251],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[35381,35396],"content":"ProcessModule[]","needQuote":true,"nodes":[{"content":"ProcessModule[]","pos":[0,15]}]},{"pos":[35588,35601],"content":"ProcessModule","needQuote":true,"nodes":[{"content":"ProcessModule","pos":[0,13]}]},{"content":"[]","pos":[35660,35662]},{"pos":[35746,35759],"content":"ProcessModule","needQuote":true,"nodes":[{"content":"ProcessModule","pos":[0,13]}]},{"pos":[35817,35819],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[35969,35974],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[36147,36160],"content":"ProcessModule","needQuote":true,"nodes":[{"content":"ProcessModule","pos":[0,13]}]},{"pos":[36351,36358],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36553,36558],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[36816,36830],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[37109,37117],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[37402,37422],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[37600,37606],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[37669,37670],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37719,37724],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[37763,37764]},{"pos":[37818,37823],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37882,37883],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37995,38001],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[38064,38065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38114,38119],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[38158,38159]},{"pos":[38213,38218],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[38277,38278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38489,38494],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[38691,38706],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[38845,38858],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[38928,38929],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38956,38957],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39049,39062],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[39132,39133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39160,39161],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39377,39388],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]}],"content":"items:\n- uid: System.Diagnostics.ProcessModuleCollection\n  commentId: T:System.Diagnostics.ProcessModuleCollection\n  id: ProcessModuleCollection\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.ProcessModuleCollection.#ctor\n  - System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])\n  - System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)\n  - System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)\n  - System.Diagnostics.ProcessModuleCollection.Count\n  - System.Diagnostics.ProcessModuleCollection.GetEnumerator\n  - System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)\n  - System.Diagnostics.ProcessModuleCollection.Item(System.Int32)\n  - System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#IsSynchronized\n  - System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#SyncRoot\n  langs:\n  - csharp\n  - vb\n  name: ProcessModuleCollection\n  fullName: System.Diagnostics.ProcessModuleCollection\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProcessModuleCollection\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n    startLine: 12\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides a strongly typed collection of <xref href=\\\"System.Diagnostics.ProcessModule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: 'public class ProcessModuleCollection : ICollection, IEnumerable'\n    content.vb: >-\n      Public Class ProcessModuleCollection\n          Implements ICollection, IEnumerable\n  seealso:\n  - type: System.Diagnostics.ProcessModule.ModuleName\n    commentId: P:System.Diagnostics.ProcessModule.ModuleName\n  - type: System.Diagnostics.ProcessModule.FileName\n    commentId: P:System.Diagnostics.ProcessModule.FileName\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ProcessModuleCollection\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Diagnostics.ProcessModuleCollection.#ctor\n  commentId: M:System.Diagnostics.ProcessModuleCollection.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.ProcessModuleCollection\n  langs:\n  - csharp\n  - vb\n  name: ProcessModuleCollection()\n  fullName: System.Diagnostics.ProcessModuleCollection.ProcessModuleCollection()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n    startLine: 19\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.ProcessModuleCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, with no associated <xref href=\\\"System.Diagnostics.ProcessModule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances.</p>\\n\"\n  syntax:\n    content: protected ProcessModuleCollection()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ProcessModuleCollection.ProcessModuleCollection()\n- uid: System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])\n  commentId: M:System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])\n  id: '#ctor(System.Diagnostics.ProcessModule[])'\n  parent: System.Diagnostics.ProcessModuleCollection\n  langs:\n  - csharp\n  - vb\n  name: ProcessModuleCollection(ProcessModule[])\n  fullName: System.Diagnostics.ProcessModuleCollection.ProcessModuleCollection(System.Diagnostics.ProcessModule[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n    startLine: 26\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.ProcessModuleCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, using the specified array of <xref href=\\\"System.Diagnostics.ProcessModule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances.</p>\\n\"\n  syntax:\n    content: public ProcessModuleCollection(ProcessModule[] processModules)\n    content.vb: Public Sub New(processModules As ProcessModule())\n    parameters:\n    - id: processModules\n      type: System.Diagnostics.ProcessModule[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Diagnostics.ProcessModule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances with which to initialize this <xref href=\\\"System.Diagnostics.ProcessModuleCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.ProcessModuleCollection.ProcessModuleCollection(System.Diagnostics.ProcessModule())\n  name.vb: ProcessModuleCollection(ProcessModule())\n  nameWithType: ProcessModuleCollection.ProcessModuleCollection(ProcessModule[])\n  nameWithType.vb: ProcessModuleCollection.ProcessModuleCollection(ProcessModule())\n- uid: System.Diagnostics.ProcessModuleCollection.Item(System.Int32)\n  commentId: P:System.Diagnostics.ProcessModuleCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Diagnostics.ProcessModuleCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Diagnostics.ProcessModuleCollection.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n    startLine: 34\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets an index for iterating over the set of process modules.</p>\\n\"\n  syntax:\n    content: public ProcessModule this[int index] { get; }\n    content.vb: Public ReadOnly Property Item(index As Integer) As ProcessModule\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index value of the module in the collection. </p>\\n\"\n    return:\n      type: System.Diagnostics.ProcessModule\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.ProcessModule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that indexes the modules in the collection </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Diagnostics.ProcessModuleCollection.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: ProcessModuleCollection.Item[Int32]\n  nameWithType.vb: ProcessModuleCollection.Item(Int32)\n- uid: System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)\n  commentId: M:System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)\n  id: Contains(System.Diagnostics.ProcessModule)\n  parent: System.Diagnostics.ProcessModuleCollection\n  langs:\n  - csharp\n  - vb\n  name: Contains(ProcessModule)\n  fullName: System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n    startLine: 85\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Determines whether the specified process module exists in the collection.</p>\\n\"\n  syntax:\n    content: public bool Contains(ProcessModule module)\n    content.vb: Public Function Contains(module As ProcessModule) As Boolean\n    parameters:\n    - id: module\n      type: System.Diagnostics.ProcessModule\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.ProcessModule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that indicates the module to find in this collection. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the module exists in the collection; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessModuleCollection.Contains(ProcessModule)\n- uid: System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)\n  commentId: M:System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)\n  id: CopyTo(System.Diagnostics.ProcessModule[],System.Int32)\n  parent: System.Diagnostics.ProcessModuleCollection\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(ProcessModule[], Int32)\n  fullName: System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n    startLine: 93\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Copies an array of <xref href=\\\"System.Diagnostics.ProcessModule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances to the collection, at the specified index.</p>\\n\"\n  syntax:\n    content: public void CopyTo(ProcessModule[] array, int index)\n    content.vb: Public Sub CopyTo(array As ProcessModule(), index As Integer)\n    parameters:\n    - id: array\n      type: System.Diagnostics.ProcessModule[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Diagnostics.ProcessModule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances to add to the collection. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The location at which to add the new instances. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule(), System.Int32)\n  name.vb: CopyTo(ProcessModule(), Int32)\n  nameWithType: ProcessModuleCollection.CopyTo(ProcessModule[], Int32)\n  nameWithType.vb: ProcessModuleCollection.CopyTo(ProcessModule(), Int32)\n- uid: System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)\n  commentId: M:System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)\n  id: IndexOf(System.Diagnostics.ProcessModule)\n  parent: System.Diagnostics.ProcessModuleCollection\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(ProcessModule)\n  fullName: System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndexOf\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n    startLine: 77\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides the location of a specified module within the collection.</p>\\n\"\n  syntax:\n    content: public int IndexOf(ProcessModule module)\n    content.vb: Public Function IndexOf(module As ProcessModule) As Integer\n    parameters:\n    - id: module\n      type: System.Diagnostics.ProcessModule\n      description: \"\\n<p>The <xref href=\\\"System.Diagnostics.ProcessModule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose index is retrieved. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index that defines the location of the module within the <xref href=\\\"System.Diagnostics.ProcessModuleCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessModuleCollection.IndexOf(ProcessModule)\n- uid: System.Diagnostics.ProcessModuleCollection.Count\n  commentId: P:System.Diagnostics.ProcessModuleCollection.Count\n  id: Count\n  parent: System.Diagnostics.ProcessModuleCollection\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Diagnostics.ProcessModuleCollection.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n    startLine: 49\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ProcessModuleCollection.Count\n- uid: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Diagnostics.ProcessModuleCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Diagnostics.ProcessModuleCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n    startLine: 54\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: ProcessModuleCollection.ICollection.IsSynchronized\n  nameWithType.vb: ProcessModuleCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Diagnostics.ProcessModuleCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Diagnostics.ProcessModuleCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n    startLine: 59\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: ProcessModuleCollection.ICollection.SyncRoot\n  nameWithType.vb: ProcessModuleCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Diagnostics.ProcessModuleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Diagnostics.ProcessModuleCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Diagnostics.ProcessModuleCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n    startLine: 64\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n    - id: index\n      type: System.Int32\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: ProcessModuleCollection.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: ProcessModuleCollection.System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Diagnostics.ProcessModuleCollection.GetEnumerator\n  commentId: M:System.Diagnostics.ProcessModuleCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Diagnostics.ProcessModuleCollection\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Diagnostics.ProcessModuleCollection.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessModuleCollection.cs\n    startLine: 69\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  syntax:\n    content: public virtual IEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessModuleCollection.GetEnumerator()\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Diagnostics.ProcessModule[]\n  name: ProcessModule[]\n  fullName: System.Diagnostics.ProcessModule[]\n  fullname.vb: System.Diagnostics.ProcessModule()\n  name.vb: ProcessModule()\n  spec.csharp:\n  - uid: System.Diagnostics.ProcessModule\n    name: ProcessModule\n    fullName: System.Diagnostics.ProcessModule\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Diagnostics.ProcessModule\n    name: ProcessModule\n    fullName: System.Diagnostics.ProcessModule\n  - name: ()\n    fullName: ()\n  nameWithType: ProcessModule[]\n  nameWithType.vb: ProcessModule()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Diagnostics.ProcessModule\n  parent: System.Diagnostics\n  isExternal: false\n  name: ProcessModule\n  fullName: System.Diagnostics.ProcessModule\n  nameWithType: ProcessModule\n  commentId: T:System.Diagnostics.ProcessModule\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n"}