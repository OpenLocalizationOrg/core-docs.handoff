{"nodes":[{"pos":[1326,1333],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[2874,2895],"content":"Version(Int32, Int32)","needQuote":true,"nodes":[{"content":"Version(Int32, Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The major version number.","pos":[3636,3666],"source":"\\n<p>The major version number."},{"content":"&lt;/p&gt;\\n","pos":[3667,3673],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The minor version number.","pos":[3736,3766],"source":"\\n<p>The minor version number."},{"content":"&lt;/p&gt;\\n","pos":[3767,3773],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;major&lt;/em&gt; or &lt;em&gt;minor&lt;/em&gt; is less than zero.","pos":[3904,3962],"source":"\\n<p>\\n<em>major</em> or <em>minor</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[3963,3969],"source":" </p>\\n"},{"pos":[4333,4361],"content":"Version(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"Version(Int32, Int32, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The major version number.","pos":[5153,5183],"source":"\\n<p>The major version number."},{"content":"&lt;/p&gt;\\n","pos":[5184,5190],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The minor version number.","pos":[5253,5283],"source":"\\n<p>The minor version number."},{"content":"&lt;/p&gt;\\n","pos":[5284,5290],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The build number.","pos":[5353,5375],"source":"\\n<p>The build number."},{"content":"&lt;/p&gt;\\n","pos":[5376,5382],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;major&lt;/em&gt;, &lt;em&gt;minor&lt;/em&gt;, or &lt;em&gt;build&lt;/em&gt; is less than zero.","pos":[5513,5588],"source":"\\n<p>\\n<em>major</em>, <em>minor</em>, or <em>build</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[5589,5595],"source":" </p>\\n"},{"pos":[6005,6040],"content":"Version(Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"Version(Int32, Int32, Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The major version number.","pos":[6891,6921],"source":"\\n<p>The major version number."},{"content":"&lt;/p&gt;\\n","pos":[6922,6928],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The minor version number.","pos":[6991,7021],"source":"\\n<p>The minor version number."},{"content":"&lt;/p&gt;\\n","pos":[7022,7028],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The build number.","pos":[7091,7113],"source":"\\n<p>The build number."},{"content":"&lt;/p&gt;\\n","pos":[7114,7120],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The revision number.","pos":[7186,7211],"source":"\\n<p>The revision number."},{"content":"&lt;/p&gt;\\n","pos":[7212,7218],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;major&lt;/em&gt;, &lt;em&gt;minor&lt;/em&gt;, &lt;em&gt;build&lt;/em&gt;, or &lt;em&gt;revision&lt;/em&gt; is less than zero.","pos":[7349,7443],"source":"\\n<p>\\n<em>major</em>, <em>minor</em>, <em>build</em>, or <em>revision</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[7444,7450],"source":" </p>\\n"},{"pos":[7753,7768],"content":"Version(String)","needQuote":true,"nodes":[{"content":"Version(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.').","pos":[8460,8593],"source":"\\n<p>A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.')."},{"content":"&lt;/p&gt;\\n","pos":[8594,8600],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;version&lt;/em&gt; has fewer than two components or more than four components.","pos":[8711,8794],"source":"\\n<p>\\n<em>version</em> has fewer than two components or more than four components."},{"content":"&lt;/p&gt;\\n","pos":[8795,8801],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;version&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8906,8955],"source":"\\n<p>\\n<em>version</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8956,8962],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A major, minor, build, or revision component is less than zero.","pos":[9079,9147],"source":"\\n<p>A major, minor, build, or revision component is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[9148,9154],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;At least one component of &lt;em&gt;version&lt;/em&gt; does not parse to an integer.","pos":[9247,9324],"source":"\\n<p>At least one component of <em>version</em> does not parse to an integer."},{"content":"&lt;/p&gt;\\n","pos":[9325,9331],"source":" </p>\\n"},{"pos":[9833,9838],"content":"Build","needQuote":true,"nodes":[{"content":"Build","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The build number, or -1 if the build number is undefined.&lt;/p&gt;\\n","pos":[10526,10594],"source":"\\n<p>The build number, or -1 if the build number is undefined.</p>\\n"},{"pos":[10841,10846],"content":"Major","needQuote":true,"nodes":[{"content":"Major","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The major version number.&lt;/p&gt;\\n","pos":[11534,11570],"source":"\\n<p>The major version number.</p>\\n"},{"pos":[11841,11854],"content":"MajorRevision","needQuote":true,"nodes":[{"content":"MajorRevision","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 16-bit signed integer.&lt;/p&gt;\\n","pos":[12461,12496],"source":"\\n<p>A 16-bit signed integer.</p>\\n"},{"pos":[12847,12852],"content":"Minor","needQuote":true,"nodes":[{"content":"Minor","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The minor version number.&lt;/p&gt;\\n","pos":[13540,13576],"source":"\\n<p>The minor version number.</p>\\n"},{"pos":[13847,13860],"content":"MinorRevision","needQuote":true,"nodes":[{"content":"MinorRevision","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 16-bit signed integer.&lt;/p&gt;\\n","pos":[14466,14501],"source":"\\n<p>A 16-bit signed integer.</p>\\n"},{"pos":[14861,14869],"content":"Revision","needQuote":true,"nodes":[{"content":"Revision","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The revision number, or -1 if the revision number is undefined.&lt;/p&gt;\\n","pos":[15572,15646],"source":"\\n<p>The revision number, or -1 if the revision number is undefined.</p>\\n"},{"pos":[15956,15974],"content":"CompareTo(Version)","needQuote":true,"nodes":[{"content":"CompareTo(Version)","pos":[0,18]}]},{"pos":[18292,18306],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[20188,20203],"content":"Equals(Version)","needQuote":true,"nodes":[{"content":"Equals(Version)","pos":[0,15]}]},{"pos":[22108,22121],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[22777,22822],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[23234,23260],"content":"Equality(Version, Version)","needQuote":true,"nodes":[{"content":"Equality(Version, Version)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;v1&lt;/em&gt; equals &lt;em&gt;v2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24342,24446],"source":"\\n<p>\\n<strong>true</strong> if <em>v1</em> equals <em>v2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[25054,25083],"content":"GreaterThan(Version, Version)","needQuote":true,"nodes":[{"content":"GreaterThan(Version, Version)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;v1&lt;/em&gt; is greater than &lt;em&gt;v2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26282,26395],"source":"\\n<p>\\n<strong>true</strong> if <em>v1</em> is greater than <em>v2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[27027,27063],"content":"GreaterThanOrEqual(Version, Version)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(Version, Version)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;v1&lt;/em&gt; is greater than or equal to &lt;em&gt;v2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28292,28417],"source":"\\n<p>\\n<strong>true</strong> if <em>v1</em> is greater than or equal to <em>v2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[29032,29060],"content":"Inequality(Version, Version)","needQuote":true,"nodes":[{"content":"Inequality(Version, Version)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;v1&lt;/em&gt; does not equal &lt;em&gt;v2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30151,30263],"source":"\\n<p>\\n<strong>true</strong> if <em>v1</em> does not equal <em>v2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[30864,30890],"content":"LessThan(Version, Version)","needQuote":true,"nodes":[{"content":"LessThan(Version, Version)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;v1&lt;/em&gt; is less than &lt;em&gt;v2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32082,32192],"source":"\\n<p>\\n<strong>true</strong> if <em>v1</em> is less than <em>v2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;v1&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[32311,32355],"source":"\\n<p>\\n<em>v1</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[32356,32362],"source":" </p>\\n"},{"pos":[32982,33015],"content":"LessThanOrEqual(Version, Version)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(Version, Version)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;v1&lt;/em&gt; is less than or equal to &lt;em&gt;v2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[34225,34347],"source":"\\n<p>\\n<strong>true</strong> if <em>v1</em> is less than or equal to <em>v2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;v1&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[34466,34510],"source":"\\n<p>\\n<em>v1</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[34511,34517],"source":" </p>\\n"},{"pos":[35057,35070],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that contains a version number to convert.&lt;/p&gt;\\n","pos":[35800,35862],"source":"\\n<p>A string that contains a version number to convert.</p>\\n"},{"content":"\\n&lt;p&gt;An object that is equivalent to the version number specified in the &lt;em&gt;input&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[35923,36027],"source":"\\n<p>An object that is equivalent to the version number specified in the <em>input</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36146,36199],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; has fewer than two or more than four version components.&lt;/p&gt;\\n","pos":[36296,36380],"source":"\\n<p>\\n<em>input</em> has fewer than two or more than four version components.</p>\\n"},{"content":"\\n&lt;p&gt;At least one component in &lt;em&gt;input&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[36497,36567],"source":"\\n<p>At least one component in <em>input</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;At least one component in &lt;em&gt;input&lt;/em&gt; is not an integer.&lt;/p&gt;\\n","pos":[36660,36730],"source":"\\n<p>At least one component in <em>input</em> is not an integer.</p>\\n"},{"pos":[37609,37638],"content":"IComparable.CompareTo(Object)","needQuote":true,"nodes":[{"content":"IComparable.CompareTo(Object)","pos":[0,29]}]},{"pos":[38683,38693],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[40705,40720],"content":"ToString(Int32)","needQuote":true,"nodes":[{"content":"ToString(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The number of components to return.","pos":[41590,41630],"source":"\\n<p>The number of components to return."},{"content":"The &lt;em&gt;fieldCount&lt;/em&gt; ranges from 0 to 4.","pos":[41631,41674],"source":" The <em>fieldCount</em> ranges from 0 to 4."},{"content":"&lt;/p&gt;\\n","pos":[41675,41681],"source":" </p>\\n"},{"pos":[43508,43537],"content":"TryParse(String, out Version)","needQuote":true,"nodes":[{"content":"TryParse(String, out Version)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;A string that contains a version number to convert.&lt;/p&gt;\\n","pos":[44418,44480],"source":"\\n<p>A string that contains a version number to convert.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;input&lt;/em&gt; parameter was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[45173,45302],"source":"\\n<p>\\n<strong>true</strong> if the <em>input</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[45855,45861],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[45992,45998],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46148,46159],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[46355,46375],"content":"IComparable<Version>","needQuote":true,"nodes":[{"content":"IComparable&lt;Version&gt;","pos":[0,20],"source":"IComparable<Version>"}]},{"pos":[46566,46577],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[46621,46622],"content":"<","needQuote":true,"nodes":[]},{"pos":[46673,46680],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[46793,46804],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[46849,46852]},{"pos":[46910,46917],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[46957,46958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47205,47224],"content":"IEquatable<Version>","needQuote":true,"nodes":[{"content":"IEquatable&lt;Version&gt;","pos":[0,19],"source":"IEquatable<Version>"}]},{"pos":[47411,47421],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[47464,47465],"content":"<","needQuote":true,"nodes":[]},{"pos":[47516,47523],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[47635,47645],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[47689,47692]},{"pos":[47750,47757],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[47797,47798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48050,48072],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[48220,48226],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[48293,48294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48344,48350],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[48411,48412]},{"pos":[48467,48473],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48533,48534],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48631,48637],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[48704,48705],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48755,48761],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[48822,48823]},{"pos":[48878,48884],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48944,48945],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49190,49221],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[49387,49402],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[49478,49479],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49529,49535],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[49596,49597]},{"pos":[49652,49658],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49718,49719],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49825,49840],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[49916,49917],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49967,49973],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50034,50035]},{"pos":[50090,50096],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50156,50157],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50383,50392],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[50485,50492],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[50560,50561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50588,50589],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50658,50665],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[50733,50734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50761,50762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50937,50954],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[51063,51078],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[51154,51155],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51182,51183],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51260,51275],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[51351,51352],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51379,51380],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51539,51553],"content":"IComparable<T>","needQuote":true,"nodes":[{"content":"IComparable&lt;T&gt;","pos":[0,14],"source":"IComparable<T>"}]},{"pos":[51712,51723],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[51767,51768],"content":"<","needQuote":true,"nodes":[]},{"pos":[51795,51796],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[51896,51907],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"content":"(Of","pos":[51952,51955]},{"pos":[51989,51990],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[52017,52018],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52194,52207],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[52362,52372],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[52415,52416],"content":"<","needQuote":true,"nodes":[]},{"pos":[52443,52444],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[52543,52553],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[52597,52600]},{"pos":[52634,52635],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[52662,52663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52846,52851],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[52993,52999],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[53143,53148],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[53394,53412],"content":"CompareTo(Version)","needQuote":true,"nodes":[{"content":"CompareTo(Version)","pos":[0,18]}]},{"pos":[53634,53643],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[53713,53714],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53765,53772],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[53812,53813],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53895,53904],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[53977,53978],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54029,54036],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[54076,54077],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54355,54362],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[54514,54526],"content":"CompareTo(T)","needQuote":true,"nodes":[{"content":"CompareTo(T)","pos":[0,12]}]},{"pos":[54696,54705],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[54762,54763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54790,54791],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[54818,54819],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54901,54910],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[54970,54971],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54998,54999],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[55026,55027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55282,55296],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[55415,55421],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[55488,55489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55539,55545],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55605,55606],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55689,55695],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[55762,55763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55813,55819],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55879,55880],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56053,56060],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[56303,56318],"content":"Equals(Version)","needQuote":true,"nodes":[{"content":"Equals(Version)","pos":[0,15]}]},{"pos":[56528,56534],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[56600,56601],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56652,56659],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[56699,56700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56778,56784],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[56853,56854],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56905,56912],"content":"Version","needQuote":true,"nodes":[{"content":"Version","pos":[0,7]}]},{"pos":[56952,56953],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57218,57227],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[57385,57391],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[57444,57445],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57472,57473],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[57500,57501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57579,57585],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[57641,57642],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57669,57670],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[57697,57698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57931,57944],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[58045,58056],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[58128,58129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58156,58157],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58230,58241],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[58313,58314],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58341,58342],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58544,58561],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[58696,58705],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[58759,58760],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58810,58816],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58876,58877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58968,58977],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[59031,59032],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59082,59088],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59148,59149],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59352,59362],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[59457,59465],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[59534,59535],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59562,59563],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59633,59641],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[59710,59711],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59738,59739],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59898,59925],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[60144,60161],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[60337,60358],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[60557,60572],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[60738,60755],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]}],"content":"items:\n- uid: System.Version\n  commentId: T:System.Version\n  id: Version\n  parent: System\n  children:\n  - System.Version.#ctor(System.Int32,System.Int32)\n  - System.Version.#ctor(System.Int32,System.Int32,System.Int32)\n  - System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Version.#ctor(System.String)\n  - System.Version.Build\n  - System.Version.CompareTo(System.Version)\n  - System.Version.Equals(System.Object)\n  - System.Version.Equals(System.Version)\n  - System.Version.GetHashCode\n  - System.Version.Major\n  - System.Version.MajorRevision\n  - System.Version.Minor\n  - System.Version.MinorRevision\n  - System.Version.op_Equality(System.Version,System.Version)\n  - System.Version.op_GreaterThan(System.Version,System.Version)\n  - System.Version.op_GreaterThanOrEqual(System.Version,System.Version)\n  - System.Version.op_Inequality(System.Version,System.Version)\n  - System.Version.op_LessThan(System.Version,System.Version)\n  - System.Version.op_LessThanOrEqual(System.Version,System.Version)\n  - System.Version.Parse(System.String)\n  - System.Version.Revision\n  - System.Version.System#IComparable#CompareTo(System.Object)\n  - System.Version.ToString\n  - System.Version.ToString(System.Int32)\n  - System.Version.TryParse(System.String,System.Version@)\n  langs:\n  - csharp\n  - vb\n  name: Version\n  fullName: System.Version\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Version\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 25\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public sealed class Version : ICloneable, IComparable, IComparable<Version>, IEquatable<Version>\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class Version\n          Implements ICloneable, IComparable, IComparable(Of Version), IEquatable(Of Version)\n  inheritance:\n  - System.Object\n  implements:\n  - System.IComparable\n  - System.IComparable{System.Version}\n  - System.IEquatable{System.Version}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: Version\n- uid: System.Version.#ctor(System.Int32,System.Int32)\n  commentId: M:System.Version.#ctor(System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32)'\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Version(Int32, Int32)\n  fullName: System.Version.Version(System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 74\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified major and minor values.</p>\\n\"\n  syntax:\n    content: public Version(int major, int minor)\n    content.vb: Public Sub New(major As Integer, minor As Integer)\n    parameters:\n    - id: major\n      type: System.Int32\n      description: \"\\n<p>The major version number. </p>\\n\"\n    - id: minor\n      type: System.Int32\n      description: \"\\n<p>The minor version number. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>major</em> or <em>minor</em> is less than zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Version.Version(Int32, Int32)\n- uid: System.Version.#ctor(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32,System.Int32)'\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Version(Int32, Int32, Int32)\n  fullName: System.Version.Version(System.Int32, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 57\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified major, minor, and build values.</p>\\n\"\n  syntax:\n    content: public Version(int major, int minor, int build)\n    content.vb: Public Sub New(major As Integer, minor As Integer, build As Integer)\n    parameters:\n    - id: major\n      type: System.Int32\n      description: \"\\n<p>The major version number. </p>\\n\"\n    - id: minor\n      type: System.Int32\n      description: \"\\n<p>The minor version number. </p>\\n\"\n    - id: build\n      type: System.Int32\n      description: \"\\n<p>The build number. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>major</em>, <em>minor</em>, or <em>build</em> is less than zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Version.Version(Int32, Int32, Int32)\n- uid: System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Version(Int32, Int32, Int32, Int32)\n  fullName: System.Version.Version(System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 37\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified major, minor, build, and revision numbers.</p>\\n\"\n  syntax:\n    content: public Version(int major, int minor, int build, int revision)\n    content.vb: Public Sub New(major As Integer, minor As Integer, build As Integer, revision As Integer)\n    parameters:\n    - id: major\n      type: System.Int32\n      description: \"\\n<p>The major version number. </p>\\n\"\n    - id: minor\n      type: System.Int32\n      description: \"\\n<p>The minor version number. </p>\\n\"\n    - id: build\n      type: System.Int32\n      description: \"\\n<p>The build number. </p>\\n\"\n    - id: revision\n      type: System.Int32\n      description: \"\\n<p>The revision number. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>major</em>, <em>minor</em>, <em>build</em>, or <em>revision</em> is less than zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Version.Version(Int32, Int32, Int32, Int32)\n- uid: System.Version.#ctor(System.String)\n  commentId: M:System.Version.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Version(String)\n  fullName: System.Version.Version(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 86\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified string.</p>\\n\"\n  syntax:\n    content: public Version(string version)\n    content.vb: Public Sub New(version As String)\n    parameters:\n    - id: version\n      type: System.String\n      description: \"\\n<p>A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.'). </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>version</em> has fewer than two components or more than four components. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>version</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>A major, minor, build, or revision component is less than zero. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>At least one component of <em>version</em> does not parse to an integer. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>At least one component of <em>version</em> represents a number greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Version.Version(String)\n- uid: System.Version.Build\n  commentId: P:System.Version.Build\n  id: Build\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Build\n  fullName: System.Version.Build\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Build\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 109\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the value of the build component of the version number for the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Build { get; }\n    content.vb: Public ReadOnly Property Build As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The build number, or -1 if the build number is undefined.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Version.Build\n- uid: System.Version.Major\n  commentId: P:System.Version.Major\n  id: Major\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Major\n  fullName: System.Version.Major\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Major\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 101\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the value of the major component of the version number for the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Major { get; }\n    content.vb: Public ReadOnly Property Major As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The major version number.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Version.Major\n- uid: System.Version.MajorRevision\n  commentId: P:System.Version.MajorRevision\n  id: MajorRevision\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: MajorRevision\n  fullName: System.Version.MajorRevision\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MajorRevision\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 117\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the high 16 bits of the revision number.</p>\\n\"\n  syntax:\n    content: public short MajorRevision { get; }\n    content.vb: Public ReadOnly Property MajorRevision As Short\n    parameters: []\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer.</p>\\n\"\n  seealso:\n  - type: System.Version.MinorRevision\n    commentId: P:System.Version.MinorRevision\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Version.MajorRevision\n- uid: System.Version.Minor\n  commentId: P:System.Version.Minor\n  id: Minor\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Minor\n  fullName: System.Version.Minor\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Minor\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 105\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the value of the minor component of the version number for the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Minor { get; }\n    content.vb: Public ReadOnly Property Minor As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The minor version number.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Version.Minor\n- uid: System.Version.MinorRevision\n  commentId: P:System.Version.MinorRevision\n  id: MinorRevision\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: MinorRevision\n  fullName: System.Version.MinorRevision\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MinorRevision\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 121\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the low 16 bits of the revision number.</p>\\n\"\n  syntax:\n    content: public short MinorRevision { get; }\n    content.vb: Public ReadOnly Property MinorRevision As Short\n    parameters: []\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer.</p>\\n\"\n  seealso:\n  - type: System.Version.MajorRevision\n    commentId: P:System.Version.MajorRevision\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Version.MinorRevision\n- uid: System.Version.Revision\n  commentId: P:System.Version.Revision\n  id: Revision\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Revision\n  fullName: System.Version.Revision\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Revision\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 113\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the value of the revision component of the version number for the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Revision { get; }\n    content.vb: Public ReadOnly Property Revision As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The revision number, or -1 if the revision number is undefined.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Version.Revision\n- uid: System.Version.CompareTo(System.Version)\n  commentId: M:System.Version.CompareTo(System.Version)\n  id: CompareTo(System.Version)\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Version)\n  fullName: System.Version.CompareTo(System.Version)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareTo\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 174\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to a specified <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(Version value)\n    content.vb: Public Function CompareTo(value As Version) As Integer\n    parameters:\n    - id: value\n      type: System.Version\n      description: \"\\n<p>A <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare to the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, or <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative values of the two objects, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>The current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a version before <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>The current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is the same version as <em>value</em>. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>The current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a version subsequent to <em>value</em>. </p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.IComparable{System.Version}.CompareTo(System.Version)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Version.CompareTo(Version)\n- uid: System.Version.Equals(System.Object)\n  commentId: M:System.Version.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Version.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 206\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and <em>obj</em> are both <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects, and every component of the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object matches the corresponding component of <em>obj</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  seealso:\n  - type: System.Version.CompareTo(System.Object)\n    commentId: M:System.Version.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Version.Equals(Object)\n- uid: System.Version.Equals(System.Version)\n  commentId: M:System.Version.Equals(System.Version)\n  id: Equals(System.Version)\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Equals(Version)\n  fullName: System.Version.Equals(System.Version)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 221\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and a specified <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represent the same value.</p>\\n\"\n  syntax:\n    content: public bool Equals(Version obj)\n    content.vb: Public Function Equals(obj As Version) As Boolean\n    parameters:\n    - id: obj\n      type: System.Version\n      description: \"\\n<p>A <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare to the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, or <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if every component of the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object matches the corresponding component of the <em>obj</em> parameter; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Version.Equals(System.Object)\n    commentId: M:System.Version.Equals(System.Object)\n  - type: System.Version.CompareTo(System.Version)\n    commentId: M:System.Version.CompareTo(System.Version)\n  implements:\n  - System.IEquatable{System.Version}.Equals(System.Version)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Version.Equals(Version)\n- uid: System.Version.GetHashCode\n  commentId: M:System.Version.GetHashCode\n  id: GetHashCode\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Version.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 236\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a hash code for the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Version.GetHashCode()\n- uid: System.Version.op_Equality(System.Version,System.Version)\n  commentId: M:System.Version.op_Equality(System.Version,System.Version)\n  id: op_Equality(System.Version,System.Version)\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Equality(Version, Version)\n  fullName: System.Version.Equality(System.Version, System.Version)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 411\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(Version v1, Version v2)\n    content.vb: Public Shared Operator =(v1 As Version, v2 As Version) As Boolean\n    parameters:\n    - id: v1\n      type: System.Version\n      description: \"\\n<p>The first <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: v2\n      type: System.Version\n      description: \"\\n<p>The second <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>v1</em> equals <em>v2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Version.Equals(System.Object)\n    commentId: M:System.Version.Equals(System.Object)\n  - type: System.Version.CompareTo(System.Object)\n    commentId: M:System.Version.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Version.Equality(Version, Version)\n- uid: System.Version.op_GreaterThan(System.Version,System.Version)\n  commentId: M:System.Version.op_GreaterThan(System.Version,System.Version)\n  id: op_GreaterThan(System.Version,System.Version)\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(Version, Version)\n  fullName: System.Version.GreaterThan(System.Version, System.Version)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_GreaterThan\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 437\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the first specified <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is greater than the second specified <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static bool operator>(Version v1, Version v2)\n    content.vb: Public Shared Operator>(v1 As Version, v2 As Version) As Boolean\n    parameters:\n    - id: v1\n      type: System.Version\n      description: \"\\n<p>The first <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: v2\n      type: System.Version\n      description: \"\\n<p>The second <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>v1</em> is greater than <em>v2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Version.Equals(System.Object)\n    commentId: M:System.Version.Equals(System.Object)\n  - type: System.Version.CompareTo(System.Object)\n    commentId: M:System.Version.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Version.GreaterThan(Version, Version)\n- uid: System.Version.op_GreaterThanOrEqual(System.Version,System.Version)\n  commentId: M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)\n  id: op_GreaterThanOrEqual(System.Version,System.Version)\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(Version, Version)\n  fullName: System.Version.GreaterThanOrEqual(System.Version, System.Version)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_GreaterThanOrEqual\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 441\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the first specified <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is greater than or equal to the second specified <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static bool operator >=(Version v1, Version v2)\n    content.vb: Public Shared Operator >=(v1 As Version, v2 As Version) As Boolean\n    parameters:\n    - id: v1\n      type: System.Version\n      description: \"\\n<p>The first <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: v2\n      type: System.Version\n      description: \"\\n<p>The second <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>v1</em> is greater than or equal to <em>v2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Version.Equals(System.Object)\n    commentId: M:System.Version.Equals(System.Object)\n  - type: System.Version.CompareTo(System.Object)\n    commentId: M:System.Version.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Version.GreaterThanOrEqual(Version, Version)\n- uid: System.Version.op_Inequality(System.Version,System.Version)\n  commentId: M:System.Version.op_Inequality(System.Version,System.Version)\n  id: op_Inequality(System.Version,System.Version)\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Version, Version)\n  fullName: System.Version.Inequality(System.Version, System.Version)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 419\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(Version v1, Version v2)\n    content.vb: Public Shared Operator <>(v1 As Version, v2 As Version) As Boolean\n    parameters:\n    - id: v1\n      type: System.Version\n      description: \"\\n<p>The first <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: v2\n      type: System.Version\n      description: \"\\n<p>The second <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>v1</em> does not equal <em>v2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Version.Equals(System.Object)\n    commentId: M:System.Version.Equals(System.Object)\n  - type: System.Version.CompareTo(System.Object)\n    commentId: M:System.Version.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Version.Inequality(Version, Version)\n- uid: System.Version.op_LessThan(System.Version,System.Version)\n  commentId: M:System.Version.op_LessThan(System.Version,System.Version)\n  id: op_LessThan(System.Version,System.Version)\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: LessThan(Version, Version)\n  fullName: System.Version.LessThan(System.Version, System.Version)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_LessThan\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 423\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the first specified <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is less than the second specified <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static bool operator <(Version v1, Version v2)\n    content.vb: Public Shared Operator <(v1 As Version, v2 As Version) As Boolean\n    parameters:\n    - id: v1\n      type: System.Version\n      description: \"\\n<p>The first <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: v2\n      type: System.Version\n      description: \"\\n<p>The second <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>v1</em> is less than <em>v2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>v1</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Version.Equals(System.Object)\n    commentId: M:System.Version.Equals(System.Object)\n  - type: System.Version.CompareTo(System.Object)\n    commentId: M:System.Version.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Version.LessThan(Version, Version)\n- uid: System.Version.op_LessThanOrEqual(System.Version,System.Version)\n  commentId: M:System.Version.op_LessThanOrEqual(System.Version,System.Version)\n  id: op_LessThanOrEqual(System.Version,System.Version)\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(Version, Version)\n  fullName: System.Version.LessThanOrEqual(System.Version, System.Version)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_LessThanOrEqual\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 430\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the first specified <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is less than or equal to the second <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static bool operator <=(Version v1, Version v2)\n    content.vb: Public Shared Operator <=(v1 As Version, v2 As Version) As Boolean\n    parameters:\n    - id: v1\n      type: System.Version\n      description: \"\\n<p>The first <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    - id: v2\n      type: System.Version\n      description: \"\\n<p>The second <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>v1</em> is less than or equal to <em>v2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>v1</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Version.Equals(System.Object)\n    commentId: M:System.Version.Equals(System.Object)\n  - type: System.Version.CompareTo(System.Object)\n    commentId: M:System.Version.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Version.LessThanOrEqual(Version, Version)\n- uid: System.Version.Parse(System.String)\n  commentId: M:System.Version.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Version.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 327\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of a version number to an equivalent <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static Version Parse(string input)\n    content.vb: Public Shared Function Parse(input As String) As Version\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that contains a version number to convert.</p>\\n\"\n    return:\n      type: System.Version\n      description: \"\\n<p>An object that is equivalent to the version number specified in the <em>input</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>input</em> has fewer than two or more than four version components.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>At least one component in <em>input</em> is less than zero.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>At least one component in <em>input</em> is not an integer.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>At least one component in <em>input</em> represents a number that is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Version.ToString\n    commentId: M:System.Version.ToString\n  - type: System.Version.TryParse(System.String,System.Version@)\n    commentId: M:System.Version.TryParse(System.String,System.Version@)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Version.Parse(String)\n- uid: System.Version.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.Version.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: IComparable.CompareTo(Object)\n  fullName: System.Version.System.IComparable.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IComparable.CompareTo\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 2256\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: int IComparable.CompareTo(object version)\n    content.vb: Function System.IComparable.CompareTo(version As Object) As Integer Implements IComparable.CompareTo\n    parameters:\n    - id: version\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  name.vb: System.IComparable.CompareTo(Object)\n  nameWithType: Version.IComparable.CompareTo(Object)\n  nameWithType.vb: Version.System.IComparable.CompareTo(Object)\n- uid: System.Version.ToString\n  commentId: M:System.Version.ToString\n  id: ToString\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Version.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 251\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representation.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representation of the values of the major, minor, build, and revision components of the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined: </p>\\n<p>major.minor[.build[.revision]] </p>\\n<p>For example, if you create a <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object using the constructor <code>Version(1,1)</code>, the returned string is \\\"1.1\\\". If you create a <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object using the constructor <code>Version(1,3,4,2)</code>, the returned string is \\\"1.3.4.2\\\".</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Version.ToString()\n- uid: System.Version.ToString(System.Int32)\n  commentId: M:System.Version.ToString(System.Int32)\n  id: ToString(System.Int32)\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int32)\n  fullName: System.Version.ToString(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 257\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representation. A specified count indicates the number of components to return.</p>\\n\"\n  syntax:\n    content: public string ToString(int fieldCount)\n    content.vb: Public Function ToString(fieldCount As Integer) As String\n    parameters:\n    - id: fieldCount\n      type: System.Int32\n      description: \"\\n<p>The number of components to return. The <em>fieldCount</em> ranges from 0 to 4. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representation of the values of the major, minor, build, and revision components of the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, each separated by a period character ('.'). The <em>fieldCount</em> parameter determines how many components are returned.</p>\\n<p>fieldCount </p>\\n<p>Return Value </p>\\n<table><tbody><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>An empty string (\\\"\\\"). </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>major </p>\\n</td></tr><tr><td>\\n<p>2 </p>\\n</td><td>\\n<p>major.minor </p>\\n</td></tr><tr><td>\\n<p>3 </p>\\n</td><td>\\n<p>major.minor.build </p>\\n</td></tr><tr><td>\\n<p>4 </p>\\n</td><td>\\n<p>major.minor.build.revision </p>\\n</td></tr></tbody></table>\\n<p>For example, if you create <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object using the constructor <code>Version(1,3,5)</code>, <code>ToString(2)</code> returns \\\"1.3\\\" and <code>ToString(4)</code> throws an exception.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>fieldCount</em> is less than 0, or more than 4.</p>\\n<p>-or- </p>\\n<p>\\n<em>fieldCount</em> is more than the number of components defined in the current <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Version.ToString(Int32)\n- uid: System.Version.TryParse(System.String,System.Version@)\n  commentId: M:System.Version.TryParse(System.String,System.Version@)\n  id: TryParse(System.String,System.Version@)\n  parent: System.Version\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out Version)\n  fullName: System.Version.TryParse(System.String, out System.Version)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Version.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/Version.cs\n    startLine: 341\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Tries to convert the string representation of a version number to an equivalent <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, and returns a value that indicates whether the conversion succeeded.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string input, out Version result)\n    content.vb: Public Shared Function TryParse(input As String, ByRef result As Version) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that contains a version number to convert.</p>\\n\"\n    - id: result\n      type: System.Version\n      description: \"\\n<p>When this method returns, contains the <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equivalent of the number that is contained in <em>input</em>, if the conversion succeeded, or a <xref href=\\\"System.Version\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object whose major and minor version numbers are 0 if the conversion failed. If <em>input</em> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <em>result</em> is <strong>null</strong> when the method returns. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>input</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Version.Parse(System.String)\n    commentId: M:System.Version.Parse(System.String)\n  - type: System.Version.ToString\n    commentId: M:System.Version.ToString\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Version.TryParse(System.String, ByRef System.Version)\n  name.vb: TryParse(String, ByRef Version)\n  nameWithType: Version.TryParse(String, out Version)\n  nameWithType.vb: Version.TryParse(String, ByRef Version)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.IComparable{System.Version}\n  parent: System\n  definition: System.IComparable`1\n  name: IComparable<Version>\n  fullName: System.IComparable<System.Version>\n  fullname.vb: System.IComparable(Of System.Version)\n  name.vb: IComparable(Of Version)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - uid: System.Version\n    name: Version\n    fullName: System.Version\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Version\n    name: Version\n    fullName: System.Version\n  - name: )\n    fullName: )\n  nameWithType: IComparable<Version>\n  nameWithType.vb: IComparable(Of Version)\n  commentId: T:System.IComparable{System.Version}\n- uid: System.IEquatable{System.Version}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<Version>\n  fullName: System.IEquatable<System.Version>\n  fullname.vb: System.IEquatable(Of System.Version)\n  name.vb: IEquatable(Of Version)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - uid: System.Version\n    name: Version\n    fullName: System.Version\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Version\n    name: Version\n    fullName: System.Version\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<Version>\n  nameWithType.vb: IEquatable(Of Version)\n  commentId: T:System.IEquatable{System.Version}\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.IComparable`1\n  isExternal: false\n  name: IComparable<T>\n  fullName: System.IComparable<T>\n  fullname.vb: System.IComparable(Of T)\n  name.vb: IComparable(Of T)\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IComparable`1\n    name: IComparable\n    fullName: System.IComparable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>\n  nameWithType.vb: IComparable(Of T)\n  commentId: T:System.IComparable`1\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n  commentId: T:System.IEquatable`1\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.IComparable{System.Version}.CompareTo(System.Version)\n  parent: System.IComparable{System.Version}\n  definition: System.IComparable`1.CompareTo(`0)\n  name: CompareTo(Version)\n  fullName: System.IComparable<System.Version>.CompareTo(System.Version)\n  fullname.vb: System.IComparable(Of System.Version).CompareTo(System.Version)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<System.Version>.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Version\n    name: Version\n    fullName: System.Version\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of System.Version).CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Version\n    name: Version\n    fullName: System.Version\n  - name: )\n    fullName: )\n  nameWithType: IComparable<Version>.CompareTo(Version)\n  nameWithType.vb: IComparable(Of Version).CompareTo(Version)\n  commentId: M:System.IComparable{System.Version}.CompareTo(System.Version)\n- uid: System.Version\n  parent: System\n  isExternal: false\n  name: Version\n  fullName: System.Version\n  nameWithType: Version\n  commentId: T:System.Version\n- uid: System.IComparable`1.CompareTo(`0)\n  isExternal: false\n  name: CompareTo(T)\n  fullName: System.IComparable<T>.CompareTo(T)\n  fullname.vb: System.IComparable(Of T).CompareTo(T)\n  spec.csharp:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable<T>.CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable`1.CompareTo(`0)\n    name: CompareTo\n    fullName: System.IComparable(Of T).CompareTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparable<T>.CompareTo(T)\n  nameWithType.vb: IComparable(Of T).CompareTo(T)\n  commentId: M:System.IComparable`1.CompareTo(`0)\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IEquatable{System.Version}.Equals(System.Version)\n  parent: System.IEquatable{System.Version}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(Version)\n  fullName: System.IEquatable<System.Version>.Equals(System.Version)\n  fullname.vb: System.IEquatable(Of System.Version).Equals(System.Version)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Version>.Equals\n  - name: (\n    fullName: (\n  - uid: System.Version\n    name: Version\n    fullName: System.Version\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Version).Equals\n  - name: (\n    fullName: (\n  - uid: System.Version\n    name: Version\n    fullName: System.Version\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<Version>.Equals(Version)\n  nameWithType.vb: IEquatable(Of Version).Equals(Version)\n  commentId: M:System.IEquatable{System.Version}.Equals(System.Version)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n  commentId: M:System.IEquatable`1.Equals(`0)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n"}