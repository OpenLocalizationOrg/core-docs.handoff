{"nodes":[{"pos":[1569,1581],"content":"BitConverter","needQuote":true,"nodes":[{"content":"BitConverter","pos":[0,12]}]},{"pos":[2804,2818],"content":"IsLittleEndian","needQuote":true,"nodes":[{"content":"IsLittleEndian","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the architecture is little-endian; &lt;strong&gt;false&lt;/strong&gt; if it is big-endian.","pos":[3491,3601],"source":"\\n<p>\\n<strong>true</strong> if the architecture is little-endian; <strong>false</strong> if it is big-endian."},{"content":"&lt;/p&gt;\\n","pos":[3602,3608],"source":" </p>\\n"},{"pos":[3992,4017],"content":"DoubleToInt64Bits(Double)","needQuote":true,"nodes":[{"content":"DoubleToInt64Bits(Double)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number to convert.","pos":[4828,4855],"source":"\\n<p>The number to convert."},{"content":"&lt;/p&gt;\\n","pos":[4856,4862],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer whose value is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[4921,5000],"source":"\\n<p>A 64-bit signed integer whose value is equivalent to <em>value</em>.</p>\\n"},{"pos":[5487,5504],"content":"GetBytes(Boolean)","needQuote":true,"nodes":[{"content":"GetBytes(Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A Boolean value.","pos":[6168,6189],"source":"\\n<p>A Boolean value."},{"content":"&lt;/p&gt;\\n","pos":[6190,6196],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A byte array with length 1.&lt;/p&gt;\\n","pos":[6256,6294],"source":"\\n<p>A byte array with length 1.</p>\\n"},{"pos":[6776,6790],"content":"GetBytes(Char)","needQuote":true,"nodes":[{"content":"GetBytes(Char)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A character to convert.","pos":[7460,7488],"source":"\\n<p>A character to convert."},{"content":"&lt;/p&gt;\\n","pos":[7489,7495],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of bytes with length 2.&lt;/p&gt;\\n","pos":[7555,7598],"source":"\\n<p>An array of bytes with length 2.</p>\\n"},{"pos":[8077,8093],"content":"GetBytes(Double)","needQuote":true,"nodes":[{"content":"GetBytes(Double)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The number to convert.","pos":[8864,8891],"source":"\\n<p>The number to convert."},{"content":"&lt;/p&gt;\\n","pos":[8892,8898],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of bytes with length 8.&lt;/p&gt;\\n","pos":[8958,9001],"source":"\\n<p>An array of bytes with length 8.</p>\\n"},{"pos":[9483,9498],"content":"GetBytes(Int16)","needQuote":true,"nodes":[{"content":"GetBytes(Int16)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The number to convert.","pos":[10254,10281],"source":"\\n<p>The number to convert."},{"content":"&lt;/p&gt;\\n","pos":[10282,10288],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of bytes with length 2.&lt;/p&gt;\\n","pos":[10348,10391],"source":"\\n<p>An array of bytes with length 2.</p>\\n"},{"pos":[10870,10885],"content":"GetBytes(Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The number to convert.","pos":[11641,11668],"source":"\\n<p>The number to convert."},{"content":"&lt;/p&gt;\\n","pos":[11669,11675],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of bytes with length 4.&lt;/p&gt;\\n","pos":[11735,11778],"source":"\\n<p>An array of bytes with length 4.</p>\\n"},{"pos":[12257,12272],"content":"GetBytes(Int64)","needQuote":true,"nodes":[{"content":"GetBytes(Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The number to convert.","pos":[13026,13053],"source":"\\n<p>The number to convert."},{"content":"&lt;/p&gt;\\n","pos":[13054,13060],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of bytes with length 8.&lt;/p&gt;\\n","pos":[13120,13163],"source":"\\n<p>An array of bytes with length 8.</p>\\n"},{"pos":[13645,13661],"content":"GetBytes(Single)","needQuote":true,"nodes":[{"content":"GetBytes(Single)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The number to convert.","pos":[14431,14458],"source":"\\n<p>The number to convert."},{"content":"&lt;/p&gt;\\n","pos":[14459,14465],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of bytes with length 4.&lt;/p&gt;\\n","pos":[14525,14568],"source":"\\n<p>An array of bytes with length 4.</p>\\n"},{"pos":[15053,15069],"content":"GetBytes(UInt16)","needQuote":true,"nodes":[{"content":"GetBytes(UInt16)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The number to convert.","pos":[15830,15857],"source":"\\n<p>The number to convert."},{"content":"&lt;/p&gt;\\n","pos":[15858,15864],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of bytes with length 2.&lt;/p&gt;\\n","pos":[15924,15967],"source":"\\n<p>An array of bytes with length 2.</p>\\n"},{"pos":[16627,16643],"content":"GetBytes(UInt32)","needQuote":true,"nodes":[{"content":"GetBytes(UInt32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The number to convert.","pos":[17404,17431],"source":"\\n<p>The number to convert."},{"content":"&lt;/p&gt;\\n","pos":[17432,17438],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of bytes with length 4.&lt;/p&gt;\\n","pos":[17498,17541],"source":"\\n<p>An array of bytes with length 4.</p>\\n"},{"pos":[18201,18217],"content":"GetBytes(UInt64)","needQuote":true,"nodes":[{"content":"GetBytes(UInt64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The number to convert.","pos":[18976,19003],"source":"\\n<p>The number to convert."},{"content":"&lt;/p&gt;\\n","pos":[19004,19010],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of bytes with length 8.&lt;/p&gt;\\n","pos":[19070,19113],"source":"\\n<p>An array of bytes with length 8.</p>\\n"},{"pos":[19797,19821],"content":"Int64BitsToDouble(Int64)","needQuote":true,"nodes":[{"content":"Int64BitsToDouble(Int64)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The number to convert.","pos":[20630,20657],"source":"\\n<p>The number to convert."},{"content":"&lt;/p&gt;\\n","pos":[20658,20664],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating point number whose value is equivalent to &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[20724,20820],"source":"\\n<p>A double-precision floating point number whose value is equivalent to <em>value</em>.</p>\\n"},{"pos":[21347,21371],"content":"ToBoolean(Byte[], Int32)","needQuote":true,"nodes":[{"content":"ToBoolean(Byte[], Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;A byte array.","pos":[22127,22145],"source":"\\n<p>A byte array."},{"content":"&lt;/p&gt;\\n","pos":[22146,22152],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the byte within &lt;em&gt;value&lt;/em&gt;.","pos":[22220,22269],"source":"\\n<p>The index of the byte within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[22270,22276],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the byte at &lt;em&gt;startIndex&lt;/em&gt; in &lt;em&gt;value&lt;/em&gt; is nonzero; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22337,22471],"source":"\\n<p>\\n<strong>true</strong> if the byte at <em>startIndex</em> in <em>value</em> is nonzero; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22590,22637],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22638,22644],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;value&lt;/em&gt; minus 1.","pos":[22761,22859],"source":"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1."},{"content":"&lt;/p&gt;\\n","pos":[22860,22866],"source":" </p>\\n"},{"pos":[23535,23556],"content":"ToChar(Byte[], Int32)","needQuote":true,"nodes":[{"content":"ToChar(Byte[], Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;An array.","pos":[24302,24316],"source":"\\n<p>An array."},{"content":"&lt;/p&gt;\\n","pos":[24317,24323],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[24391,24440],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[24441,24447],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A character formed by two bytes beginning at &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[24505,24581],"source":"\\n<p>A character formed by two bytes beginning at <em>startIndex</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; equals the length of &lt;em&gt;value&lt;/em&gt; minus 1.&lt;/p&gt;\\n","pos":[24692,24769],"source":"\\n<p>\\n<em>startIndex</em> equals the length of <em>value</em> minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[24874,24921],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24922,24928],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;value&lt;/em&gt; minus 1.","pos":[25045,25143],"source":"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1."},{"content":"&lt;/p&gt;\\n","pos":[25144,25150],"source":" </p>\\n"},{"pos":[25807,25830],"content":"ToDouble(Byte[], Int32)","needQuote":true,"nodes":[{"content":"ToDouble(Byte[], Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An array of bytes.","pos":[26689,26712],"source":"\\n<p>An array of bytes."},{"content":"&lt;/p&gt;\\n","pos":[26713,26719],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[26787,26836],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[26837,26843],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double precision floating point number formed by eight bytes beginning at &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[26903,27010],"source":"\\n<p>A double precision floating point number formed by eight bytes beginning at <em>startIndex</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is greater than or equal to the length of &lt;em&gt;value&lt;/em&gt; minus 7, and is less than or equal to the length of &lt;em&gt;value&lt;/em&gt; minus 1.&lt;/p&gt;\\n","pos":[27121,27286],"source":"\\n<p>\\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 7, and is less than or equal to the length of <em>value</em> minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[27391,27438],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[27439,27445],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;value&lt;/em&gt; minus 1.","pos":[27562,27660],"source":"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1."},{"content":"&lt;/p&gt;\\n","pos":[27661,27667],"source":" </p>\\n"},{"pos":[28333,28355],"content":"ToInt16(Byte[], Int32)","needQuote":true,"nodes":[{"content":"ToInt16(Byte[], Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An array of bytes.","pos":[29189,29212],"source":"\\n<p>An array of bytes."},{"content":"&lt;/p&gt;\\n","pos":[29213,29219],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[29287,29336],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[29337,29343],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit signed integer formed by two bytes beginning at &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[29402,29490],"source":"\\n<p>A 16-bit signed integer formed by two bytes beginning at <em>startIndex</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; equals the length of &lt;em&gt;value&lt;/em&gt; minus 1.&lt;/p&gt;\\n","pos":[29601,29678],"source":"\\n<p>\\n<em>startIndex</em> equals the length of <em>value</em> minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[29783,29830],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[29831,29837],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;value&lt;/em&gt; minus 1.","pos":[29954,30052],"source":"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1."},{"content":"&lt;/p&gt;\\n","pos":[30053,30059],"source":" </p>\\n"},{"pos":[30719,30741],"content":"ToInt32(Byte[], Int32)","needQuote":true,"nodes":[{"content":"ToInt32(Byte[], Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An array of bytes.","pos":[31576,31599],"source":"\\n<p>An array of bytes."},{"content":"&lt;/p&gt;\\n","pos":[31600,31606],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[31674,31723],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[31724,31730],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer formed by four bytes beginning at &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[31789,31878],"source":"\\n<p>A 32-bit signed integer formed by four bytes beginning at <em>startIndex</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is greater than or equal to the length of &lt;em&gt;value&lt;/em&gt; minus 3, and is less than or equal to the length of &lt;em&gt;value&lt;/em&gt; minus 1.&lt;/p&gt;\\n","pos":[31989,32154],"source":"\\n<p>\\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 3, and is less than or equal to the length of <em>value</em> minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[32259,32306],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[32307,32313],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;value&lt;/em&gt; minus 1.","pos":[32430,32528],"source":"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1."},{"content":"&lt;/p&gt;\\n","pos":[32529,32535],"source":" </p>\\n"},{"pos":[33195,33217],"content":"ToInt64(Byte[], Int32)","needQuote":true,"nodes":[{"content":"ToInt64(Byte[], Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An array of bytes.","pos":[34051,34074],"source":"\\n<p>An array of bytes."},{"content":"&lt;/p&gt;\\n","pos":[34075,34081],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[34149,34198],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[34199,34205],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit signed integer formed by eight bytes beginning at &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[34264,34354],"source":"\\n<p>A 64-bit signed integer formed by eight bytes beginning at <em>startIndex</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is greater than or equal to the length of &lt;em&gt;value&lt;/em&gt; minus 7, and is less than or equal to the length of &lt;em&gt;value&lt;/em&gt; minus 1.&lt;/p&gt;\\n","pos":[34465,34630],"source":"\\n<p>\\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 7, and is less than or equal to the length of <em>value</em> minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[34735,34782],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[34783,34789],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;value&lt;/em&gt; minus 1.","pos":[34906,35004],"source":"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1."},{"content":"&lt;/p&gt;\\n","pos":[35005,35011],"source":" </p>\\n"},{"pos":[35674,35697],"content":"ToSingle(Byte[], Int32)","needQuote":true,"nodes":[{"content":"ToSingle(Byte[], Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An array of bytes.","pos":[36554,36577],"source":"\\n<p>An array of bytes."},{"content":"&lt;/p&gt;\\n","pos":[36578,36584],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[36652,36701],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[36702,36708],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A single-precision floating point number formed by four bytes beginning at &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[36768,36874],"source":"\\n<p>A single-precision floating point number formed by four bytes beginning at <em>startIndex</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is greater than or equal to the length of &lt;em&gt;value&lt;/em&gt; minus 3, and is less than or equal to the length of &lt;em&gt;value&lt;/em&gt; minus 1.&lt;/p&gt;\\n","pos":[36985,37150],"source":"\\n<p>\\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 3, and is less than or equal to the length of <em>value</em> minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[37255,37302],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[37303,37309],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;value&lt;/em&gt; minus 1.","pos":[37426,37524],"source":"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1."},{"content":"&lt;/p&gt;\\n","pos":[37525,37531],"source":" </p>\\n"},{"pos":[38161,38177],"content":"ToString(Byte[])","needQuote":true,"nodes":[{"content":"ToString(Byte[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An array of bytes.","pos":[38914,38937],"source":"\\n<p>An array of bytes."},{"content":"&lt;/p&gt;\\n","pos":[38938,38944],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[39287,39334],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[39335,39341],"source":" </p>\\n"},{"pos":[39849,39872],"content":"ToString(Byte[], Int32)","needQuote":true,"nodes":[{"content":"ToString(Byte[], Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An array of bytes.","pos":[40665,40688],"source":"\\n<p>An array of bytes."},{"content":"&lt;/p&gt;\\n","pos":[40689,40695],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[40763,40812],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[40813,40819],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[41176,41223],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[41224,41230],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;value&lt;/em&gt; minus 1.","pos":[41347,41445],"source":"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1."},{"content":"&lt;/p&gt;\\n","pos":[41446,41452],"source":" </p>\\n"},{"pos":[42034,42064],"content":"ToString(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ToString(Byte[], Int32, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;An array of bytes.","pos":[42902,42925],"source":"\\n<p>An array of bytes."},{"content":"&lt;/p&gt;\\n","pos":[42926,42932],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[43000,43049],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[43050,43056],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of array elements in &lt;em&gt;value&lt;/em&gt; to convert.","pos":[43120,43183],"source":"\\n<p>The number of array elements in <em>value</em> to convert."},{"content":"&lt;/p&gt;\\n","pos":[43184,43190],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[43547,43594],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[43595,43601],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; or &lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is greater than zero and is greater than or equal to the length of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[43718,43914],"source":"\\n<p>\\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> is greater than zero and is greater than or equal to the length of <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The combination of &lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; does not specify a position within &lt;em&gt;value&lt;/em&gt;; that is, the &lt;em&gt;startIndex&lt;/em&gt; parameter is greater than the length of &lt;em&gt;value&lt;/em&gt; minus the &lt;em&gt;length&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[44011,44256],"source":"\\n<p>The combination of <em>startIndex</em> and <em>length</em> does not specify a position within <em>value</em>; that is, the <em>startIndex</em> parameter is greater than the length of <em>value</em> minus the <em>length</em> parameter.</p>\\n"},{"pos":[44834,44857],"content":"ToUInt16(Byte[], Int32)","needQuote":true,"nodes":[{"content":"ToUInt16(Byte[], Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The array of bytes.","pos":[45697,45721],"source":"\\n<p>The array of bytes."},{"content":"&lt;/p&gt;\\n","pos":[45722,45728],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[45796,45845],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[45846,45852],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 16-bit unsigned integer formed by two bytes beginning at &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[45912,46002],"source":"\\n<p>A 16-bit unsigned integer formed by two bytes beginning at <em>startIndex</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; equals the length of &lt;em&gt;value&lt;/em&gt; minus 1.&lt;/p&gt;\\n","pos":[46113,46190],"source":"\\n<p>\\n<em>startIndex</em> equals the length of <em>value</em> minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[46295,46342],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[46343,46349],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;value&lt;/em&gt; minus 1.","pos":[46466,46564],"source":"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1."},{"content":"&lt;/p&gt;\\n","pos":[46565,46571],"source":" </p>\\n"},{"pos":[47415,47438],"content":"ToUInt32(Byte[], Int32)","needQuote":true,"nodes":[{"content":"ToUInt32(Byte[], Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An array of bytes.","pos":[48279,48302],"source":"\\n<p>An array of bytes."},{"content":"&lt;/p&gt;\\n","pos":[48303,48309],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[48377,48426],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[48427,48433],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit unsigned integer formed by four bytes beginning at &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[48493,48584],"source":"\\n<p>A 32-bit unsigned integer formed by four bytes beginning at <em>startIndex</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is greater than or equal to the length of &lt;em&gt;value&lt;/em&gt; minus 3, and is less than or equal to the length of &lt;em&gt;value&lt;/em&gt; minus 1.&lt;/p&gt;\\n","pos":[48695,48860],"source":"\\n<p>\\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 3, and is less than or equal to the length of <em>value</em> minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[48965,49012],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[49013,49019],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;value&lt;/em&gt; minus 1.","pos":[49136,49234],"source":"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1."},{"content":"&lt;/p&gt;\\n","pos":[49235,49241],"source":" </p>\\n"},{"pos":[50085,50108],"content":"ToUInt64(Byte[], Int32)","needQuote":true,"nodes":[{"content":"ToUInt64(Byte[], Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An array of bytes.","pos":[50948,50971],"source":"\\n<p>An array of bytes."},{"content":"&lt;/p&gt;\\n","pos":[50972,50978],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position within &lt;em&gt;value&lt;/em&gt;.","pos":[51046,51095],"source":"\\n<p>The starting position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[51096,51102],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 64-bit unsigned integer formed by the eight bytes beginning at &lt;em&gt;startIndex&lt;/em&gt;.&lt;/p&gt;\\n","pos":[51162,51258],"source":"\\n<p>A 64-bit unsigned integer formed by the eight bytes beginning at <em>startIndex</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is greater than or equal to the length of &lt;em&gt;value&lt;/em&gt; minus 7, and is less than or equal to the length of &lt;em&gt;value&lt;/em&gt; minus 1.&lt;/p&gt;\\n","pos":[51369,51534],"source":"\\n<p>\\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 7, and is less than or equal to the length of <em>value</em> minus 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[51639,51686],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[51687,51693],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;value&lt;/em&gt; minus 1.","pos":[51810,51908],"source":"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1."},{"content":"&lt;/p&gt;\\n","pos":[51909,51915],"source":" </p>\\n"},{"pos":[52569,52575],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[52706,52712],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52872,52882],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[52977,52985],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[53054,53055],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53082,53083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53153,53161],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[53230,53231],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53258,53259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53442,53456],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[53575,53581],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[53648,53649],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53699,53705],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53765,53766],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53849,53855],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[53922,53923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53973,53979],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54039,54040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54254,54276],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[54424,54430],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[54497,54498],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54548,54554],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[54615,54616]},{"pos":[54671,54677],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54737,54738],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54835,54841],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[54908,54909],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54959,54965],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[55026,55027]},{"pos":[55082,55088],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55148,55149],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55394,55425],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[55591,55606],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[55682,55683],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55733,55739],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[55800,55801]},{"pos":[55856,55862],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55922,55923],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56029,56044],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[56120,56121],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56171,56177],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[56238,56239]},{"pos":[56294,56300],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56360,56361],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56591,56604],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[56705,56716],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[56788,56789],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56816,56817],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56890,56901],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[56973,56974],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57001,57002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57177,57186],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[57279,57286],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[57354,57355],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57382,57383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57452,57459],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[57527,57528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57555,57556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57731,57748],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[57857,57872],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[57948,57949],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57976,57977],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58054,58069],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[58145,58146],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58173,58174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58344,58351],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[58499,58505],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[58649,58654],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[58759,58765],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[58885,58889],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[58948,58950]},{"pos":[59013,59017],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[59075,59077],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[59208,59212],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[59350,59355],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[59496,59501],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[59643,59649],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[59794,59800],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[59945,59951],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[60096,60102],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[60247,60253],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[60396,60417],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[60611,60638],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[60857,60874],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.BitConverter\n  commentId: T:System.BitConverter\n  id: BitConverter\n  parent: System\n  children:\n  - System.BitConverter.DoubleToInt64Bits(System.Double)\n  - System.BitConverter.GetBytes(System.Boolean)\n  - System.BitConverter.GetBytes(System.Char)\n  - System.BitConverter.GetBytes(System.Double)\n  - System.BitConverter.GetBytes(System.Int16)\n  - System.BitConverter.GetBytes(System.Int32)\n  - System.BitConverter.GetBytes(System.Int64)\n  - System.BitConverter.GetBytes(System.Single)\n  - System.BitConverter.GetBytes(System.UInt16)\n  - System.BitConverter.GetBytes(System.UInt32)\n  - System.BitConverter.GetBytes(System.UInt64)\n  - System.BitConverter.Int64BitsToDouble(System.Int64)\n  - System.BitConverter.IsLittleEndian\n  - System.BitConverter.ToBoolean(System.Byte[],System.Int32)\n  - System.BitConverter.ToChar(System.Byte[],System.Int32)\n  - System.BitConverter.ToDouble(System.Byte[],System.Int32)\n  - System.BitConverter.ToInt16(System.Byte[],System.Int32)\n  - System.BitConverter.ToInt32(System.Byte[],System.Int32)\n  - System.BitConverter.ToInt64(System.Byte[],System.Int32)\n  - System.BitConverter.ToSingle(System.Byte[],System.Int32)\n  - System.BitConverter.ToString(System.Byte[])\n  - System.BitConverter.ToString(System.Byte[],System.Int32)\n  - System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)\n  - System.BitConverter.ToUInt16(System.Byte[],System.Int32)\n  - System.BitConverter.ToUInt32(System.Byte[],System.Int32)\n  - System.BitConverter.ToUInt64(System.Byte[],System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: BitConverter\n  fullName: System.BitConverter\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BitConverter\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 26\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts base data types to an array of bytes, and an array of bytes to base data types.</p>\\n\"\n  syntax:\n    content: public class BitConverter\n    content.vb: Public Class BitConverter\n  seealso:\n  - type: System.Byte\n    commentId: T:System.Byte\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: BitConverter\n- uid: System.BitConverter.IsLittleEndian\n  commentId: F:System.BitConverter.IsLittleEndian\n  id: IsLittleEndian\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: IsLittleEndian\n  fullName: System.BitConverter.IsLittleEndian\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLittleEndian\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Indicates the byte order (\\\"endianness\\\") in which data is stored in this computer architecture.</p>\\n\"\n  syntax:\n    content: public static readonly bool IsLittleEndian\n    content.vb: Public Shared ReadOnly IsLittleEndian As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the architecture is little-endian; <strong>false</strong> if it is big-endian. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: BitConverter.IsLittleEndian\n- uid: System.BitConverter.DoubleToInt64Bits(System.Double)\n  commentId: M:System.BitConverter.DoubleToInt64Bits(System.Double)\n  id: DoubleToInt64Bits(System.Double)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: DoubleToInt64Bits(Double)\n  fullName: System.BitConverter.DoubleToInt64Bits(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DoubleToInt64Bits\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 440\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified double-precision floating point number to a 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static long DoubleToInt64Bits(double value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function DoubleToInt64Bits(value As Double) As Long\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The number to convert. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer whose value is equivalent to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.BitConverter.Int64BitsToDouble(System.Int64)\n    commentId: M:System.BitConverter.Int64BitsToDouble(System.Int64)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitConverter.DoubleToInt64Bits(Double)\n- uid: System.BitConverter.GetBytes(System.Boolean)\n  commentId: M:System.BitConverter.GetBytes(System.Boolean)\n  id: GetBytes(System.Boolean)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Boolean)\n  fullName: System.BitConverter.GetBytes(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 38\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified Boolean value as a byte array.</p>\\n\"\n  syntax:\n    content: public static byte[] GetBytes(bool value)\n    content.vb: Public Shared Function GetBytes(value As Boolean) As Byte()\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>A Boolean value. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array with length 1.</p>\\n\"\n  seealso:\n  - type: System.BitConverter.ToBoolean(System.Byte[],System.Int32)\n    commentId: M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitConverter.GetBytes(Boolean)\n- uid: System.BitConverter.GetBytes(System.Char)\n  commentId: M:System.BitConverter.GetBytes(System.Char)\n  id: GetBytes(System.Char)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char)\n  fullName: System.BitConverter.GetBytes(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 48\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified Unicode character value as an array of bytes.</p>\\n\"\n  syntax:\n    content: public static byte[] GetBytes(char value)\n    content.vb: Public Shared Function GetBytes(value As Char) As Byte()\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>A character to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes with length 2.</p>\\n\"\n  seealso:\n  - type: System.BitConverter.ToChar(System.Byte[],System.Int32)\n    commentId: M:System.BitConverter.ToChar(System.Byte[],System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitConverter.GetBytes(Char)\n- uid: System.BitConverter.GetBytes(System.Double)\n  commentId: M:System.BitConverter.GetBytes(System.Double)\n  id: GetBytes(System.Double)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Double)\n  fullName: System.BitConverter.GetBytes(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 141\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified double-precision floating point value as an array of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static byte[] GetBytes(double value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetBytes(value As Double) As Byte()\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The number to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes with length 8.</p>\\n\"\n  seealso:\n  - type: System.BitConverter.ToDouble(System.Byte[],System.Int32)\n    commentId: M:System.BitConverter.ToDouble(System.Byte[],System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitConverter.GetBytes(Double)\n- uid: System.BitConverter.GetBytes(System.Int16)\n  commentId: M:System.BitConverter.GetBytes(System.Int16)\n  id: GetBytes(System.Int16)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Int16)\n  fullName: System.BitConverter.GetBytes(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 58\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 16-bit signed integer value as an array of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static byte[] GetBytes(short value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetBytes(value As Short) As Byte()\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The number to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes with length 2.</p>\\n\"\n  seealso:\n  - type: System.BitConverter.ToInt16(System.Byte[],System.Int32)\n    commentId: M:System.BitConverter.ToInt16(System.Byte[],System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitConverter.GetBytes(Int16)\n- uid: System.BitConverter.GetBytes(System.Int32)\n  commentId: M:System.BitConverter.GetBytes(System.Int32)\n  id: GetBytes(System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Int32)\n  fullName: System.BitConverter.GetBytes(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 72\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 32-bit signed integer value as an array of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static byte[] GetBytes(int value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetBytes(value As Integer) As Byte()\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The number to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes with length 4.</p>\\n\"\n  seealso:\n  - type: System.BitConverter.ToInt32(System.Byte[],System.Int32)\n    commentId: M:System.BitConverter.ToInt32(System.Byte[],System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitConverter.GetBytes(Int32)\n- uid: System.BitConverter.GetBytes(System.Int64)\n  commentId: M:System.BitConverter.GetBytes(System.Int64)\n  id: GetBytes(System.Int64)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Int64)\n  fullName: System.BitConverter.GetBytes(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 86\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 64-bit signed integer value as an array of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static byte[] GetBytes(long value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetBytes(value As Long) As Byte()\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The number to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes with length 8.</p>\\n\"\n  seealso:\n  - type: System.BitConverter.ToInt64(System.Byte[],System.Int32)\n    commentId: M:System.BitConverter.ToInt64(System.Byte[],System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitConverter.GetBytes(Int64)\n- uid: System.BitConverter.GetBytes(System.Single)\n  commentId: M:System.BitConverter.GetBytes(System.Single)\n  id: GetBytes(System.Single)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Single)\n  fullName: System.BitConverter.GetBytes(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 130\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified single-precision floating point value as an array of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static byte[] GetBytes(float value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetBytes(value As Single) As Byte()\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The number to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes with length 4.</p>\\n\"\n  seealso:\n  - type: System.BitConverter.ToSingle(System.Byte[],System.Int32)\n    commentId: M:System.BitConverter.ToSingle(System.Byte[],System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitConverter.GetBytes(Single)\n- uid: System.BitConverter.GetBytes(System.UInt16)\n  commentId: M:System.BitConverter.GetBytes(System.UInt16)\n  id: GetBytes(System.UInt16)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(UInt16)\n  fullName: System.BitConverter.GetBytes(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 100\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 16-bit unsigned integer value as an array of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static byte[] GetBytes(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function GetBytes(value As UShort) As Byte()\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The number to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes with length 2.</p>\\n\"\n  seealso:\n  - type: System.BitConverter.ToUInt16(System.Byte[],System.Int32)\n    commentId: M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitConverter.GetBytes(UInt16)\n- uid: System.BitConverter.GetBytes(System.UInt32)\n  commentId: M:System.BitConverter.GetBytes(System.UInt32)\n  id: GetBytes(System.UInt32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(UInt32)\n  fullName: System.BitConverter.GetBytes(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 110\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 32-bit unsigned integer value as an array of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static byte[] GetBytes(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function GetBytes(value As UInteger) As Byte()\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The number to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes with length 4.</p>\\n\"\n  seealso:\n  - type: System.BitConverter.ToUInt32(System.Byte[],System.Int32)\n    commentId: M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitConverter.GetBytes(UInt32)\n- uid: System.BitConverter.GetBytes(System.UInt64)\n  commentId: M:System.BitConverter.GetBytes(System.UInt64)\n  id: GetBytes(System.UInt64)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(UInt64)\n  fullName: System.BitConverter.GetBytes(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 120\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the specified 64-bit unsigned integer value as an array of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static byte[] GetBytes(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function GetBytes(value As ULong) As Byte()\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The number to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes with length 8.</p>\\n\"\n  seealso:\n  - type: System.BitConverter.ToUInt64(System.Byte[],System.Int32)\n    commentId: M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitConverter.GetBytes(UInt64)\n- uid: System.BitConverter.Int64BitsToDouble(System.Int64)\n  commentId: M:System.BitConverter.Int64BitsToDouble(System.Int64)\n  id: Int64BitsToDouble(System.Int64)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: Int64BitsToDouble(Int64)\n  fullName: System.BitConverter.Int64BitsToDouble(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Int64BitsToDouble\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 445\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the specified 64-bit signed integer to a double-precision floating point number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static double Int64BitsToDouble(long value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Int64BitsToDouble(value As Long) As Double\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The number to convert. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating point number whose value is equivalent to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.BitConverter.DoubleToInt64Bits(System.Double)\n    commentId: M:System.BitConverter.DoubleToInt64Bits(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitConverter.Int64BitsToDouble(Int64)\n- uid: System.BitConverter.ToBoolean(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)\n  id: ToBoolean(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToBoolean(Byte[], Int32)\n  fullName: System.BitConverter.ToBoolean(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToBoolean\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 428\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a Boolean value converted from the byte at a specified position in a byte array.</p>\\n\"\n  syntax:\n    content: public static bool ToBoolean(byte[] value, int startIndex)\n    content.vb: Public Shared Function ToBoolean(value As Byte(), startIndex As Integer) As Boolean\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>A byte array. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the byte within <em>value</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the byte at <em>startIndex</em> in <em>value</em> is nonzero; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\\n\"\n  seealso:\n  - type: System.BitConverter.GetBytes(System.Boolean)\n    commentId: M:System.BitConverter.GetBytes(System.Boolean)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToBoolean(System.Byte(), System.Int32)\n  name.vb: ToBoolean(Byte(), Int32)\n  nameWithType: BitConverter.ToBoolean(Byte[], Int32)\n  nameWithType.vb: BitConverter.ToBoolean(Byte(), Int32)\n- uid: System.BitConverter.ToChar(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToChar(System.Byte[],System.Int32)\n  id: ToChar(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToChar(Byte[], Int32)\n  fullName: System.BitConverter.ToChar(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToChar\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 151\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a Unicode character converted from two bytes at a specified position in a byte array.</p>\\n\"\n  syntax:\n    content: public static char ToChar(byte[] value, int startIndex)\n    content.vb: Public Shared Function ToChar(value As Byte(), startIndex As Integer) As Char\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>An array. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>A character formed by two bytes beginning at <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>startIndex</em> equals the length of <em>value</em> minus 1.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\\n\"\n  seealso:\n  - type: System.BitConverter.GetBytes(System.Char)\n    commentId: M:System.BitConverter.GetBytes(System.Char)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToChar(System.Byte(), System.Int32)\n  name.vb: ToChar(Byte(), Int32)\n  nameWithType: BitConverter.ToChar(Byte[], Int32)\n  nameWithType.vb: BitConverter.ToChar(Byte(), Int32)\n- uid: System.BitConverter.ToDouble(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToDouble(System.Byte[],System.Int32)\n  id: ToDouble(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToDouble(Byte[], Int32)\n  fullName: System.BitConverter.ToDouble(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDouble\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 333\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static double ToDouble(byte[] value, int startIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ToDouble(value As Byte(), startIndex As Integer) As Double\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double precision floating point number formed by eight bytes beginning at <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 7, and is less than or equal to the length of <em>value</em> minus 1.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\\n\"\n  seealso:\n  - type: System.BitConverter.GetBytes(System.Double)\n    commentId: M:System.BitConverter.GetBytes(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToDouble(System.Byte(), System.Int32)\n  name.vb: ToDouble(Byte(), Int32)\n  nameWithType: BitConverter.ToDouble(Byte[], Int32)\n  nameWithType.vb: BitConverter.ToDouble(Byte(), Int32)\n- uid: System.BitConverter.ToInt16(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToInt16(System.Byte[],System.Int32)\n  id: ToInt16(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToInt16(Byte[], Int32)\n  fullName: System.BitConverter.ToInt16(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt16\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 170\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static short ToInt16(byte[] value, int startIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ToInt16(value As Byte(), startIndex As Integer) As Short\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer formed by two bytes beginning at <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>startIndex</em> equals the length of <em>value</em> minus 1.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\\n\"\n  seealso:\n  - type: System.BitConverter.GetBytes(System.Int16)\n    commentId: M:System.BitConverter.GetBytes(System.Int16)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToInt16(System.Byte(), System.Int32)\n  name.vb: ToInt16(Byte(), Int32)\n  nameWithType: BitConverter.ToInt16(Byte[], Int32)\n  nameWithType.vb: BitConverter.ToInt16(Byte(), Int32)\n- uid: System.BitConverter.ToInt32(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToInt32(System.Byte[],System.Int32)\n  id: ToInt32(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToInt32(Byte[], Int32)\n  fullName: System.BitConverter.ToInt32(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 202\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static int ToInt32(byte[] value, int startIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ToInt32(value As Byte(), startIndex As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer formed by four bytes beginning at <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 3, and is less than or equal to the length of <em>value</em> minus 1.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\\n\"\n  seealso:\n  - type: System.BitConverter.GetBytes(System.Int32)\n    commentId: M:System.BitConverter.GetBytes(System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToInt32(System.Byte(), System.Int32)\n  name.vb: ToInt32(Byte(), Int32)\n  nameWithType: BitConverter.ToInt32(Byte[], Int32)\n  nameWithType.vb: BitConverter.ToInt32(Byte(), Int32)\n- uid: System.BitConverter.ToInt64(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToInt64(System.Byte[],System.Int32)\n  id: ToInt64(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToInt64(Byte[], Int32)\n  fullName: System.BitConverter.ToInt64(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 233\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static long ToInt64(byte[] value, int startIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ToInt64(value As Byte(), startIndex As Integer) As Long\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer formed by eight bytes beginning at <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 7, and is less than or equal to the length of <em>value</em> minus 1.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\\n\"\n  seealso:\n  - type: System.BitConverter.GetBytes(System.Int64)\n    commentId: M:System.BitConverter.GetBytes(System.Int64)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToInt64(System.Byte(), System.Int32)\n  name.vb: ToInt64(Byte(), Int32)\n  nameWithType: BitConverter.ToInt64(Byte[], Int32)\n  nameWithType.vb: BitConverter.ToInt64(Byte(), Int32)\n- uid: System.BitConverter.ToSingle(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToSingle(System.Byte[],System.Int32)\n  id: ToSingle(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToSingle(Byte[], Int32)\n  fullName: System.BitConverter.ToSingle(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToSingle\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 317\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static float ToSingle(byte[] value, int startIndex)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ToSingle(value As Byte(), startIndex As Integer) As Single\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating point number formed by four bytes beginning at <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 3, and is less than or equal to the length of <em>value</em> minus 1.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\\n\"\n  seealso:\n  - type: System.BitConverter.GetBytes(System.Single)\n    commentId: M:System.BitConverter.GetBytes(System.Single)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToSingle(System.Byte(), System.Int32)\n  name.vb: ToSingle(Byte(), Int32)\n  nameWithType: BitConverter.ToSingle(Byte[], Int32)\n  nameWithType.vb: BitConverter.ToSingle(Byte(), Int32)\n- uid: System.BitConverter.ToString(System.Byte[])\n  commentId: M:System.BitConverter.ToString(System.Byte[])\n  id: ToString(System.Byte[])\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToString(Byte[])\n  fullName: System.BitConverter.ToString(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 402\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(byte[] value)\n    content.vb: Public Shared Function ToString(value As Byte()) As String\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <em>value</em>; for example, \\\"7F-2C-4A-00\\\".</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToString(System.Byte())\n  name.vb: ToString(Byte())\n  nameWithType: BitConverter.ToString(Byte[])\n  nameWithType.vb: BitConverter.ToString(Byte())\n- uid: System.BitConverter.ToString(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToString(System.Byte[],System.Int32)\n  id: ToString(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToString(Byte[], Int32)\n  fullName: System.BitConverter.ToString(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 411\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(byte[] value, int startIndex)\n    content.vb: Public Shared Function ToString(value As Byte(), startIndex As Integer) As String\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <em>value</em>; for example, \\\"7F-2C-4A-00\\\".</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToString(System.Byte(), System.Int32)\n  name.vb: ToString(Byte(), Int32)\n  nameWithType: BitConverter.ToString(Byte[], Int32)\n  nameWithType.vb: BitConverter.ToString(Byte(), Int32)\n- uid: System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)\n  id: ToString(System.Byte[],System.Int32,System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToString(Byte[], Int32, Int32)\n  fullName: System.BitConverter.ToString(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 358\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</p>\\n\"\n  syntax:\n    content: public static string ToString(byte[] value, int startIndex, int length)\n    content.vb: Public Shared Function ToString(value As Byte(), startIndex As Integer, length As Integer) As String\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of array elements in <em>value</em> to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <em>value</em>; for example, \\\"7F-2C-4A-00\\\".</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>startIndex</em> is greater than zero and is greater than or equal to the length of <em>value</em>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The combination of <em>startIndex</em> and <em>length</em> does not specify a position within <em>value</em>; that is, the <em>startIndex</em> parameter is greater than the length of <em>value</em> minus the <em>length</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToString(System.Byte(), System.Int32, System.Int32)\n  name.vb: ToString(Byte(), Int32, Int32)\n  nameWithType: BitConverter.ToString(Byte[], Int32, Int32)\n  nameWithType.vb: BitConverter.ToString(Byte(), Int32, Int32)\n- uid: System.BitConverter.ToUInt16(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)\n  id: ToUInt16(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToUInt16(Byte[], Int32)\n  fullName: System.BitConverter.ToUInt16(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt16\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 270\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ushort ToUInt16(byte[] value, int startIndex)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt16(value As Byte(), startIndex As Integer) As UShort\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>The array of bytes. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>A 16-bit unsigned integer formed by two bytes beginning at <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>startIndex</em> equals the length of <em>value</em> minus 1.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\\n\"\n  seealso:\n  - type: System.BitConverter.GetBytes(System.UInt16)\n    commentId: M:System.BitConverter.GetBytes(System.UInt16)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToUInt16(System.Byte(), System.Int32)\n  name.vb: ToUInt16(Byte(), Int32)\n  nameWithType: BitConverter.ToUInt16(Byte[], Int32)\n  nameWithType.vb: BitConverter.ToUInt16(Byte(), Int32)\n- uid: System.BitConverter.ToUInt32(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)\n  id: ToUInt32(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToUInt32(Byte[], Int32)\n  fullName: System.BitConverter.ToUInt32(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt32\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 286\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static uint ToUInt32(byte[] value, int startIndex)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt32(value As Byte(), startIndex As Integer) As UInteger\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>A 32-bit unsigned integer formed by four bytes beginning at <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 3, and is less than or equal to the length of <em>value</em> minus 1.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\\n\"\n  seealso:\n  - type: System.BitConverter.GetBytes(System.UInt32)\n    commentId: M:System.BitConverter.GetBytes(System.UInt32)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToUInt32(System.Byte(), System.Int32)\n  name.vb: ToUInt32(Byte(), Int32)\n  nameWithType: BitConverter.ToUInt32(Byte[], Int32)\n  nameWithType.vb: BitConverter.ToUInt32(Byte(), Int32)\n- uid: System.BitConverter.ToUInt64(System.Byte[],System.Int32)\n  commentId: M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)\n  id: ToUInt64(System.Byte[],System.Int32)\n  parent: System.BitConverter\n  langs:\n  - csharp\n  - vb\n  name: ToUInt64(Byte[], Int32)\n  fullName: System.BitConverter.ToUInt64(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/BitConverter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToUInt64\n    path: src/mscorlib/src/System/BitConverter.cs\n    startLine: 302\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static ulong ToUInt64(byte[] value, int startIndex)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function ToUInt64(value As Byte(), startIndex As Integer) As ULong\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position within <em>value</em>. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>A 64-bit unsigned integer formed by the eight bytes beginning at <em>startIndex</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 7, and is less than or equal to the length of <em>value</em> minus 1.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\\n\"\n  seealso:\n  - type: System.BitConverter.GetBytes(System.UInt64)\n    commentId: M:System.BitConverter.GetBytes(System.UInt64)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.BitConverter.ToUInt64(System.Byte(), System.Int32)\n  name.vb: ToUInt64(Byte(), Int32)\n  nameWithType: BitConverter.ToUInt64(Byte[], Int32)\n  nameWithType.vb: BitConverter.ToUInt64(Byte(), Int32)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}