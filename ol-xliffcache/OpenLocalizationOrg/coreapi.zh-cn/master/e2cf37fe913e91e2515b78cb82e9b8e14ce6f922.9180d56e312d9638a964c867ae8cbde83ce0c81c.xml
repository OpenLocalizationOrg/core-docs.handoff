{"nodes":[{"pos":[5712,5720],"content":"SqlInt64","needQuote":true,"nodes":[{"content":"SqlInt64","pos":[0,8]}]},{"pos":[7303,7311],"content":"MaxValue","needQuote":true,"nodes":[{"content":"MaxValue","pos":[0,8]}]},{"pos":[8417,8425],"content":"MinValue","needQuote":true,"nodes":[{"content":"MinValue","pos":[0,8]}]},{"pos":[10636,10640],"content":"Zero","needQuote":true,"nodes":[{"content":"Zero","pos":[0,4]}]},{"pos":[11883,11898],"content":"SqlInt64(Int64)","needQuote":true,"nodes":[{"content":"SqlInt64(Int64)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A long integer.","pos":[12695,12715],"source":"\\n<p>A long integer."},{"content":"&lt;/p&gt;\\n","pos":[12716,12722],"source":" </p>\\n"},{"pos":[13007,13013],"content":"IsNull","needQuote":true,"nodes":[{"content":"IsNull","pos":[0,6]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if null.","pos":[13797,13834],"source":"\\n<p>\\n<strong>true</strong> if null."},{"content":"Otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13835,13875],"source":" Otherwise, <strong>false</strong>.</p>\\n"},{"pos":[14225,14230],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[15626,15649],"content":"Add(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Add(SqlInt64, SqlInt64)","pos":[0,23]}]},{"pos":[17762,17792],"content":"BitwiseAnd(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"BitwiseAnd(SqlInt64, SqlInt64)","pos":[0,30]}]},{"pos":[19756,19785],"content":"BitwiseOr(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"BitwiseOr(SqlInt64, SqlInt64)","pos":[0,29]}]},{"pos":[21656,21675],"content":"CompareTo(SqlInt64)","needQuote":true,"nodes":[{"content":"CompareTo(SqlInt64)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A signed number that indicates the relative values of the instance and the object.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than the object.","pos":[22825,23059],"source":"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is the same as the object.","pos":[23060,23154],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than the object &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The object is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).","pos":[23155,23360],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic)."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[23361,23395],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[23738,23755],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A signed number that indicates the relative values of the instance and the object.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Condition &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is less than the object.","pos":[24838,25072],"source":"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is the same as the object.","pos":[25073,25167],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;This instance is greater than the object &lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The object is a null reference (&lt;strong&gt;Nothing &lt;/strong&gt;in Visual Basic).","pos":[25168,25373],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing </strong>in Visual Basic)."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[25374,25408],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[25940,25966],"content":"Divide(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Divide(SqlInt64, SqlInt64)","pos":[0,26]}]},{"pos":[28009,28035],"content":"Equals(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Equals(SqlInt64, SqlInt64)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two values are equal.","pos":[29354,29411],"source":"\\n<p>\\n<strong>true</strong> if the two values are equal."},{"content":"Otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[29412,29446],"source":" Otherwise, <strong>false</strong>."},{"content":"If either instance is null, then the &lt;strong&gt;SqlInt64&lt;/strong&gt; will be null.&lt;/p&gt;\\n","pos":[29447,29529],"source":" If either instance is null, then the <strong>SqlInt64</strong> will be null.</p>\\n"},{"pos":[29892,29906],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to be compared.","pos":[30834,30865],"source":"\\n<p>The object to be compared."},{"content":"&lt;/p&gt;\\n","pos":[30866,30872],"source":" </p>\\n"},{"pos":[31521,31534],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[32203,32248],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[32799,32830],"content":"GreaterThan(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"GreaterThan(SqlInt64, SqlInt64)","pos":[0,31]}]},{"pos":[35539,35577],"content":"GreaterThanOrEqual(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(SqlInt64, SqlInt64)","pos":[0,38]}]},{"pos":[38315,38343],"content":"LessThan(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"LessThan(SqlInt64, SqlInt64)","pos":[0,28]}]},{"pos":[41022,41057],"content":"LessThanOrEqual(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(SqlInt64, SqlInt64)","pos":[0,35]}]},{"pos":[43759,43782],"content":"Mod(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Mod(SqlInt64, SqlInt64)","pos":[0,23]}]},{"pos":[45819,45846],"content":"Modulus(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Modulus(SqlInt64, SqlInt64)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The remainder left after division is performed on &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;\\n","pos":[47110,47197],"source":"\\n<p>The remainder left after division is performed on <em>x</em> and <em>y</em>.</p>\\n"},{"pos":[47705,47733],"content":"Multiply(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Multiply(SqlInt64, SqlInt64)","pos":[0,28]}]},{"pos":[49876,49905],"content":"NotEquals(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"NotEquals(SqlInt64, SqlInt64)","pos":[0,29]}]},{"pos":[52402,52426],"content":"OnesComplement(SqlInt64)","needQuote":true,"nodes":[{"content":"OnesComplement(SqlInt64)","pos":[0,24]}]},{"pos":[54368,54396],"content":"Addition(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Addition(SqlInt64, SqlInt64)","pos":[0,28]}]},{"pos":[56543,56573],"content":"BitwiseAnd(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"BitwiseAnd(SqlInt64, SqlInt64)","pos":[0,30]}]},{"pos":[58544,58573],"content":"BitwiseOr(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"BitwiseOr(SqlInt64, SqlInt64)","pos":[0,29]}]},{"pos":[60539,60567],"content":"Division(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Division(SqlInt64, SqlInt64)","pos":[0,28]}]},{"pos":[62635,62663],"content":"Equality(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Equality(SqlInt64, SqlInt64)","pos":[0,28]}]},{"pos":[65323,65354],"content":"ExclusiveOr(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"ExclusiveOr(SqlInt64, SqlInt64)","pos":[0,31]}]},{"pos":[67269,67301],"content":"Explicit(SqlBoolean to SqlInt64)","needQuote":true,"nodes":[{"content":"Explicit(SqlBoolean to SqlInt64)","pos":[0,32]}]},{"pos":[69706,69738],"content":"Explicit(SqlDecimal to SqlInt64)","needQuote":true,"nodes":[{"content":"Explicit(SqlDecimal to SqlInt64)","pos":[0,32]}]},{"pos":[72042,72073],"content":"Explicit(SqlDouble to SqlInt64)","needQuote":true,"nodes":[{"content":"Explicit(SqlDouble to SqlInt64)","pos":[0,31]}]},{"pos":[74316,74343],"content":"Explicit(SqlInt64 to Int64)","needQuote":true,"nodes":[{"content":"Explicit(SqlInt64 to Int64)","pos":[0,27]}]},{"pos":[76321,76351],"content":"Explicit(SqlMoney to SqlInt64)","needQuote":true,"nodes":[{"content":"Explicit(SqlMoney to SqlInt64)","pos":[0,30]}]},{"pos":[78637,78668],"content":"Explicit(SqlSingle to SqlInt64)","needQuote":true,"nodes":[{"content":"Explicit(SqlSingle to SqlInt64)","pos":[0,31]}]},{"pos":[80967,80998],"content":"Explicit(SqlString to SqlInt64)","needQuote":true,"nodes":[{"content":"Explicit(SqlString to SqlInt64)","pos":[0,31]}]},{"pos":[83289,83320],"content":"GreaterThan(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"GreaterThan(SqlInt64, SqlInt64)","pos":[0,31]}]},{"pos":[86030,86068],"content":"GreaterThanOrEqual(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"GreaterThanOrEqual(SqlInt64, SqlInt64)","pos":[0,38]}]},{"pos":[88794,88823],"content":"Implicit(SqlByte to SqlInt64)","needQuote":true,"nodes":[{"content":"Implicit(SqlByte to SqlInt64)","pos":[0,29]}]},{"pos":[91182,91212],"content":"Implicit(SqlInt16 to SqlInt64)","needQuote":true,"nodes":[{"content":"Implicit(SqlInt16 to SqlInt64)","pos":[0,30]}]},{"pos":[93583,93613],"content":"Implicit(SqlInt32 to SqlInt64)","needQuote":true,"nodes":[{"content":"Implicit(SqlInt32 to SqlInt64)","pos":[0,30]}]},{"pos":[95933,95960],"content":"Implicit(Int64 to SqlInt64)","needQuote":true,"nodes":[{"content":"Implicit(Int64 to SqlInt64)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A long integer value.","pos":[96796,96822],"source":"\\n<p>A long integer value."},{"content":"&lt;/p&gt;\\n","pos":[96823,96829],"source":" </p>\\n"},{"pos":[97882,97912],"content":"Inequality(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Inequality(SqlInt64, SqlInt64)","pos":[0,30]}]},{"pos":[100493,100521],"content":"LessThan(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"LessThan(SqlInt64, SqlInt64)","pos":[0,28]}]},{"pos":[103209,103244],"content":"LessThanOrEqual(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"LessThanOrEqual(SqlInt64, SqlInt64)","pos":[0,35]}]},{"pos":[105955,105982],"content":"Modulus(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Modulus(SqlInt64, SqlInt64)","pos":[0,27]}]},{"pos":[108055,108083],"content":"Multiply(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Multiply(SqlInt64, SqlInt64)","pos":[0,28]}]},{"pos":[110160,110184],"content":"OnesComplement(SqlInt64)","needQuote":true,"nodes":[{"content":"OnesComplement(SqlInt64)","pos":[0,24]}]},{"pos":[112125,112156],"content":"Subtraction(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Subtraction(SqlInt64, SqlInt64)","pos":[0,31]}]},{"pos":[114163,114186],"content":"UnaryNegation(SqlInt64)","needQuote":true,"nodes":[{"content":"UnaryNegation(SqlInt64)","pos":[0,23]}]},{"pos":[116128,116141],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"pos":[117793,117821],"content":"Subtract(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Subtract(SqlInt64, SqlInt64)","pos":[0,28]}]},{"pos":[119714,119728],"content":"ToSqlBoolean()","needQuote":true,"nodes":[{"content":"ToSqlBoolean()","pos":[0,14]}]},{"pos":[121071,121082],"content":"ToSqlByte()","needQuote":true,"nodes":[{"content":"ToSqlByte()","pos":[0,11]}]},{"pos":[122493,122507],"content":"ToSqlDecimal()","needQuote":true,"nodes":[{"content":"ToSqlDecimal()","pos":[0,14]}]},{"pos":[123884,123897],"content":"ToSqlDouble()","needQuote":true,"nodes":[{"content":"ToSqlDouble()","pos":[0,13]}]},{"pos":[125261,125273],"content":"ToSqlInt16()","needQuote":true,"nodes":[{"content":"ToSqlInt16()","pos":[0,12]}]},{"pos":[126627,126639],"content":"ToSqlInt32()","needQuote":true,"nodes":[{"content":"ToSqlInt32()","pos":[0,12]}]},{"pos":[127993,128005],"content":"ToSqlMoney()","needQuote":true,"nodes":[{"content":"ToSqlMoney()","pos":[0,12]}]},{"pos":[129362,129375],"content":"ToSqlSingle()","needQuote":true,"nodes":[{"content":"ToSqlSingle()","pos":[0,13]}]},{"pos":[130742,130755],"content":"ToSqlString()","needQuote":true,"nodes":[{"content":"ToSqlString()","pos":[0,13]}]},{"pos":[132113,132123],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[133664,133687],"content":"Xor(SqlInt64, SqlInt64)","needQuote":true,"nodes":[{"content":"Xor(SqlInt64, SqlInt64)","pos":[0,23]}]},{"pos":[135246,135266],"content":"System.Data.SqlTypes","needQuote":true,"nodes":[{"content":"System.Data.SqlTypes","pos":[0,20]}]},{"pos":[135470,135479],"content":"INullable","needQuote":true,"nodes":[{"content":"INullable","pos":[0,9]}]},{"pos":[135666,135677],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[135879,135901],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[136049,136055],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[136122,136123],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[136173,136179],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[136240,136241]},{"pos":[136296,136302],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[136362,136363],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[136460,136466],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[136533,136534],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[136584,136590],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[136651,136652]},{"pos":[136707,136713],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[136773,136774],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137019,137050],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[137216,137231],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[137307,137308],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137358,137364],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[137425,137426]},{"pos":[137481,137487],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[137547,137548],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[137654,137669],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[137745,137746],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[137796,137802],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[137863,137864]},{"pos":[137919,137925],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[137985,137986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138212,138221],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[138314,138321],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[138389,138390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[138417,138418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138487,138494],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[138562,138563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[138590,138591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[138720,138726],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[138857,138863],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[139038,139046],"content":"SqlInt64","needQuote":true,"nodes":[{"content":"SqlInt64","pos":[0,8]}]},{"pos":[139224,139229],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[139419,139425],"content":"IsNull","needQuote":true,"nodes":[{"content":"IsNull","pos":[0,6]}]},{"pos":[139629,139636],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[139783,139788],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[139971,139988],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[140123,140132],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[140186,140187],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[140237,140243],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[140303,140304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[140395,140404],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[140458,140459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[140509,140515],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[140575,140576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[140796,140806],"content":"SqlBoolean","needQuote":true,"nodes":[{"content":"SqlBoolean","pos":[0,10]}]},{"pos":[141025,141039],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[141164,141170],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[141219,141220],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[141270,141276],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[141336,141337],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[141423,141429],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[141478,141479],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[141529,141535],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[141595,141596],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[141777,141786],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[141965,141978],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[142085,142096],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[142150,142151],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[142178,142179],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[142255,142266],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[142320,142321],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[142348,142349],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[142548,142558],"content":"SqlDecimal","needQuote":true,"nodes":[{"content":"SqlDecimal","pos":[0,10]}]},{"pos":[142774,142783],"content":"SqlDouble","needQuote":true,"nodes":[{"content":"SqlDouble","pos":[0,9]}]},{"pos":[142995,143003],"content":"SqlMoney","needQuote":true,"nodes":[{"content":"SqlMoney","pos":[0,8]}]},{"pos":[143213,143222],"content":"SqlSingle","needQuote":true,"nodes":[{"content":"SqlSingle","pos":[0,9]}]},{"pos":[143435,143444],"content":"SqlString","needQuote":true,"nodes":[{"content":"SqlString","pos":[0,9]}]},{"pos":[143655,143662],"content":"SqlByte","needQuote":true,"nodes":[{"content":"SqlByte","pos":[0,7]}]},{"pos":[143868,143876],"content":"SqlInt16","needQuote":true,"nodes":[{"content":"SqlInt16","pos":[0,8]}]},{"pos":[144085,144093],"content":"SqlInt32","needQuote":true,"nodes":[{"content":"SqlInt32","pos":[0,8]}]},{"pos":[144272,144278],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[144445,144455],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[144556,144564],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[144615,144616],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144643,144644],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144717,144725],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[144776,144777],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144804,144805],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Data.SqlTypes.SqlInt64\n  commentId: T:System.Data.SqlTypes.SqlInt64\n  id: SqlInt64\n  parent: System.Data.SqlTypes\n  children:\n  - System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)\n  - System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)\n  - System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.Equals(System.Object)\n  - System.Data.SqlTypes.SqlInt64.GetHashCode\n  - System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.IsNull\n  - System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.MaxValue\n  - System.Data.SqlTypes.SqlInt64.MinValue\n  - System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.Null\n  - System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64\n  - System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64\n  - System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64\n  - System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64\n  - System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64\n  - System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64\n  - System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64\n  - System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64\n  - System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64\n  - System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64\n  - System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64\n  - System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.Parse(System.String)\n  - System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.ToSqlBoolean\n  - System.Data.SqlTypes.SqlInt64.ToSqlByte\n  - System.Data.SqlTypes.SqlInt64.ToSqlDecimal\n  - System.Data.SqlTypes.SqlInt64.ToSqlDouble\n  - System.Data.SqlTypes.SqlInt64.ToSqlInt16\n  - System.Data.SqlTypes.SqlInt64.ToSqlInt32\n  - System.Data.SqlTypes.SqlInt64.ToSqlMoney\n  - System.Data.SqlTypes.SqlInt64.ToSqlSingle\n  - System.Data.SqlTypes.SqlInt64.ToSqlString\n  - System.Data.SqlTypes.SqlInt64.ToString\n  - System.Data.SqlTypes.SqlInt64.Value\n  - System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  - System.Data.SqlTypes.SqlInt64.Zero\n  langs:\n  - csharp\n  - vb\n  name: SqlInt64\n  fullName: System.Data.SqlTypes.SqlInt64\n  type: Struct\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SqlInt64\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 21\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a 64-bit signed integer to be stored in or retrieved from a database.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct SqlInt64 : INullable, IComparable\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure SqlInt64\n          Implements INullable, IComparable\n  implements:\n  - System.Data.SqlTypes.INullable\n  - System.IComparable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: SqlInt64\n- uid: System.Data.SqlTypes.SqlInt64.MaxValue\n  commentId: F:System.Data.SqlTypes.SqlInt64.MaxValue\n  id: MaxValue\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: MaxValue\n  fullName: System.Data.SqlTypes.SqlInt64.MaxValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxValue\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 701\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>A constant representing the largest possible value for a <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlInt64 MaxValue\n    content.vb: Public Shared ReadOnly MaxValue As SqlInt64\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlInt64.MaxValue\n- uid: System.Data.SqlTypes.SqlInt64.MinValue\n  commentId: F:System.Data.SqlTypes.SqlInt64.MinValue\n  id: MinValue\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: MinValue\n  fullName: System.Data.SqlTypes.SqlInt64.MinValue\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MinValue\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 697\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>A constant representing the smallest possible value for a <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlInt64 MinValue\n    content.vb: Public Shared ReadOnly MinValue As SqlInt64\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlInt64.MinValue\n- uid: System.Data.SqlTypes.SqlInt64.Null\n  commentId: F:System.Data.SqlTypes.SqlInt64.Null\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  fullName: System.Data.SqlTypes.SqlInt64.Null\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 689\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a <xref href=\\\"System.DBNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be assigned to this instance of the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlInt64 Null\n    content.vb: Public Shared ReadOnly Null As SqlInt64\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlInt64.Null\n- uid: System.Data.SqlTypes.SqlInt64.Zero\n  commentId: F:System.Data.SqlTypes.SqlInt64.Zero\n  id: Zero\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Zero\n  fullName: System.Data.SqlTypes.SqlInt64.Zero\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zero\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 693\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Represents a zero value that can be assigned to the <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of an instance of the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static readonly SqlInt64 Zero\n    content.vb: Public Shared ReadOnly Zero As SqlInt64\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SqlInt64.Zero\n- uid: System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)\n  id: '#ctor(System.Int64)'\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: SqlInt64(Int64)\n  fullName: System.Data.SqlTypes.SqlInt64.SqlInt64(System.Int64)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 42\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the supplied long integer.</p>\\n\"\n  syntax:\n    content: public SqlInt64(long value)\n    content.vb: Public Sub New(value As Long)\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>A long integer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlInt64.SqlInt64(Int64)\n- uid: System.Data.SqlTypes.SqlInt64.IsNull\n  commentId: P:System.Data.SqlTypes.SqlInt64.IsNull\n  id: IsNull\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: IsNull\n  fullName: System.Data.SqlTypes.SqlInt64.IsNull\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNull\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 52\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets a Boolean value that indicates whether this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure is null.</p>\\n\"\n  syntax:\n    content: public bool IsNull { get; }\n    content.vb: Public ReadOnly Property IsNull As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if null. Otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Data.SqlTypes.INullable.IsNull\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlInt64.IsNull\n- uid: System.Data.SqlTypes.SqlInt64.Value\n  commentId: P:System.Data.SqlTypes.SqlInt64.Value\n  id: Value\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Data.SqlTypes.SqlInt64.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 61\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Gets the value of this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. This property is read-only.</p>\\n\"\n  syntax:\n    content: public long Value { get; }\n    content.vb: Public ReadOnly Property Value As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>A long integer representing the value of this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SqlInt64.Value\n- uid: System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Add(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 487\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the sum of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 Add(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function Add(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the sum of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Add(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: BitwiseAnd(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BitwiseAnd\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 521\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the bitwise AND of its <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 BitwiseAnd(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function BitwiseAnd(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the results of the bitwise AND operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.BitwiseAnd(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: BitwiseOr(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BitwiseOr\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 527\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the bitwise OR of its two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 BitwiseOr(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function BitwiseOr(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the results of the bitwise OR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.BitwiseOr(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)\n  id: CompareTo(System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 643\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance to the supplied <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(SqlInt64 value)\n    content.vb: Public Function CompareTo(value As SqlInt64) As Integer\n    parameters:\n    - id: value\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be compared.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic). </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlInt64.CompareTo(SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)\n  commentId: M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)\n  id: CompareTo(System.Object)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Object)\n  fullName: System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareTo\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 632\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance to the supplied <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: public int CompareTo(object value)\n    content.vb: Public Function CompareTo(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be compared. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of the instance and the object.</p>\\n<p>Return value </p>\\n<p>Condition </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>This instance is less than the object. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>This instance is the same as the object. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>This instance is greater than the object </p>\\n<p>-or- </p>\\n<p>The object is a null reference (<strong>Nothing </strong>in Visual Basic). </p>\\n</td></tr></tbody></table>\\n\"\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlInt64.CompareTo(Object)\n- uid: System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Divide(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 504\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Divides the first <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter by the second.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 Divide(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function Divide(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the results of the division operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Divide(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Equals(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 539\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters to determine whether they are equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean Equals(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function Equals(x As SqlInt64, y As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two values are equal. Otherwise, <strong>false</strong>. If either instance is null, then the <strong>SqlInt64</strong> will be null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Equals(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.Equals(System.Object)\n  commentId: M:System.Data.SqlTypes.SqlInt64.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Data.SqlTypes.SqlInt64.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 661\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Compares the supplied object parameter to the <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to be compared. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if object is an instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the two are equal; otherwise <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlInt64.Equals(Object)\n- uid: System.Data.SqlTypes.SqlInt64.GetHashCode\n  commentId: M:System.Data.SqlTypes.SqlInt64.GetHashCode\n  id: GetHashCode\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Data.SqlTypes.SqlInt64.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 680\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlInt64.GetHashCode()\n- uid: System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 557\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters to determine whether the first is greater than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean GreaterThan(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function GreaterThan(x As SqlInt64, y As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.GreaterThan(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GreaterThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 569\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters to determine whether the first is greater than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean GreaterThanOrEqual(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function GreaterThanOrEqual(x As SqlInt64, y As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.GreaterThanOrEqual(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: LessThan(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 551\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison on the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters to determine whether the first is less than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean LessThan(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function LessThan(x As SqlInt64, y As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.LessThan(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LessThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 563\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison on the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters to determine whether the first is less than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean LessThanOrEqual(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function LessThanOrEqual(x As SqlInt64, y As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.LessThanOrEqual(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Mod(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Mod\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 510\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the remainder after dividing the first <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter by the second.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 Mod(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function Mod(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the remainder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Mod(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Modulus(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Modulus\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 515\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Divides two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values and returns the remainder.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 Modulus(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function Modulus(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>The remainder left after division is performed on <em>x</em> and <em>y</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Modulus(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Multiply(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 498\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the product of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 Multiply(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function Multiply(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the product of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Multiply(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: NotEquals(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NotEquals\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 545\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison on the two SqlInt64 parameters to determine whether they are not equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean NotEquals(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function NotEquals(x As SqlInt64, y As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.NotEquals(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)\n  id: OnesComplement(System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: OnesComplement(SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnesComplement\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 481\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a bitwise one's complement operation on its <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 OnesComplement(SqlInt64 x)\n    content.vb: Public Shared Function OnesComplement(x As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the ones complement of the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.OnesComplement(SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Addition(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Addition(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 134\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the sum of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 operator +(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator +(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the sum of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Addition(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: BitwiseAnd(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_BitwiseAnd\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 269\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the bitwise AND of its <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 operator &(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator And(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the results of the bitwise AND operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.BitwiseAnd(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: BitwiseOr(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_BitwiseOr\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 277\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the bitwise OR of its two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operands.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 operator |(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator Or(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the results of the bitwise OR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.BitwiseOr(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Division(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Division(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Division\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 230\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Divides the first <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter by the second.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 operator /(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator /(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the results of the division operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Division(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Equality(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Equality(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 431\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters to determine whether they are equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator ==(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator =(x As SqlInt64, y As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Equality(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveOr(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.ExclusiveOr(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_ExclusiveOr\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 285\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a bitwise exclusive-OR operation on the supplied parameters.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 operator ^(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator Xor(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the results of the bitwise XOR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.ExclusiveOr(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64\n  id: op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlBoolean to SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Explicit(System.Data.SqlTypes.SqlBoolean to System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 297\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlInt64(SqlBoolean x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlBoolean) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.ByteValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlInt64.Narrowing(System.Data.SqlTypes.SqlBoolean to System.Data.SqlTypes.SqlInt64)\n  name.vb: Narrowing(SqlBoolean to SqlInt64)\n  nameWithType: SqlInt64.Explicit(SqlBoolean to SqlInt64)\n  nameWithType.vb: SqlInt64.Narrowing(SqlBoolean to SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64\n  id: op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlDecimal to SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Explicit(System.Data.SqlTypes.SqlDecimal to System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 377\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlInt64(SqlDecimal x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlDecimal) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDecimal\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the integer part of the <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlInt64.Narrowing(System.Data.SqlTypes.SqlDecimal to System.Data.SqlTypes.SqlInt64)\n  name.vb: Narrowing(SqlDecimal to SqlInt64)\n  nameWithType: SqlInt64.Explicit(SqlDecimal to SqlInt64)\n  nameWithType.vb: SqlInt64.Narrowing(SqlDecimal to SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64\n  id: op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlDouble to SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Explicit(System.Data.SqlTypes.SqlDouble to System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 352\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlInt64(SqlDouble x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlDouble) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equals the integer part of the <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlInt64.Narrowing(System.Data.SqlTypes.SqlDouble to System.Data.SqlTypes.SqlInt64)\n  name.vb: Narrowing(SqlDouble to SqlInt64)\n  nameWithType: SqlInt64.Explicit(SqlDouble to SqlInt64)\n  nameWithType.vb: SqlInt64.Narrowing(SqlDouble to SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64\n  id: op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlInt64 to Int64)\n  fullName: System.Data.SqlTypes.SqlInt64.Explicit(System.Data.SqlTypes.SqlInt64 to System.Int64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 85\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to long.</p>\\n\"\n  syntax:\n    content: public static explicit operator long (SqlInt64 x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlInt64) As Long\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A new long value equal to the <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlInt64.Narrowing(System.Data.SqlTypes.SqlInt64 to System.Int64)\n  name.vb: Narrowing(SqlInt64 to Int64)\n  nameWithType: SqlInt64.Explicit(SqlInt64 to Int64)\n  nameWithType.vb: SqlInt64.Narrowing(SqlInt64 to Int64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64\n  id: op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlMoney to SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Explicit(System.Data.SqlTypes.SqlMoney to System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 368\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlInt64(SqlMoney x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlMoney) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlMoney\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equals the integer part of the <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlInt64.Narrowing(System.Data.SqlTypes.SqlMoney to System.Data.SqlTypes.SqlInt64)\n  name.vb: Narrowing(SqlMoney to SqlInt64)\n  nameWithType: SqlInt64.Explicit(SqlMoney to SqlInt64)\n  nameWithType.vb: SqlInt64.Narrowing(SqlMoney to SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64\n  id: op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlSingle to SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Explicit(System.Data.SqlTypes.SqlSingle to System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 336\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlInt64(SqlSingle x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlSingle) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlSingle\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the integer part of the <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlInt64.Narrowing(System.Data.SqlTypes.SqlSingle to System.Data.SqlTypes.SqlInt64)\n  name.vb: Narrowing(SqlSingle to SqlInt64)\n  nameWithType: SqlInt64.Explicit(SqlSingle to SqlInt64)\n  nameWithType.vb: SqlInt64.Narrowing(SqlSingle to SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64\n  id: op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SqlString to SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Explicit(System.Data.SqlTypes.SqlString to System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 416\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static explicit operator SqlInt64(SqlString x)\n    content.vb: Public Shared Narrowing Operator CType(x As SqlString) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the value represented by the <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlInt64.Narrowing(System.Data.SqlTypes.SqlString to System.Data.SqlTypes.SqlInt64)\n  name.vb: Narrowing(SqlString to SqlInt64)\n  nameWithType: SqlInt64.Explicit(SqlString to SqlInt64)\n  nameWithType.vb: SqlInt64.Narrowing(SqlString to SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: GreaterThan(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 455\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters to determine whether the first is greater than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator>(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator>(x As SqlInt64, y As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.GreaterThan(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: GreaterThanOrEqual(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_GreaterThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 471\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters to determine whether the first is greater than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator >=(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator >=(x As SqlInt64, y As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is greater than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.GreaterThanOrEqual(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64\n  id: op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SqlByte to SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Implicit(System.Data.SqlTypes.SqlByte to System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 306\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlInt64(SqlByte x)\n    content.vb: Public Shared Widening Operator CType(x As SqlByte) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equals the <xref href=\\\"System.Data.SqlTypes.SqlByte.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlInt64.Widening(System.Data.SqlTypes.SqlByte to System.Data.SqlTypes.SqlInt64)\n  name.vb: Widening(SqlByte to SqlInt64)\n  nameWithType: SqlInt64.Implicit(SqlByte to SqlInt64)\n  nameWithType.vb: SqlInt64.Widening(SqlByte to SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64\n  id: op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SqlInt16 to SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Implicit(System.Data.SqlTypes.SqlInt16 to System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 315\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlInt64(SqlInt16 x)\n    content.vb: Public Shared Widening Operator CType(x As SqlInt16) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt16\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equals the <xref href=\\\"System.Data.SqlTypes.SqlInt16.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlInt64.Widening(System.Data.SqlTypes.SqlInt16 to System.Data.SqlTypes.SqlInt64)\n  name.vb: Widening(SqlInt16 to SqlInt64)\n  nameWithType: SqlInt64.Implicit(SqlInt16 to SqlInt64)\n  nameWithType.vb: SqlInt64.Widening(SqlInt16 to SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64\n  id: op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SqlInt32 to SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Implicit(System.Data.SqlTypes.SqlInt32 to System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 324\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the supplied <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlInt64(SqlInt32 x)\n    content.vb: Public Shared Widening Operator CType(x As SqlInt32) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt32\n      description: \"\\n<p>The <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equals the <xref href=\\\"System.Data.SqlTypes.SqlInt32.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of the <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlInt64.Widening(System.Data.SqlTypes.SqlInt32 to System.Data.SqlTypes.SqlInt64)\n  name.vb: Widening(SqlInt32 to SqlInt64)\n  nameWithType: SqlInt64.Implicit(SqlInt32 to SqlInt64)\n  nameWithType.vb: SqlInt64.Widening(SqlInt32 to SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64\n  id: op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Int64 to SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Implicit(System.Int64 to System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 76\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the long parameter to <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static implicit operator SqlInt64(long x)\n    content.vb: Public Shared Widening Operator CType(x As Long) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Int64\n      description: \"\\n<p>A long integer value. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equals the value of the long parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Data.SqlTypes.SqlInt64.Widening(System.Int64 to System.Data.SqlTypes.SqlInt64)\n  name.vb: Widening(Int64 to SqlInt64)\n  nameWithType: SqlInt64.Implicit(Int64 to SqlInt64)\n  nameWithType.vb: SqlInt64.Widening(Int64 to SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Inequality(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Inequality(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 439\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison on the two SqlInt64 parameters to determine whether they are not equal.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator !=(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator <>(x As SqlInt64, y As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are not equal or <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the two instances are equal. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Inequality(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: LessThan(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThan\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 447\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison on the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters to determine whether the first is less than the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator <(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator <(x As SqlInt64, y As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.LessThan(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: LessThanOrEqual(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_LessThanOrEqual\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 463\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a logical comparison on the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters to determine whether the first is less than or equal to the second.</p>\\n\"\n  syntax:\n    content: public static SqlBoolean operator <=(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator <=(x As SqlInt64, y As SqlInt64) As SqlBoolean\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is <xref href=\\\"System.Data.SqlTypes.SqlBoolean.True\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the first instance is less than or equal to the second instance. Otherwise, <xref href=\\\"System.Data.SqlTypes.SqlBoolean.False\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If either instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null, the <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be <xref href=\\\"System.Data.SqlTypes.SqlBoolean.Null\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.LessThanOrEqual(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Modulus(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Modulus\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 249\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the remainder after dividing the first <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter by the second.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 operator %(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator Mod(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property contains the remainder.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Modulus(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Multiply(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 164\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Computes the product of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 operator *(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator *(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the product of the two <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Multiply(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)\n  id: op_OnesComplement(System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: OnesComplement(SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_OnesComplement\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 122\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a bitwise one's complement operation on its <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 operator ~(SqlInt64 x)\n    content.vb: Public Shared Operator Not(x As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the ones complement of the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.OnesComplement(SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Subtraction(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Subtraction\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 149\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Subtracts the second <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter from the first.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 operator -(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Operator -(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equals the results of the subtraction operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Subtraction(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)\n  id: op_UnaryNegation(System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: UnaryNegation(SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.UnaryNegation(System.Data.SqlTypes.SqlInt64)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_UnaryNegation\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 114\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>The unary minus operator negates the <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 operator -(SqlInt64 x)\n    content.vb: Public Shared Operator -(x As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the negated <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.UnaryNegation(SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.Parse(System.String)\n  commentId: M:System.Data.SqlTypes.SqlInt64.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Data.SqlTypes.SqlInt64.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 101\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representation of a number to its 64-bit signed integer equivalent.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 Parse(string s)\n    content.vb: Public Shared Function Parse(s As String) As SqlInt64\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be parsed. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A 64-bit signed integer equivalent to the value that is contained in the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Parse(String)\n- uid: System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Subtract(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 492\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Subtracts the second <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> parameter from the first.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 Subtract(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function Subtract(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equals the results of the subtraction operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Subtract(SqlInt64, SqlInt64)\n- uid: System.Data.SqlTypes.SqlInt64.ToSqlBoolean\n  commentId: M:System.Data.SqlTypes.SqlInt64.ToSqlBoolean\n  id: ToSqlBoolean\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: ToSqlBoolean()\n  fullName: System.Data.SqlTypes.SqlInt64.ToSqlBoolean()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlBoolean\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 576\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlBoolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlBoolean ToSqlBoolean()\n    content.vb: Public Function ToSqlBoolean As SqlBoolean\n    return:\n      type: System.Data.SqlTypes.SqlBoolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.SqlTypes.SqlInt64.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is non-zero; <strong>false</strong> if zero; otherwise Null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlInt64.ToSqlBoolean()\n- uid: System.Data.SqlTypes.SqlInt64.ToSqlByte\n  commentId: M:System.Data.SqlTypes.SqlInt64.ToSqlByte\n  id: ToSqlByte\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: ToSqlByte()\n  fullName: System.Data.SqlTypes.SqlInt64.ToSqlByte()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlByte\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 581\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlByte ToSqlByte()\n    content.vb: Public Function ToSqlByte As SqlByte\n    return:\n      type: System.Data.SqlTypes.SqlByte\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure whose <strong>Value</strong> equals the <strong>Value</strong> of this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlInt64.ToSqlByte()\n- uid: System.Data.SqlTypes.SqlInt64.ToSqlDecimal\n  commentId: M:System.Data.SqlTypes.SqlInt64.ToSqlDecimal\n  id: ToSqlDecimal\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: ToSqlDecimal()\n  fullName: System.Data.SqlTypes.SqlInt64.ToSqlDecimal()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlDecimal\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 606\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlDecimal ToSqlDecimal()\n    content.vb: Public Function ToSqlDecimal As SqlDecimal\n    return:\n      type: System.Data.SqlTypes.SqlDecimal\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDecimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to the value of this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlInt64.ToSqlDecimal()\n- uid: System.Data.SqlTypes.SqlInt64.ToSqlDouble\n  commentId: M:System.Data.SqlTypes.SqlInt64.ToSqlDouble\n  id: ToSqlDouble\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: ToSqlDouble()\n  fullName: System.Data.SqlTypes.SqlInt64.ToSqlDouble()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlDouble\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 586\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlDouble ToSqlDouble()\n    content.vb: Public Function ToSqlDouble As SqlDouble\n    return:\n      type: System.Data.SqlTypes.SqlDouble\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlDouble\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to the value of this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlInt64.ToSqlDouble()\n- uid: System.Data.SqlTypes.SqlInt64.ToSqlInt16\n  commentId: M:System.Data.SqlTypes.SqlInt64.ToSqlInt16\n  id: ToSqlInt16\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt16()\n  fullName: System.Data.SqlTypes.SqlInt64.ToSqlInt16()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt16\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 591\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt16 ToSqlInt16()\n    content.vb: Public Function ToSqlInt16 As SqlInt16\n    return:\n      type: System.Data.SqlTypes.SqlInt16\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to the value of this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlInt64.ToSqlInt16()\n- uid: System.Data.SqlTypes.SqlInt64.ToSqlInt32\n  commentId: M:System.Data.SqlTypes.SqlInt64.ToSqlInt32\n  id: ToSqlInt32\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: ToSqlInt32()\n  fullName: System.Data.SqlTypes.SqlInt64.ToSqlInt32()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlInt32\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 596\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlInt32 ToSqlInt32()\n    content.vb: Public Function ToSqlInt32 As SqlInt32\n    return:\n      type: System.Data.SqlTypes.SqlInt32\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to the value of this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlInt64.ToSqlInt32()\n- uid: System.Data.SqlTypes.SqlInt64.ToSqlMoney\n  commentId: M:System.Data.SqlTypes.SqlInt64.ToSqlMoney\n  id: ToSqlMoney\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: ToSqlMoney()\n  fullName: System.Data.SqlTypes.SqlInt64.ToSqlMoney()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlMoney\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 601\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlMoney ToSqlMoney()\n    content.vb: Public Function ToSqlMoney As SqlMoney\n    return:\n      type: System.Data.SqlTypes.SqlMoney\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlMoney\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to the value of this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlInt64.ToSqlMoney()\n- uid: System.Data.SqlTypes.SqlInt64.ToSqlSingle\n  commentId: M:System.Data.SqlTypes.SqlInt64.ToSqlSingle\n  id: ToSqlSingle\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: ToSqlSingle()\n  fullName: System.Data.SqlTypes.SqlInt64.ToSqlSingle()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlSingle\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 611\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlSingle ToSqlSingle()\n    content.vb: Public Function ToSqlSingle As SqlSingle\n    return:\n      type: System.Data.SqlTypes.SqlSingle\n      description: \"\\n<p>A new <xref href=\\\"System.Data.SqlTypes.SqlSingle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to the value of this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlInt64.ToSqlSingle()\n- uid: System.Data.SqlTypes.SqlInt64.ToSqlString\n  commentId: M:System.Data.SqlTypes.SqlInt64.ToSqlString\n  id: ToSqlString\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: ToSqlString()\n  fullName: System.Data.SqlTypes.SqlInt64.ToSqlString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSqlString\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 616\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public SqlString ToSqlString()\n    content.vb: Public Function ToSqlString As SqlString\n    return:\n      type: System.Data.SqlTypes.SqlString\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the value of this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlInt64.ToSqlString()\n- uid: System.Data.SqlTypes.SqlInt64.ToString\n  commentId: M:System.Data.SqlTypes.SqlInt64.ToString\n  id: ToString\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Data.SqlTypes.SqlInt64.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 93\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Converts this instance of <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the value of this <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlInt64.ToString()\n- uid: System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  commentId: M:System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  id: Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)\n  parent: System.Data.SqlTypes.SqlInt64\n  langs:\n  - csharp\n  - vb\n  name: Xor(SqlInt64, SqlInt64)\n  fullName: System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64, System.Data.SqlTypes.SqlInt64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Xor\n    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLInt64.cs\n    startLine: 533\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlTypes\n  summary: \"\\n<p>Performs a bitwise exclusive-OR operation on the supplied parameters.</p>\\n\"\n  syntax:\n    content: public static SqlInt64 Xor(SqlInt64 x, SqlInt64 y)\n    content.vb: Public Shared Function Xor(x As SqlInt64, y As SqlInt64) As SqlInt64\n    parameters:\n    - id: x\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: y\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    return:\n      type: System.Data.SqlTypes.SqlInt64\n      description: \"\\n<p>A <xref href=\\\"System.Data.SqlTypes.SqlInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the results of the bitwise XOR operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SqlInt64.Xor(SqlInt64, SqlInt64)\nreferences:\n- uid: System.Data.SqlTypes\n  isExternal: false\n  name: System.Data.SqlTypes\n  fullName: System.Data.SqlTypes\n  nameWithType: System.Data.SqlTypes\n  commentId: N:System.Data.SqlTypes\n- uid: System.Data.SqlTypes.INullable\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: INullable\n  fullName: System.Data.SqlTypes.INullable\n  nameWithType: INullable\n  commentId: T:System.Data.SqlTypes.INullable\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Data.SqlTypes.SqlInt64\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt64\n  fullName: System.Data.SqlTypes.SqlInt64\n  nameWithType: SqlInt64\n  commentId: T:System.Data.SqlTypes.SqlInt64\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Data.SqlTypes.INullable.IsNull\n  parent: System.Data.SqlTypes.INullable\n  isExternal: false\n  name: IsNull\n  fullName: System.Data.SqlTypes.INullable.IsNull\n  nameWithType: INullable.IsNull\n  commentId: P:System.Data.SqlTypes.INullable.IsNull\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.Data.SqlTypes.SqlBoolean\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlBoolean\n  fullName: System.Data.SqlTypes.SqlBoolean\n  nameWithType: SqlBoolean\n  commentId: T:System.Data.SqlTypes.SqlBoolean\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Data.SqlTypes.SqlDecimal\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDecimal\n  fullName: System.Data.SqlTypes.SqlDecimal\n  nameWithType: SqlDecimal\n  commentId: T:System.Data.SqlTypes.SqlDecimal\n- uid: System.Data.SqlTypes.SqlDouble\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlDouble\n  fullName: System.Data.SqlTypes.SqlDouble\n  nameWithType: SqlDouble\n  commentId: T:System.Data.SqlTypes.SqlDouble\n- uid: System.Data.SqlTypes.SqlMoney\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlMoney\n  fullName: System.Data.SqlTypes.SqlMoney\n  nameWithType: SqlMoney\n  commentId: T:System.Data.SqlTypes.SqlMoney\n- uid: System.Data.SqlTypes.SqlSingle\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlSingle\n  fullName: System.Data.SqlTypes.SqlSingle\n  nameWithType: SqlSingle\n  commentId: T:System.Data.SqlTypes.SqlSingle\n- uid: System.Data.SqlTypes.SqlString\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlString\n  fullName: System.Data.SqlTypes.SqlString\n  nameWithType: SqlString\n  commentId: T:System.Data.SqlTypes.SqlString\n- uid: System.Data.SqlTypes.SqlByte\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlByte\n  fullName: System.Data.SqlTypes.SqlByte\n  nameWithType: SqlByte\n  commentId: T:System.Data.SqlTypes.SqlByte\n- uid: System.Data.SqlTypes.SqlInt16\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt16\n  fullName: System.Data.SqlTypes.SqlInt16\n  nameWithType: SqlInt16\n  commentId: T:System.Data.SqlTypes.SqlInt16\n- uid: System.Data.SqlTypes.SqlInt32\n  parent: System.Data.SqlTypes\n  isExternal: false\n  name: SqlInt32\n  fullName: System.Data.SqlTypes.SqlInt32\n  nameWithType: SqlInt32\n  commentId: T:System.Data.SqlTypes.SqlInt32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n"}