{"nodes":[{"pos":[1225,1241],"content":"ProcessStartInfo","needQuote":true,"nodes":[{"content":"ProcessStartInfo","pos":[0,16]}]},{"pos":[2786,2804],"content":"ProcessStartInfo()","needQuote":true,"nodes":[{"content":"ProcessStartInfo()","pos":[0,18]}]},{"pos":[4065,4089],"content":"ProcessStartInfo(String)","needQuote":true,"nodes":[{"content":"ProcessStartInfo(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;An application or document with which to start a process.","pos":[5011,5073],"source":"\\n<p>An application or document with which to start a process."},{"content":"&lt;/p&gt;\\n","pos":[5074,5080],"source":" </p>\\n"},{"pos":[5628,5660],"content":"ProcessStartInfo(String, String)","needQuote":true,"nodes":[{"content":"ProcessStartInfo(String, String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An application with which to start a process.","pos":[6685,6735],"source":"\\n<p>An application with which to start a process."},{"content":"&lt;/p&gt;\\n","pos":[6736,6742],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Command-line arguments to pass to the application when the process starts.","pos":[6810,6889],"source":"\\n<p>Command-line arguments to pass to the application when the process starts."},{"content":"&lt;/p&gt;\\n","pos":[6890,6896],"source":" </p>\\n"},{"pos":[7375,7384],"content":"Arguments","needQuote":true,"nodes":[{"content":"Arguments","pos":[0,9]}]},{"pos":[9471,9485],"content":"CreateNoWindow","needQuote":true,"nodes":[{"content":"CreateNoWindow","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the process should be started without creating a new window to contain it; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[10248,10389],"source":"\\n<p>\\n<strong>true</strong> if the process should be started without creating a new window to contain it; otherwise, <strong>false</strong>."},{"content":"The default is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10390,10434],"source":" The default is <strong>false</strong>.</p>\\n"},{"pos":[10760,10766],"content":"Domain","needQuote":true,"nodes":[{"content":"Domain","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The Active Directory domain to use when starting the process.","pos":[11485,11551],"source":"\\n<p>The Active Directory domain to use when starting the process."},{"content":"The domain property is primarily of interest to users within enterprise environments that use Active Directory.&lt;/p&gt;\\n","pos":[11552,11669],"source":" The domain property is primarily of interest to users within enterprise environments that use Active Directory.</p>\\n"},{"pos":[12002,12013],"content":"Environment","needQuote":true,"nodes":[{"content":"Environment","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A generic dictionary containing the environment variables that apply to this process and its child processes.","pos":[12872,12986],"source":"\\n<p>A generic dictionary containing the environment variables that apply to this process and its child processes."},{"content":"The default is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12987,13030],"source":" The default is <strong>null</strong>.</p>\\n"},{"pos":[13740,13748],"content":"FileName","needQuote":true,"nodes":[{"content":"FileName","pos":[0,8]}]},{"pos":[15027,15042],"content":"LoadUserProfile","needQuote":true,"nodes":[{"content":"LoadUserProfile","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the Windows user profile should be loaded; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[15819,15928],"source":"\\n<p>\\n<strong>true</strong> if the Windows user profile should be loaded; otherwise, <strong>false</strong>."},{"content":"The default is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15929,15973],"source":" The default is <strong>false</strong>.</p>\\n"},{"pos":[16345,16366],"content":"RedirectStandardError","needQuote":true,"nodes":[{"content":"RedirectStandardError","pos":[0,21]}]},{"pos":[18162,18183],"content":"RedirectStandardInput","needQuote":true,"nodes":[{"content":"RedirectStandardInput","pos":[0,21]}]},{"pos":[19963,19985],"content":"RedirectStandardOutput","needQuote":true,"nodes":[{"content":"RedirectStandardOutput","pos":[0,22]}]},{"pos":[21786,21807],"content":"StandardErrorEncoding","needQuote":true,"nodes":[{"content":"StandardErrorEncoding","pos":[0,21]}]},{"content":"\\n&lt;p&gt;An object that represents the preferred encoding for error output.","pos":[22586,22657],"source":"\\n<p>An object that represents the preferred encoding for error output."},{"content":"The default is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22658,22701],"source":" The default is <strong>null</strong>.</p>\\n"},{"pos":[23082,23104],"content":"StandardOutputEncoding","needQuote":true,"nodes":[{"content":"StandardOutputEncoding","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An object that represents the preferred encoding for standard output.","pos":[23890,23964],"source":"\\n<p>An object that represents the preferred encoding for standard output."},{"content":"The default is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23965,24008],"source":" The default is <strong>null</strong>.</p>\\n"},{"pos":[24348,24356],"content":"UserName","needQuote":true,"nodes":[{"content":"UserName","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The user name to use when starting the process.&lt;/p&gt;\\n","pos":[25065,25123],"source":"\\n<p>The user name to use when starting the process.</p>\\n"},{"pos":[25470,25485],"content":"UseShellExecute","needQuote":true,"nodes":[{"content":"UseShellExecute","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the shell should be used when starting the process; &lt;strong&gt;false&lt;/strong&gt; if the process should be created directly from the executable file.","pos":[26253,26427],"source":"\\n<p>\\n<strong>true</strong> if the shell should be used when starting the process; <strong>false</strong> if the process should be created directly from the executable file."},{"content":"The default is &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26428,26471],"source":" The default is <strong>true</strong>.</p>\\n"},{"pos":[27270,27286],"content":"WorkingDirectory","needQuote":true,"nodes":[{"content":"WorkingDirectory","pos":[0,16]}]},{"pos":[29266,29285],"content":"PasswordInClearText","needQuote":true,"nodes":[{"content":"PasswordInClearText","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The user password in clear text.&lt;/p&gt;\\n","pos":[30065,30108],"source":"\\n<p>The user password in clear text.</p>\\n"},{"pos":[30303,30321],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[30488,30494],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30654,30664],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[30759,30767],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30836,30837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30864,30865],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30935,30943],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[31012,31013],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31040,31041],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31224,31238],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[31357,31363],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31430,31431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31481,31487],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31547,31548],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31631,31637],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31704,31705],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31755,31761],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31821,31822],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32036,32058],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[32206,32212],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32279,32280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32330,32336],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32397,32398]},{"pos":[32453,32459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32519,32520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32617,32623],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32690,32691],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32741,32747],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32808,32809]},{"pos":[32864,32870],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32930,32931],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33176,33207],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[33373,33388],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33464,33465],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33515,33521],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33582,33583]},{"pos":[33638,33644],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33704,33705],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33811,33826],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33902,33903],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33953,33959],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34020,34021]},{"pos":[34076,34082],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34142,34143],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34373,34386],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[34487,34498],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34570,34571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34598,34599],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34672,34683],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34755,34756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34783,34784],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34959,34968],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[35061,35068],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35136,35137],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35164,35165],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35234,35241],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35309,35310],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35337,35338],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35513,35530],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[35639,35654],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[35730,35731],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35758,35759],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35836,35851],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[35927,35928],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35955,35956],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36101,36107],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[36238,36244],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[36390,36397],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36654,36681],"content":"IDictionary<String, String>","needQuote":true,"nodes":[{"content":"IDictionary&lt;String, String&gt;","pos":[0,27],"source":"IDictionary<String, String>"}]},{"pos":[36967,36978],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[37063,37064],"content":"<","needQuote":true,"nodes":[]},{"pos":[37114,37120],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[37181,37182]},{"pos":[37237,37243],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[37396,37407],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[37493,37496]},{"pos":[37553,37559],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[37620,37621]},{"pos":[37676,37682],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[37742,37743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38013,38038],"content":"IDictionary<TKey, TValue>","needQuote":true,"nodes":[{"content":"IDictionary&lt;TKey, TValue&gt;","pos":[0,25],"source":"IDictionary<TKey, TValue>"}]},{"pos":[38290,38301],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[38365,38366],"content":"<","needQuote":true,"nodes":[]},{"pos":[38393,38397],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[38428,38429]},{"pos":[38461,38467],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[38592,38603],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"content":"(Of","pos":[38668,38671]},{"pos":[38705,38709],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[38740,38741]},{"pos":[38773,38779],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[38811,38812],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39037,39063],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[39266,39274],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[39416,39427],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]}],"content":"items:\n- uid: System.Diagnostics.ProcessStartInfo\n  commentId: T:System.Diagnostics.ProcessStartInfo\n  id: ProcessStartInfo\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.ProcessStartInfo.#ctor\n  - System.Diagnostics.ProcessStartInfo.#ctor(System.String)\n  - System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)\n  - System.Diagnostics.ProcessStartInfo.Arguments\n  - System.Diagnostics.ProcessStartInfo.CreateNoWindow\n  - System.Diagnostics.ProcessStartInfo.Domain\n  - System.Diagnostics.ProcessStartInfo.Environment\n  - System.Diagnostics.ProcessStartInfo.FileName\n  - System.Diagnostics.ProcessStartInfo.LoadUserProfile\n  - System.Diagnostics.ProcessStartInfo.PasswordInClearText\n  - System.Diagnostics.ProcessStartInfo.RedirectStandardError\n  - System.Diagnostics.ProcessStartInfo.RedirectStandardInput\n  - System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\n  - System.Diagnostics.ProcessStartInfo.StandardErrorEncoding\n  - System.Diagnostics.ProcessStartInfo.StandardOutputEncoding\n  - System.Diagnostics.ProcessStartInfo.UserName\n  - System.Diagnostics.ProcessStartInfo.UseShellExecute\n  - System.Diagnostics.ProcessStartInfo.WorkingDirectory\n  langs:\n  - csharp\n  - vb\n  name: ProcessStartInfo\n  fullName: System.Diagnostics.ProcessStartInfo\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProcessStartInfo\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 16\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Specifies a set of values that are used when you start a process.</p>\\n\"\n  syntax:\n    content: public sealed class ProcessStartInfo\n    content.vb: Public NotInheritable Class ProcessStartInfo\n  seealso:\n  - type: System.Diagnostics.Process\n    commentId: T:System.Diagnostics.Process\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: ProcessStartInfo\n- uid: System.Diagnostics.ProcessStartInfo.#ctor\n  commentId: M:System.Diagnostics.ProcessStartInfo.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: ProcessStartInfo()\n  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 34\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.ProcessStartInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class without specifying a file name with which to start the process.</p>\\n\"\n  syntax:\n    content: public ProcessStartInfo()\n    content.vb: Public Sub New\n  see:\n  - type: System.Security.Permissions.SecurityAction.LinkDemand\n    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.ProcessStartInfo()\n- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String)\n  commentId: M:System.Diagnostics.ProcessStartInfo.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: ProcessStartInfo(String)\n  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 41\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.ProcessStartInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class and specifies a file name such as an application or document with which to start the process.</p>\\n\"\n  syntax:\n    content: public ProcessStartInfo(string fileName)\n    content.vb: Public Sub New(fileName As String)\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>An application or document with which to start a process. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityAction.LinkDemand\n    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.ProcessStartInfo(String)\n- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)\n  commentId: M:System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: ProcessStartInfo(String, String)\n  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 50\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.ProcessStartInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application.</p>\\n\"\n  syntax:\n    content: public ProcessStartInfo(string fileName, string arguments)\n    content.vb: Public Sub New(fileName As String, arguments As String)\n    parameters:\n    - id: fileName\n      type: System.String\n      description: \"\\n<p>An application with which to start a process. </p>\\n\"\n    - id: arguments\n      type: System.String\n      description: \"\\n<p>Command-line arguments to pass to the application when the process starts. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityAction.LinkDemand\n    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.ProcessStartInfo(String, String)\n- uid: System.Diagnostics.ProcessStartInfo.Arguments\n  commentId: P:System.Diagnostics.ProcessStartInfo.Arguments\n  id: Arguments\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: Arguments\n  fullName: System.Diagnostics.ProcessStartInfo.Arguments\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Arguments\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 59\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the set of command-line arguments to use when starting the application.</p>\\n\"\n  syntax:\n    content: public string Arguments { get; set; }\n    content.vb: Public Property Arguments As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A single string containing the arguments to pass to the target application specified in the <xref href=\\\"System.Diagnostics.ProcessStartInfo.FileName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property. The default is an empty string (\\\"\\\"). On Windows Vista and earlier versions of the Windows operating system, the length of the arguments added to the length of the full path to the process must be less than 2080. On Windows 7 and later versions, the length must be less than 32699.</p>\\n<p>Arguments are parsed and interpreted by the target application, so must align with the expectations of that application. For.NET applications as demonstrated in the Examples below, spaces are interpreted as a separator between multiple arguments. A single argument that includes spaces must be surrounded by quotation marks, but those quotation marks are not carried through to the target application. In include quotation marks in the final parsed argument, triple-escape each mark.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.Arguments\n- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow\n  commentId: P:System.Diagnostics.ProcessStartInfo.CreateNoWindow\n  id: CreateNoWindow\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: CreateNoWindow\n  fullName: System.Diagnostics.ProcessStartInfo.CreateNoWindow\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateNoWindow\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 75\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets a value indicating whether to start the process in a new window.</p>\\n\"\n  syntax:\n    content: public bool CreateNoWindow { get; set; }\n    content.vb: Public Property CreateNoWindow As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the process should be started without creating a new window to contain it; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.CreateNoWindow\n- uid: System.Diagnostics.ProcessStartInfo.Domain\n  commentId: P:System.Diagnostics.ProcessStartInfo.Domain\n  id: Domain\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: Domain\n  fullName: System.Diagnostics.ProcessStartInfo.Domain\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Domain\n    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs\n    startLine: 124\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets a value that identifies the domain to use when starting the process. </p>\\n\"\n  syntax:\n    content: public string Domain { get; set; }\n    content.vb: Public Property Domain As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The Active Directory domain to use when starting the process. The domain property is primarily of interest to users within enterprise environments that use Active Directory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.Domain\n- uid: System.Diagnostics.ProcessStartInfo.Environment\n  commentId: P:System.Diagnostics.ProcessStartInfo.Environment\n  id: Environment\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: Environment\n  fullName: System.Diagnostics.ProcessStartInfo.Environment\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Environment\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 81\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the environment variables that apply to this process and its child processes.</p>\\n\"\n  syntax:\n    content: public IDictionary<string, string> Environment { get; }\n    content.vb: Public ReadOnly Property Environment As IDictionary(Of String, String)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: \"\\n<p>A generic dictionary containing the environment variables that apply to this process and its child processes. The default is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.ProcessStartInfo.EnvironmentVariables\n    commentId: P:System.Diagnostics.ProcessStartInfo.EnvironmentVariables\n  - type: System.Diagnostics.ProcessStartInfo.UseShellExecute\n    commentId: P:System.Diagnostics.ProcessStartInfo.UseShellExecute\n  - type: System.Diagnostics.Process.Start\n    commentId: M:System.Diagnostics.Process.Start\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ProcessStartInfo.Environment\n- uid: System.Diagnostics.ProcessStartInfo.FileName\n  commentId: P:System.Diagnostics.ProcessStartInfo.FileName\n  id: FileName\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: FileName\n  fullName: System.Diagnostics.ProcessStartInfo.FileName\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FileName\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 159\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the application or document to start.</p>\\n\"\n  syntax:\n    content: public string FileName { get; set; }\n    content.vb: Public Property FileName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the application to start, or the name of a document of a file type that is associated with an application and that has a default open action available to it. The default is an empty string (\\\"\\\").</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.FileName\n- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile\n  commentId: P:System.Diagnostics.ProcessStartInfo.LoadUserProfile\n  id: LoadUserProfile\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: LoadUserProfile\n  fullName: System.Diagnostics.ProcessStartInfo.LoadUserProfile\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LoadUserProfile\n    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs\n    startLine: 128\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry. </p>\\n\"\n  syntax:\n    content: public bool LoadUserProfile { get; set; }\n    content.vb: Public Property LoadUserProfile As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the Windows user profile should be loaded; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.LoadUserProfile\n- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError\n  commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardError\n  id: RedirectStandardError\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: RedirectStandardError\n  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardError\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RedirectStandardError\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 135\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets a value that indicates whether the error output of an application is written to the <xref href=\\\"System.Diagnostics.Process.StandardError\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> stream.</p>\\n\"\n  syntax:\n    content: public bool RedirectStandardError { get; set; }\n    content.vb: Public Property RedirectStandardError As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if error output should be written to <xref href=\\\"System.Diagnostics.Process.StandardError\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.ProcessStartInfo.UseShellExecute\n    commentId: P:System.Diagnostics.ProcessStartInfo.UseShellExecute\n  - type: System.Diagnostics.Process.StandardError\n    commentId: P:System.Diagnostics.Process.StandardError\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.RedirectStandardError\n- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput\n  commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput\n  id: RedirectStandardInput\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: RedirectStandardInput\n  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardInput\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RedirectStandardInput\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 117\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets a value indicating whether the input for an application is read from the <xref href=\\\"System.Diagnostics.Process.StandardInput\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> stream.</p>\\n\"\n  syntax:\n    content: public bool RedirectStandardInput { get; set; }\n    content.vb: Public Property RedirectStandardInput As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if input should be read from <xref href=\\\"System.Diagnostics.Process.StandardInput\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.ProcessStartInfo.UseShellExecute\n    commentId: P:System.Diagnostics.ProcessStartInfo.UseShellExecute\n  - type: System.Diagnostics.Process.StandardInput\n    commentId: P:System.Diagnostics.Process.StandardInput\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.RedirectStandardInput\n- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\n  commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\n  id: RedirectStandardOutput\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: RedirectStandardOutput\n  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RedirectStandardOutput\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 126\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets a value that indicates whether the textual output of an application is written to the <xref href=\\\"System.Diagnostics.Process.StandardOutput\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> stream.</p>\\n\"\n  syntax:\n    content: public bool RedirectStandardOutput { get; set; }\n    content.vb: Public Property RedirectStandardOutput As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if output should be written to <xref href=\\\"System.Diagnostics.Process.StandardOutput\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.ProcessStartInfo.UseShellExecute\n    commentId: P:System.Diagnostics.ProcessStartInfo.UseShellExecute\n  - type: System.Diagnostics.Process.StandardOutput\n    commentId: P:System.Diagnostics.Process.StandardOutput\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.RedirectStandardOutput\n- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding\n  commentId: P:System.Diagnostics.ProcessStartInfo.StandardErrorEncoding\n  id: StandardErrorEncoding\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: StandardErrorEncoding\n  fullName: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StandardErrorEncoding\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 142\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the preferred encoding for error output.</p>\\n\"\n  syntax:\n    content: public Encoding StandardErrorEncoding { get; set; }\n    content.vb: Public Property StandardErrorEncoding As Encoding\n    parameters: []\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>An object that represents the preferred encoding for error output. The default is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.StandardErrorEncoding\n- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding\n  commentId: P:System.Diagnostics.ProcessStartInfo.StandardOutputEncoding\n  id: StandardOutputEncoding\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: StandardOutputEncoding\n  fullName: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StandardOutputEncoding\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 148\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the preferred encoding for standard output.</p>\\n\"\n  syntax:\n    content: public Encoding StandardOutputEncoding { get; set; }\n    content.vb: Public Property StandardOutputEncoding As Encoding\n    parameters: []\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>An object that represents the preferred encoding for standard output. The default is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.StandardOutputEncoding\n- uid: System.Diagnostics.ProcessStartInfo.UserName\n  commentId: P:System.Diagnostics.ProcessStartInfo.UserName\n  id: UserName\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: UserName\n  fullName: System.Diagnostics.ProcessStartInfo.UserName\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UserName\n    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs\n    startLine: 134\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the user name to be used when starting the process.</p>\\n\"\n  syntax:\n    content: public string UserName { get; set; }\n    content.vb: Public Property UserName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The user name to use when starting the process.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.UserName\n- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute\n  commentId: P:System.Diagnostics.ProcessStartInfo.UseShellExecute\n  id: UseShellExecute\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: UseShellExecute\n  fullName: System.Diagnostics.ProcessStartInfo.UseShellExecute\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UseShellExecute\n    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs\n    startLine: 135\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets a value indicating whether to use the operating system shell to start the process.</p>\\n\"\n  syntax:\n    content: public bool UseShellExecute { get; set; }\n    content.vb: Public Property UseShellExecute As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the shell should be used when starting the process; <strong>false</strong> if the process should be created directly from the executable file. The default is <strong>true</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.ProcessStartInfo.RedirectStandardInput\n    commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput\n  - type: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\n    commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\n  - type: System.Diagnostics.ProcessStartInfo.RedirectStandardError\n    commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardError\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.UseShellExecute\n- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory\n  commentId: P:System.Diagnostics.ProcessStartInfo.WorkingDirectory\n  id: WorkingDirectory\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: WorkingDirectory\n  fullName: System.Diagnostics.ProcessStartInfo.WorkingDirectory\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WorkingDirectory\n    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs\n    startLine: 169\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>When the <xref href=\\\"System.Diagnostics.ProcessStartInfo.UseShellExecute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <strong>false</strong>, gets or sets the working directory for the process to be started. When <xref href=\\\"System.Diagnostics.ProcessStartInfo.UseShellExecute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>true</strong>, gets or sets the directory that contains the process to be started.</p>\\n\"\n  syntax:\n    content: public string WorkingDirectory { get; set; }\n    content.vb: Public Property WorkingDirectory As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>When <xref href=\\\"System.Diagnostics.ProcessStartInfo.UseShellExecute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is <strong>true</strong>, the fully qualified name of the directory that contains the process to be started. When the <xref href=\\\"System.Diagnostics.ProcessStartInfo.UseShellExecute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <strong>false</strong>, the working directory for the process to be started. The default is an empty string (\\\"\\\").</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.WorkingDirectory\n- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText\n  commentId: P:System.Diagnostics.ProcessStartInfo.PasswordInClearText\n  id: PasswordInClearText\n  parent: System.Diagnostics.ProcessStartInfo\n  langs:\n  - csharp\n  - vb\n  name: PasswordInClearText\n  fullName: System.Diagnostics.ProcessStartInfo.PasswordInClearText\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PasswordInClearText\n    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.Manual.cs\n    startLine: 32\n  assemblies:\n  - System.Diagnostics.Process\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the user password in clear text to use when starting the process.</p>\\n\"\n  syntax:\n    content: public string PasswordInClearText { get; set; }\n    content.vb: Public Property PasswordInClearText As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The user password in clear text.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ProcessStartInfo.PasswordInClearText\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IDictionary`2\n  name: IDictionary<String, String>\n  fullName: System.Collections.Generic.IDictionary<System.String, System.String>\n  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)\n  name.vb: IDictionary(Of String, String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary<String, String>\n  nameWithType.vb: IDictionary(Of String, String)\n  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}\n- uid: System.Collections.Generic.IDictionary`2\n  isExternal: false\n  name: IDictionary<TKey, TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey, TValue>\n  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)\n  name.vb: IDictionary(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  nameWithType: IDictionary<TKey, TValue>\n  nameWithType.vb: IDictionary(Of TKey, TValue)\n  commentId: T:System.Collections.Generic.IDictionary`2\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  nameWithType: Encoding\n  commentId: T:System.Text.Encoding\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n"}