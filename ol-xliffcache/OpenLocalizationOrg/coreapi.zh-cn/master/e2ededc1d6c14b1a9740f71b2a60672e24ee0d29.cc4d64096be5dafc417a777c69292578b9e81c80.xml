{"nodes":[{"pos":[999,1012],"content":"AccessRule<T>","needQuote":true,"nodes":[{"content":"AccessRule&lt;T&gt;","pos":[0,13],"source":"AccessRule<T>"}]},{"content":"\\n&lt;p&gt;The access rights type for the access rule.&lt;/p&gt;\\n","pos":[1972,2026],"source":"\\n<p>The access rights type for the access rule.</p>\\n"},{"pos":[3594,3645],"content":"AccessRule(IdentityReference, T, AccessControlType)","needQuote":true,"nodes":[{"content":"AccessRule(IdentityReference, T, AccessControlType)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The identity to which the access rule applies.&lt;/p&gt;\\n","pos":[4633,4690],"source":"\\n<p>The identity to which the access rule applies.</p>\\n"},{"content":"\\n&lt;p&gt;The rights of the access rule.&lt;/p&gt;\\n","pos":[4747,4788],"source":"\\n<p>The rights of the access rule.</p>\\n"},{"content":"\\n&lt;p&gt;The valid access control type.&lt;/p&gt;\\n","pos":[4885,4926],"source":"\\n<p>The valid access control type.</p>\\n"},{"pos":[6118,6205],"content":"AccessRule(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)","needQuote":true,"nodes":[{"content":"AccessRule(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)","pos":[0,87]}]},{"content":"\\n&lt;p&gt;The identity to which the access rule applies.&lt;/p&gt;\\n","pos":[7435,7492],"source":"\\n<p>The identity to which the access rule applies.</p>\\n"},{"content":"\\n&lt;p&gt;The rights of the access rule.&lt;/p&gt;\\n","pos":[7549,7590],"source":"\\n<p>The rights of the access rule.</p>\\n"},{"content":"\\n&lt;p&gt;The inheritance properties of the access rule.&lt;/p&gt;\\n","pos":[7698,7755],"source":"\\n<p>The inheritance properties of the access rule.</p>\\n"},{"content":"\\n&lt;p&gt;The valid access control type.&lt;/p&gt;\\n","pos":[8217,8258],"source":"\\n<p>The valid access control type.</p>\\n"},{"pos":[9246,9286],"content":"AccessRule(String, T, AccessControlType)","needQuote":true,"nodes":[{"content":"AccessRule(String, T, AccessControlType)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The identity to which the access rule applies.&lt;/p&gt;\\n","pos":[10192,10249],"source":"\\n<p>The identity to which the access rule applies.</p>\\n"},{"content":"\\n&lt;p&gt;The rights of the access rule.&lt;/p&gt;\\n","pos":[10306,10347],"source":"\\n<p>The rights of the access rule.</p>\\n"},{"content":"\\n&lt;p&gt;The valid access control type.&lt;/p&gt;\\n","pos":[10444,10485],"source":"\\n<p>The valid access control type.</p>\\n"},{"pos":[11535,11611],"content":"AccessRule(String, T, InheritanceFlags, PropagationFlags, AccessControlType)","needQuote":true,"nodes":[{"content":"AccessRule(String, T, InheritanceFlags, PropagationFlags, AccessControlType)","pos":[0,76]}]},{"content":"\\n&lt;p&gt;The identity to which the access rule applies.&lt;/p&gt;\\n","pos":[12759,12816],"source":"\\n<p>The identity to which the access rule applies.</p>\\n"},{"content":"\\n&lt;p&gt;The rights of the access rule.&lt;/p&gt;\\n","pos":[12873,12914],"source":"\\n<p>The rights of the access rule.</p>\\n"},{"content":"\\n&lt;p&gt;The inheritance properties of the access rule.&lt;/p&gt;\\n","pos":[13022,13079],"source":"\\n<p>The inheritance properties of the access rule.</p>\\n"},{"content":"\\n&lt;p&gt;The valid access control type.&lt;/p&gt;\\n","pos":[13541,13582],"source":"\\n<p>The valid access control type.</p>\\n"},{"pos":[14321,14327],"content":"Rights","needQuote":true,"nodes":[{"content":"Rights","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The rights, cast as type &lt;T&gt;, of the current instance.&lt;/p&gt;\\n","pos":[15023,15088],"source":"\\n<p>The rights, cast as type <T>, of the current instance.</p>\\n"},{"pos":[15395,15424],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[15624,15630],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15832,15849],"content":"AuthorizationRule","needQuote":true,"nodes":[{"content":"AuthorizationRule","pos":[0,17]}]},{"pos":[16123,16133],"content":"AccessRule","needQuote":true,"nodes":[{"content":"AccessRule","pos":[0,10]}]},{"pos":[16415,16432],"content":"AccessControlType","needQuote":true,"nodes":[{"content":"AccessControlType","pos":[0,17]}]},{"pos":[16775,16785],"content":"AccessMask","needQuote":true,"nodes":[{"content":"AccessMask","pos":[0,10]}]},{"pos":[17135,17152],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[17522,17538],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[17900,17911],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[18263,18279],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[18569,18579],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[18674,18682],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[18751,18752],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18779,18780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18850,18858],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[18927,18928],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18955,18956],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19139,19153],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19272,19278],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19345,19346],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19396,19402],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19462,19463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19546,19552],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19619,19620],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19670,19676],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19736,19737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19951,19973],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[20121,20127],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20194,20195],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20245,20251],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20312,20313]},{"pos":[20368,20374],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20434,20435],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20532,20538],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20605,20606],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20656,20662],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20723,20724]},{"pos":[20779,20785],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20845,20846],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21091,21122],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21288,21303],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21379,21380],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21430,21436],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21497,21498]},{"pos":[21553,21559],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21619,21620],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21726,21741],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21817,21818],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21868,21874],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21935,21936]},{"pos":[21991,21997],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22057,22058],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22288,22301],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[22402,22413],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22485,22486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22513,22514],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22587,22598],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[22670,22671],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22698,22699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22874,22883],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[22976,22983],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23051,23052],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23079,23080],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23149,23156],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[23224,23225],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23252,23253],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23428,23445],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[23554,23569],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23645,23646],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23673,23674],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23751,23766],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23842,23843],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23870,23871],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24016,24022],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24202,24219],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[24406,24407],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24582,24599],"content":"AccessControlType","needQuote":true,"nodes":[{"content":"AccessControlType","pos":[0,17]}]},{"pos":[24818,24843],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[25002,25003],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[25158,25174],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[25451,25467],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[25688,25694],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Security.AccessControl.AccessRule`1\n  commentId: T:System.Security.AccessControl.AccessRule`1\n  id: AccessRule`1\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.AccessRule`1.Rights\n  langs:\n  - csharp\n  - vb\n  name: AccessRule<T>\n  fullName: System.Security.AccessControl.AccessRule<T>\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AccessRule\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 46\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An AccessRule`1 object also contains information about the how the rule is inherited by child objects and how that inheritance is propagated.</p>\\n\"\n  syntax:\n    content: 'public class AccessRule<T> : AccessRule where T : struct'\n    content.vb: >-\n      Public Class AccessRule(Of T As Structure)\n          Inherits AccessRule\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The access rights type for the access rule.</p>\\n\"\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.AuthorizationRule\n  - System.Security.AccessControl.AccessRule\n  inheritedMembers:\n  - System.Security.AccessControl.AccessRule.AccessControlType\n  - System.Security.AccessControl.AuthorizationRule.AccessMask\n  - System.Security.AccessControl.AuthorizationRule.IdentityReference\n  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  - System.Security.AccessControl.AuthorizationRule.IsInherited\n  - System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  fullName.vb: System.Security.AccessControl.AccessRule(Of T)\n  name.vb: AccessRule(Of T)\n  nameWithType: AccessRule<T>\n  nameWithType.vb: AccessRule(Of T)\n- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.AccessRule`1\n  langs:\n  - csharp\n  - vb\n  name: AccessRule(IdentityReference, T, AccessControlType)\n  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.AccessControlType)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 48\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the AccessRule’1 class by using the specified values.</p>\\n\"\n  syntax:\n    content: public AccessRule(IdentityReference identity, T rights, AccessControlType type)\n    content.vb: Public Sub New(identity As IdentityReference, rights As T, type As AccessControlType)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The identity to which the access rule applies.</p>\\n\"\n    - id: rights\n      type: '{T}'\n      description: \"\\n<p>The rights of the access rule.</p>\\n\"\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The valid access control type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.AccessRule(Of T).AccessRule(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.AccessControlType)\n  nameWithType: AccessRule<T>.AccessRule(IdentityReference, T, AccessControlType)\n  nameWithType.vb: AccessRule(Of T).AccessRule(IdentityReference, T, AccessControlType)\n- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.AccessRule`1\n  langs:\n  - csharp\n  - vb\n  name: AccessRule(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 49\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the AccessRule’1 class by using the specified values.</p>\\n\"\n  syntax:\n    content: public AccessRule(IdentityReference identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)\n    content.vb: Public Sub New(identity As IdentityReference, rights As T, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The identity to which the access rule applies.</p>\\n\"\n    - id: rights\n      type: '{T}'\n      description: \"\\n<p>The rights of the access rule.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>The inheritance properties of the access rule.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Whether inherited access rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\\\"System.Security.AccessControl.InheritanceFlags.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The valid access control type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.AccessRule(Of T).AccessRule(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)\n  nameWithType: AccessRule<T>.AccessRule(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  nameWithType.vb: AccessRule(Of T).AccessRule(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)\n- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.AccessRule`1\n  langs:\n  - csharp\n  - vb\n  name: AccessRule(String, T, AccessControlType)\n  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(System.String, T, System.Security.AccessControl.AccessControlType)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 50\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the AccessRule’1 class by using the specified values.</p>\\n\"\n  syntax:\n    content: public AccessRule(string identity, T rights, AccessControlType type)\n    content.vb: Public Sub New(identity As String, rights As T, type As AccessControlType)\n    parameters:\n    - id: identity\n      type: System.String\n      description: \"\\n<p>The identity to which the access rule applies.</p>\\n\"\n    - id: rights\n      type: '{T}'\n      description: \"\\n<p>The rights of the access rule.</p>\\n\"\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The valid access control type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.AccessRule(Of T).AccessRule(System.String, T, System.Security.AccessControl.AccessControlType)\n  nameWithType: AccessRule<T>.AccessRule(String, T, AccessControlType)\n  nameWithType.vb: AccessRule(Of T).AccessRule(String, T, AccessControlType)\n- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.AccessRule`1\n  langs:\n  - csharp\n  - vb\n  name: AccessRule(String, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(System.String, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 51\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the AccessRule’1 class by using the specified values.</p>\\n\"\n  syntax:\n    content: public AccessRule(string identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)\n    content.vb: Public Sub New(identity As String, rights As T, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType)\n    parameters:\n    - id: identity\n      type: System.String\n      description: \"\\n<p>The identity to which the access rule applies.</p>\\n\"\n    - id: rights\n      type: '{T}'\n      description: \"\\n<p>The rights of the access rule.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>The inheritance properties of the access rule.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Whether inherited access rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\\\"System.Security.AccessControl.InheritanceFlags.None\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The valid access control type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.AccessControl.AccessRule(Of T).AccessRule(System.String, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)\n  nameWithType: AccessRule<T>.AccessRule(String, T, InheritanceFlags, PropagationFlags, AccessControlType)\n  nameWithType.vb: AccessRule(Of T).AccessRule(String, T, InheritanceFlags, PropagationFlags, AccessControlType)\n- uid: System.Security.AccessControl.AccessRule`1.Rights\n  commentId: P:System.Security.AccessControl.AccessRule`1.Rights\n  id: Rights\n  parent: System.Security.AccessControl.AccessRule`1\n  langs:\n  - csharp\n  - vb\n  name: Rights\n  fullName: System.Security.AccessControl.AccessRule<T>.Rights\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Rights\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 52\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the rights of the current instance.</p>\\n\"\n  syntax:\n    content: public T Rights { get; }\n    content.vb: Public ReadOnly Property Rights As T\n    parameters: []\n    return:\n      type: '{T}'\n      description: \"\\n<p>The rights, cast as type <T>, of the current instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Security.AccessControl.AccessRule(Of T).Rights\n  nameWithType: AccessRule<T>.Rights\n  nameWithType.vb: AccessRule(Of T).Rights\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.AuthorizationRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuthorizationRule\n  fullName: System.Security.AccessControl.AuthorizationRule\n  commentId: T:System.Security.AccessControl.AuthorizationRule\n  nameWithType: AuthorizationRule\n- uid: System.Security.AccessControl.AccessRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessRule\n  fullName: System.Security.AccessControl.AccessRule\n  commentId: T:System.Security.AccessControl.AccessRule\n  nameWithType: AccessRule\n- uid: System.Security.AccessControl.AccessRule.AccessControlType\n  parent: System.Security.AccessControl.AccessRule\n  isExternal: false\n  name: AccessControlType\n  fullName: System.Security.AccessControl.AccessRule.AccessControlType\n  commentId: P:System.Security.AccessControl.AccessRule.AccessControlType\n  nameWithType: AccessRule.AccessControlType\n- uid: System.Security.AccessControl.AuthorizationRule.AccessMask\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: AccessMask\n  fullName: System.Security.AccessControl.AuthorizationRule.AccessMask\n  commentId: P:System.Security.AccessControl.AuthorizationRule.AccessMask\n  nameWithType: AuthorizationRule.AccessMask\n- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IdentityReference\n  nameWithType: AuthorizationRule.IdentityReference\n- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  nameWithType: AuthorizationRule.InheritanceFlags\n- uid: System.Security.AccessControl.AuthorizationRule.IsInherited\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IsInherited\n  fullName: System.Security.AccessControl.AuthorizationRule.IsInherited\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IsInherited\n  nameWithType: AuthorizationRule.IsInherited\n- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  nameWithType: AuthorizationRule.PropagationFlags\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n  commentId: T:System.Security.Principal.IdentityReference\n  nameWithType: IdentityReference\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  commentId: '!:T'\n  nameWithType: T\n- uid: System.Security.AccessControl.AccessControlType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlType\n  fullName: System.Security.AccessControl.AccessControlType\n  commentId: T:System.Security.AccessControl.AccessControlType\n  nameWithType: AccessControlType\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n  commentId: T:System.Security.AccessControl.InheritanceFlags\n  nameWithType: InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n  commentId: T:System.Security.AccessControl.PropagationFlags\n  nameWithType: PropagationFlags\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n"}