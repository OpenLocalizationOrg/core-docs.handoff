{"nodes":[{"pos":[350,362],"content":"LingerOption","needQuote":true,"nodes":[{"content":"LingerOption","pos":[0,12]}]},{"pos":[1989,2017],"content":"LingerOption(Boolean, Int32)","needQuote":true,"nodes":[{"content":"LingerOption(Boolean, Int32)","pos":[0,28]}]},{"pos":[3573,3580],"content":"Enabled","needQuote":true,"nodes":[{"content":"Enabled","pos":[0,7]}]},{"pos":[4936,4946],"content":"LingerTime","needQuote":true,"nodes":[{"content":"LingerTime","pos":[0,10]}]},{"pos":[6098,6116],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[6283,6289],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6449,6459],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6554,6562],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6631,6632],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6659,6660],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6730,6738],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6807,6808],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6835,6836],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7019,7033],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7152,7158],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7225,7226],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7276,7282],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7342,7343],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7426,7432],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7499,7500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7550,7556],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7616,7617],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7831,7853],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8001,8007],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8074,8075],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8125,8131],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8192,8193]},{"pos":[8248,8254],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8314,8315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8412,8418],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8485,8486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8536,8542],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8603,8604]},{"pos":[8659,8665],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8725,8726],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8971,9002],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9168,9183],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9259,9260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9310,9316],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9377,9378]},{"pos":[9433,9439],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9499,9500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9606,9621],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9697,9698],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9748,9754],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9815,9816]},{"pos":[9871,9877],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9937,9938],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10168,10181],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10282,10293],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10365,10366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10393,10394],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10467,10478],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10550,10551],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10578,10579],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10754,10763],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[10856,10863],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10931,10932],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10959,10960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11029,11036],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11104,11105],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11132,11133],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11308,11325],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11434,11449],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11525,11526],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11553,11554],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11631,11646],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11722,11723],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11750,11751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11896,11902],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12034,12041],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[12188,12193],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.Net.Sockets.LingerOption\n  commentId: T:System.Net.Sockets.LingerOption\n  id: LingerOption\n  parent: System.Net.Sockets\n  children:\n  - System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)\n  - System.Net.Sockets.LingerOption.Enabled\n  - System.Net.Sockets.LingerOption.LingerTime\n  langs:\n  - csharp\n  - vb\n  name: LingerOption\n  fullName: System.Net.Sockets.LingerOption\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LingerOption\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 71\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Specifies whether a <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will remain connected after a call to the <xref href=\\\"System.Net.Sockets.Socket.Close\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Net.Sockets.TcpClient.Close\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> methods and the length of time it will remain connected, if data remains to be sent.</p>\\n\"\n  syntax:\n    content: public class LingerOption\n    content.vb: Public Class LingerOption\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: LingerOption\n- uid: System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)\n  commentId: M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)\n  id: '#ctor(System.Boolean,System.Int32)'\n  parent: System.Net.Sockets.LingerOption\n  langs:\n  - csharp\n  - vb\n  name: LingerOption(Boolean, Int32)\n  fullName: System.Net.Sockets.LingerOption.LingerOption(System.Boolean, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 73\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.LingerOption\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public LingerOption(bool enable, int seconds)\n    content.vb: Public Sub New(enable As Boolean, seconds As Integer)\n    parameters:\n    - id: enable\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to remain connected after the <xref href=\\\"System.Net.Sockets.Socket.Close\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method is called; otherwise, <strong>false</strong>. </p>\\n\"\n    - id: seconds\n      type: System.Int32\n      description: \"\\n<p>The number of seconds to remain connected after the <xref href=\\\"System.Net.Sockets.Socket.Close\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method is called. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: LingerOption.LingerOption(Boolean, Int32)\n- uid: System.Net.Sockets.LingerOption.Enabled\n  commentId: P:System.Net.Sockets.LingerOption.Enabled\n  id: Enabled\n  parent: System.Net.Sockets.LingerOption\n  langs:\n  - csharp\n  - vb\n  name: Enabled\n  fullName: System.Net.Sockets.LingerOption.Enabled\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Enabled\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 74\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets a value that indicates whether to linger after the <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed.</p>\\n\"\n  syntax:\n    content: public bool Enabled { get; set; }\n    content.vb: Public Property Enabled As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should linger after <xref href=\\\"System.Net.Sockets.Socket.Close\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is called; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: LingerOption.Enabled\n- uid: System.Net.Sockets.LingerOption.LingerTime\n  commentId: P:System.Net.Sockets.LingerOption.LingerTime\n  id: LingerTime\n  parent: System.Net.Sockets.LingerOption\n  langs:\n  - csharp\n  - vb\n  name: LingerTime\n  fullName: System.Net.Sockets.LingerOption.LingerTime\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LingerTime\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 75\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets the amount of time to remain connected after calling the <xref href=\\\"System.Net.Sockets.Socket.Close\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method if data remains to be sent.</p>\\n\"\n  syntax:\n    content: public int LingerTime { get; set; }\n    content.vb: Public Property LingerTime As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The amount of time, in seconds, to remain connected after calling <xref href=\\\"System.Net.Sockets.Socket.Close\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: LingerOption.LingerTime\nreferences:\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n"}