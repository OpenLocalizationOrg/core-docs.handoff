{"nodes":[{"pos":[1222,1233],"content":"BitVector32","needQuote":true,"nodes":[{"content":"BitVector32","pos":[0,11]}]},{"pos":[2928,2952],"content":"BitVector32(BitVector32)","needQuote":true,"nodes":[{"content":"BitVector32(BitVector32)","pos":[0,24]}]},{"pos":[4581,4599],"content":"BitVector32(Int32)","needQuote":true,"nodes":[{"content":"BitVector32(Int32)","pos":[0,18]}]},{"pos":[5987,5991],"content":"Data","needQuote":true,"nodes":[{"content":"Data","pos":[0,4]}]},{"pos":[7616,7641],"content":"Item[BitVector32.Section]","needQuote":true,"nodes":[{"content":"Item[BitVector32.Section]","pos":[0,25]}]},{"pos":[9928,9939],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A mask that indicates the bit to get or set.","pos":[10739,10788],"source":"\\n<p>A mask that indicates the bit to get or set."},{"content":"&lt;/p&gt;\\n","pos":[10789,10795],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified bit flag is on (1); otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10856,10962],"source":"\\n<p>\\n<strong>true</strong> if the specified bit flag is on (1); otherwise, <strong>false</strong>.</p>\\n"},{"pos":[11602,11614],"content":"CreateMask()","needQuote":true,"nodes":[{"content":"CreateMask()","pos":[0,12]}]},{"pos":[13096,13113],"content":"CreateMask(Int32)","needQuote":true,"nodes":[{"content":"CreateMask(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The mask that indicates the previous bit flag.","pos":[14135,14186],"source":"\\n<p>The mask that indicates the previous bit flag."},{"content":"&lt;/p&gt;\\n","pos":[14187,14193],"source":" </p>\\n"},{"pos":[15165,15185],"content":"CreateSection(Int16)","needQuote":true,"nodes":[{"content":"CreateSection(Int16)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;maxValue&lt;/em&gt; is less than 1.","pos":[16748,16788],"source":"\\n<p>\\n<em>maxValue</em> is less than 1."},{"content":"&lt;/p&gt;\\n","pos":[16789,16795],"source":" </p>\\n"},{"pos":[17365,17406],"content":"CreateSection(Int16, BitVector32.Section)","needQuote":true,"nodes":[{"content":"CreateSection(Int16, BitVector32.Section)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;maxValue&lt;/em&gt; is less than 1.","pos":[19565,19605],"source":"\\n<p>\\n<em>maxValue</em> is less than 1."},{"content":"&lt;/p&gt;\\n","pos":[19606,19612],"source":" </p>\\n"},{"pos":[20457,20471],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22216,22229],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[23606,23616],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25277,25298],"content":"ToString(BitVector32)","needQuote":true,"nodes":[{"content":"ToString(BitVector32)","pos":[0,21]}]},{"pos":[26890,26920],"content":"System.Collections.Specialized","needQuote":true,"nodes":[{"content":"System.Collections.Specialized","pos":[0,30]}]},{"pos":[27165,27187],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[27335,27341],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27408,27409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27459,27465],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27526,27527]},{"pos":[27582,27588],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27648,27649],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27746,27752],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27819,27820],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27870,27876],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27937,27938]},{"pos":[27993,27999],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28059,28060],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28305,28336],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[28502,28517],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28593,28594],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28644,28650],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28711,28712]},{"pos":[28767,28773],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28833,28834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28940,28955],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[29031,29032],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29082,29088],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29149,29150]},{"pos":[29205,29211],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29271,29272],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29498,29507],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[29600,29607],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[29675,29676],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29703,29704],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29773,29780],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[29848,29849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29876,29877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30030,30036],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30157,30163],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[30347,30358],"content":"BitVector32","needQuote":true,"nodes":[{"content":"BitVector32","pos":[0,11]}]},{"pos":[30565,30570],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[30773,30792],"content":"BitVector32.Section","needQuote":true,"nodes":[{"content":"BitVector32.Section","pos":[0,19]}]},{"pos":[31025,31032],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31179,31184],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[31360,31374],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[31499,31505],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31554,31555],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31605,31611],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31671,31672],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31758,31764],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31813,31814],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31864,31870],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31930,31931],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32112,32121],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[32300,32313],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[32420,32431],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[32485,32486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32513,32514],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32590,32601],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[32655,32656],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32683,32684],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32873,32883],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[32984,32992],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[33043,33044],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33071,33072],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33145,33153],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[33204,33205],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33232,33233],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33394,33400],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[33564,33589],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[33802,33819],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Collections.Specialized.BitVector32\n  commentId: T:System.Collections.Specialized.BitVector32\n  id: BitVector32\n  parent: System.Collections.Specialized\n  children:\n  - System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)\n  - System.Collections.Specialized.BitVector32.#ctor(System.Int32)\n  - System.Collections.Specialized.BitVector32.CreateMask\n  - System.Collections.Specialized.BitVector32.CreateMask(System.Int32)\n  - System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  - System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  - System.Collections.Specialized.BitVector32.Data\n  - System.Collections.Specialized.BitVector32.Equals(System.Object)\n  - System.Collections.Specialized.BitVector32.GetHashCode\n  - System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\n  - System.Collections.Specialized.BitVector32.Item(System.Int32)\n  - System.Collections.Specialized.BitVector32.ToString\n  - System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)\n  langs:\n  - csharp\n  - vb\n  name: BitVector32\n  fullName: System.Collections.Specialized.BitVector32\n  type: Struct\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BitVector32\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 13\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Provides a simple structure that stores Boolean values and small integers in 32 bits of memory.</p>\\n\"\n  syntax:\n    content: public struct BitVector32\n    content.vb: Public Structure BitVector32\n  seealso:\n  - type: System.Collections.BitArray\n    commentId: T:System.Collections.BitArray\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: BitVector32\n- uid: System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)\n  commentId: M:System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)\n  id: '#ctor(System.Collections.Specialized.BitVector32)'\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: BitVector32(BitVector32)\n  fullName: System.Collections.Specialized.BitVector32.BitVector32(System.Collections.Specialized.BitVector32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 29\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure containing the data represented in an existing <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public BitVector32(BitVector32 value)\n    content.vb: Public Sub New(value As BitVector32)\n    parameters:\n    - id: value\n      type: System.Collections.Specialized.BitVector32\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that contains the data to copy. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitVector32.BitVector32(BitVector32)\n- uid: System.Collections.Specialized.BitVector32.#ctor(System.Int32)\n  commentId: M:System.Collections.Specialized.BitVector32.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: BitVector32(Int32)\n  fullName: System.Collections.Specialized.BitVector32.BitVector32(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 20\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure containing the data represented in an integer.</p>\\n\"\n  syntax:\n    content: public BitVector32(int data)\n    content.vb: Public Sub New(data As Integer)\n    parameters:\n    - id: data\n      type: System.Int32\n      description: \"\\n<p>An integer representing the data of the new <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BitVector32.BitVector32(Int32)\n- uid: System.Collections.Specialized.BitVector32.Data\n  commentId: P:System.Collections.Specialized.BitVector32.Data\n  id: Data\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: Data\n  fullName: System.Collections.Specialized.BitVector32.Data\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Data\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 81\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the value of the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as an integer.</p>\\n\"\n  syntax:\n    content: public int Data { get; }\n    content.vb: Public ReadOnly Property Data As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value of the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as an integer.</p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.BitVector32.Item(System.Int32)\n    commentId: P:System.Collections.Specialized.BitVector32.Item(System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: BitVector32.Data\n- uid: System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\n  commentId: P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\n  id: Item(System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: Item[BitVector32.Section]\n  fullName: System.Collections.Specialized.BitVector32.Item[System.Collections.Specialized.BitVector32.Section]\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 59\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets or sets the value stored in the specified <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int this[BitVector32.Section section] { get; set; }\n    content.vb: Public Property Item(section As BitVector32.Section) As Integer\n    parameters:\n    - id: section\n      type: System.Collections.Specialized.BitVector32.Section\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the value to get or set. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value stored in the specified <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n    commentId: M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  - type: System.Collections.Specialized.BitVector32.Section\n    commentId: T:System.Collections.Specialized.BitVector32.Section\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)\n  name.vb: Item(BitVector32.Section)\n  nameWithType: BitVector32.Item[BitVector32.Section]\n  nameWithType.vb: BitVector32.Item(BitVector32.Section)\n- uid: System.Collections.Specialized.BitVector32.Item(System.Int32)\n  commentId: P:System.Collections.Specialized.BitVector32.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Collections.Specialized.BitVector32.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 37\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets or sets the state of the bit flag indicated by the specified mask.</p>\\n\"\n  syntax:\n    content: public bool this[int bit] { get; set; }\n    content.vb: Public Property Item(bit As Integer) As Boolean\n    parameters:\n    - id: bit\n      type: System.Int32\n      description: \"\\n<p>A mask that indicates the bit to get or set. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified bit flag is on (1); otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.BitVector32.CreateMask\n    commentId: M:System.Collections.Specialized.BitVector32.CreateMask\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Specialized.BitVector32.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: BitVector32.Item[Int32]\n  nameWithType.vb: BitVector32.Item(Int32)\n- uid: System.Collections.Specialized.BitVector32.CreateMask\n  commentId: M:System.Collections.Specialized.BitVector32.CreateMask\n  id: CreateMask\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: CreateMask()\n  fullName: System.Collections.Specialized.BitVector32.CreateMask()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateMask\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 104\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Creates the first mask in a series of masks that can be used to retrieve individual bits in a <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set up as bit flags.</p>\\n\"\n  syntax:\n    content: public static int CreateMask()\n    content.vb: Public Shared Function CreateMask As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A mask that isolates the first bit flag in the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitVector32.CreateMask()\n- uid: System.Collections.Specialized.BitVector32.CreateMask(System.Int32)\n  commentId: M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)\n  id: CreateMask(System.Int32)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: CreateMask(Int32)\n  fullName: System.Collections.Specialized.BitVector32.CreateMask(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateMask\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 112\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set up as bit flags.</p>\\n\"\n  syntax:\n    content: public static int CreateMask(int previous)\n    content.vb: Public Shared Function CreateMask(previous As Integer) As Integer\n    parameters:\n    - id: previous\n      type: System.Int32\n      description: \"\\n<p>The mask that indicates the previous bit flag. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A mask that isolates the bit flag following the one that <em>previous</em> points to in <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>previous</em> indicates the last bit flag in the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitVector32.CreateMask(Int32)\n- uid: System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  commentId: M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  id: CreateSection(System.Int16)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: CreateSection(Int16)\n  fullName: System.Collections.Specialized.BitVector32.CreateSection(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateSection\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 153\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Creates the first <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in a series of sections that contain small integers.</p>\\n\"\n  syntax:\n    content: public static BitVector32.Section CreateSection(short maxValue)\n    content.vb: Public Shared Function CreateSection(maxValue As Short) As BitVector32.Section\n    parameters:\n    - id: maxValue\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that specifies the maximum value for the new <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Collections.Specialized.BitVector32.Section\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can hold a number from zero to <em>maxValue</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>maxValue</em> is less than 1. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitVector32.CreateSection(Int16)\n- uid: System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  commentId: M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  id: CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: CreateSection(Int16, BitVector32.Section)\n  fullName: System.Collections.Specialized.BitVector32.CreateSection(System.Int16, System.Collections.Specialized.BitVector32.Section)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateSection\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 161\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Creates a new <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> following the specified <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in a series of sections that contain small integers.</p>\\n\"\n  syntax:\n    content: public static BitVector32.Section CreateSection(short maxValue, BitVector32.Section previous)\n    content.vb: Public Shared Function CreateSection(maxValue As Short, previous As BitVector32.Section) As BitVector32.Section\n    parameters:\n    - id: maxValue\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer that specifies the maximum value for the new <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: previous\n      type: System.Collections.Specialized.BitVector32.Section\n      description: \"\\n<p>The previous <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Collections.Specialized.BitVector32.Section\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Specialized.BitVector32.Section\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can hold a number from zero to <em>maxValue</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>maxValue</em> is less than 1. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>previous</em> includes the final bit in the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>maxValue</em> is greater than the highest value that can be represented by the number of bits after <em>previous</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitVector32.CreateSection(Int16, BitVector32.Section)\n- uid: System.Collections.Specialized.BitVector32.Equals(System.Object)\n  commentId: M:System.Collections.Specialized.BitVector32.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Collections.Specialized.BitVector32.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 181\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Determines whether the specified object is equal to the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object o)\n    content.vb: Public Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified object is equal to the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: BitVector32.Equals(Object)\n- uid: System.Collections.Specialized.BitVector32.GetHashCode\n  commentId: M:System.Collections.Specialized.BitVector32.GetHashCode\n  id: GetHashCode\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Collections.Specialized.BitVector32.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 191\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Serves as a hash function for the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: BitVector32.GetHashCode()\n- uid: System.Collections.Specialized.BitVector32.ToString\n  commentId: M:System.Collections.Specialized.BitVector32.ToString\n  id: ToString\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Collections.Specialized.BitVector32.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 217\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Returns a string that represents the current <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that represents the current <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.ValueType.ToString\n  seealso:\n  - type: System.Object.ToString\n    commentId: M:System.Object.ToString\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: BitVector32.ToString()\n- uid: System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)\n  commentId: M:System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)\n  id: ToString(System.Collections.Specialized.BitVector32)\n  parent: System.Collections.Specialized.BitVector32\n  langs:\n  - csharp\n  - vb\n  name: ToString(BitVector32)\n  fullName: System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/BitVector32.cs\n    startLine: 196\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Returns a string that represents the specified <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static string ToString(BitVector32 value)\n    content.vb: Public Shared Function ToString(value As BitVector32) As String\n    parameters:\n    - id: value\n      type: System.Collections.Specialized.BitVector32\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to represent. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that represents the specified <xref href=\\\"System.Collections.Specialized.BitVector32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: BitVector32.ToString(BitVector32)\nreferences:\n- uid: System.Collections.Specialized\n  isExternal: false\n  name: System.Collections.Specialized\n  fullName: System.Collections.Specialized\n  nameWithType: System.Collections.Specialized\n  commentId: N:System.Collections.Specialized\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections.Specialized.BitVector32\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: BitVector32\n  fullName: System.Collections.Specialized.BitVector32\n  nameWithType: BitVector32\n  commentId: T:System.Collections.Specialized.BitVector32\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.Specialized.BitVector32.Section\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: BitVector32.Section\n  fullName: System.Collections.Specialized.BitVector32.Section\n  nameWithType: BitVector32.Section\n  commentId: T:System.Collections.Specialized.BitVector32.Section\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}