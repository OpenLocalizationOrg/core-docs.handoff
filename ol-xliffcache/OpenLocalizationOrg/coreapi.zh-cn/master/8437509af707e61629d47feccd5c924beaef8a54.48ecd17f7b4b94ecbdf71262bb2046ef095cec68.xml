{"nodes":[{"pos":[826,841],"content":"EventDescriptor","needQuote":true,"nodes":[{"content":"EventDescriptor","pos":[0,15]}]},{"pos":[3658,3691],"content":"EventDescriptor(MemberDescriptor)","needQuote":true,"nodes":[{"content":"EventDescriptor(MemberDescriptor)","pos":[0,33]}]},{"pos":[5452,5498],"content":"EventDescriptor(MemberDescriptor, Attribute[])","needQuote":true,"nodes":[{"content":"EventDescriptor(MemberDescriptor, Attribute[])","pos":[0,46]}]},{"pos":[7958,7994],"content":"EventDescriptor(String, Attribute[])","needQuote":true,"nodes":[{"content":"EventDescriptor(String, Attribute[])","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The name of the event.","pos":[8958,8985],"source":"\\n<p>The name of the event."},{"content":"&lt;/p&gt;\\n","pos":[8986,8992],"source":" </p>\\n"},{"pos":[9889,9922],"content":"AddEventHandler(Object, Delegate)","needQuote":true,"nodes":[{"content":"AddEventHandler(Object, Delegate)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A component that provides events to the delegate.","pos":[10818,10872],"source":"\\n<p>A component that provides events to the delegate."},{"content":"&lt;/p&gt;\\n","pos":[10873,10879],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A delegate that represents the method that handles the event.","pos":[10945,11011],"source":"\\n<p>A delegate that represents the method that handles the event."},{"content":"&lt;/p&gt;\\n","pos":[11012,11018],"source":" </p>\\n"},{"pos":[11611,11624],"content":"ComponentType","needQuote":true,"nodes":[{"content":"ComponentType","pos":[0,13]}]},{"pos":[13228,13237],"content":"EventType","needQuote":true,"nodes":[{"content":"EventType","pos":[0,9]}]},{"pos":[14816,14827],"content":"IsMulticast","needQuote":true,"nodes":[{"content":"IsMulticast","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the event delegate is multicast; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15674,15779],"source":"\\n<p>\\n<strong>true</strong> if the event delegate is multicast; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[16536,16572],"content":"RemoveEventHandler(Object, Delegate)","needQuote":true,"nodes":[{"content":"RemoveEventHandler(Object, Delegate)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The component that the delegate is bound to.","pos":[17557,17606],"source":"\\n<p>The component that the delegate is bound to."},{"content":"&lt;/p&gt;\\n","pos":[17607,17613],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The delegate to unbind from the component.","pos":[17679,17726],"source":"\\n<p>The delegate to unbind from the component."},{"content":"&lt;/p&gt;\\n","pos":[17727,17733],"source":" </p>\\n"},{"pos":[18169,18190],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[18366,18372],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18557,18573],"content":"MemberDescriptor","needQuote":true,"nodes":[{"content":"MemberDescriptor","pos":[0,16]}]},{"pos":[18850,18864],"content":"AttributeArray","needQuote":true,"nodes":[{"content":"AttributeArray","pos":[0,14]}]},{"pos":[19182,19192],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[19496,19504],"content":"Category","needQuote":true,"nodes":[{"content":"Category","pos":[0,8]}]},{"pos":[19805,19816],"content":"Description","needQuote":true,"nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[20129,20143],"content":"DesignTimeOnly","needQuote":true,"nodes":[{"content":"DesignTimeOnly","pos":[0,14]}]},{"pos":[20462,20473],"content":"DisplayName","needQuote":true,"nodes":[{"content":"DisplayName","pos":[0,11]}]},{"pos":[20783,20794],"content":"IsBrowsable","needQuote":true,"nodes":[{"content":"IsBrowsable","pos":[0,11]}]},{"pos":[21097,21101],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[21391,21403],"content":"NameHashCode","needQuote":true,"nodes":[{"content":"NameHashCode","pos":[0,12]}]},{"pos":[21730,21757],"content":"CreateAttributeCollection()","needQuote":true,"nodes":[{"content":"CreateAttributeCollection()","pos":[0,27]}]},{"pos":[21936,21961],"content":"CreateAttributeCollection","needQuote":true,"nodes":[{"content":"CreateAttributeCollection","pos":[0,25]}]},{"pos":[22051,22052],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22079,22080],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22192,22217],"content":"CreateAttributeCollection","needQuote":true,"nodes":[{"content":"CreateAttributeCollection","pos":[0,25]}]},{"pos":[22307,22308],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22335,22336],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22638,22652],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22821,22827],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22898,22899],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22949,22955],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23015,23016],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23124,23130],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23201,23202],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23252,23258],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23318,23319],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23623,23644],"content":"FillAttributes(IList)","needQuote":true,"nodes":[{"content":"FillAttributes(IList)","pos":[0,21]}]},{"pos":[23851,23865],"content":"FillAttributes","needQuote":true,"nodes":[{"content":"FillAttributes","pos":[0,14]}]},{"pos":[23944,23945],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24006,24011],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[24082,24083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24210,24224],"content":"FillAttributes","needQuote":true,"nodes":[{"content":"FillAttributes","pos":[0,14]}]},{"pos":[24303,24304],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24365,24370],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[24441,24442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24795,24833],"content":"FindMethod(Type, String, Type[], Type)","needQuote":true,"nodes":[{"content":"FindMethod(Type, String, Type[], Type)","pos":[0,38]}]},{"pos":[25260,25270],"content":"FindMethod","needQuote":true,"nodes":[{"content":"FindMethod","pos":[0,10]}]},{"pos":[25345,25346],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25394,25398],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[25457,25458]},{"pos":[25513,25519],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[25580,25581]},{"pos":[25634,25638],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[25697,25699]},{"content":",","pos":[25731,25732]},{"pos":[25785,25789],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[25847,25848],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25998,26008],"content":"FindMethod","needQuote":true,"nodes":[{"content":"FindMethod","pos":[0,10]}]},{"pos":[26083,26084],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26132,26136],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[26195,26196]},{"pos":[26251,26257],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[26318,26319]},{"pos":[26372,26376],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[26434,26436],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[26465,26466]},{"pos":[26519,26523],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[26581,26582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27065,27112],"content":"FindMethod(Type, String, Type[], Type, Boolean)","needQuote":true,"nodes":[{"content":"FindMethod(Type, String, Type[], Type, Boolean)","pos":[0,47]}]},{"pos":[27595,27605],"content":"FindMethod","needQuote":true,"nodes":[{"content":"FindMethod","pos":[0,10]}]},{"pos":[27680,27681],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27729,27733],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[27792,27793]},{"pos":[27848,27854],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[27915,27916]},{"pos":[27969,27973],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[28032,28034]},{"content":",","pos":[28066,28067]},{"pos":[28120,28124],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[28183,28184]},{"pos":[28240,28247],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[28308,28309],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28474,28484],"content":"FindMethod","needQuote":true,"nodes":[{"content":"FindMethod","pos":[0,10]}]},{"pos":[28559,28560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28608,28612],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[28671,28672]},{"pos":[28727,28733],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[28794,28795]},{"pos":[28848,28852],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[28910,28912],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[28941,28942]},{"pos":[28995,28999],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[29058,29059]},{"pos":[29115,29122],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[29183,29184],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29634,29647],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[29798,29809],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29885,29886],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29913,29914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30012,30023],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30099,30100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30127,30128],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30427,30460],"content":"GetInvocationTarget(Type, Object)","needQuote":true,"nodes":[{"content":"GetInvocationTarget(Type, Object)","pos":[0,33]}]},{"pos":[30680,30699],"content":"GetInvocationTarget","needQuote":true,"nodes":[{"content":"GetInvocationTarget","pos":[0,19]}]},{"pos":[30783,30784],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30832,30836],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[30895,30896]},{"pos":[30951,30957],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31017,31018],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31151,31170],"content":"GetInvocationTarget","needQuote":true,"nodes":[{"content":"GetInvocationTarget","pos":[0,19]}]},{"pos":[31254,31255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31303,31307],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[31366,31367]},{"pos":[31422,31428],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31488,31489],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31819,31834],"content":"GetSite(Object)","needQuote":true,"nodes":[{"content":"GetSite(Object)","pos":[0,15]}]},{"pos":[32005,32012],"content":"GetSite","needQuote":true,"nodes":[{"content":"GetSite","pos":[0,7]}]},{"pos":[32084,32085],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32135,32141],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32201,32202],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32311,32318],"content":"GetSite","needQuote":true,"nodes":[{"content":"GetSite","pos":[0,7]}]},{"pos":[32390,32391],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32441,32447],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32507,32508],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32732,32742],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[32837,32845],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[32914,32915],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32942,32943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33013,33021],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[33090,33091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33118,33119],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33316,33338],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[33486,33492],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33559,33560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33610,33616],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33677,33678]},{"pos":[33733,33739],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33799,33800],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33897,33903],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33970,33971],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34021,34027],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34088,34089]},{"pos":[34144,34150],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34210,34211],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34456,34487],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[34653,34668],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[34744,34745],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34795,34801],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34862,34863]},{"pos":[34918,34924],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34984,34985],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35091,35106],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[35182,35183],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35233,35239],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35300,35301]},{"pos":[35356,35362],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35422,35423],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35649,35658],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[35751,35758],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35826,35827],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35854,35855],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35924,35931],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35999,36000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36027,36028],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36203,36220],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[36329,36344],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[36420,36421],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36448,36449],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36526,36541],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[36617,36618],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36645,36646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36791,36797],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[36896,36907],"content":"Attribute[]","needQuote":true,"nodes":[{"content":"Attribute[]","pos":[0,11]}]},{"pos":[37047,37056],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"content":"[]","pos":[37120,37122]},{"pos":[37190,37199],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[37262,37264],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[37407,37413],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[37560,37568],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[37717,37721],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[37861,37868],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.ComponentModel.EventDescriptor\n  commentId: T:System.ComponentModel.EventDescriptor\n  id: EventDescriptor\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)\n  - System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])\n  - System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])\n  - System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)\n  - System.ComponentModel.EventDescriptor.ComponentType\n  - System.ComponentModel.EventDescriptor.EventType\n  - System.ComponentModel.EventDescriptor.IsMulticast\n  - System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)\n  langs:\n  - csharp\n  - vb\n  name: EventDescriptor\n  fullName: System.ComponentModel.EventDescriptor\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EventDescriptor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n    startLine: 11\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Provides information about an event.</p>\\n\"\n  syntax:\n    content: 'public abstract class EventDescriptor : MemberDescriptor'\n    content.vb: >-\n      Public MustInherit Class EventDescriptor\n          Inherits MemberDescriptor\n  seealso:\n  - type: System.ComponentModel.MemberDescriptor\n    commentId: T:System.ComponentModel.MemberDescriptor\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  inheritance:\n  - System.Object\n  - System.ComponentModel.MemberDescriptor\n  inheritedMembers:\n  - System.ComponentModel.MemberDescriptor.AttributeArray\n  - System.ComponentModel.MemberDescriptor.Attributes\n  - System.ComponentModel.MemberDescriptor.Category\n  - System.ComponentModel.MemberDescriptor.Description\n  - System.ComponentModel.MemberDescriptor.DesignTimeOnly\n  - System.ComponentModel.MemberDescriptor.DisplayName\n  - System.ComponentModel.MemberDescriptor.IsBrowsable\n  - System.ComponentModel.MemberDescriptor.Name\n  - System.ComponentModel.MemberDescriptor.NameHashCode\n  - System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n  - System.ComponentModel.MemberDescriptor.Equals(System.Object)\n  - System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n  - System.ComponentModel.MemberDescriptor.GetHashCode\n  - System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n  - System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: EventDescriptor\n- uid: System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)\n  commentId: M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)\n  id: '#ctor(System.ComponentModel.MemberDescriptor)'\n  parent: System.ComponentModel.EventDescriptor\n  langs:\n  - csharp\n  - vb\n  name: EventDescriptor(MemberDescriptor)\n  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(System.ComponentModel.MemberDescriptor)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n    startLine: 30\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the name and attributes in the specified <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected EventDescriptor(MemberDescriptor descr)\n    content.vb: Protected Sub New(descr As MemberDescriptor)\n    parameters:\n    - id: descr\n      type: System.ComponentModel.MemberDescriptor\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the name of the event and its attributes. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: EventDescriptor.EventDescriptor(MemberDescriptor)\n- uid: System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])\n  commentId: M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])\n  id: '#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])'\n  parent: System.ComponentModel.EventDescriptor\n  langs:\n  - csharp\n  - vb\n  name: EventDescriptor(MemberDescriptor, Attribute[])\n  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(System.ComponentModel.MemberDescriptor, System.Attribute[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n    startLine: 42\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the name in the specified <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the attributes in both the <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: protected EventDescriptor(MemberDescriptor descr, Attribute[] attrs)\n    content.vb: Protected Sub New(descr As MemberDescriptor, attrs As Attribute())\n    parameters:\n    - id: descr\n      type: System.ComponentModel.MemberDescriptor\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the name of the member and its attributes. </p>\\n\"\n    - id: attrs\n      type: System.Attribute[]\n      description: \"\\n<p>An <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array with the attributes you want to add to this event description. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.ComponentModel.EventDescriptor.EventDescriptor(System.ComponentModel.MemberDescriptor, System.Attribute())\n  name.vb: EventDescriptor(MemberDescriptor, Attribute())\n  nameWithType: EventDescriptor.EventDescriptor(MemberDescriptor, Attribute[])\n  nameWithType.vb: EventDescriptor.EventDescriptor(MemberDescriptor, Attribute())\n- uid: System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])\n  commentId: M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])\n  id: '#ctor(System.String,System.Attribute[])'\n  parent: System.ComponentModel.EventDescriptor\n  langs:\n  - csharp\n  - vb\n  name: EventDescriptor(String, Attribute[])\n  fullName: System.ComponentModel.EventDescriptor.EventDescriptor(System.String, System.Attribute[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n    startLine: 19\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.EventDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified name and attribute array.</p>\\n\"\n  syntax:\n    content: protected EventDescriptor(string name, Attribute[] attrs)\n    content.vb: Protected Sub New(name As String, attrs As Attribute())\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the event. </p>\\n\"\n    - id: attrs\n      type: System.Attribute[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the event attributes. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.ComponentModel.EventDescriptor.EventDescriptor(System.String, System.Attribute())\n  name.vb: EventDescriptor(String, Attribute())\n  nameWithType: EventDescriptor.EventDescriptor(String, Attribute[])\n  nameWithType.vb: EventDescriptor.EventDescriptor(String, Attribute())\n- uid: System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)\n  commentId: M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)\n  id: AddEventHandler(System.Object,System.Delegate)\n  parent: System.ComponentModel.EventDescriptor\n  langs:\n  - csharp\n  - vb\n  name: AddEventHandler(Object, Delegate)\n  fullName: System.ComponentModel.EventDescriptor.AddEventHandler(System.Object, System.Delegate)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddEventHandler\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n    startLine: 75\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, binds the event to the component.</p>\\n\"\n  syntax:\n    content: public abstract void AddEventHandler(object component, Delegate value)\n    content.vb: Public MustOverride Sub AddEventHandler(component As Object, value As  Delegate)\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>A component that provides events to the delegate. </p>\\n\"\n    - id: value\n      type: System.Delegate\n      description: \"\\n<p>A delegate that represents the method that handles the event. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)\n    commentId: M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: EventDescriptor.AddEventHandler(Object, Delegate)\n- uid: System.ComponentModel.EventDescriptor.ComponentType\n  commentId: P:System.ComponentModel.EventDescriptor.ComponentType\n  id: ComponentType\n  parent: System.ComponentModel.EventDescriptor\n  langs:\n  - csharp\n  - vb\n  name: ComponentType\n  fullName: System.ComponentModel.EventDescriptor.ComponentType\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ComponentType\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n    startLine: 52\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, gets the type of component this event is bound to.</p>\\n\"\n  syntax:\n    content: public abstract Type ComponentType { get; }\n    content.vb: Public MustOverride ReadOnly Property ComponentType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type of component the event is bound to.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EventDescriptor.EventType\n    commentId: P:System.ComponentModel.EventDescriptor.EventType\n  - type: System.ComponentModel.EventDescriptor.IsMulticast\n    commentId: P:System.ComponentModel.EventDescriptor.IsMulticast\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: EventDescriptor.ComponentType\n- uid: System.ComponentModel.EventDescriptor.EventType\n  commentId: P:System.ComponentModel.EventDescriptor.EventType\n  id: EventType\n  parent: System.ComponentModel.EventDescriptor\n  langs:\n  - csharp\n  - vb\n  name: EventType\n  fullName: System.ComponentModel.EventDescriptor.EventType\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EventType\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n    startLine: 59\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, gets the type of delegate for the event.</p>\\n\"\n  syntax:\n    content: public abstract Type EventType { get; }\n    content.vb: Public MustOverride ReadOnly Property EventType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type of delegate for the event.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EventDescriptor.ComponentType\n    commentId: P:System.ComponentModel.EventDescriptor.ComponentType\n  - type: System.ComponentModel.EventDescriptor.IsMulticast\n    commentId: P:System.ComponentModel.EventDescriptor.IsMulticast\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: EventDescriptor.EventType\n- uid: System.ComponentModel.EventDescriptor.IsMulticast\n  commentId: P:System.ComponentModel.EventDescriptor.IsMulticast\n  id: IsMulticast\n  parent: System.ComponentModel.EventDescriptor\n  langs:\n  - csharp\n  - vb\n  name: IsMulticast\n  fullName: System.ComponentModel.EventDescriptor.IsMulticast\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsMulticast\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n    startLine: 68\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, gets a value indicating whether the event delegate is a multicast delegate.</p>\\n\"\n  syntax:\n    content: public abstract bool IsMulticast { get; }\n    content.vb: Public MustOverride ReadOnly Property IsMulticast As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the event delegate is multicast; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EventDescriptor.EventType\n    commentId: P:System.ComponentModel.EventDescriptor.EventType\n  - type: System.ComponentModel.EventDescriptor.ComponentType\n    commentId: P:System.ComponentModel.EventDescriptor.ComponentType\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: EventDescriptor.IsMulticast\n- uid: System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)\n  commentId: M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)\n  id: RemoveEventHandler(System.Object,System.Delegate)\n  parent: System.ComponentModel.EventDescriptor\n  langs:\n  - csharp\n  - vb\n  name: RemoveEventHandler(Object, Delegate)\n  fullName: System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object, System.Delegate)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveEventHandler\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptor.cs\n    startLine: 83\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, unbinds the delegate from the component so that the delegate will no longer receive events from the component.</p>\\n\"\n  syntax:\n    content: public abstract void RemoveEventHandler(object component, Delegate value)\n    content.vb: Public MustOverride Sub RemoveEventHandler(component As Object, value As  Delegate)\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>The component that the delegate is bound to. </p>\\n\"\n    - id: value\n      type: System.Delegate\n      description: \"\\n<p>The delegate to unbind from the component. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)\n    commentId: M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: EventDescriptor.RemoveEventHandler(Object, Delegate)\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.ComponentModel.MemberDescriptor\n  parent: System.ComponentModel\n  isExternal: false\n  name: MemberDescriptor\n  fullName: System.ComponentModel.MemberDescriptor\n  nameWithType: MemberDescriptor\n  commentId: T:System.ComponentModel.MemberDescriptor\n- uid: System.ComponentModel.MemberDescriptor.AttributeArray\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: AttributeArray\n  fullName: System.ComponentModel.MemberDescriptor.AttributeArray\n  nameWithType: MemberDescriptor.AttributeArray\n  commentId: P:System.ComponentModel.MemberDescriptor.AttributeArray\n- uid: System.ComponentModel.MemberDescriptor.Attributes\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: Attributes\n  fullName: System.ComponentModel.MemberDescriptor.Attributes\n  nameWithType: MemberDescriptor.Attributes\n  commentId: P:System.ComponentModel.MemberDescriptor.Attributes\n- uid: System.ComponentModel.MemberDescriptor.Category\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: Category\n  fullName: System.ComponentModel.MemberDescriptor.Category\n  nameWithType: MemberDescriptor.Category\n  commentId: P:System.ComponentModel.MemberDescriptor.Category\n- uid: System.ComponentModel.MemberDescriptor.Description\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: Description\n  fullName: System.ComponentModel.MemberDescriptor.Description\n  nameWithType: MemberDescriptor.Description\n  commentId: P:System.ComponentModel.MemberDescriptor.Description\n- uid: System.ComponentModel.MemberDescriptor.DesignTimeOnly\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: DesignTimeOnly\n  fullName: System.ComponentModel.MemberDescriptor.DesignTimeOnly\n  nameWithType: MemberDescriptor.DesignTimeOnly\n  commentId: P:System.ComponentModel.MemberDescriptor.DesignTimeOnly\n- uid: System.ComponentModel.MemberDescriptor.DisplayName\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: DisplayName\n  fullName: System.ComponentModel.MemberDescriptor.DisplayName\n  nameWithType: MemberDescriptor.DisplayName\n  commentId: P:System.ComponentModel.MemberDescriptor.DisplayName\n- uid: System.ComponentModel.MemberDescriptor.IsBrowsable\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: IsBrowsable\n  fullName: System.ComponentModel.MemberDescriptor.IsBrowsable\n  nameWithType: MemberDescriptor.IsBrowsable\n  commentId: P:System.ComponentModel.MemberDescriptor.IsBrowsable\n- uid: System.ComponentModel.MemberDescriptor.Name\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: Name\n  fullName: System.ComponentModel.MemberDescriptor.Name\n  nameWithType: MemberDescriptor.Name\n  commentId: P:System.ComponentModel.MemberDescriptor.Name\n- uid: System.ComponentModel.MemberDescriptor.NameHashCode\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: NameHashCode\n  fullName: System.ComponentModel.MemberDescriptor.NameHashCode\n  nameWithType: MemberDescriptor.NameHashCode\n  commentId: P:System.ComponentModel.MemberDescriptor.NameHashCode\n- uid: System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: CreateAttributeCollection()\n  fullName: System.ComponentModel.MemberDescriptor.CreateAttributeCollection()\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n    name: CreateAttributeCollection\n    fullName: System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n    name: CreateAttributeCollection\n    fullName: System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.CreateAttributeCollection()\n  commentId: M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n- uid: System.ComponentModel.MemberDescriptor.Equals(System.Object)\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ComponentModel.MemberDescriptor.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.Equals(System.Object)\n    name: Equals\n    fullName: System.ComponentModel.MemberDescriptor.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.Equals(System.Object)\n    name: Equals\n    fullName: System.ComponentModel.MemberDescriptor.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.Equals(Object)\n  commentId: M:System.ComponentModel.MemberDescriptor.Equals(System.Object)\n- uid: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: true\n  name: FillAttributes(IList)\n  fullName: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n    name: FillAttributes\n    fullName: System.ComponentModel.MemberDescriptor.FillAttributes\n  - name: (\n    fullName: (\n  - uid: System.Collections.IList\n    name: IList\n    fullName: System.Collections.IList\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n    name: FillAttributes\n    fullName: System.ComponentModel.MemberDescriptor.FillAttributes\n  - name: (\n    fullName: (\n  - uid: System.Collections.IList\n    name: IList\n    fullName: System.Collections.IList\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.FillAttributes(IList)\n  commentId: M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n- uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: true\n  name: FindMethod(Type, String, Type[], Type)\n  fullName: System.ComponentModel.MemberDescriptor.FindMethod(System.Type, System.String, System.Type[], System.Type)\n  fullname.vb: System.ComponentModel.MemberDescriptor.FindMethod(System.Type, System.String, System.Type(), System.Type)\n  name.vb: FindMethod(Type, String, Type(), Type)\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n    name: FindMethod\n    fullName: System.ComponentModel.MemberDescriptor.FindMethod\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n    name: FindMethod\n    fullName: System.ComponentModel.MemberDescriptor.FindMethod\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.FindMethod(Type, String, Type[], Type)\n  nameWithType.vb: MemberDescriptor.FindMethod(Type, String, Type(), Type)\n  commentId: M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n- uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: true\n  name: FindMethod(Type, String, Type[], Type, Boolean)\n  fullName: System.ComponentModel.MemberDescriptor.FindMethod(System.Type, System.String, System.Type[], System.Type, System.Boolean)\n  fullname.vb: System.ComponentModel.MemberDescriptor.FindMethod(System.Type, System.String, System.Type(), System.Type, System.Boolean)\n  name.vb: FindMethod(Type, String, Type(), Type, Boolean)\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n    name: FindMethod\n    fullName: System.ComponentModel.MemberDescriptor.FindMethod\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n    name: FindMethod\n    fullName: System.ComponentModel.MemberDescriptor.FindMethod\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.FindMethod(Type, String, Type[], Type, Boolean)\n  nameWithType.vb: MemberDescriptor.FindMethod(Type, String, Type(), Type, Boolean)\n  commentId: M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n- uid: System.ComponentModel.MemberDescriptor.GetHashCode\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ComponentModel.MemberDescriptor.GetHashCode()\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.GetHashCode\n    name: GetHashCode\n    fullName: System.ComponentModel.MemberDescriptor.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.GetHashCode\n    name: GetHashCode\n    fullName: System.ComponentModel.MemberDescriptor.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.GetHashCode()\n  commentId: M:System.ComponentModel.MemberDescriptor.GetHashCode\n- uid: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: true\n  name: GetInvocationTarget(Type, Object)\n  fullName: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n    name: GetInvocationTarget\n    fullName: System.ComponentModel.MemberDescriptor.GetInvocationTarget\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n    name: GetInvocationTarget\n    fullName: System.ComponentModel.MemberDescriptor.GetInvocationTarget\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.GetInvocationTarget(Type, Object)\n  commentId: M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n- uid: System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: true\n  name: GetSite(Object)\n  fullName: System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n    name: GetSite\n    fullName: System.ComponentModel.MemberDescriptor.GetSite\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n    name: GetSite\n    fullName: System.ComponentModel.MemberDescriptor.GetSite\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.GetSite(Object)\n  commentId: M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Attribute[]\n  name: Attribute[]\n  fullName: System.Attribute[]\n  fullname.vb: System.Attribute()\n  name.vb: Attribute()\n  spec.csharp:\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Attribute[]\n  nameWithType.vb: Attribute()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  fullName: System.Delegate\n  nameWithType: Delegate\n  commentId: T:System.Delegate\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n"}