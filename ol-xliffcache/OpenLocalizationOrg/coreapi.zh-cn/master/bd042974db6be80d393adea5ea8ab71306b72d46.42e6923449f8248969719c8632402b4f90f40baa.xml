{"nodes":[{"pos":[348,353],"content":"Group","needQuote":true,"nodes":[{"content":"Group","pos":[0,5]}]},{"pos":[1860,1868],"content":"Captures","needQuote":true,"nodes":[{"content":"Captures","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The collection of substrings matched by the group.&lt;/p&gt;\\n","pos":[2961,3022],"source":"\\n<p>The collection of substrings matched by the group.</p>\\n"},{"pos":[3333,3337],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[4271,4278],"content":"Success","needQuote":true,"nodes":[{"content":"Success","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the match is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5011,5108],"source":"\\n<p>\\n<strong>true</strong> if the match is successful; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[5297,5327],"content":"System.Text.RegularExpressions","needQuote":true,"nodes":[{"content":"System.Text.RegularExpressions","pos":[0,30]}]},{"pos":[5530,5536],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5730,5737],"content":"Capture","needQuote":true,"nodes":[{"content":"Capture","pos":[0,7]}]},{"pos":[5996,6001],"content":"Index","needQuote":true,"nodes":[{"content":"Index","pos":[0,5]}]},{"pos":[6279,6285],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"pos":[6565,6570],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[6850,6860],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7005,7013],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7086,7087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7114,7115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7210,7218],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7291,7292],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7319,7320],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7529,7543],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7662,7668],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7735,7736],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7786,7792],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7852,7853],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7936,7942],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8009,8010],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8060,8066],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8126,8127],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8341,8363],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8511,8517],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8584,8585],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8635,8641],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8702,8703]},{"pos":[8758,8764],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8824,8825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8922,8928],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8995,8996],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9046,9052],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9113,9114]},{"pos":[9169,9175],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9235,9236],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9481,9512],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9678,9693],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9769,9770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9820,9826],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9887,9888]},{"pos":[9943,9949],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10009,10010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10116,10131],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10207,10208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10258,10264],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10325,10326]},{"pos":[10381,10387],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10447,10448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10678,10691],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10792,10803],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10875,10876],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10903,10904],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10977,10988],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11060,11061],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11088,11089],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11264,11273],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11366,11373],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11441,11442],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11469,11470],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11539,11546],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11614,11615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11642,11643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11818,11835],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11944,11959],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12035,12036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12063,12064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12141,12156],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12232,12233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12260,12261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12406,12412],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12602,12619],"content":"CaptureCollection","needQuote":true,"nodes":[{"content":"CaptureCollection","pos":[0,17]}]},{"pos":[12845,12851],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[12997,13004],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Text.RegularExpressions.Group\n  commentId: T:System.Text.RegularExpressions.Group\n  id: Group\n  parent: System.Text.RegularExpressions\n  children:\n  - System.Text.RegularExpressions.Group.Captures\n  - System.Text.RegularExpressions.Group.Name\n  - System.Text.RegularExpressions.Group.Success\n  langs:\n  - csharp\n  - vb\n  name: Group\n  fullName: System.Text.RegularExpressions.Group\n  type: Class\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Group\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 28\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Represents the results from a single capturing group. </p>\\n\"\n  syntax:\n    content: 'public class Group : Capture'\n    content.vb: >-\n      Public Class Group\n          Inherits Capture\n  inheritance:\n  - System.Object\n  - System.Text.RegularExpressions.Capture\n  inheritedMembers:\n  - System.Text.RegularExpressions.Capture.Index\n  - System.Text.RegularExpressions.Capture.Length\n  - System.Text.RegularExpressions.Capture.Value\n  - System.Text.RegularExpressions.Capture.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Group\n- uid: System.Text.RegularExpressions.Group.Captures\n  commentId: P:System.Text.RegularExpressions.Group.Captures\n  id: Captures\n  parent: System.Text.RegularExpressions.Group\n  langs:\n  - csharp\n  - vb\n  name: Captures\n  fullName: System.Text.RegularExpressions.Group.Captures\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Captures\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 31\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order (or innermost-rightmost-first order if the regular expression is modified with the <xref href=\\\"System.Text.RegularExpressions.RegexOptions.RightToLeft\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> option). The collection may have zero or more items.</p>\\n\"\n  syntax:\n    content: public CaptureCollection Captures { get; }\n    content.vb: Public ReadOnly Property Captures As CaptureCollection\n    parameters: []\n    return:\n      type: System.Text.RegularExpressions.CaptureCollection\n      description: \"\\n<p>The collection of substrings matched by the group.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Group.Captures\n- uid: System.Text.RegularExpressions.Group.Name\n  commentId: P:System.Text.RegularExpressions.Group.Name\n  id: Name\n  parent: System.Text.RegularExpressions.Group\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Text.RegularExpressions.Group.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 32\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: public string Name { get; }\n    content.vb: Public ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Group.Name\n- uid: System.Text.RegularExpressions.Group.Success\n  commentId: P:System.Text.RegularExpressions.Group.Success\n  id: Success\n  parent: System.Text.RegularExpressions.Group\n  langs:\n  - csharp\n  - vb\n  name: Success\n  fullName: System.Text.RegularExpressions.Group.Success\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Success\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 33\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Gets a value indicating whether the match is successful.</p>\\n\"\n  syntax:\n    content: public bool Success { get; }\n    content.vb: Public ReadOnly Property Success As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the match is successful; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Group.Success\nreferences:\n- uid: System.Text.RegularExpressions\n  isExternal: false\n  name: System.Text.RegularExpressions\n  fullName: System.Text.RegularExpressions\n  commentId: N:System.Text.RegularExpressions\n  nameWithType: System.Text.RegularExpressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Text.RegularExpressions.Capture\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Capture\n  fullName: System.Text.RegularExpressions.Capture\n  commentId: T:System.Text.RegularExpressions.Capture\n  nameWithType: Capture\n- uid: System.Text.RegularExpressions.Capture.Index\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Index\n  fullName: System.Text.RegularExpressions.Capture.Index\n  commentId: P:System.Text.RegularExpressions.Capture.Index\n  nameWithType: Capture.Index\n- uid: System.Text.RegularExpressions.Capture.Length\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Length\n  fullName: System.Text.RegularExpressions.Capture.Length\n  commentId: P:System.Text.RegularExpressions.Capture.Length\n  nameWithType: Capture.Length\n- uid: System.Text.RegularExpressions.Capture.Value\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Value\n  fullName: System.Text.RegularExpressions.Capture.Value\n  commentId: P:System.Text.RegularExpressions.Capture.Value\n  nameWithType: Capture.Value\n- uid: System.Text.RegularExpressions.Capture.ToString\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: ToString()\n  fullName: System.Text.RegularExpressions.Capture.ToString()\n  spec.csharp:\n  - uid: System.Text.RegularExpressions.Capture.ToString\n    name: ToString\n    fullName: System.Text.RegularExpressions.Capture.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Text.RegularExpressions.Capture.ToString\n    name: ToString\n    fullName: System.Text.RegularExpressions.Capture.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Text.RegularExpressions.Capture.ToString\n  nameWithType: Capture.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Text.RegularExpressions.CaptureCollection\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: CaptureCollection\n  fullName: System.Text.RegularExpressions.CaptureCollection\n  commentId: T:System.Text.RegularExpressions.CaptureCollection\n  nameWithType: CaptureCollection\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n"}