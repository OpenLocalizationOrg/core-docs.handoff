{"nodes":[{"pos":[344,368],"content":"AssemblyKeyFileAttribute","needQuote":true,"nodes":[{"content":"AssemblyKeyFileAttribute","pos":[0,24]}]},{"pos":[1902,1911],"content":"Inherited","needQuote":true,"nodes":[{"content":"Inherited","pos":[0,9]}]},{"pos":[2374,2406],"content":"AssemblyKeyFileAttribute(String)","needQuote":true,"nodes":[{"content":"AssemblyKeyFileAttribute(String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The name of the file containing the key pair.","pos":[3266,3316],"source":"\\n<p>The name of the file containing the key pair."},{"content":"&lt;/p&gt;\\n","pos":[3317,3323],"source":" </p>\\n"},{"pos":[3683,3690],"content":"KeyFile","needQuote":true,"nodes":[{"content":"KeyFile","pos":[0,7]}]},{"content":"\\n&lt;p&gt;A string containing the name of the file that contains the key pair.&lt;/p&gt;\\n","pos":[4423,4502],"source":"\\n<p>A string containing the name of the file that contains the key pair.</p>\\n"},{"pos":[4697,4714],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[4878,4884],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5032,5041],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[5229,5243],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[5368,5374],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5423,5424],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5474,5480],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5540,5541],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5627,5633],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[5682,5683],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5733,5739],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5799,5800],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6003,6016],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[6123,6134],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[6188,6189],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6216,6217],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6293,6304],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[6358,6359],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6386,6387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6569,6579],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6674,6682],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6751,6752],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6779,6780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6850,6858],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6927,6928],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6955,6956],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7153,7175],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7323,7329],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7396,7397],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7447,7453],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7514,7515]},{"pos":[7570,7576],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7636,7637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7734,7740],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7807,7808],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7858,7864],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7925,7926]},{"pos":[7981,7987],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8047,8048],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8293,8324],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8490,8505],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8581,8582],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8632,8638],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8699,8700]},{"pos":[8755,8761],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8821,8822],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8928,8943],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9019,9020],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9070,9076],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9137,9138]},{"pos":[9193,9199],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9259,9260],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9486,9495],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[9588,9595],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9663,9664],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9691,9692],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9761,9768],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9836,9837],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9864,9865],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10040,10057],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[10166,10181],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10257,10258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10285,10286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10363,10378],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10454,10455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10482,10483],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10628,10634],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[10765,10771],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Reflection.AssemblyKeyFileAttribute\n  commentId: T:System.Reflection.AssemblyKeyFileAttribute\n  id: AssemblyKeyFileAttribute\n  parent: System.Reflection\n  children:\n  - System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)\n  - System.Reflection.AssemblyKeyFileAttribute.KeyFile\n  langs:\n  - csharp\n  - vb\n  name: AssemblyKeyFileAttribute\n  fullName: System.Reflection.AssemblyKeyFileAttribute\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AssemblyKeyFileAttribute\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 239\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies the name of a file containing the key pair used to generate a strong name.</p>\\n\"\n  syntax:\n    content: >-\n      [AttributeUsage(AttributeTargets.Assembly, Inherited = false)]\n\n      [ComVisible(true)]\n\n      public sealed class AssemblyKeyFileAttribute : Attribute, _Attribute\n    content.vb: >-\n      <AttributeUsage(AttributeTargets.Assembly, Inherited:=False)>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class AssemblyKeyFileAttribute\n          Inherits Attribute\n          Implements _Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.AttributeUsageAttribute\n    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)\n    arguments:\n    - type: System.AttributeTargets\n      value: 1\n    namedArguments:\n    - name: Inherited\n      type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: AssemblyKeyFileAttribute\n- uid: System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)\n  commentId: M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Reflection.AssemblyKeyFileAttribute\n  langs:\n  - csharp\n  - vb\n  name: AssemblyKeyFileAttribute(String)\n  fullName: System.Reflection.AssemblyKeyFileAttribute.AssemblyKeyFileAttribute(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 245\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Initializes a new instance of the <strong>AssemblyKeyFileAttribute</strong> class with the name of the file containing the key pair to generate a strong name for the assembly being attributed.</p>\\n\"\n  syntax:\n    content: public AssemblyKeyFileAttribute(string keyFile)\n    content.vb: Public Sub New(keyFile As String)\n    parameters:\n    - id: keyFile\n      type: System.String\n      description: \"\\n<p>The name of the file containing the key pair. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AssemblyKeyFileAttribute.AssemblyKeyFileAttribute(String)\n- uid: System.Reflection.AssemblyKeyFileAttribute.KeyFile\n  commentId: P:System.Reflection.AssemblyKeyFileAttribute.KeyFile\n  id: KeyFile\n  parent: System.Reflection.AssemblyKeyFileAttribute\n  langs:\n  - csharp\n  - vb\n  name: KeyFile\n  fullName: System.Reflection.AssemblyKeyFileAttribute.KeyFile\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: KeyFile\n    path: src/mscorlib/src/System/Reflection/AssemblyAttributes.cs\n    startLine: 250\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.</p>\\n\"\n  syntax:\n    content: public string KeyFile { get; }\n    content.vb: Public ReadOnly Property KeyFile As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing the name of the file that contains the key pair.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: AssemblyKeyFileAttribute.KeyFile\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  fullName: System.Attribute\n  nameWithType: Attribute\n  commentId: T:System.Attribute\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Attribute.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Attribute.Equals(Object)\n  commentId: M:System.Attribute.Equals(System.Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Attribute.GetHashCode()\n  spec.csharp:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Attribute.GetHashCode()\n  commentId: M:System.Attribute.GetHashCode\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}