{"nodes":[{"pos":[1290,1307],"content":"CngAlgorithmGroup","needQuote":true,"nodes":[{"content":"CngAlgorithmGroup","pos":[0,17]}]},{"pos":[2822,2847],"content":"CngAlgorithmGroup(String)","needQuote":true,"nodes":[{"content":"CngAlgorithmGroup(String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The name of the algorithm group to initialize.&lt;/p&gt;\\n","pos":[3740,3797],"source":"\\n<p>The name of the algorithm group to initialize.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;algorithmGroup&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3916,3990],"source":"\\n<p>The <em>algorithmGroup</em> parameter is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;algorithmGroup&lt;/em&gt; parameter length is 0 (zero).&lt;/p&gt;\\n","pos":[4087,4155],"source":"\\n<p>The <em>algorithmGroup</em> parameter length is 0 (zero).</p>\\n"},{"pos":[4534,4548],"content":"AlgorithmGroup","needQuote":true,"nodes":[{"content":"AlgorithmGroup","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The embedded algorithm group name.&lt;/p&gt;\\n","pos":[5444,5489],"source":"\\n<p>The embedded algorithm group name.</p>\\n"},{"pos":[5875,5888],"content":"DiffieHellman","needQuote":true,"nodes":[{"content":"DiffieHellman","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An object that specifies the Diffie-Hellman family of algorithms.&lt;/p&gt;\\n","pos":[6852,6928],"source":"\\n<p>An object that specifies the Diffie-Hellman family of algorithms.</p>\\n"},{"pos":[7305,7308],"content":"Dsa","needQuote":true,"nodes":[{"content":"Dsa","pos":[0,3]}]},{"content":"\\n&lt;p&gt;An object that specifies the DSA family of algorithms.&lt;/p&gt;\\n","pos":[8251,8316],"source":"\\n<p>An object that specifies the DSA family of algorithms.</p>\\n"},{"pos":[8719,8734],"content":"ECDiffieHellman","needQuote":true,"nodes":[{"content":"ECDiffieHellman","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An object that specifies the ECDH family of algorithms.&lt;/p&gt;\\n","pos":[9728,9794],"source":"\\n<p>An object that specifies the ECDH family of algorithms.</p>\\n"},{"pos":[10179,10184],"content":"ECDsa","needQuote":true,"nodes":[{"content":"ECDsa","pos":[0,5]}]},{"content":"\\n&lt;p&gt;An object that specifies the ECDSA family of algorithms.&lt;/p&gt;\\n","pos":[11152,11219],"source":"\\n<p>An object that specifies the ECDSA family of algorithms.</p>\\n"},{"pos":[11588,11591],"content":"Rsa","needQuote":true,"nodes":[{"content":"Rsa","pos":[0,3]}]},{"content":"\\n&lt;p&gt;An object that specifies the RSA family of algorithms.&lt;/p&gt;\\n","pos":[12528,12593],"source":"\\n<p>An object that specifies the RSA family of algorithms.</p>\\n"},{"pos":[13014,13028],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[14982,15007],"content":"Equals(CngAlgorithmGroup)","needQuote":true,"nodes":[{"content":"Equals(CngAlgorithmGroup)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;other&lt;/em&gt; parameter specifies the same algorithm group as the current object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16304,16463],"source":"\\n<p>\\n<strong>true</strong> if the <em>other</em> parameter specifies the same algorithm group as the current object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[16972,16985],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash value of the embedded algorithm group name.&lt;/p&gt;\\n","pos":[17875,17938],"source":"\\n<p>The hash value of the embedded algorithm group name.</p>\\n"},{"pos":[18648,18694],"content":"Equality(CngAlgorithmGroup, CngAlgorithmGroup)","needQuote":true,"nodes":[{"content":"Equality(CngAlgorithmGroup, CngAlgorithmGroup)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;An object that specifies an algorithm group.&lt;/p&gt;\\n","pos":[19791,19846],"source":"\\n<p>An object that specifies an algorithm group.</p>\\n"},{"content":"\\n&lt;p&gt;A second object, to be compared to the object that is identified by the &lt;em&gt;left&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[19943,20050],"source":"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects specify the same algorithm group; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20111,20233],"source":"\\n<p>\\n<strong>true</strong> if the two objects specify the same algorithm group; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[20937,20985],"content":"Inequality(CngAlgorithmGroup, CngAlgorithmGroup)","needQuote":true,"nodes":[{"content":"Inequality(CngAlgorithmGroup, CngAlgorithmGroup)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;An object that specifies an algorithm group.&lt;/p&gt;\\n","pos":[22094,22149],"source":"\\n<p>An object that specifies an algorithm group.</p>\\n"},{"content":"\\n&lt;p&gt;A second object, to be compared to the object that is identified by the &lt;em&gt;left&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[22246,22353],"source":"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects do not specify the same algorithm group; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[22414,22537],"source":"\\n<p>\\n<strong>true</strong> if the two objects do not specify the same algorithm group; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22538,22544],"source":" </p>\\n"},{"pos":[22950,22960],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The embedded algorithm group name.&lt;/p&gt;\\n","pos":[23816,23861],"source":"\\n<p>The embedded algorithm group name.</p>\\n"},{"pos":[24106,24134],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[24331,24337],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24548,24577],"content":"IEquatable<CngAlgorithmGroup>","needQuote":true,"nodes":[{"content":"IEquatable&lt;CngAlgorithmGroup&gt;","pos":[0,29],"source":"IEquatable<CngAlgorithmGroup>"}]},{"pos":[24838,24848],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[24912,24913],"content":"<","needQuote":true,"nodes":[]},{"pos":[24996,25013],"content":"CngAlgorithmGroup","needQuote":true,"nodes":[{"content":"CngAlgorithmGroup","pos":[0,17]}]},{"pos":[25157,25167],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[25232,25235]},{"pos":[25325,25342],"content":"CngAlgorithmGroup","needQuote":true,"nodes":[{"content":"CngAlgorithmGroup","pos":[0,17]}]},{"pos":[25414,25415],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25719,25741],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[25889,25895],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25962,25963],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26013,26019],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26080,26081]},{"pos":[26136,26142],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26202,26203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26300,26306],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26373,26374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26424,26430],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26491,26492]},{"pos":[26547,26553],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26613,26614],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26859,26890],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[27056,27071],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27147,27148],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27198,27204],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27265,27266]},{"pos":[27321,27327],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27387,27388],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27494,27509],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[27585,27586],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27636,27642],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27703,27704]},{"pos":[27759,27765],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27825,27826],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28052,28061],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[28154,28161],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28229,28230],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28257,28258],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28327,28334],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28402,28403],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28430,28431],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28606,28623],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[28732,28747],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28823,28824],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28851,28852],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28929,28944],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[29020,29021],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29048,29049],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29194,29200],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[29320,29333],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[29488,29498],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[29541,29542],"content":"<","needQuote":true,"nodes":[]},{"pos":[29569,29570],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29669,29679],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[29723,29726]},{"pos":[29760,29761],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[29788,29789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29973,29979],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30179,30196],"content":"CngAlgorithmGroup","needQuote":true,"nodes":[{"content":"CngAlgorithmGroup","pos":[0,17]}]},{"pos":[30446,30460],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[30579,30585],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30652,30653],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30703,30709],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30769,30770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30853,30859],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30926,30927],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30977,30983],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31043,31044],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31217,31224],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31563,31588],"content":"Equals(CngAlgorithmGroup)","needQuote":true,"nodes":[{"content":"Equals(CngAlgorithmGroup)","pos":[0,25]}]},{"pos":[31926,31932],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32051,32052],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32135,32152],"content":"CngAlgorithmGroup","needQuote":true,"nodes":[{"content":"CngAlgorithmGroup","pos":[0,17]}]},{"pos":[32224,32225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32303,32309],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32431,32432],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32515,32532],"content":"CngAlgorithmGroup","needQuote":true,"nodes":[{"content":"CngAlgorithmGroup","pos":[0,17]}]},{"pos":[32604,32605],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32974,32983],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[33141,33147],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33200,33201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33228,33229],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[33256,33257],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33335,33341],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33397,33398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33425,33426],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[33453,33454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33687,33700],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[33801,33812],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[33884,33885],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33912,33913],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33986,33997],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34069,34070],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34097,34098],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34258,34263],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[34420,34430],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[34525,34533],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[34602,34603],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34630,34631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34701,34709],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[34778,34779],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34806,34807],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34960,34981],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[35182,35199],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Cryptography.CngAlgorithmGroup\n  commentId: T:System.Security.Cryptography.CngAlgorithmGroup\n  id: CngAlgorithmGroup\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)\n  - System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup\n  - System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman\n  - System.Security.Cryptography.CngAlgorithmGroup.Dsa\n  - System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman\n  - System.Security.Cryptography.CngAlgorithmGroup.ECDsa\n  - System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)\n  - System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)\n  - System.Security.Cryptography.CngAlgorithmGroup.GetHashCode\n  - System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)\n  - System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)\n  - System.Security.Cryptography.CngAlgorithmGroup.Rsa\n  - System.Security.Cryptography.CngAlgorithmGroup.ToString\n  langs:\n  - csharp\n  - vb\n  name: CngAlgorithmGroup\n  fullName: System.Security.Cryptography.CngAlgorithmGroup\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CngAlgorithmGroup\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 76\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Encapsulates the name of an encryption algorithm group. </p>\\n\"\n  syntax:\n    content: 'public sealed class CngAlgorithmGroup : IEquatable<CngAlgorithmGroup>'\n    content.vb: >-\n      Public NotInheritable Class CngAlgorithmGroup\n          Implements IEquatable(Of CngAlgorithmGroup)\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable{System.Security.Cryptography.CngAlgorithmGroup}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: CngAlgorithmGroup\n- uid: System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)\n  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: CngAlgorithmGroup(String)\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.CngAlgorithmGroup(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 78\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public CngAlgorithmGroup(string algorithmGroup)\n    content.vb: Public Sub New(algorithmGroup As String)\n    parameters:\n    - id: algorithmGroup\n      type: System.String\n      description: \"\\n<p>The name of the algorithm group to initialize.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>algorithmGroup</em> parameter is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>algorithmGroup</em> parameter length is 0 (zero).</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngAlgorithmGroup.CngAlgorithmGroup(String)\n- uid: System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup\n  commentId: P:System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup\n  id: AlgorithmGroup\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: AlgorithmGroup\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AlgorithmGroup\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 79\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the name of the algorithm group that the current <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object specifies.</p>\\n\"\n  syntax:\n    content: public string AlgorithmGroup { get; }\n    content.vb: Public ReadOnly Property AlgorithmGroup As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The embedded algorithm group name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngAlgorithmGroup.AlgorithmGroup\n- uid: System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman\n  commentId: P:System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman\n  id: DiffieHellman\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: DiffieHellman\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DiffieHellman\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 80\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the Diffie-Hellman family of algorithms.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithmGroup DiffieHellman { get; }\n    content.vb: Public Shared ReadOnly Property DiffieHellman As CngAlgorithmGroup\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: \"\\n<p>An object that specifies the Diffie-Hellman family of algorithms.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithmGroup.DiffieHellman\n- uid: System.Security.Cryptography.CngAlgorithmGroup.Dsa\n  commentId: P:System.Security.Cryptography.CngAlgorithmGroup.Dsa\n  id: Dsa\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: Dsa\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.Dsa\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dsa\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 81\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the Digital Signature Algorithm (DSA) family of algorithms.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithmGroup Dsa { get; }\n    content.vb: Public Shared ReadOnly Property Dsa As CngAlgorithmGroup\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: \"\\n<p>An object that specifies the DSA family of algorithms.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithmGroup.Dsa\n- uid: System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman\n  commentId: P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman\n  id: ECDiffieHellman\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: ECDiffieHellman\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDiffieHellman\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 82\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the Elliptic Curve Diffie-Hellman (ECDH) family of algorithms.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithmGroup ECDiffieHellman { get; }\n    content.vb: Public Shared ReadOnly Property ECDiffieHellman As CngAlgorithmGroup\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: \"\\n<p>An object that specifies the ECDH family of algorithms.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithmGroup.ECDiffieHellman\n- uid: System.Security.Cryptography.CngAlgorithmGroup.ECDsa\n  commentId: P:System.Security.Cryptography.CngAlgorithmGroup.ECDsa\n  id: ECDsa\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: ECDsa\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.ECDsa\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDsa\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 83\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the Elliptic Curve Digital Signature Algorithm (ECDSA) family of algorithms.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithmGroup ECDsa { get; }\n    content.vb: Public Shared ReadOnly Property ECDsa As CngAlgorithmGroup\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: \"\\n<p>An object that specifies the ECDSA family of algorithms.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithmGroup.ECDsa\n- uid: System.Security.Cryptography.CngAlgorithmGroup.Rsa\n  commentId: P:System.Security.Cryptography.CngAlgorithmGroup.Rsa\n  id: Rsa\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: Rsa\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.Rsa\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Rsa\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 84\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies the Rivest-Shamir-Adleman (RSA) family of algorithms.</p>\\n\"\n  syntax:\n    content: public static CngAlgorithmGroup Rsa { get; }\n    content.vb: Public Shared ReadOnly Property Rsa As CngAlgorithmGroup\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: \"\\n<p>An object that specifies the RSA family of algorithms.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CngAlgorithmGroup.Rsa\n- uid: System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)\n  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 85\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Compares the specified object to the current <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to be compared to the current <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the same algorithm group as the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngAlgorithmGroup.Equals(Object)\n- uid: System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)\n  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)\n  id: Equals(System.Security.Cryptography.CngAlgorithmGroup)\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: Equals(CngAlgorithmGroup)\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 86\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Compares the specified <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to the current <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool Equals(CngAlgorithmGroup other)\n    content.vb: Public Function Equals(other As CngAlgorithmGroup) As Boolean\n    parameters:\n    - id: other\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: \"\\n<p>An object to be compared to the current <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>other</em> parameter specifies the same algorithm group as the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IEquatable{System.Security.Cryptography.CngAlgorithmGroup}.Equals(System.Security.Cryptography.CngAlgorithmGroup)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngAlgorithmGroup.Equals(CngAlgorithmGroup)\n- uid: System.Security.Cryptography.CngAlgorithmGroup.GetHashCode\n  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 87\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Generates a hash value for the algorithm group name that is embedded in the current <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash value of the embedded algorithm group name.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngAlgorithmGroup.GetHashCode()\n- uid: System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)\n  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)\n  id: op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: Equality(CngAlgorithmGroup, CngAlgorithmGroup)\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.Equality(System.Security.Cryptography.CngAlgorithmGroup, System.Security.Cryptography.CngAlgorithmGroup)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 88\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects specify the same algorithm group.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(CngAlgorithmGroup left, CngAlgorithmGroup right)\n    content.vb: Public Shared Operator =(left As CngAlgorithmGroup, right As CngAlgorithmGroup) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: \"\\n<p>An object that specifies an algorithm group.</p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: \"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects specify the same algorithm group; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngAlgorithmGroup.Equality(CngAlgorithmGroup, CngAlgorithmGroup)\n- uid: System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)\n  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)\n  id: op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: Inequality(CngAlgorithmGroup, CngAlgorithmGroup)\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.Inequality(System.Security.Cryptography.CngAlgorithmGroup, System.Security.Cryptography.CngAlgorithmGroup)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 89\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Security.Cryptography.CngAlgorithmGroup\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects do not specify the same algorithm group.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(CngAlgorithmGroup left, CngAlgorithmGroup right)\n    content.vb: Public Shared Operator <>(left As CngAlgorithmGroup, right As CngAlgorithmGroup) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: \"\\n<p>An object that specifies an algorithm group.</p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: \"\\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects do not specify the same algorithm group; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngAlgorithmGroup.Inequality(CngAlgorithmGroup, CngAlgorithmGroup)\n- uid: System.Security.Cryptography.CngAlgorithmGroup.ToString\n  commentId: M:System.Security.Cryptography.CngAlgorithmGroup.ToString\n  id: ToString\n  parent: System.Security.Cryptography.CngAlgorithmGroup\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Security.Cryptography.CngAlgorithmGroup.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 90\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the name of the algorithm group that the current <xref href=\\\"System.Security.Cryptography.CngAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object specifies.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The embedded algorithm group name.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CngAlgorithmGroup.ToString()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IEquatable{System.Security.Cryptography.CngAlgorithmGroup}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<CngAlgorithmGroup>\n  fullName: System.IEquatable<System.Security.Cryptography.CngAlgorithmGroup>\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngAlgorithmGroup)\n  name.vb: IEquatable(Of CngAlgorithmGroup)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Cryptography.CngAlgorithmGroup\n    name: CngAlgorithmGroup\n    fullName: System.Security.Cryptography.CngAlgorithmGroup\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Cryptography.CngAlgorithmGroup\n    name: CngAlgorithmGroup\n    fullName: System.Security.Cryptography.CngAlgorithmGroup\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Security.Cryptography.CngAlgorithmGroup}\n  nameWithType: IEquatable<CngAlgorithmGroup>\n  nameWithType.vb: IEquatable(Of CngAlgorithmGroup)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.CngAlgorithmGroup\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithmGroup\n  fullName: System.Security.Cryptography.CngAlgorithmGroup\n  commentId: T:System.Security.Cryptography.CngAlgorithmGroup\n  nameWithType: CngAlgorithmGroup\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IEquatable{System.Security.Cryptography.CngAlgorithmGroup}.Equals(System.Security.Cryptography.CngAlgorithmGroup)\n  parent: System.IEquatable{System.Security.Cryptography.CngAlgorithmGroup}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(CngAlgorithmGroup)\n  fullName: System.IEquatable<System.Security.Cryptography.CngAlgorithmGroup>.Equals(System.Security.Cryptography.CngAlgorithmGroup)\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngAlgorithmGroup).Equals(System.Security.Cryptography.CngAlgorithmGroup)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Security.Cryptography.CngAlgorithmGroup>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.CngAlgorithmGroup\n    name: CngAlgorithmGroup\n    fullName: System.Security.Cryptography.CngAlgorithmGroup\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Security.Cryptography.CngAlgorithmGroup).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.CngAlgorithmGroup\n    name: CngAlgorithmGroup\n    fullName: System.Security.Cryptography.CngAlgorithmGroup\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Security.Cryptography.CngAlgorithmGroup}.Equals(System.Security.Cryptography.CngAlgorithmGroup)\n  nameWithType: IEquatable<CngAlgorithmGroup>.Equals(CngAlgorithmGroup)\n  nameWithType.vb: IEquatable(Of CngAlgorithmGroup).Equals(CngAlgorithmGroup)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}