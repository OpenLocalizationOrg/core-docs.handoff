{"nodes":[{"pos":[995,1000],"content":"Queue","needQuote":true,"nodes":[{"content":"Queue","pos":[0,5]}]},{"pos":[2949,2956],"content":"Queue()","needQuote":true,"nodes":[{"content":"Queue()","pos":[0,7]}]},{"pos":[4035,4053],"content":"Queue(ICollection)","needQuote":true,"nodes":[{"content":"Queue(ICollection)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;col&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5262,5307],"source":"\\n<p>\\n<em>col</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5308,5314],"source":" </p>\\n"},{"pos":[5725,5737],"content":"Queue(Int32)","needQuote":true,"nodes":[{"content":"Queue(Int32)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.","pos":[6871,6914],"source":"\\n<p>\\n<em>capacity</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[6915,6921],"source":" </p>\\n"},{"pos":[7268,7288],"content":"Queue(Int32, Single)","needQuote":true,"nodes":[{"content":"Queue(Int32, Single)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;growFactor&lt;/em&gt; is less than 1.0 or greater than 10.0.","pos":[8697,8823],"source":"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>growFactor</em> is less than 1.0 or greater than 10.0."},{"content":"&lt;/p&gt;\\n","pos":[8824,8830],"source":" </p>\\n"},{"pos":[9099,9104],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[10402,10416],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[12151,12159],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[13757,13764],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[14811,14818],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[16004,16020],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[17685,17705],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.","pos":[19070,19138],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins."},{"content":"&lt;/p&gt;\\n","pos":[19139,19145],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[19264,19311],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19312,19318],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.","pos":[19435,19475],"source":"\\n<p>\\n<em>index</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[19476,19482],"source":" </p>\\n"},{"pos":[20570,20579],"content":"Dequeue()","needQuote":true,"nodes":[{"content":"Dequeue()","pos":[0,9]}]},{"pos":[22287,22302],"content":"Enqueue(Object)","needQuote":true,"nodes":[{"content":"Enqueue(Object)","pos":[0,15]}]},{"pos":[23752,23767],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[25225,25231],"content":"Peek()","needQuote":true,"nodes":[{"content":"Peek()","pos":[0,6]}]},{"pos":[26968,26987],"content":"Synchronized(Queue)","needQuote":true,"nodes":[{"content":"Synchronized(Queue)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;queue&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28301,28348],"source":"\\n<p>\\n<em>queue</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28349,28355],"source":" </p>\\n"},{"pos":[28864,28873],"content":"ToArray()","needQuote":true,"nodes":[{"content":"ToArray()","pos":[0,9]}]},{"pos":[30068,30080],"content":"TrimToSize()","needQuote":true,"nodes":[{"content":"TrimToSize()","pos":[0,12]}]},{"pos":[31392,31410],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[31577,31583],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31757,31768],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[31981,31992],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[32191,32201],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[32296,32304],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[32373,32374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32401,32402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32472,32480],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[32549,32550],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32577,32578],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32761,32775],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[32894,32900],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32967,32968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33018,33024],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33084,33085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33168,33174],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33241,33242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33292,33298],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33358,33359],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33573,33595],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[33743,33749],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33816,33817],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33867,33873],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33934,33935]},{"pos":[33990,33996],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34056,34057],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34154,34160],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34227,34228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34278,34284],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34345,34346]},{"pos":[34401,34407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34467,34468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34713,34744],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[34910,34925],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[35001,35002],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35052,35058],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35119,35120]},{"pos":[35175,35181],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35241,35242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35348,35363],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[35439,35440],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35490,35496],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35557,35558]},{"pos":[35613,35619],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35679,35680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35910,35923],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[36024,36035],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[36107,36108],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36135,36136],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36209,36220],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[36292,36293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36320,36321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36496,36505],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[36598,36605],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[36673,36674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36701,36702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36771,36778],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[36846,36847],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36874,36875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37050,37067],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[37176,37191],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[37267,37268],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37295,37296],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37373,37388],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[37464,37465],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37492,37493],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37788,37801],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[37918,37929],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[37988,37989],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38016,38017],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38098,38109],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[38168,38169],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38196,38197],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38552,38564],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[38697,38707],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[38774,38775],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38802,38803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38892,38902],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[38969,38970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38997,38998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39339,39354],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[39558,39571],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[39633,39634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39661,39662],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39740,39756],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[39821,39822],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39849,39850],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40228,40245],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[40457,40472],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[40536,40537],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40564,40565],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40645,40663],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[40730,40731],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40758,40759],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40994,41000],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[41165,41189],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[41368,41379],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[41438,41439],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41506,41517],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[41594,41595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41708,41719],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[41778,41779],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41846,41857],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[41934,41935],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42163,42172],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[42378,42401],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[42596,42606],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[42673,42674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42741,42752],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[42829,42830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42951,42961],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[43028,43029],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43096,43107],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[43184,43185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43438,43456],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[43678,43704],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[44011,44024],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[44086,44087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44154,44165],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[44242,44243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44353,44369],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[44434,44435],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44502,44513],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[44590,44591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44880,44890],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[45090,45118],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[45433,45448],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[45512,45513],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45580,45591],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[45668,45669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45781,45799],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[45866,45867],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45934,45945],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[46022,46023],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46285,46296],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[46441,46446],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[46588,46594],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[46786,46791],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[47049,47063],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[47293,47300],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[47498,47506],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[47791,47811],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[47989,47995],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[48058,48059],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48108,48113],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[48152,48153]},{"pos":[48207,48212],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[48271,48272],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48384,48390],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[48453,48454],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48503,48508],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[48547,48548]},{"pos":[48602,48607],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[48666,48667],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48878,48883],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[49080,49095],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[49234,49247],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[49317,49318],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49345,49346],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49438,49451],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[49521,49522],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49549,49550],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49766,49777],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[49984,49989],"content":"Queue","needQuote":true,"nodes":[{"content":"Queue","pos":[0,5]}]},{"pos":[50120,50128],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[50256,50262],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[50323,50325]},{"pos":[50390,50396],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50456,50458],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[50593,50614],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[50808,50835],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[51054,51071],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[51252,51278],"content":"ArrayTypeMismatchException","needQuote":true,"nodes":[{"content":"ArrayTypeMismatchException","pos":[0,26]}]},{"pos":[51502,51527],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[51744,51765],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]}],"content":"items:\n- uid: System.Collections.Queue\n  commentId: T:System.Collections.Queue\n  id: Queue\n  parent: System.Collections\n  children:\n  - System.Collections.Queue.#ctor\n  - System.Collections.Queue.#ctor(System.Collections.ICollection)\n  - System.Collections.Queue.#ctor(System.Int32)\n  - System.Collections.Queue.#ctor(System.Int32,System.Single)\n  - System.Collections.Queue.Clear\n  - System.Collections.Queue.Clone\n  - System.Collections.Queue.Contains(System.Object)\n  - System.Collections.Queue.CopyTo(System.Array,System.Int32)\n  - System.Collections.Queue.Count\n  - System.Collections.Queue.Dequeue\n  - System.Collections.Queue.Enqueue(System.Object)\n  - System.Collections.Queue.GetEnumerator\n  - System.Collections.Queue.IsSynchronized\n  - System.Collections.Queue.Peek\n  - System.Collections.Queue.Synchronized(System.Collections.Queue)\n  - System.Collections.Queue.SyncRoot\n  - System.Collections.Queue.ToArray\n  - System.Collections.Queue.TrimToSize\n  langs:\n  - csharp\n  - vb\n  name: Queue\n  fullName: System.Collections.Queue\n  type: Class\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Queue\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 20\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Represents a first-in, first-out collection of objects.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerTypeProxy(typeof (Queue.QueueDebugView))]\n\n      [DebuggerDisplay(\"Count = {Count}\")]\n\n      public class Queue : ICollection, IEnumerable\n    content.vb: >-\n      <DebuggerTypeProxy(GetType(Queue.QueueDebugView))>\n\n      <DebuggerDisplay(\"Count = {Count}\")>\n\n      Public Class Queue\n          Implements ICollection, IEnumerable\n  seealso:\n  - type: System.Collections.Generic.Queue`1\n    commentId: T:System.Collections.Generic.Queue`1\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Queue\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.Queue.#ctor\n  commentId: M:System.Collections.Queue.#ctor\n  id: '#ctor'\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: Queue()\n  fullName: System.Collections.Queue.Queue()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 37\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the default initial capacity, and uses the default growth factor.</p>\\n\"\n  syntax:\n    content: public Queue()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Queue.Queue()\n- uid: System.Collections.Queue.#ctor(System.Collections.ICollection)\n  commentId: M:System.Collections.Queue.#ctor(System.Collections.ICollection)\n  id: '#ctor(System.Collections.ICollection)'\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: Queue(ICollection)\n  fullName: System.Collections.Queue.Queue(System.Collections.ICollection)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 71\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.</p>\\n\"\n  syntax:\n    content: public Queue(ICollection col)\n    content.vb: Public Sub New(col As ICollection)\n    parameters:\n    - id: col\n      type: System.Collections.ICollection\n      description: \"\\n<p>The <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to copy elements from. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>col</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Queue.Queue(ICollection)\n- uid: System.Collections.Queue.#ctor(System.Int32)\n  commentId: M:System.Collections.Queue.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: Queue(Int32)\n  fullName: System.Collections.Queue.Queue(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 45\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the specified initial capacity, and uses the default growth factor.</p>\\n\"\n  syntax:\n    content: public Queue(int capacity)\n    content.vb: Public Sub New(capacity As Integer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The initial number of elements that the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can contain. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Queue.Queue(Int32)\n- uid: System.Collections.Queue.#ctor(System.Int32,System.Single)\n  commentId: M:System.Collections.Queue.#ctor(System.Int32,System.Single)\n  id: '#ctor(System.Int32,System.Single)'\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: Queue(Int32, Single)\n  fullName: System.Collections.Queue.Queue(System.Int32, System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 53\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the specified initial capacity, and uses the specified growth factor.</p>\\n\"\n  syntax:\n    content: public Queue(int capacity, float growFactor)\n    content.vb: Public Sub New(capacity As Integer, growFactor As Single)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The initial number of elements that the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can contain. </p>\\n\"\n    - id: growFactor\n      type: System.Single\n      description: \"\\n<p>The factor by which the capacity of the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is expanded. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>growFactor</em> is less than 1.0 or greater than 10.0. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Queue.Queue(Int32, Single)\n- uid: System.Collections.Queue.Count\n  commentId: P:System.Collections.Queue.Count\n  id: Count\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.Queue.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 82\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the number of elements contained in the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements contained in the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Queue.Count\n- uid: System.Collections.Queue.IsSynchronized\n  commentId: P:System.Collections.Queue.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: IsSynchronized\n  fullName: System.Collections.Queue.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSynchronized\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 103\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether access to the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Queue.SyncRoot\n    commentId: P:System.Collections.Queue.SyncRoot\n  - type: System.Collections.Queue.Synchronized(System.Collections.Queue)\n    commentId: M:System.Collections.Queue.Synchronized(System.Collections.Queue)\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Queue.IsSynchronized\n- uid: System.Collections.Queue.SyncRoot\n  commentId: P:System.Collections.Queue.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: SyncRoot\n  fullName: System.Collections.Queue.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SyncRoot\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 108\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    content.vb: Public Overridable ReadOnly Property SyncRoot As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Queue.IsSynchronized\n    commentId: P:System.Collections.Queue.IsSynchronized\n  - type: System.Collections.Queue.Synchronized(System.Collections.Queue)\n    commentId: M:System.Collections.Queue.Synchronized(System.Collections.Queue)\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Queue.SyncRoot\n- uid: System.Collections.Queue.Clear\n  commentId: M:System.Collections.Queue.Clear\n  id: Clear\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.Queue.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 121\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes all objects from the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Clear()\n    content.vb: Public Overridable Sub Clear\n  seealso:\n  - type: System.Collections.Queue.TrimToSize\n    commentId: M:System.Collections.Queue.TrimToSize\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Queue.Clear()\n- uid: System.Collections.Queue.Clone\n  commentId: M:System.Collections.Queue.Clone\n  id: Clone\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Collections.Queue.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clone\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 87\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Creates a shallow copy of the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual object Clone()\n    content.vb: Public Overridable Function Clone As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>A shallow copy of the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Queue.Clone()\n- uid: System.Collections.Queue.Contains(System.Object)\n  commentId: M:System.Collections.Queue.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: Contains(Object)\n  fullName: System.Collections.Queue.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 239\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether an element is in the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual bool Contains(object obj)\n    content.vb: Public Overridable Function Contains(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is found in the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Queue.Contains(Object)\n- uid: System.Collections.Queue.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Queue.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.Queue.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 144\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements to an existing one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at the specified array index.</p>\\n\"\n  syntax:\n    content: public virtual void CopyTo(Array array, int index)\n    content.vb: Public Overridable Sub CopyTo(array As Array, index As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or- </p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>. </p>\\n\"\n  - type: System.ArrayTypeMismatchException\n    commentId: T:System.ArrayTypeMismatchException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Queue.CopyTo(Array, Int32)\n- uid: System.Collections.Queue.Dequeue\n  commentId: M:System.Collections.Queue.Dequeue\n  id: Dequeue\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: Dequeue()\n  fullName: System.Collections.Queue.Dequeue()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dequeue\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 197\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes and returns the object at the beginning of the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual object Dequeue()\n    content.vb: Public Overridable Function Dequeue As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>The object that is removed from the beginning of the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is empty. </p>\\n\"\n  seealso:\n  - type: System.Collections.Queue.Enqueue(System.Object)\n    commentId: M:System.Collections.Queue.Enqueue(System.Object)\n  - type: System.Collections.Queue.Peek\n    commentId: M:System.Collections.Queue.Peek\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Queue.Dequeue()\n- uid: System.Collections.Queue.Enqueue(System.Object)\n  commentId: M:System.Collections.Queue.Enqueue(System.Object)\n  id: Enqueue(System.Object)\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: Enqueue(Object)\n  fullName: System.Collections.Queue.Enqueue(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Enqueue\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 169\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Adds an object to the end of the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Enqueue(object obj)\n    content.vb: Public Overridable Sub Enqueue(obj As Object)\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to add to the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.Queue.Dequeue\n    commentId: M:System.Collections.Queue.Dequeue\n  - type: System.Collections.Queue.Peek\n    commentId: M:System.Collections.Queue.Peek\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Queue.Enqueue(Object)\n- uid: System.Collections.Queue.GetEnumerator\n  commentId: M:System.Collections.Queue.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.Queue.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 190\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an enumerator that iterates through the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Queue.GetEnumerator()\n- uid: System.Collections.Queue.Peek\n  commentId: M:System.Collections.Queue.Peek\n  id: Peek\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: Peek()\n  fullName: System.Collections.Queue.Peek()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Peek\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 214\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns the object at the beginning of the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> without removing it.</p>\\n\"\n  syntax:\n    content: public virtual object Peek()\n    content.vb: Public Overridable Function Peek As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>The object at the beginning of the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is empty. </p>\\n\"\n  seealso:\n  - type: System.Collections.Queue.Enqueue(System.Object)\n    commentId: M:System.Collections.Queue.Enqueue(System.Object)\n  - type: System.Collections.Queue.Dequeue\n    commentId: M:System.Collections.Queue.Dequeue\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Queue.Peek()\n- uid: System.Collections.Queue.Synchronized(System.Collections.Queue)\n  commentId: M:System.Collections.Queue.Synchronized(System.Collections.Queue)\n  id: Synchronized(System.Collections.Queue)\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: Synchronized(Queue)\n  fullName: System.Collections.Queue.Synchronized(System.Collections.Queue)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Synchronized\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 227\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that wraps the original queue, and is thread safe.</p>\\n\"\n  syntax:\n    content: public static Queue Synchronized(Queue queue)\n    content.vb: Public Shared Function Synchronized(queue As Queue) As Queue\n    parameters:\n    - id: queue\n      type: System.Collections.Queue\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to synchronize. </p>\\n\"\n    return:\n      type: System.Collections.Queue\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper that is synchronized (thread safe).</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>queue</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.Queue.IsSynchronized\n    commentId: P:System.Collections.Queue.IsSynchronized\n  - type: System.Collections.Queue.SyncRoot\n    commentId: P:System.Collections.Queue.SyncRoot\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Queue.Synchronized(Queue)\n- uid: System.Collections.Queue.ToArray\n  commentId: M:System.Collections.Queue.ToArray\n  id: ToArray\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: ToArray()\n  fullName: System.Collections.Queue.ToArray()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToArray\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 270\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements to a new array.</p>\\n\"\n  syntax:\n    content: public virtual object[] ToArray()\n    content.vb: Public Overridable Function ToArray As Object()\n    return:\n      type: System.Object[]\n      description: \"\\n<p>A new array containing elements copied from the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Queue.ToArray()\n- uid: System.Collections.Queue.TrimToSize\n  commentId: M:System.Collections.Queue.TrimToSize\n  id: TrimToSize\n  parent: System.Collections.Queue\n  langs:\n  - csharp\n  - vb\n  name: TrimToSize()\n  fullName: System.Collections.Queue.TrimToSize()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TrimToSize\n    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs\n    startLine: 314\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Sets the capacity to the actual number of elements in the <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void TrimToSize()\n    content.vb: Public Overridable Sub TrimToSize\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.Queue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  seealso:\n  - type: System.Collections.Queue.Clear\n    commentId: M:System.Collections.Queue.Clear\n  - type: System.Collections.Queue.Count\n    commentId: P:System.Collections.Queue.Count\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Queue.TrimToSize()\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.Queue\n  parent: System.Collections\n  isExternal: false\n  name: Queue\n  fullName: System.Collections.Queue\n  nameWithType: Queue\n  commentId: T:System.Collections.Queue\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArrayTypeMismatchException\n  isExternal: false\n  name: ArrayTypeMismatchException\n  fullName: System.ArrayTypeMismatchException\n  nameWithType: ArrayTypeMismatchException\n  commentId: T:System.ArrayTypeMismatchException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n"}