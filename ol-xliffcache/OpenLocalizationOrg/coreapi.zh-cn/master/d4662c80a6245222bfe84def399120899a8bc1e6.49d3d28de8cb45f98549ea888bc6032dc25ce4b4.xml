{"nodes":[{"pos":[1434,1446],"content":"StreamReader","needQuote":true,"nodes":[{"content":"StreamReader","pos":[0,12]}]},{"pos":[4138,4158],"content":"StreamReader(Stream)","needQuote":true,"nodes":[{"content":"StreamReader(Stream)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The stream to be read.","pos":[4892,4919],"source":"\\n<p>The stream to be read."},{"content":"&lt;/p&gt;\\n","pos":[4920,4926],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; does not support reading.","pos":[5037,5085],"source":"\\n<p>\\n<em>stream</em> does not support reading."},{"content":"&lt;/p&gt;\\n","pos":[5086,5092],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5197,5245],"source":"\\n<p>\\n<em>stream</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5246,5252],"source":" </p>\\n"},{"pos":[5623,5652],"content":"StreamReader(Stream, Boolean)","needQuote":true,"nodes":[{"content":"StreamReader(Stream, Boolean)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The stream to be read.","pos":[6539,6566],"source":"\\n<p>The stream to be read."},{"content":"&lt;/p&gt;\\n","pos":[6567,6573],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Indicates whether to look for byte order marks at the beginning of the file.","pos":[6665,6746],"source":"\\n<p>Indicates whether to look for byte order marks at the beginning of the file."},{"content":"&lt;/p&gt;\\n","pos":[6747,6753],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; does not support reading.","pos":[6864,6912],"source":"\\n<p>\\n<em>stream</em> does not support reading."},{"content":"&lt;/p&gt;\\n","pos":[6913,6919],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[7024,7072],"source":"\\n<p>\\n<em>stream</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7073,7079],"source":" </p>\\n"},{"pos":[7477,7507],"content":"StreamReader(Stream, Encoding)","needQuote":true,"nodes":[{"content":"StreamReader(Stream, Encoding)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The stream to be read.","pos":[8343,8370],"source":"\\n<p>The stream to be read."},{"content":"&lt;/p&gt;\\n","pos":[8371,8377],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character encoding to use.","pos":[8451,8486],"source":"\\n<p>The character encoding to use."},{"content":"&lt;/p&gt;\\n","pos":[8487,8493],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; does not support reading.","pos":[8604,8652],"source":"\\n<p>\\n<em>stream</em> does not support reading."},{"content":"&lt;/p&gt;\\n","pos":[8653,8659],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; or &lt;em&gt;encoding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8764,8833],"source":"\\n<p>\\n<em>stream</em> or <em>encoding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8834,8840],"source":" </p>\\n"},{"pos":[9364,9403],"content":"StreamReader(Stream, Encoding, Boolean)","needQuote":true,"nodes":[{"content":"StreamReader(Stream, Encoding, Boolean)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The stream to be read.","pos":[10376,10403],"source":"\\n<p>The stream to be read."},{"content":"&lt;/p&gt;\\n","pos":[10404,10410],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character encoding to use.","pos":[10484,10519],"source":"\\n<p>The character encoding to use."},{"content":"&lt;/p&gt;\\n","pos":[10520,10526],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Indicates whether to look for byte order marks at the beginning of the file.","pos":[10618,10699],"source":"\\n<p>Indicates whether to look for byte order marks at the beginning of the file."},{"content":"&lt;/p&gt;\\n","pos":[10700,10706],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; does not support reading.","pos":[10817,10865],"source":"\\n<p>\\n<em>stream</em> does not support reading."},{"content":"&lt;/p&gt;\\n","pos":[10866,10872],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; or &lt;em&gt;encoding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[10977,11046],"source":"\\n<p>\\n<em>stream</em> or <em>encoding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[11047,11053],"source":" </p>\\n"},{"pos":[11625,11671],"content":"StreamReader(Stream, Encoding, Boolean, Int32)","needQuote":true,"nodes":[{"content":"StreamReader(Stream, Encoding, Boolean, Int32)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The stream to be read.","pos":[12711,12738],"source":"\\n<p>The stream to be read."},{"content":"&lt;/p&gt;\\n","pos":[12739,12745],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character encoding to use.","pos":[12819,12854],"source":"\\n<p>The character encoding to use."},{"content":"&lt;/p&gt;\\n","pos":[12855,12861],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Indicates whether to look for byte order marks at the beginning of the file.","pos":[12953,13034],"source":"\\n<p>Indicates whether to look for byte order marks at the beginning of the file."},{"content":"&lt;/p&gt;\\n","pos":[13035,13041],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The minimum buffer size.","pos":[13109,13138],"source":"\\n<p>The minimum buffer size."},{"content":"&lt;/p&gt;\\n","pos":[13139,13145],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The stream does not support reading.","pos":[13256,13297],"source":"\\n<p>The stream does not support reading."},{"content":"&lt;/p&gt;\\n","pos":[13298,13304],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;stream&lt;/em&gt; or &lt;em&gt;encoding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[13409,13478],"source":"\\n<p>\\n<em>stream</em> or <em>encoding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[13479,13485],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bufferSize&lt;/em&gt; is less than or equal to zero.","pos":[13602,13659],"source":"\\n<p>\\n<em>bufferSize</em> is less than or equal to zero."},{"content":"&lt;/p&gt;\\n","pos":[13660,13666],"source":" </p>\\n"},{"pos":[14290,14345],"content":"StreamReader(Stream, Encoding, Boolean, Int32, Boolean)","needQuote":true,"nodes":[{"content":"StreamReader(Stream, Encoding, Boolean, Int32, Boolean)","pos":[0,55]}]},{"content":"\\n&lt;p&gt;The stream to read.&lt;/p&gt;\\n","pos":[15481,15511],"source":"\\n<p>The stream to read.</p>\\n"},{"content":"\\n&lt;p&gt;The character encoding to use.&lt;/p&gt;\\n","pos":[15585,15626],"source":"\\n<p>The character encoding to use.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to look for byte order marks at the beginning of the file; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15718,15846],"source":"\\n<p>\\n<strong>true</strong> to look for byte order marks at the beginning of the file; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum buffer size.&lt;/p&gt;\\n","pos":[15914,15949],"source":"\\n<p>The minimum buffer size.</p>\\n"},{"pos":[16545,16555],"content":"BaseStream","needQuote":true,"nodes":[{"content":"BaseStream","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The underlying stream.&lt;/p&gt;\\n","pos":[17183,17216],"source":"\\n<p>The underlying stream.</p>\\n"},{"pos":[17555,17570],"content":"CurrentEncoding","needQuote":true,"nodes":[{"content":"CurrentEncoding","pos":[0,15]}]},{"pos":[19149,19160],"content":"EndOfStream","needQuote":true,"nodes":[{"content":"EndOfStream","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current stream position is at the end of the stream; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19831,19959],"source":"\\n<p>\\n<strong>true</strong> if the current stream position is at the end of the stream; otherwise <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The underlying stream has been disposed.&lt;/p&gt;\\n","pos":[20082,20133],"source":"\\n<p>The underlying stream has been disposed.</p>\\n"},{"pos":[20457,20478],"content":"DiscardBufferedData()","needQuote":true,"nodes":[{"content":"DiscardBufferedData()","pos":[0,21]}]},{"pos":[21329,21345],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[22161,22298],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[22299,22305],"source":" </p>\\n"},{"pos":[22660,22666],"content":"Peek()","needQuote":true,"nodes":[{"content":"Peek()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;An integer representing the next character to be read, or -1 if there are no characters to be read or if the stream does not support seeking.&lt;/p&gt;\\n","pos":[23259,23411],"source":"\\n<p>An integer representing the next character to be read, or -1 if there are no characters to be read or if the stream does not support seeking.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[23556,23581],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[23582,23588],"source":" </p>\\n"},{"pos":[23868,23874],"content":"Read()","needQuote":true,"nodes":[{"content":"Read()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[24844,24869],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[24870,24876],"source":" </p>\\n"},{"pos":[25279,25305],"content":"Read(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Read(Char[], Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index + count - 1&lt;/em&gt;) replaced by the characters read from the current source.","pos":[26111,26309],"source":"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index + count - 1</em>) replaced by the characters read from the current source."},{"content":"&lt;/p&gt;\\n","pos":[26310,26316],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.","pos":[26683,26743],"source":"\\n<p>The index of <em>buffer</em> at which to begin writing."},{"content":"&lt;/p&gt;\\n","pos":[26744,26750],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to read.","pos":[26813,26859],"source":"\\n<p>The maximum number of characters to read."},{"content":"&lt;/p&gt;\\n","pos":[26860,26866],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters that have been read, or 0 if at the end of the stream and no data was read.","pos":[26925,27030],"source":"\\n<p>The number of characters that have been read, or 0 if at the end of the stream and no data was read."},{"content":"The number will be less than or equal to the &lt;em&gt;count&lt;/em&gt; parameter, depending on whether the data is available within the stream.&lt;/p&gt;\\n","pos":[27031,27169],"source":" The number will be less than or equal to the <em>count</em> parameter, depending on whether the data is available within the stream.</p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.","pos":[27361,27433],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[27434,27440],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[27545,27593],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[27594,27600],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[27717,27769],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[27770,27776],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs, such as the stream is closed.","pos":[27867,27922],"source":"\\n<p>An I/O error occurs, such as the stream is closed."},{"content":"&lt;/p&gt;\\n","pos":[27923,27929],"source":" </p>\\n"},{"pos":[28550,28581],"content":"ReadAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadAsync(Char[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the characters read from the current source.&lt;/p&gt;\\n","pos":[29624,29837],"source":"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\\n"},{"content":"\\n&lt;p&gt;The position in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.&lt;/p&gt;\\n","pos":[29900,29969],"source":"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to read.","pos":[30032,30078],"source":"\\n<p>The maximum number of characters to read."},{"content":"If the end of the stream is reached before the specified number of characters is written into the buffer, the current method returns.&lt;/p&gt;\\n","pos":[30079,30218],"source":" If the end of the stream is reached before the specified number of characters is written into the buffer, the current method returns.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[30306,30366],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the total number of bytes read into the buffer.","pos":[30367,30467],"source":" The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.&lt;/p&gt;\\n","pos":[30468,30680],"source":" The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30885,30939],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[31056,31114],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\\n","pos":[31211,31300],"source":"\\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[31409,31449],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is currently in use by a previous read operation.","pos":[31562,31627],"source":"\\n<p>The reader is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[31628,31634],"source":" </p>\\n"},{"pos":[32275,32306],"content":"ReadBlock(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadBlock(Char[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index + count - 1&lt;/em&gt;) replaced by the characters read from the current source.&lt;/p&gt;\\n","pos":[33157,33361],"source":"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index + count - 1</em>) replaced by the characters read from the current source.</p>\\n"},{"content":"\\n&lt;p&gt;The position in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.&lt;/p&gt;\\n","pos":[33728,33797],"source":"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to read.&lt;/p&gt;\\n","pos":[33860,33912],"source":"\\n<p>The maximum number of characters to read.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters that have been read.","pos":[33971,34021],"source":"\\n<p>The number of characters that have been read."},{"content":"The number will be less than or equal to &lt;em&gt;count&lt;/em&gt;, depending on whether all input characters have been read.&lt;/p&gt;\\n","pos":[34022,34142],"source":" The number will be less than or equal to <em>count</em>, depending on whether all input characters have been read.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[34347,34395],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[34396,34402],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer length minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.","pos":[34499,34571],"source":"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>."},{"content":"&lt;/p&gt;\\n","pos":[34572,34578],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.","pos":[34695,34747],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative."},{"content":"&lt;/p&gt;\\n","pos":[34748,34754],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurred.","pos":[35063,35090],"source":"\\n<p>An I/O error occurred."},{"content":"&lt;/p&gt;\\n","pos":[35091,35097],"source":" </p>\\n"},{"pos":[35753,35789],"content":"ReadBlockAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadBlockAsync(Char[], Int32, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;When this method returns, contains the specified character array with the values between &lt;em&gt;index&lt;/em&gt; and (&lt;em&gt;index&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1) replaced by the characters read from the current source.&lt;/p&gt;\\n","pos":[36852,37065],"source":"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\\n"},{"content":"\\n&lt;p&gt;The position in &lt;em&gt;buffer&lt;/em&gt; at which to begin writing.&lt;/p&gt;\\n","pos":[37128,37197],"source":"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to read.","pos":[37260,37306],"source":"\\n<p>The maximum number of characters to read."},{"content":"If the end of the stream is reached before the specified number of characters is written into the buffer, the method returns.&lt;/p&gt;\\n","pos":[37307,37438],"source":" If the end of the stream is reached before the specified number of characters is written into the buffer, the method returns.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[37526,37586],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the total number of bytes read into the buffer.","pos":[37587,37687],"source":" The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.&lt;/p&gt;\\n","pos":[37688,37900],"source":" The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38110,38164],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is negative.&lt;/p&gt;\\n","pos":[38281,38339],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; is larger than the buffer length.&lt;/p&gt;\\n","pos":[38436,38525],"source":"\\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[38634,38674],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is currently in use by a previous read operation.","pos":[38787,38852],"source":"\\n<p>The reader is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[38853,38859],"source":" </p>\\n"},{"pos":[39394,39404],"content":"ReadLine()","needQuote":true,"nodes":[{"content":"ReadLine()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The next line from the input stream, or &lt;strong&gt;null&lt;/strong&gt; if the end of the input stream is reached.&lt;/p&gt;\\n","pos":[40039,40154],"source":"\\n<p>The next line from the input stream, or <strong>null</strong> if the end of the input stream is reached.</p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory to allocate a buffer for the returned string.","pos":[40315,40394],"source":"\\n<p>There is insufficient memory to allocate a buffer for the returned string."},{"content":"&lt;/p&gt;\\n","pos":[40395,40401],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[40492,40517],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[40518,40524],"source":" </p>\\n"},{"pos":[40835,40850],"content":"ReadLineAsync()","needQuote":true,"nodes":[{"content":"ReadLineAsync()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[41735,41795],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains the next line from the stream, or is &lt;strong&gt;null&lt;/strong&gt; if all the characters have been read.&lt;/p&gt;\\n","pos":[41796,41951],"source":" The value of the <em>TResult</em> parameter contains the next line from the stream, or is <strong>null</strong> if all the characters have been read.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[42390,42430],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is currently in use by a previous read operation.","pos":[42543,42608],"source":"\\n<p>The reader is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[42609,42615],"source":" </p>\\n"},{"pos":[42919,42930],"content":"ReadToEnd()","needQuote":true,"nodes":[{"content":"ReadToEnd()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;There is insufficient memory to allocate a buffer for the returned string.","pos":[43888,43967],"source":"\\n<p>There is insufficient memory to allocate a buffer for the returned string."},{"content":"&lt;/p&gt;\\n","pos":[43968,43974],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs.","pos":[44065,44090],"source":"\\n<p>An I/O error occurs."},{"content":"&lt;/p&gt;\\n","pos":[44091,44097],"source":" </p>\\n"},{"pos":[44412,44428],"content":"ReadToEndAsync()","needQuote":true,"nodes":[{"content":"ReadToEndAsync()","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A task that represents the asynchronous read operation.","pos":[45336,45396],"source":"\\n<p>A task that represents the asynchronous read operation."},{"content":"The value of the &lt;em&gt;TResult&lt;/em&gt; parameter contains a string with the characters from the current position to the end of the stream.&lt;/p&gt;\\n","pos":[45397,45536],"source":" The value of the <em>TResult</em> parameter contains a string with the characters from the current position to the end of the stream.</p>\\n"},{"content":"\\n&lt;p&gt;The stream has been disposed.&lt;/p&gt;\\n","pos":[45959,45999],"source":"\\n<p>The stream has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The reader is currently in use by a previous read operation.","pos":[46112,46177],"source":"\\n<p>The reader is currently in use by a previous read operation."},{"content":"&lt;/p&gt;\\n","pos":[46178,46184],"source":" </p>\\n"},{"pos":[46374,46383],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[46523,46529],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46684,46694],"content":"TextReader","needQuote":true,"nodes":[{"content":"TextReader","pos":[0,10]}]},{"pos":[46862,46873],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[47062,47071],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[47178,47185],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[47239,47240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47267,47268],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47344,47351],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[47405,47406],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47433,47434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47613,47623],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[47718,47726],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[47795,47796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47823,47824],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47894,47902],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[47971,47972],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47999,48000],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48183,48197],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[48316,48322],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[48389,48390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48440,48446],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48506,48507],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48590,48596],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[48663,48664],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48714,48720],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48780,48781],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48995,49017],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[49165,49171],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49238,49239],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49289,49295],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[49356,49357]},{"pos":[49412,49418],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49478,49479],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49576,49582],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[49649,49650],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49700,49706],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[49767,49768]},{"pos":[49823,49829],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[49889,49890],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50135,50166],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[50332,50347],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[50423,50424],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50474,50480],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50541,50542]},{"pos":[50597,50603],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50663,50664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50770,50785],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[50861,50862],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50912,50918],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[50979,50980]},{"pos":[51035,51041],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51101,51102],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51332,51345],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[51446,51457],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[51529,51530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51557,51558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51631,51642],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[51714,51715],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51742,51743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51918,51927],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[52020,52027],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52095,52096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52123,52124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52193,52200],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[52268,52269],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52296,52297],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52472,52489],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[52598,52613],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[52689,52690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52717,52718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52795,52810],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[52886,52887],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52914,52915],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53060,53066],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[53209,53221],"content":"StreamReader","needQuote":true,"nodes":[{"content":"StreamReader","pos":[0,12]}]},{"pos":[53396,53402],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[53554,53561],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[53721,53729],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[53871,53882],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[54027,54032],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[54218,54234],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[54371,54378],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[54432,54433],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54484,54491],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[54552,54553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54645,54652],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[54706,54707],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54758,54765],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[54826,54827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55040,55046],"content":"Peek()","needQuote":true,"nodes":[{"content":"Peek()","pos":[0,6]}]},{"pos":[55147,55151],"content":"Peek","needQuote":true,"nodes":[{"content":"Peek","pos":[0,4]}]},{"pos":[55202,55203],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55230,55231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55304,55308],"content":"Peek","needQuote":true,"nodes":[{"content":"Peek","pos":[0,4]}]},{"pos":[55359,55360],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55387,55388],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55572,55578],"content":"Read()","needQuote":true,"nodes":[{"content":"Read()","pos":[0,6]}]},{"pos":[55679,55683],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[55734,55735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55762,55763],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55836,55840],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[55891,55892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55919,55920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56144,56170],"content":"Read(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Read(Char[], Int32, Int32)","pos":[0,26]}]},{"pos":[56475,56479],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[56530,56531],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56579,56583],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[56642,56644]},{"content":",","pos":[56676,56677]},{"pos":[56731,56736],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[56796,56797]},{"pos":[56851,56856],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[56915,56916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57030,57034],"content":"Read","needQuote":true,"nodes":[{"content":"Read","pos":[0,4]}]},{"pos":[57085,57086],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57134,57138],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[57196,57198],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[57227,57228]},{"pos":[57282,57287],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[57347,57348]},{"pos":[57402,57407],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[57466,57467],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57706,57712],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[57832,57836],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[57895,57897]},{"pos":[57960,57964],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[58022,58024],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[58228,58259],"content":"ReadAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadAsync(Char[], Int32, Int32)","pos":[0,31]}]},{"pos":[58584,58593],"content":"ReadAsync","needQuote":true,"nodes":[{"content":"ReadAsync","pos":[0,9]}]},{"pos":[58649,58650],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58698,58702],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[58761,58763]},{"content":",","pos":[58795,58796]},{"pos":[58850,58855],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[58915,58916]},{"pos":[58970,58975],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[59034,59035],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59154,59163],"content":"ReadAsync","needQuote":true,"nodes":[{"content":"ReadAsync","pos":[0,9]}]},{"pos":[59219,59220],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59268,59272],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[59330,59332],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[59361,59362]},{"pos":[59416,59421],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[59481,59482]},{"pos":[59536,59541],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[59600,59601],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59960,59971],"content":"Task<Int32>","needQuote":true,"nodes":[{"content":"Task&lt;Int32&gt;","pos":[0,11],"source":"Task<Int32>"}]},{"pos":[60176,60180],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[60254,60255],"content":"<","needQuote":true,"nodes":[]},{"pos":[60304,60309],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[60450,60454],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[60529,60532]},{"pos":[60588,60593],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[60652,60653],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60854,60867],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[61064,61068],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[61121,61122],"content":"<","needQuote":true,"nodes":[]},{"pos":[61149,61156],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[61271,61275],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[61329,61332]},{"pos":[61366,61373],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[61406,61407],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61593,61615],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[61865,61896],"content":"ReadBlock(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadBlock(Char[], Int32, Int32)","pos":[0,31]}]},{"pos":[62221,62230],"content":"ReadBlock","needQuote":true,"nodes":[{"content":"ReadBlock","pos":[0,9]}]},{"pos":[62286,62287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62335,62339],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[62398,62400]},{"content":",","pos":[62432,62433]},{"pos":[62487,62492],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[62552,62553]},{"pos":[62607,62612],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[62671,62672],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62791,62800],"content":"ReadBlock","needQuote":true,"nodes":[{"content":"ReadBlock","pos":[0,9]}]},{"pos":[62856,62857],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62905,62909],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[62967,62969],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[62998,62999]},{"pos":[63053,63058],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[63118,63119]},{"pos":[63173,63178],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63237,63238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63605,63641],"content":"ReadBlockAsync(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadBlockAsync(Char[], Int32, Int32)","pos":[0,36]}]},{"pos":[63986,64000],"content":"ReadBlockAsync","needQuote":true,"nodes":[{"content":"ReadBlockAsync","pos":[0,14]}]},{"pos":[64061,64062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64110,64114],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[64173,64175]},{"content":",","pos":[64207,64208]},{"pos":[64262,64267],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[64327,64328]},{"pos":[64382,64387],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64446,64447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64571,64585],"content":"ReadBlockAsync","needQuote":true,"nodes":[{"content":"ReadBlockAsync","pos":[0,14]}]},{"pos":[64646,64647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64695,64699],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[64757,64759],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[64788,64789]},{"pos":[64843,64848],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[64908,64909]},{"pos":[64963,64968],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[65027,65028],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65364,65374],"content":"ReadLine()","needQuote":true,"nodes":[{"content":"ReadLine()","pos":[0,10]}]},{"pos":[65483,65491],"content":"ReadLine","needQuote":true,"nodes":[{"content":"ReadLine","pos":[0,8]}]},{"pos":[65546,65547],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65574,65575],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65652,65660],"content":"ReadLine","needQuote":true,"nodes":[{"content":"ReadLine","pos":[0,8]}]},{"pos":[65715,65716],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65743,65744],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65910,65916],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[66096,66111],"content":"ReadLineAsync()","needQuote":true,"nodes":[{"content":"ReadLineAsync()","pos":[0,15]}]},{"pos":[66230,66243],"content":"ReadLineAsync","needQuote":true,"nodes":[{"content":"ReadLineAsync","pos":[0,13]}]},{"pos":[66303,66304],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66331,66332],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66414,66427],"content":"ReadLineAsync","needQuote":true,"nodes":[{"content":"ReadLineAsync","pos":[0,13]}]},{"pos":[66487,66488],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66515,66516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66761,66773],"content":"Task<String>","needQuote":true,"nodes":[{"content":"Task&lt;String&gt;","pos":[0,12],"source":"Task<String>"}]},{"pos":[66981,66985],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[67059,67060],"content":"<","needQuote":true,"nodes":[]},{"pos":[67110,67116],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[67258,67262],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[67337,67340]},{"pos":[67397,67403],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[67463,67464],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67700,67711],"content":"ReadToEnd()","needQuote":true,"nodes":[{"content":"ReadToEnd()","pos":[0,11]}]},{"pos":[67822,67831],"content":"ReadToEnd","needQuote":true,"nodes":[{"content":"ReadToEnd","pos":[0,9]}]},{"pos":[67887,67888],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67915,67916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67994,68003],"content":"ReadToEnd","needQuote":true,"nodes":[{"content":"ReadToEnd","pos":[0,9]}]},{"pos":[68059,68060],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68087,68088],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68292,68308],"content":"ReadToEndAsync()","needQuote":true,"nodes":[{"content":"ReadToEndAsync()","pos":[0,16]}]},{"pos":[68429,68443],"content":"ReadToEndAsync","needQuote":true,"nodes":[{"content":"ReadToEndAsync","pos":[0,14]}]},{"pos":[68504,68505],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68532,68533],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68616,68630],"content":"ReadToEndAsync","needQuote":true,"nodes":[{"content":"ReadToEndAsync","pos":[0,14]}]},{"pos":[68691,68692],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68719,68720],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68909,68926],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[69102,69123],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[69317,69344],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[69552,69575],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[69782,69793],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]},{"pos":[69978,70003],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[70202,70222],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]}],"content":"items:\n- uid: System.IO.StreamReader\n  commentId: T:System.IO.StreamReader\n  id: StreamReader\n  parent: System.IO\n  children:\n  - System.IO.StreamReader.#ctor(System.IO.Stream)\n  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)\n  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)\n  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)\n  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)\n  - System.IO.StreamReader.BaseStream\n  - System.IO.StreamReader.CurrentEncoding\n  - System.IO.StreamReader.DiscardBufferedData\n  - System.IO.StreamReader.Dispose(System.Boolean)\n  - System.IO.StreamReader.EndOfStream\n  - System.IO.StreamReader.Null\n  - System.IO.StreamReader.Peek\n  - System.IO.StreamReader.Read\n  - System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)\n  - System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  - System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  - System.IO.StreamReader.ReadLine\n  - System.IO.StreamReader.ReadLineAsync\n  - System.IO.StreamReader.ReadToEnd\n  - System.IO.StreamReader.ReadToEndAsync\n  langs:\n  - csharp\n  - vb\n  name: StreamReader\n  fullName: System.IO.StreamReader\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StreamReader\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 31\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Implements a <xref href=\\\"System.IO.TextReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that reads characters from a byte stream in a particular encoding.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class StreamReader : TextReader, IDisposable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class StreamReader\n          Inherits TextReader\n          Implements IDisposable\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  - type: System.IO.Stream\n    commentId: T:System.IO.Stream\n  - type: System.IO.StreamWriter\n    commentId: T:System.IO.StreamWriter\n  inheritance:\n  - System.Object\n  - System.IO.TextReader\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.IO.TextReader.Dispose\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: StreamReader\n- uid: System.IO.StreamReader.Null\n  commentId: F:System.IO.StreamReader.Null\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  fullName: System.IO.StreamReader.Null\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 36\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>A <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object around an empty stream.</p>\\n\"\n  syntax:\n    content: public static readonly StreamReader Null\n    content.vb: Public Shared ReadOnly Null As StreamReader\n    return:\n      type: System.IO.StreamReader\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: StreamReader.Null\n- uid: System.IO.StreamReader.#ctor(System.IO.Stream)\n  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream)\n  id: '#ctor(System.IO.Stream)'\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: StreamReader(Stream)\n  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 130\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified stream.</p>\\n\"\n  syntax:\n    content: public StreamReader(Stream stream)\n    content.vb: Public Sub New(stream As Stream)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to be read. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>stream</em> does not support reading. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StreamReader.StreamReader(Stream)\n- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)\n  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)\n  id: '#ctor(System.IO.Stream,System.Boolean)'\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: StreamReader(Stream, Boolean)\n  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 134\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified stream, with the specified byte order mark detection option.</p>\\n\"\n  syntax:\n    content: public StreamReader(Stream stream, bool detectEncodingFromByteOrderMarks)\n    content.vb: Public Sub New(stream As Stream, detectEncodingFromByteOrderMarks As Boolean)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to be read. </p>\\n\"\n    - id: detectEncodingFromByteOrderMarks\n      type: System.Boolean\n      description: \"\\n<p>Indicates whether to look for byte order marks at the beginning of the file. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>stream</em> does not support reading. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StreamReader.StreamReader(Stream, Boolean)\n- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)\n  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)\n  id: '#ctor(System.IO.Stream,System.Text.Encoding)'\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: StreamReader(Stream, Encoding)\n  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 138\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified stream, with the specified character encoding.</p>\\n\"\n  syntax:\n    content: public StreamReader(Stream stream, Encoding encoding)\n    content.vb: Public Sub New(stream As Stream, encoding As Encoding)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to be read. </p>\\n\"\n    - id: encoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The character encoding to use. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>stream</em> does not support reading. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> or <em>encoding</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StreamReader.StreamReader(Stream, Encoding)\n- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)'\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: StreamReader(Stream, Encoding, Boolean)\n  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 142\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified stream, with the specified character encoding and byte order mark detection option.</p>\\n\"\n  syntax:\n    content: public StreamReader(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks)\n    content.vb: Public Sub New(stream As Stream, encoding As Encoding, detectEncodingFromByteOrderMarks As Boolean)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to be read. </p>\\n\"\n    - id: encoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The character encoding to use. </p>\\n\"\n    - id: detectEncodingFromByteOrderMarks\n      type: System.Boolean\n      description: \"\\n<p>Indicates whether to look for byte order marks at the beginning of the file. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>stream</em> does not support reading. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> or <em>encoding</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StreamReader.StreamReader(Stream, Encoding, Boolean)\n- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)\n  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)\n  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)'\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: StreamReader(Stream, Encoding, Boolean, Int32)\n  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding, System.Boolean, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 156\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified stream, with the specified character encoding, byte order mark detection option, and buffer size.</p>\\n\"\n  syntax:\n    content: public StreamReader(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize)\n    content.vb: Public Sub New(stream As Stream, encoding As Encoding, detectEncodingFromByteOrderMarks As Boolean, bufferSize As Integer)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to be read. </p>\\n\"\n    - id: encoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The character encoding to use. </p>\\n\"\n    - id: detectEncodingFromByteOrderMarks\n      type: System.Boolean\n      description: \"\\n<p>Indicates whether to look for byte order marks at the beginning of the file. </p>\\n\"\n    - id: bufferSize\n      type: System.Int32\n      description: \"\\n<p>The minimum buffer size. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The stream does not support reading. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>stream</em> or <em>encoding</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>bufferSize</em> is less than or equal to zero. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StreamReader.StreamReader(Stream, Encoding, Boolean, Int32)\n- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)\n  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)\n  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)'\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: StreamReader(Stream, Encoding, Boolean, Int32, Boolean)\n  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding, System.Boolean, System.Int32, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 160\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified stream based on the specified character encoding, byte order mark detection option, and buffer size, and optionally leaves the stream open.</p>\\n\"\n  syntax:\n    content: public StreamReader(Stream stream, Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen)\n    content.vb: Public Sub New(stream As Stream, encoding As Encoding, detectEncodingFromByteOrderMarks As Boolean, bufferSize As Integer, leaveOpen As Boolean)\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to read.</p>\\n\"\n    - id: encoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The character encoding to use.</p>\\n\"\n    - id: detectEncodingFromByteOrderMarks\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to look for byte order marks at the beginning of the file; otherwise, <strong>false</strong>.</p>\\n\"\n    - id: bufferSize\n      type: System.Int32\n      description: \"\\n<p>The minimum buffer size.</p>\\n\"\n    - id: leaveOpen\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to leave the stream open after the <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is disposed; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StreamReader.StreamReader(Stream, Encoding, Boolean, Int32, Boolean)\n- uid: System.IO.StreamReader.BaseStream\n  commentId: P:System.IO.StreamReader.BaseStream\n  id: BaseStream\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: BaseStream\n  fullName: System.IO.StreamReader.BaseStream\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BaseStream\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 283\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Returns the underlying stream.</p>\\n\"\n  syntax:\n    content: public virtual Stream BaseStream { get; }\n    content.vb: Public Overridable ReadOnly Property BaseStream As Stream\n    parameters: []\n    return:\n      type: System.IO.Stream\n      description: \"\\n<p>The underlying stream.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: StreamReader.BaseStream\n- uid: System.IO.StreamReader.CurrentEncoding\n  commentId: P:System.IO.StreamReader.CurrentEncoding\n  id: CurrentEncoding\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: CurrentEncoding\n  fullName: System.IO.StreamReader.CurrentEncoding\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentEncoding\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 279\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets the current character encoding that the current <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is using.</p>\\n\"\n  syntax:\n    content: public virtual Encoding CurrentEncoding { get; }\n    content.vb: Public Overridable ReadOnly Property CurrentEncoding As Encoding\n    parameters: []\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>The current character encoding used by the current reader. The value can be different after the first call to any <xref href=\\\"System.IO.StreamReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method of <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, since encoding autodetection is not done until the first call to a <xref href=\\\"System.IO.StreamReader.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: StreamReader.CurrentEncoding\n- uid: System.IO.StreamReader.EndOfStream\n  commentId: P:System.IO.StreamReader.EndOfStream\n  id: EndOfStream\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: EndOfStream\n  fullName: System.IO.StreamReader.EndOfStream\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EndOfStream\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 313\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Gets a value that indicates whether the current stream position is at the end of the stream.</p>\\n\"\n  syntax:\n    content: public bool EndOfStream { get; }\n    content.vb: Public ReadOnly Property EndOfStream As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current stream position is at the end of the stream; otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The underlying stream has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: StreamReader.EndOfStream\n- uid: System.IO.StreamReader.DiscardBufferedData\n  commentId: M:System.IO.StreamReader.DiscardBufferedData\n  id: DiscardBufferedData\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: DiscardBufferedData()\n  fullName: System.IO.StreamReader.DiscardBufferedData()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DiscardBufferedData\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 298\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Clears the internal buffer.</p>\\n\"\n  syntax:\n    content: public void DiscardBufferedData()\n    content.vb: Public Sub DiscardBufferedData\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StreamReader.DiscardBufferedData()\n- uid: System.IO.StreamReader.Dispose(System.Boolean)\n  commentId: M:System.IO.StreamReader.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.IO.StreamReader.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 254\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Closes the underlying stream, releases the unmanaged resources used by the <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  overridden: System.IO.TextReader.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: StreamReader.Dispose(Boolean)\n- uid: System.IO.StreamReader.Peek\n  commentId: M:System.IO.StreamReader.Peek\n  id: Peek\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: Peek()\n  fullName: System.IO.StreamReader.Peek()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Peek\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 329\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Returns the next available character but does not consume it.</p>\\n\"\n  syntax:\n    content: public override int Peek()\n    content.vb: Public Overrides Function Peek As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer representing the next character to be read, or -1 if there are no characters to be read or if the stream does not support seeking.</p>\\n\"\n  overridden: System.IO.TextReader.Peek\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StreamReader.Peek()\n- uid: System.IO.StreamReader.Read\n  commentId: M:System.IO.StreamReader.Read\n  id: Read\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: Read()\n  fullName: System.IO.StreamReader.Read()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 343\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads the next character from the input stream and advances the character position by one character.</p>\\n\"\n  syntax:\n    content: public override int Read()\n    content.vb: Public Overrides Function Read As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The next character from the input stream represented as an <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, or -1 if no more characters are available.</p>\\n\"\n  overridden: System.IO.TextReader.Read\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StreamReader.Read()\n- uid: System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)\n  id: Read(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: Read(Char[], Int32, Int32)\n  fullName: System.IO.StreamReader.Read(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 357\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a specified maximum of characters from the current stream into a buffer, beginning at the specified index.</p>\\n\"\n  syntax:\n    content: public override int Read([In, Out] char[] buffer, int index, int count)\n    content.vb: Public Overrides Function Read(buffer As Char(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index + count - 1</em>) replaced by the characters read from the current source. </p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of <em>buffer</em> at which to begin writing. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters that have been read, or 0 if at the end of the stream and no data was read. The number will be less than or equal to the <em>count</em> parameter, depending on whether the data is available within the stream.</p>\\n\"\n  overridden: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs, such as the stream is closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.IO.StreamReader.Read(System.Char(), System.Int32, System.Int32)\n  name.vb: Read(Char(), Int32, Int32)\n  nameWithType: StreamReader.Read(Char[], Int32, Int32)\n  nameWithType.vb: StreamReader.Read(Char(), Int32, Int32)\n- uid: System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  id: ReadAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: ReadAsync(Char[], Int32, Int32)\n  fullName: System.IO.StreamReader.ReadAsync(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadAsync\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 895\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a specified maximum number of characters from the current stream asynchronously and writes the data to a buffer, beginning at the specified index. </p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public override Task<int> ReadAsync(char[] buffer, int index, int count)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function ReadAsync(buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to read. If the end of the stream is reached before the specified number of characters is written into the buffer, the current method returns.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</p>\\n\"\n  overridden: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The reader is currently in use by a previous read operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.IO.StreamReader.ReadAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadAsync(Char(), Int32, Int32)\n  nameWithType: StreamReader.ReadAsync(Char[], Int32, Int32)\n  nameWithType.vb: StreamReader.ReadAsync(Char(), Int32, Int32)\n- uid: System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  id: ReadBlock(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: ReadBlock(Char[], Int32, Int32)\n  fullName: System.IO.StreamReader.ReadBlock(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadBlock\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 415\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a specified maximum number of characters from the current stream and writes the data to a buffer, beginning at the specified index.</p>\\n\"\n  syntax:\n    content: public override int ReadBlock([In, Out] char[] buffer, int index, int count)\n    content.vb: Public Overrides Function ReadBlock(buffer As Char(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index + count - 1</em>) replaced by the characters read from the current source.</p>\\n\"\n      attributes:\n      - type: System.Runtime.InteropServices.InAttribute\n        ctor: System.Runtime.InteropServices.InAttribute.#ctor\n        arguments: []\n      - type: System.Runtime.InteropServices.OutAttribute\n        ctor: System.Runtime.InteropServices.OutAttribute.#ctor\n        arguments: []\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to read.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters that have been read. The number will be less than or equal to <em>count</em>, depending on whether all input characters have been read.</p>\\n\"\n  overridden: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.IO.StreamReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is closed. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurred. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.IO.StreamReader.ReadBlock(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadBlock(Char(), Int32, Int32)\n  nameWithType: StreamReader.ReadBlock(Char[], Int32, Int32)\n  nameWithType.vb: StreamReader.ReadBlock(Char(), Int32, Int32)\n- uid: System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  id: ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: ReadBlockAsync(Char[], Int32, Int32)\n  fullName: System.IO.StreamReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadBlockAsync\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 1083\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a specified maximum number of characters from the current stream asynchronously and writes the data to a buffer, beginning at the specified index.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public override Task<int> ReadBlockAsync(char[] buffer, int index, int count)\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function ReadBlockAsync(buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)\n    parameters:\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in <em>buffer</em> at which to begin writing.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to read. If the end of the stream is reached before the specified number of characters is written into the buffer, the method returns.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</p>\\n\"\n  overridden: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is negative.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The reader is currently in use by a previous read operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.IO.StreamReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadBlockAsync(Char(), Int32, Int32)\n  nameWithType: StreamReader.ReadBlockAsync(Char[], Int32, Int32)\n  nameWithType.vb: StreamReader.ReadBlockAsync(Char(), Int32, Int32)\n- uid: System.IO.StreamReader.ReadLine\n  commentId: M:System.IO.StreamReader.ReadLine\n  id: ReadLine\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: ReadLine()\n  fullName: System.IO.StreamReader.ReadLine()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadLine\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 733\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a line of characters from the current stream and returns the data as a string.</p>\\n\"\n  syntax:\n    content: public override string ReadLine()\n    content.vb: Public Overrides Function ReadLine As String\n    return:\n      type: System.String\n      description: \"\\n<p>The next line from the input stream, or <strong>null</strong> if the end of the input stream is reached.</p>\\n\"\n  overridden: System.IO.TextReader.ReadLine\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory to allocate a buffer for the returned string. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StreamReader.ReadLine()\n- uid: System.IO.StreamReader.ReadLineAsync\n  commentId: M:System.IO.StreamReader.ReadLineAsync\n  id: ReadLineAsync\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: ReadLineAsync()\n  fullName: System.IO.StreamReader.ReadLineAsync()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadLineAsync\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 777\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads a line of characters asynchronously from the current stream and returns the data as a string.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public override Task<string> ReadLineAsync()\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function ReadLineAsync As Task(Of String)\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the next line from the stream, or is <strong>null</strong> if all the characters have been read.</p>\\n\"\n  overridden: System.IO.TextReader.ReadLineAsync\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The number of characters in the next line is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The reader is currently in use by a previous read operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StreamReader.ReadLineAsync()\n- uid: System.IO.StreamReader.ReadToEnd\n  commentId: M:System.IO.StreamReader.ReadToEnd\n  id: ReadToEnd\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: ReadToEnd()\n  fullName: System.IO.StreamReader.ReadToEnd()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadToEnd\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 397\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads all characters from the current position to the end of the stream.</p>\\n\"\n  syntax:\n    content: public override string ReadToEnd()\n    content.vb: Public Overrides Function ReadToEnd As String\n    return:\n      type: System.String\n      description: \"\\n<p>The rest of the stream as a string, from the current position to the end. If the current position is at the end of the stream, returns an empty string (\\\"\\\").</p>\\n\"\n  overridden: System.IO.TextReader.ReadToEnd\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory to allocate a buffer for the returned string. </p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StreamReader.ReadToEnd()\n- uid: System.IO.StreamReader.ReadToEndAsync\n  commentId: M:System.IO.StreamReader.ReadToEndAsync\n  id: ReadToEndAsync\n  parent: System.IO.StreamReader\n  langs:\n  - csharp\n  - vb\n  name: ReadToEndAsync()\n  fullName: System.IO.StreamReader.ReadToEndAsync()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/StreamReader.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadToEndAsync\n    path: src/mscorlib/src/System/IO/StreamReader.cs\n    startLine: 858\n  assemblies:\n  - System.IO\n  namespace: System.IO\n  summary: \"\\n<p>Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(ExternalThreading = true)]\n\n      [ComVisible(false)]\n\n      public override Task<string> ReadToEndAsync()\n    content.vb: >-\n      <HostProtection(ExternalThreading:=True)>\n\n      <ComVisible(False)>\n\n      Public Overrides Function ReadToEndAsync As Task(Of String)\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"\\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains a string with the characters from the current position to the end of the stream.</p>\\n\"\n  overridden: System.IO.TextReader.ReadToEndAsync\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The number of characters is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The stream has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The reader is currently in use by a previous read operation. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StreamReader.ReadToEndAsync()\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IO.TextReader\n  parent: System.IO\n  isExternal: false\n  name: TextReader\n  fullName: System.IO.TextReader\n  nameWithType: TextReader\n  commentId: T:System.IO.TextReader\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.IO.TextReader.Dispose\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Dispose()\n  fullName: System.IO.TextReader.Dispose()\n  spec.csharp:\n  - uid: System.IO.TextReader.Dispose\n    name: Dispose\n    fullName: System.IO.TextReader.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.Dispose\n    name: Dispose\n    fullName: System.IO.TextReader.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.Dispose()\n  commentId: M:System.IO.TextReader.Dispose\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IO.StreamReader\n  parent: System.IO\n  isExternal: false\n  name: StreamReader\n  fullName: System.IO.StreamReader\n  nameWithType: StreamReader\n  commentId: T:System.IO.StreamReader\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  nameWithType: Stream\n  commentId: T:System.IO.Stream\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  nameWithType: Encoding\n  commentId: T:System.Text.Encoding\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.IO.TextReader.Dispose(System.Boolean)\n  parent: System.IO.TextReader\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.IO.TextReader.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.IO.TextReader.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.IO.TextReader.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.IO.TextReader.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextReader.Dispose(Boolean)\n  commentId: M:System.IO.TextReader.Dispose(System.Boolean)\n- uid: System.IO.TextReader.Peek\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Peek()\n  fullName: System.IO.TextReader.Peek()\n  spec.csharp:\n  - uid: System.IO.TextReader.Peek\n    name: Peek\n    fullName: System.IO.TextReader.Peek\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.Peek\n    name: Peek\n    fullName: System.IO.TextReader.Peek\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.Peek()\n  commentId: M:System.IO.TextReader.Peek\n- uid: System.IO.TextReader.Read\n  parent: System.IO.TextReader\n  isExternal: false\n  name: Read()\n  fullName: System.IO.TextReader.Read()\n  spec.csharp:\n  - uid: System.IO.TextReader.Read\n    name: Read\n    fullName: System.IO.TextReader.Read\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.Read\n    name: Read\n    fullName: System.IO.TextReader.Read\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.Read()\n  commentId: M:System.IO.TextReader.Read\n- uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: true\n  name: Read(Char[], Int32, Int32)\n  fullName: System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.IO.TextReader.Read(System.Char(), System.Int32, System.Int32)\n  name.vb: Read(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n    name: Read\n    fullName: System.IO.TextReader.Read\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n    name: Read\n    fullName: System.IO.TextReader.Read\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextReader.Read(Char[], Int32, Int32)\n  nameWithType.vb: TextReader.Read(Char(), Int32, Int32)\n  commentId: M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: true\n  name: ReadAsync(Char[], Int32, Int32)\n  fullName: System.IO.TextReader.ReadAsync(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.IO.TextReader.ReadAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadAsync(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n    name: ReadAsync\n    fullName: System.IO.TextReader.ReadAsync\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n    name: ReadAsync\n    fullName: System.IO.TextReader.ReadAsync\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadAsync(Char[], Int32, Int32)\n  nameWithType.vb: TextReader.ReadAsync(Char(), Int32, Int32)\n  commentId: M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)\n  name.vb: Task(Of Int32)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<Int32>\n  nameWithType.vb: Task(Of Int32)\n  commentId: T:System.Threading.Tasks.Task{System.Int32}\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: true\n  name: ReadBlock(Char[], Int32, Int32)\n  fullName: System.IO.TextReader.ReadBlock(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.IO.TextReader.ReadBlock(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadBlock(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n    name: ReadBlock\n    fullName: System.IO.TextReader.ReadBlock\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n    name: ReadBlock\n    fullName: System.IO.TextReader.ReadBlock\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadBlock(Char[], Int32, Int32)\n  nameWithType.vb: TextReader.ReadBlock(Char(), Int32, Int32)\n  commentId: M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\n- uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n  parent: System.IO.TextReader\n  isExternal: true\n  name: ReadBlockAsync(Char[], Int32, Int32)\n  fullName: System.IO.TextReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.IO.TextReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)\n  name.vb: ReadBlockAsync(Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n    name: ReadBlockAsync\n    fullName: System.IO.TextReader.ReadBlockAsync\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n    name: ReadBlockAsync\n    fullName: System.IO.TextReader.ReadBlockAsync\n  - name: (\n    fullName: (\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadBlockAsync(Char[], Int32, Int32)\n  nameWithType.vb: TextReader.ReadBlockAsync(Char(), Int32, Int32)\n  commentId: M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)\n- uid: System.IO.TextReader.ReadLine\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadLine()\n  fullName: System.IO.TextReader.ReadLine()\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadLine\n    name: ReadLine\n    fullName: System.IO.TextReader.ReadLine\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadLine\n    name: ReadLine\n    fullName: System.IO.TextReader.ReadLine\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadLine()\n  commentId: M:System.IO.TextReader.ReadLine\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.IO.TextReader.ReadLineAsync\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadLineAsync()\n  fullName: System.IO.TextReader.ReadLineAsync()\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadLineAsync\n    name: ReadLineAsync\n    fullName: System.IO.TextReader.ReadLineAsync\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadLineAsync\n    name: ReadLineAsync\n    fullName: System.IO.TextReader.ReadLineAsync\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadLineAsync()\n  commentId: M:System.IO.TextReader.ReadLineAsync\n- uid: System.Threading.Tasks.Task{System.String}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<String>\n  fullName: System.Threading.Tasks.Task<System.String>\n  fullname.vb: System.Threading.Tasks.Task(Of System.String)\n  name.vb: Task(Of String)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Task<String>\n  nameWithType.vb: Task(Of String)\n  commentId: T:System.Threading.Tasks.Task{System.String}\n- uid: System.IO.TextReader.ReadToEnd\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadToEnd()\n  fullName: System.IO.TextReader.ReadToEnd()\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadToEnd\n    name: ReadToEnd\n    fullName: System.IO.TextReader.ReadToEnd\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadToEnd\n    name: ReadToEnd\n    fullName: System.IO.TextReader.ReadToEnd\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadToEnd()\n  commentId: M:System.IO.TextReader.ReadToEnd\n- uid: System.IO.TextReader.ReadToEndAsync\n  parent: System.IO.TextReader\n  isExternal: false\n  name: ReadToEndAsync()\n  fullName: System.IO.TextReader.ReadToEndAsync()\n  spec.csharp:\n  - uid: System.IO.TextReader.ReadToEndAsync\n    name: ReadToEndAsync\n    fullName: System.IO.TextReader.ReadToEndAsync\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IO.TextReader.ReadToEndAsync\n    name: ReadToEndAsync\n    fullName: System.IO.TextReader.ReadToEndAsync\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: TextReader.ReadToEndAsync()\n  commentId: M:System.IO.TextReader.ReadToEndAsync\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n"}