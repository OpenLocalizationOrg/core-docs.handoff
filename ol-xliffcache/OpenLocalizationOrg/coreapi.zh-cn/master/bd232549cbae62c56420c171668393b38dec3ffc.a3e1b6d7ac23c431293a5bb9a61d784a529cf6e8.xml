{"nodes":[{"pos":[1698,1703],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[3364,3385],"content":"DocumentOrderComparer","needQuote":true,"nodes":[{"content":"DocumentOrderComparer","pos":[0,21]}]},{"pos":[4696,4712],"content":"EqualityComparer","needQuote":true,"nodes":[{"content":"EqualityComparer","pos":[0,16]}]},{"pos":[5941,5949],"content":"NextNode","needQuote":true,"nodes":[{"content":"NextNode","pos":[0,8]}]},{"pos":[7020,7032],"content":"PreviousNode","needQuote":true,"nodes":[{"content":"PreviousNode","pos":[0,12]}]},{"pos":[8176,8196],"content":"AddAfterSelf(Object)","needQuote":true,"nodes":[{"content":"AddAfterSelf(Object)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A content object that contains simple content or a collection of content objects to be added after this node.&lt;/p&gt;\\n","pos":[8885,9005],"source":"\\n<p>A content object that contains simple content or a collection of content objects to be added after this node.</p>\\n"},{"content":"\\n&lt;p&gt;The parent is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9132,9179],"source":"\\n<p>The parent is <strong>null</strong>.</p>\\n"},{"pos":[9511,9533],"content":"AddAfterSelf(Object[])","needQuote":true,"nodes":[{"content":"AddAfterSelf(Object[])","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A parameter list of content objects.&lt;/p&gt;\\n","pos":[10248,10295],"source":"\\n<p>A parameter list of content objects.</p>\\n"},{"content":"\\n&lt;p&gt;The parent is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10422,10469],"source":"\\n<p>The parent is <strong>null</strong>.</p>\\n"},{"pos":[10949,10970],"content":"AddBeforeSelf(Object)","needQuote":true,"nodes":[{"content":"AddBeforeSelf(Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A content object that contains simple content or a collection of content objects to be added before this node.&lt;/p&gt;\\n","pos":[11664,11785],"source":"\\n<p>A content object that contains simple content or a collection of content objects to be added before this node.</p>\\n"},{"content":"\\n&lt;p&gt;The parent is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11912,11959],"source":"\\n<p>The parent is <strong>null</strong>.</p>\\n"},{"pos":[12295,12318],"content":"AddBeforeSelf(Object[])","needQuote":true,"nodes":[{"content":"AddBeforeSelf(Object[])","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A parameter list of content objects.&lt;/p&gt;\\n","pos":[13038,13085],"source":"\\n<p>A parameter list of content objects.</p>\\n"},{"content":"\\n&lt;p&gt;The parent is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13212,13259],"source":"\\n<p>The parent is <strong>null</strong>.</p>\\n"},{"pos":[13686,13697],"content":"Ancestors()","needQuote":true,"nodes":[{"content":"Ancestors()","pos":[0,11]}]},{"pos":[14984,15000],"content":"Ancestors(XName)","needQuote":true,"nodes":[{"content":"Ancestors(XName)","pos":[0,16]}]},{"pos":[17058,17092],"content":"CompareDocumentOrder(XNode, XNode)","needQuote":true,"nodes":[{"content":"CompareDocumentOrder(XNode, XNode)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;An &lt;strong&gt;int&lt;/strong&gt; containing 0 if the nodes are equal; -1 if &lt;em&gt;n1&lt;/em&gt; is before &lt;em&gt;n2&lt;/em&gt;; 1 if &lt;em&gt;n1&lt;/em&gt; is after &lt;em&gt;n2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[18247,18398],"source":"\\n<p>An <strong>int</strong> containing 0 if the nodes are equal; -1 if <em>n1</em> is before <em>n2</em>; 1 if <em>n1</em> is after <em>n2</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The two nodes do not share a common ancestor.&lt;/p&gt;\\n","pos":[18525,18581],"source":"\\n<p>The two nodes do not share a common ancestor.</p>\\n"},{"pos":[18898,18912],"content":"CreateReader()","needQuote":true,"nodes":[{"content":"CreateReader()","pos":[0,14]}]},{"pos":[20132,20159],"content":"CreateReader(ReaderOptions)","needQuote":true,"nodes":[{"content":"CreateReader(ReaderOptions)","pos":[0,27]}]},{"pos":[21787,21811],"content":"DeepEquals(XNode, XNode)","needQuote":true,"nodes":[{"content":"DeepEquals(XNode, XNode)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the nodes are equal; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22950,23042],"source":"\\n<p>\\n<strong>true</strong> if the nodes are equal; otherwise <strong>false</strong>.</p>\\n"},{"pos":[23364,23383],"content":"ElementsAfterSelf()","needQuote":true,"nodes":[{"content":"ElementsAfterSelf()","pos":[0,19]}]},{"pos":[24776,24800],"content":"ElementsAfterSelf(XName)","needQuote":true,"nodes":[{"content":"ElementsAfterSelf(XName)","pos":[0,24]}]},{"pos":[26678,26698],"content":"ElementsBeforeSelf()","needQuote":true,"nodes":[{"content":"ElementsBeforeSelf()","pos":[0,20]}]},{"pos":[28101,28126],"content":"ElementsBeforeSelf(XName)","needQuote":true,"nodes":[{"content":"ElementsBeforeSelf(XName)","pos":[0,25]}]},{"pos":[30047,30061],"content":"IsAfter(XNode)","needQuote":true,"nodes":[{"content":"IsAfter(XNode)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this node appears after the specified node; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30973,31088],"source":"\\n<p>\\n<strong>true</strong> if this node appears after the specified node; otherwise <strong>false</strong>.</p>\\n"},{"pos":[31420,31435],"content":"IsBefore(XNode)","needQuote":true,"nodes":[{"content":"IsBefore(XNode)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this node appears before the specified node; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32352,32468],"source":"\\n<p>\\n<strong>true</strong> if this node appears before the specified node; otherwise <strong>false</strong>.</p>\\n"},{"pos":[32750,32766],"content":"NodesAfterSelf()","needQuote":true,"nodes":[{"content":"NodesAfterSelf()","pos":[0,16]}]},{"pos":[34051,34068],"content":"NodesBeforeSelf()","needQuote":true,"nodes":[{"content":"NodesBeforeSelf()","pos":[0,17]}]},{"pos":[35405,35424],"content":"ReadFrom(XmlReader)","needQuote":true,"nodes":[{"content":"ReadFrom(XmlReader)","pos":[0,19]}]},{"pos":[37704,37712],"content":"Remove()","needQuote":true,"nodes":[{"content":"Remove()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The parent is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38355,38402],"source":"\\n<p>The parent is <strong>null</strong>.</p>\\n"},{"pos":[38713,38732],"content":"ReplaceWith(Object)","needQuote":true,"nodes":[{"content":"ReplaceWith(Object)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;Content that replaces this node.&lt;/p&gt;\\n","pos":[39408,39451],"source":"\\n<p>Content that replaces this node.</p>\\n"},{"pos":[39779,39800],"content":"ReplaceWith(Object[])","needQuote":true,"nodes":[{"content":"ReplaceWith(Object[])","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A parameter list of the new content.&lt;/p&gt;\\n","pos":[40502,40549],"source":"\\n<p>A parameter list of the new content.</p>\\n"},{"pos":[40965,40975],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[42088,42109],"content":"ToString(SaveOptions)","needQuote":true,"nodes":[{"content":"ToString(SaveOptions)","pos":[0,21]}]},{"pos":[43480,43498],"content":"WriteTo(XmlWriter)","needQuote":true,"nodes":[{"content":"WriteTo(XmlWriter)","pos":[0,18]}]},{"pos":[44578,44593],"content":"System.Xml.Linq","needQuote":true,"nodes":[{"content":"System.Xml.Linq","pos":[0,15]}]},{"pos":[44751,44757],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44921,44928],"content":"XObject","needQuote":true,"nodes":[{"content":"XObject","pos":[0,7]}]},{"pos":[45129,45136],"content":"BaseUri","needQuote":true,"nodes":[{"content":"BaseUri","pos":[0,7]}]},{"pos":[45362,45370],"content":"Document","needQuote":true,"nodes":[{"content":"Document","pos":[0,8]}]},{"pos":[45599,45607],"content":"NodeType","needQuote":true,"nodes":[{"content":"NodeType","pos":[0,8]}]},{"pos":[45834,45840],"content":"Parent","needQuote":true,"nodes":[{"content":"Parent","pos":[0,6]}]},{"pos":[46062,46069],"content":"Changed","needQuote":true,"nodes":[{"content":"Changed","pos":[0,7]}]},{"pos":[46295,46303],"content":"Changing","needQuote":true,"nodes":[{"content":"Changing","pos":[0,8]}]},{"pos":[46551,46572],"content":"AddAnnotation(Object)","needQuote":true,"nodes":[{"content":"AddAnnotation(Object)","pos":[0,21]}]},{"pos":[46725,46738],"content":"AddAnnotation","needQuote":true,"nodes":[{"content":"AddAnnotation","pos":[0,13]}]},{"pos":[46801,46802],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46852,46858],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46918,46919],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47019,47032],"content":"AddAnnotation","needQuote":true,"nodes":[{"content":"AddAnnotation","pos":[0,13]}]},{"pos":[47095,47096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47146,47152],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47212,47213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47460,47476],"content":"Annotation(Type)","needQuote":true,"nodes":[{"content":"Annotation(Type)","pos":[0,16]}]},{"pos":[47619,47629],"content":"Annotation","needQuote":true,"nodes":[{"content":"Annotation","pos":[0,10]}]},{"pos":[47689,47690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47738,47742],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[47800,47801],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47896,47906],"content":"Annotation","needQuote":true,"nodes":[{"content":"Annotation","pos":[0,10]}]},{"pos":[47966,47967],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48015,48019],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[48077,48078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48306,48321],"content":"Annotation<T>()","needQuote":true,"nodes":[{"content":"Annotation&lt;T&gt;()","pos":[0,15],"source":"Annotation<T>()"}]},{"pos":[48534,48547],"content":"Annotation<T>","needQuote":true,"nodes":[{"content":"Annotation&lt;T&gt;","pos":[0,13],"source":"Annotation<T>"}]},{"pos":[48610,48611],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48638,48639],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48724,48740],"content":"Annotation(Of T)","needQuote":true,"nodes":[{"content":"Annotation(Of T)","pos":[0,16]}]},{"pos":[48806,48807],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48834,48835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49108,49125],"content":"Annotations(Type)","needQuote":true,"nodes":[{"content":"Annotations(Type)","pos":[0,17]}]},{"pos":[49270,49281],"content":"Annotations","needQuote":true,"nodes":[{"content":"Annotations","pos":[0,11]}]},{"pos":[49342,49343],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49391,49395],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[49453,49454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49550,49561],"content":"Annotations","needQuote":true,"nodes":[{"content":"Annotations","pos":[0,11]}]},{"pos":[49622,49623],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49671,49675],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[49733,49734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49965,49981],"content":"Annotations<T>()","needQuote":true,"nodes":[{"content":"Annotations&lt;T&gt;()","pos":[0,16],"source":"Annotations<T>()"}]},{"pos":[50198,50212],"content":"Annotations<T>","needQuote":true,"nodes":[{"content":"Annotations&lt;T&gt;","pos":[0,14],"source":"Annotations<T>"}]},{"pos":[50276,50277],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50304,50305],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50391,50408],"content":"Annotations(Of T)","needQuote":true,"nodes":[{"content":"Annotations(Of T)","pos":[0,17]}]},{"pos":[50475,50476],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50503,50504],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50786,50809],"content":"RemoveAnnotations(Type)","needQuote":true,"nodes":[{"content":"RemoveAnnotations(Type)","pos":[0,23]}]},{"pos":[50966,50983],"content":"RemoveAnnotations","needQuote":true,"nodes":[{"content":"RemoveAnnotations","pos":[0,17]}]},{"pos":[51050,51051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51099,51103],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[51161,51162],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51264,51281],"content":"RemoveAnnotations","needQuote":true,"nodes":[{"content":"RemoveAnnotations","pos":[0,17]}]},{"pos":[51348,51349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51397,51401],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[51459,51460],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51709,51731],"content":"RemoveAnnotations<T>()","needQuote":true,"nodes":[{"content":"RemoveAnnotations&lt;T&gt;()","pos":[0,22],"source":"RemoveAnnotations<T>()"}]},{"pos":[51972,51992],"content":"RemoveAnnotations<T>","needQuote":true,"nodes":[{"content":"RemoveAnnotations&lt;T&gt;","pos":[0,20],"source":"RemoveAnnotations<T>"}]},{"pos":[52062,52063],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52090,52091],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52183,52206],"content":"RemoveAnnotations(Of T)","needQuote":true,"nodes":[{"content":"RemoveAnnotations(Of T)","pos":[0,23]}]},{"pos":[52279,52280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52307,52308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52527,52533],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[52702,52728],"content":"XNodeDocumentOrderComparer","needQuote":true,"nodes":[{"content":"XNodeDocumentOrderComparer","pos":[0,26]}]},{"pos":[52984,53005],"content":"XNodeEqualityComparer","needQuote":true,"nodes":[{"content":"XNodeEqualityComparer","pos":[0,21]}]},{"pos":[53230,53235],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[53360,53368],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[53496,53502],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[53563,53565]},{"pos":[53630,53636],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53696,53698],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[53941,53962],"content":"IEnumerable<XElement>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;XElement&gt;","pos":[0,21],"source":"IEnumerable<XElement>"}]},{"pos":[54234,54245],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[54330,54331],"content":"<","needQuote":true,"nodes":[]},{"pos":[54392,54400],"content":"XElement","needQuote":true,"nodes":[{"content":"XElement","pos":[0,8]}]},{"pos":[54543,54554],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[54640,54643]},{"pos":[54711,54719],"content":"XElement","needQuote":true,"nodes":[{"content":"XElement","pos":[0,8]}]},{"pos":[54769,54770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55025,55039],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[55258,55269],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[55333,55334],"content":"<","needQuote":true,"nodes":[]},{"pos":[55361,55362],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[55482,55493],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[55558,55561]},{"pos":[55595,55596],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[55623,55624],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55827,55853],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[56061,56066],"content":"XName","needQuote":true,"nodes":[{"content":"XName","pos":[0,5]}]},{"pos":[56225,56230],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[56383,56392],"content":"XmlReader","needQuote":true,"nodes":[{"content":"XmlReader","pos":[0,9]}]},{"pos":[56534,56544],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[56712,56725],"content":"ReaderOptions","needQuote":true,"nodes":[{"content":"ReaderOptions","pos":[0,13]}]},{"pos":[56910,56917],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[57168,57186],"content":"IEnumerable<XNode>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;XNode&gt;","pos":[0,18],"source":"IEnumerable<XNode>"}]},{"pos":[57449,57460],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[57545,57546],"content":"<","needQuote":true,"nodes":[]},{"pos":[57604,57609],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[57749,57760],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[57846,57849]},{"pos":[57914,57919],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[57966,57967],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58203,58209],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[58377,58388],"content":"SaveOptions","needQuote":true,"nodes":[{"content":"SaveOptions","pos":[0,11]}]},{"pos":[58577,58586],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[58767,58792],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[58987,58999],"content":"XmlException","needQuote":true,"nodes":[{"content":"XmlException","pos":[0,12]}]}],"content":"items:\n- uid: System.Xml.Linq.XNode\n  commentId: T:System.Xml.Linq.XNode\n  id: XNode\n  parent: System.Xml.Linq\n  children:\n  - System.Xml.Linq.XNode.AddAfterSelf(System.Object)\n  - System.Xml.Linq.XNode.AddAfterSelf(System.Object[])\n  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object)\n  - System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])\n  - System.Xml.Linq.XNode.Ancestors\n  - System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)\n  - System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.CreateReader\n  - System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)\n  - System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.DocumentOrderComparer\n  - System.Xml.Linq.XNode.ElementsAfterSelf\n  - System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)\n  - System.Xml.Linq.XNode.ElementsBeforeSelf\n  - System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)\n  - System.Xml.Linq.XNode.EqualityComparer\n  - System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)\n  - System.Xml.Linq.XNode.NextNode\n  - System.Xml.Linq.XNode.NodesAfterSelf\n  - System.Xml.Linq.XNode.NodesBeforeSelf\n  - System.Xml.Linq.XNode.PreviousNode\n  - System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)\n  - System.Xml.Linq.XNode.Remove\n  - System.Xml.Linq.XNode.ReplaceWith(System.Object)\n  - System.Xml.Linq.XNode.ReplaceWith(System.Object[])\n  - System.Xml.Linq.XNode.ToString\n  - System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)\n  - System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)\n  langs:\n  - csharp\n  - vb\n  name: XNode\n  fullName: System.Xml.Linq.XNode\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XNode\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 341\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.  </p>\\n\"\n  syntax:\n    content: 'public abstract class XNode : XObject'\n    content.vb: >-\n      Public MustInherit Class XNode\n          Inherits XObject\n  inheritance:\n  - System.Object\n  - System.Xml.Linq.XObject\n  inheritedMembers:\n  - System.Xml.Linq.XObject.BaseUri\n  - System.Xml.Linq.XObject.Document\n  - System.Xml.Linq.XObject.NodeType\n  - System.Xml.Linq.XObject.Parent\n  - System.Xml.Linq.XObject.Changed\n  - System.Xml.Linq.XObject.Changing\n  - System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  - System.Xml.Linq.XObject.Annotation(System.Type)\n  - System.Xml.Linq.XObject.Annotation``1\n  - System.Xml.Linq.XObject.Annotations(System.Type)\n  - System.Xml.Linq.XObject.Annotations``1\n  - System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  - System.Xml.Linq.XObject.RemoveAnnotations``1\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: XNode\n- uid: System.Xml.Linq.XNode.DocumentOrderComparer\n  commentId: P:System.Xml.Linq.XNode.DocumentOrderComparer\n  id: DocumentOrderComparer\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: DocumentOrderComparer\n  fullName: System.Xml.Linq.XNode.DocumentOrderComparer\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DocumentOrderComparer\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 344\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets a comparer that can compare the relative position of two nodes.</p>\\n\"\n  syntax:\n    content: public static XNodeDocumentOrderComparer DocumentOrderComparer { get; }\n    content.vb: Public Shared ReadOnly Property DocumentOrderComparer As XNodeDocumentOrderComparer\n    parameters: []\n    return:\n      type: System.Xml.Linq.XNodeDocumentOrderComparer\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XNodeDocumentOrderComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can compare the relative position of two nodes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: XNode.DocumentOrderComparer\n- uid: System.Xml.Linq.XNode.EqualityComparer\n  commentId: P:System.Xml.Linq.XNode.EqualityComparer\n  id: EqualityComparer\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: EqualityComparer\n  fullName: System.Xml.Linq.XNode.EqualityComparer\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EqualityComparer\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 345\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets a comparer that can compare two nodes for value equality.</p>\\n\"\n  syntax:\n    content: public static XNodeEqualityComparer EqualityComparer { get; }\n    content.vb: Public Shared ReadOnly Property EqualityComparer As XNodeEqualityComparer\n    parameters: []\n    return:\n      type: System.Xml.Linq.XNodeEqualityComparer\n      description: \"\\n<p>A <xref href=\\\"System.Xml.Linq.XNodeEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can compare two nodes for value equality.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: XNode.EqualityComparer\n- uid: System.Xml.Linq.XNode.NextNode\n  commentId: P:System.Xml.Linq.XNode.NextNode\n  id: NextNode\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: NextNode\n  fullName: System.Xml.Linq.XNode.NextNode\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NextNode\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 346\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets the next sibling node of this node.</p>\\n\"\n  syntax:\n    content: public XNode NextNode { get; }\n    content.vb: Public ReadOnly Property NextNode As XNode\n    parameters: []\n    return:\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the next sibling node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XNode.NextNode\n- uid: System.Xml.Linq.XNode.PreviousNode\n  commentId: P:System.Xml.Linq.XNode.PreviousNode\n  id: PreviousNode\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: PreviousNode\n  fullName: System.Xml.Linq.XNode.PreviousNode\n  type: Property\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PreviousNode\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 347\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Gets the previous sibling node of this node.</p>\\n\"\n  syntax:\n    content: public XNode PreviousNode { get; }\n    content.vb: Public ReadOnly Property PreviousNode As XNode\n    parameters: []\n    return:\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the previous sibling node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: XNode.PreviousNode\n- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object)\n  commentId: M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)\n  id: AddAfterSelf(System.Object)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: AddAfterSelf(Object)\n  fullName: System.Xml.Linq.XNode.AddAfterSelf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddAfterSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 348\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Adds the specified content immediately after this node.</p>\\n\"\n  syntax:\n    content: public void AddAfterSelf(object content)\n    content.vb: Public Sub AddAfterSelf(content As Object)\n    parameters:\n    - id: content\n      type: System.Object\n      description: \"\\n<p>A content object that contains simple content or a collection of content objects to be added after this node.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The parent is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.AddAfterSelf(Object)\n- uid: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])\n  commentId: M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])\n  id: AddAfterSelf(System.Object[])\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: AddAfterSelf(Object[])\n  fullName: System.Xml.Linq.XNode.AddAfterSelf(System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddAfterSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 349\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Adds the specified content immediately after this node.</p>\\n\"\n  syntax:\n    content: public void AddAfterSelf(params object[] content)\n    content.vb: Public Sub AddAfterSelf(ParamArray content As Object())\n    parameters:\n    - id: content\n      type: System.Object[]\n      description: \"\\n<p>A parameter list of content objects.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The parent is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Xml.Linq.XNode.AddAfterSelf(System.Object())\n  name.vb: AddAfterSelf(Object())\n  nameWithType: XNode.AddAfterSelf(Object[])\n  nameWithType.vb: XNode.AddAfterSelf(Object())\n- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)\n  commentId: M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)\n  id: AddBeforeSelf(System.Object)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: AddBeforeSelf(Object)\n  fullName: System.Xml.Linq.XNode.AddBeforeSelf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddBeforeSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 350\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Adds the specified content immediately before this node.</p>\\n\"\n  syntax:\n    content: public void AddBeforeSelf(object content)\n    content.vb: Public Sub AddBeforeSelf(content As Object)\n    parameters:\n    - id: content\n      type: System.Object\n      description: \"\\n<p>A content object that contains simple content or a collection of content objects to be added before this node.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The parent is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.AddBeforeSelf(Object)\n- uid: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])\n  commentId: M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])\n  id: AddBeforeSelf(System.Object[])\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: AddBeforeSelf(Object[])\n  fullName: System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddBeforeSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 351\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Adds the specified content immediately before this node.</p>\\n\"\n  syntax:\n    content: public void AddBeforeSelf(params object[] content)\n    content.vb: Public Sub AddBeforeSelf(ParamArray content As Object())\n    parameters:\n    - id: content\n      type: System.Object[]\n      description: \"\\n<p>A parameter list of content objects.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The parent is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Xml.Linq.XNode.AddBeforeSelf(System.Object())\n  name.vb: AddBeforeSelf(Object())\n  nameWithType: XNode.AddBeforeSelf(Object[])\n  nameWithType.vb: XNode.AddBeforeSelf(Object())\n- uid: System.Xml.Linq.XNode.Ancestors\n  commentId: M:System.Xml.Linq.XNode.Ancestors\n  id: Ancestors\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: Ancestors()\n  fullName: System.Xml.Linq.XNode.Ancestors()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Ancestors\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 352\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of the ancestor elements of this node.</p>\\n\"\n  syntax:\n    content: public IEnumerable<XElement> Ancestors()\n    content.vb: Public Function Ancestors As IEnumerable(Of XElement)\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the ancestor elements of this node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.Ancestors()\n- uid: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)\n  id: Ancestors(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: Ancestors(XName)\n  fullName: System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Ancestors\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 353\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a filtered collection of the ancestor elements of this node. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  syntax:\n    content: public IEnumerable<XElement> Ancestors(XName name)\n    content.vb: Public Function Ancestors(name As XName) As IEnumerable(Of XElement)\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to match.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the ancestor elements of this node. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n<p>The nodes in the returned collection are in reverse document order.</p>\\n<p>This method uses deferred execution.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.Ancestors(XName)\n- uid: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  commentId: M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  id: CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: CompareDocumentOrder(XNode, XNode)\n  fullName: System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode, System.Xml.Linq.XNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CompareDocumentOrder\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 354\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Compares two nodes to determine their relative XML document order.</p>\\n\"\n  syntax:\n    content: public static int CompareDocumentOrder(XNode n1, XNode n2)\n    content.vb: Public Shared Function CompareDocumentOrder(n1 As XNode, n2 As XNode) As Integer\n    parameters:\n    - id: n1\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>First <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    - id: n2\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>Second <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An <strong>int</strong> containing 0 if the nodes are equal; -1 if <em>n1</em> is before <em>n2</em>; 1 if <em>n1</em> is after <em>n2</em>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The two nodes do not share a common ancestor.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XNode.CompareDocumentOrder(XNode, XNode)\n- uid: System.Xml.Linq.XNode.CreateReader\n  commentId: M:System.Xml.Linq.XNode.CreateReader\n  id: CreateReader\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: CreateReader()\n  fullName: System.Xml.Linq.XNode.CreateReader()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateReader\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 355\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for this node.</p>\\n\"\n  syntax:\n    content: public XmlReader CreateReader()\n    content.vb: Public Function CreateReader As XmlReader\n    return:\n      type: System.Xml.XmlReader\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to read this node and its descendants.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.CreateReader()\n- uid: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)\n  commentId: M:System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)\n  id: CreateReader(System.Xml.Linq.ReaderOptions)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: CreateReader(ReaderOptions)\n  fullName: System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateReader\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 356\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the options specified by the <em>readerOptions</em> parameter.</p>\\n\"\n  syntax:\n    content: public XmlReader CreateReader(ReaderOptions readerOptions)\n    content.vb: Public Function CreateReader(readerOptions As ReaderOptions) As XmlReader\n    parameters:\n    - id: readerOptions\n      type: System.Xml.Linq.ReaderOptions\n      description: \"\\n<p>A <xref href=\\\"System.Xml.Linq.ReaderOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that specifies whether to omit duplicate namespaces.</p>\\n\"\n    return:\n      type: System.Xml.XmlReader\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.CreateReader(ReaderOptions)\n- uid: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  commentId: M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  id: DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: DeepEquals(XNode, XNode)\n  fullName: System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode, System.Xml.Linq.XNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DeepEquals\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 357\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Compares the values of two nodes, including the values of all descendant nodes.</p>\\n\"\n  syntax:\n    content: public static bool DeepEquals(XNode n1, XNode n2)\n    content.vb: Public Shared Function DeepEquals(n1 As XNode, n2 As XNode) As Boolean\n    parameters:\n    - id: n1\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The first <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    - id: n2\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The second <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the nodes are equal; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XNode.DeepEquals(XNode, XNode)\n- uid: System.Xml.Linq.XNode.ElementsAfterSelf\n  commentId: M:System.Xml.Linq.XNode.ElementsAfterSelf\n  id: ElementsAfterSelf\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: ElementsAfterSelf()\n  fullName: System.Xml.Linq.XNode.ElementsAfterSelf()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElementsAfterSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 358\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of the sibling elements after this node, in document order.</p>\\n\"\n  syntax:\n    content: public IEnumerable<XElement> ElementsAfterSelf()\n    content.vb: Public Function ElementsAfterSelf As IEnumerable(Of XElement)\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the sibling elements after this node, in document order.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.ElementsAfterSelf()\n- uid: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)\n  id: ElementsAfterSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: ElementsAfterSelf(XName)\n  fullName: System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElementsAfterSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 359\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a filtered collection of the sibling elements after this node, in document order. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  syntax:\n    content: public IEnumerable<XElement> ElementsAfterSelf(XName name)\n    content.vb: Public Function ElementsAfterSelf(name As XName) As IEnumerable(Of XElement)\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to match.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the sibling elements after this node, in document order. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.ElementsAfterSelf(XName)\n- uid: System.Xml.Linq.XNode.ElementsBeforeSelf\n  commentId: M:System.Xml.Linq.XNode.ElementsBeforeSelf\n  id: ElementsBeforeSelf\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: ElementsBeforeSelf()\n  fullName: System.Xml.Linq.XNode.ElementsBeforeSelf()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElementsBeforeSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 360\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of the sibling elements before this node, in document order.</p>\\n\"\n  syntax:\n    content: public IEnumerable<XElement> ElementsBeforeSelf()\n    content.vb: Public Function ElementsBeforeSelf As IEnumerable(Of XElement)\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the sibling elements before this node, in document order.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.ElementsBeforeSelf()\n- uid: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)\n  id: ElementsBeforeSelf(System.Xml.Linq.XName)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: ElementsBeforeSelf(XName)\n  fullName: System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElementsBeforeSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 361\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a filtered collection of the sibling elements before this node, in document order. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  syntax:\n    content: public IEnumerable<XElement> ElementsBeforeSelf(XName name)\n    content.vb: Public Function ElementsBeforeSelf(name As XName) As IEnumerable(Of XElement)\n    parameters:\n    - id: name\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to match.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the sibling elements before this node, in document order. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.ElementsBeforeSelf(XName)\n- uid: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)\n  commentId: M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)\n  id: IsAfter(System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: IsAfter(XNode)\n  fullName: System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAfter\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 362\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Determines if the current node appears after a specified node in terms of document order.</p>\\n\"\n  syntax:\n    content: public bool IsAfter(XNode node)\n    content.vb: Public Function IsAfter(node As XNode) As Boolean\n    parameters:\n    - id: node\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare for document order.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this node appears after the specified node; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.IsAfter(XNode)\n- uid: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)\n  commentId: M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)\n  id: IsBefore(System.Xml.Linq.XNode)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: IsBefore(XNode)\n  fullName: System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsBefore\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 363\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Determines if the current node appears before a specified node in terms of document order.</p>\\n\"\n  syntax:\n    content: public bool IsBefore(XNode node)\n    content.vb: Public Function IsBefore(node As XNode) As Boolean\n    parameters:\n    - id: node\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare for document order.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this node appears before the specified node; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.IsBefore(XNode)\n- uid: System.Xml.Linq.XNode.NodesAfterSelf\n  commentId: M:System.Xml.Linq.XNode.NodesAfterSelf\n  id: NodesAfterSelf\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: NodesAfterSelf()\n  fullName: System.Xml.Linq.XNode.NodesAfterSelf()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodesAfterSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 364\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of the sibling nodes after this node, in document order.</p>\\n\"\n  syntax:\n    content: public IEnumerable<XNode> NodesAfterSelf()\n    content.vb: Public Function NodesAfterSelf As IEnumerable(Of XNode)\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the sibling nodes after this node, in document order.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.NodesAfterSelf()\n- uid: System.Xml.Linq.XNode.NodesBeforeSelf\n  commentId: M:System.Xml.Linq.XNode.NodesBeforeSelf\n  id: NodesBeforeSelf\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: NodesBeforeSelf()\n  fullName: System.Xml.Linq.XNode.NodesBeforeSelf()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NodesBeforeSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 365\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of the sibling nodes before this node, in document order.</p>\\n\"\n  syntax:\n    content: public IEnumerable<XNode> NodesBeforeSelf()\n    content.vb: Public Function NodesBeforeSelf As IEnumerable(Of XNode)\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the sibling nodes before this node, in document order.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.NodesBeforeSelf()\n- uid: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)\n  commentId: M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)\n  id: ReadFrom(System.Xml.XmlReader)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: ReadFrom(XmlReader)\n  fullName: System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReadFrom\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 366\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Creates an <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static XNode ReadFrom(XmlReader reader)\n    content.vb: Public Shared Function ReadFrom(reader As XmlReader) As XNode\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> positioned at the node to read into this <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Xml.Linq.XNode\n      description: \"\\n<p>An <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the node and its descendant nodes that were read from the reader. The runtime type of the node is determined by the node type (<xref href=\\\"System.Xml.Linq.XObject.NodeType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>) of the first node encountered in the reader.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not positioned on a recognized node type.</p>\\n\"\n  - type: System.Xml.XmlException\n    commentId: T:System.Xml.XmlException\n    description: \"\\n<p>The underlying <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> throws an exception.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XNode.ReadFrom(XmlReader)\n- uid: System.Xml.Linq.XNode.Remove\n  commentId: M:System.Xml.Linq.XNode.Remove\n  id: Remove\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: Remove()\n  fullName: System.Xml.Linq.XNode.Remove()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 367\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Removes this node from its parent.</p>\\n\"\n  syntax:\n    content: public void Remove()\n    content.vb: Public Sub Remove\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The parent is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.Remove()\n- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object)\n  commentId: M:System.Xml.Linq.XNode.ReplaceWith(System.Object)\n  id: ReplaceWith(System.Object)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: ReplaceWith(Object)\n  fullName: System.Xml.Linq.XNode.ReplaceWith(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReplaceWith\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 368\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Replaces this node with the specified content.</p>\\n\"\n  syntax:\n    content: public void ReplaceWith(object content)\n    content.vb: Public Sub ReplaceWith(content As Object)\n    parameters:\n    - id: content\n      type: System.Object\n      description: \"\\n<p>Content that replaces this node.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.ReplaceWith(Object)\n- uid: System.Xml.Linq.XNode.ReplaceWith(System.Object[])\n  commentId: M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])\n  id: ReplaceWith(System.Object[])\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: ReplaceWith(Object[])\n  fullName: System.Xml.Linq.XNode.ReplaceWith(System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ReplaceWith\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 369\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Replaces this node with the specified content.</p>\\n\"\n  syntax:\n    content: public void ReplaceWith(params object[] content)\n    content.vb: Public Sub ReplaceWith(ParamArray content As Object())\n    parameters:\n    - id: content\n      type: System.Object[]\n      description: \"\\n<p>A parameter list of the new content.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Xml.Linq.XNode.ReplaceWith(System.Object())\n  name.vb: ReplaceWith(Object())\n  nameWithType: XNode.ReplaceWith(Object[])\n  nameWithType.vb: XNode.ReplaceWith(Object())\n- uid: System.Xml.Linq.XNode.ToString\n  commentId: M:System.Xml.Linq.XNode.ToString\n  id: ToString\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Xml.Linq.XNode.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 370\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns the indented XML for this node.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the indented XML.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XNode.ToString()\n- uid: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)\n  commentId: M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)\n  id: ToString(System.Xml.Linq.SaveOptions)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: ToString(SaveOptions)\n  fullName: System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 371\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns the XML for this node, optionally disabling formatting.</p>\\n\"\n  syntax:\n    content: public string ToString(SaveOptions options)\n    content.vb: Public Function ToString(options As SaveOptions) As String\n    parameters:\n    - id: options\n      type: System.Xml.Linq.SaveOptions\n      description: \"\\n<p>A <xref href=\\\"System.Xml.Linq.SaveOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies formatting behavior.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the XML.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XNode.ToString(SaveOptions)\n- uid: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)\n  commentId: M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)\n  id: WriteTo(System.Xml.XmlWriter)\n  parent: System.Xml.Linq.XNode\n  langs:\n  - csharp\n  - vb\n  name: WriteTo(XmlWriter)\n  fullName: System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteTo\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 372\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Writes this node to an <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract void WriteTo(XmlWriter writer)\n    content.vb: Public MustOverride Sub WriteTo(writer As XmlWriter)\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>An <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into which this method will write.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: XNode.WriteTo(XmlWriter)\nreferences:\n- uid: System.Xml.Linq\n  isExternal: false\n  name: System.Xml.Linq\n  fullName: System.Xml.Linq\n  commentId: N:System.Xml.Linq\n  nameWithType: System.Xml.Linq\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Xml.Linq.XObject\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XObject\n  fullName: System.Xml.Linq.XObject\n  commentId: T:System.Xml.Linq.XObject\n  nameWithType: XObject\n- uid: System.Xml.Linq.XObject.BaseUri\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: BaseUri\n  fullName: System.Xml.Linq.XObject.BaseUri\n  commentId: P:System.Xml.Linq.XObject.BaseUri\n  nameWithType: XObject.BaseUri\n- uid: System.Xml.Linq.XObject.Document\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Document\n  fullName: System.Xml.Linq.XObject.Document\n  commentId: P:System.Xml.Linq.XObject.Document\n  nameWithType: XObject.Document\n- uid: System.Xml.Linq.XObject.NodeType\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: NodeType\n  fullName: System.Xml.Linq.XObject.NodeType\n  commentId: P:System.Xml.Linq.XObject.NodeType\n  nameWithType: XObject.NodeType\n- uid: System.Xml.Linq.XObject.Parent\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Parent\n  fullName: System.Xml.Linq.XObject.Parent\n  commentId: P:System.Xml.Linq.XObject.Parent\n  nameWithType: XObject.Parent\n- uid: System.Xml.Linq.XObject.Changed\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Changed\n  fullName: System.Xml.Linq.XObject.Changed\n  commentId: E:System.Xml.Linq.XObject.Changed\n  nameWithType: XObject.Changed\n- uid: System.Xml.Linq.XObject.Changing\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Changing\n  fullName: System.Xml.Linq.XObject.Changing\n  commentId: E:System.Xml.Linq.XObject.Changing\n  nameWithType: XObject.Changing\n- uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  parent: System.Xml.Linq.XObject\n  isExternal: true\n  name: AddAnnotation(Object)\n  fullName: System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  spec.csharp:\n  - uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)\n    name: AddAnnotation\n    fullName: System.Xml.Linq.XObject.AddAnnotation\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)\n    name: AddAnnotation\n    fullName: System.Xml.Linq.XObject.AddAnnotation\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.Linq.XObject.AddAnnotation(System.Object)\n  nameWithType: XObject.AddAnnotation(Object)\n- uid: System.Xml.Linq.XObject.Annotation(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: true\n  name: Annotation(Type)\n  fullName: System.Xml.Linq.XObject.Annotation(System.Type)\n  spec.csharp:\n  - uid: System.Xml.Linq.XObject.Annotation(System.Type)\n    name: Annotation\n    fullName: System.Xml.Linq.XObject.Annotation\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.Linq.XObject.Annotation(System.Type)\n    name: Annotation\n    fullName: System.Xml.Linq.XObject.Annotation\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.Linq.XObject.Annotation(System.Type)\n  nameWithType: XObject.Annotation(Type)\n- uid: System.Xml.Linq.XObject.Annotation``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotation<T>()\n  fullName: System.Xml.Linq.XObject.Annotation<T>()\n  fullname.vb: System.Xml.Linq.XObject.Annotation(Of T)()\n  name.vb: Annotation(Of T)()\n  spec.csharp:\n  - uid: System.Xml.Linq.XObject.Annotation``1\n    name: Annotation<T>\n    fullName: System.Xml.Linq.XObject.Annotation<T>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.Linq.XObject.Annotation``1\n    name: Annotation(Of T)\n    fullName: System.Xml.Linq.XObject.Annotation(Of T)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.Linq.XObject.Annotation``1\n  nameWithType: XObject.Annotation<T>()\n  nameWithType.vb: XObject.Annotation(Of T)()\n- uid: System.Xml.Linq.XObject.Annotations(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: true\n  name: Annotations(Type)\n  fullName: System.Xml.Linq.XObject.Annotations(System.Type)\n  spec.csharp:\n  - uid: System.Xml.Linq.XObject.Annotations(System.Type)\n    name: Annotations\n    fullName: System.Xml.Linq.XObject.Annotations\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.Linq.XObject.Annotations(System.Type)\n    name: Annotations\n    fullName: System.Xml.Linq.XObject.Annotations\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.Linq.XObject.Annotations(System.Type)\n  nameWithType: XObject.Annotations(Type)\n- uid: System.Xml.Linq.XObject.Annotations``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: Annotations<T>()\n  fullName: System.Xml.Linq.XObject.Annotations<T>()\n  fullname.vb: System.Xml.Linq.XObject.Annotations(Of T)()\n  name.vb: Annotations(Of T)()\n  spec.csharp:\n  - uid: System.Xml.Linq.XObject.Annotations``1\n    name: Annotations<T>\n    fullName: System.Xml.Linq.XObject.Annotations<T>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.Linq.XObject.Annotations``1\n    name: Annotations(Of T)\n    fullName: System.Xml.Linq.XObject.Annotations(Of T)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.Linq.XObject.Annotations``1\n  nameWithType: XObject.Annotations<T>()\n  nameWithType.vb: XObject.Annotations(Of T)()\n- uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  parent: System.Xml.Linq.XObject\n  isExternal: true\n  name: RemoveAnnotations(Type)\n  fullName: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  spec.csharp:\n  - uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n    name: RemoveAnnotations\n    fullName: System.Xml.Linq.XObject.RemoveAnnotations\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n    name: RemoveAnnotations\n    fullName: System.Xml.Linq.XObject.RemoveAnnotations\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)\n  nameWithType: XObject.RemoveAnnotations(Type)\n- uid: System.Xml.Linq.XObject.RemoveAnnotations``1\n  parent: System.Xml.Linq.XObject\n  isExternal: false\n  name: RemoveAnnotations<T>()\n  fullName: System.Xml.Linq.XObject.RemoveAnnotations<T>()\n  fullname.vb: System.Xml.Linq.XObject.RemoveAnnotations(Of T)()\n  name.vb: RemoveAnnotations(Of T)()\n  spec.csharp:\n  - uid: System.Xml.Linq.XObject.RemoveAnnotations``1\n    name: RemoveAnnotations<T>\n    fullName: System.Xml.Linq.XObject.RemoveAnnotations<T>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Xml.Linq.XObject.RemoveAnnotations``1\n    name: RemoveAnnotations(Of T)\n    fullName: System.Xml.Linq.XObject.RemoveAnnotations(Of T)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Xml.Linq.XObject.RemoveAnnotations``1\n  nameWithType: XObject.RemoveAnnotations<T>()\n  nameWithType.vb: XObject.RemoveAnnotations(Of T)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Xml.Linq.XNodeDocumentOrderComparer\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNodeDocumentOrderComparer\n  fullName: System.Xml.Linq.XNodeDocumentOrderComparer\n  commentId: T:System.Xml.Linq.XNodeDocumentOrderComparer\n  nameWithType: XNodeDocumentOrderComparer\n- uid: System.Xml.Linq.XNodeEqualityComparer\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNodeEqualityComparer\n  fullName: System.Xml.Linq.XNodeEqualityComparer\n  commentId: T:System.Xml.Linq.XNodeEqualityComparer\n  nameWithType: XNodeEqualityComparer\n- uid: System.Xml.Linq.XNode\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XNode\n  fullName: System.Xml.Linq.XNode\n  commentId: T:System.Xml.Linq.XNode\n  nameWithType: XNode\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<XElement>\n  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement)\n  name.vb: IEnumerable(Of XElement)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Xml.Linq.XElement\n    name: XElement\n    fullName: System.Xml.Linq.XElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Xml.Linq.XElement\n    name: XElement\n    fullName: System.Xml.Linq.XElement\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n  nameWithType: IEnumerable<XElement>\n  nameWithType.vb: IEnumerable(Of XElement)\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Xml.Linq.XName\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XName\n  fullName: System.Xml.Linq.XName\n  commentId: T:System.Xml.Linq.XName\n  nameWithType: XName\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlReader\n  fullName: System.Xml.XmlReader\n  commentId: T:System.Xml.XmlReader\n  nameWithType: XmlReader\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Xml.Linq.ReaderOptions\n  parent: System.Xml.Linq\n  isExternal: false\n  name: ReaderOptions\n  fullName: System.Xml.Linq.ReaderOptions\n  commentId: T:System.Xml.Linq.ReaderOptions\n  nameWithType: ReaderOptions\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<XNode>\n  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XNode)\n  name.vb: IEnumerable(Of XNode)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n  nameWithType: IEnumerable<XNode>\n  nameWithType.vb: IEnumerable(Of XNode)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Xml.Linq.SaveOptions\n  parent: System.Xml.Linq\n  isExternal: false\n  name: SaveOptions\n  fullName: System.Xml.Linq.SaveOptions\n  commentId: T:System.Xml.Linq.SaveOptions\n  nameWithType: SaveOptions\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  fullName: System.Xml.XmlWriter\n  commentId: T:System.Xml.XmlWriter\n  nameWithType: XmlWriter\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.Xml.XmlException\n  isExternal: false\n  name: XmlException\n  fullName: System.Xml.XmlException\n  commentId: T:System.Xml.XmlException\n  nameWithType: XmlException\n"}