{"nodes":[{"pos":[1099,1105],"content":"AesCng","needQuote":true,"nodes":[{"content":"AesCng","pos":[0,6]}]},{"pos":[3999,4007],"content":"AesCng()","needQuote":true,"nodes":[{"content":"AesCng()","pos":[0,8]}]},{"pos":[5067,5081],"content":"AesCng(String)","needQuote":true,"nodes":[{"content":"AesCng(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The name of the key.&lt;/p&gt;\\n","pos":[5986,6017],"source":"\\n<p>The name of the key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6136,6185],"source":"\\n<p>\\n<em>keyName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6186,6192],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n&lt;/p&gt;\\n","pos":[6313,6401],"source":"\\n<p>\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.\\n&lt;/p&gt;\\n","pos":[6552,6582],"source":"\\n<p>All other errors.\\n</p>\\n"},{"pos":[7199,7226],"content":"AesCng(String, CngProvider)","needQuote":true,"nodes":[{"content":"AesCng(String, CngProvider)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The name of the key.&lt;/p&gt;\\n","pos":[8265,8296],"source":"\\n<p>The name of the key.</p>\\n"},{"content":"\\n&lt;p&gt;The KSP that contains the key.&lt;/p&gt;\\n","pos":[8390,8431],"source":"\\n<p>The KSP that contains the key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8550,8599],"source":"\\n<p>\\n<em>keyName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8600,8667],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>provider</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8668,8674],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n&lt;/p&gt;\\n","pos":[8795,8883],"source":"\\n<p>\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.\\n&lt;/p&gt;\\n","pos":[9034,9064],"source":"\\n<p>All other errors.\\n</p>\\n"},{"pos":[9917,9963],"content":"AesCng(String, CngProvider, CngKeyOpenOptions)","needQuote":true,"nodes":[{"content":"AesCng(String, CngProvider, CngKeyOpenOptions)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The name of the key.&lt;/p&gt;\\n","pos":[11133,11164],"source":"\\n<p>The name of the key.</p>\\n"},{"content":"\\n&lt;p&gt;The KSP that contains the key.&lt;/p&gt;\\n","pos":[11258,11299],"source":"\\n<p>The KSP that contains the key.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.&lt;/p&gt;\\n","pos":[11402,11603],"source":"\\n<p>A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[11722,11771],"source":"\\n<p>\\n<em>keyName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[11772,11839],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>provider</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[11840,11846],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n&lt;/p&gt;\\n","pos":[11967,12055],"source":"\\n<p>\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.\\n&lt;/p&gt;\\n","pos":[12206,12236],"source":"\\n<p>All other errors.\\n</p>\\n"},{"pos":[12885,12888],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[14240,14247],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[15710,15727],"content":"CreateDecryptor()","needQuote":true,"nodes":[{"content":"CreateDecryptor()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A symmetric AES decryptor object.&lt;/p&gt;\\n","pos":[16680,16724],"source":"\\n<p>A symmetric AES decryptor object.</p>\\n"},{"pos":[17246,17277],"content":"CreateDecryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateDecryptor(Byte[], Byte[])","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The secret key to use for the AES algorithm.","pos":[18203,18252],"source":"\\n<p>The secret key to use for the AES algorithm."},{"content":"The key size must be 128, 192, or 256 bits.&lt;/p&gt;\\n","pos":[18253,18302],"source":" The key size must be 128, 192, or 256 bits.</p>\\n"},{"content":"\\n&lt;p&gt;The initialization vector to use for the AES algorithm.&lt;/p&gt;\\n","pos":[18366,18432],"source":"\\n<p>The initialization vector to use for the AES algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;A symmetric AES decryptor object.&lt;/p&gt;\\n","pos":[18524,18568],"source":"\\n<p>A symmetric AES decryptor object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgbKey&lt;/em&gt;  is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18794,18849],"source":"\\n<p>\\n<em>rgbKey</em>  is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgbKey&lt;/em&gt;  is not a valid size for this algorithm.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;rgbIV&lt;/em&gt; size does not match the block size for this algorithm.&lt;/p&gt;\\n","pos":[18946,19108],"source":"\\n<p>\\n<em>rgbKey</em>  is not a valid size for this algorithm.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em> size does not match the block size for this algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgbKey&lt;/em&gt; is a known weak key for this algorithm and cannot be used.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;rgbIV&lt;/em&gt;  is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19259,19411],"source":"\\n<p>\\n<em>rgbKey</em> is a known weak key for this algorithm and cannot be used.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em>  is <strong>null</strong>.</p>\\n"},{"pos":[19980,19997],"content":"CreateEncryptor()","needQuote":true,"nodes":[{"content":"CreateEncryptor()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A symmetric AES encryptor object.&lt;/p&gt;\\n","pos":[20951,20995],"source":"\\n<p>A symmetric AES encryptor object.</p>\\n"},{"pos":[21517,21548],"content":"CreateEncryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateEncryptor(Byte[], Byte[])","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The secret key to use for the AES algorithm.","pos":[22474,22523],"source":"\\n<p>The secret key to use for the AES algorithm."},{"content":"The key size must be 128, 192, or 256 bits.&lt;/p&gt;\\n","pos":[22524,22573],"source":" The key size must be 128, 192, or 256 bits.</p>\\n"},{"content":"\\n&lt;p&gt;The initialization vector to use for the AES algorithm.&lt;/p&gt;\\n","pos":[22637,22703],"source":"\\n<p>The initialization vector to use for the AES algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;A symmetric AES encryptor object.&lt;/p&gt;\\n","pos":[22795,22839],"source":"\\n<p>A symmetric AES encryptor object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgbKey&lt;/em&gt;  is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23065,23120],"source":"\\n<p>\\n<em>rgbKey</em>  is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgbKey&lt;/em&gt;  is not a valid size for this algorithm.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;rgbIV&lt;/em&gt; size does not match the block size for this algorithm.&lt;/p&gt;\\n","pos":[23217,23379],"source":"\\n<p>\\n<em>rgbKey</em>  is not a valid size for this algorithm.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em> size does not match the block size for this algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rgbKey&lt;/em&gt; is a known weak key for this algorithm and cannot be used.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;rgbIV&lt;/em&gt;  is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23530,23682],"source":"\\n<p>\\n<em>rgbKey</em> is a known weak key for this algorithm and cannot be used.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em>  is <strong>null</strong>.</p>\\n"},{"pos":[24275,24291],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[25409,25421],"content":"GenerateIV()","needQuote":true,"nodes":[{"content":"GenerateIV()","pos":[0,12]}]},{"pos":[26512,26525],"content":"GenerateKey()","needQuote":true,"nodes":[{"content":"GenerateKey()","pos":[0,13]}]},{"pos":[27576,27604],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[27801,27807],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28008,28026],"content":"SymmetricAlgorithm","needQuote":true,"nodes":[{"content":"SymmetricAlgorithm","pos":[0,18]}]},{"pos":[28292,28295],"content":"Aes","needQuote":true,"nodes":[{"content":"Aes","pos":[0,3]}]},{"pos":[28480,28491],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[28702,28710],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[28839,28845],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[28931,28932],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28959,28960],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29047,29053],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[29139,29140],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29167,29168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29401,29415],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[29572,29578],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[29664,29665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29715,29721],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[29781,29782],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29884,29890],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[29976,29977],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30027,30033],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[30093,30094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30371,30385],"content":"BlockSizeValue","needQuote":true,"nodes":[{"content":"BlockSizeValue","pos":[0,14]}]},{"pos":[30747,30764],"content":"FeedbackSizeValue","needQuote":true,"nodes":[{"content":"FeedbackSizeValue","pos":[0,17]}]},{"pos":[31125,31132],"content":"IVValue","needQuote":true,"nodes":[{"content":"IVValue","pos":[0,7]}]},{"pos":[31464,31472],"content":"KeyValue","needQuote":true,"nodes":[{"content":"KeyValue","pos":[0,8]}]},{"pos":[31819,31839],"content":"LegalBlockSizesValue","needQuote":true,"nodes":[{"content":"LegalBlockSizesValue","pos":[0,20]}]},{"pos":[32220,32238],"content":"LegalKeySizesValue","needQuote":true,"nodes":[{"content":"LegalKeySizesValue","pos":[0,18]}]},{"pos":[32607,32619],"content":"KeySizeValue","needQuote":true,"nodes":[{"content":"KeySizeValue","pos":[0,12]}]},{"pos":[32967,32976],"content":"ModeValue","needQuote":true,"nodes":[{"content":"ModeValue","pos":[0,9]}]},{"pos":[33318,33330],"content":"PaddingValue","needQuote":true,"nodes":[{"content":"PaddingValue","pos":[0,12]}]},{"pos":[33676,33685],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[33846,33853],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[33955,33956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33983,33984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34087,34094],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[34196,34197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34224,34225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34504,34511],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[34668,34673],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[34773,34774],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34801,34802],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34903,34908],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[35008,35009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35036,35037],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35333,35352],"content":"ValidKeySize(Int32)","needQuote":true,"nodes":[{"content":"ValidKeySize(Int32)","pos":[0,19]}]},{"pos":[35549,35561],"content":"ValidKeySize","needQuote":true,"nodes":[{"content":"ValidKeySize","pos":[0,12]}]},{"pos":[35668,35669],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35718,35723],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[35782,35783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35905,35917],"content":"ValidKeySize","needQuote":true,"nodes":[{"content":"ValidKeySize","pos":[0,12]}]},{"pos":[36024,36025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36074,36079],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[36138,36139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36451,36460],"content":"BlockSize","needQuote":true,"nodes":[{"content":"BlockSize","pos":[0,9]}]},{"pos":[36802,36814],"content":"FeedbackSize","needQuote":true,"nodes":[{"content":"FeedbackSize","pos":[0,12]}]},{"pos":[37155,37157],"content":"IV","needQuote":true,"nodes":[{"content":"IV","pos":[0,2]}]},{"pos":[37481,37496],"content":"LegalBlockSizes","needQuote":true,"nodes":[{"content":"LegalBlockSizes","pos":[0,15]}]},{"pos":[37857,37870],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[38216,38220],"content":"Mode","needQuote":true,"nodes":[{"content":"Mode","pos":[0,4]}]},{"pos":[38542,38549],"content":"Padding","needQuote":true,"nodes":[{"content":"Padding","pos":[0,7]}]},{"pos":[38813,38823],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[38918,38926],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[38995,38996],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39023,39024],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39094,39102],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[39171,39172],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39199,39200],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39383,39397],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[39516,39522],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[39589,39590],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39640,39646],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39706,39707],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39790,39796],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[39863,39864],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39914,39920],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39980,39981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40195,40217],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[40365,40371],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[40438,40439],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40489,40495],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[40556,40557]},{"pos":[40612,40618],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40678,40679],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40776,40782],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[40849,40850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40900,40906],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[40967,40968]},{"pos":[41023,41029],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41089,41090],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41335,41366],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[41532,41547],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[41623,41624],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41674,41680],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[41741,41742]},{"pos":[41797,41803],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41863,41864],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41970,41985],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[42061,42062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42112,42118],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42179,42180]},{"pos":[42235,42241],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42301,42302],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42532,42545],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[42646,42657],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[42729,42730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42757,42758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42831,42842],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[42914,42915],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42942,42943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43118,43127],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[43220,43227],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[43295,43296],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43323,43324],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43393,43400],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[43468,43469],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43496,43497],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43672,43689],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[43798,43813],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[43889,43890],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43917,43918],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43995,44010],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[44086,44087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44114,44115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44260,44266],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[44397,44403],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[44597,44608],"content":"CngProvider","needQuote":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[44867,44884],"content":"CngKeyOpenOptions","needQuote":true,"nodes":[{"content":"CngKeyOpenOptions","pos":[0,17]}]},{"pos":[45184,45187],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[45387,45393],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[45513,45517],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[45576,45578]},{"pos":[45641,45645],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[45703,45705],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[45920,45927],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[46175,46180],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[46412,46429],"content":"CreateDecryptor()","needQuote":true,"nodes":[{"content":"CreateDecryptor()","pos":[0,17]}]},{"pos":[46606,46621],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[46731,46732],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46759,46760],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46871,46886],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[46996,46997],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47024,47025],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47294,47310],"content":"ICryptoTransform","needQuote":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[47648,47679],"content":"CreateDecryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateDecryptor(Byte[], Byte[])","pos":[0,31]}]},{"pos":[48065,48080],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[48190,48191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48239,48243],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[48302,48304]},{"content":",","pos":[48336,48337]},{"pos":[48390,48394],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[48453,48455]},{"pos":[48486,48487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48627,48642],"content":"CreateDecryptor","needQuote":true,"nodes":[{"content":"CreateDecryptor","pos":[0,15]}]},{"pos":[48752,48753],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48801,48805],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[48863,48865],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[48894,48895]},{"pos":[48948,48952],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[49010,49012],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[49040,49041],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49459,49476],"content":"CreateEncryptor()","needQuote":true,"nodes":[{"content":"CreateEncryptor()","pos":[0,17]}]},{"pos":[49653,49668],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[49778,49779],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49806,49807],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49918,49933],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[50043,50044],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50071,50072],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50406,50437],"content":"CreateEncryptor(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"CreateEncryptor(Byte[], Byte[])","pos":[0,31]}]},{"pos":[50823,50838],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[50948,50949],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50997,51001],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[51060,51062]},{"content":",","pos":[51094,51095]},{"pos":[51148,51152],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[51211,51213]},{"pos":[51244,51245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51385,51400],"content":"CreateEncryptor","needQuote":true,"nodes":[{"content":"CreateEncryptor","pos":[0,15]}]},{"pos":[51510,51511],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51559,51563],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[51621,51623],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[51652,51653]},{"pos":[51706,51710],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[51768,51770],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[51798,51799],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52225,52241],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[52432,52439],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[52541,52542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52593,52600],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[52661,52662],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52781,52788],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[52890,52891],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52942,52949],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[53010,53011],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53234,53241],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[53474,53486],"content":"GenerateIV()","needQuote":true,"nodes":[{"content":"GenerateIV()","pos":[0,12]}]},{"pos":[53653,53663],"content":"GenerateIV","needQuote":true,"nodes":[{"content":"GenerateIV","pos":[0,10]}]},{"pos":[53768,53769],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53796,53797],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53903,53913],"content":"GenerateIV","needQuote":true,"nodes":[{"content":"GenerateIV","pos":[0,10]}]},{"pos":[54018,54019],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54046,54047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54338,54351],"content":"GenerateKey()","needQuote":true,"nodes":[{"content":"GenerateKey()","pos":[0,13]}]},{"pos":[54520,54531],"content":"GenerateKey","needQuote":true,"nodes":[{"content":"GenerateKey","pos":[0,11]}]},{"pos":[54637,54638],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54665,54666],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54773,54784],"content":"GenerateKey","needQuote":true,"nodes":[{"content":"GenerateKey","pos":[0,11]}]},{"pos":[54890,54891],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54918,54919],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55124,55145],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[55341,55370],"content":"PlatformNotSupportedException","needQuote":true,"nodes":[{"content":"PlatformNotSupportedException","pos":[0,29]}]},{"pos":[55605,55627],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]},{"pos":[55875,55892],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Cryptography.AesCng\n  commentId: T:System.Security.Cryptography.AesCng\n  id: AesCng\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.AesCng.#ctor\n  - System.Security.Cryptography.AesCng.#ctor(System.String)\n  - System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  - System.Security.Cryptography.AesCng.CreateDecryptor\n  - System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.AesCng.CreateEncryptor\n  - System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.AesCng.Dispose(System.Boolean)\n  - System.Security.Cryptography.AesCng.GenerateIV\n  - System.Security.Cryptography.AesCng.GenerateKey\n  - System.Security.Cryptography.AesCng.Key\n  - System.Security.Cryptography.AesCng.KeySize\n  langs:\n  - csharp\n  - vb\n  name: AesCng\n  fullName: System.Security.Cryptography.AesCng\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AesCng\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 35\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Provides a Cryptography Next Generation (CNG) implementation of the Advanced Encryption Standard (AES) algorithm.</p>\\n\"\n  syntax:\n    content: 'public sealed class AesCng : Aes, IDisposable'\n    content.vb: >-\n      Public NotInheritable Class AesCng\n          Inherits Aes\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.SymmetricAlgorithm\n  - System.Security.Cryptography.Aes\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.Aes.Create\n  - System.Security.Cryptography.Aes.Create(System.String)\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.SymmetricAlgorithm.Clear\n  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  - System.Security.Cryptography.SymmetricAlgorithm.IV\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.SymmetricAlgorithm.Mode\n  - System.Security.Cryptography.SymmetricAlgorithm.Padding\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: AesCng\n- uid: System.Security.Cryptography.AesCng.#ctor\n  commentId: M:System.Security.Cryptography.AesCng.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: AesCng()\n  fullName: System.Security.Cryptography.AesCng.AesCng()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 37\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.AesCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with an ephemeral key.</p>\\n\"\n  syntax:\n    content: public AesCng()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AesCng.AesCng()\n- uid: System.Security.Cryptography.AesCng.#ctor(System.String)\n  commentId: M:System.Security.Cryptography.AesCng.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: AesCng(String)\n  fullName: System.Security.Cryptography.AesCng.AesCng(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 38\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.AesCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified key name, which represents an existing persisted AES key. </p>\\n\"\n  syntax:\n    content: public AesCng(string keyName)\n    content.vb: Public Sub New(keyName As String)\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The name of the key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.\\n</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.CngKey.Open(System.String)\n    commentId: M:System.Security.Cryptography.CngKey.Open(System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AesCng.AesCng(String)\n- uid: System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider)\n  commentId: M:System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider)\n  id: '#ctor(System.String,System.Security.Cryptography.CngProvider)'\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: AesCng(String, CngProvider)\n  fullName: System.Security.Cryptography.AesCng.AesCng(System.String, System.Security.Cryptography.CngProvider)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 39\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.AesCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified key name, which represents an existing persisted AES key, and the specified key storage provider (KSP).</p>\\n\"\n  syntax:\n    content: public AesCng(string keyName, CngProvider provider)\n    content.vb: Public Sub New(keyName As String, provider As CngProvider)\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The name of the key.</p>\\n\"\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>The KSP that contains the key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyName</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>provider</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.\\n</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n    commentId: M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AesCng.AesCng(String, CngProvider)\n- uid: System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  commentId: M:System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  id: '#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)'\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: AesCng(String, CngProvider, CngKeyOpenOptions)\n  fullName: System.Security.Cryptography.AesCng.AesCng(System.String, System.Security.Cryptography.CngProvider, System.Security.Cryptography.CngKeyOpenOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 40\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.AesCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified key name, which represents an existing persisted AES key,  the specified key storage provider (KSP) and key open options.</p>\\n\"\n  syntax:\n    content: public AesCng(string keyName, CngProvider provider, CngKeyOpenOptions openOptions)\n    content.vb: Public Sub New(keyName As String, provider As CngProvider, openOptions As CngKeyOpenOptions)\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The name of the key.</p>\\n\"\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>The KSP that contains the key.</p>\\n\"\n    - id: openOptions\n      type: System.Security.Cryptography.CngKeyOpenOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyName</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>provider</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>\\n      Cryptography Next Generation (CNG) is not supported on this system.\\n</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.\\n</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n    commentId: M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AesCng.AesCng(String, CngProvider, CngKeyOpenOptions)\n- uid: System.Security.Cryptography.AesCng.Key\n  commentId: P:System.Security.Cryptography.AesCng.Key\n  id: Key\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.Security.Cryptography.AesCng.Key\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Key\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 41\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the key for the <xref href=\\\"System.Security.Cryptography.AesCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public override byte[] Key { get; set; }\n    content.vb: Public Overrides Property Key As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The key for the <xref href=\\\"System.Security.Cryptography.AesCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.Key\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: AesCng.Key\n- uid: System.Security.Cryptography.AesCng.KeySize\n  commentId: P:System.Security.Cryptography.AesCng.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: KeySize\n  fullName: System.Security.Cryptography.AesCng.KeySize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeySize\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 42\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the size, in bits, of the secret key used by the <xref href=\\\"System.Security.Cryptography.AesCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  syntax:\n    content: public override int KeySize { get; set; }\n    content.vb: Public Overrides Property KeySize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size, in bits, of the secret key used by the <xref href=\\\"System.Security.Cryptography.AesCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> algorithm.</p>\\n\"\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: AesCng.KeySize\n- uid: System.Security.Cryptography.AesCng.CreateDecryptor\n  commentId: M:System.Security.Cryptography.AesCng.CreateDecryptor\n  id: CreateDecryptor\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: CreateDecryptor()\n  fullName: System.Security.Cryptography.AesCng.CreateDecryptor()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDecryptor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 43\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a symmetric AES decryptor object with the current key and initialization vector (<xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.IV\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public override ICryptoTransform CreateDecryptor()\n    content.vb: Public Overrides Function CreateDecryptor As ICryptoTransform\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: \"\\n<p>A symmetric AES decryptor object.</p>\\n\"\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: AesCng.CreateDecryptor()\n- uid: System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[],System.Byte[])\n  id: CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: CreateDecryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[], System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDecryptor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 44\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a symmetric AES decryptor object with the specified key and initialization vector (IV).</p>\\n\"\n  syntax:\n    content: public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV)\n    content.vb: Public Overrides Function CreateDecryptor(rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: \"\\n<p>The secret key to use for the AES algorithm. The key size must be 128, 192, or 256 bits.</p>\\n\"\n    - id: rgbIV\n      type: System.Byte[]\n      description: \"\\n<p>The initialization vector to use for the AES algorithm.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: \"\\n<p>A symmetric AES decryptor object.</p>\\n\"\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>rgbKey</em>  is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>rgbKey</em>  is not a valid size for this algorithm.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em> size does not match the block size for this algorithm.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>rgbKey</em> is a known weak key for this algorithm and cannot be used.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em>  is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte(), System.Byte())\n  name.vb: CreateDecryptor(Byte(), Byte())\n  nameWithType: AesCng.CreateDecryptor(Byte[], Byte[])\n  nameWithType.vb: AesCng.CreateDecryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.AesCng.CreateEncryptor\n  commentId: M:System.Security.Cryptography.AesCng.CreateEncryptor\n  id: CreateEncryptor\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: CreateEncryptor()\n  fullName: System.Security.Cryptography.AesCng.CreateEncryptor()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateEncryptor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 45\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a symmetric AES encryptor object using the current key and initialization vector (<xref href=\\\"System.Security.Cryptography.SymmetricAlgorithm.IV\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: public override ICryptoTransform CreateEncryptor()\n    content.vb: Public Overrides Function CreateEncryptor As ICryptoTransform\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: \"\\n<p>A symmetric AES encryptor object.</p>\\n\"\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: AesCng.CreateEncryptor()\n- uid: System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[],System.Byte[])\n  id: CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: CreateEncryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[], System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateEncryptor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 46\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a symmetric AES encryptor object with the specified key and initialization vector (IV).</p>\\n\"\n  syntax:\n    content: public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV)\n    content.vb: Public Overrides Function CreateEncryptor(rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform\n    parameters:\n    - id: rgbKey\n      type: System.Byte[]\n      description: \"\\n<p>The secret key to use for the AES algorithm. The key size must be 128, 192, or 256 bits.</p>\\n\"\n    - id: rgbIV\n      type: System.Byte[]\n      description: \"\\n<p>The initialization vector to use for the AES algorithm.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: \"\\n<p>A symmetric AES encryptor object.</p>\\n\"\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>rgbKey</em>  is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>rgbKey</em>  is not a valid size for this algorithm.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em> size does not match the block size for this algorithm.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>rgbKey</em> is a known weak key for this algorithm and cannot be used.</p>\\n<p>-or-</p>\\n<p>\\n<em>rgbIV</em>  is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte(), System.Byte())\n  name.vb: CreateEncryptor(Byte(), Byte())\n  nameWithType: AesCng.CreateEncryptor(Byte[], Byte[])\n  nameWithType.vb: AesCng.CreateEncryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.AesCng.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.AesCng.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.AesCng.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 47\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: AesCng.Dispose(Boolean)\n- uid: System.Security.Cryptography.AesCng.GenerateIV\n  commentId: M:System.Security.Cryptography.AesCng.GenerateIV\n  id: GenerateIV\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: GenerateIV()\n  fullName: System.Security.Cryptography.AesCng.GenerateIV()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenerateIV\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 48\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Generates a random initialization vector (IV) to use for the AES algorithm.</p>\\n\"\n  syntax:\n    content: public override void GenerateIV()\n    content.vb: Public Overrides Sub GenerateIV\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: AesCng.GenerateIV()\n- uid: System.Security.Cryptography.AesCng.GenerateKey\n  commentId: M:System.Security.Cryptography.AesCng.GenerateKey\n  id: GenerateKey\n  parent: System.Security.Cryptography.AesCng\n  langs:\n  - csharp\n  - vb\n  name: GenerateKey()\n  fullName: System.Security.Cryptography.AesCng.GenerateKey()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenerateKey\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 49\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Generates a random key to use for the AES algorithm.</p>\\n\"\n  syntax:\n    content: public override void GenerateKey()\n    content.vb: Public Overrides Sub GenerateKey\n  overridden: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  seealso:\n  - type: System.Security.Cryptography.AesCng.Key\n    commentId: P:System.Security.Cryptography.AesCng.Key\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: AesCng.GenerateKey()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n  commentId: T:System.Security.Cryptography.SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n- uid: System.Security.Cryptography.Aes\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: Aes\n  fullName: System.Security.Cryptography.Aes\n  commentId: T:System.Security.Cryptography.Aes\n  nameWithType: Aes\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.Aes.Create\n  parent: System.Security.Cryptography.Aes\n  isExternal: true\n  name: Create()\n  fullName: System.Security.Cryptography.Aes.Create()\n  spec.csharp:\n  - uid: System.Security.Cryptography.Aes.Create\n    name: Create\n    fullName: System.Security.Cryptography.Aes.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.Aes.Create\n    name: Create\n    fullName: System.Security.Cryptography.Aes.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.Aes.Create\n  nameWithType: Aes.Create()\n- uid: System.Security.Cryptography.Aes.Create(System.String)\n  parent: System.Security.Cryptography.Aes\n  isExternal: true\n  name: Create(String)\n  fullName: System.Security.Cryptography.Aes.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.Aes.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.Aes.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.Aes.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.Aes.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.Aes.Create(System.String)\n  nameWithType: Aes.Create(String)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: BlockSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  nameWithType: SymmetricAlgorithm.BlockSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: FeedbackSizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  nameWithType: SymmetricAlgorithm.FeedbackSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: IVValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  nameWithType: SymmetricAlgorithm.IVValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: KeyValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  nameWithType: SymmetricAlgorithm.KeyValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalBlockSizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizesValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  nameWithType: SymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: KeySizeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  nameWithType: SymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: ModeValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  nameWithType: SymmetricAlgorithm.ModeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: PaddingValue\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  nameWithType: SymmetricAlgorithm.PaddingValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Dispose()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  nameWithType: SymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Clear()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Clear\n  nameWithType: SymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: ValidKeySize(Int32)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n    name: ValidKeySize\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n    name: ValidKeySize\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: BlockSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  nameWithType: SymmetricAlgorithm.BlockSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: FeedbackSize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  nameWithType: SymmetricAlgorithm.FeedbackSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: IV\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.IV\n  nameWithType: SymmetricAlgorithm.IV\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalBlockSizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  nameWithType: SymmetricAlgorithm.LegalBlockSizes\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  nameWithType: SymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Mode\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Mode\n  nameWithType: SymmetricAlgorithm.Mode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Padding\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Padding\n  nameWithType: SymmetricAlgorithm.Padding\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.CngProvider\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProvider\n  fullName: System.Security.Cryptography.CngProvider\n  commentId: T:System.Security.Cryptography.CngProvider\n  nameWithType: CngProvider\n- uid: System.Security.Cryptography.CngKeyOpenOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyOpenOptions\n  fullName: System.Security.Cryptography.CngKeyOpenOptions\n  commentId: T:System.Security.Cryptography.CngKeyOpenOptions\n  nameWithType: CngKeyOpenOptions\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Key\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Key\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Key\n  nameWithType: SymmetricAlgorithm.Key\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: KeySize\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.KeySize\n  nameWithType: SymmetricAlgorithm.KeySize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateDecryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  nameWithType: SymmetricAlgorithm.CreateDecryptor()\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n  commentId: T:System.Security.Cryptography.ICryptoTransform\n  nameWithType: ICryptoTransform\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateDecryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[], System.Byte[])\n  fullname.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte(), System.Byte())\n  name.vb: CreateDecryptor(Byte(), Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n    name: CreateDecryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])\n  nameWithType.vb: SymmetricAlgorithm.CreateDecryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateEncryptor()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  nameWithType: SymmetricAlgorithm.CreateEncryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: CreateEncryptor(Byte[], Byte[])\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[], System.Byte[])\n  fullname.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte(), System.Byte())\n  name.vb: CreateEncryptor(Byte(), Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n    name: CreateEncryptor\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])\n  nameWithType.vb: SymmetricAlgorithm.CreateEncryptor(Byte(), Byte())\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  nameWithType: SymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: GenerateIV()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    name: GenerateIV\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    name: GenerateIV\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  nameWithType: SymmetricAlgorithm.GenerateIV()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: true\n  name: GenerateKey()\n  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()\n  spec.csharp:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    name: GenerateKey\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    name: GenerateKey\n    fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  nameWithType: SymmetricAlgorithm.GenerateKey()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.PlatformNotSupportedException\n  isExternal: false\n  name: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  commentId: T:System.PlatformNotSupportedException\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}