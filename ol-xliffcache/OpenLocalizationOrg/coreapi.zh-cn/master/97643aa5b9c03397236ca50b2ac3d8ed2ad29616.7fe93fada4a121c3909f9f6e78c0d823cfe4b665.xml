{"nodes":[{"pos":[2080,2099],"content":"NameValueCollection","needQuote":true,"nodes":[{"content":"NameValueCollection","pos":[0,19]}]},{"pos":[6146,6167],"content":"NameValueCollection()","needQuote":true,"nodes":[{"content":"NameValueCollection()","pos":[0,21]}]},{"pos":[7833,7871],"content":"NameValueCollection(IEqualityComparer)","needQuote":true,"nodes":[{"content":"NameValueCollection(IEqualityComparer)","pos":[0,38]}]},{"pos":[9931,9971],"content":"NameValueCollection(NameValueCollection)","needQuote":true,"nodes":[{"content":"NameValueCollection(NameValueCollection)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;col&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11625,11676],"source":"\\n<p>\\n<em>col</em> is <strong>null</strong>.</p>\\n"},{"pos":[12354,12380],"content":"NameValueCollection(Int32)","needQuote":true,"nodes":[{"content":"NameValueCollection(Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[13748,13797],"source":"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n"},{"pos":[14572,14617],"content":"NameValueCollection(Int32, IEqualityComparer)","needQuote":true,"nodes":[{"content":"NameValueCollection(Int32, IEqualityComparer)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[16456,16505],"source":"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n"},{"pos":[17200,17247],"content":"NameValueCollection(Int32, NameValueCollection)","needQuote":true,"nodes":[{"content":"NameValueCollection(Int32, NameValueCollection)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[19273,19322],"source":"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;col&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19427,19478],"source":"\\n<p>\\n<em>col</em> is <strong>null</strong>.</p>\\n"},{"pos":[20125,20132],"content":"AllKeys","needQuote":true,"nodes":[{"content":"AllKeys","pos":[0,7]}]},{"pos":[22057,22068],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index of the entry to locate in the collection.&lt;/p&gt;\\n","pos":[22989,23062],"source":"\\n<p>The zero-based index of the entry to locate in the collection.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the valid range of indexes for the collection.&lt;/p&gt;\\n","pos":[23430,23515],"source":"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection.</p>\\n"},{"pos":[24265,24277],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The collection is read-only and the operation attempts to modify the collection.","pos":[25750,25835],"source":"\\n<p>The collection is read-only and the operation attempts to modify the collection."},{"content":"&lt;/p&gt;\\n","pos":[25836,25842],"source":" </p>\\n"},{"pos":[26699,26723],"content":"Add(NameValueCollection)","needQuote":true,"nodes":[{"content":"Add(NameValueCollection)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[28189,28228],"source":"\\n<p>The collection is read-only.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;c&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28333,28382],"source":"\\n<p>\\n<em>c</em> is <strong>null</strong>.</p>\\n"},{"pos":[29034,29053],"content":"Add(String, String)","needQuote":true,"nodes":[{"content":"Add(String, String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The collection is read-only.","pos":[30497,30530],"source":"\\n<p>The collection is read-only."},{"content":"&lt;/p&gt;\\n","pos":[30531,30537],"source":" </p>\\n"},{"pos":[30925,30932],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[31857,31896],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[32542,32562],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;dest&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[34061,34134],"source":"\\n<p>The zero-based index in <em>dest</em> at which copying begins.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;dest&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[34253,34305],"source":"\\n<p>\\n<em>dest</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[34422,34468],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n"},{"pos":[35602,35612],"content":"Get(Int32)","needQuote":true,"nodes":[{"content":"Get(Int32)","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The zero-based index of the entry that contains the values to get from the collection.&lt;/p&gt;\\n","pos":[36567,36664],"source":"\\n<p>The zero-based index of the entry that contains the values to get from the collection.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the valid range of indexes for the collection.&lt;/p&gt;\\n","pos":[37178,37263],"source":"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection.</p>\\n"},{"pos":[38016,38027],"content":"Get(String)","needQuote":true,"nodes":[{"content":"Get(String)","pos":[0,11]}]},{"pos":[40328,40341],"content":"GetKey(Int32)","needQuote":true,"nodes":[{"content":"GetKey(Int32)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The zero-based index of the key to get from the collection.&lt;/p&gt;\\n","pos":[41266,41336],"source":"\\n<p>The zero-based index of the key to get from the collection.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the valid range of indexes for the collection.","pos":[41821,41900],"source":"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection."},{"content":"&lt;/p&gt;\\n","pos":[41901,41907],"source":" </p>\\n"},{"pos":[42499,42515],"content":"GetValues(Int32)","needQuote":true,"nodes":[{"content":"GetValues(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The zero-based index of the entry that contains the values to get from the collection.&lt;/p&gt;\\n","pos":[43459,43556],"source":"\\n<p>The zero-based index of the entry that contains the values to get from the collection.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the valid range of indexes for the collection.","pos":[44052,44131],"source":"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection."},{"content":"&lt;/p&gt;\\n","pos":[44132,44138],"source":" </p>\\n"},{"pos":[44903,44920],"content":"GetValues(String)","needQuote":true,"nodes":[{"content":"GetValues(String)","pos":[0,17]}]},{"pos":[47147,47156],"content":"HasKeys()","needQuote":true,"nodes":[{"content":"HasKeys()","pos":[0,9]}]},{"pos":[48687,48711],"content":"InvalidateCachedArrays()","needQuote":true,"nodes":[{"content":"InvalidateCachedArrays()","pos":[0,24]}]},{"pos":[50039,50053],"content":"Remove(String)","needQuote":true,"nodes":[{"content":"Remove(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[51258,51297],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[51761,51780],"content":"Set(String, String)","needQuote":true,"nodes":[{"content":"Set(String, String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[53254,53293],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[53767,53797],"content":"System.Collections.Specialized","needQuote":true,"nodes":[{"content":"System.Collections.Specialized","pos":[0,30]}]},{"pos":[54000,54006],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54217,54241],"content":"NameObjectCollectionBase","needQuote":true,"nodes":[{"content":"NameObjectCollectionBase","pos":[0,24]}]},{"pos":[54517,54528],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[54741,54752],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[55033,55038],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[55405,55415],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[55791,55795],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[56194,56220],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[56864,56884],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[57494,57517],"content":"BaseAdd(String, Object)","needQuote":true,"nodes":[{"content":"BaseAdd(String, Object)","pos":[0,23]}]},{"pos":[57751,57758],"content":"BaseAdd","needQuote":true,"nodes":[{"content":"BaseAdd","pos":[0,7]}]},{"pos":[57847,57848],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57898,57904],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[57965,57966]},{"pos":[58021,58027],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58087,58088],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58228,58235],"content":"BaseAdd","needQuote":true,"nodes":[{"content":"BaseAdd","pos":[0,7]}]},{"pos":[58324,58325],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58375,58381],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[58442,58443]},{"pos":[58498,58504],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[58564,58565],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58922,58933],"content":"BaseClear()","needQuote":true,"nodes":[{"content":"BaseClear()","pos":[0,11]}]},{"pos":[59114,59123],"content":"BaseClear","needQuote":true,"nodes":[{"content":"BaseClear","pos":[0,9]}]},{"pos":[59214,59215],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59242,59243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59356,59365],"content":"BaseClear","needQuote":true,"nodes":[{"content":"BaseClear","pos":[0,9]}]},{"pos":[59456,59457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59484,59485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59814,59828],"content":"BaseGet(Int32)","needQuote":true,"nodes":[{"content":"BaseGet(Int32)","pos":[0,14]}]},{"pos":[60031,60038],"content":"BaseGet","needQuote":true,"nodes":[{"content":"BaseGet","pos":[0,7]}]},{"pos":[60127,60128],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60177,60182],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[60241,60242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60367,60374],"content":"BaseGet","needQuote":true,"nodes":[{"content":"BaseGet","pos":[0,7]}]},{"pos":[60463,60464],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60513,60518],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[60577,60578],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60923,60938],"content":"BaseGet(String)","needQuote":true,"nodes":[{"content":"BaseGet(String)","pos":[0,15]}]},{"pos":[61143,61150],"content":"BaseGet","needQuote":true,"nodes":[{"content":"BaseGet","pos":[0,7]}]},{"pos":[61239,61240],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61290,61296],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[61356,61357],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61483,61490],"content":"BaseGet","needQuote":true,"nodes":[{"content":"BaseGet","pos":[0,7]}]},{"pos":[61579,61580],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61630,61636],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[61696,61697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62037,62053],"content":"BaseGetAllKeys()","needQuote":true,"nodes":[{"content":"BaseGetAllKeys()","pos":[0,16]}]},{"pos":[62244,62258],"content":"BaseGetAllKeys","needQuote":true,"nodes":[{"content":"BaseGetAllKeys","pos":[0,14]}]},{"pos":[62354,62355],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62382,62383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62501,62515],"content":"BaseGetAllKeys","needQuote":true,"nodes":[{"content":"BaseGetAllKeys","pos":[0,14]}]},{"pos":[62611,62612],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62639,62640],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62975,62993],"content":"BaseGetAllValues()","needQuote":true,"nodes":[{"content":"BaseGetAllValues()","pos":[0,18]}]},{"pos":[63188,63204],"content":"BaseGetAllValues","needQuote":true,"nodes":[{"content":"BaseGetAllValues","pos":[0,16]}]},{"pos":[63302,63303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63330,63331],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63451,63467],"content":"BaseGetAllValues","needQuote":true,"nodes":[{"content":"BaseGetAllValues","pos":[0,16]}]},{"pos":[63565,63566],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63593,63594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63945,63967],"content":"BaseGetAllValues(Type)","needQuote":true,"nodes":[{"content":"BaseGetAllValues(Type)","pos":[0,22]}]},{"pos":[64186,64202],"content":"BaseGetAllValues","needQuote":true,"nodes":[{"content":"BaseGetAllValues","pos":[0,16]}]},{"pos":[64300,64301],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64349,64353],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[64411,64412],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64545,64561],"content":"BaseGetAllValues","needQuote":true,"nodes":[{"content":"BaseGetAllValues","pos":[0,16]}]},{"pos":[64659,64660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64708,64712],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[64770,64771],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65134,65151],"content":"BaseGetKey(Int32)","needQuote":true,"nodes":[{"content":"BaseGetKey(Int32)","pos":[0,17]}]},{"pos":[65360,65370],"content":"BaseGetKey","needQuote":true,"nodes":[{"content":"BaseGetKey","pos":[0,10]}]},{"pos":[65462,65463],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65512,65517],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[65576,65577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65705,65715],"content":"BaseGetKey","needQuote":true,"nodes":[{"content":"BaseGetKey","pos":[0,10]}]},{"pos":[65807,65808],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65857,65862],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[65921,65922],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66263,66276],"content":"BaseHasKeys()","needQuote":true,"nodes":[{"content":"BaseHasKeys()","pos":[0,13]}]},{"pos":[66461,66472],"content":"BaseHasKeys","needQuote":true,"nodes":[{"content":"BaseHasKeys","pos":[0,11]}]},{"pos":[66565,66566],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66593,66594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66709,66720],"content":"BaseHasKeys","needQuote":true,"nodes":[{"content":"BaseHasKeys","pos":[0,11]}]},{"pos":[66813,66814],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66841,66842],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67179,67197],"content":"BaseRemove(String)","needQuote":true,"nodes":[{"content":"BaseRemove(String)","pos":[0,18]}]},{"pos":[67408,67418],"content":"BaseRemove","needQuote":true,"nodes":[{"content":"BaseRemove","pos":[0,10]}]},{"pos":[67510,67511],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67561,67567],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[67627,67628],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67757,67767],"content":"BaseRemove","needQuote":true,"nodes":[{"content":"BaseRemove","pos":[0,10]}]},{"pos":[67859,67860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67910,67916],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[67976,67977],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68334,68353],"content":"BaseRemoveAt(Int32)","needQuote":true,"nodes":[{"content":"BaseRemoveAt(Int32)","pos":[0,19]}]},{"pos":[68566,68578],"content":"BaseRemoveAt","needQuote":true,"nodes":[{"content":"BaseRemoveAt","pos":[0,12]}]},{"pos":[68672,68673],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68722,68727],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[68786,68787],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68917,68929],"content":"BaseRemoveAt","needQuote":true,"nodes":[{"content":"BaseRemoveAt","pos":[0,12]}]},{"pos":[69023,69024],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69073,69078],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69137,69138],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69506,69528],"content":"BaseSet(Int32, Object)","needQuote":true,"nodes":[{"content":"BaseSet(Int32, Object)","pos":[0,22]}]},{"pos":[69760,69767],"content":"BaseSet","needQuote":true,"nodes":[{"content":"BaseSet","pos":[0,7]}]},{"pos":[69856,69857],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69906,69911],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[69971,69972]},{"pos":[70027,70033],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70093,70094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70233,70240],"content":"BaseSet","needQuote":true,"nodes":[{"content":"BaseSet","pos":[0,7]}]},{"pos":[70329,70330],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70379,70384],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[70444,70445]},{"pos":[70500,70506],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70566,70567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70948,70971],"content":"BaseSet(String, Object)","needQuote":true,"nodes":[{"content":"BaseSet(String, Object)","pos":[0,23]}]},{"pos":[71205,71212],"content":"BaseSet","needQuote":true,"nodes":[{"content":"BaseSet","pos":[0,7]}]},{"pos":[71301,71302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71352,71358],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[71419,71420]},{"pos":[71475,71481],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71541,71542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71682,71689],"content":"BaseSet","needQuote":true,"nodes":[{"content":"BaseSet","pos":[0,7]}]},{"pos":[71778,71779],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71829,71835],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[71896,71897]},{"pos":[71952,71958],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72018,72019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72380,72395],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[72584,72597],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[72692,72693],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72720,72721],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72838,72851],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[72946,72947],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72974,72975],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73355,73387],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"pos":[73740,73758],"content":"ICollection.CopyTo","needQuote":true,"nodes":[{"content":"ICollection.CopyTo","pos":[0,18]}]},{"pos":[73877,73878],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73927,73932],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[73992,73993]},{"pos":[74047,74052],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74111,74112],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74280,74317],"content":"System.Collections.ICollection.CopyTo","needQuote":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo","pos":[0,37]}]},{"pos":[74436,74437],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74486,74491],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[74551,74552]},{"pos":[74606,74611],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74670,74671],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75075,75085],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[75180,75188],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[75257,75258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75285,75286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75356,75364],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[75433,75434],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75461,75462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75645,75659],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[75778,75784],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[75851,75852],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75902,75908],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75968,75969],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76052,76058],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[76125,76126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76176,76182],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76242,76243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76457,76479],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[76627,76633],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[76700,76701],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76751,76757],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[76818,76819]},{"pos":[76874,76880],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76940,76941],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77038,77044],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[77111,77112],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77162,77168],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[77229,77230]},{"pos":[77285,77291],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77351,77352],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77597,77628],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[77794,77809],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[77885,77886],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77936,77942],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[78003,78004]},{"pos":[78059,78065],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78125,78126],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78232,78247],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[78323,78324],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78374,78380],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[78441,78442]},{"pos":[78497,78503],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78563,78564],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78794,78807],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[78908,78919],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[78991,78992],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79019,79020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79093,79104],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[79176,79177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79204,79205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79380,79389],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[79482,79489],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[79557,79558],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79585,79586],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79655,79662],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[79730,79731],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79758,79759],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79934,79951],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[80060,80075],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[80151,80152],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80179,80180],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80257,80272],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[80348,80349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80376,80377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80672,80685],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[80802,80813],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[80872,80873],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80900,80901],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80982,80993],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[81052,81053],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81080,81081],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81436,81448],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[81581,81591],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[81658,81659],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81686,81687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81776,81786],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[81853,81854],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81881,81882],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82223,82238],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[82442,82455],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[82517,82518],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82545,82546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82624,82640],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[82705,82706],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82733,82734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83112,83129],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[83341,83356],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[83420,83421],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83448,83449],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83529,83547],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[83614,83615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83642,83643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83878,83884],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[84003,84021],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[84222,84246],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[84425,84436],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[84495,84496],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84563,84574],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[84651,84652],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84765,84776],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[84835,84836],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84903,84914],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[84991,84992],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85220,85229],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[85435,85458],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[85653,85663],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[85730,85731],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85798,85809],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[85886,85887],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86008,86018],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[86085,86086],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86153,86164],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[86241,86242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86495,86513],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[86735,86761],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[87068,87081],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[87143,87144],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87211,87222],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[87299,87300],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87410,87426],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[87491,87492],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87559,87570],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[87647,87648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87937,87947],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[88147,88175],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[88490,88505],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[88569,88570],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88637,88648],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[88725,88726],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88838,88856],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[88923,88924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88991,89002],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[89079,89080],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89342,89353],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[89534,89551],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[89814,89833],"content":"NameValueCollection","needQuote":true,"nodes":[{"content":"NameValueCollection","pos":[0,19]}]},{"pos":[90064,90069],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[90176,90184],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[90312,90318],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[90379,90381]},{"pos":[90446,90452],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[90512,90514],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[90651,90657],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[90801,90806],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[90949,90956],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[91102,91123],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[91317,91344],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[91567,91588],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[91789,91806],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[91981,92001],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]}],"content":"items:\n- uid: System.Collections.Specialized.NameValueCollection\n  commentId: T:System.Collections.Specialized.NameValueCollection\n  id: NameValueCollection\n  parent: System.Collections.Specialized\n  children:\n  - System.Collections.Specialized.NameValueCollection.#ctor\n  - System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IEqualityComparer)\n  - System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.Specialized.NameValueCollection)\n  - System.Collections.Specialized.NameValueCollection.#ctor(System.Int32)\n  - System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  - System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)\n  - System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)\n  - System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)\n  - System.Collections.Specialized.NameValueCollection.AllKeys\n  - System.Collections.Specialized.NameValueCollection.Clear\n  - System.Collections.Specialized.NameValueCollection.CopyTo(System.Array,System.Int32)\n  - System.Collections.Specialized.NameValueCollection.Get(System.Int32)\n  - System.Collections.Specialized.NameValueCollection.Get(System.String)\n  - System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)\n  - System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)\n  - System.Collections.Specialized.NameValueCollection.GetValues(System.String)\n  - System.Collections.Specialized.NameValueCollection.HasKeys\n  - System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays\n  - System.Collections.Specialized.NameValueCollection.Item(System.Int32)\n  - System.Collections.Specialized.NameValueCollection.Item(System.String)\n  - System.Collections.Specialized.NameValueCollection.Remove(System.String)\n  - System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)\n  langs:\n  - csharp\n  - vb\n  name: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n  type: Class\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NameValueCollection\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 18\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Represents a collection of associated <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> keys and <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that can be accessed either with the key or with the index.</p>\\n\"\n  syntax:\n    content: 'public class NameValueCollection : NameObjectCollectionBase, ICollection, IEnumerable'\n    content.vb: >-\n      Public Class NameValueCollection\n          Inherits NameObjectCollectionBase\n          Implements ICollection, IEnumerable\n  seealso:\n  - type: System.Collections.Specialized.NameObjectCollectionBase\n    commentId: T:System.Collections.Specialized.NameObjectCollectionBase\n  inheritance:\n  - System.Object\n  - System.Collections.Specialized.NameObjectCollectionBase\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Collections.Specialized.NameObjectCollectionBase.Count\n  - System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly\n  - System.Collections.Specialized.NameObjectCollectionBase.Keys\n  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseClear\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)\n  - System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: NameValueCollection\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.Specialized.NameValueCollection.#ctor\n  commentId: M:System.Collections.Specialized.NameValueCollection.#ctor\n  id: '#ctor'\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: NameValueCollection()\n  fullName: System.Collections.Specialized.NameValueCollection.NameValueCollection()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 32\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the default initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.</p>\\n\"\n  syntax:\n    content: public NameValueCollection()\n    content.vb: Public Sub New\n  seealso:\n  - type: System.Collections.CaseInsensitiveHashCodeProvider\n    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider\n  - type: System.Collections.CaseInsensitiveComparer\n    commentId: T:System.Collections.CaseInsensitiveComparer\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NameValueCollection.NameValueCollection()\n- uid: System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IEqualityComparer)\n  id: '#ctor(System.Collections.IEqualityComparer)'\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: NameValueCollection(IEqualityComparer)\n  fullName: System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Collections.IEqualityComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 56\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the default initial capacity, and uses the specified <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public NameValueCollection(IEqualityComparer equalityComparer)\n    content.vb: Public Sub New(equalityComparer As IEqualityComparer)\n    parameters:\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to use to determine whether two keys are equal and to generate hash codes for the keys in the collection.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NameValueCollection.NameValueCollection(IEqualityComparer)\n- uid: System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.Specialized.NameValueCollection)\n  id: '#ctor(System.Collections.Specialized.NameValueCollection)'\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: NameValueCollection(NameValueCollection)\n  fullName: System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Collections.Specialized.NameValueCollection)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 41\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Copies the entries from the specified <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a new <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the same initial capacity as the number of entries copied and using the same hash code provider and the same comparer as the source collection.</p>\\n\"\n  syntax:\n    content: public NameValueCollection(NameValueCollection col)\n    content.vb: Public Sub New(col As NameValueCollection)\n    parameters:\n    - id: col\n      type: System.Collections.Specialized.NameValueCollection\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to copy to the new <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>col</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.CaseInsensitiveHashCodeProvider\n    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider\n  - type: System.Collections.CaseInsensitiveComparer\n    commentId: T:System.Collections.CaseInsensitiveComparer\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NameValueCollection.NameValueCollection(NameValueCollection)\n- uid: System.Collections.Specialized.NameValueCollection.#ctor(System.Int32)\n  commentId: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: NameValueCollection(Int32)\n  fullName: System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 52\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the specified initial capacity and uses the default case-insensitive hash code provider and the default case-insensitive comparer.</p>\\n\"\n  syntax:\n    content: public NameValueCollection(int capacity)\n    content.vb: Public Sub New(capacity As Integer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The initial number of entries that the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can contain.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n\"\n  seealso:\n  - type: System.Collections.CaseInsensitiveHashCodeProvider\n    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider\n  - type: System.Collections.CaseInsensitiveComparer\n    commentId: T:System.Collections.CaseInsensitiveComparer\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NameValueCollection.NameValueCollection(Int32)\n- uid: System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: NameValueCollection(Int32, IEqualityComparer)\n  fullName: System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Int32, System.Collections.IEqualityComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 60\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the specified initial capacity, and uses the specified <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public NameValueCollection(int capacity, IEqualityComparer equalityComparer)\n    content.vb: Public Sub New(capacity As Integer, equalityComparer As IEqualityComparer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The initial number of entries that the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can contain.</p>\\n\"\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to use to determine whether two keys are equal and to generate hash codes for the keys in the collection.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NameValueCollection.NameValueCollection(Int32, IEqualityComparer)\n- uid: System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)\n  id: '#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)'\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: NameValueCollection(Int32, NameValueCollection)\n  fullName: System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Int32, System.Collections.Specialized.NameValueCollection)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 71\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Copies the entries from the specified <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a new <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified initial capacity or the same initial capacity as the number of entries copied, whichever is greater, and using the default case-insensitive hash code provider and the default case-insensitive comparer.</p>\\n\"\n  syntax:\n    content: public NameValueCollection(int capacity, NameValueCollection col)\n    content.vb: Public Sub New(capacity As Integer, col As NameValueCollection)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The initial number of entries that the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can contain.</p>\\n\"\n    - id: col\n      type: System.Collections.Specialized.NameValueCollection\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to copy to the new <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>col</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.CaseInsensitiveHashCodeProvider\n    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider\n  - type: System.Collections.CaseInsensitiveComparer\n    commentId: T:System.Collections.CaseInsensitiveComparer\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NameValueCollection.NameValueCollection(Int32, NameValueCollection)\n- uid: System.Collections.Specialized.NameValueCollection.AllKeys\n  commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys\n  id: AllKeys\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: AllKeys\n  fullName: System.Collections.Specialized.NameValueCollection.AllKeys\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AllKeys\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 381\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets all the keys in the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual string[] AllKeys { get; }\n    content.vb: Public Overridable ReadOnly Property AllKeys As String()\n    parameters: []\n    return:\n      type: System.String[]\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that contains all the keys of the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)\n    commentId: M:System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)\n  - type: System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays\n    commentId: M:System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: NameValueCollection.AllKeys\n- uid: System.Collections.Specialized.NameValueCollection.Item(System.Int32)\n  commentId: P:System.Collections.Specialized.NameValueCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Collections.Specialized.NameValueCollection.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 366\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the entry at the specified index of the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public string this[int index] { get; }\n    content.vb: Public ReadOnly Property Item(index As Integer) As String\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the entry to locate in the collection.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the comma-separated list of values at the specified index of the collection.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection.</p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameValueCollection.Get(System.Int32)\n    commentId: M:System.Collections.Specialized.NameValueCollection.Get(System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.Specialized.NameValueCollection.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: NameValueCollection.Item[Int32]\n  nameWithType.vb: NameValueCollection.Item(Int32)\n- uid: System.Collections.Specialized.NameValueCollection.Item(System.String)\n  commentId: P:System.Collections.Specialized.NameValueCollection.Item(System.String)\n  id: Item(System.String)\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.Collections.Specialized.NameValueCollection.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 318\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets or sets the entry with the specified key in the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public string this[string name] { get; set; }\n    content.vb: Public Property Item(name As String) As String\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> key of the entry to locate. The key can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the comma-separated list of values associated with the specified key, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only and the operation attempts to modify the collection. </p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameValueCollection.Get(System.Int32)\n    commentId: M:System.Collections.Specialized.NameValueCollection.Get(System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.Specialized.NameValueCollection.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: NameValueCollection.Item[String]\n  nameWithType.vb: NameValueCollection.Item(String)\n- uid: System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)\n  commentId: M:System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)\n  id: Add(System.Collections.Specialized.NameValueCollection)\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: Add(NameValueCollection)\n  fullName: System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 140\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Copies the entries in the specified <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the current <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Add(NameValueCollection c)\n    content.vb: Public Sub Add(c As NameValueCollection)\n    parameters:\n    - id: c\n      type: System.Collections.Specialized.NameValueCollection\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to copy to the current <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>c</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)\n    commentId: M:System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NameValueCollection.Add(NameValueCollection)\n- uid: System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)\n  commentId: M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)\n  id: Add(System.String,System.String)\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: Add(String, String)\n  fullName: System.Collections.Specialized.NameValueCollection.Add(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 247\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Adds an entry with the specified name and value to the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Add(string name, string value)\n    content.vb: Public Overridable Sub Add(name As String, value As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> key of the entry to add. The key can be <strong>null</strong>.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of the entry to add. The value can be <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NameValueCollection.Add(String, String)\n- uid: System.Collections.Specialized.NameValueCollection.Clear\n  commentId: M:System.Collections.Specialized.NameValueCollection.Clear\n  id: Clear\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.Specialized.NameValueCollection.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 172\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Invalidates the cached arrays and removes all entries from the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Clear()\n    content.vb: Public Overridable Sub Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays\n    commentId: M:System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NameValueCollection.Clear()\n- uid: System.Collections.Specialized.NameValueCollection.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Specialized.NameValueCollection.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.Specialized.NameValueCollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 181\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Copies the entire <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a compatible one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at the specified index of the target array.</p>\\n\"\n  syntax:\n    content: public void CopyTo(Array dest, int index)\n    content.vb: Public Sub CopyTo(dest As Array, index As Integer)\n    parameters:\n    - id: dest\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>dest</em> at which copying begins.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>dest</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>dest</em> is multidimensional.</p>\\n<p>-or- </p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>dest</em>.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>dest</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NameValueCollection.CopyTo(Array, Int32)\n- uid: System.Collections.Specialized.NameValueCollection.Get(System.Int32)\n  commentId: M:System.Collections.Specialized.NameValueCollection.Get(System.Int32)\n  id: Get(System.Int32)\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: Get(Int32)\n  fullName: System.Collections.Specialized.NameValueCollection.Get(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Get\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 340\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the values at the specified index of the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> combined into one comma-separated list.</p>\\n\"\n  syntax:\n    content: public virtual string Get(int index)\n    content.vb: Public Overridable Function Get(index As Integer) As String\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the entry that contains the values to get from the collection.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains a comma-separated list of the values at the specified index of the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection.</p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameValueCollection.GetValues(System.String)\n    commentId: M:System.Collections.Specialized.NameValueCollection.GetValues(System.String)\n  - type: System.Collections.Specialized.NameValueCollection.AllKeys\n    commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NameValueCollection.Get(Int32)\n- uid: System.Collections.Specialized.NameValueCollection.Get(System.String)\n  commentId: M:System.Collections.Specialized.NameValueCollection.Get(System.String)\n  id: Get(System.String)\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: Get(String)\n  fullName: System.Collections.Specialized.NameValueCollection.Get(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Get\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 275\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the values associated with the specified key from the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> combined into one comma-separated list.</p>\\n\"\n  syntax:\n    content: public virtual string Get(string name)\n    content.vb: Public Overridable Function Get(name As String) As String\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> key of the entry that contains the values to get. The key can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains a comma-separated list of the values associated with the specified key from the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameValueCollection.GetValues(System.String)\n    commentId: M:System.Collections.Specialized.NameValueCollection.GetValues(System.String)\n  - type: System.Collections.Specialized.NameValueCollection.AllKeys\n    commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NameValueCollection.Get(String)\n- uid: System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)\n  commentId: M:System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)\n  id: GetKey(System.Int32)\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: GetKey(Int32)\n  fullName: System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetKey\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 358\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the key at the specified index of the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual string GetKey(int index)\n    content.vb: Public Overridable Function GetKey(index As Integer) As String\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the key to get from the collection.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the key at the specified index of the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection. </p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameValueCollection.AllKeys\n    commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NameValueCollection.GetKey(Int32)\n- uid: System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)\n  commentId: M:System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)\n  id: GetValues(System.Int32)\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: GetValues(Int32)\n  fullName: System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValues\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 349\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the values at the specified index of the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual string[] GetValues(int index)\n    content.vb: Public Overridable Function GetValues(index As Integer) As String()\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the entry that contains the values to get from the collection.</p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that contains the values at the specified index of the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection. </p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameValueCollection.Get(System.String)\n    commentId: M:System.Collections.Specialized.NameValueCollection.Get(System.String)\n  - type: System.Collections.Specialized.NameValueCollection.AllKeys\n    commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NameValueCollection.GetValues(Int32)\n- uid: System.Collections.Specialized.NameValueCollection.GetValues(System.String)\n  commentId: M:System.Collections.Specialized.NameValueCollection.GetValues(System.String)\n  id: GetValues(System.String)\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: GetValues(String)\n  fullName: System.Collections.Specialized.NameValueCollection.GetValues(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValues\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 284\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the values associated with the specified key from the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual string[] GetValues(string name)\n    content.vb: Public Overridable Function GetValues(name As String) As String()\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> key of the entry that contains the values to get. The key can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that contains the values associated with the specified key from the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameValueCollection.Get(System.String)\n    commentId: M:System.Collections.Specialized.NameValueCollection.Get(System.String)\n  - type: System.Collections.Specialized.NameValueCollection.AllKeys\n    commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NameValueCollection.GetValues(String)\n- uid: System.Collections.Specialized.NameValueCollection.HasKeys\n  commentId: M:System.Collections.Specialized.NameValueCollection.HasKeys\n  id: HasKeys\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: HasKeys()\n  fullName: System.Collections.Specialized.NameValueCollection.HasKeys()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasKeys\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 226\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains keys that are not <strong>null</strong>.</p>\\n\"\n  syntax:\n    content: public bool HasKeys()\n    content.vb: Public Function HasKeys As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains keys that are not <strong>null</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NameValueCollection.HasKeys()\n- uid: System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays\n  commentId: M:System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays\n  id: InvalidateCachedArrays\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: InvalidateCachedArrays()\n  fullName: System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InvalidateCachedArrays\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 90\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Resets the cached arrays of the collection to <strong>null</strong>.</p>\\n\"\n  syntax:\n    content: protected void InvalidateCachedArrays()\n    content.vb: Protected Sub InvalidateCachedArrays\n  seealso:\n  - type: System.Collections.Specialized.NameValueCollection.AllKeys\n    commentId: P:System.Collections.Specialized.NameValueCollection.AllKeys\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameValueCollection.InvalidateCachedArrays()\n- uid: System.Collections.Specialized.NameValueCollection.Remove(System.String)\n  commentId: M:System.Collections.Specialized.NameValueCollection.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: Remove(String)\n  fullName: System.Collections.Specialized.NameValueCollection.Remove(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 308\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Removes the entries with the specified key from the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public virtual void Remove(string name)\n    content.vb: Public Overridable Sub Remove(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> key of the entry to remove. The key can be <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NameValueCollection.Remove(String)\n- uid: System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)\n  commentId: M:System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)\n  id: Set(System.String,System.String)\n  parent: System.Collections.Specialized.NameValueCollection\n  langs:\n  - csharp\n  - vb\n  name: Set(String, String)\n  fullName: System.Collections.Specialized.NameValueCollection.Set(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Set\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameValueCollection.cs\n    startLine: 293\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Sets the value of an entry in the <xref href=\\\"System.Collections.Specialized.NameValueCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void Set(string name, string value)\n    content.vb: Public Overridable Sub Set(name As String, value As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> key of the entry to add the new value to. The key can be <strong>null</strong>.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the new value to add to the specified entry. The value can be <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)\n    commentId: M:System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NameValueCollection.Set(String, String)\nreferences:\n- uid: System.Collections.Specialized\n  isExternal: false\n  name: System.Collections.Specialized\n  fullName: System.Collections.Specialized\n  nameWithType: System.Collections.Specialized\n  commentId: N:System.Collections.Specialized\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Specialized.NameObjectCollectionBase\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameObjectCollectionBase\n  fullName: System.Collections.Specialized.NameObjectCollectionBase\n  nameWithType: NameObjectCollectionBase\n  commentId: T:System.Collections.Specialized.NameObjectCollectionBase\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Collections.Specialized.NameObjectCollectionBase.Count\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: false\n  name: Count\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.Count\n  nameWithType: NameObjectCollectionBase.Count\n  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.Count\n- uid: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly\n  nameWithType: NameObjectCollectionBase.IsReadOnly\n  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly\n- uid: System.Collections.Specialized.NameObjectCollectionBase.Keys\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: false\n  name: Keys\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.Keys\n  nameWithType: NameObjectCollectionBase.Keys\n  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.Keys\n- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: false\n  name: ICollection.IsSynchronized\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: NameObjectCollectionBase.ICollection.IsSynchronized\n  nameWithType.vb: NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized\n  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized\n- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: false\n  name: ICollection.SyncRoot\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.SyncRoot\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: NameObjectCollectionBase.ICollection.SyncRoot\n  nameWithType.vb: NameObjectCollectionBase.System.Collections.ICollection.SyncRoot\n  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: true\n  name: BaseAdd(String, Object)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String, System.Object)\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)\n    name: BaseAdd\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)\n    name: BaseAdd\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseAdd(String, Object)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: false\n  name: BaseClear()\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseClear()\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear\n    name: BaseClear\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseClear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear\n    name: BaseClear\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseClear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseClear()\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseClear\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: true\n  name: BaseGet(Int32)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)\n    name: BaseGet\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)\n    name: BaseGet\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseGet(Int32)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: true\n  name: BaseGet(String)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)\n    name: BaseGet\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)\n    name: BaseGet\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseGet(String)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: false\n  name: BaseGetAllKeys()\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys()\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys\n    name: BaseGetAllKeys\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys\n    name: BaseGetAllKeys\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseGetAllKeys()\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: false\n  name: BaseGetAllValues()\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues()\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\n    name: BaseGetAllValues\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\n    name: BaseGetAllValues\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseGetAllValues()\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: true\n  name: BaseGetAllValues(Type)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)\n    name: BaseGetAllValues\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)\n    name: BaseGetAllValues\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseGetAllValues(Type)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: true\n  name: BaseGetKey(Int32)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)\n    name: BaseGetKey\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)\n    name: BaseGetKey\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseGetKey(Int32)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: false\n  name: BaseHasKeys()\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys()\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\n    name: BaseHasKeys\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\n    name: BaseHasKeys\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseHasKeys()\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: true\n  name: BaseRemove(String)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)\n    name: BaseRemove\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)\n    name: BaseRemove\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseRemove(String)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: true\n  name: BaseRemoveAt(Int32)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)\n    name: BaseRemoveAt\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)\n    name: BaseRemoveAt\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseRemoveAt(Int32)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: true\n  name: BaseSet(Int32, Object)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32, System.Object)\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)\n    name: BaseSet\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)\n    name: BaseSet\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseSet(Int32, Object)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: true\n  name: BaseSet(String, Object)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String, System.Object)\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)\n    name: BaseSet\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)\n    name: BaseSet\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.BaseSet(String, Object)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.GetEnumerator()\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  isExternal: true\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  spec.csharp:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n    name: ICollection.CopyTo\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n    name: System.Collections.ICollection.CopyTo\n    fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: NameObjectCollectionBase.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: NameObjectCollectionBase.System.Collections.ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n  nameWithType: IEqualityComparer\n  commentId: T:System.Collections.IEqualityComparer\n- uid: System.Collections.Specialized.NameValueCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameValueCollection\n  fullName: System.Collections.Specialized.NameValueCollection\n  nameWithType: NameValueCollection\n  commentId: T:System.Collections.Specialized.NameValueCollection\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n"}