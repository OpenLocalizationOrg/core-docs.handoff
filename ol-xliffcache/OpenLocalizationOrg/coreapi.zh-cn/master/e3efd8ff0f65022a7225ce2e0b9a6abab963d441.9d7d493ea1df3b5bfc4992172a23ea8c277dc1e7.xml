{"nodes":[{"pos":[20782,20792],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[22308,22381],"content":"Aggregate<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>)","needQuote":true,"nodes":[{"content":"Aggregate&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TSource, TSource&gt;)","pos":[0,73],"source":"Aggregate<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>)"}]},{"content":"\\n&lt;p&gt;An accumulator function to be invoked on each element.&lt;/p&gt;\\n","pos":[23552,23617],"source":"\\n<p>An accumulator function to be invoked on each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[23677,23732],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The final accumulator value.&lt;/p&gt;\\n","pos":[23790,23829],"source":"\\n<p>The final accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;func&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23948,24019],"source":"\\n<p>\\n<em>source</em> or <em>func</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[24132,24182],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[25156,25263],"content":"Aggregate<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)","needQuote":true,"nodes":[{"content":"Aggregate&lt;TSource, TAccumulate&gt;(IEnumerable&lt;TSource&gt;, TAccumulate, Func&lt;TAccumulate, TSource, TAccumulate&gt;)","pos":[0,107],"source":"Aggregate<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)"}]},{"content":"\\n&lt;p&gt;The initial accumulator value.&lt;/p&gt;\\n","pos":[26597,26638],"source":"\\n<p>The initial accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;An accumulator function to be invoked on each element.&lt;/p&gt;\\n","pos":[26738,26803],"source":"\\n<p>An accumulator function to be invoked on each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[26863,26918],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the accumulator value.&lt;/p&gt;\\n","pos":[26962,27007],"source":"\\n<p>The type of the accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The final accumulator value.&lt;/p&gt;\\n","pos":[27069,27108],"source":"\\n<p>The final accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;func&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27227,27298],"source":"\\n<p>\\n<em>source</em> or <em>func</em> is <strong>null</strong>.</p>\\n"},{"pos":[28471,28615],"content":"Aggregate<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)","needQuote":true,"nodes":[{"content":"Aggregate&lt;TSource, TAccumulate, TResult&gt;(IEnumerable&lt;TSource&gt;, TAccumulate, Func&lt;TAccumulate, TSource, TAccumulate&gt;, Func&lt;TAccumulate, TResult&gt;)","pos":[0,144],"source":"Aggregate<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)"}]},{"content":"\\n&lt;p&gt;The initial accumulator value.&lt;/p&gt;\\n","pos":[30158,30199],"source":"\\n<p>The initial accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;An accumulator function to be invoked on each element.&lt;/p&gt;\\n","pos":[30299,30364],"source":"\\n<p>An accumulator function to be invoked on each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to transform the final accumulator value into the result value.&lt;/p&gt;\\n","pos":[30460,30545],"source":"\\n<p>A function to transform the final accumulator value into the result value.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[30605,30660],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the accumulator value.&lt;/p&gt;\\n","pos":[30704,30749],"source":"\\n<p>The type of the accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the resulting value.&lt;/p&gt;\\n","pos":[30789,30832],"source":"\\n<p>The type of the resulting value.</p>\\n"},{"content":"\\n&lt;p&gt;The transformed final accumulator value.&lt;/p&gt;\\n","pos":[30890,30941],"source":"\\n<p>The transformed final accumulator value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;func&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[31060,31158],"source":"\\n<p>\\n<em>source</em> or <em>func</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[32423,32481],"content":"All<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"All&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,58],"source":"All<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[33665,33724],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[33784,33839],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[33900,34082],"source":"\\n<p>\\n<strong>true</strong> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[34201,34277],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[35093,35127],"content":"Any<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Any&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,34],"source":"Any<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[36127,36182],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the source sequence contains any elements; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36243,36358],"source":"\\n<p>\\n<strong>true</strong> if the source sequence contains any elements; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36477,36531],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[37576,37634],"content":"Any<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"Any&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,58],"source":"Any<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[38807,38866],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[38926,38981],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if any elements in the source sequence pass the test in the specified predicate; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39042,39192],"source":"\\n<p>\\n<strong>true</strong> if any elements in the source sequence pass the test in the specified predicate; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39311,39387],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[40230,40273],"content":"AsEnumerable<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"AsEnumerable&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,43],"source":"AsEnumerable<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[41414,41469],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"pos":[42474,42503],"content":"Average(IEnumerable<Decimal>)","needQuote":true,"nodes":[{"content":"Average(IEnumerable&lt;Decimal&gt;)","pos":[0,29],"source":"Average(IEnumerable<Decimal>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[43569,43618],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[43737,43791],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[43904,43954],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[44662,44690],"content":"Average(IEnumerable<Double>)","needQuote":true,"nodes":[{"content":"Average(IEnumerable&lt;Double&gt;)","pos":[0,28],"source":"Average(IEnumerable<Double>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[45747,45796],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[45915,45969],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[46082,46132],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[46833,46860],"content":"Average(IEnumerable<Int32>)","needQuote":true,"nodes":[{"content":"Average(IEnumerable&lt;Int32&gt;)","pos":[0,27],"source":"Average(IEnumerable<Int32>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[47911,47960],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[48079,48133],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[48246,48296],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[48993,49020],"content":"Average(IEnumerable<Int64>)","needQuote":true,"nodes":[{"content":"Average(IEnumerable&lt;Int64&gt;)","pos":[0,27],"source":"Average(IEnumerable<Int64>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[50069,50118],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[50237,50291],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[50404,50454],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[51208,51247],"content":"Average(IEnumerable<Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Average(IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;)","pos":[0,39],"source":"Average(IEnumerable<Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[52389,52551],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[52670,52724],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[53786,53824],"content":"Average(IEnumerable<Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Average(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)","pos":[0,38],"source":"Average(IEnumerable<Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54957,55119],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[55238,55292],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[56100,56137],"content":"Average(IEnumerable<Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Average(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)","pos":[0,37],"source":"Average(IEnumerable<Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57264,57426],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57545,57599],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[58648,58685],"content":"Average(IEnumerable<Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Average(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)","pos":[0,37],"source":"Average(IEnumerable<Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[59810,59972],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60091,60145],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[61197,61235],"content":"Average(IEnumerable<Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Average(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)","pos":[0,38],"source":"Average(IEnumerable<Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[62366,62528],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[62647,62701],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[63461,63489],"content":"Average(IEnumerable<Single>)","needQuote":true,"nodes":[{"content":"Average(IEnumerable&lt;Single&gt;)","pos":[0,28],"source":"Average(IEnumerable<Single>)"}]},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[64544,64593],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[64712,64766],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[64879,64929],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[65708,65770],"content":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Decimal&gt;)","pos":[0,62],"source":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate an average.&lt;/p&gt;\\n","pos":[66857,66927],"source":"\\n<p>A sequence of values that are used to calculate an average.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[67018,67075],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[67135,67190],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[67251,67300],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[67419,67494],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[67607,67657],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[68841,68902],"content":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Double>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Double&gt;)","pos":[0,61],"source":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Double>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[69983,70043],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[70133,70190],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[70250,70305],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[70365,70414],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[70533,70608],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[70721,70771],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[71701,71761],"content":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int32&gt;)","pos":[0,60],"source":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[72838,72898],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[72987,73044],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[73104,73159],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[73219,73268],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[73387,73462],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[73575,73625],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[74796,74856],"content":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int64&gt;)","pos":[0,60],"source":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[75931,75991],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[76080,76137],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of source.&lt;/p&gt;\\n","pos":[76197,76243],"source":"\\n<p>The type of the elements of source.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[76303,76352],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[76471,76546],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[76659,76709],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[77937,78009],"content":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;)","pos":[0,72],"source":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[79129,79189],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[79297,79354],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[79414,79469],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[79547,79709],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[79828,79903],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[81194,81265],"content":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Double&gt;&gt;)","pos":[0,71],"source":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[82379,82439],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[82546,82603],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[82663,82718],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[82795,82957],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[83076,83151],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[84188,84258],"content":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int32&gt;&gt;)","pos":[0,70],"source":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[85368,85428],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[85534,85591],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[85651,85706],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[85783,85945],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[86064,86139],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[87417,87487],"content":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int64&gt;&gt;)","pos":[0,70],"source":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[88595,88655],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[88761,88818],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[88878,88933],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[89010,89172],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n"},{"pos":[90208,90279],"content":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Single&gt;&gt;)","pos":[0,71],"source":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[91391,91451],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[91558,91615],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[91675,91730],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values, or &lt;strong&gt;null&lt;/strong&gt; if the source sequence is empty or contains only values that are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[91807,91969],"source":"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[92088,92163],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[93152,93213],"content":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Single>)","needQuote":true,"nodes":[{"content":"Average&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Single&gt;)","pos":[0,61],"source":"Average<TSource>(IEnumerable<TSource>, Func<TSource, Single>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to calculate the average of.&lt;/p&gt;\\n","pos":[94292,94352],"source":"\\n<p>A sequence of values to calculate the average of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[94442,94499],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[94559,94614],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The average of the sequence of values.&lt;/p&gt;\\n","pos":[94674,94723],"source":"\\n<p>The average of the sequence of values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[94842,94917],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[95030,95080],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[95872,95898],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"content":"\\n&lt;p&gt;The type to cast the elements of &lt;em&gt;source&lt;/em&gt; to.&lt;/p&gt;\\n","pos":[96993,97056],"source":"\\n<p>The type to cast the elements of <em>source</em> to.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[97463,97517],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An element in the sequence cannot be cast to type &lt;em&gt;TResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[97620,97698],"source":"\\n<p>An element in the sequence cannot be cast to type <em>TResult</em>.</p>\\n"},{"pos":[98487,98546],"content":"Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Concat&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,59],"source":"Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The first sequence to concatenate.&lt;/p&gt;\\n","pos":[99476,99521],"source":"\\n<p>The first sequence to concatenate.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to concatenate to the first sequence.&lt;/p&gt;\\n","pos":[99622,99683],"source":"\\n<p>The sequence to concatenate to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[99743,99802],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[100199,100271],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n"},{"pos":[101125,101171],"content":"Append<TSource>(IEnumerable<TSource>, TSource)","needQuote":true,"nodes":[{"content":"Append&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, TSource)","pos":[0,46],"source":"Append<TSource>(IEnumerable<TSource>, TSource)"}]},{"pos":[102886,102933],"content":"Prepend<TSource>(IEnumerable<TSource>, TSource)","needQuote":true,"nodes":[{"content":"Prepend&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, TSource)","pos":[0,47],"source":"Prepend<TSource>(IEnumerable<TSource>, TSource)"}]},{"pos":[104659,104707],"content":"Contains<TSource>(IEnumerable<TSource>, TSource)","needQuote":true,"nodes":[{"content":"Contains&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, TSource)","pos":[0,48],"source":"Contains<TSource>(IEnumerable<TSource>, TSource)"}]},{"content":"\\n&lt;p&gt;A sequence in which to locate a value.&lt;/p&gt;\\n","pos":[105616,105665],"source":"\\n<p>A sequence in which to locate a value.</p>\\n"},{"content":"\\n&lt;p&gt;The value to locate in the sequence.&lt;/p&gt;\\n","pos":[105727,105774],"source":"\\n<p>The value to locate in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[105834,105889],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the source sequence contains an element that has the specified value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[105950,106092],"source":"\\n<p>\\n<strong>true</strong> if the source sequence contains an element that has the specified value; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[106211,106265],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[107195,107271],"content":"Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Contains&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, TSource, IEqualityComparer&lt;TSource&gt;)","pos":[0,76],"source":"Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence in which to locate a value.&lt;/p&gt;\\n","pos":[108404,108453],"source":"\\n<p>A sequence in which to locate a value.</p>\\n"},{"content":"\\n&lt;p&gt;The value to locate in the sequence.&lt;/p&gt;\\n","pos":[108515,108562],"source":"\\n<p>The value to locate in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;An equality comparer to compare values.&lt;/p&gt;\\n","pos":[108671,108721],"source":"\\n<p>An equality comparer to compare values.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[108781,108836],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the source sequence contains an element that has the specified value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[108897,109039],"source":"\\n<p>\\n<strong>true</strong> if the source sequence contains an element that has the specified value; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[109158,109212],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[110119,110155],"content":"Count<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Count&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,36],"source":"Count<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence that contains elements to be counted.&lt;/p&gt;\\n","pos":[110956,111015],"source":"\\n<p>A sequence that contains elements to be counted.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[111075,111130],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the input sequence.&lt;/p&gt;\\n","pos":[111189,111245],"source":"\\n<p>The number of elements in the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[111364,111418],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[112472,112532],"content":"Count<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"Count&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,60],"source":"Count<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A sequence that contains elements to be tested and counted.&lt;/p&gt;\\n","pos":[113494,113564],"source":"\\n<p>A sequence that contains elements to be tested and counted.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[113656,113715],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[113775,113830],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A number that represents how many elements in the sequence satisfy the condition in the predicate function.&lt;/p&gt;\\n","pos":[113889,114007],"source":"\\n<p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[114126,114202],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[115306,115351],"content":"DefaultIfEmpty<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,45],"source":"DefaultIfEmpty<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to return a default value for if it is empty.&lt;/p&gt;\\n","pos":[116312,116381],"source":"\\n<p>The sequence to return a default value for if it is empty.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[116441,116496],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[116951,117005],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[117791,117845],"content":"DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)","needQuote":true,"nodes":[{"content":"DefaultIfEmpty&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, TSource)","pos":[0,54],"source":"DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)"}]},{"content":"\\n&lt;p&gt;The sequence to return the specified value for if it is empty.&lt;/p&gt;\\n","pos":[118847,118920],"source":"\\n<p>The sequence to return the specified value for if it is empty.</p>\\n"},{"content":"\\n&lt;p&gt;The value to return if the sequence is empty.&lt;/p&gt;\\n","pos":[118989,119045],"source":"\\n<p>The value to return if the sequence is empty.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[119105,119160],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"pos":[120255,120294],"content":"Distinct<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Distinct&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,39],"source":"Distinct<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to remove duplicate elements from.&lt;/p&gt;\\n","pos":[121194,121252],"source":"\\n<p>The sequence to remove duplicate elements from.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[121312,121367],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[121754,121808],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[122690,122757],"content":"Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Distinct&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,67],"source":"Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;The sequence to remove duplicate elements from.&lt;/p&gt;\\n","pos":[123881,123939],"source":"\\n<p>The sequence to remove duplicate elements from.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[124247,124302],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[124689,124743],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[125665,125712],"content":"ElementAt<TSource>(IEnumerable<TSource>, Int32)","needQuote":true,"nodes":[{"content":"ElementAt&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Int32)","pos":[0,47],"source":"ElementAt<TSource>(IEnumerable<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to retrieve.&lt;/p&gt;\\n","pos":[126790,126849],"source":"\\n<p>The zero-based index of the element to retrieve.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[126909,126964],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified position in the source sequence.&lt;/p&gt;\\n","pos":[127022,127094],"source":"\\n<p>The element at the specified position in the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[127213,127267],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than 0 or greater than or equal to the number of elements in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[127384,127497],"source":"\\n<p>\\n<em>index</em> is less than 0 or greater than or equal to the number of elements in <em>source</em>.</p>\\n"},{"pos":[128337,128393],"content":"ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)","needQuote":true,"nodes":[{"content":"ElementAtOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Int32)","pos":[0,56],"source":"ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to retrieve.&lt;/p&gt;\\n","pos":[129555,129614],"source":"\\n<p>The zero-based index of the element to retrieve.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[129674,129729],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;default&lt;/strong&gt;(&lt;em&gt;TSource&lt;/em&gt;) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.&lt;/p&gt;\\n","pos":[129787,129974],"source":"\\n<p>\\n<strong>default</strong>(<em>TSource</em>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[130093,130147],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[130784,130800],"content":"Empty<TResult>()","needQuote":true,"nodes":[{"content":"Empty&lt;TResult&gt;()","pos":[0,16],"source":"Empty<TResult>()"}]},{"pos":[132700,132759],"content":"Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Except&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,59],"source":"Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[134344,134403],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the set difference of the elements of two sequences.&lt;/p&gt;\\n","pos":[134499,134587],"source":"\\n<p>A sequence that contains the set difference of the elements of two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[134706,134778],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n"},{"pos":[135902,135989],"content":"Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Except&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,87],"source":"Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[138048,138107],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the set difference of the elements of two sequences.&lt;/p&gt;\\n","pos":[138203,138291],"source":"\\n<p>A sequence that contains the set difference of the elements of two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[138410,138482],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n"},{"pos":[139469,139505],"content":"First<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"First&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,36],"source":"First<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[140512,140567],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The first element in the specified sequence.&lt;/p&gt;\\n","pos":[140625,140680],"source":"\\n<p>The first element in the specified sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[140799,140853],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\\n","pos":[140966,141006],"source":"\\n<p>The source sequence is empty.</p>\\n"},{"pos":[141813,141873],"content":"First<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"First&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,60],"source":"First<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[143052,143111],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[143171,143226],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The first element in the sequence that passes the test in the specified predicate function.&lt;/p&gt;\\n","pos":[143284,143386],"source":"\\n<p>The first element in the sequence that passes the test in the specified predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[143505,143581],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\\n","pos":[143694,143813],"source":"\\n<p>No element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>The source sequence is empty.</p>\\n"},{"pos":[144670,144715],"content":"FirstOrDefault<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"FirstOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,45],"source":"FirstOrDefault<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[145815,145870],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;default&lt;/strong&gt;(&lt;em&gt;TSource&lt;/em&gt;) if &lt;em&gt;source&lt;/em&gt; is empty; otherwise, the first element in &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[145928,146061],"source":"\\n<p>\\n<strong>default</strong>(<em>TSource</em>) if <em>source</em> is empty; otherwise, the first element in <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[146180,146234],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[147104,147173],"content":"FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"FirstOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,69],"source":"FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[148427,148486],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[148546,148601],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;default&lt;/strong&gt;(&lt;em&gt;TSource&lt;/em&gt;) if &lt;em&gt;source&lt;/em&gt; is empty or if no element passes the test specified by &lt;em&gt;predicate&lt;/em&gt;; otherwise, the first element in &lt;em&gt;source&lt;/em&gt; that passes the test specified by &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n","pos":[148659,148910],"source":"\\n<p>\\n<strong>default</strong>(<em>TSource</em>) if <em>source</em> is empty or if no element passes the test specified by <em>predicate</em>; otherwise, the first element in <em>source</em> that passes the test specified by <em>predicate</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[149029,149105],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[150040,150105],"content":"GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,65],"source":"GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[151363,151421],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[151481,151536],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[151573,151637],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[152146,152224],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[153286,153376],"content":"GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,90],"source":"GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[154812,154870],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[155173,155228],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[155265,155329],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[155840,155918],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[157029,157129],"content":"GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TElement&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;)","pos":[0,100],"source":"GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[158610,158668],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[158976,159031],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[159068,159132],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[159840,159946],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[161227,161352],"content":"GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TElement&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,125],"source":"GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[162991,163049],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[163599,163654],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[163691,163755],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[164463,164569],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[165968,166085],"content":"GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TKey, IEnumerable&lt;TSource&gt;, TResult&gt;)","pos":[0,117],"source":"GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[167590,167648],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\\n","pos":[167787,167850],"source":"\\n<p>A function to create a result value from each group.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[167910,167965],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[168002,168066],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[168106,168182],"source":"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of elements of type &lt;em&gt;TResult&lt;/em&gt; where each element represents a projection over a group and its key.&lt;/p&gt;\\n","pos":[168278,168407],"source":"\\n<p>A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n"},{"pos":[169924,170066],"content":"GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TKey, IEnumerable&lt;TSource&gt;, TResult&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,142],"source":"GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[171750,171808],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\\n","pos":[171947,172010],"source":"\\n<p>A function to create a result value from each group.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[172318,172373],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[172410,172474],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[172514,172590],"source":"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of elements of type &lt;em&gt;TResult&lt;/em&gt; where each element represents a projection over a group and its key.&lt;/p&gt;\\n","pos":[172686,172815],"source":"\\n<p>A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n"},{"pos":[174381,174534],"content":"GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TElement, TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;, Func&lt;TKey, IEnumerable&lt;TElement&gt;, TResult&gt;)","pos":[0,153],"source":"GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[176264,176322],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\\n","pos":[176709,176772],"source":"\\n<p>A function to create a result value from each group.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[176832,176887],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[176924,176988],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[177197,177273],"source":"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of elements of type &lt;em&gt;TResult&lt;/em&gt; where each element represents a projection over a group and its key.&lt;/p&gt;\\n","pos":[177369,177498],"source":"\\n<p>A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n"},{"pos":[179238,179416],"content":"GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupBy&lt;TSource, TKey, TElement, TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;, Func&lt;TKey, IEnumerable&lt;TElement&gt;, TResult&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,178],"source":"GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract the key for each element.&lt;/p&gt;\\n","pos":[181331,181389],"source":"\\n<p>A function to extract the key for each element.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result value from each group.&lt;/p&gt;\\n","pos":[181776,181839],"source":"\\n<p>A function to create a result value from each group.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[182147,182202],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[182239,182303],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result value returned by &lt;em&gt;resultSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[182512,182588],"source":"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A collection of elements of type &lt;em&gt;TResult&lt;/em&gt; where each element represents a projection over a group and its key.&lt;/p&gt;\\n","pos":[182684,182813],"source":"\\n<p>A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n"},{"pos":[184677,184843],"content":"GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)","needQuote":true,"nodes":[{"content":"GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(IEnumerable&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Func&lt;TOuter, TKey&gt;, Func&lt;TInner, TKey&gt;, Func&lt;TOuter, IEnumerable&lt;TInner&gt;, TResult&gt;)","pos":[0,166],"source":"GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)"}]},{"content":"\\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\\n","pos":[186379,186417],"source":"\\n<p>The first sequence to join.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\\n","pos":[186516,186570],"source":"\\n<p>The sequence to join to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\\n","pos":[186660,186746],"source":"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\\n","pos":[186836,186923],"source":"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.&lt;/p&gt;\\n","pos":[187063,187215],"source":"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[187274,187332],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[187371,187430],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\\n","pos":[187467,187538],"source":"\\n<p>The type of the keys returned by the key selector functions.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\\n","pos":[187578,187621],"source":"\\n<p>The type of the result elements.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;outer&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt; or &lt;em&gt;outerKeySelector&lt;/em&gt; or &lt;em&gt;innerKeySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[188063,188219],"source":"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[190185,190376],"content":"GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(IEnumerable&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Func&lt;TOuter, TKey&gt;, Func&lt;TInner, TKey&gt;, Func&lt;TOuter, IEnumerable&lt;TInner&gt;, TResult&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,191],"source":"GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\\n","pos":[192123,192161],"source":"\\n<p>The first sequence to join.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\\n","pos":[192260,192314],"source":"\\n<p>The sequence to join to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\\n","pos":[192404,192490],"source":"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\\n","pos":[192580,192667],"source":"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.&lt;/p&gt;\\n","pos":[192807,192959],"source":"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[193270,193328],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[193367,193426],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\\n","pos":[193463,193534],"source":"\\n<p>The type of the keys returned by the key selector functions.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\\n","pos":[193574,193617],"source":"\\n<p>The type of the result elements.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;outer&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt; or &lt;em&gt;outerKeySelector&lt;/em&gt; or &lt;em&gt;innerKeySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[194059,194215],"source":"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[195846,195908],"content":"Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Intersect&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,62],"source":"Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[197475,197534],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the elements that form the set intersection of two sequences.&lt;/p&gt;\\n","pos":[197630,197727],"source":"\\n<p>A sequence that contains the elements that form the set intersection of two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[197846,197918],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n"},{"pos":[199063,199153],"content":"Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Intersect&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,90],"source":"Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[201194,201253],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence that contains the elements that form the set intersection of two sequences.&lt;/p&gt;\\n","pos":[201349,201446],"source":"\\n<p>A sequence that contains the elements that form the set intersection of two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[201565,201637],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n"},{"pos":[202966,203114],"content":"Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)","needQuote":true,"nodes":[{"content":"Join&lt;TOuter, TInner, TKey, TResult&gt;(IEnumerable&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Func&lt;TOuter, TKey&gt;, Func&lt;TInner, TKey&gt;, Func&lt;TOuter, TInner, TResult&gt;)","pos":[0,148],"source":"Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)"}]},{"content":"\\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\\n","pos":[204535,204573],"source":"\\n<p>The first sequence to join.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\\n","pos":[204672,204726],"source":"\\n<p>The sequence to join to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\\n","pos":[204816,204902],"source":"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\\n","pos":[204992,205079],"source":"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from two matching elements.&lt;/p&gt;\\n","pos":[205179,205255],"source":"\\n<p>A function to create a result element from two matching elements.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[205314,205372],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[205411,205470],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\\n","pos":[205507,205578],"source":"\\n<p>The type of the keys returned by the key selector functions.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\\n","pos":[205618,205661],"source":"\\n<p>The type of the result elements.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;outer&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt; or &lt;em&gt;outerKeySelector&lt;/em&gt; or &lt;em&gt;innerKeySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[206097,206253],"source":"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[207976,208149],"content":"Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"Join&lt;TOuter, TInner, TKey, TResult&gt;(IEnumerable&lt;TOuter&gt;, IEnumerable&lt;TInner&gt;, Func&lt;TOuter, TKey&gt;, Func&lt;TInner, TKey&gt;, Func&lt;TOuter, TInner, TResult&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,173],"source":"Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;The first sequence to join.&lt;/p&gt;\\n","pos":[209785,209823],"source":"\\n<p>The first sequence to join.</p>\\n"},{"content":"\\n&lt;p&gt;The sequence to join to the first sequence.&lt;/p&gt;\\n","pos":[209922,209976],"source":"\\n<p>The sequence to join to the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the first sequence.&lt;/p&gt;\\n","pos":[210066,210152],"source":"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract the join key from each element of the second sequence.&lt;/p&gt;\\n","pos":[210242,210329],"source":"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A function to create a result element from two matching elements.&lt;/p&gt;\\n","pos":[210429,210505],"source":"\\n<p>A function to create a result element from two matching elements.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first sequence.&lt;/p&gt;\\n","pos":[210816,210874],"source":"\\n<p>The type of the elements of the first sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second sequence.&lt;/p&gt;\\n","pos":[210913,210972],"source":"\\n<p>The type of the elements of the second sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by the key selector functions.&lt;/p&gt;\\n","pos":[211009,211080],"source":"\\n<p>The type of the keys returned by the key selector functions.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result elements.&lt;/p&gt;\\n","pos":[211120,211163],"source":"\\n<p>The type of the result elements.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;outer&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt; or &lt;em&gt;outerKeySelector&lt;/em&gt; or &lt;em&gt;innerKeySelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[211599,211755],"source":"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[213131,213166],"content":"Last<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Last&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,35],"source":"Last<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[214166,214221],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value at the last position in the source sequence.&lt;/p&gt;\\n","pos":[214279,214344],"source":"\\n<p>The value at the last position in the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[214463,214517],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\\n","pos":[214630,214670],"source":"\\n<p>The source sequence is empty.</p>\\n"},{"pos":[215470,215529],"content":"Last<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"Last&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,59],"source":"Last<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[216703,216762],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[216822,216877],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The last element in the sequence that passes the test in the specified predicate function.&lt;/p&gt;\\n","pos":[216935,217036],"source":"\\n<p>The last element in the sequence that passes the test in the specified predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[217155,217231],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\\n","pos":[217344,217463],"source":"\\n<p>No element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>The source sequence is empty.</p>\\n"},{"pos":[218313,218357],"content":"LastOrDefault<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"LastOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,44],"source":"LastOrDefault<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[219450,219505],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[219907,219961],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[220824,220892],"content":"LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"LastOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,68],"source":"LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[222139,222198],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[222258,222313],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;default&lt;/strong&gt;(&lt;em&gt;TSource&lt;/em&gt;) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.&lt;/p&gt;\\n","pos":[222371,222586],"source":"\\n<p>\\n<strong>default</strong>(<em>TSource</em>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[222705,222781],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[223655,223695],"content":"LongCount<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"LongCount&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,40],"source":"LongCount<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[224824,224879],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in the source sequence.&lt;/p&gt;\\n","pos":[224938,224995],"source":"\\n<p>The number of elements in the source sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[225114,225168],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[226224,226288],"content":"LongCount<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"LongCount&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,64],"source":"LongCount<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[227567,227626],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[227686,227741],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A number that represents how many elements in the sequence satisfy the condition in the predicate function.&lt;/p&gt;\\n","pos":[227800,227918],"source":"\\n<p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[228037,228113],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[229207,229232],"content":"Max(IEnumerable<Decimal>)","needQuote":true,"nodes":[{"content":"Max(IEnumerable&lt;Decimal&gt;)","pos":[0,25],"source":"Max(IEnumerable<Decimal>)"}]},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[230293,230338],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[230457,230511],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[230624,230674],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[231354,231378],"content":"Max(IEnumerable<Double>)","needQuote":true,"nodes":[{"content":"Max(IEnumerable&lt;Double&gt;)","pos":[0,24],"source":"Max(IEnumerable<Double>)"}]},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[232430,232475],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[232594,232648],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[232761,232811],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[233484,233507],"content":"Max(IEnumerable<Int32>)","needQuote":true,"nodes":[{"content":"Max(IEnumerable&lt;Int32&gt;)","pos":[0,23],"source":"Max(IEnumerable<Int32>)"}]},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[234550,234595],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[234714,234768],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[234881,234931],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[235600,235623],"content":"Max(IEnumerable<Int64>)","needQuote":true,"nodes":[{"content":"Max(IEnumerable&lt;Int64&gt;)","pos":[0,23],"source":"Max(IEnumerable<Int64>)"}]},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[236662,236707],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[236826,236880],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[236993,237043],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[237769,237804],"content":"Max(IEnumerable<Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Max(IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;)","pos":[0,35],"source":"Max(IEnumerable<Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.","pos":[238941,239080],"source":"\\n<p>A value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence."},{"content":" &lt;/p&gt;\\n","pos":[239080,239087],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[239206,239260],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[240047,240081],"content":"Max(IEnumerable<Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Max(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)","pos":[0,34],"source":"Max(IEnumerable<Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\\n","pos":[241209,241352],"source":"\\n<p>A value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[241471,241525],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[242305,242338],"content":"Max(IEnumerable<Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Max(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)","pos":[0,33],"source":"Max(IEnumerable<Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.","pos":[243457,243592],"source":"\\n<p>A value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence."},{"content":" &lt;/p&gt;\\n","pos":[243592,243599],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[243718,243772],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[244548,244581],"content":"Max(IEnumerable<Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Max(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)","pos":[0,33],"source":"Max(IEnumerable<Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.","pos":[245696,245831],"source":"\\n<p>A value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence."},{"content":" &lt;/p&gt;\\n","pos":[245831,245838],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[245957,246011],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[246790,246824],"content":"Max(IEnumerable<Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Max(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)","pos":[0,34],"source":"Max(IEnumerable<Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\\n","pos":[247950,248093],"source":"\\n<p>A value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[248212,248266],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[248998,249022],"content":"Max(IEnumerable<Single>)","needQuote":true,"nodes":[{"content":"Max(IEnumerable&lt;Single&gt;)","pos":[0,24],"source":"Max(IEnumerable<Single>)"}]},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[250072,250117],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[250236,250290],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[250403,250453],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[251108,251142],"content":"Max<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,34],"source":"Max<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[251942,252008],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[252068,252123],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[252181,252226],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[252345,252399],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[253192,253250],"content":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Decimal&gt;)","pos":[0,58],"source":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[254276,254342],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[254433,254490],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[254550,254605],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[254666,254711],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[254830,254905],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[255018,255068],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[255977,256034],"content":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Double>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Double&gt;)","pos":[0,57],"source":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Double>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[257054,257120],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[257210,257267],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[257327,257382],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[257442,257487],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[257606,257681],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[257794,257844],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[258746,258802],"content":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int32&gt;)","pos":[0,56],"source":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[259816,259882],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[259971,260028],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[260088,260143],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[260202,260247],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[260366,260441],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[260554,260604],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[261502,261558],"content":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int64&gt;)","pos":[0,56],"source":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[262568,262634],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[262723,262780],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[262840,262895],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[262954,262999],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[263118,263193],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[263306,263356],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[264311,264379],"content":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;)","pos":[0,68],"source":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[265438,265504],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[265612,265669],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[265729,265784],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\\n","pos":[265862,266009],"source":"\\n<p>The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[266128,266203],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[267219,267286],"content":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Double&gt;&gt;)","pos":[0,67],"source":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[268339,268405],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[268512,268569],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[268629,268684],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\\n","pos":[268761,268906],"source":"\\n<p>The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[269025,269100],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[270109,270175],"content":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int32&gt;&gt;)","pos":[0,66],"source":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[271222,271288],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[271394,271451],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[271511,271566],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\\n","pos":[271642,271785],"source":"\\n<p>The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[271904,271979],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[272984,273050],"content":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int64&gt;&gt;)","pos":[0,66],"source":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[274093,274159],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[274265,274322],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[274382,274437],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\\n","pos":[274513,274656],"source":"\\n<p>The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[274775,274850],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[275858,275925],"content":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Single&gt;&gt;)","pos":[0,67],"source":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[276976,277042],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[277149,277206],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[277266,277321],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.&lt;/p&gt;\\n","pos":[277398,277543],"source":"\\n<p>The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[277662,277737],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[278698,278755],"content":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Single>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Single&gt;)","pos":[0,57],"source":"Max<TSource>(IEnumerable<TSource>, Func<TSource, Single>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[279774,279840],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[279930,279987],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[280047,280102],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[280162,280207],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[280326,280401],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[280514,280564],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[281439,281506],"content":"Max<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)","needQuote":true,"nodes":[{"content":"Max&lt;TSource, TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TResult&gt;)","pos":[0,67],"source":"Max<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the maximum value of.&lt;/p&gt;\\n","pos":[282496,282562],"source":"\\n<p>A sequence of values to determine the maximum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[282648,282705],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[282765,282820],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[282860,282923],"source":"\\n<p>The type of the value returned by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum value in the sequence.&lt;/p&gt;\\n","pos":[282981,283026],"source":"\\n<p>The maximum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[283145,283220],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[284089,284114],"content":"Min(IEnumerable<Decimal>)","needQuote":true,"nodes":[{"content":"Min(IEnumerable&lt;Decimal&gt;)","pos":[0,25],"source":"Min(IEnumerable<Decimal>)"}]},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[285176,285221],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[285340,285394],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[285507,285557],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[286237,286261],"content":"Min(IEnumerable<Double>)","needQuote":true,"nodes":[{"content":"Min(IEnumerable&lt;Double&gt;)","pos":[0,24],"source":"Min(IEnumerable<Double>)"}]},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[287314,287359],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[287478,287532],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[287645,287695],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[288368,288391],"content":"Min(IEnumerable<Int32>)","needQuote":true,"nodes":[{"content":"Min(IEnumerable&lt;Int32&gt;)","pos":[0,23],"source":"Min(IEnumerable<Int32>)"}]},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[289435,289480],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[289599,289653],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[289766,289816],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[290485,290508],"content":"Min(IEnumerable<Int64>)","needQuote":true,"nodes":[{"content":"Min(IEnumerable&lt;Int64&gt;)","pos":[0,23],"source":"Min(IEnumerable<Int64>)"}]},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[291548,291593],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[291712,291766],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[291879,291929],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[292655,292690],"content":"Min(IEnumerable<Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Min(IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;)","pos":[0,35],"source":"Min(IEnumerable<Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\\n","pos":[293828,293973],"source":"\\n<p>A value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[294092,294146],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[294933,294967],"content":"Min(IEnumerable<Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Min(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)","pos":[0,34],"source":"Min(IEnumerable<Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\\n","pos":[296096,296239],"source":"\\n<p>A value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[296358,296412],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[297192,297225],"content":"Min(IEnumerable<Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Min(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)","pos":[0,33],"source":"Min(IEnumerable<Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\\n","pos":[298345,298486],"source":"\\n<p>A value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[298605,298659],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[299435,299468],"content":"Min(IEnumerable<Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Min(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)","pos":[0,33],"source":"Min(IEnumerable<Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\\n","pos":[300584,300725],"source":"\\n<p>A value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[300844,300898],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[301677,301711],"content":"Min(IEnumerable<Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Min(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)","pos":[0,34],"source":"Min(IEnumerable<Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\\n","pos":[302838,302981],"source":"\\n<p>A value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[303100,303154],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[303886,303910],"content":"Min(IEnumerable<Single>)","needQuote":true,"nodes":[{"content":"Min(IEnumerable&lt;Single&gt;)","pos":[0,24],"source":"Min(IEnumerable<Single>)"}]},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[304961,305006],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[305125,305179],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[305292,305342],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[305997,306031],"content":"Min<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,34],"source":"Min<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[306832,306898],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[306958,307013],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[307071,307116],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[307235,307289],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[308082,308140],"content":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Decimal&gt;)","pos":[0,58],"source":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[309167,309233],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[309324,309381],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[309441,309496],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[309557,309602],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[309721,309796],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[309909,309959],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[310868,310925],"content":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Double>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Double&gt;)","pos":[0,57],"source":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Double>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[311946,312012],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[312102,312159],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[312219,312274],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[312334,312379],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[312498,312573],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[312686,312736],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[313638,313694],"content":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int32&gt;)","pos":[0,56],"source":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[314709,314775],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[314864,314921],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[314981,315036],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[315095,315140],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[315259,315334],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[315447,315497],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[316395,316451],"content":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int64&gt;)","pos":[0,56],"source":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[317462,317528],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[317617,317674],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[317734,317789],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[317848,317893],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[318012,318087],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[318200,318250],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[319205,319273],"content":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;)","pos":[0,68],"source":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[320333,320399],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[320507,320564],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[320624,320679],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\\n","pos":[320757,320904],"source":"\\n<p>The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[321023,321098],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[322114,322181],"content":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Double&gt;&gt;)","pos":[0,67],"source":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[323235,323301],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[323408,323465],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[323525,323580],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\\n","pos":[323657,323802],"source":"\\n<p>The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[323921,323996],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[325005,325071],"content":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int32&gt;&gt;)","pos":[0,66],"source":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[326119,326185],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[326291,326348],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[326408,326463],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\\n","pos":[326539,326682],"source":"\\n<p>The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[326801,326876],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[327881,327947],"content":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int64&gt;&gt;)","pos":[0,66],"source":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[328991,329057],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[329163,329220],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[329280,329335],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\\n","pos":[329411,329554],"source":"\\n<p>The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[329673,329748],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[330756,330823],"content":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Single&gt;&gt;)","pos":[0,67],"source":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[331875,331941],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[332048,332105],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[332165,332220],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.&lt;/p&gt;\\n","pos":[332297,332442],"source":"\\n<p>The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[332561,332636],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[333597,333654],"content":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Single>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Single&gt;)","pos":[0,57],"source":"Min<TSource>(IEnumerable<TSource>, Func<TSource, Single>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[334673,334739],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[334829,334886],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[334946,335001],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[335061,335106],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[335225,335300],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; contains no elements.&lt;/p&gt;\\n","pos":[335413,335463],"source":"\\n<p>\\n<em>source</em> contains no elements.</p>\\n"},{"pos":[336338,336405],"content":"Min<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)","needQuote":true,"nodes":[{"content":"Min&lt;TSource, TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TResult&gt;)","pos":[0,67],"source":"Min<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to determine the minimum value of.&lt;/p&gt;\\n","pos":[337395,337461],"source":"\\n<p>A sequence of values to determine the minimum value of.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[337547,337604],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[337664,337719],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[337759,337822],"source":"\\n<p>The type of the value returned by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The minimum value in the sequence.&lt;/p&gt;\\n","pos":[337880,337925],"source":"\\n<p>The minimum value in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[338044,338119],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[338934,338962],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"content":"\\n&lt;p&gt;The type to filter the elements of the sequence on.&lt;/p&gt;\\n","pos":[340034,340096],"source":"\\n<p>The type to filter the elements of the sequence on.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[340498,340552],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[341283,341348],"content":"OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"OrderBy&lt;TSource, TKey&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,65],"source":"OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\\n","pos":[342349,342390],"source":"\\n<p>A sequence of values to order.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[342476,342531],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[342591,342646],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[342683,342747],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[343106,343184],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[344811,344893],"content":"OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"OrderBy&lt;TSource, TKey&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IComparer&lt;TKey&gt;)","pos":[0,82],"source":"OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\\n","pos":[346007,346048],"source":"\\n<p>A sequence of values to order.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[346134,346189],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[346476,346531],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[346568,346632],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[346991,347069],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[348704,348779],"content":"OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"OrderByDescending&lt;TSource, TKey&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,75],"source":"OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\\n","pos":[349821,349862],"source":"\\n<p>A sequence of values to order.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[349948,350003],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[350063,350118],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[350155,350219],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[350598,350676],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[352333,352425],"content":"OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"OrderByDescending&lt;TSource, TKey&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IComparer&lt;TKey&gt;)","pos":[0,92],"source":"OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to order.&lt;/p&gt;\\n","pos":[353580,353621],"source":"\\n<p>A sequence of values to order.</p>\\n"},{"content":"\\n&lt;p&gt;A function to extract a key from an element.&lt;/p&gt;\\n","pos":[353707,353762],"source":"\\n<p>A function to extract a key from an element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[354049,354104],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[354141,354205],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[354584,354662],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[356109,356128],"content":"Range(Int32, Int32)","needQuote":true,"nodes":[{"content":"Range(Int32, Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The value of the first integer in the sequence.&lt;/p&gt;\\n","pos":[356843,356901],"source":"\\n<p>The value of the first integer in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The number of sequential integers to generate.&lt;/p&gt;\\n","pos":[356964,357021],"source":"\\n<p>The number of sequential integers to generate.</p>\\n"},{"content":"\\n&lt;p&gt;An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.&lt;/p&gt;\\n","pos":[357120,357253],"source":"\\n<p>An IEnumerable<Int32> in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</p>\\n"},{"pos":[357938,357969],"content":"Repeat<TResult>(TResult, Int32)","needQuote":true,"nodes":[{"content":"Repeat&lt;TResult&gt;(TResult, Int32)","pos":[0,31],"source":"Repeat<TResult>(TResult, Int32)"}]},{"content":"\\n&lt;p&gt;The value to be repeated.&lt;/p&gt;\\n","pos":[358714,358750],"source":"\\n<p>The value to be repeated.</p>\\n"},{"content":"\\n&lt;p&gt;The number of times to repeat the value in the generated sequence.&lt;/p&gt;\\n","pos":[358813,358890],"source":"\\n<p>The number of times to repeat the value in the generated sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value to be repeated in the result sequence.&lt;/p&gt;\\n","pos":[358950,359021],"source":"\\n<p>The type of the value to be repeated in the result sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[359394,359437],"source":"\\n<p>\\n<em>count</em> is less than 0.</p>\\n"},{"pos":[360105,360143],"content":"Reverse<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Reverse&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,38],"source":"Reverse<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to reverse.&lt;/p&gt;\\n","pos":[360989,361032],"source":"\\n<p>A sequence of values to reverse.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[361092,361147],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A sequence whose elements correspond to those of the input sequence in reverse order.&lt;/p&gt;\\n","pos":[361243,361339],"source":"\\n<p>A sequence whose elements correspond to those of the input sequence in reverse order.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[361458,361512],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[362297,362367],"content":"Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)","needQuote":true,"nodes":[{"content":"Select&lt;TSource, TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TResult&gt;)","pos":[0,70],"source":"Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to invoke a transform function on.&lt;/p&gt;\\n","pos":[363343,363409],"source":"\\n<p>A sequence of values to invoke a transform function on.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[363495,363552],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[363612,363667],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[363707,363770],"source":"\\n<p>The type of the value returned by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[364200,364275],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[365243,365320],"content":"Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, TResult>)","needQuote":true,"nodes":[{"content":"Select&lt;TSource, TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int32, TResult&gt;)","pos":[0,77],"source":"Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to invoke a transform function on.&lt;/p&gt;\\n","pos":[366361,366427],"source":"\\n<p>A sequence of values to invoke a transform function on.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each source element; the second parameter of the function represents the index of the source element.&lt;/p&gt;\\n","pos":[366526,366671],"source":"\\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[366731,366786],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[366826,366889],"source":"\\n<p>The type of the value returned by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[367319,367394],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[368490,368577],"content":"SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TResult>>)","needQuote":true,"nodes":[{"content":"SelectMany&lt;TSource, TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, IEnumerable&lt;TResult&gt;&gt;)","pos":[0,87],"source":"SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TResult>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[369784,369827],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[369953,370010],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[370070,370125],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the sequence returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[370165,370247],"source":"\\n<p>The type of the elements of the sequence returned by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[370692,370767],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[371971,372065],"content":"SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)","needQuote":true,"nodes":[{"content":"SelectMany&lt;TSource, TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int32, IEnumerable&lt;TResult&gt;&gt;)","pos":[0,94],"source":"SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[373381,373424],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each source element; the second parameter of the function represents the index of the source element.&lt;/p&gt;\\n","pos":[373563,373708],"source":"\\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[373768,373823],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the sequence returned by &lt;em&gt;selector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[373863,373945],"source":"\\n<p>The type of the elements of the sequence returned by <em>selector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[374389,374464],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[375739,375880],"content":"SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)","needQuote":true,"nodes":[{"content":"SelectMany&lt;TSource, TCollection, TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, IEnumerable&lt;TCollection&gt;&gt;, Func&lt;TSource, TCollection, TResult&gt;)","pos":[0,141],"source":"SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[377373,377416],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element of the input sequence.&lt;/p&gt;\\n","pos":[377556,377635],"source":"\\n<p>A transform function to apply to each element of the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element of the intermediate sequence.&lt;/p&gt;\\n","pos":[377741,377827],"source":"\\n<p>A transform function to apply to each element of the intermediate sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[377887,377942],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the intermediate elements collected by &lt;em&gt;collectionSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[377986,378076],"source":"\\n<p>The type of the intermediate elements collected by <em>collectionSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the resulting sequence.&lt;/p&gt;\\n","pos":[378116,378178],"source":"\\n<p>The type of the elements of the resulting sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;collectionSelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[378756,378868],"source":"\\n<p>\\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[380379,380527],"content":"SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)","needQuote":true,"nodes":[{"content":"SelectMany&lt;TSource, TCollection, TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int32, IEnumerable&lt;TCollection&gt;&gt;, Func&lt;TSource, TCollection, TResult&gt;)","pos":[0,148],"source":"SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)"}]},{"content":"\\n&lt;p&gt;A sequence of values to project.&lt;/p&gt;\\n","pos":[382141,382184],"source":"\\n<p>A sequence of values to project.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each source element; the second parameter of the function represents the index of the source element.&lt;/p&gt;\\n","pos":[382337,382482],"source":"\\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element of the intermediate sequence.&lt;/p&gt;\\n","pos":[382588,382674],"source":"\\n<p>A transform function to apply to each element of the intermediate sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[382734,382789],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the intermediate elements collected by &lt;em&gt;collectionSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[382833,382923],"source":"\\n<p>The type of the intermediate elements collected by <em>collectionSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the resulting sequence.&lt;/p&gt;\\n","pos":[382963,383025],"source":"\\n<p>The type of the elements of the resulting sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;collectionSelector&lt;/em&gt; or &lt;em&gt;resultSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[383603,383715],"source":"\\n<p>\\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[385105,385171],"content":"SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"SequenceEqual&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,66],"source":"SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[386648,386707],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[386768,386987],"source":"\\n<p>\\n<strong>true</strong> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[387106,387178],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n"},{"pos":[388351,388445],"content":"SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"SequenceEqual&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,94],"source":"SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[390390,390449],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two source sequences are of equal length and their corresponding elements compare equal according to &lt;em&gt;comparer&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[390510,390706],"source":"\\n<p>\\n<strong>true</strong> if the two source sequences are of equal length and their corresponding elements compare equal according to <em>comparer</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[390825,390897],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n"},{"pos":[391915,391952],"content":"Single<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Single&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,37],"source":"Single<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[393040,393095],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The single element of the input sequence.&lt;/p&gt;\\n","pos":[393153,393205],"source":"\\n<p>The single element of the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[393324,393378],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The input sequence contains more than one element.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The input sequence is empty.&lt;/p&gt;\\n","pos":[393491,393602],"source":"\\n<p>The input sequence contains more than one element.</p>\\n<p>-or-</p>\\n<p>The input sequence is empty.</p>\\n"},{"pos":[394416,394477],"content":"Single<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"Single&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,61],"source":"Single<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test an element for a condition.&lt;/p&gt;\\n","pos":[395728,395785],"source":"\\n<p>A function to test an element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[395845,395900],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The single element of the input sequence that satisfies a condition.&lt;/p&gt;\\n","pos":[395958,396037],"source":"\\n<p>The single element of the input sequence that satisfies a condition.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[396156,396232],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;No element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;More than one element satisfies the condition in &lt;em&gt;predicate&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The source sequence is empty.&lt;/p&gt;\\n","pos":[396345,396554],"source":"\\n<p>No element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>More than one element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>The source sequence is empty.</p>\\n"},{"pos":[397418,397464],"content":"SingleOrDefault<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"SingleOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,46],"source":"SingleOrDefault<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[398639,398694],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The single element of the input sequence, or &lt;strong&gt;default&lt;/strong&gt;(&lt;em&gt;TSource&lt;/em&gt;) if the sequence contains no elements.&lt;/p&gt;\\n","pos":[398752,398888],"source":"\\n<p>The single element of the input sequence, or <strong>default</strong>(<em>TSource</em>) if the sequence contains no elements.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[399007,399061],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The input sequence contains more than one element.&lt;/p&gt;\\n","pos":[399174,399235],"source":"\\n<p>The input sequence contains more than one element.</p>\\n"},{"pos":[400112,400182],"content":"SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"SingleOrDefault&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,70],"source":"SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test an element for a condition.&lt;/p&gt;\\n","pos":[401534,401591],"source":"\\n<p>A function to test an element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[401651,401706],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The single element of the input sequence that satisfies the condition, or &lt;strong&gt;default&lt;/strong&gt;(&lt;em&gt;TSource&lt;/em&gt;) if no such element is found.&lt;/p&gt;\\n","pos":[401764,401920],"source":"\\n<p>The single element of the input sequence that satisfies the condition, or <strong>default</strong>(<em>TSource</em>) if no such element is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[402039,402115],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[403021,403063],"content":"Skip<TSource>(IEnumerable<TSource>, Int32)","needQuote":true,"nodes":[{"content":"Skip&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Int32)","pos":[0,42],"source":"Skip<TSource>(IEnumerable<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;The number of elements to skip before returning the remaining elements.&lt;/p&gt;\\n","pos":[404188,404270],"source":"\\n<p>The number of elements to skip before returning the remaining elements.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[404330,404385],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[404801,404855],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[405705,405769],"content":"SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"SkipWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,64],"source":"SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[407028,407087],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[407147,407202],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[407694,407770],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[408763,408834],"content":"SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)","needQuote":true,"nodes":[{"content":"SkipWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int32, Boolean&gt;)","pos":[0,71],"source":"SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test each source element for a condition; the second parameter of the function represents the index of the source element.&lt;/p&gt;\\n","pos":[410202,410349],"source":"\\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[410409,410464],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[410956,411032],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[411931,411956],"content":"Sum(IEnumerable<Decimal>)","needQuote":true,"nodes":[{"content":"Sum(IEnumerable&lt;Decimal&gt;)","pos":[0,25],"source":"Sum(IEnumerable<Decimal>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[412999,413048],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[413167,413221],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[414116,414140],"content":"Sum(IEnumerable<Double>)","needQuote":true,"nodes":[{"content":"Sum(IEnumerable&lt;Double&gt;)","pos":[0,24],"source":"Sum(IEnumerable<Double>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[415174,415223],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[415342,415396],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[416069,416092],"content":"Sum(IEnumerable<Int32>)","needQuote":true,"nodes":[{"content":"Sum(IEnumerable&lt;Int32&gt;)","pos":[0,23],"source":"Sum(IEnumerable<Int32>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[417117,417166],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[417285,417339],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[418221,418244],"content":"Sum(IEnumerable<Int64>)","needQuote":true,"nodes":[{"content":"Sum(IEnumerable&lt;Int64&gt;)","pos":[0,23],"source":"Sum(IEnumerable<Int64>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[419265,419314],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[419433,419487],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[420426,420461],"content":"Sum(IEnumerable<Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Sum(IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;)","pos":[0,35],"source":"Sum(IEnumerable<Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[421580,421629],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[421748,421802],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[422804,422838],"content":"Sum(IEnumerable<Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Sum(IEnumerable&lt;Nullable&lt;Double&gt;&gt;)","pos":[0,34],"source":"Sum(IEnumerable<Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[423948,423997],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[424116,424170],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[424950,424983],"content":"Sum(IEnumerable<Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Sum(IEnumerable&lt;Nullable&lt;Int32&gt;&gt;)","pos":[0,33],"source":"Sum(IEnumerable<Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[426084,426133],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[426252,426306],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[427295,427328],"content":"Sum(IEnumerable<Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Sum(IEnumerable&lt;Nullable&lt;Int64&gt;&gt;)","pos":[0,33],"source":"Sum(IEnumerable<Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[428425,428474],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[428593,428647],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[429639,429673],"content":"Sum(IEnumerable<Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Sum(IEnumerable&lt;Nullable&lt;Single&gt;&gt;)","pos":[0,34],"source":"Sum(IEnumerable<Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[430781,430830],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[430949,431003],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[431735,431759],"content":"Sum(IEnumerable<Single>)","needQuote":true,"nodes":[{"content":"Sum(IEnumerable&lt;Single&gt;)","pos":[0,24],"source":"Sum(IEnumerable<Single>)"}]},{"content":"\\n&lt;p&gt;The sum of the values in the sequence.&lt;/p&gt;\\n","pos":[432791,432840],"source":"\\n<p>The sum of the values in the sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[432959,433013],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[433764,433822],"content":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Decimal&gt;)","pos":[0,58],"source":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\\n","pos":[434892,434957],"source":"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[435048,435105],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[435165,435220],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[435281,435324],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[435443,435518],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[436642,436699],"content":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Double>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Double&gt;)","pos":[0,57],"source":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Double>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\\n","pos":[437763,437828],"source":"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[437918,437975],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[438035,438090],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[438150,438193],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[438312,438387],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[439289,439345],"content":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int32&gt;)","pos":[0,56],"source":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\\n","pos":[440403,440468],"source":"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[440557,440614],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[440674,440729],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[440788,440831],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[440950,441025],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[442136,442192],"content":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int64&gt;)","pos":[0,56],"source":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\\n","pos":[443246,443311],"source":"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[443400,443457],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[443517,443572],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[443631,443674],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[443793,443868],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[445036,445104],"content":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;)","pos":[0,68],"source":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\\n","pos":[446207,446272],"source":"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[446380,446437],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[446497,446552],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[446630,446673],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[446792,446867],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[448098,448165],"content":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Double&gt;&gt;)","pos":[0,67],"source":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\\n","pos":[449262,449327],"source":"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[449434,449491],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[449551,449606],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[449683,449726],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[449845,449920],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[450929,450995],"content":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int32&gt;&gt;)","pos":[0,66],"source":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\\n","pos":[452086,452151],"source":"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[452257,452314],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[452374,452429],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[452505,452548],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[452667,452742],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[453960,454026],"content":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Int64&gt;&gt;)","pos":[0,66],"source":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\\n","pos":[455113,455178],"source":"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[455284,455341],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[455401,455456],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[455532,455575],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[455694,455769],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[456990,457057],"content":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Nullable&lt;Single&gt;&gt;)","pos":[0,67],"source":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\\n","pos":[458152,458217],"source":"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[458324,458381],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[458441,458496],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[458573,458616],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[458735,458810],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[459771,459828],"content":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Single>)","needQuote":true,"nodes":[{"content":"Sum&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Single&gt;)","pos":[0,57],"source":"Sum<TSource>(IEnumerable<TSource>, Func<TSource, Single>)"}]},{"content":"\\n&lt;p&gt;A sequence of values that are used to calculate a sum.&lt;/p&gt;\\n","pos":[460890,460955],"source":"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to apply to each element.&lt;/p&gt;\\n","pos":[461045,461102],"source":"\\n<p>A transform function to apply to each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[461162,461217],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of the projected values.&lt;/p&gt;\\n","pos":[461277,461320],"source":"\\n<p>The sum of the projected values.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;selector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[461439,461514],"source":"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n"},{"pos":[462368,462410],"content":"Take<TSource>(IEnumerable<TSource>, Int32)","needQuote":true,"nodes":[{"content":"Take&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Int32)","pos":[0,42],"source":"Take<TSource>(IEnumerable<TSource>, Int32)"}]},{"content":"\\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\\n","pos":[463318,463366],"source":"\\n<p>The sequence to return elements from.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements to return.&lt;/p&gt;\\n","pos":[463429,463473],"source":"\\n<p>The number of elements to return.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[463533,463588],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[464002,464056],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[464906,464970],"content":"TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"TakeWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,64],"source":"TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A sequence to return elements from.&lt;/p&gt;\\n","pos":[465959,466005],"source":"\\n<p>A sequence to return elements from.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[466097,466156],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[466216,466271],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[466717,466793],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[467786,467857],"content":"TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)","needQuote":true,"nodes":[{"content":"TakeWhile&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int32, Boolean&gt;)","pos":[0,71],"source":"TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)"}]},{"content":"\\n&lt;p&gt;The sequence to return elements from.&lt;/p&gt;\\n","pos":[468942,468990],"source":"\\n<p>The sequence to return elements from.</p>\\n"},{"content":"\\n&lt;p&gt;A function to test each source element for a condition; the second parameter of the function represents the index of the source element.&lt;/p&gt;\\n","pos":[469095,469242],"source":"\\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[469302,469357],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[469799,469875],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[470798,470869],"content":"ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"ThenBy&lt;TSource, TKey&gt;(IOrderedEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,71],"source":"ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[472116,472173],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[472233,472288],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[472325,472389],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[472748,472826],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[473846,473934],"content":"ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"ThenBy&lt;TSource, TKey&gt;(IOrderedEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IComparer&lt;TKey&gt;)","pos":[0,88],"source":"ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[475294,475351],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[475638,475693],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[475730,475794],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[476153,476231],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[477259,477340],"content":"ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"ThenByDescending&lt;TSource, TKey&gt;(IOrderedEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,81],"source":"ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[478629,478686],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[478746,478801],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[478838,478902],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[479281,479359],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[480449,480547],"content":"ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)","needQuote":true,"nodes":[{"content":"ThenByDescending&lt;TSource, TKey&gt;(IOrderedEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IComparer&lt;TKey&gt;)","pos":[0,98],"source":"ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[481948,482005],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[482292,482347],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[482384,482448],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[482827,482905],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[483907,483945],"content":"ToArray<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"ToArray&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,38],"source":"ToArray<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[485042,485097],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;An array that contains the elements from the input sequence.&lt;/p&gt;\\n","pos":[485157,485228],"source":"\\n<p>An array that contains the elements from the input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[485347,485401],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[486204,486274],"content":"ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"ToDictionary&lt;TSource, TKey&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,70],"source":"ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[487804,487861],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[487921,487976],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[488013,488077],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;keySelector&lt;/em&gt; produces a key that is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[488441,488609],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>keySelector</em> produces a key that is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keySelector&lt;/em&gt; produces duplicate keys for two elements.&lt;/p&gt;\\n","pos":[488706,488781],"source":"\\n<p>\\n<em>keySelector</em> produces duplicate keys for two elements.</p>\\n"},{"pos":[489878,489973],"content":"ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"ToDictionary&lt;TSource, TKey&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,95],"source":"ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[491646,491703],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[492006,492061],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the keys returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[492098,492163],"source":"\\n<p>The type of the keys returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;keySelector&lt;/em&gt; produces a key that is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[492527,492695],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>keySelector</em> produces a key that is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keySelector&lt;/em&gt; produces duplicate keys for two elements.&lt;/p&gt;\\n","pos":[492792,492867],"source":"\\n<p>\\n<em>keySelector</em> produces duplicate keys for two elements.</p>\\n"},{"pos":[494013,494118],"content":"ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)","needQuote":true,"nodes":[{"content":"ToDictionary&lt;TSource, TKey, TElement&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;)","pos":[0,105],"source":"ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[495820,495877],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to produce a result element value from each element.&lt;/p&gt;\\n","pos":[495971,496055],"source":"\\n<p>A transform function to produce a result element value from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[496115,496170],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[496207,496271],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;elementSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[496312,496382],"source":"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;keySelector&lt;/em&gt; produces a key that is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[496797,496993],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>keySelector</em> produces a key that is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keySelector&lt;/em&gt; produces duplicate keys for two elements.&lt;/p&gt;\\n","pos":[497090,497165],"source":"\\n<p>\\n<em>keySelector</em> produces duplicate keys for two elements.</p>\\n"},{"pos":[498481,498611],"content":"ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"ToDictionary&lt;TSource, TKey, TElement&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,130],"source":"ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[500465,500522],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to produce a result element value from each element.&lt;/p&gt;\\n","pos":[500616,500700],"source":"\\n<p>A transform function to produce a result element value from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[501003,501058],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[501095,501159],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;elementSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[501200,501270],"source":"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;keySelector&lt;/em&gt; produces a key that is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[501685,501881],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>keySelector</em> produces a key that is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keySelector&lt;/em&gt; produces duplicate keys for two elements.&lt;/p&gt;\\n","pos":[501978,502053],"source":"\\n<p>\\n<em>keySelector</em> produces duplicate keys for two elements.</p>\\n"},{"pos":[503211,503248],"content":"ToList<TSource>(IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"ToList&lt;TSource&gt;(IEnumerable&lt;TSource&gt;)","pos":[0,37],"source":"ToList<TSource>(IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[504528,504583],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[504945,504999],"source":"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n"},{"pos":[505786,505852],"content":"ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)","needQuote":true,"nodes":[{"content":"ToLookup&lt;TSource, TKey&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;)","pos":[0,66],"source":"ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[507323,507380],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[507440,507495],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[507532,507596],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[507923,508001],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[509070,509161],"content":"ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"ToLookup&lt;TSource, TKey&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,91],"source":"ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[510775,510832],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[511135,511190],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[511227,511291],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[511618,511696],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[512814,512915],"content":"ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)","needQuote":true,"nodes":[{"content":"ToLookup&lt;TSource, TKey, TElement&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;)","pos":[0,101],"source":"ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[514558,514615],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to produce a result element value from each element.&lt;/p&gt;\\n","pos":[514709,514793],"source":"\\n<p>A transform function to produce a result element value from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[514853,514908],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[514945,515009],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;elementSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[515050,515120],"source":"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[515498,515604],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[516892,517018],"content":"ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)","needQuote":true,"nodes":[{"content":"ToLookup&lt;TSource, TKey, TElement&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, TKey&gt;, Func&lt;TSource, TElement&gt;, IEqualityComparer&lt;TKey&gt;)","pos":[0,126],"source":"ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)"}]},{"content":"\\n&lt;p&gt;A function to extract a key from each element.&lt;/p&gt;\\n","pos":[518812,518869],"source":"\\n<p>A function to extract a key from each element.</p>\\n"},{"content":"\\n&lt;p&gt;A transform function to produce a result element value from each element.&lt;/p&gt;\\n","pos":[518963,519047],"source":"\\n<p>A transform function to produce a result element value from each element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[519350,519405],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the key returned by &lt;em&gt;keySelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[519442,519506],"source":"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value returned by &lt;em&gt;elementSelector&lt;/em&gt;.&lt;/p&gt;\\n","pos":[519547,519617],"source":"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;keySelector&lt;/em&gt; or &lt;em&gt;elementSelector&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[519995,520101],"source":"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n"},{"pos":[521372,521430],"content":"Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)","needQuote":true,"nodes":[{"content":"Union&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;)","pos":[0,58],"source":"Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[522915,522974],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[523379,523451],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n"},{"pos":[524568,524654],"content":"Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)","needQuote":true,"nodes":[{"content":"Union&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, IEnumerable&lt;TSource&gt;, IEqualityComparer&lt;TSource&gt;)","pos":[0,86],"source":"Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)"}]},{"content":"\\n&lt;p&gt;The type of the elements of the input sequences.&lt;/p&gt;\\n","pos":[526612,526671],"source":"\\n<p>The type of the elements of the input sequences.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[527076,527148],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n"},{"pos":[528227,528287],"content":"Where<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)","needQuote":true,"nodes":[{"content":"Where&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Boolean&gt;)","pos":[0,60],"source":"Where<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test each element for a condition.&lt;/p&gt;\\n","pos":[529453,529512],"source":"\\n<p>A function to test each element for a condition.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[529572,529627],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[530031,530107],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[531072,531139],"content":"Where<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)","needQuote":true,"nodes":[{"content":"Where&lt;TSource&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource, Int32, Boolean&gt;)","pos":[0,67],"source":"Where<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)"}]},{"content":"\\n&lt;p&gt;A function to test each source element for a condition; the second parameter of the function represents the index of the source element.&lt;/p&gt;\\n","pos":[532415,532562],"source":"\\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of &lt;em&gt;source&lt;/em&gt;.&lt;/p&gt;\\n","pos":[532622,532677],"source":"\\n<p>The type of the elements of <em>source</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;source&lt;/em&gt; or &lt;em&gt;predicate&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[533081,533157],"source":"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n"},{"pos":[534223,534327],"content":"Zip<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)","needQuote":true,"nodes":[{"content":"Zip&lt;TFirst, TSecond, TResult&gt;(IEnumerable&lt;TFirst&gt;, IEnumerable&lt;TSecond&gt;, Func&lt;TFirst, TSecond, TResult&gt;)","pos":[0,104],"source":"Zip<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)"}]},{"content":"\\n&lt;p&gt;The first sequence to merge.&lt;/p&gt;\\n","pos":[535518,535557],"source":"\\n<p>The first sequence to merge.</p>\\n"},{"content":"\\n&lt;p&gt;The second sequence to merge.&lt;/p&gt;\\n","pos":[535658,535698],"source":"\\n<p>The second sequence to merge.</p>\\n"},{"content":"\\n&lt;p&gt;A function that specifies how to merge the elements from the two sequences.&lt;/p&gt;\\n","pos":[535799,535885],"source":"\\n<p>A function that specifies how to merge the elements from the two sequences.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the first input sequence.&lt;/p&gt;\\n","pos":[535944,536008],"source":"\\n<p>The type of the elements of the first input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the second input sequence.&lt;/p&gt;\\n","pos":[536048,536113],"source":"\\n<p>The type of the elements of the second input sequence.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the elements of the result sequence.&lt;/p&gt;\\n","pos":[536153,536212],"source":"\\n<p>The type of the elements of the result sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;first&lt;/em&gt; or &lt;em&gt;second&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[536595,536667],"source":"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n"},{"pos":[537431,537442],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[537588,537594],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[537754,537764],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[537859,537867],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[537936,537937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[537964,537965],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[538035,538043],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[538112,538113],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[538140,538141],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[538324,538338],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[538457,538463],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[538530,538531],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[538581,538587],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[538647,538648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[538731,538737],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[538804,538805],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[538855,538861],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[538921,538922],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[539136,539158],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[539306,539312],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[539379,539380],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[539430,539436],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[539497,539498]},{"pos":[539553,539559],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[539619,539620],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[539717,539723],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[539790,539791],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[539841,539847],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[539908,539909]},{"pos":[539964,539970],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[540030,540031],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[540276,540307],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[540473,540488],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[540564,540565],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[540615,540621],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[540682,540683]},{"pos":[540738,540744],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[540804,540805],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[540911,540926],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[541002,541003],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[541053,541059],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[541120,541121]},{"pos":[541176,541182],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[541242,541243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[541473,541486],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[541587,541598],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[541670,541671],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[541698,541699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[541772,541783],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[541855,541856],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[541883,541884],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[542059,542068],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[542161,542168],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[542236,542237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[542264,542265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[542334,542341],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[542409,542410],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[542437,542438],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[542613,542630],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[542739,542754],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[542830,542831],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[542858,542859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[542936,542951],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[543027,543028],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[543055,543056],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[543201,543207],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[543429,543449],"content":"IEnumerable<TSource>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TSource&gt;","pos":[0,20],"source":"IEnumerable<TSource>"}]},{"pos":[543686,543697],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[543782,543783],"content":"<","needQuote":true,"nodes":[]},{"pos":[543810,543817],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[543943,543954],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[544040,544043]},{"pos":[544077,544084],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[544117,544118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[544377,544408],"content":"Func<TSource, TSource, TSource>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, TSource, TSource&gt;","pos":[0,31],"source":"Func<TSource, TSource, TSource>"}]},{"pos":[544611,544615],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[544673,544674],"content":"<","needQuote":true,"nodes":[]},{"pos":[544701,544708],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[544742,544743]},{"pos":[544775,544782],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[544816,544817]},{"pos":[544849,544856],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[544955,544959],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[545018,545021]},{"pos":[545055,545062],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[545096,545097]},{"pos":[545129,545136],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[545170,545171]},{"pos":[545203,545210],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[545243,545244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[545452,545459],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[545605,545619],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[545838,545849],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[545913,545914],"content":"<","needQuote":true,"nodes":[]},{"pos":[545941,545942],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[546062,546073],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[546138,546141]},{"pos":[546175,546176],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[546203,546204],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[546407,546433],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[546607,546628],"content":"Func<T1, T2, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, TResult&gt;","pos":[0,21],"source":"Func<T1, T2, TResult>"}]},{"pos":[546801,546805],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[546842,546843],"content":"<","needQuote":true,"nodes":[]},{"pos":[546870,546872],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[546901,546902]},{"pos":[546934,546936],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[546965,546966]},{"pos":[546998,547005],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[547104,547108],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[547146,547149]},{"pos":[547183,547185],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[547214,547215]},{"pos":[547247,547249],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[547278,547279]},{"pos":[547311,547318],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[547351,547352],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[547523,547530],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[547632,547643],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[547836,547875],"content":"Func<TAccumulate, TSource, TAccumulate>","needQuote":true,"nodes":[{"content":"Func&lt;TAccumulate, TSource, TAccumulate&gt;","pos":[0,39],"source":"Func<TAccumulate, TSource, TAccumulate>"}]},{"pos":[548102,548106],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[548164,548165],"content":"<","needQuote":true,"nodes":[]},{"pos":[548192,548203],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[548241,548242]},{"pos":[548274,548281],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[548315,548316]},{"pos":[548348,548359],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[548462,548466],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[548525,548528]},{"pos":[548562,548573],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[548611,548612]},{"pos":[548644,548651],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[548685,548686]},{"pos":[548718,548729],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[548766,548767],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[548989,549000],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"pos":[549150,549176],"content":"Func<TAccumulate, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TAccumulate, TResult&gt;","pos":[0,26],"source":"Func<TAccumulate, TResult>"}]},{"pos":[549364,549368],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[549426,549427],"content":"<","needQuote":true,"nodes":[]},{"pos":[549454,549465],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[549503,549504]},{"pos":[549536,549543],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[549642,549646],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[549705,549708]},{"pos":[549742,549753],"content":"TAccumulate","needQuote":true,"nodes":[{"content":"TAccumulate","pos":[0,11]}]},{"content":",","pos":[549791,549792]},{"pos":[549824,549831],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[549864,549865],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[550059,550066],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[550185,550201],"content":"Func<T, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T, TResult&gt;","pos":[0,16],"source":"Func<T, TResult>"}]},{"pos":[550359,550363],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[550400,550401],"content":"<","needQuote":true,"nodes":[]},{"pos":[550428,550429],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[550457,550458]},{"pos":[550490,550497],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[550596,550600],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[550638,550641]},{"pos":[550675,550676],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[550704,550705]},{"pos":[550737,550744],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[550777,550778],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[550939,550946],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[551089,551111],"content":"Func<TSource, Boolean>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Boolean&gt;","pos":[0,22],"source":"Func<TSource, Boolean>"}]},{"pos":[551301,551305],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[551363,551364],"content":"<","needQuote":true,"nodes":[]},{"pos":[551391,551398],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[551432,551433]},{"pos":[551489,551496],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[551623,551627],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[551686,551689]},{"pos":[551723,551730],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[551764,551765]},{"pos":[551821,551828],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[551889,551890],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[552105,552112],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[552356,552376],"content":"IEnumerable<Decimal>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Decimal&gt;","pos":[0,20],"source":"IEnumerable<Decimal>"}]},{"pos":[552627,552638],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[552723,552724],"content":"<","needQuote":true,"nodes":[]},{"pos":[552775,552782],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[552936,552947],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[553033,553036]},{"pos":[553094,553101],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[553162,553163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[553397,553404],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[553647,553666],"content":"IEnumerable<Double>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Double&gt;","pos":[0,19],"source":"IEnumerable<Double>"}]},{"pos":[553914,553925],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[554010,554011],"content":"<","needQuote":true,"nodes":[]},{"pos":[554061,554067],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[554220,554231],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[554317,554320]},{"pos":[554377,554383],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[554443,554444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[554674,554680],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[554919,554937],"content":"IEnumerable<Int32>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Int32&gt;","pos":[0,18],"source":"IEnumerable<Int32>"}]},{"pos":[555182,555193],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[555278,555279],"content":"<","needQuote":true,"nodes":[]},{"pos":[555328,555333],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[555485,555496],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[555582,555585]},{"pos":[555641,555646],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[555705,555706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[556027,556045],"content":"IEnumerable<Int64>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Int64&gt;","pos":[0,18],"source":"IEnumerable<Int64>"}]},{"pos":[556290,556301],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[556386,556387],"content":"<","needQuote":true,"nodes":[]},{"pos":[556436,556441],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[556593,556604],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[556690,556693]},{"pos":[556749,556754],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[556813,556814],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[557154,557184],"content":"IEnumerable<Nullable<Decimal>>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Nullable&lt;Decimal&gt;&gt;","pos":[0,30],"source":"IEnumerable<Nullable<Decimal>>"}]},{"pos":[557485,557496],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[557581,557582],"content":"<","needQuote":true,"nodes":[]},{"pos":[557636,557644],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[557706,557707],"content":"<","needQuote":true,"nodes":[]},{"pos":[557758,557765],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[557951,557962],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[558048,558051]},{"pos":[558112,558120],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[558183,558186]},{"pos":[558244,558251],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[558312,558313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[558340,558341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[558644,558661],"content":"Nullable<Decimal>","needQuote":true,"nodes":[{"content":"Nullable&lt;Decimal&gt;","pos":[0,17],"source":"Nullable<Decimal>"}]},{"pos":[558840,558848],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[558910,558911],"content":"<","needQuote":true,"nodes":[]},{"pos":[558962,558969],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[559100,559108],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[559171,559174]},{"pos":[559232,559239],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[559300,559301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[559509,559520],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[559667,559675],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[559716,559717],"content":"<","needQuote":true,"nodes":[]},{"pos":[559744,559745],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[559842,559850],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[559892,559895]},{"pos":[559929,559930],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[559957,559958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[560248,560277],"content":"IEnumerable<Nullable<Double>>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Nullable&lt;Double&gt;&gt;","pos":[0,29],"source":"IEnumerable<Nullable<Double>>"}]},{"pos":[560575,560586],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[560671,560672],"content":"<","needQuote":true,"nodes":[]},{"pos":[560726,560734],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[560796,560797],"content":"<","needQuote":true,"nodes":[]},{"pos":[560847,560853],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[561038,561049],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[561135,561138]},{"pos":[561199,561207],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[561270,561273]},{"pos":[561330,561336],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[561396,561397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[561424,561425],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[561724,561740],"content":"Nullable<Double>","needQuote":true,"nodes":[{"content":"Nullable&lt;Double&gt;","pos":[0,16],"source":"Nullable<Double>"}]},{"pos":[561916,561924],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[561986,561987],"content":"<","needQuote":true,"nodes":[]},{"pos":[562037,562043],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[562173,562181],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[562244,562247]},{"pos":[562304,562310],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[562370,562371],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[562683,562711],"content":"IEnumerable<Nullable<Int32>>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Nullable&lt;Int32&gt;&gt;","pos":[0,28],"source":"IEnumerable<Nullable<Int32>>"}]},{"pos":[563006,563017],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[563102,563103],"content":"<","needQuote":true,"nodes":[]},{"pos":[563157,563165],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[563227,563228],"content":"<","needQuote":true,"nodes":[]},{"pos":[563277,563282],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[563466,563477],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[563563,563566]},{"pos":[563627,563635],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[563698,563701]},{"pos":[563757,563762],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[563821,563822],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[563849,563850],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[564228,564256],"content":"IEnumerable<Nullable<Int64>>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Nullable&lt;Int64&gt;&gt;","pos":[0,28],"source":"IEnumerable<Nullable<Int64>>"}]},{"pos":[564551,564562],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[564647,564648],"content":"<","needQuote":true,"nodes":[]},{"pos":[564702,564710],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[564772,564773],"content":"<","needQuote":true,"nodes":[]},{"pos":[564822,564827],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[565011,565022],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[565108,565111]},{"pos":[565172,565180],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[565243,565246]},{"pos":[565302,565307],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[565366,565367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[565394,565395],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[565774,565803],"content":"IEnumerable<Nullable<Single>>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Nullable&lt;Single&gt;&gt;","pos":[0,29],"source":"IEnumerable<Nullable<Single>>"}]},{"pos":[566101,566112],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[566197,566198],"content":"<","needQuote":true,"nodes":[]},{"pos":[566252,566260],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[566322,566323],"content":"<","needQuote":true,"nodes":[]},{"pos":[566373,566379],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[566564,566575],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[566661,566664]},{"pos":[566725,566733],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[566796,566799]},{"pos":[566856,566862],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[566922,566923],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[566950,566951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[567250,567266],"content":"Nullable<Single>","needQuote":true,"nodes":[{"content":"Nullable&lt;Single&gt;","pos":[0,16],"source":"Nullable<Single>"}]},{"pos":[567442,567450],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[567512,567513],"content":"<","needQuote":true,"nodes":[]},{"pos":[567563,567569],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[567699,567707],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[567770,567773]},{"pos":[567830,567836],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[567896,567897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[568193,568212],"content":"IEnumerable<Single>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Single&gt;","pos":[0,19],"source":"IEnumerable<Single>"}]},{"pos":[568460,568471],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[568556,568557],"content":"<","needQuote":true,"nodes":[]},{"pos":[568607,568613],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[568766,568777],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[568863,568866]},{"pos":[568923,568929],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[568989,568990],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[569220,569226],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[569403,569425],"content":"Func<TSource, Decimal>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Decimal&gt;","pos":[0,22],"source":"Func<TSource, Decimal>"}]},{"pos":[569615,569619],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[569677,569678],"content":"<","needQuote":true,"nodes":[]},{"pos":[569705,569712],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[569746,569747]},{"pos":[569803,569810],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[569937,569941],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[570000,570003]},{"pos":[570037,570044],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[570078,570079]},{"pos":[570135,570142],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[570203,570204],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[570449,570470],"content":"Func<TSource, Double>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Double&gt;","pos":[0,21],"source":"Func<TSource, Double>"}]},{"pos":[570657,570661],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[570719,570720],"content":"<","needQuote":true,"nodes":[]},{"pos":[570747,570754],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[570788,570789]},{"pos":[570844,570850],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[570976,570980],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[571039,571042]},{"pos":[571076,571083],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[571117,571118]},{"pos":[571173,571179],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[571239,571240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[571481,571501],"content":"Func<TSource, Int32>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Int32&gt;","pos":[0,20],"source":"Func<TSource, Int32>"}]},{"pos":[571685,571689],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[571747,571748],"content":"<","needQuote":true,"nodes":[]},{"pos":[571775,571782],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[571816,571817]},{"pos":[571871,571876],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[572001,572005],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[572064,572067]},{"pos":[572101,572108],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[572142,572143]},{"pos":[572197,572202],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[572261,572262],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[572500,572520],"content":"Func<TSource, Int64>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Int64&gt;","pos":[0,20],"source":"Func<TSource, Int64>"}]},{"pos":[572704,572708],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[572766,572767],"content":"<","needQuote":true,"nodes":[]},{"pos":[572794,572801],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[572835,572836]},{"pos":[572890,572895],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[573020,573024],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[573083,573086]},{"pos":[573120,573127],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[573161,573162]},{"pos":[573216,573221],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[573280,573281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[573538,573570],"content":"Func<TSource, Nullable<Decimal>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Nullable&lt;Decimal&gt;&gt;","pos":[0,32],"source":"Func<TSource, Nullable<Decimal>>"}]},{"pos":[573810,573814],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[573872,573873],"content":"<","needQuote":true,"nodes":[]},{"pos":[573900,573907],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[573941,573942]},{"pos":[574001,574009],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[574071,574072],"content":"<","needQuote":true,"nodes":[]},{"pos":[574123,574130],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[574289,574293],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[574352,574355]},{"pos":[574389,574396],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[574430,574431]},{"pos":[574490,574498],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[574561,574564]},{"pos":[574622,574629],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[574690,574691],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[574718,574719],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[575021,575052],"content":"Func<TSource, Nullable<Double>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Nullable&lt;Double&gt;&gt;","pos":[0,31],"source":"Func<TSource, Nullable<Double>>"}]},{"pos":[575289,575293],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[575351,575352],"content":"<","needQuote":true,"nodes":[]},{"pos":[575379,575386],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[575420,575421]},{"pos":[575480,575488],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[575550,575551],"content":"<","needQuote":true,"nodes":[]},{"pos":[575601,575607],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[575765,575769],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[575828,575831]},{"pos":[575865,575872],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[575906,575907]},{"pos":[575966,575974],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[576037,576040]},{"pos":[576097,576103],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[576163,576164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[576191,576192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[576490,576520],"content":"Func<TSource, Nullable<Int32>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Nullable&lt;Int32&gt;&gt;","pos":[0,30],"source":"Func<TSource, Nullable<Int32>>"}]},{"pos":[576754,576758],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[576816,576817],"content":"<","needQuote":true,"nodes":[]},{"pos":[576844,576851],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[576885,576886]},{"pos":[576945,576953],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[577015,577016],"content":"<","needQuote":true,"nodes":[]},{"pos":[577065,577070],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[577227,577231],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[577290,577293]},{"pos":[577327,577334],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[577368,577369]},{"pos":[577428,577436],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[577499,577502]},{"pos":[577558,577563],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[577622,577623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[577650,577651],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[577946,577976],"content":"Func<TSource, Nullable<Int64>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Nullable&lt;Int64&gt;&gt;","pos":[0,30],"source":"Func<TSource, Nullable<Int64>>"}]},{"pos":[578210,578214],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[578272,578273],"content":"<","needQuote":true,"nodes":[]},{"pos":[578300,578307],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[578341,578342]},{"pos":[578401,578409],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[578471,578472],"content":"<","needQuote":true,"nodes":[]},{"pos":[578521,578526],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[578683,578687],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[578746,578749]},{"pos":[578783,578790],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[578824,578825]},{"pos":[578884,578892],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[578955,578958]},{"pos":[579014,579019],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[579078,579079],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[579106,579107],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[579403,579434],"content":"Func<TSource, Nullable<Single>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Nullable&lt;Single&gt;&gt;","pos":[0,31],"source":"Func<TSource, Nullable<Single>>"}]},{"pos":[579671,579675],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[579733,579734],"content":"<","needQuote":true,"nodes":[]},{"pos":[579761,579768],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[579802,579803]},{"pos":[579862,579870],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[579932,579933],"content":"<","needQuote":true,"nodes":[]},{"pos":[579983,579989],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[580147,580151],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[580210,580213]},{"pos":[580247,580254],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[580288,580289]},{"pos":[580348,580356],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[580419,580422]},{"pos":[580479,580485],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[580545,580546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[580573,580574],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[580856,580877],"content":"Func<TSource, Single>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Single&gt;","pos":[0,21],"source":"Func<TSource, Single>"}]},{"pos":[581064,581068],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[581126,581127],"content":"<","needQuote":true,"nodes":[]},{"pos":[581154,581161],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[581195,581196]},{"pos":[581251,581257],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[581383,581387],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[581446,581449]},{"pos":[581483,581490],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[581524,581525]},{"pos":[581580,581586],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[581646,581647],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[581887,581898],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[582173,582193],"content":"IEnumerable<TResult>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TResult&gt;","pos":[0,20],"source":"IEnumerable<TResult>"}]},{"pos":[582430,582441],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[582526,582527],"content":"<","needQuote":true,"nodes":[]},{"pos":[582554,582561],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[582687,582698],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[582784,582787]},{"pos":[582821,582828],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[582861,582862],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[583072,583090],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[583360,583386],"content":"IEqualityComparer<TSource>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;TSource&gt;","pos":[0,26],"source":"IEqualityComparer<TSource>"}]},{"pos":[583647,583664],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[583755,583756],"content":"<","needQuote":true,"nodes":[]},{"pos":[583783,583790],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[583922,583939],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[584031,584034]},{"pos":[584068,584075],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[584108,584109],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[584365,584385],"content":"IEqualityComparer<T>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;T&gt;","pos":[0,20],"source":"IEqualityComparer<T>"}]},{"pos":[584628,584645],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[584715,584716],"content":"<","needQuote":true,"nodes":[]},{"pos":[584743,584744],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[584870,584887],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[584958,584961]},{"pos":[584995,584996],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[585023,585024],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[585248,585253],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[585419,585438],"content":"Func<TSource, TKey>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, TKey&gt;","pos":[0,19],"source":"Func<TSource, TKey>"}]},{"pos":[585605,585609],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[585667,585668],"content":"<","needQuote":true,"nodes":[]},{"pos":[585695,585702],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[585736,585737]},{"pos":[585769,585773],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[585869,585873],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[585932,585935]},{"pos":[585969,585976],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[586010,586011]},{"pos":[586043,586047],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[586077,586078],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[586396,586433],"content":"IEnumerable<IGrouping<TKey, TSource>>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;","pos":[0,37],"source":"IEnumerable<IGrouping<TKey, TSource>>"}]},{"pos":[586751,586762],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[586847,586848],"content":"<","needQuote":true,"nodes":[]},{"pos":[586908,586917],"content":"IGrouping","needQuote":true,"nodes":[{"content":"IGrouping","pos":[0,9]}]},{"pos":[586964,586965],"content":"<","needQuote":true,"nodes":[]},{"pos":[586992,586996],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[587027,587028]},{"pos":[587060,587067],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[587225,587236],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[587322,587325]},{"pos":[587392,587401],"content":"IGrouping","needQuote":true,"nodes":[{"content":"IGrouping","pos":[0,9]}]},{"content":"(Of","pos":[587449,587452]},{"pos":[587486,587490],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[587521,587522]},{"pos":[587554,587561],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[587594,587595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[587622,587623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[588009,588032],"content":"IEqualityComparer<TKey>","needQuote":true,"nodes":[{"content":"IEqualityComparer&lt;TKey&gt;","pos":[0,23],"source":"IEqualityComparer<TKey>"}]},{"pos":[588284,588301],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[588392,588393],"content":"<","needQuote":true,"nodes":[]},{"pos":[588420,588424],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[588553,588570],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"content":"(Of","pos":[588662,588665]},{"pos":[588699,588703],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[588733,588734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[588996,589019],"content":"Func<TSource, TElement>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, TElement&gt;","pos":[0,23],"source":"Func<TSource, TElement>"}]},{"pos":[589198,589202],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[589260,589261],"content":"<","needQuote":true,"nodes":[]},{"pos":[589288,589295],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[589329,589330]},{"pos":[589362,589370],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[589470,589474],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[589533,589536]},{"pos":[589570,589577],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[589611,589612]},{"pos":[589644,589652],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[589686,589687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[590014,590052],"content":"IEnumerable<IGrouping<TKey, TElement>>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;","pos":[0,38],"source":"IEnumerable<IGrouping<TKey, TElement>>"}]},{"pos":[590373,590384],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[590469,590470],"content":"<","needQuote":true,"nodes":[]},{"pos":[590530,590539],"content":"IGrouping","needQuote":true,"nodes":[{"content":"IGrouping","pos":[0,9]}]},{"pos":[590586,590587],"content":"<","needQuote":true,"nodes":[]},{"pos":[590614,590618],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[590649,590650]},{"pos":[590682,590690],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[590849,590860],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[590946,590949]},{"pos":[591016,591025],"content":"IGrouping","needQuote":true,"nodes":[{"content":"IGrouping","pos":[0,9]}]},{"content":"(Of","pos":[591073,591076]},{"pos":[591110,591114],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[591145,591146]},{"pos":[591178,591186],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[591220,591221],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[591248,591249],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[591611,591652],"content":"Func<TKey, IEnumerable<TSource>, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TKey, IEnumerable&lt;TSource&gt;, TResult&gt;","pos":[0,41],"source":"Func<TKey, IEnumerable<TSource>, TResult>"}]},{"pos":[591945,591949],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[592007,592008],"content":"<","needQuote":true,"nodes":[]},{"pos":[592035,592039],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[592070,592071]},{"pos":[592153,592164],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[592249,592250],"content":"<","needQuote":true,"nodes":[]},{"pos":[592277,592284],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[592350,592351]},{"pos":[592383,592390],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[592489,592493],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[592552,592555]},{"pos":[592589,592593],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[592624,592625]},{"pos":[592707,592718],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[592804,592807]},{"pos":[592841,592848],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[592881,592882],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[592910,592911]},{"pos":[592943,592950],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[592983,592984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[593347,593389],"content":"Func<TKey, IEnumerable<TElement>, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TKey, IEnumerable&lt;TElement&gt;, TResult&gt;","pos":[0,42],"source":"Func<TKey, IEnumerable<TElement>, TResult>"}]},{"pos":[593685,593689],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[593747,593748],"content":"<","needQuote":true,"nodes":[]},{"pos":[593775,593779],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[593810,593811]},{"pos":[593893,593904],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[593989,593990],"content":"<","needQuote":true,"nodes":[]},{"pos":[594017,594025],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"content":",","pos":[594092,594093]},{"pos":[594125,594132],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[594231,594235],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[594294,594297]},{"pos":[594331,594335],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[594366,594367]},{"pos":[594449,594460],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[594546,594549]},{"pos":[594583,594591],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[594625,594626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[594654,594655]},{"pos":[594687,594694],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[594727,594728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[595108,595127],"content":"IEnumerable<TOuter>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TOuter&gt;","pos":[0,19],"source":"IEnumerable<TOuter>"}]},{"pos":[595361,595372],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[595457,595458],"content":"<","needQuote":true,"nodes":[]},{"pos":[595485,595491],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"pos":[595616,595627],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[595713,595716]},{"pos":[595750,595756],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"pos":[595788,595789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[596099,596118],"content":"IEnumerable<TInner>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TInner&gt;","pos":[0,19],"source":"IEnumerable<TInner>"}]},{"pos":[596352,596363],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[596448,596449],"content":"<","needQuote":true,"nodes":[]},{"pos":[596476,596482],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"pos":[596607,596618],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[596704,596707]},{"pos":[596741,596747],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"pos":[596779,596780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[597023,597041],"content":"Func<TOuter, TKey>","needQuote":true,"nodes":[{"content":"Func&lt;TOuter, TKey&gt;","pos":[0,18],"source":"Func<TOuter, TKey>"}]},{"pos":[597205,597209],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[597267,597268],"content":"<","needQuote":true,"nodes":[]},{"pos":[597295,597301],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[597334,597335]},{"pos":[597367,597371],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[597467,597471],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[597530,597533]},{"pos":[597567,597573],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[597606,597607]},{"pos":[597639,597643],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[597673,597674],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[597892,597910],"content":"Func<TInner, TKey>","needQuote":true,"nodes":[{"content":"Func&lt;TInner, TKey&gt;","pos":[0,18],"source":"Func<TInner, TKey>"}]},{"pos":[598074,598078],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[598136,598137],"content":"<","needQuote":true,"nodes":[]},{"pos":[598164,598170],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[598203,598204]},{"pos":[598236,598240],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[598336,598340],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[598399,598402]},{"pos":[598436,598442],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[598475,598476]},{"pos":[598508,598512],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[598542,598543],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[598813,598855],"content":"Func<TOuter, IEnumerable<TInner>, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TOuter, IEnumerable&lt;TInner&gt;, TResult&gt;","pos":[0,42],"source":"Func<TOuter, IEnumerable<TInner>, TResult>"}]},{"pos":[599151,599155],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[599213,599214],"content":"<","needQuote":true,"nodes":[]},{"pos":[599241,599247],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[599280,599281]},{"pos":[599363,599374],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[599459,599460],"content":"<","needQuote":true,"nodes":[]},{"pos":[599487,599493],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[599558,599559]},{"pos":[599591,599598],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[599697,599701],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[599760,599763]},{"pos":[599797,599803],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[599836,599837]},{"pos":[599919,599930],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[600016,600019]},{"pos":[600053,600059],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"pos":[600091,600092],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[600120,600121]},{"pos":[600153,600160],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[600193,600194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[600519,600548],"content":"Func<TOuter, TInner, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TOuter, TInner, TResult&gt;","pos":[0,29],"source":"Func<TOuter, TInner, TResult>"}]},{"pos":[600745,600749],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[600807,600808],"content":"<","needQuote":true,"nodes":[]},{"pos":[600835,600841],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[600874,600875]},{"pos":[600907,600913],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[600946,600947]},{"pos":[600979,600986],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[601085,601089],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[601148,601151]},{"pos":[601185,601191],"content":"TOuter","needQuote":true,"nodes":[{"content":"TOuter","pos":[0,6]}]},{"content":",","pos":[601224,601225]},{"pos":[601257,601263],"content":"TInner","needQuote":true,"nodes":[{"content":"TInner","pos":[0,6]}]},{"content":",","pos":[601296,601297]},{"pos":[601329,601336],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[601369,601370],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[601590,601595],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[601765,601780],"content":"Nullable<Int32>","needQuote":true,"nodes":[{"content":"Nullable&lt;Int32&gt;","pos":[0,15],"source":"Nullable<Int32>"}]},{"pos":[601953,601961],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[602023,602024],"content":"<","needQuote":true,"nodes":[]},{"pos":[602073,602078],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[602207,602215],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[602278,602281]},{"pos":[602337,602342],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[602401,602402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[602628,602643],"content":"Nullable<Int64>","needQuote":true,"nodes":[{"content":"Nullable&lt;Int64&gt;","pos":[0,15],"source":"Nullable<Int64>"}]},{"pos":[602816,602824],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[602886,602887],"content":"<","needQuote":true,"nodes":[]},{"pos":[602936,602941],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[603070,603078],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[603141,603144]},{"pos":[603200,603205],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[603264,603265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[603490,603512],"content":"Func<TSource, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, TResult&gt;","pos":[0,22],"source":"Func<TSource, TResult>"}]},{"pos":[603688,603692],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[603750,603751],"content":"<","needQuote":true,"nodes":[]},{"pos":[603778,603785],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[603819,603820]},{"pos":[603852,603859],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[603958,603962],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[604021,604024]},{"pos":[604058,604065],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[604099,604100]},{"pos":[604132,604139],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[604172,604173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[604436,604463],"content":"IOrderedEnumerable<TSource>","needQuote":true,"nodes":[{"content":"IOrderedEnumerable&lt;TSource&gt;","pos":[0,27],"source":"IOrderedEnumerable<TSource>"}]},{"pos":[604683,604701],"content":"IOrderedEnumerable","needQuote":true,"nodes":[{"content":"IOrderedEnumerable","pos":[0,18]}]},{"pos":[604757,604758],"content":"<","needQuote":true,"nodes":[]},{"pos":[604785,604792],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[604910,604928],"content":"IOrderedEnumerable","needQuote":true,"nodes":[{"content":"IOrderedEnumerable","pos":[0,18]}]},{"content":"(Of","pos":[604985,604988]},{"pos":[605022,605029],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[605062,605063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[605315,605343],"content":"IOrderedEnumerable<TElement>","needQuote":true,"nodes":[{"content":"IOrderedEnumerable&lt;TElement&gt;","pos":[0,28],"source":"IOrderedEnumerable<TElement>"}]},{"pos":[605566,605584],"content":"IOrderedEnumerable","needQuote":true,"nodes":[{"content":"IOrderedEnumerable","pos":[0,18]}]},{"pos":[605640,605641],"content":"<","needQuote":true,"nodes":[]},{"pos":[605668,605676],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[605795,605813],"content":"IOrderedEnumerable","needQuote":true,"nodes":[{"content":"IOrderedEnumerable","pos":[0,18]}]},{"content":"(Of","pos":[605870,605873]},{"pos":[605907,605915],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[605949,605950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[606261,606276],"content":"IComparer<TKey>","needQuote":true,"nodes":[{"content":"IComparer&lt;TKey&gt;","pos":[0,15],"source":"IComparer<TKey>"}]},{"pos":[606496,606505],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[606567,606568],"content":"<","needQuote":true,"nodes":[]},{"pos":[606595,606599],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[606720,606729],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[606792,606795]},{"pos":[606829,606833],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"pos":[606863,606864],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[607082,607094],"content":"IComparer<T>","needQuote":true,"nodes":[{"content":"IComparer&lt;T&gt;","pos":[0,12],"source":"IComparer<T>"}]},{"pos":[607305,607314],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[607376,607377],"content":"<","needQuote":true,"nodes":[]},{"pos":[607404,607405],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[607523,607532],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[607595,607598]},{"pos":[607632,607633],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[607660,607661],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[607902,607931],"content":"Func<TSource, Int32, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Int32, TResult&gt;","pos":[0,29],"source":"Func<TSource, Int32, TResult>"}]},{"pos":[608142,608146],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[608204,608205],"content":"<","needQuote":true,"nodes":[]},{"pos":[608232,608239],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[608273,608274]},{"pos":[608328,608333],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[608393,608394]},{"pos":[608426,608433],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[608532,608536],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[608595,608598]},{"pos":[608632,608639],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[608673,608674]},{"pos":[608728,608733],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[608793,608794]},{"pos":[608826,608833],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[608866,608867],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[609164,609199],"content":"Func<TSource, IEnumerable<TResult>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, IEnumerable&lt;TResult&gt;&gt;","pos":[0,35],"source":"Func<TSource, IEnumerable<TResult>>"}]},{"pos":[609474,609478],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[609536,609537],"content":"<","needQuote":true,"nodes":[]},{"pos":[609564,609571],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[609605,609606]},{"pos":[609688,609699],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[609784,609785],"content":"<","needQuote":true,"nodes":[]},{"pos":[609812,609819],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[609950,609954],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[610013,610016]},{"pos":[610050,610057],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[610091,610092]},{"pos":[610174,610185],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[610271,610274]},{"pos":[610308,610315],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[610348,610349],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[610376,610377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[610729,610771],"content":"Func<TSource, Int32, IEnumerable<TResult>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Int32, IEnumerable&lt;TResult&gt;&gt;","pos":[0,42],"source":"Func<TSource, Int32, IEnumerable<TResult>>"}]},{"pos":[611081,611085],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[611143,611144],"content":"<","needQuote":true,"nodes":[]},{"pos":[611171,611178],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[611212,611213]},{"pos":[611267,611272],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[611332,611333]},{"pos":[611415,611426],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[611511,611512],"content":"<","needQuote":true,"nodes":[]},{"pos":[611539,611546],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[611677,611681],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[611740,611743]},{"pos":[611777,611784],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[611818,611819]},{"pos":[611873,611878],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[611938,611939]},{"pos":[612021,612032],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[612118,612121]},{"pos":[612155,612162],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[612195,612196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[612223,612224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[612594,612633],"content":"Func<TSource, IEnumerable<TCollection>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, IEnumerable&lt;TCollection&gt;&gt;","pos":[0,39],"source":"Func<TSource, IEnumerable<TCollection>>"}]},{"pos":[612920,612924],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[612982,612983],"content":"<","needQuote":true,"nodes":[]},{"pos":[613010,613017],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[613051,613052]},{"pos":[613134,613145],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[613230,613231],"content":"<","needQuote":true,"nodes":[]},{"pos":[613258,613269],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"pos":[613404,613408],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[613467,613470]},{"pos":[613504,613511],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[613545,613546]},{"pos":[613628,613639],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[613725,613728]},{"pos":[613762,613773],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"pos":[613810,613811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[613838,613839],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[614160,614195],"content":"Func<TSource, TCollection, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, TCollection, TResult&gt;","pos":[0,35],"source":"Func<TSource, TCollection, TResult>"}]},{"pos":[614410,614414],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[614472,614473],"content":"<","needQuote":true,"nodes":[]},{"pos":[614500,614507],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[614541,614542]},{"pos":[614574,614585],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"content":",","pos":[614623,614624]},{"pos":[614656,614663],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[614762,614766],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[614825,614828]},{"pos":[614862,614869],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[614903,614904]},{"pos":[614936,614947],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"content":",","pos":[614985,614986]},{"pos":[615018,615025],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[615058,615059],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[615376,615422],"content":"Func<TSource, Int32, IEnumerable<TCollection>>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Int32, IEnumerable&lt;TCollection&gt;&gt;","pos":[0,46],"source":"Func<TSource, Int32, IEnumerable<TCollection>>"}]},{"pos":[615744,615748],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[615806,615807],"content":"<","needQuote":true,"nodes":[]},{"pos":[615834,615841],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[615875,615876]},{"pos":[615930,615935],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[615995,615996]},{"pos":[616078,616089],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[616174,616175],"content":"<","needQuote":true,"nodes":[]},{"pos":[616202,616213],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"pos":[616348,616352],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[616411,616414]},{"pos":[616448,616455],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[616489,616490]},{"pos":[616544,616549],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[616609,616610]},{"pos":[616692,616703],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[616789,616792]},{"pos":[616826,616837],"content":"TCollection","needQuote":true,"nodes":[{"content":"TCollection","pos":[0,11]}]},{"pos":[616874,616875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[616902,616903],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[617255,617284],"content":"Func<TSource, Int32, Boolean>","needQuote":true,"nodes":[{"content":"Func&lt;TSource, Int32, Boolean&gt;","pos":[0,29],"source":"Func<TSource, Int32, Boolean>"}]},{"pos":[617509,617513],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[617571,617572],"content":"<","needQuote":true,"nodes":[]},{"pos":[617599,617606],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[617640,617641]},{"pos":[617695,617700],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[617760,617761]},{"pos":[617817,617824],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[617951,617955],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[618014,618017]},{"pos":[618051,618058],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":",","pos":[618092,618093]},{"pos":[618147,618152],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[618212,618213]},{"pos":[618269,618276],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[618337,618338],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[618542,618551],"content":"TSource[]","needQuote":true,"nodes":[{"content":"TSource[]","pos":[0,9]}]},{"pos":[618645,618652],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"content":"[]","pos":[618686,618688]},{"pos":[618730,618737],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[618770,618772],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[619007,619032],"content":"Dictionary<TKey, TSource>","needQuote":true,"nodes":[{"content":"Dictionary&lt;TKey, TSource&gt;","pos":[0,25],"source":"Dictionary<TKey, TSource>"}]},{"pos":[619283,619293],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"pos":[619377,619378],"content":"<","needQuote":true,"nodes":[]},{"pos":[619405,619409],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[619440,619441]},{"pos":[619473,619480],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[619605,619615],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"content":"(Of","pos":[619700,619703]},{"pos":[619737,619741],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[619772,619773]},{"pos":[619805,619812],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[619845,619846],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[620127,620151],"content":"Dictionary<TKey, TValue>","needQuote":true,"nodes":[{"content":"Dictionary&lt;TKey, TValue&gt;","pos":[0,24],"source":"Dictionary<TKey, TValue>"}]},{"pos":[620399,620409],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"pos":[620472,620473],"content":"<","needQuote":true,"nodes":[]},{"pos":[620500,620504],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[620535,620536]},{"pos":[620568,620574],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[620698,620708],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"content":"(Of","pos":[620772,620775]},{"pos":[620809,620813],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[620844,620845]},{"pos":[620877,620883],"content":"TValue","needQuote":true,"nodes":[{"content":"TValue","pos":[0,6]}]},{"pos":[620915,620916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[621239,621265],"content":"Dictionary<TKey, TElement>","needQuote":true,"nodes":[{"content":"Dictionary&lt;TKey, TElement&gt;","pos":[0,26],"source":"Dictionary<TKey, TElement>"}]},{"pos":[621519,621529],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"pos":[621613,621614],"content":"<","needQuote":true,"nodes":[]},{"pos":[621641,621645],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[621676,621677]},{"pos":[621709,621717],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[621843,621853],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"content":"(Of","pos":[621938,621941]},{"pos":[621975,621979],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[622010,622011]},{"pos":[622043,622051],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[622085,622086],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[622400,622413],"content":"List<TSource>","needQuote":true,"nodes":[{"content":"List&lt;TSource&gt;","pos":[0,13],"source":"List<TSource>"}]},{"pos":[622622,622626],"content":"List","needQuote":true,"nodes":[{"content":"List","pos":[0,4]}]},{"pos":[622704,622705],"content":"<","needQuote":true,"nodes":[]},{"pos":[622732,622739],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[622858,622862],"content":"List","needQuote":true,"nodes":[{"content":"List","pos":[0,4]}]},{"content":"(Of","pos":[622941,622944]},{"pos":[622978,622985],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[623018,623019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[623260,623267],"content":"List<T>","needQuote":true,"nodes":[{"content":"List&lt;T&gt;","pos":[0,7],"source":"List<T>"}]},{"pos":[623458,623462],"content":"List","needQuote":true,"nodes":[{"content":"List","pos":[0,4]}]},{"pos":[623519,623520],"content":"<","needQuote":true,"nodes":[]},{"pos":[623547,623548],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[623661,623665],"content":"List","needQuote":true,"nodes":[{"content":"List","pos":[0,4]}]},{"content":"(Of","pos":[623723,623726]},{"pos":[623760,623761],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[623788,623789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[624020,624042],"content":"ILookup<TKey, TSource>","needQuote":true,"nodes":[{"content":"ILookup&lt;TKey, TSource&gt;","pos":[0,22],"source":"ILookup<TKey, TSource>"}]},{"pos":[624236,624243],"content":"ILookup","needQuote":true,"nodes":[{"content":"ILookup","pos":[0,7]}]},{"pos":[624288,624289],"content":"<","needQuote":true,"nodes":[]},{"pos":[624316,624320],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[624351,624352]},{"pos":[624384,624391],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[624498,624505],"content":"ILookup","needQuote":true,"nodes":[{"content":"ILookup","pos":[0,7]}]},{"content":"(Of","pos":[624551,624554]},{"pos":[624588,624592],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[624623,624624]},{"pos":[624656,624663],"content":"TSource","needQuote":true,"nodes":[{"content":"TSource","pos":[0,7]}]},{"pos":[624696,624697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[624901,624912],"content":"ILookup<, >","needQuote":true,"nodes":[{"content":"ILookup&lt;, &gt;","pos":[0,11],"source":"ILookup<, >"}]},{"pos":[625073,625080],"content":"ILookup","needQuote":true,"nodes":[{"content":"ILookup","pos":[0,7]}]},{"pos":[625125,625126],"content":"<","needQuote":true,"nodes":[]},{"content":",","pos":[625161,625162]},{"pos":[625275,625282],"content":"ILookup","needQuote":true,"nodes":[{"content":"ILookup","pos":[0,7]}]},{"content":"(Of","pos":[625328,625331]},{"content":",","pos":[625373,625374]},{"pos":[625413,625414],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[625642,625665],"content":"ILookup<TKey, TElement>","needQuote":true,"nodes":[{"content":"ILookup&lt;TKey, TElement&gt;","pos":[0,23],"source":"ILookup<TKey, TElement>"}]},{"pos":[625862,625869],"content":"ILookup","needQuote":true,"nodes":[{"content":"ILookup","pos":[0,7]}]},{"pos":[625914,625915],"content":"<","needQuote":true,"nodes":[]},{"pos":[625942,625946],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[625977,625978]},{"pos":[626010,626018],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[626126,626133],"content":"ILookup","needQuote":true,"nodes":[{"content":"ILookup","pos":[0,7]}]},{"content":"(Of","pos":[626179,626182]},{"pos":[626216,626220],"content":"TKey","needQuote":true,"nodes":[{"content":"TKey","pos":[0,4]}]},{"content":",","pos":[626251,626252]},{"pos":[626284,626292],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[626326,626327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[626632,626651],"content":"IEnumerable<TFirst>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TFirst&gt;","pos":[0,19],"source":"IEnumerable<TFirst>"}]},{"pos":[626885,626896],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[626981,626982],"content":"<","needQuote":true,"nodes":[]},{"pos":[627009,627015],"content":"TFirst","needQuote":true,"nodes":[{"content":"TFirst","pos":[0,6]}]},{"pos":[627140,627151],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[627237,627240]},{"pos":[627274,627280],"content":"TFirst","needQuote":true,"nodes":[{"content":"TFirst","pos":[0,6]}]},{"pos":[627312,627313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[627624,627644],"content":"IEnumerable<TSecond>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TSecond&gt;","pos":[0,20],"source":"IEnumerable<TSecond>"}]},{"pos":[627881,627892],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[627977,627978],"content":"<","needQuote":true,"nodes":[]},{"pos":[628005,628012],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"pos":[628138,628149],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[628235,628238]},{"pos":[628272,628279],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"pos":[628312,628313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[628571,628601],"content":"Func<TFirst, TSecond, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TFirst, TSecond, TResult&gt;","pos":[0,30],"source":"Func<TFirst, TSecond, TResult>"}]},{"pos":[628801,628805],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[628863,628864],"content":"<","needQuote":true,"nodes":[]},{"pos":[628891,628897],"content":"TFirst","needQuote":true,"nodes":[{"content":"TFirst","pos":[0,6]}]},{"content":",","pos":[628930,628931]},{"pos":[628963,628970],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"content":",","pos":[629004,629005]},{"pos":[629037,629044],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[629143,629147],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[629206,629209]},{"pos":[629243,629249],"content":"TFirst","needQuote":true,"nodes":[{"content":"TFirst","pos":[0,6]}]},{"content":",","pos":[629282,629283]},{"pos":[629315,629322],"content":"TSecond","needQuote":true,"nodes":[{"content":"TSecond","pos":[0,7]}]},{"content":",","pos":[629356,629357]},{"pos":[629389,629396],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[629429,629430],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[629651,629672],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[629881,629906],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[630102,630119],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[630294,630314],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[630505,630532],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[630751,630768],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  id: Enumerable\n  parent: System.Linq\n  children:\n  - System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  - System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  - System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  - System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.Empty``1\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  - System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  - System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  - System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  - System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  - System.Linq.Enumerable.Range(System.Int32,System.Int32)\n  - System.Linq.Enumerable.Repeat``1(``0,System.Int32)\n  - System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  - System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  - System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  - System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  - System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  - System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  - System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  - System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  langs:\n  - csharp\n  - vb\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  type: Class\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Enumerable\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 10\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Provides a set of <strong>static</strong> (<strong>Shared</strong> in Visual Basic) methods for querying objects that implement <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public class Enumerable\n    content.vb: Public Class Enumerable\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  commentId: M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  id: Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>)\n  fullName: System.Linq.Enumerable.Aggregate<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aggregate\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 12\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Applies an accumulator function over a sequence.</p>\\n\"\n  syntax:\n    content: public static TSource Aggregate<TSource>(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Aggregate(Of TSource)(source As IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to aggregate over.</p>\\n\"\n    - id: func\n      type: System.Func{{TSource},{TSource},{TSource}}\n      description: \"\\n<p>An accumulator function to be invoked on each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The final accumulator value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>func</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Aggregate(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TSource, TSource))\n  name.vb: Aggregate(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, TSource, TSource))\n  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>)\n  nameWithType.vb: Enumerable.Aggregate(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, TSource, TSource))\n- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  commentId: M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  id: Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Aggregate<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)\n  fullName: System.Linq.Enumerable.Aggregate<TSource, TAccumulate>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aggregate\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 13\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</p>\\n\"\n  syntax:\n    content: public static TAccumulate Aggregate<TSource, TAccumulate>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Aggregate(Of TSource, TAccumulate)(source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to aggregate over.</p>\\n\"\n    - id: seed\n      type: '{TAccumulate}'\n      description: \"\\n<p>The initial accumulator value.</p>\\n\"\n    - id: func\n      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}\n      description: \"\\n<p>An accumulator function to be invoked on each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TAccumulate\n      description: \"\\n<p>The type of the accumulator value.</p>\\n\"\n    return:\n      type: '{TAccumulate}'\n      description: \"\\n<p>The final accumulator value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>func</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Aggregate(Of TSource, TAccumulate)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate))\n  name.vb: Aggregate(Of TSource, TAccumulate)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))\n  nameWithType: Enumerable.Aggregate<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)\n  nameWithType.vb: Enumerable.Aggregate(Of TSource, TAccumulate)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))\n- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  commentId: M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  id: Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Aggregate<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)\n  fullName: System.Linq.Enumerable.Aggregate<TSource, TAccumulate, TResult>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aggregate\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 14\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</p>\\n\"\n  syntax:\n    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to aggregate over.</p>\\n\"\n    - id: seed\n      type: '{TAccumulate}'\n      description: \"\\n<p>The initial accumulator value.</p>\\n\"\n    - id: func\n      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}\n      description: \"\\n<p>An accumulator function to be invoked on each element.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TAccumulate},{TResult}}\n      description: \"\\n<p>A function to transform the final accumulator value into the result value.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TAccumulate\n      description: \"\\n<p>The type of the accumulator value.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the resulting value.</p>\\n\"\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The transformed final accumulator value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>func</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TResult))\n  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))\n  nameWithType: Enumerable.Aggregate<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)\n  nameWithType.vb: Enumerable.Aggregate(Of TSource, TAccumulate, TResult)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))\n- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: All<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.All<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: All\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 15\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether all elements of a sequence satisfy a condition.</p>\\n\"\n  syntax:\n    content: public static bool All<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function All(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements to apply the predicate to.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.All(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: All(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.All(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})\n  id: Any``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Any<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.Any<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Any\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 16\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether a sequence contains any elements.</p>\\n\"\n  syntax:\n    content: public static bool Any<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Any(Of TSource)(source As IEnumerable(Of TSource)) As Boolean\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to check for emptiness.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the source sequence contains any elements; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n    commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Any(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Any(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.Any(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Any<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.Any<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Any\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 17\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether any element of a sequence satisfies a condition.</p>\\n\"\n  syntax:\n    content: public static bool Any<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Any(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to apply the predicate to.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if any elements in the source sequence pass the test in the specified predicate; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Any(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: Any(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.Any(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  id: AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: AsEnumerable<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.AsEnumerable<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AsEnumerable\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 18\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the input typed as <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> AsEnumerable<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AsEnumerable(Of TSource)(source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The sequence to type as <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The input sequence typed as <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.AsEnumerable(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: AsEnumerable(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.AsEnumerable(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  id: Average(System.Collections.Generic.IEnumerable{System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(IEnumerable<Decimal>)\n  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 19\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal Average(this IEnumerable<decimal> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IEnumerable(Of Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Decimal}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Decimal))\n  name.vb: Average(IEnumerable(Of Decimal))\n  nameWithType: Enumerable.Average(IEnumerable<Decimal>)\n  nameWithType.vb: Enumerable.Average(IEnumerable(Of Decimal))\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})\n  id: Average(System.Collections.Generic.IEnumerable{System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(IEnumerable<Double>)\n  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 20\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double Average(this IEnumerable<double> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IEnumerable(Of Double)) As Double\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Double}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Double))\n  name.vb: Average(IEnumerable(Of Double))\n  nameWithType: Enumerable.Average(IEnumerable<Double>)\n  nameWithType.vb: Enumerable.Average(IEnumerable(Of Double))\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})\n  id: Average(System.Collections.Generic.IEnumerable{System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(IEnumerable<Int32>)\n  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 21\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double Average(this IEnumerable<int> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IEnumerable(Of Integer)) As Double\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int32}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Int32))\n  name.vb: Average(IEnumerable(Of Int32))\n  nameWithType: Enumerable.Average(IEnumerable<Int32>)\n  nameWithType.vb: Enumerable.Average(IEnumerable(Of Int32))\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})\n  id: Average(System.Collections.Generic.IEnumerable{System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(IEnumerable<Int64>)\n  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 22\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double Average(this IEnumerable<long> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IEnumerable(Of Long)) As Double\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int64}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Int64))\n  name.vb: Average(IEnumerable(Of Int64))\n  nameWithType: Enumerable.Average(IEnumerable<Int64>)\n  nameWithType.vb: Enumerable.Average(IEnumerable(Of Int64))\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(IEnumerable<Nullable<Decimal>>)\n  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 23\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal ? Average(this IEnumerable<decimal ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IEnumerable(Of Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum of the elements in the sequence is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))\n  name.vb: Average(IEnumerable(Of Nullable(Of Decimal)))\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Decimal>>)\n  nameWithType.vb: Enumerable.Average(IEnumerable(Of Nullable(Of Decimal)))\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(IEnumerable<Nullable<Double>>)\n  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 24\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double ? Average(this IEnumerable<double ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IEnumerable(Of Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))\n  name.vb: Average(IEnumerable(Of Nullable(Of Double)))\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Double>>)\n  nameWithType.vb: Enumerable.Average(IEnumerable(Of Nullable(Of Double)))\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(IEnumerable<Nullable<Int32>>)\n  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 25\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double ? Average(this IEnumerable<int ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IEnumerable(Of Integer?)) As Double?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum of the elements in the sequence is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))\n  name.vb: Average(IEnumerable(Of Nullable(Of Int32)))\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int32>>)\n  nameWithType.vb: Enumerable.Average(IEnumerable(Of Nullable(Of Int32)))\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(IEnumerable<Nullable<Int64>>)\n  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 26\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double ? Average(this IEnumerable<long ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IEnumerable(Of Long?)) As Double?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum of the elements in the sequence is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))\n  name.vb: Average(IEnumerable(Of Nullable(Of Int64)))\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Int64>>)\n  nameWithType.vb: Enumerable.Average(IEnumerable(Of Nullable(Of Int64)))\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  id: Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(IEnumerable<Nullable<Single>>)\n  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 27\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static float ? Average(this IEnumerable<float ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IEnumerable(Of Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))\n  name.vb: Average(IEnumerable(Of Nullable(Of Single)))\n  nameWithType: Enumerable.Average(IEnumerable<Nullable<Single>>)\n  nameWithType.vb: Enumerable.Average(IEnumerable(Of Nullable(Of Single)))\n- uid: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  commentId: M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})\n  id: Average(System.Collections.Generic.IEnumerable{System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average(IEnumerable<Single>)\n  fullName: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 28\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static float Average(this IEnumerable<float> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(source As IEnumerable(Of Single)) As Single\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Single}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the average of.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable(Of System.Single))\n  name.vb: Average(IEnumerable(Of Single))\n  nameWithType: Enumerable.Average(IEnumerable<Single>)\n  nameWithType.vb: Enumerable.Average(IEnumerable(Of Single))\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)\n  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 29\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static decimal Average<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate an average.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Decimal}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum of the elements in the sequence is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))\n  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)\n  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Double>)\n  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 30\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double Average<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Double}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))\n  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Double>)\n  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)\n  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 31\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double Average<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Double\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int32}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum of the elements in the sequence is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))\n  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)\n  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)\n  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 32\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double Average<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Double\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int64}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of source.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum of the elements in the sequence is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))\n  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)\n  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)\n  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 33\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static decimal ? Average<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Decimal}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum of the elements in the sequence is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))\n  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)\n  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)\n  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 34\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double ? Average<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Double}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))\n  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)\n  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)\n  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 35\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double ? Average<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer?)) As Double?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int32}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum of the elements in the sequence is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))\n  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)\n  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)\n  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 36\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double ? Average<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long?)) As Double?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int64}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))\n  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)\n  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)\n  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 37\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static float ? Average<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Single}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The average of the sequence of values, or <strong>null</strong> if the source sequence is empty or contains only values that are <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))\n  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)\n  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))\n- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  id: Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Single>)\n  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Average\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 38\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the average of a sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static float Average<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Average(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to calculate the average of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Single}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The average of the sequence of values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))\n  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))\n  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Single>)\n  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  id: Cast``1(System.Collections.IEnumerable)\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Cast\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 39\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Casts the elements of an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the specified type.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> Cast<TResult>(this IEnumerable source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Cast(Of TResult)(source As IEnumerable) As IEnumerable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Collections.IEnumerable\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements to be cast to type <em>TResult</em>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type to cast the elements of <em>source</em> to.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains each element of the source sequence cast to the specified type.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>An element in the sequence cannot be cast to type <em>TResult</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Concat\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 40\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Concatenates two sequences.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Concat<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Concat(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The first sequence to concatenate.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The sequence to concatenate to the first sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the concatenated elements of the two input sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Concat(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Concat(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))\n  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.Concat(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  commentId: M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  id: Append``1(System.Collections.Generic.IEnumerable{``0},``0)\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Append<TSource>(IEnumerable<TSource>, TSource)\n  fullName: System.Linq.Enumerable.Append<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Append\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 41\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  syntax:\n    content: public static IEnumerable<TSource> Append<TSource>(this IEnumerable<TSource> source, TSource element)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Append(Of TSource)(source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n    - id: element\n      type: '{TSource}'\n    typeParameters:\n    - id: TSource\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Append(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)\n  name.vb: Append(Of TSource)(IEnumerable(Of TSource), TSource)\n  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType.vb: Enumerable.Append(Of TSource)(IEnumerable(Of TSource), TSource)\n- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  commentId: M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  id: Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Prepend<TSource>(IEnumerable<TSource>, TSource)\n  fullName: System.Linq.Enumerable.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Prepend\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 42\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  syntax:\n    content: public static IEnumerable<TSource> Prepend<TSource>(this IEnumerable<TSource> source, TSource element)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Prepend(Of TSource)(source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n    - id: element\n      type: '{TSource}'\n    typeParameters:\n    - id: TSource\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Prepend(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)\n  name.vb: Prepend(Of TSource)(IEnumerable(Of TSource), TSource)\n  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType.vb: Enumerable.Prepend(Of TSource)(IEnumerable(Of TSource), TSource)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  id: Contains``1(System.Collections.Generic.IEnumerable{``0},``0)\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Contains<TSource>(IEnumerable<TSource>, TSource)\n  fullName: System.Linq.Enumerable.Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 43\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether a sequence contains a specified element by using the default equality comparer.</p>\\n\"\n  syntax:\n    content: public static bool Contains<TSource>(this IEnumerable<TSource> source, TSource value)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Contains(Of TSource)(source As IEnumerable(Of TSource), value As TSource) As Boolean\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence in which to locate a value.</p>\\n\"\n    - id: value\n      type: '{TSource}'\n      description: \"\\n<p>The value to locate in the sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the source sequence contains an element that has the specified value; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Contains(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)\n  name.vb: Contains(Of TSource)(IEnumerable(Of TSource), TSource)\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType.vb: Enumerable.Contains(Of TSource)(IEnumerable(Of TSource), TSource)\n- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  id: Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  fullName: System.Linq.Enumerable.Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 44\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether a sequence contains a specified element by using a specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static bool Contains<TSource>(this IEnumerable<TSource> source, TSource value, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Contains(Of TSource)(source As IEnumerable(Of TSource), value As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence in which to locate a value.</p>\\n\"\n    - id: value\n      type: '{TSource}'\n      description: \"\\n<p>The value to locate in the sequence.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An equality comparer to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the source sequence contains an element that has the specified value; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Contains(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Contains(Of TSource)(IEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))\n  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)\n  nameWithType.vb: Enumerable.Contains(Of TSource)(IEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})\n  id: Count``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Count<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.Count<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 45\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the number of elements in a sequence.</p>\\n\"\n  syntax:\n    content: public static int Count<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Count(Of TSource)(source As IEnumerable(Of TSource)) As Integer\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence that contains elements to be counted.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements in the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The number of elements in <em>source</em> is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Count(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Count(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.Count(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Count<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.Count<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 46\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns a number that represents how many elements in the specified sequence satisfy a condition.</p>\\n\"\n  syntax:\n    content: public static int Count<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Count(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence that contains elements to be tested and counted.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The number of elements in <em>source</em> is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Count(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: Count(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.Count(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  id: DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultIfEmpty\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 47\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> DefaultIfEmpty<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function DefaultIfEmpty(Of TSource)(source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The sequence to return a default value for if it is empty.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains the default value for the <em>TSource</em> type if <em>source</em> is empty; otherwise, <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.DefaultIfEmpty(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: DefaultIfEmpty(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.DefaultIfEmpty(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  id: DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  fullName: System.Linq.Enumerable.DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultIfEmpty\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 48\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> DefaultIfEmpty<TSource>(this IEnumerable<TSource> source, TSource defaultValue)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function DefaultIfEmpty(Of TSource)(source As IEnumerable(Of TSource), defaultValue As TSource) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The sequence to return the specified value for if it is empty.</p>\\n\"\n    - id: defaultValue\n      type: '{TSource}'\n      description: \"\\n<p>The value to return if the sequence is empty.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains <em>defaultValue</em> if <em>source</em> is empty; otherwise, <em>source</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.DefaultIfEmpty(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)\n  name.vb: DefaultIfEmpty(Of TSource)(IEnumerable(Of TSource), TSource)\n  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)\n  nameWithType.vb: Enumerable.DefaultIfEmpty(Of TSource)(IEnumerable(Of TSource), TSource)\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  id: Distinct``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Distinct<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Distinct\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 49\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns distinct elements from a sequence by using the default equality comparer to compare values.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Distinct<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Distinct(Of TSource)(source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The sequence to remove duplicate elements from.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains distinct elements from the source sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Distinct(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Distinct(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.Distinct(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.Enumerable.Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Distinct\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 50\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns distinct elements from a sequence by using a specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Distinct<TSource>(this IEnumerable<TSource> source, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Distinct(Of TSource)(source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The sequence to remove duplicate elements from.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains distinct elements from the source sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Distinct(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Distinct(Of TSource)(IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: Enumerable.Distinct(Of TSource)(IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  commentId: M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  id: ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  fullName: System.Linq.Enumerable.ElementAt<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElementAt\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 51\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the element at a specified index in a sequence.</p>\\n\"\n  syntax:\n    content: public static TSource ElementAt<TSource>(this IEnumerable<TSource> source, int index)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ElementAt(Of TSource)(source As IEnumerable(Of TSource), index As Integer) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return an element from.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to retrieve.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The element at the specified position in the source sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than 0 or greater than or equal to the number of elements in <em>source</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ElementAt(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)\n  name.vb: ElementAt(Of TSource)(IEnumerable(Of TSource), Int32)\n  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType.vb: Enumerable.ElementAt(Of TSource)(IEnumerable(Of TSource), Int32)\n- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  commentId: M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  id: ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  fullName: System.Linq.Enumerable.ElementAtOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElementAtOrDefault\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 52\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the element at a specified index in a sequence or a default value if the index is out of range.</p>\\n\"\n  syntax:\n    content: public static TSource ElementAtOrDefault<TSource>(this IEnumerable<TSource> source, int index)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ElementAtOrDefault(Of TSource)(source As IEnumerable(Of TSource), index As Integer) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return an element from.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to retrieve.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>\\n<strong>default</strong>(<em>TSource</em>) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ElementAtOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)\n  name.vb: ElementAtOrDefault(Of TSource)(IEnumerable(Of TSource), Int32)\n  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType.vb: Enumerable.ElementAtOrDefault(Of TSource)(IEnumerable(Of TSource), Int32)\n- uid: System.Linq.Enumerable.Empty``1\n  commentId: M:System.Linq.Enumerable.Empty``1\n  id: Empty``1\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Empty<TResult>()\n  fullName: System.Linq.Enumerable.Empty<TResult>()\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 53\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns an empty <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the specified type argument.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> Empty<TResult>()\n    content.vb: Public Shared Function Empty(Of TResult) As IEnumerable(Of TResult)\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type to assign to the type parameter of the returned generic <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An empty <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose type argument is <em>TResult</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Empty(Of TResult)()\n  name.vb: Empty(Of TResult)()\n  nameWithType: Enumerable.Empty<TResult>()\n  nameWithType.vb: Enumerable.Empty(Of TResult)()\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Except\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 54\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set difference of two sequences by using the default equality comparer to compare values.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Except<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Except(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements that are not also in <em>second</em> will be returned.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence that contains the set difference of the elements of two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Except(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Except(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.Except(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.Enumerable.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Except\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 55\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set difference of two sequences by using the specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Except<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Except(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements that are not also in <em>second</em> will be returned.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence that contains the set difference of the elements of two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Except(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Except(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: Enumerable.Except(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})\n  id: First``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: First<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.First<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: First\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 56\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the first element of a sequence.</p>\\n\"\n  syntax:\n    content: public static TSource First<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function First(Of TSource)(source As IEnumerable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the first element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The first element in the specified sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The source sequence is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.First(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: First(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.First(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: First<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.First<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: First\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 57\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the first element in a sequence that satisfies a specified condition.</p>\\n\"\n  syntax:\n    content: public static TSource First<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function First(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return an element from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The first element in the sequence that passes the test in the specified predicate function.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>The source sequence is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.First(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: First(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.First(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FirstOrDefault\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 58\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the first element of a sequence, or a default value if the sequence contains no elements.</p>\\n\"\n  syntax:\n    content: public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function FirstOrDefault(Of TSource)(source As IEnumerable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the first element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>\\n<strong>default</strong>(<em>TSource</em>) if <em>source</em> is empty; otherwise, the first element in <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.FirstOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: FirstOrDefault(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.FirstOrDefault(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FirstOrDefault\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 59\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</p>\\n\"\n  syntax:\n    content: public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function FirstOrDefault(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return an element from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>\\n<strong>default</strong>(<em>TSource</em>) if <em>source</em> is empty or if no element passes the test specified by <em>predicate</em>; otherwise, the first element in <em>source</em> that passes the test specified by <em>predicate</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.FirstOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: FirstOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.FirstOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 60\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TSource}}}\n      description: \"\\n<p>An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains a sequence of objects and a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: GroupBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))\n  nameWithType: Enumerable.GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 61\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TSource}}}\n      description: \"\\n<p>An IEnumerable<IGrouping<TKey, TSource>> in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains a collection of objects and a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))\n  nameWithType: Enumerable.GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)\n  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)\n  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 62\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As IEnumerable(Of IGrouping(Of TKey, TElement))\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A function to map each source element to an element in the <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the elements in the <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}\n      description: \"\\n<p>An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains a collection of objects of type <em>TElement</em> and a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))\n  name.vb: GroupBy(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))\n  nameWithType: Enumerable.GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)\n  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 63\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TElement))\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A function to map each source element to an element in an <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the elements in the <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}\n      description: \"\\n<p>An IEnumerable<IGrouping<TKey, TElement>> in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains a collection of objects of type <em>TElement</em> and a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupBy(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))\n  nameWithType: Enumerable.GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)\n  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)\n  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 64\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult)) As IEnumerable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}\n      description: \"\\n<p>A function to create a result value from each group.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))\n  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult))\n  nameWithType: Enumerable.GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)\n  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult))\n- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 65\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}\n      description: \"\\n<p>A function to create a result value from each group.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys with.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))\n  nameWithType: Enumerable.GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)\n  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  id: GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)\n  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 66\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As IEnumerable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A function to map each source element to an element in an <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}\n      description: \"\\n<p>A function to create a result value from each group.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the elements in each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))\n  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult))\n  nameWithType: Enumerable.GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)\n  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult))\n- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  id: GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupBy\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 67\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to group.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract the key for each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A function to map each source element to an element in an <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}\n      description: \"\\n<p>A function to create a result value from each group.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys with.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the elements in each <xref href=\\\"System.Linq.IGrouping`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>A collection of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult), IEqualityComparer(Of TKey))\n  nameWithType: Enumerable.GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)\n  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult), IEqualityComparer(Of TKey))\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  id: GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)\n  fullName: System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupJoin\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 68\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As IEnumerable(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Collections.Generic.IEnumerable{{TOuter}}\n      description: \"\\n<p>The first sequence to join.</p>\\n\"\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{{TInner}}\n      description: \"\\n<p>The sequence to join to the first sequence.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Func{{TOuter},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Func{{TInner},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}\n      description: \"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by the key selector functions.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result elements.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements of type <em>TResult</em> that are obtained by performing a grouped join on two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))\n  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))\n  nameWithType: Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)\n  nameWithType.vb: Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))\n- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  id: GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupJoin\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 69\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is used to compare keys.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Collections.Generic.IEnumerable{{TOuter}}\n      description: \"\\n<p>The first sequence to join.</p>\\n\"\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{{TInner}}\n      description: \"\\n<p>The sequence to join to the first sequence.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Func{{TOuter},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Func{{TInner},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}\n      description: \"\\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to hash and compare keys.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by the key selector functions.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result elements.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements of type <em>TResult</em> that are obtained by performing a grouped join on two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))\n  nameWithType: Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)\n  nameWithType.vb: Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Intersect\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 70\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set intersection of two sequences by using the default equality comparer to compare values.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Intersect<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Intersect(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose distinct elements that also appear in <em>second</em> will be returned.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose distinct elements that also appear in the first sequence will be returned.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence that contains the elements that form the set intersection of two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Intersect(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Intersect(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.Intersect(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.Enumerable.Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Intersect\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 71\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set intersection of two sequences by using the specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Intersect<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Intersect(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose distinct elements that also appear in <em>second</em> will be returned.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose distinct elements that also appear in the first sequence will be returned.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence that contains the elements that form the set intersection of two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Intersect(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Intersect(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: Enumerable.Intersect(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  id: Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)\n  fullName: System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Join\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 72\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As IEnumerable(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Collections.Generic.IEnumerable{{TOuter}}\n      description: \"\\n<p>The first sequence to join.</p>\\n\"\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{{TInner}}\n      description: \"\\n<p>The sequence to join to the first sequence.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Func{{TOuter},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Func{{TInner},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TOuter},{TInner},{TResult}}\n      description: \"\\n<p>A function to create a result element from two matching elements.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by the key selector functions.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result elements.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has elements of type <em>TResult</em> that are obtained by performing an inner join on two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))\n  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))\n  nameWithType: Enumerable.Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)\n  nameWithType.vb: Enumerable.Join(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))\n- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  id: Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Join\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 73\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Correlates the elements of two sequences based on matching keys. A specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is used to compare keys.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this IEnumerable<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)\n    parameters:\n    - id: outer\n      type: System.Collections.Generic.IEnumerable{{TOuter}}\n      description: \"\\n<p>The first sequence to join.</p>\\n\"\n    - id: inner\n      type: System.Collections.Generic.IEnumerable{{TInner}}\n      description: \"\\n<p>The sequence to join to the first sequence.</p>\\n\"\n    - id: outerKeySelector\n      type: System.Func{{TOuter},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the first sequence.</p>\\n\"\n    - id: innerKeySelector\n      type: System.Func{{TInner},{TKey}}\n      description: \"\\n<p>A function to extract the join key from each element of the second sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TOuter},{TInner},{TResult}}\n      description: \"\\n<p>A function to create a result element from two matching elements.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to hash and compare keys.</p>\\n\"\n    typeParameters:\n    - id: TOuter\n      description: \"\\n<p>The type of the elements of the first sequence.</p>\\n\"\n    - id: TInner\n      description: \"\\n<p>The type of the elements of the second sequence.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by the key selector functions.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result elements.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has elements of type <em>TResult</em> that are obtained by performing an inner join on two sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))\n  nameWithType: Enumerable.Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)\n  nameWithType.vb: Enumerable.Join(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})\n  id: Last``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Last<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.Last<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Last\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 74\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the last element of a sequence.</p>\\n\"\n  syntax:\n    content: public static TSource Last<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Last(Of TSource)(source As IEnumerable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the last element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The value at the last position in the source sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The source sequence is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Last(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Last(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.Last(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Last<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.Last<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Last\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 75\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the last element of a sequence that satisfies a specified condition.</p>\\n\"\n  syntax:\n    content: public static TSource Last<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Last(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return an element from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The last element in the sequence that passes the test in the specified predicate function.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>The source sequence is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Last(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: Last(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.Last(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  id: LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: LastOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LastOrDefault\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 76\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the last element of a sequence, or a default value if the sequence contains no elements.</p>\\n\"\n  syntax:\n    content: public static TSource LastOrDefault<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function LastOrDefault(Of TSource)(source As IEnumerable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the last element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>\\n<strong>default</strong>(<em>TSource</em>) if the source sequence is empty; otherwise, the last element in the <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.LastOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: LastOrDefault(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.LastOrDefault(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LastOrDefault\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 77\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</p>\\n\"\n  syntax:\n    content: public static TSource LastOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function LastOrDefault(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return an element from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>\\n<strong>default</strong>(<em>TSource</em>) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.LastOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: LastOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.LastOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  id: LongCount``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: LongCount<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LongCount\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 78\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the total number of elements in a sequence.</p>\\n\"\n  syntax:\n    content: public static long LongCount<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function LongCount(Of TSource)(source As IEnumerable(Of TSource)) As Long\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements to be counted.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The number of elements in the source sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The number of elements exceeds <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.LongCount(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: LongCount(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.LongCount(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LongCount\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 79\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents how many elements in a sequence satisfy a condition.</p>\\n\"\n  syntax:\n    content: public static long LongCount<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function LongCount(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Long\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements to be counted.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The number of matching elements exceeds <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.LongCount(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: LongCount(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.LongCount(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  id: Max(System.Collections.Generic.IEnumerable{System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(IEnumerable<Decimal>)\n  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 80\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal Max(this IEnumerable<decimal> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As IEnumerable(Of Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Decimal}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Decimal))\n  name.vb: Max(IEnumerable(Of Decimal))\n  nameWithType: Enumerable.Max(IEnumerable<Decimal>)\n  nameWithType.vb: Enumerable.Max(IEnumerable(Of Decimal))\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})\n  id: Max(System.Collections.Generic.IEnumerable{System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(IEnumerable<Double>)\n  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 81\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double Max(this IEnumerable<double> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As IEnumerable(Of Double)) As Double\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Double}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Double))\n  name.vb: Max(IEnumerable(Of Double))\n  nameWithType: Enumerable.Max(IEnumerable<Double>)\n  nameWithType.vb: Enumerable.Max(IEnumerable(Of Double))\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})\n  id: Max(System.Collections.Generic.IEnumerable{System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(IEnumerable<Int32>)\n  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 82\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static int Max(this IEnumerable<int> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As IEnumerable(Of Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int32}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Int32))\n  name.vb: Max(IEnumerable(Of Int32))\n  nameWithType: Enumerable.Max(IEnumerable<Int32>)\n  nameWithType.vb: Enumerable.Max(IEnumerable(Of Int32))\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})\n  id: Max(System.Collections.Generic.IEnumerable{System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(IEnumerable<Int64>)\n  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 83\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static long Max(this IEnumerable<long> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As IEnumerable(Of Long)) As Long\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int64}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Int64))\n  name.vb: Max(IEnumerable(Of Int64))\n  nameWithType: Enumerable.Max(IEnumerable<Int64>)\n  nameWithType.vb: Enumerable.Max(IEnumerable(Of Int64))\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(IEnumerable<Nullable<Decimal>>)\n  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 84\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal ? Max(this IEnumerable<decimal ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As IEnumerable(Of Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>A value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))\n  name.vb: Max(IEnumerable(Of Nullable(Of Decimal)))\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Decimal>>)\n  nameWithType.vb: Enumerable.Max(IEnumerable(Of Nullable(Of Decimal)))\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(IEnumerable<Nullable<Double>>)\n  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 85\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double ? Max(this IEnumerable<double ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As IEnumerable(Of Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>A value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))\n  name.vb: Max(IEnumerable(Of Nullable(Of Double)))\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Double>>)\n  nameWithType.vb: Enumerable.Max(IEnumerable(Of Nullable(Of Double)))\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(IEnumerable<Nullable<Int32>>)\n  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 86\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static int ? Max(this IEnumerable<int ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As IEnumerable(Of Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>A value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))\n  name.vb: Max(IEnumerable(Of Nullable(Of Int32)))\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int32>>)\n  nameWithType.vb: Enumerable.Max(IEnumerable(Of Nullable(Of Int32)))\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(IEnumerable<Nullable<Int64>>)\n  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 87\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static long ? Max(this IEnumerable<long ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As IEnumerable(Of Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>A value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))\n  name.vb: Max(IEnumerable(Of Nullable(Of Int64)))\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Int64>>)\n  nameWithType.vb: Enumerable.Max(IEnumerable(Of Nullable(Of Int64)))\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  id: Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(IEnumerable<Nullable<Single>>)\n  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 88\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static float ? Max(this IEnumerable<float ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As IEnumerable(Of Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>A value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))\n  name.vb: Max(IEnumerable(Of Nullable(Of Single)))\n  nameWithType: Enumerable.Max(IEnumerable<Nullable<Single>>)\n  nameWithType.vb: Enumerable.Max(IEnumerable(Of Nullable(Of Single)))\n- uid: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  commentId: M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})\n  id: Max(System.Collections.Generic.IEnumerable{System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max(IEnumerable<Single>)\n  fullName: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 89\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static float Max(this IEnumerable<float> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(source As IEnumerable(Of Single)) As Single\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Single}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the maximum value of.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable(Of System.Single))\n  name.vb: Max(IEnumerable(Of Single))\n  nameWithType: Enumerable.Max(IEnumerable<Single>)\n  nameWithType.vb: Enumerable.Max(IEnumerable(Of Single))\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 90\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the maximum value in a generic sequence.</p>\\n\"\n  syntax:\n    content: public static TSource Max<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Max(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)\n  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 91\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the maximum <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static decimal Max<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Decimal}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))\n  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)\n  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Double>)\n  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 92\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the maximum <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static double Max<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Double}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))\n  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Double>)\n  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)\n  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 93\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the maximum <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static int Max<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int32}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))\n  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)\n  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)\n  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 94\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the maximum <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static long Max<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int64}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))\n  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)\n  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)\n  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 95\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static decimal ? Max<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Decimal}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))\n  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)\n  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)\n  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 96\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static double ? Max<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Double}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))\n  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)\n  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)\n  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 97\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static int ? Max<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int32}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))\n  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)\n  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)\n  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 98\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static long ? Max<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int64}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))\n  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)\n  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)\n  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 99\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the maximum nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static float ? Max<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Single}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))\n  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)\n  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))\n- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  id: Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Single>)\n  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 100\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the maximum <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static float Max<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Single}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))\n  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))\n  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Single>)\n  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))\n- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Max<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)\n  fullName: System.Linq.Enumerable.Max<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Max\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 101\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</p>\\n\"\n  syntax:\n    content: public static TResult Max<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Max(Of TSource, TResult)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the maximum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},{TResult}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the value returned by <em>selector</em>.</p>\\n\"\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The maximum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Max(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))\n  name.vb: Max(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))\n  nameWithType: Enumerable.Max<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)\n  nameWithType.vb: Enumerable.Max(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  id: Min(System.Collections.Generic.IEnumerable{System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(IEnumerable<Decimal>)\n  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 102\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal Min(this IEnumerable<decimal> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As IEnumerable(Of Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Decimal}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Decimal))\n  name.vb: Min(IEnumerable(Of Decimal))\n  nameWithType: Enumerable.Min(IEnumerable<Decimal>)\n  nameWithType.vb: Enumerable.Min(IEnumerable(Of Decimal))\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})\n  id: Min(System.Collections.Generic.IEnumerable{System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(IEnumerable<Double>)\n  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 103\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double Min(this IEnumerable<double> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As IEnumerable(Of Double)) As Double\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Double}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Double))\n  name.vb: Min(IEnumerable(Of Double))\n  nameWithType: Enumerable.Min(IEnumerable<Double>)\n  nameWithType.vb: Enumerable.Min(IEnumerable(Of Double))\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})\n  id: Min(System.Collections.Generic.IEnumerable{System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(IEnumerable<Int32>)\n  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 104\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static int Min(this IEnumerable<int> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As IEnumerable(Of Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int32}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Int32))\n  name.vb: Min(IEnumerable(Of Int32))\n  nameWithType: Enumerable.Min(IEnumerable<Int32>)\n  nameWithType.vb: Enumerable.Min(IEnumerable(Of Int32))\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})\n  id: Min(System.Collections.Generic.IEnumerable{System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(IEnumerable<Int64>)\n  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 105\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static long Min(this IEnumerable<long> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As IEnumerable(Of Long)) As Long\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int64}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Int64))\n  name.vb: Min(IEnumerable(Of Int64))\n  nameWithType: Enumerable.Min(IEnumerable<Int64>)\n  nameWithType.vb: Enumerable.Min(IEnumerable(Of Int64))\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(IEnumerable<Nullable<Decimal>>)\n  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 106\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal ? Min(this IEnumerable<decimal ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As IEnumerable(Of Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>A value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))\n  name.vb: Min(IEnumerable(Of Nullable(Of Decimal)))\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Decimal>>)\n  nameWithType.vb: Enumerable.Min(IEnumerable(Of Nullable(Of Decimal)))\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(IEnumerable<Nullable<Double>>)\n  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 107\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double ? Min(this IEnumerable<double ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As IEnumerable(Of Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>A value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))\n  name.vb: Min(IEnumerable(Of Nullable(Of Double)))\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Double>>)\n  nameWithType.vb: Enumerable.Min(IEnumerable(Of Nullable(Of Double)))\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(IEnumerable<Nullable<Int32>>)\n  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 108\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static int ? Min(this IEnumerable<int ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As IEnumerable(Of Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>A value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))\n  name.vb: Min(IEnumerable(Of Nullable(Of Int32)))\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int32>>)\n  nameWithType.vb: Enumerable.Min(IEnumerable(Of Nullable(Of Int32)))\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(IEnumerable<Nullable<Int64>>)\n  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 109\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static long ? Min(this IEnumerable<long ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As IEnumerable(Of Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>A value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))\n  name.vb: Min(IEnumerable(Of Nullable(Of Int64)))\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Int64>>)\n  nameWithType.vb: Enumerable.Min(IEnumerable(Of Nullable(Of Int64)))\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  id: Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(IEnumerable<Nullable<Single>>)\n  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 110\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static float ? Min(this IEnumerable<float ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As IEnumerable(Of Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>A value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))\n  name.vb: Min(IEnumerable(Of Nullable(Of Single)))\n  nameWithType: Enumerable.Min(IEnumerable<Nullable<Single>>)\n  nameWithType.vb: Enumerable.Min(IEnumerable(Of Nullable(Of Single)))\n- uid: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  commentId: M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})\n  id: Min(System.Collections.Generic.IEnumerable{System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min(IEnumerable<Single>)\n  fullName: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 111\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static float Min(this IEnumerable<float> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(source As IEnumerable(Of Single)) As Single\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Single}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to determine the minimum value of.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable(Of System.Single))\n  name.vb: Min(IEnumerable(Of Single))\n  nameWithType: Enumerable.Min(IEnumerable<Single>)\n  nameWithType.vb: Enumerable.Min(IEnumerable(Of Single))\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 112\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the minimum value in a generic sequence.</p>\\n\"\n  syntax:\n    content: public static TSource Min<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Min(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)\n  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 113\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the minimum <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static decimal Min<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Decimal}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))\n  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)\n  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Double>)\n  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 114\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the minimum <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static double Min<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Double}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))\n  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Double>)\n  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)\n  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 115\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the minimum <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static int Min<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int32}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))\n  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)\n  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)\n  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 116\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the minimum <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static long Min<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int64}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))\n  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)\n  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)\n  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 117\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static decimal ? Min<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Decimal}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The value of type Nullable<Decimal> in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))\n  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)\n  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)\n  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 118\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static double ? Min<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Double}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The value of type Nullable<Double> in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))\n  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)\n  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)\n  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 119\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static int ? Min<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int32}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>The value of type Nullable<Int32> in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))\n  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)\n  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)\n  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 120\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static long ? Min<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int64}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The value of type Nullable<Int64> in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))\n  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)\n  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)\n  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 121\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the minimum nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static float ? Min<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Single}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The value of type Nullable<Single> in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))\n  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)\n  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))\n- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  id: Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Single>)\n  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 122\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a sequence and returns the minimum <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public static float Min<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Single}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>source</em> contains no elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))\n  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))\n  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Single>)\n  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))\n- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Min<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)\n  fullName: System.Linq.Enumerable.Min<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Min\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 123\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</p>\\n\"\n  syntax:\n    content: public static TResult Min<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Min(Of TSource, TResult)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to determine the minimum value of.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},{TResult}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the value returned by <em>selector</em>.</p>\\n\"\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The minimum value in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Min(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))\n  name.vb: Min(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))\n  nameWithType: Enumerable.Min<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)\n  nameWithType.vb: Enumerable.Min(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  id: OfType``1(System.Collections.IEnumerable)\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OfType\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 124\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Filters the elements of an <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> based on a specified type.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> OfType<TResult>(this IEnumerable source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OfType(Of TResult)(source As IEnumerable) As IEnumerable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Collections.IEnumerable\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IEnumerable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements to filter.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type to filter the elements of the sequence on.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements from the input sequence of type <em>TResult</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.Enumerable.OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderBy\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 125\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Sorts the elements of a sequence in ascending order according to a key.</p>\\n\"\n  syntax:\n    content: public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OrderBy(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to order.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n    commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - type: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n    commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.OrderBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: OrderBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))\n  nameWithType: Enumerable.OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: Enumerable.OrderBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  fullName: System.Linq.Enumerable.OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderBy\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 126\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Sorts the elements of a sequence in ascending order by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IOrderedEnumerable<TSource> OrderBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OrderBy(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to order.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n    commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - type: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n    commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.OrderBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: OrderBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n  nameWithType: Enumerable.OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  nameWithType.vb: Enumerable.OrderBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.Enumerable.OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderByDescending\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 127\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Sorts the elements of a sequence in descending order according to a key.</p>\\n\"\n  syntax:\n    content: public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OrderByDescending(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to order.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted in descending order according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n    commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - type: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n    commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.OrderByDescending(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: OrderByDescending(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))\n  nameWithType: Enumerable.OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: Enumerable.OrderByDescending(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  fullName: System.Linq.Enumerable.OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OrderByDescending\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 128\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Sorts the elements of a sequence in descending order by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IOrderedEnumerable<TSource> OrderByDescending<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function OrderByDescending(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to order.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from an element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted in descending order according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n    commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  - type: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n    commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.OrderByDescending(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: OrderByDescending(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n  nameWithType: Enumerable.OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  nameWithType.vb: Enumerable.OrderByDescending(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n- uid: System.Linq.Enumerable.Range(System.Int32,System.Int32)\n  commentId: M:System.Linq.Enumerable.Range(System.Int32,System.Int32)\n  id: Range(System.Int32,System.Int32)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Range(Int32, Int32)\n  fullName: System.Linq.Enumerable.Range(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Range\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 129\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Generates a sequence of integral numbers within a specified range.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<int> Range(int start, int count)\n    content.vb: Public Shared Function Range(start As Integer, count As Integer) As IEnumerable(Of Integer)\n    parameters:\n    - id: start\n      type: System.Int32\n      description: \"\\n<p>The value of the first integer in the sequence.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of sequential integers to generate.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Int32}\n      description: \"\\n<p>An IEnumerable<Int32> in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than 0.</p>\\n<p>-or-</p>\\n<p>\\n<em>start</em> + <em>count</em> -1 is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Enumerable.Range(Int32, Int32)\n- uid: System.Linq.Enumerable.Repeat``1(``0,System.Int32)\n  commentId: M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)\n  id: Repeat``1(``0,System.Int32)\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Repeat<TResult>(TResult, Int32)\n  fullName: System.Linq.Enumerable.Repeat<TResult>(TResult, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Repeat\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 130\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Generates a sequence that contains one repeated value.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> Repeat<TResult>(TResult element, int count)\n    content.vb: Public Shared Function Repeat(Of TResult)(element As TResult, count As Integer) As IEnumerable(Of TResult)\n    parameters:\n    - id: element\n      type: '{TResult}'\n      description: \"\\n<p>The value to be repeated.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of times to repeat the value in the generated sequence.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the value to be repeated in the result sequence.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains a repeated value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Repeat(Of TResult)(TResult, System.Int32)\n  name.vb: Repeat(Of TResult)(TResult, Int32)\n  nameWithType: Enumerable.Repeat<TResult>(TResult, Int32)\n  nameWithType.vb: Enumerable.Repeat(Of TResult)(TResult, Int32)\n- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  id: Reverse``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Reverse<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.Reverse<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Reverse\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 131\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Inverts the order of the elements in a sequence.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Reverse<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Reverse(Of TSource)(source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to reverse.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence whose elements correspond to those of the input sequence in reverse order.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Reverse(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Reverse(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.Reverse(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)\n  fullName: System.Linq.Enumerable.Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Select\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 132\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence into a new form.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> Select<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Select(Of TSource, TResult)(source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As IEnumerable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to invoke a transform function on.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},{TResult}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the value returned by <em>selector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are the result of invoking the transform function on each element of <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Select(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))\n  name.vb: Select(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))\n  nameWithType: Enumerable.Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)\n  nameWithType.vb: Enumerable.Select(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))\n- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  id: Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, TResult>)\n  fullName: System.Linq.Enumerable.Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Select\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 133\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence into a new form by incorporating the element's index.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> Select<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, int, TResult> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Select(Of TSource, TResult)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, TResult)) As IEnumerable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to invoke a transform function on.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int32,{TResult}}\n      description: \"\\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the value returned by <em>selector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are the result of invoking the transform function on each element of <em>source</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Select(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, TResult))\n  name.vb: Select(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, TResult))\n  nameWithType: Enumerable.Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, TResult>)\n  nameWithType.vb: Enumerable.Select(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, TResult))\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  id: SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TResult>>)\n  fullName: System.Linq.Enumerable.SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SelectMany\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 134\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and flattens the resulting sequences into one sequence.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> SelectMany<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TResult>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SelectMany(Of TSource, TResult)(source As IEnumerable(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As IEnumerable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the elements of the sequence returned by <em>selector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))\n  name.vb: SelectMany(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TResult)))\n  nameWithType: Enumerable.SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TResult>>)\n  nameWithType.vb: Enumerable.SelectMany(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TResult)))\n- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  id: SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)\n  fullName: System.Linq.Enumerable.SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SelectMany\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 135\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> SelectMany<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SelectMany(Of TSource, TResult)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As IEnumerable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}\n      description: \"\\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the elements of the sequence returned by <em>selector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))\n  name.vb: SelectMany(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TResult)))\n  nameWithType: Enumerable.SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)\n  nameWithType.vb: Enumerable.SelectMany(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TResult)))\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  id: SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)\n  fullName: System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SelectMany\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 136\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this IEnumerable<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: collectionSelector\n      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}\n      description: \"\\n<p>A transform function to apply to each element of the input sequence.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TSource},{TCollection},{TResult}}\n      description: \"\\n<p>A transform function to apply to each element of the intermediate sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TCollection\n      description: \"\\n<p>The type of the intermediate elements collected by <em>collectionSelector</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the elements of the resulting sequence.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are the result of invoking the one-to-many transform function <em>collectionSelector</em> on each element of <em>source</em> and then mapping each of those sequence elements and their corresponding source element to a result element.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TCollection, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))\n  name.vb: SelectMany(Of TSource, TCollection, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))\n  nameWithType: Enumerable.SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)\n  nameWithType.vb: Enumerable.SelectMany(Of TSource, TCollection, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))\n- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  id: SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)\n  fullName: System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SelectMany\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 137\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Projects each element of a sequence to an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> SelectMany<TSource, TCollection, TResult>(this IEnumerable<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values to project.</p>\\n\"\n    - id: collectionSelector\n      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}\n      description: \"\\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TSource},{TCollection},{TResult}}\n      description: \"\\n<p>A transform function to apply to each element of the intermediate sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TCollection\n      description: \"\\n<p>The type of the intermediate elements collected by <em>collectionSelector</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the elements of the resulting sequence.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are the result of invoking the one-to-many transform function <em>collectionSelector</em> on each element of <em>source</em> and then mapping each of those sequence elements and their corresponding source element to a result element.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.SelectMany(Of TSource, TCollection, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))\n  name.vb: SelectMany(Of TSource, TCollection, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))\n  nameWithType: Enumerable.SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)\n  nameWithType.vb: Enumerable.SelectMany(Of TSource, TCollection, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SequenceEqual\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 138\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</p>\\n\"\n  syntax:\n    content: public static bool SequenceEqual<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SequenceEqual(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As Boolean\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>second</em>.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to the first sequence.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.SequenceEqual(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: SequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.SequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.Enumerable.SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SequenceEqual\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 139\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Determines whether two sequences are equal by comparing their elements by using a specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static bool SequenceEqual<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SequenceEqual(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to <em>second</em>.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare to the first sequence.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use to compare elements.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two source sequences are of equal length and their corresponding elements compare equal according to <em>comparer</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.SequenceEqual(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: SequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: Enumerable.SequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})\n  id: Single``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Single<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.Single<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Single\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 140\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</p>\\n\"\n  syntax:\n    content: public static TSource Single<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Single(Of TSource)(source As IEnumerable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the single element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The single element of the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The input sequence contains more than one element.</p>\\n<p>-or-</p>\\n<p>The input sequence is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Single(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Single(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.Single(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Single<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.Single<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Single\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 141\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</p>\\n\"\n  syntax:\n    content: public static TSource Single<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Single(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return a single element from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test an element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The single element of the input sequence that satisfies a condition.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>No element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>More than one element satisfies the condition in <em>predicate</em>.</p>\\n<p>-or-</p>\\n<p>The source sequence is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Single(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: Single(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.Single(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  id: SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SingleOrDefault\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 142\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</p>\\n\"\n  syntax:\n    content: public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SingleOrDefault(Of TSource)(source As IEnumerable(Of TSource)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return the single element of.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The single element of the input sequence, or <strong>default</strong>(<em>TSource</em>) if the sequence contains no elements.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The input sequence contains more than one element.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.SingleOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: SingleOrDefault(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.SingleOrDefault(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SingleOrDefault\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 143\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</p>\\n\"\n  syntax:\n    content: public static TSource SingleOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SingleOrDefault(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return a single element from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test an element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}'\n      description: \"\\n<p>The single element of the input sequence that satisfies the condition, or <strong>default</strong>(<em>TSource</em>) if no such element is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.SingleOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: SingleOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.SingleOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  commentId: M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  id: Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Skip<TSource>(IEnumerable<TSource>, Int32)\n  fullName: System.Linq.Enumerable.Skip<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Skip\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 144\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Skip<TSource>(this IEnumerable<TSource> source, int count)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Skip(Of TSource)(source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return elements from.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements to skip before returning the remaining elements.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements that occur after the specified index in the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Skip(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)\n  name.vb: Skip(Of TSource)(IEnumerable(Of TSource), Int32)\n  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType.vb: Enumerable.Skip(Of TSource)(IEnumerable(Of TSource), Int32)\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SkipWhile\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 145\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> SkipWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SkipWhile(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return elements from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <em>predicate</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.SkipWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: SkipWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.SkipWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  id: SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)\n  fullName: System.Linq.Enumerable.SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SkipWhile\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 146\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> SkipWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function SkipWhile(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to return elements from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Int32,System.Boolean}\n      description: \"\\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <em>predicate</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.SkipWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))\n  name.vb: SkipWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))\n  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)\n  nameWithType.vb: Enumerable.SkipWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IEnumerable<Decimal>)\n  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 147\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal Sum(this IEnumerable<decimal> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IEnumerable(Of Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Decimal}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Decimal))\n  name.vb: Sum(IEnumerable(Of Decimal))\n  nameWithType: Enumerable.Sum(IEnumerable<Decimal>)\n  nameWithType.vb: Enumerable.Sum(IEnumerable(Of Decimal))\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IEnumerable<Double>)\n  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 148\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double Sum(this IEnumerable<double> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IEnumerable(Of Double)) As Double\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Double}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Double))\n  name.vb: Sum(IEnumerable(Of Double))\n  nameWithType: Enumerable.Sum(IEnumerable<Double>)\n  nameWithType.vb: Enumerable.Sum(IEnumerable(Of Double))\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IEnumerable<Int32>)\n  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 149\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static int Sum(this IEnumerable<int> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IEnumerable(Of Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int32}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Int32))\n  name.vb: Sum(IEnumerable(Of Int32))\n  nameWithType: Enumerable.Sum(IEnumerable<Int32>)\n  nameWithType.vb: Enumerable.Sum(IEnumerable(Of Int32))\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IEnumerable<Int64>)\n  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 150\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static long Sum(this IEnumerable<long> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IEnumerable(Of Long)) As Long\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Int64}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Int64))\n  name.vb: Sum(IEnumerable(Of Int64))\n  nameWithType: Enumerable.Sum(IEnumerable<Int64>)\n  nameWithType.vb: Enumerable.Sum(IEnumerable(Of Int64))\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IEnumerable<Nullable<Decimal>>)\n  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 151\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static decimal ? Sum(this IEnumerable<decimal ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IEnumerable(Of Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal)))\n  name.vb: Sum(IEnumerable(Of Nullable(Of Decimal)))\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Decimal>>)\n  nameWithType.vb: Enumerable.Sum(IEnumerable(Of Nullable(Of Decimal)))\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IEnumerable<Nullable<Double>>)\n  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 152\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static double ? Sum(this IEnumerable<double ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IEnumerable(Of Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double)))\n  name.vb: Sum(IEnumerable(Of Nullable(Of Double)))\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Double>>)\n  nameWithType.vb: Enumerable.Sum(IEnumerable(Of Nullable(Of Double)))\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IEnumerable<Nullable<Int32>>)\n  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 153\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static int ? Sum(this IEnumerable<int ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IEnumerable(Of Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32)))\n  name.vb: Sum(IEnumerable(Of Nullable(Of Int32)))\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int32>>)\n  nameWithType.vb: Enumerable.Sum(IEnumerable(Of Nullable(Of Int32)))\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IEnumerable<Nullable<Int64>>)\n  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 154\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static long ? Sum(this IEnumerable<long ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IEnumerable(Of Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64)))\n  name.vb: Sum(IEnumerable(Of Nullable(Of Int64)))\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Int64>>)\n  nameWithType.vb: Enumerable.Sum(IEnumerable(Of Nullable(Of Int64)))\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IEnumerable<Nullable<Single>>)\n  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 155\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static float ? Sum(this IEnumerable<float ? > source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IEnumerable(Of Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}\n      description: \"\\n<p>A sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single)))\n  name.vb: Sum(IEnumerable(Of Nullable(Of Single)))\n  nameWithType: Enumerable.Sum(IEnumerable<Nullable<Single>>)\n  nameWithType.vb: Enumerable.Sum(IEnumerable(Of Nullable(Of Single)))\n- uid: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  commentId: M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})\n  id: Sum(System.Collections.Generic.IEnumerable{System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum(IEnumerable<Single>)\n  fullName: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable<System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 156\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of a sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  syntax:\n    content: public static float Sum(this IEnumerable<float> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(source As IEnumerable(Of Single)) As Single\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Single}\n      description: \"\\n<p>A sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values to calculate the sum of.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The sum of the values in the sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable(Of System.Single))\n  name.vb: Sum(IEnumerable(Of Single))\n  nameWithType: Enumerable.Sum(IEnumerable<Single>)\n  nameWithType.vb: Enumerable.Sum(IEnumerable(Of Single))\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)\n  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 157\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static decimal Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Decimal}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))\n  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)\n  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Double>)\n  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 158\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Double}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))\n  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Double>)\n  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)\n  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 159\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static int Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int32}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))\n  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)\n  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)\n  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 160\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static long Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Int64}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))\n  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)\n  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)\n  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 161\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of nullable <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static decimal ? Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Decimal}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Decimal}\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))\n  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)\n  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)\n  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 162\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of nullable <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static double ? Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Double?)) As Double?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Double}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Double}\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))\n  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)\n  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)\n  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 163\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of nullable <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static int ? Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int32}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))\n  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)\n  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)\n  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 164\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of nullable <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static long ? Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Long?)) As Long?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Int64}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Int64}\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The sum is larger than <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))\n  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)\n  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)\n  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 165\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of nullable <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static float ? Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single?)) As Single?\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Nullable{System.Single}}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Nullable{System.Single}\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))\n  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)\n  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))\n- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  id: Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Single>)\n  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sum\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 166\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Computes the sum of the sequence of <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that are obtained by invoking a transform function on each element of the input sequence.</p>\\n\"\n  syntax:\n    content: public static float Sum<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Sum(Of TSource)(source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence of values that are used to calculate a sum.</p>\\n\"\n    - id: selector\n      type: System.Func{{TSource},System.Single}\n      description: \"\\n<p>A transform function to apply to each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The sum of the projected values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>selector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))\n  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))\n  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Single>)\n  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))\n- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  commentId: M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  id: Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Take<TSource>(IEnumerable<TSource>, Int32)\n  fullName: System.Linq.Enumerable.Take<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Take\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 167\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns a specified number of contiguous elements from the start of a sequence.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Take<TSource>(this IEnumerable<TSource> source, int count)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Take(Of TSource)(source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The sequence to return elements from.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of elements to return.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the specified number of elements from the start of the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Take(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)\n  name.vb: Take(Of TSource)(IEnumerable(Of TSource), Int32)\n  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)\n  nameWithType.vb: Enumerable.Take(Of TSource)(IEnumerable(Of TSource), Int32)\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TakeWhile\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 168\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns elements from a sequence as long as a specified condition is true.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> TakeWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function TakeWhile(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>A sequence to return elements from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.TakeWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: TakeWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.TakeWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  id: TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)\n  fullName: System.Linq.Enumerable.TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TakeWhile\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 169\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> TakeWhile<TSource>(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function TakeWhile(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The sequence to return elements from.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Int32,System.Boolean}\n      description: \"\\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements from the input sequence that occur before the element at which the test no longer passes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.TakeWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))\n  name.vb: TakeWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))\n  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)\n  nameWithType.vb: Enumerable.TakeWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))\n- uid: System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  id: ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.Enumerable.ThenBy<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThenBy\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 170\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</p>\\n\"\n  syntax:\n    content: public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey))\n  nameWithType: Enumerable.ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: Enumerable.ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  fullName: System.Linq.Enumerable.ThenBy<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThenBy\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 171\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IOrderedEnumerable<TSource> ThenBy<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n  nameWithType: Enumerable.ThenBy<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  nameWithType.vb: Enumerable.ThenBy(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n- uid: System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  id: ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.Enumerable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThenByDescending\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 172\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</p>\\n\"\n  syntax:\n    content: public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted in descending order according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey))\n  nameWithType: Enumerable.ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: Enumerable.ThenByDescending(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  commentId: M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  id: ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  fullName: System.Linq.Enumerable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThenByDescending\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 173\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</p>\\n\"\n  syntax:\n    content: public static IOrderedEnumerable<TSource> ThenByDescending<TSource, TKey>(this IOrderedEnumerable<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Linq.IOrderedEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements to sort.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.IOrderedEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IOrderedEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose elements are sorted in descending order according to a key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))\n  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n  nameWithType: Enumerable.ThenByDescending<TSource, TKey>(IOrderedEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)\n  nameWithType.vb: Enumerable.ThenByDescending(Of TSource, TKey)(IOrderedEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))\n- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  id: ToArray``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ToArray<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.ToArray<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToArray\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 174\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Creates an array from a <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static TSource[] ToArray<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToArray(Of TSource)(source As IEnumerable(Of TSource)) As TSource()\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create an array from.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: '{TSource}[]'\n      description: \"\\n<p>An array that contains the elements from the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ToArray(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: ToArray(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.ToArray(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDictionary\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 175\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to a specified key selector function.</p>\\n\"\n  syntax:\n    content: public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToDictionary(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Dictionary(Of TKey, TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains keys and values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>keySelector</em> produces a key that is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>keySelector</em> produces duplicate keys for two elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: ToDictionary(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))\n  nameWithType: Enumerable.ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: Enumerable.ToDictionary(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  id: ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDictionary\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 176\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to a specified key selector function and key comparer.</p>\\n\"\n  syntax:\n    content: public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToDictionary(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the keys returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains keys and values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>keySelector</em> produces a key that is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>keySelector</em> produces duplicate keys for two elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: ToDictionary(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))\n  nameWithType: Enumerable.ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)\n  nameWithType.vb: Enumerable.ToDictionary(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  id: ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)\n  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDictionary\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 177\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to specified key selector and element selector functions.</p>\\n\"\n  syntax:\n    content: public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Dictionary(Of TKey, TElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A transform function to produce a result element value from each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains values of type <em>TElement</em> selected from the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>keySelector</em> produces a key that is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>keySelector</em> produces duplicate keys for two elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))\n  name.vb: ToDictionary(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))\n  nameWithType: Enumerable.ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)\n  nameWithType.vb: Enumerable.ToDictionary(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))\n- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  id: ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToDictionary\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 178\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to a specified key selector function, a comparer, and an element selector function.</p>\\n\"\n  syntax:\n    content: public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A transform function to produce a result element value from each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Generic.Dictionary`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains values of type <em>TElement</em> selected from the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>keySelector</em> produces a key that is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>keySelector</em> produces duplicate keys for two elements.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: ToDictionary(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))\n  nameWithType: Enumerable.ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)\n  nameWithType.vb: Enumerable.ToDictionary(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))\n- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})\n  id: ToList``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ToList<TSource>(IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.ToList<TSource>(System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToList\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 179\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Collections.Generic.List`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static List<TSource> ToList<TSource>(this IEnumerable<TSource> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToList(Of TSource)(source As IEnumerable(Of TSource)) As List(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a <xref href=\\\"System.Collections.Generic.List`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.List{{TSource}}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Generic.List`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements from the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ToList(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: ToList(Of TSource)(IEnumerable(Of TSource))\n  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.ToList(Of TSource)(IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  id: ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)\n  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToLookup\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 180\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Lookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to a specified key selector function.</p>\\n\"\n  syntax:\n    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToLookup(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a <xref href=\\\"System.Linq.Lookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ILookup{{TKey},{TSource}}\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Lookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains keys and values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))\n  name.vb: ToLookup(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))\n  nameWithType: Enumerable.ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)\n  nameWithType.vb: Enumerable.ToLookup(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))\n- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  id: ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToLookup\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 181\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Lookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to a specified key selector function and key comparer.</p>\\n\"\n  syntax:\n    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToLookup(Of TSource, TKey)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a <xref href=\\\"System.Linq.Lookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ILookup{{TKey},{TSource}}\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Lookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains keys and values.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: ToLookup(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))\n  nameWithType: Enumerable.ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)\n  nameWithType.vb: Enumerable.ToLookup(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  id: ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)\n  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToLookup\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 182\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Lookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to specified key selector and element selector functions.</p>\\n\"\n  syntax:\n    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a <xref href=\\\"System.Linq.Lookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A transform function to produce a result element value from each element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ILookup{{TKey},{TElement}}\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Lookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains values of type <em>TElement</em> selected from the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))\n  name.vb: ToLookup(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))\n  nameWithType: Enumerable.ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)\n  nameWithType.vb: Enumerable.ToLookup(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))\n- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  id: ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)\n  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToLookup\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 183\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Linq.Lookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> according to a specified key selector function, a comparer and an element selector function.</p>\\n\"\n  syntax:\n    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to create a <xref href=\\\"System.Linq.Lookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from.</p>\\n\"\n    - id: keySelector\n      type: System.Func{{TSource},{TKey}}\n      description: \"\\n<p>A function to extract a key from each element.</p>\\n\"\n    - id: elementSelector\n      type: System.Func{{TSource},{TElement}}\n      description: \"\\n<p>A transform function to produce a result element value from each element.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TKey}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare keys.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    - id: TKey\n      description: \"\\n<p>The type of the key returned by <em>keySelector</em>.</p>\\n\"\n    - id: TElement\n      description: \"\\n<p>The type of the value returned by <em>elementSelector</em>.</p>\\n\"\n    return:\n      type: System.Linq.ILookup{{TKey},{TElement}}\n      description: \"\\n<p>A <xref href=\\\"System.Linq.Lookup`2\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains values of type <em>TElement</em> selected from the input sequence.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))\n  name.vb: ToLookup(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))\n  nameWithType: Enumerable.ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)\n  nameWithType.vb: Enumerable.ToLookup(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  id: Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  fullName: System.Linq.Enumerable.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Union\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 184\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set union of two sequences by using the default equality comparer.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Union<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Union(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose distinct elements form the first set for the union.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose distinct elements form the second set for the union.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements from both input sequences, excluding duplicates.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Union(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))\n  name.vb: Union(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)\n  nameWithType.vb: Enumerable.Union(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))\n- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  id: Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  fullName: System.Linq.Enumerable.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Union\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 185\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Produces the set union of two sequences by using a specified <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Union<TSource>(this IEnumerable<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Union(Of TSource)(first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose distinct elements form the first set for the union.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose distinct elements form the second set for the union.</p>\\n\"\n    - id: comparer\n      type: System.Collections.Generic.IEqualityComparer{{TSource}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IEqualityComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare values.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of the input sequences.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the elements from both input sequences, excluding duplicates.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Union(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))\n  name.vb: Union(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)\n  nameWithType.vb: Enumerable.Union(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  id: Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  fullName: System.Linq.Enumerable.Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Where\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 186\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Filters a sequence of values based on a predicate.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Where(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to filter.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Boolean}\n      description: \"\\n<p>A function to test each element for a condition.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements from the input sequence that satisfy the condition.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Where(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))\n  name.vb: Where(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)\n  nameWithType.vb: Enumerable.Where(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))\n- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  id: Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Where<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)\n  fullName: System.Linq.Enumerable.Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Where\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 187\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Where(Of TSource)(source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to filter.</p>\\n\"\n    - id: predicate\n      type: System.Func{{TSource},System.Int32,System.Boolean}\n      description: \"\\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</p>\\n\"\n    typeParameters:\n    - id: TSource\n      description: \"\\n<p>The type of the elements of <em>source</em>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TSource}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains elements from the input sequence that satisfy the condition.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>source</em> or <em>predicate</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Where(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))\n  name.vb: Where(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))\n  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)\n  nameWithType.vb: Enumerable.Where(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))\n- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  commentId: M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  id: Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})\n  isExtensionMethod: true\n  parent: System.Linq.Enumerable\n  langs:\n  - csharp\n  - vb\n  name: Zip<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)\n  fullName: System.Linq.Enumerable.Zip<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq/ref/System.Linq.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zip\n    path: src/System.Linq/ref/System.Linq.cs\n    startLine: 188\n  assemblies:\n  - System.Linq\n  namespace: System.Linq\n  summary: \"\\n<p>Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<TResult> Zip<TFirst, TSecond, TResult>(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Zip(Of TFirst, TSecond, TResult)(first As IEnumerable(Of TFirst), second As IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As IEnumerable(Of TResult)\n    parameters:\n    - id: first\n      type: System.Collections.Generic.IEnumerable{{TFirst}}\n      description: \"\\n<p>The first sequence to merge.</p>\\n\"\n    - id: second\n      type: System.Collections.Generic.IEnumerable{{TSecond}}\n      description: \"\\n<p>The second sequence to merge.</p>\\n\"\n    - id: resultSelector\n      type: System.Func{{TFirst},{TSecond},{TResult}}\n      description: \"\\n<p>A function that specifies how to merge the elements from the two sequences.</p>\\n\"\n    typeParameters:\n    - id: TFirst\n      description: \"\\n<p>The type of the elements of the first input sequence.</p>\\n\"\n    - id: TSecond\n      description: \"\\n<p>The type of the elements of the second input sequence.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the elements of the result sequence.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{TResult}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains merged elements of two input sequences.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>first</em> or <em>second</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Linq.Enumerable.Zip(Of TFirst, TSecond, TResult)(System.Collections.Generic.IEnumerable(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), System.Func(Of TFirst, TSecond, TResult))\n  name.vb: Zip(Of TFirst, TSecond, TResult)(IEnumerable(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))\n  nameWithType: Enumerable.Zip<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)\n  nameWithType.vb: Enumerable.Zip(Of TFirst, TSecond, TResult)(IEnumerable(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))\nreferences:\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections.Generic.IEnumerable{{TSource}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)\n  name.vb: IEnumerable(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``0}\n  nameWithType: IEnumerable<TSource>\n  nameWithType.vb: IEnumerable(Of TSource)\n- uid: System.Func{{TSource},{TSource},{TSource}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TSource, TSource, TSource>\n  fullName: System.Func<TSource, TSource, TSource>\n  fullname.vb: System.Func(Of TSource, TSource, TSource)\n  name.vb: Func(Of TSource, TSource, TSource)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``0,``0}\n  nameWithType: Func<TSource, TSource, TSource>\n  nameWithType.vb: Func(Of TSource, TSource, TSource)\n- uid: '{TSource}'\n  definition: TSource\n  name: TSource\n  fullName: TSource\n  commentId: '!:TSource'\n  nameWithType: TSource\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Func`3\n  isExternal: false\n  name: Func<T1, T2, TResult>\n  fullName: System.Func<T1, T2, TResult>\n  fullname.vb: System.Func(Of T1, T2, TResult)\n  name.vb: Func(Of T1, T2, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func`3\n  nameWithType: Func<T1, T2, TResult>\n  nameWithType.vb: Func(Of T1, T2, TResult)\n- uid: TSource\n  isExternal: false\n  name: TSource\n  fullName: TSource\n  nameWithType: TSource\n- uid: '{TAccumulate}'\n  definition: TAccumulate\n  name: TAccumulate\n  fullName: TAccumulate\n  commentId: '!:TAccumulate'\n  nameWithType: TAccumulate\n- uid: System.Func{{TAccumulate},{TSource},{TAccumulate}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TAccumulate, TSource, TAccumulate>\n  fullName: System.Func<TAccumulate, TSource, TAccumulate>\n  fullname.vb: System.Func(Of TAccumulate, TSource, TAccumulate)\n  name.vb: Func(Of TAccumulate, TSource, TAccumulate)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``1,``0,``1}\n  nameWithType: Func<TAccumulate, TSource, TAccumulate>\n  nameWithType.vb: Func(Of TAccumulate, TSource, TAccumulate)\n- uid: TAccumulate\n  isExternal: false\n  name: TAccumulate\n  fullName: TAccumulate\n  nameWithType: TAccumulate\n- uid: System.Func{{TAccumulate},{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TAccumulate, TResult>\n  fullName: System.Func<TAccumulate, TResult>\n  fullname.vb: System.Func(Of TAccumulate, TResult)\n  name.vb: Func(Of TAccumulate, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAccumulate\n    fullName: TAccumulate\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``1,``2}\n  nameWithType: Func<TAccumulate, TResult>\n  nameWithType.vb: Func(Of TAccumulate, TResult)\n- uid: '{TResult}'\n  definition: TResult\n  name: TResult\n  fullName: TResult\n  commentId: '!:TResult'\n  nameWithType: TResult\n- uid: System.Func`2\n  isExternal: false\n  name: Func<T, TResult>\n  fullName: System.Func<T, TResult>\n  fullname.vb: System.Func(Of T, TResult)\n  name.vb: Func(Of T, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func`2\n  nameWithType: Func<T, TResult>\n  nameWithType.vb: Func(Of T, TResult)\n- uid: TResult\n  isExternal: false\n  name: TResult\n  fullName: TResult\n  nameWithType: TResult\n- uid: System.Func{{TSource},System.Boolean}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Boolean>\n  fullName: System.Func<TSource, System.Boolean>\n  fullname.vb: System.Func(Of TSource, System.Boolean)\n  name.vb: Func(Of TSource, Boolean)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Boolean}\n  nameWithType: Func<TSource, Boolean>\n  nameWithType.vb: Func(Of TSource, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Collections.Generic.IEnumerable{System.Decimal}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Decimal>\n  fullName: System.Collections.Generic.IEnumerable<System.Decimal>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Decimal)\n  name.vb: IEnumerable(Of Decimal)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Decimal}\n  nameWithType: IEnumerable<Decimal>\n  nameWithType.vb: IEnumerable(Of Decimal)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  commentId: T:System.Decimal\n  nameWithType: Decimal\n- uid: System.Collections.Generic.IEnumerable{System.Double}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Double>\n  fullName: System.Collections.Generic.IEnumerable<System.Double>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Double)\n  name.vb: IEnumerable(Of Double)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Double}\n  nameWithType: IEnumerable<Double>\n  nameWithType.vb: IEnumerable(Of Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  commentId: T:System.Double\n  nameWithType: Double\n- uid: System.Collections.Generic.IEnumerable{System.Int32}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Int32>\n  fullName: System.Collections.Generic.IEnumerable<System.Int32>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Int32)\n  name.vb: IEnumerable(Of Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Int32}\n  nameWithType: IEnumerable<Int32>\n  nameWithType.vb: IEnumerable(Of Int32)\n- uid: System.Collections.Generic.IEnumerable{System.Int64}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Int64>\n  fullName: System.Collections.Generic.IEnumerable<System.Int64>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Int64)\n  name.vb: IEnumerable(Of Int64)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Int64}\n  nameWithType: IEnumerable<Int64>\n  nameWithType.vb: IEnumerable(Of Int64)\n- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Nullable<Decimal>>\n  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Decimal))\n  name.vb: IEnumerable(Of Nullable(Of Decimal))\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}}\n  nameWithType: IEnumerable<Nullable<Decimal>>\n  nameWithType.vb: IEnumerable(Of Nullable(Of Decimal))\n- uid: System.Nullable{System.Decimal}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Decimal>\n  fullName: System.Nullable<System.Decimal>\n  fullname.vb: System.Nullable(Of System.Decimal)\n  name.vb: Nullable(Of Decimal)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Decimal}\n  nameWithType: Nullable<Decimal>\n  nameWithType.vb: Nullable(Of Decimal)\n- uid: System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable`1\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Nullable<Double>>\n  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Double))\n  name.vb: IEnumerable(Of Nullable(Of Double))\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Nullable{System.Double}}\n  nameWithType: IEnumerable<Nullable<Double>>\n  nameWithType.vb: IEnumerable(Of Nullable(Of Double))\n- uid: System.Nullable{System.Double}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Double>\n  fullName: System.Nullable<System.Double>\n  fullname.vb: System.Nullable(Of System.Double)\n  name.vb: Nullable(Of Double)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Double}\n  nameWithType: Nullable<Double>\n  nameWithType.vb: Nullable(Of Double)\n- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Nullable<Int32>>\n  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int32))\n  name.vb: IEnumerable(Of Nullable(Of Int32))\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}}\n  nameWithType: IEnumerable<Nullable<Int32>>\n  nameWithType.vb: IEnumerable(Of Nullable(Of Int32))\n- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Nullable<Int64>>\n  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Int64))\n  name.vb: IEnumerable(Of Nullable(Of Int64))\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}}\n  nameWithType: IEnumerable<Nullable<Int64>>\n  nameWithType.vb: IEnumerable(Of Nullable(Of Int64))\n- uid: System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Nullable<Single>>\n  fullName: System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Nullable(Of System.Single))\n  name.vb: IEnumerable(Of Nullable(Of Single))\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Nullable{System.Single}}\n  nameWithType: IEnumerable<Nullable<Single>>\n  nameWithType.vb: IEnumerable(Of Nullable(Of Single))\n- uid: System.Nullable{System.Single}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Single>\n  fullName: System.Nullable<System.Single>\n  fullname.vb: System.Nullable(Of System.Single)\n  name.vb: Nullable(Of Single)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Single}\n  nameWithType: Nullable<Single>\n  nameWithType.vb: Nullable(Of Single)\n- uid: System.Collections.Generic.IEnumerable{System.Single}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Single>\n  fullName: System.Collections.Generic.IEnumerable<System.Single>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Single)\n  name.vb: IEnumerable(Of Single)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Single}\n  nameWithType: IEnumerable<Single>\n  nameWithType.vb: IEnumerable(Of Single)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.Func{{TSource},System.Decimal}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Decimal>\n  fullName: System.Func<TSource, System.Decimal>\n  fullname.vb: System.Func(Of TSource, System.Decimal)\n  name.vb: Func(Of TSource, Decimal)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Decimal}\n  nameWithType: Func<TSource, Decimal>\n  nameWithType.vb: Func(Of TSource, Decimal)\n- uid: System.Func{{TSource},System.Double}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Double>\n  fullName: System.Func<TSource, System.Double>\n  fullname.vb: System.Func(Of TSource, System.Double)\n  name.vb: Func(Of TSource, Double)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Double}\n  nameWithType: Func<TSource, Double>\n  nameWithType.vb: Func(Of TSource, Double)\n- uid: System.Func{{TSource},System.Int32}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Int32>\n  fullName: System.Func<TSource, System.Int32>\n  fullname.vb: System.Func(Of TSource, System.Int32)\n  name.vb: Func(Of TSource, Int32)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Int32}\n  nameWithType: Func<TSource, Int32>\n  nameWithType.vb: Func(Of TSource, Int32)\n- uid: System.Func{{TSource},System.Int64}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Int64>\n  fullName: System.Func<TSource, System.Int64>\n  fullname.vb: System.Func(Of TSource, System.Int64)\n  name.vb: Func(Of TSource, Int64)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Int64}\n  nameWithType: Func<TSource, Int64>\n  nameWithType.vb: Func(Of TSource, Int64)\n- uid: System.Func{{TSource},System.Nullable{System.Decimal}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Nullable<Decimal>>\n  fullName: System.Func<TSource, System.Nullable<System.Decimal>>\n  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Decimal))\n  name.vb: Func(Of TSource, Nullable(Of Decimal))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Nullable{System.Decimal}}\n  nameWithType: Func<TSource, Nullable<Decimal>>\n  nameWithType.vb: Func(Of TSource, Nullable(Of Decimal))\n- uid: System.Func{{TSource},System.Nullable{System.Double}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Nullable<Double>>\n  fullName: System.Func<TSource, System.Nullable<System.Double>>\n  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Double))\n  name.vb: Func(Of TSource, Nullable(Of Double))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Nullable{System.Double}}\n  nameWithType: Func<TSource, Nullable<Double>>\n  nameWithType.vb: Func(Of TSource, Nullable(Of Double))\n- uid: System.Func{{TSource},System.Nullable{System.Int32}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Nullable<Int32>>\n  fullName: System.Func<TSource, System.Nullable<System.Int32>>\n  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int32))\n  name.vb: Func(Of TSource, Nullable(Of Int32))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Nullable{System.Int32}}\n  nameWithType: Func<TSource, Nullable<Int32>>\n  nameWithType.vb: Func(Of TSource, Nullable(Of Int32))\n- uid: System.Func{{TSource},System.Nullable{System.Int64}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Nullable<Int64>>\n  fullName: System.Func<TSource, System.Nullable<System.Int64>>\n  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int64))\n  name.vb: Func(Of TSource, Nullable(Of Int64))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Nullable{System.Int64}}\n  nameWithType: Func<TSource, Nullable<Int64>>\n  nameWithType.vb: Func(Of TSource, Nullable(Of Int64))\n- uid: System.Func{{TSource},System.Nullable{System.Single}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Nullable<Single>>\n  fullName: System.Func<TSource, System.Nullable<System.Single>>\n  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Single))\n  name.vb: Func(Of TSource, Nullable(Of Single))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Nullable{System.Single}}\n  nameWithType: Func<TSource, Nullable<Single>>\n  nameWithType.vb: Func(Of TSource, Nullable(Of Single))\n- uid: System.Func{{TSource},System.Single}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, Single>\n  fullName: System.Func<TSource, System.Single>\n  fullname.vb: System.Func(Of TSource, System.Single)\n  name.vb: Func(Of TSource, Single)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Single}\n  nameWithType: Func<TSource, Single>\n  nameWithType.vb: Func(Of TSource, Single)\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Collections.Generic.IEnumerable{{TResult}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TResult>\n  fullName: System.Collections.Generic.IEnumerable<TResult>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TResult)\n  name.vb: IEnumerable(Of TResult)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``0}\n  nameWithType: IEnumerable<TResult>\n  nameWithType.vb: IEnumerable(Of TResult)\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Collections.Generic.IEqualityComparer{{TSource}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<TSource>\n  fullName: System.Collections.Generic.IEqualityComparer<TSource>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TSource)\n  name.vb: IEqualityComparer(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEqualityComparer{``0}\n  nameWithType: IEqualityComparer<TSource>\n  nameWithType.vb: IEqualityComparer(Of TSource)\n- uid: System.Collections.Generic.IEqualityComparer`1\n  isExternal: false\n  name: IEqualityComparer<T>\n  fullName: System.Collections.Generic.IEqualityComparer<T>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)\n  name.vb: IEqualityComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEqualityComparer`1\n  nameWithType: IEqualityComparer<T>\n  nameWithType.vb: IEqualityComparer(Of T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Func{{TSource},{TKey}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, TKey>\n  fullName: System.Func<TSource, TKey>\n  fullname.vb: System.Func(Of TSource, TKey)\n  name.vb: Func(Of TSource, TKey)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``1}\n  nameWithType: Func<TSource, TKey>\n  nameWithType.vb: Func(Of TSource, TKey)\n- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TSource}}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<IGrouping<TKey, TSource>>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TSource>>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TSource))\n  name.vb: IEnumerable(Of IGrouping(Of TKey, TSource))\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    fullName: System.Linq.IGrouping\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    fullName: System.Linq.IGrouping\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``1,``0}}\n  nameWithType: IEnumerable<IGrouping<TKey, TSource>>\n  nameWithType.vb: IEnumerable(Of IGrouping(Of TKey, TSource))\n- uid: System.Collections.Generic.IEqualityComparer{{TKey}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEqualityComparer`1\n  name: IEqualityComparer<TKey>\n  fullName: System.Collections.Generic.IEqualityComparer<TKey>\n  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)\n  name.vb: IEqualityComparer(Of TKey)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEqualityComparer`1\n    name: IEqualityComparer\n    fullName: System.Collections.Generic.IEqualityComparer\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEqualityComparer{``1}\n  nameWithType: IEqualityComparer<TKey>\n  nameWithType.vb: IEqualityComparer(Of TKey)\n- uid: System.Func{{TSource},{TElement}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, TElement>\n  fullName: System.Func<TSource, TElement>\n  fullname.vb: System.Func(Of TSource, TElement)\n  name.vb: Func(Of TSource, TElement)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``2}\n  nameWithType: Func<TSource, TElement>\n  nameWithType.vb: Func(Of TSource, TElement)\n- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<IGrouping<TKey, TElement>>\n  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TElement))\n  name.vb: IEnumerable(Of IGrouping(Of TKey, TElement))\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    fullName: System.Linq.IGrouping\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Linq.IGrouping`2\n    name: IGrouping\n    fullName: System.Linq.IGrouping\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``1,``2}}\n  nameWithType: IEnumerable<IGrouping<TKey, TElement>>\n  nameWithType.vb: IEnumerable(Of IGrouping(Of TKey, TElement))\n- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TKey, IEnumerable<TSource>, TResult>\n  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>\n  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)\n  name.vb: Func(Of TKey, IEnumerable(Of TSource), TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}\n  nameWithType: Func<TKey, IEnumerable<TSource>, TResult>\n  nameWithType.vb: Func(Of TKey, IEnumerable(Of TSource), TResult)\n- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TKey, IEnumerable<TElement>, TResult>\n  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>\n  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)\n  name.vb: Func(Of TKey, IEnumerable(Of TElement), TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}\n  nameWithType: Func<TKey, IEnumerable<TElement>, TResult>\n  nameWithType.vb: Func(Of TKey, IEnumerable(Of TElement), TResult)\n- uid: System.Collections.Generic.IEnumerable{{TOuter}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TOuter>\n  fullName: System.Collections.Generic.IEnumerable<TOuter>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TOuter)\n  name.vb: IEnumerable(Of TOuter)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TOuter\n    fullName: TOuter\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TOuter\n    fullName: TOuter\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``0}\n  nameWithType: IEnumerable<TOuter>\n  nameWithType.vb: IEnumerable(Of TOuter)\n- uid: System.Collections.Generic.IEnumerable{{TInner}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TInner>\n  fullName: System.Collections.Generic.IEnumerable<TInner>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TInner)\n  name.vb: IEnumerable(Of TInner)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TInner\n    fullName: TInner\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TInner\n    fullName: TInner\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``1}\n  nameWithType: IEnumerable<TInner>\n  nameWithType.vb: IEnumerable(Of TInner)\n- uid: System.Func{{TOuter},{TKey}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TOuter, TKey>\n  fullName: System.Func<TOuter, TKey>\n  fullname.vb: System.Func(Of TOuter, TKey)\n  name.vb: Func(Of TOuter, TKey)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``2}\n  nameWithType: Func<TOuter, TKey>\n  nameWithType.vb: Func(Of TOuter, TKey)\n- uid: System.Func{{TInner},{TKey}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TInner, TKey>\n  fullName: System.Func<TInner, TKey>\n  fullname.vb: System.Func(Of TInner, TKey)\n  name.vb: Func(Of TInner, TKey)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TInner\n    fullName: TInner\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TInner\n    fullName: TInner\n  - name: ', '\n    fullName: ', '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``1,``2}\n  nameWithType: Func<TInner, TKey>\n  nameWithType.vb: Func(Of TInner, TKey)\n- uid: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TOuter, IEnumerable<TInner>, TResult>\n  fullName: System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>\n  fullname.vb: System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)\n  name.vb: Func(Of TOuter, IEnumerable(Of TInner), TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TInner\n    fullName: TInner\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TInner\n    fullName: TInner\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}\n  nameWithType: Func<TOuter, IEnumerable<TInner>, TResult>\n  nameWithType.vb: Func(Of TOuter, IEnumerable(Of TInner), TResult)\n- uid: System.Func{{TOuter},{TInner},{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TOuter, TInner, TResult>\n  fullName: System.Func<TOuter, TInner, TResult>\n  fullname.vb: System.Func(Of TOuter, TInner, TResult)\n  name.vb: Func(Of TOuter, TInner, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - name: TInner\n    fullName: TInner\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TOuter\n    fullName: TOuter\n  - name: ', '\n    fullName: ', '\n  - name: TInner\n    fullName: TInner\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``1,``3}\n  nameWithType: Func<TOuter, TInner, TResult>\n  nameWithType.vb: Func(Of TOuter, TInner, TResult)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Nullable{System.Int32}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Int32>\n  fullName: System.Nullable<System.Int32>\n  fullname.vb: System.Nullable(Of System.Int32)\n  name.vb: Nullable(Of Int32)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Int32}\n  nameWithType: Nullable<Int32>\n  nameWithType.vb: Nullable(Of Int32)\n- uid: System.Nullable{System.Int64}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n  fullname.vb: System.Nullable(Of System.Int64)\n  name.vb: Nullable(Of Int64)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.Int64}\n  nameWithType: Nullable<Int64>\n  nameWithType.vb: Nullable(Of Int64)\n- uid: System.Func{{TSource},{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, TResult>\n  fullName: System.Func<TSource, TResult>\n  fullname.vb: System.Func(Of TSource, TResult)\n  name.vb: Func(Of TSource, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``1}\n  nameWithType: Func<TSource, TResult>\n  nameWithType.vb: Func(Of TSource, TResult)\n- uid: System.Linq.IOrderedEnumerable{{TSource}}\n  parent: System.Linq\n  definition: System.Linq.IOrderedEnumerable`1\n  name: IOrderedEnumerable<TSource>\n  fullName: System.Linq.IOrderedEnumerable<TSource>\n  fullname.vb: System.Linq.IOrderedEnumerable(Of TSource)\n  name.vb: IOrderedEnumerable(Of TSource)\n  spec.csharp:\n  - uid: System.Linq.IOrderedEnumerable`1\n    name: IOrderedEnumerable\n    fullName: System.Linq.IOrderedEnumerable\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IOrderedEnumerable`1\n    name: IOrderedEnumerable\n    fullName: System.Linq.IOrderedEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.IOrderedEnumerable{``0}\n  nameWithType: IOrderedEnumerable<TSource>\n  nameWithType.vb: IOrderedEnumerable(Of TSource)\n- uid: System.Linq.IOrderedEnumerable`1\n  parent: System.Linq\n  isExternal: false\n  name: IOrderedEnumerable<TElement>\n  fullName: System.Linq.IOrderedEnumerable<TElement>\n  fullname.vb: System.Linq.IOrderedEnumerable(Of TElement)\n  name.vb: IOrderedEnumerable(Of TElement)\n  spec.csharp:\n  - uid: System.Linq.IOrderedEnumerable`1\n    name: IOrderedEnumerable\n    fullName: System.Linq.IOrderedEnumerable\n  - name: <\n    fullName: <\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IOrderedEnumerable`1\n    name: IOrderedEnumerable\n    fullName: System.Linq.IOrderedEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.IOrderedEnumerable`1\n  nameWithType: IOrderedEnumerable<TElement>\n  nameWithType.vb: IOrderedEnumerable(Of TElement)\n- uid: System.Collections.Generic.IComparer{{TKey}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IComparer`1\n  name: IComparer<TKey>\n  fullName: System.Collections.Generic.IComparer<TKey>\n  fullname.vb: System.Collections.Generic.IComparer(Of TKey)\n  name.vb: IComparer(Of TKey)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IComparer{``1}\n  nameWithType: IComparer<TKey>\n  nameWithType.vb: IComparer(Of TKey)\n- uid: System.Collections.Generic.IComparer`1\n  isExternal: false\n  name: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n  fullname.vb: System.Collections.Generic.IComparer(Of T)\n  name.vb: IComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IComparer`1\n  nameWithType: IComparer<T>\n  nameWithType.vb: IComparer(Of T)\n- uid: System.Func{{TSource},System.Int32,{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TSource, Int32, TResult>\n  fullName: System.Func<TSource, System.Int32, TResult>\n  fullname.vb: System.Func(Of TSource, System.Int32, TResult)\n  name.vb: Func(Of TSource, Int32, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Int32,``1}\n  nameWithType: Func<TSource, Int32, TResult>\n  nameWithType.vb: Func(Of TSource, Int32, TResult)\n- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, IEnumerable<TResult>>\n  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>\n  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))\n  name.vb: Func(Of TSource, IEnumerable(Of TResult))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1}}\n  nameWithType: Func<TSource, IEnumerable<TResult>>\n  nameWithType.vb: Func(Of TSource, IEnumerable(Of TResult))\n- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TSource, Int32, IEnumerable<TResult>>\n  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>\n  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult))\n  name.vb: Func(Of TSource, Int32, IEnumerable(Of TResult))\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}\n  nameWithType: Func<TSource, Int32, IEnumerable<TResult>>\n  nameWithType.vb: Func(Of TSource, Int32, IEnumerable(Of TResult))\n- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}\n  parent: System\n  definition: System.Func`2\n  name: Func<TSource, IEnumerable<TCollection>>\n  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>\n  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))\n  name.vb: Func(Of TSource, IEnumerable(Of TCollection))\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TCollection\n    fullName: TCollection\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TCollection\n    fullName: TCollection\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1}}\n  nameWithType: Func<TSource, IEnumerable<TCollection>>\n  nameWithType.vb: Func(Of TSource, IEnumerable(Of TCollection))\n- uid: System.Func{{TSource},{TCollection},{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TSource, TCollection, TResult>\n  fullName: System.Func<TSource, TCollection, TResult>\n  fullname.vb: System.Func(Of TSource, TCollection, TResult)\n  name.vb: Func(Of TSource, TCollection, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TCollection\n    fullName: TCollection\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - name: TCollection\n    fullName: TCollection\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``1,``2}\n  nameWithType: Func<TSource, TCollection, TResult>\n  nameWithType.vb: Func(Of TSource, TCollection, TResult)\n- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TSource, Int32, IEnumerable<TCollection>>\n  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>\n  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection))\n  name.vb: Func(Of TSource, Int32, IEnumerable(Of TCollection))\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TCollection\n    fullName: TCollection\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TCollection\n    fullName: TCollection\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}\n  nameWithType: Func<TSource, Int32, IEnumerable<TCollection>>\n  nameWithType.vb: Func(Of TSource, Int32, IEnumerable(Of TCollection))\n- uid: System.Func{{TSource},System.Int32,System.Boolean}\n  parent: System\n  definition: System.Func`3\n  name: Func<TSource, Int32, Boolean>\n  fullName: System.Func<TSource, System.Int32, System.Boolean>\n  fullname.vb: System.Func(Of TSource, System.Int32, System.Boolean)\n  name.vb: Func(Of TSource, Int32, Boolean)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,System.Int32,System.Boolean}\n  nameWithType: Func<TSource, Int32, Boolean>\n  nameWithType.vb: Func(Of TSource, Int32, Boolean)\n- uid: '{TSource}[]'\n  name: TSource[]\n  fullName: TSource[]\n  fullname.vb: TSource()\n  name.vb: TSource()\n  spec.csharp:\n  - name: TSource\n    fullName: TSource\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - name: TSource\n    fullName: TSource\n  - name: ()\n    fullName: ()\n  nameWithType: TSource[]\n  nameWithType.vb: TSource()\n- uid: System.Collections.Generic.Dictionary{{TKey},{TSource}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.Dictionary`2\n  name: Dictionary<TKey, TSource>\n  fullName: System.Collections.Generic.Dictionary<TKey, TSource>\n  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TSource)\n  name.vb: Dictionary(Of TKey, TSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.Dictionary{``1,``0}\n  nameWithType: Dictionary<TKey, TSource>\n  nameWithType.vb: Dictionary(Of TKey, TSource)\n- uid: System.Collections.Generic.Dictionary`2\n  parent: System.Collections.Generic\n  isExternal: false\n  name: Dictionary<TKey, TValue>\n  fullName: System.Collections.Generic.Dictionary<TKey, TValue>\n  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)\n  name.vb: Dictionary(Of TKey, TValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TValue\n    fullName: TValue\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.Dictionary`2\n  nameWithType: Dictionary<TKey, TValue>\n  nameWithType.vb: Dictionary(Of TKey, TValue)\n- uid: System.Collections.Generic.Dictionary{{TKey},{TElement}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.Dictionary`2\n  name: Dictionary<TKey, TElement>\n  fullName: System.Collections.Generic.Dictionary<TKey, TElement>\n  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TElement)\n  name.vb: Dictionary(Of TKey, TElement)\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.Dictionary{``1,``2}\n  nameWithType: Dictionary<TKey, TElement>\n  nameWithType.vb: Dictionary(Of TKey, TElement)\n- uid: System.Collections.Generic.List{{TSource}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.List`1\n  name: List<TSource>\n  fullName: System.Collections.Generic.List<TSource>\n  fullname.vb: System.Collections.Generic.List(Of TSource)\n  name.vb: List(Of TSource)\n  spec.csharp:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    fullName: System.Collections.Generic.List\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    fullName: System.Collections.Generic.List\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.List{``0}\n  nameWithType: List<TSource>\n  nameWithType.vb: List(Of TSource)\n- uid: System.Collections.Generic.List`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<T>\n  fullName: System.Collections.Generic.List<T>\n  fullname.vb: System.Collections.Generic.List(Of T)\n  name.vb: List(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    fullName: System.Collections.Generic.List\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    fullName: System.Collections.Generic.List\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.List`1\n  nameWithType: List<T>\n  nameWithType.vb: List(Of T)\n- uid: System.Linq.ILookup{{TKey},{TSource}}\n  parent: System.Linq\n  definition: System.Linq.ILookup`2\n  name: ILookup<TKey, TSource>\n  fullName: System.Linq.ILookup<TKey, TSource>\n  fullname.vb: System.Linq.ILookup(Of TKey, TSource)\n  name.vb: ILookup(Of TKey, TSource)\n  spec.csharp:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    fullName: System.Linq.ILookup\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    fullName: System.Linq.ILookup\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TSource\n    fullName: TSource\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.ILookup{``1,``0}'\n  nameWithType: ILookup<TKey, TSource>\n  nameWithType.vb: ILookup(Of TKey, TSource)\n- uid: System.Linq.ILookup`2\n  isExternal: false\n  name: ILookup<, >\n  fullName: System.Linq.ILookup<, >\n  fullname.vb: System.Linq.ILookup(Of , )\n  name.vb: ILookup(Of , )\n  spec.csharp:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    fullName: System.Linq.ILookup\n  - name: <\n    fullName: <\n  - {}\n  - name: ', '\n    fullName: ', '\n  - {}\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    fullName: System.Linq.ILookup\n  - name: '(Of '\n    fullName: '(Of '\n  - {}\n  - name: ', '\n    fullName: ', '\n  - {}\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.ILookup`2\n  nameWithType: ILookup<, >\n  nameWithType.vb: ILookup(Of , )\n- uid: System.Linq.ILookup{{TKey},{TElement}}\n  parent: System.Linq\n  definition: System.Linq.ILookup`2\n  name: ILookup<TKey, TElement>\n  fullName: System.Linq.ILookup<TKey, TElement>\n  fullname.vb: System.Linq.ILookup(Of TKey, TElement)\n  name.vb: ILookup(Of TKey, TElement)\n  spec.csharp:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    fullName: System.Linq.ILookup\n  - name: <\n    fullName: <\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.ILookup`2\n    name: ILookup\n    fullName: System.Linq.ILookup\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TKey\n    fullName: TKey\n  - name: ', '\n    fullName: ', '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  commentId: '!:System.Linq.ILookup{``1,``2}'\n  nameWithType: ILookup<TKey, TElement>\n  nameWithType.vb: ILookup(Of TKey, TElement)\n- uid: System.Collections.Generic.IEnumerable{{TFirst}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TFirst>\n  fullName: System.Collections.Generic.IEnumerable<TFirst>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TFirst)\n  name.vb: IEnumerable(Of TFirst)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TFirst\n    fullName: TFirst\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TFirst\n    fullName: TFirst\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``0}\n  nameWithType: IEnumerable<TFirst>\n  nameWithType.vb: IEnumerable(Of TFirst)\n- uid: System.Collections.Generic.IEnumerable{{TSecond}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TSecond>\n  fullName: System.Collections.Generic.IEnumerable<TSecond>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of TSecond)\n  name.vb: IEnumerable(Of TSecond)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TSecond\n    fullName: TSecond\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TSecond\n    fullName: TSecond\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{``1}\n  nameWithType: IEnumerable<TSecond>\n  nameWithType.vb: IEnumerable(Of TSecond)\n- uid: System.Func{{TFirst},{TSecond},{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<TFirst, TSecond, TResult>\n  fullName: System.Func<TFirst, TSecond, TResult>\n  fullname.vb: System.Func(Of TFirst, TSecond, TResult)\n  name.vb: Func(Of TFirst, TSecond, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TFirst\n    fullName: TFirst\n  - name: ', '\n    fullName: ', '\n  - name: TSecond\n    fullName: TSecond\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TFirst\n    fullName: TFirst\n  - name: ', '\n    fullName: ', '\n  - name: TSecond\n    fullName: TSecond\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0,``1,``2}\n  nameWithType: Func<TFirst, TSecond, TResult>\n  nameWithType.vb: Func(Of TFirst, TSecond, TResult)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}